
lcr-meter-stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007890  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08007a58  08007a58  00008a58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c88  08007c88  00009070  2**0
                  CONTENTS
  4 .ARM          00000008  08007c88  08007c88  00008c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c90  08007c90  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c90  08007c90  00008c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c94  08007c94  00008c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08007c98  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000076c  20000070  08007d08  00009070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007dc  08007d08  000097dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015775  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e16  00000000  00000000  0001e815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  00021630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000edd  00000000  00000000  00022938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a37  00000000  00000000  00023815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017862  00000000  00000000  0004824c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e259b  00000000  00000000  0005faae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00142049  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005834  00000000  00000000  0014208c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  001478c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000070 	.word	0x20000070
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007a40 	.word	0x08007a40

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000074 	.word	0x20000074
 8000204:	08007a40 	.word	0x08007a40

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b98a 	b.w	8000efc <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f826 	bl	8000c40 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__aeabi_f2ulz>:
 8000c00:	b5d0      	push	{r4, r6, r7, lr}
 8000c02:	f7ff fc65 	bl	80004d0 <__aeabi_f2d>
 8000c06:	4b0c      	ldr	r3, [pc, #48]	@ (8000c38 <__aeabi_f2ulz+0x38>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	4606      	mov	r6, r0
 8000c0c:	460f      	mov	r7, r1
 8000c0e:	f7ff fcb7 	bl	8000580 <__aeabi_dmul>
 8000c12:	f000 f975 	bl	8000f00 <__aeabi_d2uiz>
 8000c16:	4604      	mov	r4, r0
 8000c18:	f7ff fc38 	bl	800048c <__aeabi_ui2d>
 8000c1c:	4b07      	ldr	r3, [pc, #28]	@ (8000c3c <__aeabi_f2ulz+0x3c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f7ff fcae 	bl	8000580 <__aeabi_dmul>
 8000c24:	4602      	mov	r2, r0
 8000c26:	460b      	mov	r3, r1
 8000c28:	4630      	mov	r0, r6
 8000c2a:	4639      	mov	r1, r7
 8000c2c:	f7ff faf0 	bl	8000210 <__aeabi_dsub>
 8000c30:	f000 f966 	bl	8000f00 <__aeabi_d2uiz>
 8000c34:	4621      	mov	r1, r4
 8000c36:	bdd0      	pop	{r4, r6, r7, pc}
 8000c38:	3df00000 	.word	0x3df00000
 8000c3c:	41f00000 	.word	0x41f00000

08000c40 <__udivmoddi4>:
 8000c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c44:	9d08      	ldr	r5, [sp, #32]
 8000c46:	460c      	mov	r4, r1
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d14e      	bne.n	8000cea <__udivmoddi4+0xaa>
 8000c4c:	4694      	mov	ip, r2
 8000c4e:	458c      	cmp	ip, r1
 8000c50:	4686      	mov	lr, r0
 8000c52:	fab2 f282 	clz	r2, r2
 8000c56:	d962      	bls.n	8000d1e <__udivmoddi4+0xde>
 8000c58:	b14a      	cbz	r2, 8000c6e <__udivmoddi4+0x2e>
 8000c5a:	f1c2 0320 	rsb	r3, r2, #32
 8000c5e:	4091      	lsls	r1, r2
 8000c60:	fa20 f303 	lsr.w	r3, r0, r3
 8000c64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c68:	4319      	orrs	r1, r3
 8000c6a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c72:	fa1f f68c 	uxth.w	r6, ip
 8000c76:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c7e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c86:	fb04 f106 	mul.w	r1, r4, r6
 8000c8a:	4299      	cmp	r1, r3
 8000c8c:	d90a      	bls.n	8000ca4 <__udivmoddi4+0x64>
 8000c8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c92:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c96:	f080 8112 	bcs.w	8000ebe <__udivmoddi4+0x27e>
 8000c9a:	4299      	cmp	r1, r3
 8000c9c:	f240 810f 	bls.w	8000ebe <__udivmoddi4+0x27e>
 8000ca0:	3c02      	subs	r4, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1a59      	subs	r1, r3, r1
 8000ca6:	fa1f f38e 	uxth.w	r3, lr
 8000caa:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cae:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb6:	fb00 f606 	mul.w	r6, r0, r6
 8000cba:	429e      	cmp	r6, r3
 8000cbc:	d90a      	bls.n	8000cd4 <__udivmoddi4+0x94>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cc6:	f080 80fc 	bcs.w	8000ec2 <__udivmoddi4+0x282>
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	f240 80f9 	bls.w	8000ec2 <__udivmoddi4+0x282>
 8000cd0:	4463      	add	r3, ip
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	1b9b      	subs	r3, r3, r6
 8000cd6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cda:	2100      	movs	r1, #0
 8000cdc:	b11d      	cbz	r5, 8000ce6 <__udivmoddi4+0xa6>
 8000cde:	40d3      	lsrs	r3, r2
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d905      	bls.n	8000cfa <__udivmoddi4+0xba>
 8000cee:	b10d      	cbz	r5, 8000cf4 <__udivmoddi4+0xb4>
 8000cf0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4608      	mov	r0, r1
 8000cf8:	e7f5      	b.n	8000ce6 <__udivmoddi4+0xa6>
 8000cfa:	fab3 f183 	clz	r1, r3
 8000cfe:	2900      	cmp	r1, #0
 8000d00:	d146      	bne.n	8000d90 <__udivmoddi4+0x150>
 8000d02:	42a3      	cmp	r3, r4
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0xcc>
 8000d06:	4290      	cmp	r0, r2
 8000d08:	f0c0 80f0 	bcc.w	8000eec <__udivmoddi4+0x2ac>
 8000d0c:	1a86      	subs	r6, r0, r2
 8000d0e:	eb64 0303 	sbc.w	r3, r4, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	2d00      	cmp	r5, #0
 8000d16:	d0e6      	beq.n	8000ce6 <__udivmoddi4+0xa6>
 8000d18:	e9c5 6300 	strd	r6, r3, [r5]
 8000d1c:	e7e3      	b.n	8000ce6 <__udivmoddi4+0xa6>
 8000d1e:	2a00      	cmp	r2, #0
 8000d20:	f040 8090 	bne.w	8000e44 <__udivmoddi4+0x204>
 8000d24:	eba1 040c 	sub.w	r4, r1, ip
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	fa1f f78c 	uxth.w	r7, ip
 8000d30:	2101      	movs	r1, #1
 8000d32:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d3a:	fb08 4416 	mls	r4, r8, r6, r4
 8000d3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d42:	fb07 f006 	mul.w	r0, r7, r6
 8000d46:	4298      	cmp	r0, r3
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x11c>
 8000d4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x11a>
 8000d54:	4298      	cmp	r0, r3
 8000d56:	f200 80cd 	bhi.w	8000ef4 <__udivmoddi4+0x2b4>
 8000d5a:	4626      	mov	r6, r4
 8000d5c:	1a1c      	subs	r4, r3, r0
 8000d5e:	fa1f f38e 	uxth.w	r3, lr
 8000d62:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d66:	fb08 4410 	mls	r4, r8, r0, r4
 8000d6a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6e:	fb00 f707 	mul.w	r7, r0, r7
 8000d72:	429f      	cmp	r7, r3
 8000d74:	d908      	bls.n	8000d88 <__udivmoddi4+0x148>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d7e:	d202      	bcs.n	8000d86 <__udivmoddi4+0x146>
 8000d80:	429f      	cmp	r7, r3
 8000d82:	f200 80b0 	bhi.w	8000ee6 <__udivmoddi4+0x2a6>
 8000d86:	4620      	mov	r0, r4
 8000d88:	1bdb      	subs	r3, r3, r7
 8000d8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8e:	e7a5      	b.n	8000cdc <__udivmoddi4+0x9c>
 8000d90:	f1c1 0620 	rsb	r6, r1, #32
 8000d94:	408b      	lsls	r3, r1
 8000d96:	fa22 f706 	lsr.w	r7, r2, r6
 8000d9a:	431f      	orrs	r7, r3
 8000d9c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000da0:	fa04 f301 	lsl.w	r3, r4, r1
 8000da4:	ea43 030c 	orr.w	r3, r3, ip
 8000da8:	40f4      	lsrs	r4, r6
 8000daa:	fa00 f801 	lsl.w	r8, r0, r1
 8000dae:	0c38      	lsrs	r0, r7, #16
 8000db0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000db4:	fbb4 fef0 	udiv	lr, r4, r0
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	fb00 441e 	mls	r4, r0, lr, r4
 8000dc0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc4:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc8:	45a1      	cmp	r9, r4
 8000dca:	fa02 f201 	lsl.w	r2, r2, r1
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x1a6>
 8000dd0:	193c      	adds	r4, r7, r4
 8000dd2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dd6:	f080 8084 	bcs.w	8000ee2 <__udivmoddi4+0x2a2>
 8000dda:	45a1      	cmp	r9, r4
 8000ddc:	f240 8081 	bls.w	8000ee2 <__udivmoddi4+0x2a2>
 8000de0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	eba4 0409 	sub.w	r4, r4, r9
 8000dea:	fa1f f983 	uxth.w	r9, r3
 8000dee:	fbb4 f3f0 	udiv	r3, r4, r0
 8000df2:	fb00 4413 	mls	r4, r0, r3, r4
 8000df6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfa:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dfe:	45a4      	cmp	ip, r4
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x1d2>
 8000e02:	193c      	adds	r4, r7, r4
 8000e04:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e08:	d267      	bcs.n	8000eda <__udivmoddi4+0x29a>
 8000e0a:	45a4      	cmp	ip, r4
 8000e0c:	d965      	bls.n	8000eda <__udivmoddi4+0x29a>
 8000e0e:	3b02      	subs	r3, #2
 8000e10:	443c      	add	r4, r7
 8000e12:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e16:	fba0 9302 	umull	r9, r3, r0, r2
 8000e1a:	eba4 040c 	sub.w	r4, r4, ip
 8000e1e:	429c      	cmp	r4, r3
 8000e20:	46ce      	mov	lr, r9
 8000e22:	469c      	mov	ip, r3
 8000e24:	d351      	bcc.n	8000eca <__udivmoddi4+0x28a>
 8000e26:	d04e      	beq.n	8000ec6 <__udivmoddi4+0x286>
 8000e28:	b155      	cbz	r5, 8000e40 <__udivmoddi4+0x200>
 8000e2a:	ebb8 030e 	subs.w	r3, r8, lr
 8000e2e:	eb64 040c 	sbc.w	r4, r4, ip
 8000e32:	fa04 f606 	lsl.w	r6, r4, r6
 8000e36:	40cb      	lsrs	r3, r1
 8000e38:	431e      	orrs	r6, r3
 8000e3a:	40cc      	lsrs	r4, r1
 8000e3c:	e9c5 6400 	strd	r6, r4, [r5]
 8000e40:	2100      	movs	r1, #0
 8000e42:	e750      	b.n	8000ce6 <__udivmoddi4+0xa6>
 8000e44:	f1c2 0320 	rsb	r3, r2, #32
 8000e48:	fa20 f103 	lsr.w	r1, r0, r3
 8000e4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e50:	fa24 f303 	lsr.w	r3, r4, r3
 8000e54:	4094      	lsls	r4, r2
 8000e56:	430c      	orrs	r4, r1
 8000e58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e5c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e68:	fb08 3110 	mls	r1, r8, r0, r3
 8000e6c:	0c23      	lsrs	r3, r4, #16
 8000e6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e72:	fb00 f107 	mul.w	r1, r0, r7
 8000e76:	4299      	cmp	r1, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x24c>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e82:	d22c      	bcs.n	8000ede <__udivmoddi4+0x29e>
 8000e84:	4299      	cmp	r1, r3
 8000e86:	d92a      	bls.n	8000ede <__udivmoddi4+0x29e>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4463      	add	r3, ip
 8000e8c:	1a5b      	subs	r3, r3, r1
 8000e8e:	b2a4      	uxth	r4, r4
 8000e90:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e94:	fb08 3311 	mls	r3, r8, r1, r3
 8000e98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e9c:	fb01 f307 	mul.w	r3, r1, r7
 8000ea0:	42a3      	cmp	r3, r4
 8000ea2:	d908      	bls.n	8000eb6 <__udivmoddi4+0x276>
 8000ea4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000eac:	d213      	bcs.n	8000ed6 <__udivmoddi4+0x296>
 8000eae:	42a3      	cmp	r3, r4
 8000eb0:	d911      	bls.n	8000ed6 <__udivmoddi4+0x296>
 8000eb2:	3902      	subs	r1, #2
 8000eb4:	4464      	add	r4, ip
 8000eb6:	1ae4      	subs	r4, r4, r3
 8000eb8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ebc:	e739      	b.n	8000d32 <__udivmoddi4+0xf2>
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	e6f0      	b.n	8000ca4 <__udivmoddi4+0x64>
 8000ec2:	4608      	mov	r0, r1
 8000ec4:	e706      	b.n	8000cd4 <__udivmoddi4+0x94>
 8000ec6:	45c8      	cmp	r8, r9
 8000ec8:	d2ae      	bcs.n	8000e28 <__udivmoddi4+0x1e8>
 8000eca:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ece:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ed2:	3801      	subs	r0, #1
 8000ed4:	e7a8      	b.n	8000e28 <__udivmoddi4+0x1e8>
 8000ed6:	4631      	mov	r1, r6
 8000ed8:	e7ed      	b.n	8000eb6 <__udivmoddi4+0x276>
 8000eda:	4603      	mov	r3, r0
 8000edc:	e799      	b.n	8000e12 <__udivmoddi4+0x1d2>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e7d4      	b.n	8000e8c <__udivmoddi4+0x24c>
 8000ee2:	46d6      	mov	lr, sl
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1a6>
 8000ee6:	4463      	add	r3, ip
 8000ee8:	3802      	subs	r0, #2
 8000eea:	e74d      	b.n	8000d88 <__udivmoddi4+0x148>
 8000eec:	4606      	mov	r6, r0
 8000eee:	4623      	mov	r3, r4
 8000ef0:	4608      	mov	r0, r1
 8000ef2:	e70f      	b.n	8000d14 <__udivmoddi4+0xd4>
 8000ef4:	3e02      	subs	r6, #2
 8000ef6:	4463      	add	r3, ip
 8000ef8:	e730      	b.n	8000d5c <__udivmoddi4+0x11c>
 8000efa:	bf00      	nop

08000efc <__aeabi_idiv0>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <__aeabi_d2uiz>:
 8000f00:	004a      	lsls	r2, r1, #1
 8000f02:	d211      	bcs.n	8000f28 <__aeabi_d2uiz+0x28>
 8000f04:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000f08:	d211      	bcs.n	8000f2e <__aeabi_d2uiz+0x2e>
 8000f0a:	d50d      	bpl.n	8000f28 <__aeabi_d2uiz+0x28>
 8000f0c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000f10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f14:	d40e      	bmi.n	8000f34 <__aeabi_d2uiz+0x34>
 8000f16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f1a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f22:	fa23 f002 	lsr.w	r0, r3, r2
 8000f26:	4770      	bx	lr
 8000f28:	f04f 0000 	mov.w	r0, #0
 8000f2c:	4770      	bx	lr
 8000f2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f32:	d102      	bne.n	8000f3a <__aeabi_d2uiz+0x3a>
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295
 8000f38:	4770      	bx	lr
 8000f3a:	f04f 0000 	mov.w	r0, #0
 8000f3e:	4770      	bx	lr

08000f40 <AD9833_write>:

// MaKE SURE THIS IS DEFINED IN THE main.c FILE
extern SPI_HandleTypeDef hspi1; // SPI handle (Assuming SPI1 is used)


void AD9833_write(uint8_t data_high, uint8_t data_low) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	460a      	mov	r2, r1
 8000f4a:	71fb      	strb	r3, [r7, #7]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	71bb      	strb	r3, [r7, #6]
    uint8_t data_out[2] = {data_high, data_low};
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	733b      	strb	r3, [r7, #12]
 8000f54:	79bb      	ldrb	r3, [r7, #6]
 8000f56:	737b      	strb	r3, [r7, #13]
    

    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;  // CPOL = 1 (Clock idle high)
 8000f58:	4b10      	ldr	r3, [pc, #64]	@ (8000f9c <AD9833_write+0x5c>)
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;       // CPHA = 0 (Sample on the falling edge)
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f9c <AD9833_write+0x5c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	615a      	str	r2, [r3, #20]
    HAL_SPI_Init(&hspi1); // Restart the SPI module
 8000f64:	480d      	ldr	r0, [pc, #52]	@ (8000f9c <AD9833_write+0x5c>)
 8000f66:	f003 fb8b 	bl	8004680 <HAL_SPI_Init>

    HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f70:	480b      	ldr	r0, [pc, #44]	@ (8000fa0 <AD9833_write+0x60>)
 8000f72:	f002 f8ed 	bl	8003150 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data_out, 2, HAL_MAX_DELAY);
 8000f76:	f107 010c 	add.w	r1, r7, #12
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7e:	2202      	movs	r2, #2
 8000f80:	4806      	ldr	r0, [pc, #24]	@ (8000f9c <AD9833_write+0x5c>)
 8000f82:	f003 fc06 	bl	8004792 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_SET);
 8000f86:	2201      	movs	r2, #1
 8000f88:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f8c:	4804      	ldr	r0, [pc, #16]	@ (8000fa0 <AD9833_write+0x60>)
 8000f8e:	f002 f8df 	bl	8003150 <HAL_GPIO_WritePin>
}
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200000d4 	.word	0x200000d4
 8000fa0:	40020c00 	.word	0x40020c00

08000fa4 <AD9833_write4>:

void AD9833_write4(uint8_t data_l_high, uint8_t data_l_low, uint8_t data_h_high, uint8_t data_h_low) {
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4604      	mov	r4, r0
 8000fac:	4608      	mov	r0, r1
 8000fae:	4611      	mov	r1, r2
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4623      	mov	r3, r4
 8000fb4:	71fb      	strb	r3, [r7, #7]
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71bb      	strb	r3, [r7, #6]
 8000fba:	460b      	mov	r3, r1
 8000fbc:	717b      	strb	r3, [r7, #5]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	713b      	strb	r3, [r7, #4]
    uint8_t data_out[4] = {data_l_high, data_l_low, data_h_high, data_h_low};
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79bb      	ldrb	r3, [r7, #6]
 8000fc8:	737b      	strb	r3, [r7, #13]
 8000fca:	797b      	ldrb	r3, [r7, #5]
 8000fcc:	73bb      	strb	r3, [r7, #14]
 8000fce:	793b      	ldrb	r3, [r7, #4]
 8000fd0:	73fb      	strb	r3, [r7, #15]

    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;  // CPOL = 1 (Clock idle high)
 8000fd2:	4b10      	ldr	r3, [pc, #64]	@ (8001014 <AD9833_write4+0x70>)
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;       // CPHA = 0 (Sample on the falling edge)
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001014 <AD9833_write4+0x70>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	615a      	str	r2, [r3, #20]
    HAL_SPI_Init(&hspi1); // Restart the SPI module
 8000fde:	480d      	ldr	r0, [pc, #52]	@ (8001014 <AD9833_write4+0x70>)
 8000fe0:	f003 fb4e 	bl	8004680 <HAL_SPI_Init>

    HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fea:	480b      	ldr	r0, [pc, #44]	@ (8001018 <AD9833_write4+0x74>)
 8000fec:	f002 f8b0 	bl	8003150 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data_out, 4, HAL_MAX_DELAY);
 8000ff0:	f107 010c 	add.w	r1, r7, #12
 8000ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff8:	2204      	movs	r2, #4
 8000ffa:	4806      	ldr	r0, [pc, #24]	@ (8001014 <AD9833_write4+0x70>)
 8000ffc:	f003 fbc9 	bl	8004792 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_SET);
 8001000:	2201      	movs	r2, #1
 8001002:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001006:	4804      	ldr	r0, [pc, #16]	@ (8001018 <AD9833_write4+0x74>)
 8001008:	f002 f8a2 	bl	8003150 <HAL_GPIO_WritePin>
}
 800100c:	bf00      	nop
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	bd90      	pop	{r4, r7, pc}
 8001014:	200000d4 	.word	0x200000d4
 8001018:	40020c00 	.word	0x40020c00

0800101c <AD9833_set_freq>:

void AD9833_set_freq(float f) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	ed87 0a01 	vstr	s0, [r7, #4]
    AD9833_write(0b00100000, 0b10000000); // Control reg, start reset
 8001026:	2180      	movs	r1, #128	@ 0x80
 8001028:	2020      	movs	r0, #32
 800102a:	f7ff ff89 	bl	8000f40 <AD9833_write>

    uint64_t FRQREG = (uint64_t)((f * (1 << 28)) / MASTER_CLK);
 800102e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001032:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80010c8 <AD9833_set_freq+0xac>
 8001036:	ee67 7a87 	vmul.f32	s15, s15, s14
 800103a:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80010cc <AD9833_set_freq+0xb0>
 800103e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001042:	ee16 0a90 	vmov	r0, s13
 8001046:	f7ff fddb 	bl	8000c00 <__aeabi_f2ulz>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // Lower bytes
    uint16_t FL = FRQREG & 0x3FFF;
 8001052:	8a3b      	ldrh	r3, [r7, #16]
 8001054:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001058:	81fb      	strh	r3, [r7, #14]
    uint8_t Llb = FL & 0xFF;
 800105a:	89fb      	ldrh	r3, [r7, #14]
 800105c:	737b      	strb	r3, [r7, #13]
    uint8_t Lhb = ((FL >> 8) & 0x3F) | 0b01000000;
 800105e:	89fb      	ldrh	r3, [r7, #14]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	b29b      	uxth	r3, r3
 8001064:	b25b      	sxtb	r3, r3
 8001066:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800106a:	b25b      	sxtb	r3, r3
 800106c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001070:	b25b      	sxtb	r3, r3
 8001072:	733b      	strb	r3, [r7, #12]

    // Higher bytes
    uint16_t FH = (FRQREG >> 14) & 0x3FFF;
 8001074:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	f04f 0300 	mov.w	r3, #0
 8001080:	0b82      	lsrs	r2, r0, #14
 8001082:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8001086:	0b8b      	lsrs	r3, r1, #14
 8001088:	b293      	uxth	r3, r2
 800108a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800108e:	817b      	strh	r3, [r7, #10]
    uint8_t Hlb = FH & 0xFF;
 8001090:	897b      	ldrh	r3, [r7, #10]
 8001092:	727b      	strb	r3, [r7, #9]
    uint8_t Hhb = ((FH >> 8) & 0x3F) | 0b01000000;
 8001094:	897b      	ldrh	r3, [r7, #10]
 8001096:	0a1b      	lsrs	r3, r3, #8
 8001098:	b29b      	uxth	r3, r3
 800109a:	b25b      	sxtb	r3, r3
 800109c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80010a0:	b25b      	sxtb	r3, r3
 80010a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	723b      	strb	r3, [r7, #8]

    AD9833_write4(Lhb, Llb, Hhb, Hlb);
 80010aa:	7a7b      	ldrb	r3, [r7, #9]
 80010ac:	7a3a      	ldrb	r2, [r7, #8]
 80010ae:	7b79      	ldrb	r1, [r7, #13]
 80010b0:	7b38      	ldrb	r0, [r7, #12]
 80010b2:	f7ff ff77 	bl	8000fa4 <AD9833_write4>

    AD9833_write(0b00100000, 0b00000000); // Control reg, finish reset and configure IC
 80010b6:	2100      	movs	r1, #0
 80010b8:	2020      	movs	r0, #32
 80010ba:	f7ff ff41 	bl	8000f40 <AD9833_write>
}
 80010be:	bf00      	nop
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	4d800000 	.word	0x4d800000
 80010cc:	49742400 	.word	0x49742400

080010d0 <ADC_Channel0>:

// MaKE SURE THIS IS DEFINED IN THE main.c FILE
extern SPI_HandleTypeDef hspi1; // SPI handle (Assuming SPI1 is used)

// Function to read from ADC Channel 0 (CH0)
float ADC_Channel0(void) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af02      	add	r7, sp, #8
    uint8_t data_out[2] = { MCP3202_CH0, 0x00 };
 80010d6:	23d0      	movs	r3, #208	@ 0xd0
 80010d8:	80bb      	strh	r3, [r7, #4]
    uint8_t data_in[2] = { 0x00, 0x00 };
 80010da:	2300      	movs	r3, #0
 80010dc:	803b      	strh	r3, [r7, #0]


    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;   // CPOL = 0 (Clock idle Low)
 80010de:	4b20      	ldr	r3, [pc, #128]	@ (8001160 <ADC_Channel0+0x90>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;       // CPHA = 0 (Sample on the falling edge)
 80010e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001160 <ADC_Channel0+0x90>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	615a      	str	r2, [r3, #20]
    HAL_SPI_Init(&hspi1); // Restart the SPI module
 80010ea:	481d      	ldr	r0, [pc, #116]	@ (8001160 <ADC_Channel0+0x90>)
 80010ec:	f003 fac8 	bl	8004680 <HAL_SPI_Init>

    // Transmit and receive data via SPI
    HAL_GPIO_WritePin(MCP3202_NCS_GPIO_Port, MCP3202_NCS_Pin, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010f6:	481b      	ldr	r0, [pc, #108]	@ (8001164 <ADC_Channel0+0x94>)
 80010f8:	f002 f82a 	bl	8003150 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, data_out, data_in, 2, HAL_MAX_DELAY);
 80010fc:	463a      	mov	r2, r7
 80010fe:	1d39      	adds	r1, r7, #4
 8001100:	f04f 33ff 	mov.w	r3, #4294967295
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	2302      	movs	r3, #2
 8001108:	4815      	ldr	r0, [pc, #84]	@ (8001160 <ADC_Channel0+0x90>)
 800110a:	f003 fc86 	bl	8004a1a <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(MCP3202_NCS_GPIO_Port, MCP3202_NCS_Pin, GPIO_PIN_SET);
 800110e:	2201      	movs	r2, #1
 8001110:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001114:	4813      	ldr	r0, [pc, #76]	@ (8001164 <ADC_Channel0+0x94>)
 8001116:	f002 f81b 	bl	8003150 <HAL_GPIO_WritePin>

    // Combine the received bytes to form the 12-bit ADC value
    uint16_t adc_value = ((data_in[0] & 0x0F) << 8) | data_in[1];
 800111a:	783b      	ldrb	r3, [r7, #0]
 800111c:	021b      	lsls	r3, r3, #8
 800111e:	b21b      	sxth	r3, r3
 8001120:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001124:	b21a      	sxth	r2, r3
 8001126:	787b      	ldrb	r3, [r7, #1]
 8001128:	b21b      	sxth	r3, r3
 800112a:	4313      	orrs	r3, r2
 800112c:	b21b      	sxth	r3, r3
 800112e:	81fb      	strh	r3, [r7, #14]

    // Calculate the voltage based on the 3.3V reference and 12-bit ADC resolution
    float voltage = 3.3f * adc_value / (float)(1 << 11); // 12-bit resolution (2^12)
 8001130:	89fb      	ldrh	r3, [r7, #14]
 8001132:	ee07 3a90 	vmov	s15, r3
 8001136:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800113a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001168 <ADC_Channel0+0x98>
 800113e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001142:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800116c <ADC_Channel0+0x9c>
 8001146:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800114a:	edc7 7a02 	vstr	s15, [r7, #8]

    return voltage;
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	ee07 3a90 	vmov	s15, r3
}
 8001154:	eeb0 0a67 	vmov.f32	s0, s15
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200000d4 	.word	0x200000d4
 8001164:	40020c00 	.word	0x40020c00
 8001168:	40533333 	.word	0x40533333
 800116c:	45000000 	.word	0x45000000

08001170 <ADC_Channel1>:

// Function to read from ADC Channel 1 (CH1)
float ADC_Channel1(void) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af02      	add	r7, sp, #8
    uint8_t data_out[2] = { MCP3202_CH1, 0x00 };
 8001176:	23f0      	movs	r3, #240	@ 0xf0
 8001178:	80bb      	strh	r3, [r7, #4]
    uint8_t data_in[2] = { 0x00, 0x00 };
 800117a:	2300      	movs	r3, #0
 800117c:	803b      	strh	r3, [r7, #0]


    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;   // CPOL = 0 (Clock idle Low)
 800117e:	4b20      	ldr	r3, [pc, #128]	@ (8001200 <ADC_Channel1+0x90>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;       // CPHA = 0 (Sample on the falling edge)
 8001184:	4b1e      	ldr	r3, [pc, #120]	@ (8001200 <ADC_Channel1+0x90>)
 8001186:	2200      	movs	r2, #0
 8001188:	615a      	str	r2, [r3, #20]
    HAL_SPI_Init(&hspi1); // Restart the SPI module
 800118a:	481d      	ldr	r0, [pc, #116]	@ (8001200 <ADC_Channel1+0x90>)
 800118c:	f003 fa78 	bl	8004680 <HAL_SPI_Init>

    // Transmit and receive data via SPI
    HAL_GPIO_WritePin(MCP3202_NCS_GPIO_Port, MCP3202_NCS_Pin, GPIO_PIN_RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001196:	481b      	ldr	r0, [pc, #108]	@ (8001204 <ADC_Channel1+0x94>)
 8001198:	f001 ffda 	bl	8003150 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, data_out, data_in, 2, HAL_MAX_DELAY);
 800119c:	463a      	mov	r2, r7
 800119e:	1d39      	adds	r1, r7, #4
 80011a0:	f04f 33ff 	mov.w	r3, #4294967295
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	2302      	movs	r3, #2
 80011a8:	4815      	ldr	r0, [pc, #84]	@ (8001200 <ADC_Channel1+0x90>)
 80011aa:	f003 fc36 	bl	8004a1a <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(MCP3202_NCS_GPIO_Port, MCP3202_NCS_Pin, GPIO_PIN_SET);
 80011ae:	2201      	movs	r2, #1
 80011b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011b4:	4813      	ldr	r0, [pc, #76]	@ (8001204 <ADC_Channel1+0x94>)
 80011b6:	f001 ffcb 	bl	8003150 <HAL_GPIO_WritePin>

    // Combine the received bytes to form the 12-bit ADC value
    uint16_t adc_value = ((data_in[0] & 0x0F) << 8) | data_in[1];
 80011ba:	783b      	ldrb	r3, [r7, #0]
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	b21b      	sxth	r3, r3
 80011c0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80011c4:	b21a      	sxth	r2, r3
 80011c6:	787b      	ldrb	r3, [r7, #1]
 80011c8:	b21b      	sxth	r3, r3
 80011ca:	4313      	orrs	r3, r2
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	81fb      	strh	r3, [r7, #14]

    // Calculate the voltage based on the 3.3V reference and 12-bit ADC resolution
    float voltage = 3.3f * adc_value / (float)(1 << 11); // 12-bit resolution (2^12)
 80011d0:	89fb      	ldrh	r3, [r7, #14]
 80011d2:	ee07 3a90 	vmov	s15, r3
 80011d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011da:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001208 <ADC_Channel1+0x98>
 80011de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011e2:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800120c <ADC_Channel1+0x9c>
 80011e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ea:	edc7 7a02 	vstr	s15, [r7, #8]

    return voltage;
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	ee07 3a90 	vmov	s15, r3
}
 80011f4:	eeb0 0a67 	vmov.f32	s0, s15
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200000d4 	.word	0x200000d4
 8001204:	40020c00 	.word	0x40020c00
 8001208:	40533333 	.word	0x40533333
 800120c:	45000000 	.word	0x45000000

08001210 <Get_Time_us.0>:


  __HAL_TIM_SET_COUNTER(&htim2, 0);
  HAL_TIM_Base_Start(&htim2);

  uint32_t Get_Time_us(void) {
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	f8c7 c004 	str.w	ip, [r7, #4]
	    return __HAL_TIM_GET_COUNTER(&htim2); // Read timer
 800121a:	4b04      	ldr	r3, [pc, #16]	@ (800122c <Get_Time_us.0+0x1c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  }
 8001220:	4618      	mov	r0, r3
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	2000012c 	.word	0x2000012c

08001230 <main>:
{
 8001230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001234:	b0ac      	sub	sp, #176	@ 0xb0
 8001236:	af02      	add	r7, sp, #8
int main(void)
 8001238:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 800123c:	643b      	str	r3, [r7, #64]	@ 0x40
  HAL_Init();
 800123e:	f001 f9d9 	bl	80025f4 <HAL_Init>
  SystemClock_Config();
 8001242:	f000 faab 	bl	800179c <SystemClock_Config>
  MX_GPIO_Init();
 8001246:	f000 fc41 	bl	8001acc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800124a:	f000 fbe7 	bl	8001a1c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800124e:	f000 fc0f 	bl	8001a70 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8001252:	f000 fb0f 	bl	8001874 <MX_ADC1_Init>
  MX_SPI1_Init();
 8001256:	f000 fb5f 	bl	8001918 <MX_SPI1_Init>
  MX_TIM2_Init();
 800125a:	f000 fb93 	bl	8001984 <MX_TIM2_Init>
  float frequency = 3000;
 800125e:	4b90      	ldr	r3, [pc, #576]	@ (80014a0 <main+0x270>)
 8001260:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  AD9833_set_freq(frequency);
 8001264:	ed97 0a25 	vldr	s0, [r7, #148]	@ 0x94
 8001268:	f7ff fed8 	bl	800101c <AD9833_set_freq>
  int n_points = 1000;
 800126c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001270:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  int sample_delay = 1;
 8001274:	2301      	movs	r3, #1
 8001276:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  int i = 0; // Array index counter
 800127a:	2300      	movs	r3, #0
 800127c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  float ch0_data[n_points];
 8001280:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001284:	1e4b      	subs	r3, r1, #1
 8001286:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800128a:	460a      	mov	r2, r1
 800128c:	2300      	movs	r3, #0
 800128e:	4614      	mov	r4, r2
 8001290:	461d      	mov	r5, r3
 8001292:	f04f 0200 	mov.w	r2, #0
 8001296:	f04f 0300 	mov.w	r3, #0
 800129a:	016b      	lsls	r3, r5, #5
 800129c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80012a0:	0162      	lsls	r2, r4, #5
 80012a2:	460a      	mov	r2, r1
 80012a4:	2300      	movs	r3, #0
 80012a6:	4690      	mov	r8, r2
 80012a8:	4699      	mov	r9, r3
 80012aa:	f04f 0200 	mov.w	r2, #0
 80012ae:	f04f 0300 	mov.w	r3, #0
 80012b2:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80012b6:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80012ba:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80012be:	460b      	mov	r3, r1
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	3307      	adds	r3, #7
 80012c4:	08db      	lsrs	r3, r3, #3
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	ebad 0d03 	sub.w	sp, sp, r3
 80012cc:	ab02      	add	r3, sp, #8
 80012ce:	3303      	adds	r3, #3
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  float ch0_time[n_points];
 80012d8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80012dc:	1e4b      	subs	r3, r1, #1
 80012de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80012e0:	460a      	mov	r2, r1
 80012e2:	2300      	movs	r3, #0
 80012e4:	4692      	mov	sl, r2
 80012e6:	469b      	mov	fp, r3
 80012e8:	f04f 0200 	mov.w	r2, #0
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80012f4:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 80012f8:	ea4f 124a 	mov.w	r2, sl, lsl #5
 80012fc:	460a      	mov	r2, r1
 80012fe:	2300      	movs	r3, #0
 8001300:	623a      	str	r2, [r7, #32]
 8001302:	627b      	str	r3, [r7, #36]	@ 0x24
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	f04f 0300 	mov.w	r3, #0
 800130c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001310:	4628      	mov	r0, r5
 8001312:	0143      	lsls	r3, r0, #5
 8001314:	4620      	mov	r0, r4
 8001316:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800131a:	4620      	mov	r0, r4
 800131c:	0142      	lsls	r2, r0, #5
 800131e:	460b      	mov	r3, r1
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	3307      	adds	r3, #7
 8001324:	08db      	lsrs	r3, r3, #3
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	ebad 0d03 	sub.w	sp, sp, r3
 800132c:	ab02      	add	r3, sp, #8
 800132e:	3303      	adds	r3, #3
 8001330:	089b      	lsrs	r3, r3, #2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	67bb      	str	r3, [r7, #120]	@ 0x78
  memset(ch0_data, 0, n_points);  // Set all bytes in the array to 0
 8001336:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800133a:	461a      	mov	r2, r3
 800133c:	2100      	movs	r1, #0
 800133e:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8001342:	f005 f824 	bl	800638e <memset>
  memset(ch0_time, 0, n_points);  // Set all bytes in the array to 0
 8001346:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800134a:	461a      	mov	r2, r3
 800134c:	2100      	movs	r1, #0
 800134e:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8001350:	f005 f81d 	bl	800638e <memset>
  float ch1_data[n_points];
 8001354:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001358:	1e4b      	subs	r3, r1, #1
 800135a:	677b      	str	r3, [r7, #116]	@ 0x74
 800135c:	460a      	mov	r2, r1
 800135e:	2300      	movs	r3, #0
 8001360:	61ba      	str	r2, [r7, #24]
 8001362:	61fb      	str	r3, [r7, #28]
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	f04f 0300 	mov.w	r3, #0
 800136c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001370:	4628      	mov	r0, r5
 8001372:	0143      	lsls	r3, r0, #5
 8001374:	4620      	mov	r0, r4
 8001376:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800137a:	4620      	mov	r0, r4
 800137c:	0142      	lsls	r2, r0, #5
 800137e:	460a      	mov	r2, r1
 8001380:	2300      	movs	r3, #0
 8001382:	613a      	str	r2, [r7, #16]
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	f04f 0200 	mov.w	r2, #0
 800138a:	f04f 0300 	mov.w	r3, #0
 800138e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001392:	4628      	mov	r0, r5
 8001394:	0143      	lsls	r3, r0, #5
 8001396:	4620      	mov	r0, r4
 8001398:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800139c:	4620      	mov	r0, r4
 800139e:	0142      	lsls	r2, r0, #5
 80013a0:	460b      	mov	r3, r1
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	3307      	adds	r3, #7
 80013a6:	08db      	lsrs	r3, r3, #3
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	ebad 0d03 	sub.w	sp, sp, r3
 80013ae:	ab02      	add	r3, sp, #8
 80013b0:	3303      	adds	r3, #3
 80013b2:	089b      	lsrs	r3, r3, #2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	673b      	str	r3, [r7, #112]	@ 0x70
  float ch1_time[n_points];
 80013b8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80013bc:	1e4b      	subs	r3, r1, #1
 80013be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80013c0:	460a      	mov	r2, r1
 80013c2:	2300      	movs	r3, #0
 80013c4:	60ba      	str	r2, [r7, #8]
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	f04f 0300 	mov.w	r3, #0
 80013d0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80013d4:	4628      	mov	r0, r5
 80013d6:	0143      	lsls	r3, r0, #5
 80013d8:	4620      	mov	r0, r4
 80013da:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80013de:	4620      	mov	r0, r4
 80013e0:	0142      	lsls	r2, r0, #5
 80013e2:	460a      	mov	r2, r1
 80013e4:	2300      	movs	r3, #0
 80013e6:	603a      	str	r2, [r7, #0]
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	f04f 0200 	mov.w	r2, #0
 80013ee:	f04f 0300 	mov.w	r3, #0
 80013f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80013f6:	4628      	mov	r0, r5
 80013f8:	0143      	lsls	r3, r0, #5
 80013fa:	4620      	mov	r0, r4
 80013fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001400:	4620      	mov	r0, r4
 8001402:	0142      	lsls	r2, r0, #5
 8001404:	460b      	mov	r3, r1
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	3307      	adds	r3, #7
 800140a:	08db      	lsrs	r3, r3, #3
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	ebad 0d03 	sub.w	sp, sp, r3
 8001412:	ab02      	add	r3, sp, #8
 8001414:	3303      	adds	r3, #3
 8001416:	089b      	lsrs	r3, r3, #2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	66bb      	str	r3, [r7, #104]	@ 0x68
  memset(ch1_time, 0, n_points);  // Set all bytes in the array to 0
 800141c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001420:	461a      	mov	r2, r3
 8001422:	2100      	movs	r1, #0
 8001424:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001426:	f004 ffb2 	bl	800638e <memset>
  memset(ch1_data, 0, n_points);  // Set all bytes in the array to 0
 800142a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800142e:	461a      	mov	r2, r3
 8001430:	2100      	movs	r1, #0
 8001432:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001434:	f004 ffab 	bl	800638e <memset>
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8001438:	4b1a      	ldr	r3, [pc, #104]	@ (80014a4 <main+0x274>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2200      	movs	r2, #0
 800143e:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start(&htim2);
 8001440:	4818      	ldr	r0, [pc, #96]	@ (80014a4 <main+0x274>)
 8001442:	f003 fdbf 	bl	8004fc4 <HAL_TIM_Base_Start>

  start_time = Get_Time_us();
 8001446:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800144a:	469c      	mov	ip, r3
 800144c:	f7ff fee0 	bl	8001210 <Get_Time_us.0>
 8001450:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4

  void wait_us(uint32_t w) {
	  uint32_t s = Get_Time_us();
  }

  float load_amplitude = 0;
 8001454:	f04f 0300 	mov.w	r3, #0
 8001458:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float load_phase = 0;
 800145a:	f04f 0300 	mov.w	r3, #0
 800145e:	63bb      	str	r3, [r7, #56]	@ 0x38
  float load_offset = 0;
 8001460:	f04f 0300 	mov.w	r3, #0
 8001464:	637b      	str	r3, [r7, #52]	@ 0x34

  float shunt_amplitude = 0;
 8001466:	f04f 0300 	mov.w	r3, #0
 800146a:	633b      	str	r3, [r7, #48]	@ 0x30
  float shunt_phase = 0;
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	62fb      	str	r3, [r7, #44]	@ 0x2c
  float shunt_offset = 0;
 8001472:	f04f 0300 	mov.w	r3, #0
 8001476:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  float avg = 0;
 8001478:	f04f 0300 	mov.w	r3, #0
 800147c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	  int cycles = 100;
 8001480:	2364      	movs	r3, #100	@ 0x64
 8001482:	667b      	str	r3, [r7, #100]	@ 0x64
	  for (int i = 0; i < cycles; i++) {
 8001484:	2300      	movs	r3, #0
 8001486:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800148a:	e165      	b.n	8001758 <main+0x528>
		  int samples = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		  uint32_t s = Get_Time_us();
 8001492:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001496:	469c      	mov	ip, r3
 8001498:	f7ff feba 	bl	8001210 <Get_Time_us.0>
 800149c:	6638      	str	r0, [r7, #96]	@ 0x60
		  while((float)(Get_Time_us() - s) < 1e6 / frequency) {
 800149e:	e05b      	b.n	8001558 <main+0x328>
 80014a0:	453b8000 	.word	0x453b8000
 80014a4:	2000012c 	.word	0x2000012c
			  //	  HAL_Delay(sample_delay);
			  ch0_data[samples] = ADC_Channel0();
 80014a8:	f7ff fe12 	bl	80010d0 <ADC_Channel0>
 80014ac:	eef0 7a40 	vmov.f32	s15, s0
 80014b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80014b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	edc3 7a00 	vstr	s15, [r3]
			  ch0_time[samples] = ((double)(Get_Time_us() - start_time)) / 1e6;
 80014c0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014c4:	469c      	mov	ip, r3
 80014c6:	f7ff fea3 	bl	8001210 <Get_Time_us.0>
 80014ca:	4602      	mov	r2, r0
 80014cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7fe ffda 	bl	800048c <__aeabi_ui2d>
 80014d8:	a3ae      	add	r3, pc, #696	@ (adr r3, 8001794 <main+0x564>)
 80014da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014de:	f7ff f979 	bl	80007d4 <__aeabi_ddiv>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	f7ff fb21 	bl	8000b30 <__aeabi_d2f>
 80014ee:	4601      	mov	r1, r0
 80014f0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80014f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	6019      	str	r1, [r3, #0]
		//	  HAL_Delay(sample_delay);
			  ch1_data[samples] = ADC_Channel1();
 80014fc:	f7ff fe38 	bl	8001170 <ADC_Channel1>
 8001500:	eef0 7a40 	vmov.f32	s15, s0
 8001504:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001506:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	edc3 7a00 	vstr	s15, [r3]
			  ch1_time[samples] = ((double)(Get_Time_us() - start_time)) / 1e6;
 8001512:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001516:	469c      	mov	ip, r3
 8001518:	f7ff fe7a 	bl	8001210 <Get_Time_us.0>
 800151c:	4602      	mov	r2, r0
 800151e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	4618      	mov	r0, r3
 8001526:	f7fe ffb1 	bl	800048c <__aeabi_ui2d>
 800152a:	a39a      	add	r3, pc, #616	@ (adr r3, 8001794 <main+0x564>)
 800152c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001530:	f7ff f950 	bl	80007d4 <__aeabi_ddiv>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f7ff faf8 	bl	8000b30 <__aeabi_d2f>
 8001540:	4601      	mov	r1, r0
 8001542:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001544:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	6019      	str	r1, [r3, #0]

			  samples++;
 800154e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001552:	3301      	adds	r3, #1
 8001554:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		  while((float)(Get_Time_us() - s) < 1e6 / frequency) {
 8001558:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800155c:	469c      	mov	ip, r3
 800155e:	f7ff fe57 	bl	8001210 <Get_Time_us.0>
 8001562:	4602      	mov	r2, r0
 8001564:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	ee07 3a90 	vmov	s15, r3
 800156c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001570:	ee17 0a90 	vmov	r0, s15
 8001574:	f7fe ffac 	bl	80004d0 <__aeabi_f2d>
 8001578:	4604      	mov	r4, r0
 800157a:	460d      	mov	r5, r1
 800157c:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8001580:	f7fe ffa6 	bl	80004d0 <__aeabi_f2d>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	a182      	add	r1, pc, #520	@ (adr r1, 8001794 <main+0x564>)
 800158a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800158e:	f7ff f921 	bl	80007d4 <__aeabi_ddiv>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	4620      	mov	r0, r4
 8001598:	4629      	mov	r1, r5
 800159a:	f7ff fa63 	bl	8000a64 <__aeabi_dcmplt>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d181      	bne.n	80014a8 <main+0x278>
		  }

		  SINE_least_squares_regression(ch0_data, ch0_time, samples, frequency, &load_amplitude, &load_phase, &load_offset);
 80015a4:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80015a8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80015ac:	9301      	str	r3, [sp, #4]
 80015ae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	4613      	mov	r3, r2
 80015b6:	ed97 0a25 	vldr	s0, [r7, #148]	@ 0x94
 80015ba:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80015be:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80015c0:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80015c4:	f000 fd84 	bl	80020d0 <SINE_least_squares_regression>
		  SINE_least_squares_regression(ch1_data, ch1_time, samples, frequency, &shunt_amplitude, &shunt_phase, &shunt_offset);
 80015c8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80015cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015d0:	9301      	str	r3, [sp, #4]
 80015d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	4613      	mov	r3, r2
 80015da:	ed97 0a25 	vldr	s0, [r7, #148]	@ 0x94
 80015de:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80015e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80015e4:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80015e6:	f000 fd73 	bl	80020d0 <SINE_least_squares_regression>

		  float shunt_resistance = 99.67;
 80015ea:	4b67      	ldr	r3, [pc, #412]	@ (8001788 <main+0x558>)
 80015ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
		  float impedance_magnitude = (load_amplitude / (shunt_amplitude / shunt_resistance));
 80015ee:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 80015f2:	ed97 6a0c 	vldr	s12, [r7, #48]	@ 0x30
 80015f6:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80015fa:	ee86 7a27 	vdiv.f32	s14, s12, s15
 80015fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001602:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		  float impedance_angle = (load_phase - shunt_phase);
 8001606:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800160a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800160e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001612:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		  float resistance = impedance_magnitude * cos(impedance_angle) - shunt_resistance;
 8001616:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001618:	f7fe ff5a 	bl	80004d0 <__aeabi_f2d>
 800161c:	4604      	mov	r4, r0
 800161e:	460d      	mov	r5, r1
 8001620:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001622:	f7fe ff55 	bl	80004d0 <__aeabi_f2d>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	ec43 2b10 	vmov	d0, r2, r3
 800162e:	f005 f8a7 	bl	8006780 <cos>
 8001632:	ec53 2b10 	vmov	r2, r3, d0
 8001636:	4620      	mov	r0, r4
 8001638:	4629      	mov	r1, r5
 800163a:	f7fe ffa1 	bl	8000580 <__aeabi_dmul>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4614      	mov	r4, r2
 8001644:	461d      	mov	r5, r3
 8001646:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001648:	f7fe ff42 	bl	80004d0 <__aeabi_f2d>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4620      	mov	r0, r4
 8001652:	4629      	mov	r1, r5
 8001654:	f7fe fddc 	bl	8000210 <__aeabi_dsub>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4610      	mov	r0, r2
 800165e:	4619      	mov	r1, r3
 8001660:	f7ff fa66 	bl	8000b30 <__aeabi_d2f>
 8001664:	4603      	mov	r3, r0
 8001666:	653b      	str	r3, [r7, #80]	@ 0x50
		  float reactance = impedance_magnitude * sin(impedance_angle);
 8001668:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800166a:	f7fe ff31 	bl	80004d0 <__aeabi_f2d>
 800166e:	4604      	mov	r4, r0
 8001670:	460d      	mov	r5, r1
 8001672:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001674:	f7fe ff2c 	bl	80004d0 <__aeabi_f2d>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	ec43 2b10 	vmov	d0, r2, r3
 8001680:	f005 f8da 	bl	8006838 <sin>
 8001684:	ec53 2b10 	vmov	r2, r3, d0
 8001688:	4620      	mov	r0, r4
 800168a:	4629      	mov	r1, r5
 800168c:	f7fe ff78 	bl	8000580 <__aeabi_dmul>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	f7ff fa4a 	bl	8000b30 <__aeabi_d2f>
 800169c:	4603      	mov	r3, r0
 800169e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		  float inductance = reactance / (2 * M_PI * frequency);
 80016a0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80016a2:	f7fe ff15 	bl	80004d0 <__aeabi_f2d>
 80016a6:	4604      	mov	r4, r0
 80016a8:	460d      	mov	r5, r1
 80016aa:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80016ae:	f7fe ff0f 	bl	80004d0 <__aeabi_f2d>
 80016b2:	a333      	add	r3, pc, #204	@ (adr r3, 8001780 <main+0x550>)
 80016b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b8:	f7fe ff62 	bl	8000580 <__aeabi_dmul>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4620      	mov	r0, r4
 80016c2:	4629      	mov	r1, r5
 80016c4:	f7ff f886 	bl	80007d4 <__aeabi_ddiv>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	f7ff fa2e 	bl	8000b30 <__aeabi_d2f>
 80016d4:	4603      	mov	r3, r0
 80016d6:	64bb      	str	r3, [r7, #72]	@ 0x48
		  float capacitance = - 1 / (2 * M_PI * frequency * reactance);
 80016d8:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80016dc:	f7fe fef8 	bl	80004d0 <__aeabi_f2d>
 80016e0:	a327      	add	r3, pc, #156	@ (adr r3, 8001780 <main+0x550>)
 80016e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e6:	f7fe ff4b 	bl	8000580 <__aeabi_dmul>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4614      	mov	r4, r2
 80016f0:	461d      	mov	r5, r3
 80016f2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80016f4:	f7fe feec 	bl	80004d0 <__aeabi_f2d>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4620      	mov	r0, r4
 80016fe:	4629      	mov	r1, r5
 8001700:	f7fe ff3e 	bl	8000580 <__aeabi_dmul>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	f04f 0000 	mov.w	r0, #0
 800170c:	491f      	ldr	r1, [pc, #124]	@ (800178c <main+0x55c>)
 800170e:	f7ff f861 	bl	80007d4 <__aeabi_ddiv>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4610      	mov	r0, r2
 8001718:	4619      	mov	r1, r3
 800171a:	f7ff fa09 	bl	8000b30 <__aeabi_d2f>
 800171e:	4603      	mov	r3, r0
 8001720:	647b      	str	r3, [r7, #68]	@ 0x44
		  samples = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8001728:	4b19      	ldr	r3, [pc, #100]	@ (8001790 <main+0x560>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2200      	movs	r2, #0
 800172e:	625a      	str	r2, [r3, #36]	@ 0x24
		  start_time = Get_Time_us();
 8001730:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001734:	469c      	mov	ip, r3
 8001736:	f7ff fd6b 	bl	8001210 <Get_Time_us.0>
 800173a:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
		  avg += capacitance;
 800173e:	ed97 7a28 	vldr	s14, [r7, #160]	@ 0xa0
 8001742:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001746:	ee77 7a27 	vadd.f32	s15, s14, s15
 800174a:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
	  for (int i = 0; i < cycles; i++) {
 800174e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001752:	3301      	adds	r3, #1
 8001754:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001758:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800175c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800175e:	429a      	cmp	r2, r3
 8001760:	f6ff ae94 	blt.w	800148c <main+0x25c>
	  }
	  avg = avg / cycles;
 8001764:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001766:	ee07 3a90 	vmov	s15, r3
 800176a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800176e:	edd7 6a28 	vldr	s13, [r7, #160]	@ 0xa0
 8001772:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001776:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
  {
 800177a:	e67d      	b.n	8001478 <main+0x248>
 800177c:	f3af 8000 	nop.w
 8001780:	54442d18 	.word	0x54442d18
 8001784:	401921fb 	.word	0x401921fb
 8001788:	42c7570a 	.word	0x42c7570a
 800178c:	bff00000 	.word	0xbff00000
 8001790:	2000012c 	.word	0x2000012c
 8001794:	00000000 	.word	0x00000000
 8001798:	412e8480 	.word	0x412e8480

0800179c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b094      	sub	sp, #80	@ 0x50
 80017a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017a2:	f107 031c 	add.w	r3, r7, #28
 80017a6:	2234      	movs	r2, #52	@ 0x34
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f004 fdef 	bl	800638e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b0:	f107 0308 	add.w	r3, r7, #8
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c0:	2300      	movs	r3, #0
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	4b29      	ldr	r3, [pc, #164]	@ (800186c <SystemClock_Config+0xd0>)
 80017c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c8:	4a28      	ldr	r2, [pc, #160]	@ (800186c <SystemClock_Config+0xd0>)
 80017ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80017d0:	4b26      	ldr	r3, [pc, #152]	@ (800186c <SystemClock_Config+0xd0>)
 80017d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017dc:	2300      	movs	r3, #0
 80017de:	603b      	str	r3, [r7, #0]
 80017e0:	4b23      	ldr	r3, [pc, #140]	@ (8001870 <SystemClock_Config+0xd4>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a22      	ldr	r2, [pc, #136]	@ (8001870 <SystemClock_Config+0xd4>)
 80017e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80017ea:	6013      	str	r3, [r2, #0]
 80017ec:	4b20      	ldr	r3, [pc, #128]	@ (8001870 <SystemClock_Config+0xd4>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017f4:	603b      	str	r3, [r7, #0]
 80017f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017f8:	2301      	movs	r3, #1
 80017fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80017fc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001800:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001802:	2302      	movs	r3, #2
 8001804:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001806:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800180a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800180c:	2304      	movs	r3, #4
 800180e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001810:	23a8      	movs	r3, #168	@ 0xa8
 8001812:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001814:	2302      	movs	r3, #2
 8001816:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001818:	2307      	movs	r3, #7
 800181a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800181c:	2302      	movs	r3, #2
 800181e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001820:	f107 031c 	add.w	r3, r7, #28
 8001824:	4618      	mov	r0, r3
 8001826:	f002 fc8d 	bl	8004144 <HAL_RCC_OscConfig>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001830:	f000 fa2e 	bl	8001c90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001834:	230f      	movs	r3, #15
 8001836:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001838:	2302      	movs	r3, #2
 800183a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800183c:	2300      	movs	r3, #0
 800183e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001840:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001844:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001846:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800184a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800184c:	f107 0308 	add.w	r3, r7, #8
 8001850:	2105      	movs	r1, #5
 8001852:	4618      	mov	r0, r3
 8001854:	f001 fe02 	bl	800345c <HAL_RCC_ClockConfig>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800185e:	f000 fa17 	bl	8001c90 <Error_Handler>
  }
}
 8001862:	bf00      	nop
 8001864:	3750      	adds	r7, #80	@ 0x50
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40023800 	.word	0x40023800
 8001870:	40007000 	.word	0x40007000

08001874 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800187a:	463b      	mov	r3, r7
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001886:	4b21      	ldr	r3, [pc, #132]	@ (800190c <MX_ADC1_Init+0x98>)
 8001888:	4a21      	ldr	r2, [pc, #132]	@ (8001910 <MX_ADC1_Init+0x9c>)
 800188a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800188c:	4b1f      	ldr	r3, [pc, #124]	@ (800190c <MX_ADC1_Init+0x98>)
 800188e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001892:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001894:	4b1d      	ldr	r3, [pc, #116]	@ (800190c <MX_ADC1_Init+0x98>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800189a:	4b1c      	ldr	r3, [pc, #112]	@ (800190c <MX_ADC1_Init+0x98>)
 800189c:	2200      	movs	r2, #0
 800189e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018a0:	4b1a      	ldr	r3, [pc, #104]	@ (800190c <MX_ADC1_Init+0x98>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018a6:	4b19      	ldr	r3, [pc, #100]	@ (800190c <MX_ADC1_Init+0x98>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018ae:	4b17      	ldr	r3, [pc, #92]	@ (800190c <MX_ADC1_Init+0x98>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018b4:	4b15      	ldr	r3, [pc, #84]	@ (800190c <MX_ADC1_Init+0x98>)
 80018b6:	4a17      	ldr	r2, [pc, #92]	@ (8001914 <MX_ADC1_Init+0xa0>)
 80018b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018ba:	4b14      	ldr	r3, [pc, #80]	@ (800190c <MX_ADC1_Init+0x98>)
 80018bc:	2200      	movs	r2, #0
 80018be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80018c0:	4b12      	ldr	r3, [pc, #72]	@ (800190c <MX_ADC1_Init+0x98>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80018c6:	4b11      	ldr	r3, [pc, #68]	@ (800190c <MX_ADC1_Init+0x98>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018ce:	4b0f      	ldr	r3, [pc, #60]	@ (800190c <MX_ADC1_Init+0x98>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018d4:	480d      	ldr	r0, [pc, #52]	@ (800190c <MX_ADC1_Init+0x98>)
 80018d6:	f000 ff23 	bl	8002720 <HAL_ADC_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80018e0:	f000 f9d6 	bl	8001c90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80018e4:	2309      	movs	r3, #9
 80018e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80018e8:	2301      	movs	r3, #1
 80018ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80018ec:	2300      	movs	r3, #0
 80018ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018f0:	463b      	mov	r3, r7
 80018f2:	4619      	mov	r1, r3
 80018f4:	4805      	ldr	r0, [pc, #20]	@ (800190c <MX_ADC1_Init+0x98>)
 80018f6:	f000 ff57 	bl	80027a8 <HAL_ADC_ConfigChannel>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001900:	f000 f9c6 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001904:	bf00      	nop
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	2000008c 	.word	0x2000008c
 8001910:	40012000 	.word	0x40012000
 8001914:	0f000001 	.word	0x0f000001

08001918 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800191c:	4b17      	ldr	r3, [pc, #92]	@ (800197c <MX_SPI1_Init+0x64>)
 800191e:	4a18      	ldr	r2, [pc, #96]	@ (8001980 <MX_SPI1_Init+0x68>)
 8001920:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001922:	4b16      	ldr	r3, [pc, #88]	@ (800197c <MX_SPI1_Init+0x64>)
 8001924:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001928:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800192a:	4b14      	ldr	r3, [pc, #80]	@ (800197c <MX_SPI1_Init+0x64>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001930:	4b12      	ldr	r3, [pc, #72]	@ (800197c <MX_SPI1_Init+0x64>)
 8001932:	2200      	movs	r2, #0
 8001934:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001936:	4b11      	ldr	r3, [pc, #68]	@ (800197c <MX_SPI1_Init+0x64>)
 8001938:	2202      	movs	r2, #2
 800193a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800193c:	4b0f      	ldr	r3, [pc, #60]	@ (800197c <MX_SPI1_Init+0x64>)
 800193e:	2200      	movs	r2, #0
 8001940:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001942:	4b0e      	ldr	r3, [pc, #56]	@ (800197c <MX_SPI1_Init+0x64>)
 8001944:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001948:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800194a:	4b0c      	ldr	r3, [pc, #48]	@ (800197c <MX_SPI1_Init+0x64>)
 800194c:	2228      	movs	r2, #40	@ 0x28
 800194e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001950:	4b0a      	ldr	r3, [pc, #40]	@ (800197c <MX_SPI1_Init+0x64>)
 8001952:	2200      	movs	r2, #0
 8001954:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001956:	4b09      	ldr	r3, [pc, #36]	@ (800197c <MX_SPI1_Init+0x64>)
 8001958:	2200      	movs	r2, #0
 800195a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800195c:	4b07      	ldr	r3, [pc, #28]	@ (800197c <MX_SPI1_Init+0x64>)
 800195e:	2200      	movs	r2, #0
 8001960:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001962:	4b06      	ldr	r3, [pc, #24]	@ (800197c <MX_SPI1_Init+0x64>)
 8001964:	220a      	movs	r2, #10
 8001966:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001968:	4804      	ldr	r0, [pc, #16]	@ (800197c <MX_SPI1_Init+0x64>)
 800196a:	f002 fe89 	bl	8004680 <HAL_SPI_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001974:	f000 f98c 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}
 800197c:	200000d4 	.word	0x200000d4
 8001980:	40013000 	.word	0x40013000

08001984 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800198a:	f107 0308 	add.w	r3, r7, #8
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	609a      	str	r2, [r3, #8]
 8001996:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001998:	463b      	mov	r3, r7
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a18 <MX_TIM2_Init+0x94>)
 80019a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80019a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a18 <MX_TIM2_Init+0x94>)
 80019aa:	2253      	movs	r2, #83	@ 0x53
 80019ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001a18 <MX_TIM2_Init+0x94>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80019b4:	4b18      	ldr	r3, [pc, #96]	@ (8001a18 <MX_TIM2_Init+0x94>)
 80019b6:	f04f 32ff 	mov.w	r2, #4294967295
 80019ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019bc:	4b16      	ldr	r3, [pc, #88]	@ (8001a18 <MX_TIM2_Init+0x94>)
 80019be:	2200      	movs	r2, #0
 80019c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019c2:	4b15      	ldr	r3, [pc, #84]	@ (8001a18 <MX_TIM2_Init+0x94>)
 80019c4:	2280      	movs	r2, #128	@ 0x80
 80019c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019c8:	4813      	ldr	r0, [pc, #76]	@ (8001a18 <MX_TIM2_Init+0x94>)
 80019ca:	f003 faab 	bl	8004f24 <HAL_TIM_Base_Init>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80019d4:	f000 f95c 	bl	8001c90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019de:	f107 0308 	add.w	r3, r7, #8
 80019e2:	4619      	mov	r1, r3
 80019e4:	480c      	ldr	r0, [pc, #48]	@ (8001a18 <MX_TIM2_Init+0x94>)
 80019e6:	f003 fc45 	bl	8005274 <HAL_TIM_ConfigClockSource>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80019f0:	f000 f94e 	bl	8001c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f4:	2300      	movs	r3, #0
 80019f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019fc:	463b      	mov	r3, r7
 80019fe:	4619      	mov	r1, r3
 8001a00:	4805      	ldr	r0, [pc, #20]	@ (8001a18 <MX_TIM2_Init+0x94>)
 8001a02:	f003 fe77 	bl	80056f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a0c:	f000 f940 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a10:	bf00      	nop
 8001a12:	3718      	adds	r7, #24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	2000012c 	.word	0x2000012c

08001a1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a20:	4b11      	ldr	r3, [pc, #68]	@ (8001a68 <MX_USART3_UART_Init+0x4c>)
 8001a22:	4a12      	ldr	r2, [pc, #72]	@ (8001a6c <MX_USART3_UART_Init+0x50>)
 8001a24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a26:	4b10      	ldr	r3, [pc, #64]	@ (8001a68 <MX_USART3_UART_Init+0x4c>)
 8001a28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a68 <MX_USART3_UART_Init+0x4c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a34:	4b0c      	ldr	r3, [pc, #48]	@ (8001a68 <MX_USART3_UART_Init+0x4c>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a68 <MX_USART3_UART_Init+0x4c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a40:	4b09      	ldr	r3, [pc, #36]	@ (8001a68 <MX_USART3_UART_Init+0x4c>)
 8001a42:	220c      	movs	r2, #12
 8001a44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a46:	4b08      	ldr	r3, [pc, #32]	@ (8001a68 <MX_USART3_UART_Init+0x4c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <MX_USART3_UART_Init+0x4c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a52:	4805      	ldr	r0, [pc, #20]	@ (8001a68 <MX_USART3_UART_Init+0x4c>)
 8001a54:	f003 fede 	bl	8005814 <HAL_UART_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a5e:	f000 f917 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000174 	.word	0x20000174
 8001a6c:	40004800 	.word	0x40004800

08001a70 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001a74:	4b14      	ldr	r3, [pc, #80]	@ (8001ac8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a76:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001a7a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001a7c:	4b12      	ldr	r3, [pc, #72]	@ (8001ac8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a7e:	2206      	movs	r2, #6
 8001a80:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001a82:	4b11      	ldr	r3, [pc, #68]	@ (8001ac8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a84:	2202      	movs	r2, #2
 8001a86:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001a88:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a90:	2202      	movs	r2, #2
 8001a92:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001a94:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a96:	2201      	movs	r2, #1
 8001a98:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001aa0:	4b09      	ldr	r3, [pc, #36]	@ (8001ac8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001aa6:	4b08      	ldr	r3, [pc, #32]	@ (8001ac8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001aac:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001ab2:	4805      	ldr	r0, [pc, #20]	@ (8001ac8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ab4:	f001 fb98 	bl	80031e8 <HAL_PCD_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001abe:	f000 f8e7 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200001bc 	.word	0x200001bc

08001acc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08c      	sub	sp, #48	@ 0x30
 8001ad0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad2:	f107 031c 	add.w	r3, r7, #28
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
 8001ae0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61bb      	str	r3, [r7, #24]
 8001ae6:	4b5d      	ldr	r3, [pc, #372]	@ (8001c5c <MX_GPIO_Init+0x190>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	4a5c      	ldr	r2, [pc, #368]	@ (8001c5c <MX_GPIO_Init+0x190>)
 8001aec:	f043 0304 	orr.w	r3, r3, #4
 8001af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af2:	4b5a      	ldr	r3, [pc, #360]	@ (8001c5c <MX_GPIO_Init+0x190>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	f003 0304 	and.w	r3, r3, #4
 8001afa:	61bb      	str	r3, [r7, #24]
 8001afc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	4b56      	ldr	r3, [pc, #344]	@ (8001c5c <MX_GPIO_Init+0x190>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b06:	4a55      	ldr	r2, [pc, #340]	@ (8001c5c <MX_GPIO_Init+0x190>)
 8001b08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0e:	4b53      	ldr	r3, [pc, #332]	@ (8001c5c <MX_GPIO_Init+0x190>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	4b4f      	ldr	r3, [pc, #316]	@ (8001c5c <MX_GPIO_Init+0x190>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b22:	4a4e      	ldr	r2, [pc, #312]	@ (8001c5c <MX_GPIO_Init+0x190>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b2a:	4b4c      	ldr	r3, [pc, #304]	@ (8001c5c <MX_GPIO_Init+0x190>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	4b48      	ldr	r3, [pc, #288]	@ (8001c5c <MX_GPIO_Init+0x190>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3e:	4a47      	ldr	r2, [pc, #284]	@ (8001c5c <MX_GPIO_Init+0x190>)
 8001b40:	f043 0302 	orr.w	r3, r3, #2
 8001b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b46:	4b45      	ldr	r3, [pc, #276]	@ (8001c5c <MX_GPIO_Init+0x190>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	4b41      	ldr	r3, [pc, #260]	@ (8001c5c <MX_GPIO_Init+0x190>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	4a40      	ldr	r2, [pc, #256]	@ (8001c5c <MX_GPIO_Init+0x190>)
 8001b5c:	f043 0308 	orr.w	r3, r3, #8
 8001b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b62:	4b3e      	ldr	r3, [pc, #248]	@ (8001c5c <MX_GPIO_Init+0x190>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b66:	f003 0308 	and.w	r3, r3, #8
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	4b3a      	ldr	r3, [pc, #232]	@ (8001c5c <MX_GPIO_Init+0x190>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b76:	4a39      	ldr	r2, [pc, #228]	@ (8001c5c <MX_GPIO_Init+0x190>)
 8001b78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b7e:	4b37      	ldr	r3, [pc, #220]	@ (8001c5c <MX_GPIO_Init+0x190>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b86:	607b      	str	r3, [r7, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001b90:	4833      	ldr	r0, [pc, #204]	@ (8001c60 <MX_GPIO_Init+0x194>)
 8001b92:	f001 fadd 	bl	8003150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_RESET);
 8001b96:	2200      	movs	r2, #0
 8001b98:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b9c:	4831      	ldr	r0, [pc, #196]	@ (8001c64 <MX_GPIO_Init+0x198>)
 8001b9e:	f001 fad7 	bl	8003150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCP3202_NCS_GPIO_Port, MCP3202_NCS_Pin, GPIO_PIN_SET);
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ba8:	482e      	ldr	r0, [pc, #184]	@ (8001c64 <MX_GPIO_Init+0x198>)
 8001baa:	f001 fad1 	bl	8003150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2140      	movs	r1, #64	@ 0x40
 8001bb2:	482d      	ldr	r0, [pc, #180]	@ (8001c68 <MX_GPIO_Init+0x19c>)
 8001bb4:	f001 facc 	bl	8003150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001bb8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bbe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001bc8:	f107 031c 	add.w	r3, r7, #28
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4827      	ldr	r0, [pc, #156]	@ (8001c6c <MX_GPIO_Init+0x1a0>)
 8001bd0:	f001 f92a 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001bd4:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be2:	2300      	movs	r3, #0
 8001be4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be6:	f107 031c 	add.w	r3, r7, #28
 8001bea:	4619      	mov	r1, r3
 8001bec:	481c      	ldr	r0, [pc, #112]	@ (8001c60 <MX_GPIO_Init+0x194>)
 8001bee:	f001 f91b 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD9833_NCS_Pin MCP3202_NCS_Pin */
  GPIO_InitStruct.Pin = AD9833_NCS_Pin|MCP3202_NCS_Pin;
 8001bf2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001bf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c00:	2303      	movs	r3, #3
 8001c02:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c04:	f107 031c 	add.w	r3, r7, #28
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4816      	ldr	r0, [pc, #88]	@ (8001c64 <MX_GPIO_Init+0x198>)
 8001c0c:	f001 f90c 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001c10:	2340      	movs	r3, #64	@ 0x40
 8001c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c14:	2301      	movs	r3, #1
 8001c16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001c20:	f107 031c 	add.w	r3, r7, #28
 8001c24:	4619      	mov	r1, r3
 8001c26:	4810      	ldr	r0, [pc, #64]	@ (8001c68 <MX_GPIO_Init+0x19c>)
 8001c28:	f001 f8fe 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001c2c:	2380      	movs	r3, #128	@ 0x80
 8001c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c30:	2300      	movs	r3, #0
 8001c32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c38:	f107 031c 	add.w	r3, r7, #28
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	480a      	ldr	r0, [pc, #40]	@ (8001c68 <MX_GPIO_Init+0x19c>)
 8001c40:	f001 f8f2 	bl	8002e28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c44:	2200      	movs	r2, #0
 8001c46:	2100      	movs	r1, #0
 8001c48:	2028      	movs	r0, #40	@ 0x28
 8001c4a:	f001 f8b6 	bl	8002dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c4e:	2028      	movs	r0, #40	@ 0x28
 8001c50:	f001 f8cf 	bl	8002df2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c54:	bf00      	nop
 8001c56:	3730      	adds	r7, #48	@ 0x30
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40020400 	.word	0x40020400
 8001c64:	40020c00 	.word	0x40020c00
 8001c68:	40021800 	.word	0x40021800
 8001c6c:	40020800 	.word	0x40020800

08001c70 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin);
 8001c7a:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001c7e:	4803      	ldr	r0, [pc, #12]	@ (8001c8c <HAL_GPIO_EXTI_Callback+0x1c>)
 8001c80:	f001 fa7f 	bl	8003182 <HAL_GPIO_TogglePin>
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40020400 	.word	0x40020400

08001c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c94:	b672      	cpsid	i
}
 8001c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c98:	bf00      	nop
 8001c9a:	e7fd      	b.n	8001c98 <Error_Handler+0x8>
 8001c9c:	0000      	movs	r0, r0
	...

08001ca0 <sumSineSquared>:
        sum += arr[i] * arr[i];
    }
    return sum;
}

float sumSineSquared( const float timestamps[], int size, float frequency) {
 8001ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ca4:	b086      	sub	sp, #24
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	ed87 0a01 	vstr	s0, [r7, #4]
    float sum = 0;
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size; i++) {
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	e065      	b.n	8001d88 <sumSineSquared+0xe8>
        sum += sin(2 * M_PI * frequency * timestamps[i]) * sin(2 * M_PI * frequency * timestamps[i]);
 8001cbc:	6978      	ldr	r0, [r7, #20]
 8001cbe:	f7fe fc07 	bl	80004d0 <__aeabi_f2d>
 8001cc2:	4604      	mov	r4, r0
 8001cc4:	460d      	mov	r5, r1
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7fe fc02 	bl	80004d0 <__aeabi_f2d>
 8001ccc:	a336      	add	r3, pc, #216	@ (adr r3, 8001da8 <sumSineSquared+0x108>)
 8001cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd2:	f7fe fc55 	bl	8000580 <__aeabi_dmul>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4690      	mov	r8, r2
 8001cdc:	4699      	mov	r9, r3
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7fe fbf1 	bl	80004d0 <__aeabi_f2d>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4640      	mov	r0, r8
 8001cf4:	4649      	mov	r1, r9
 8001cf6:	f7fe fc43 	bl	8000580 <__aeabi_dmul>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	ec43 2b17 	vmov	d7, r2, r3
 8001d02:	eeb0 0a47 	vmov.f32	s0, s14
 8001d06:	eef0 0a67 	vmov.f32	s1, s15
 8001d0a:	f004 fd95 	bl	8006838 <sin>
 8001d0e:	ec5b ab10 	vmov	sl, fp, d0
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7fe fbdc 	bl	80004d0 <__aeabi_f2d>
 8001d18:	a323      	add	r3, pc, #140	@ (adr r3, 8001da8 <sumSineSquared+0x108>)
 8001d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1e:	f7fe fc2f 	bl	8000580 <__aeabi_dmul>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4690      	mov	r8, r2
 8001d28:	4699      	mov	r9, r3
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	4413      	add	r3, r2
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7fe fbcb 	bl	80004d0 <__aeabi_f2d>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4640      	mov	r0, r8
 8001d40:	4649      	mov	r1, r9
 8001d42:	f7fe fc1d 	bl	8000580 <__aeabi_dmul>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	ec43 2b17 	vmov	d7, r2, r3
 8001d4e:	eeb0 0a47 	vmov.f32	s0, s14
 8001d52:	eef0 0a67 	vmov.f32	s1, s15
 8001d56:	f004 fd6f 	bl	8006838 <sin>
 8001d5a:	ec53 2b10 	vmov	r2, r3, d0
 8001d5e:	4650      	mov	r0, sl
 8001d60:	4659      	mov	r1, fp
 8001d62:	f7fe fc0d 	bl	8000580 <__aeabi_dmul>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4620      	mov	r0, r4
 8001d6c:	4629      	mov	r1, r5
 8001d6e:	f7fe fa51 	bl	8000214 <__adddf3>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	4610      	mov	r0, r2
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f7fe fed9 	bl	8000b30 <__aeabi_d2f>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size; i++) {
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	3301      	adds	r3, #1
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	db95      	blt.n	8001cbc <sumSineSquared+0x1c>
    }
    return sum;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	ee07 3a90 	vmov	s15, r3
}
 8001d96:	eeb0 0a67 	vmov.f32	s0, s15
 8001d9a:	3718      	adds	r7, #24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001da2:	bf00      	nop
 8001da4:	f3af 8000 	nop.w
 8001da8:	54442d18 	.word	0x54442d18
 8001dac:	401921fb 	.word	0x401921fb

08001db0 <sumCosineSquared>:

float sumCosineSquared( const float timestamps[], int size, float frequency) {
 8001db0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001db4:	b086      	sub	sp, #24
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	60f8      	str	r0, [r7, #12]
 8001dba:	60b9      	str	r1, [r7, #8]
 8001dbc:	ed87 0a01 	vstr	s0, [r7, #4]
    float sum = 0;
 8001dc0:	f04f 0300 	mov.w	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size; i++) {
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	e065      	b.n	8001e98 <sumCosineSquared+0xe8>
        sum += cos(2 * M_PI * frequency * timestamps[i]) * cos(2 * M_PI * frequency * timestamps[i]);
 8001dcc:	6978      	ldr	r0, [r7, #20]
 8001dce:	f7fe fb7f 	bl	80004d0 <__aeabi_f2d>
 8001dd2:	4604      	mov	r4, r0
 8001dd4:	460d      	mov	r5, r1
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7fe fb7a 	bl	80004d0 <__aeabi_f2d>
 8001ddc:	a336      	add	r3, pc, #216	@ (adr r3, 8001eb8 <sumCosineSquared+0x108>)
 8001dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de2:	f7fe fbcd 	bl	8000580 <__aeabi_dmul>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4690      	mov	r8, r2
 8001dec:	4699      	mov	r9, r3
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	4413      	add	r3, r2
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7fe fb69 	bl	80004d0 <__aeabi_f2d>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	4640      	mov	r0, r8
 8001e04:	4649      	mov	r1, r9
 8001e06:	f7fe fbbb 	bl	8000580 <__aeabi_dmul>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	ec43 2b17 	vmov	d7, r2, r3
 8001e12:	eeb0 0a47 	vmov.f32	s0, s14
 8001e16:	eef0 0a67 	vmov.f32	s1, s15
 8001e1a:	f004 fcb1 	bl	8006780 <cos>
 8001e1e:	ec5b ab10 	vmov	sl, fp, d0
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7fe fb54 	bl	80004d0 <__aeabi_f2d>
 8001e28:	a323      	add	r3, pc, #140	@ (adr r3, 8001eb8 <sumCosineSquared+0x108>)
 8001e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2e:	f7fe fba7 	bl	8000580 <__aeabi_dmul>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4690      	mov	r8, r2
 8001e38:	4699      	mov	r9, r3
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	4413      	add	r3, r2
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe fb43 	bl	80004d0 <__aeabi_f2d>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	4640      	mov	r0, r8
 8001e50:	4649      	mov	r1, r9
 8001e52:	f7fe fb95 	bl	8000580 <__aeabi_dmul>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	ec43 2b17 	vmov	d7, r2, r3
 8001e5e:	eeb0 0a47 	vmov.f32	s0, s14
 8001e62:	eef0 0a67 	vmov.f32	s1, s15
 8001e66:	f004 fc8b 	bl	8006780 <cos>
 8001e6a:	ec53 2b10 	vmov	r2, r3, d0
 8001e6e:	4650      	mov	r0, sl
 8001e70:	4659      	mov	r1, fp
 8001e72:	f7fe fb85 	bl	8000580 <__aeabi_dmul>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4620      	mov	r0, r4
 8001e7c:	4629      	mov	r1, r5
 8001e7e:	f7fe f9c9 	bl	8000214 <__adddf3>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	4610      	mov	r0, r2
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f7fe fe51 	bl	8000b30 <__aeabi_d2f>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size; i++) {
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	3301      	adds	r3, #1
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	db95      	blt.n	8001dcc <sumCosineSquared+0x1c>
    }
    return sum;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	ee07 3a90 	vmov	s15, r3
}
 8001ea6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eb2:	bf00      	nop
 8001eb4:	f3af 8000 	nop.w
 8001eb8:	54442d18 	.word	0x54442d18
 8001ebc:	401921fb 	.word	0x401921fb

08001ec0 <sumSineMult>:
        sum += arr1[i] * arr2[i];
    }
    return sum;
}

float sumSineMult(const float data[], const float timestamps[], int size, float frequency) {
 8001ec0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ec4:	b086      	sub	sp, #24
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	60f8      	str	r0, [r7, #12]
 8001eca:	60b9      	str	r1, [r7, #8]
 8001ecc:	607a      	str	r2, [r7, #4]
 8001ece:	ed87 0a00 	vstr	s0, [r7]
    float sum = 0;
 8001ed2:	f04f 0300 	mov.w	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size; i++) {
 8001ed8:	2300      	movs	r3, #0
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	e049      	b.n	8001f72 <sumSineMult+0xb2>
        sum += data[i] * sin(2 * M_PI * frequency * timestamps[i]);
 8001ede:	6978      	ldr	r0, [r7, #20]
 8001ee0:	f7fe faf6 	bl	80004d0 <__aeabi_f2d>
 8001ee4:	4604      	mov	r4, r0
 8001ee6:	460d      	mov	r5, r1
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	4413      	add	r3, r2
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7fe faec 	bl	80004d0 <__aeabi_f2d>
 8001ef8:	4680      	mov	r8, r0
 8001efa:	4689      	mov	r9, r1
 8001efc:	6838      	ldr	r0, [r7, #0]
 8001efe:	f7fe fae7 	bl	80004d0 <__aeabi_f2d>
 8001f02:	a323      	add	r3, pc, #140	@ (adr r3, 8001f90 <sumSineMult+0xd0>)
 8001f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f08:	f7fe fb3a 	bl	8000580 <__aeabi_dmul>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4692      	mov	sl, r2
 8001f12:	469b      	mov	fp, r3
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	68ba      	ldr	r2, [r7, #8]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe fad6 	bl	80004d0 <__aeabi_f2d>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4650      	mov	r0, sl
 8001f2a:	4659      	mov	r1, fp
 8001f2c:	f7fe fb28 	bl	8000580 <__aeabi_dmul>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	ec43 2b17 	vmov	d7, r2, r3
 8001f38:	eeb0 0a47 	vmov.f32	s0, s14
 8001f3c:	eef0 0a67 	vmov.f32	s1, s15
 8001f40:	f004 fc7a 	bl	8006838 <sin>
 8001f44:	ec53 2b10 	vmov	r2, r3, d0
 8001f48:	4640      	mov	r0, r8
 8001f4a:	4649      	mov	r1, r9
 8001f4c:	f7fe fb18 	bl	8000580 <__aeabi_dmul>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4620      	mov	r0, r4
 8001f56:	4629      	mov	r1, r5
 8001f58:	f7fe f95c 	bl	8000214 <__adddf3>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4610      	mov	r0, r2
 8001f62:	4619      	mov	r1, r3
 8001f64:	f7fe fde4 	bl	8000b30 <__aeabi_d2f>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size; i++) {
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	dbb1      	blt.n	8001ede <sumSineMult+0x1e>
    }
    return sum;
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	ee07 3a90 	vmov	s15, r3
}
 8001f80:	eeb0 0a67 	vmov.f32	s0, s15
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f8c:	f3af 8000 	nop.w
 8001f90:	54442d18 	.word	0x54442d18
 8001f94:	401921fb 	.word	0x401921fb

08001f98 <sumCosineMult>:

float sumCosineMult(const float data[], const float timestamps[], int size, float frequency) {
 8001f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f9c:	b086      	sub	sp, #24
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	60f8      	str	r0, [r7, #12]
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	607a      	str	r2, [r7, #4]
 8001fa6:	ed87 0a00 	vstr	s0, [r7]
    float sum = 0;
 8001faa:	f04f 0300 	mov.w	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size; i++) {
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	e049      	b.n	800204a <sumCosineMult+0xb2>
        sum += data[i] * cos(2 * M_PI * frequency * timestamps[i]);;
 8001fb6:	6978      	ldr	r0, [r7, #20]
 8001fb8:	f7fe fa8a 	bl	80004d0 <__aeabi_f2d>
 8001fbc:	4604      	mov	r4, r0
 8001fbe:	460d      	mov	r5, r1
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe fa80 	bl	80004d0 <__aeabi_f2d>
 8001fd0:	4680      	mov	r8, r0
 8001fd2:	4689      	mov	r9, r1
 8001fd4:	6838      	ldr	r0, [r7, #0]
 8001fd6:	f7fe fa7b 	bl	80004d0 <__aeabi_f2d>
 8001fda:	a323      	add	r3, pc, #140	@ (adr r3, 8002068 <sumCosineMult+0xd0>)
 8001fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe0:	f7fe face 	bl	8000580 <__aeabi_dmul>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4692      	mov	sl, r2
 8001fea:	469b      	mov	fp, r3
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	68ba      	ldr	r2, [r7, #8]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe fa6a 	bl	80004d0 <__aeabi_f2d>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4650      	mov	r0, sl
 8002002:	4659      	mov	r1, fp
 8002004:	f7fe fabc 	bl	8000580 <__aeabi_dmul>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	ec43 2b17 	vmov	d7, r2, r3
 8002010:	eeb0 0a47 	vmov.f32	s0, s14
 8002014:	eef0 0a67 	vmov.f32	s1, s15
 8002018:	f004 fbb2 	bl	8006780 <cos>
 800201c:	ec53 2b10 	vmov	r2, r3, d0
 8002020:	4640      	mov	r0, r8
 8002022:	4649      	mov	r1, r9
 8002024:	f7fe faac 	bl	8000580 <__aeabi_dmul>
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	4620      	mov	r0, r4
 800202e:	4629      	mov	r1, r5
 8002030:	f7fe f8f0 	bl	8000214 <__adddf3>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	4610      	mov	r0, r2
 800203a:	4619      	mov	r1, r3
 800203c:	f7fe fd78 	bl	8000b30 <__aeabi_d2f>
 8002040:	4603      	mov	r3, r0
 8002042:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size; i++) {
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	3301      	adds	r3, #1
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	429a      	cmp	r2, r3
 8002050:	dbb1      	blt.n	8001fb6 <sumCosineMult+0x1e>
    }
    return sum;
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	ee07 3a90 	vmov	s15, r3
}
 8002058:	eeb0 0a67 	vmov.f32	s0, s15
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002064:	f3af 8000 	nop.w
 8002068:	54442d18 	.word	0x54442d18
 800206c:	401921fb 	.word	0x401921fb

08002070 <avg>:

float avg(const float arr1[], int size) {
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
    float sum = 0;
 800207a:	f04f 0300 	mov.w	r3, #0
 800207e:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < size; i++) {
 8002080:	2300      	movs	r3, #0
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	e00e      	b.n	80020a4 <avg+0x34>
        sum += arr1[i];
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	4413      	add	r3, r2
 800208e:	edd3 7a00 	vldr	s15, [r3]
 8002092:	ed97 7a03 	vldr	s14, [r7, #12]
 8002096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800209a:	edc7 7a03 	vstr	s15, [r7, #12]
    for (int i = 0; i < size; i++) {
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	3301      	adds	r3, #1
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	dbec      	blt.n	8002086 <avg+0x16>
    }
    return sum / size;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	ee07 3a90 	vmov	s15, r3
 80020b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020b6:	ed97 7a03 	vldr	s14, [r7, #12]
 80020ba:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80020be:	eef0 7a66 	vmov.f32	s15, s13
}
 80020c2:	eeb0 0a67 	vmov.f32	s0, s15
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <SINE_least_squares_regression>:
        sum += arr1[i] * arr2[i];
    }
    return sum / size;
}

void SINE_least_squares_regression(const float data[], const float timestamps[], int n_samples, float frequency, float* bestAmplitude, float* bestPhase, float* bestOffset) {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	ed2d 8b02 	vpush	{d8}
 80020d6:	b08c      	sub	sp, #48	@ 0x30
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6178      	str	r0, [r7, #20]
 80020dc:	6139      	str	r1, [r7, #16]
 80020de:	60fa      	str	r2, [r7, #12]
 80020e0:	ed87 0a02 	vstr	s0, [r7, #8]
 80020e4:	607b      	str	r3, [r7, #4]

    float result[2] = { sumSineMult(data, timestamps, n_samples , frequency) / sumSineSquared(timestamps, n_samples , frequency),
 80020e6:	ed97 0a02 	vldr	s0, [r7, #8]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	6939      	ldr	r1, [r7, #16]
 80020ee:	6978      	ldr	r0, [r7, #20]
 80020f0:	f7ff fee6 	bl	8001ec0 <sumSineMult>
 80020f4:	eeb0 8a40 	vmov.f32	s16, s0
 80020f8:	ed97 0a02 	vldr	s0, [r7, #8]
 80020fc:	68f9      	ldr	r1, [r7, #12]
 80020fe:	6938      	ldr	r0, [r7, #16]
 8002100:	f7ff fdce 	bl	8001ca0 <sumSineSquared>
 8002104:	eeb0 7a40 	vmov.f32	s14, s0
 8002108:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800210c:	edc7 7a07 	vstr	s15, [r7, #28]
                        sumCosineMult(data, timestamps, n_samples , frequency) / sumCosineSquared(timestamps, n_samples , frequency) };
 8002110:	ed97 0a02 	vldr	s0, [r7, #8]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	6939      	ldr	r1, [r7, #16]
 8002118:	6978      	ldr	r0, [r7, #20]
 800211a:	f7ff ff3d 	bl	8001f98 <sumCosineMult>
 800211e:	eeb0 8a40 	vmov.f32	s16, s0
 8002122:	ed97 0a02 	vldr	s0, [r7, #8]
 8002126:	68f9      	ldr	r1, [r7, #12]
 8002128:	6938      	ldr	r0, [r7, #16]
 800212a:	f7ff fe41 	bl	8001db0 <sumCosineSquared>
 800212e:	eeb0 7a40 	vmov.f32	s14, s0
 8002132:	eec8 7a07 	vdiv.f32	s15, s16, s14
    float result[2] = { sumSineMult(data, timestamps, n_samples , frequency) / sumSineSquared(timestamps, n_samples , frequency),
 8002136:	edc7 7a08 	vstr	s15, [r7, #32]

//    float result[2] = { 2 * sumSineMult(data, timestamps, n_samples , frequency) / n_samples,
//                        2 * sumCosineMult(data, timestamps, n_samples , frequency) / n_samples};

    float A = sqrt(result[0] * result[0] + result[1] * result[1]);
 800213a:	ed97 7a07 	vldr	s14, [r7, #28]
 800213e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002142:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002146:	edd7 6a08 	vldr	s13, [r7, #32]
 800214a:	edd7 7a08 	vldr	s15, [r7, #32]
 800214e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002152:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002156:	ee17 0a90 	vmov	r0, s15
 800215a:	f7fe f9b9 	bl	80004d0 <__aeabi_f2d>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	ec43 2b10 	vmov	d0, r2, r3
 8002166:	f004 f945 	bl	80063f4 <sqrt>
 800216a:	ec53 2b10 	vmov	r2, r3, d0
 800216e:	4610      	mov	r0, r2
 8002170:	4619      	mov	r1, r3
 8002172:	f7fe fcdd 	bl	8000b30 <__aeabi_d2f>
 8002176:	4603      	mov	r3, r0
 8002178:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float P = atan(result[1] / result[0]);
 800217a:	ed97 7a08 	vldr	s14, [r7, #32]
 800217e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002182:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002186:	ee16 0a90 	vmov	r0, s13
 800218a:	f7fe f9a1 	bl	80004d0 <__aeabi_f2d>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	ec43 2b10 	vmov	d0, r2, r3
 8002196:	f004 f95b 	bl	8006450 <atan>
 800219a:	ec53 2b10 	vmov	r2, r3, d0
 800219e:	4610      	mov	r0, r2
 80021a0:	4619      	mov	r1, r3
 80021a2:	f7fe fcc5 	bl	8000b30 <__aeabi_d2f>
 80021a6:	4603      	mov	r3, r0
 80021a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    float O = avg(data, n_samples);
 80021aa:	68f9      	ldr	r1, [r7, #12]
 80021ac:	6978      	ldr	r0, [r7, #20]
 80021ae:	f7ff ff5f 	bl	8002070 <avg>
 80021b2:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

    *bestAmplitude = A;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021ba:	601a      	str	r2, [r3, #0]
    *bestPhase = P;
 80021bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80021c0:	601a      	str	r2, [r3, #0]
    *bestOffset = O;
 80021c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021c6:	601a      	str	r2, [r3, #0]
}
 80021c8:	bf00      	nop
 80021ca:	3730      	adds	r7, #48	@ 0x30
 80021cc:	46bd      	mov	sp, r7
 80021ce:	ecbd 8b02 	vpop	{d8}
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	607b      	str	r3, [r7, #4]
 80021de:	4b10      	ldr	r3, [pc, #64]	@ (8002220 <HAL_MspInit+0x4c>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002220 <HAL_MspInit+0x4c>)
 80021e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002220 <HAL_MspInit+0x4c>)
 80021ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021f2:	607b      	str	r3, [r7, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	603b      	str	r3, [r7, #0]
 80021fa:	4b09      	ldr	r3, [pc, #36]	@ (8002220 <HAL_MspInit+0x4c>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fe:	4a08      	ldr	r2, [pc, #32]	@ (8002220 <HAL_MspInit+0x4c>)
 8002200:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002204:	6413      	str	r3, [r2, #64]	@ 0x40
 8002206:	4b06      	ldr	r3, [pc, #24]	@ (8002220 <HAL_MspInit+0x4c>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800220e:	603b      	str	r3, [r7, #0]
 8002210:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40023800 	.word	0x40023800

08002224 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08a      	sub	sp, #40	@ 0x28
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a17      	ldr	r2, [pc, #92]	@ (80022a0 <HAL_ADC_MspInit+0x7c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d127      	bne.n	8002296 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	4b16      	ldr	r3, [pc, #88]	@ (80022a4 <HAL_ADC_MspInit+0x80>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224e:	4a15      	ldr	r2, [pc, #84]	@ (80022a4 <HAL_ADC_MspInit+0x80>)
 8002250:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002254:	6453      	str	r3, [r2, #68]	@ 0x44
 8002256:	4b13      	ldr	r3, [pc, #76]	@ (80022a4 <HAL_ADC_MspInit+0x80>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	4b0f      	ldr	r3, [pc, #60]	@ (80022a4 <HAL_ADC_MspInit+0x80>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226a:	4a0e      	ldr	r2, [pc, #56]	@ (80022a4 <HAL_ADC_MspInit+0x80>)
 800226c:	f043 0302 	orr.w	r3, r3, #2
 8002270:	6313      	str	r3, [r2, #48]	@ 0x30
 8002272:	4b0c      	ldr	r3, [pc, #48]	@ (80022a4 <HAL_ADC_MspInit+0x80>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800227e:	2302      	movs	r3, #2
 8002280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002282:	2303      	movs	r3, #3
 8002284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228a:	f107 0314 	add.w	r3, r7, #20
 800228e:	4619      	mov	r1, r3
 8002290:	4805      	ldr	r0, [pc, #20]	@ (80022a8 <HAL_ADC_MspInit+0x84>)
 8002292:	f000 fdc9 	bl	8002e28 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002296:	bf00      	nop
 8002298:	3728      	adds	r7, #40	@ 0x28
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40012000 	.word	0x40012000
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40020400 	.word	0x40020400

080022ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08a      	sub	sp, #40	@ 0x28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	f107 0314 	add.w	r3, r7, #20
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a19      	ldr	r2, [pc, #100]	@ (8002330 <HAL_SPI_MspInit+0x84>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d12b      	bne.n	8002326 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	4b18      	ldr	r3, [pc, #96]	@ (8002334 <HAL_SPI_MspInit+0x88>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d6:	4a17      	ldr	r2, [pc, #92]	@ (8002334 <HAL_SPI_MspInit+0x88>)
 80022d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80022de:	4b15      	ldr	r3, [pc, #84]	@ (8002334 <HAL_SPI_MspInit+0x88>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	4b11      	ldr	r3, [pc, #68]	@ (8002334 <HAL_SPI_MspInit+0x88>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f2:	4a10      	ldr	r2, [pc, #64]	@ (8002334 <HAL_SPI_MspInit+0x88>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002334 <HAL_SPI_MspInit+0x88>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002306:	23e0      	movs	r3, #224	@ 0xe0
 8002308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230a:	2302      	movs	r3, #2
 800230c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002312:	2303      	movs	r3, #3
 8002314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002316:	2305      	movs	r3, #5
 8002318:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231a:	f107 0314 	add.w	r3, r7, #20
 800231e:	4619      	mov	r1, r3
 8002320:	4805      	ldr	r0, [pc, #20]	@ (8002338 <HAL_SPI_MspInit+0x8c>)
 8002322:	f000 fd81 	bl	8002e28 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002326:	bf00      	nop
 8002328:	3728      	adds	r7, #40	@ 0x28
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40013000 	.word	0x40013000
 8002334:	40023800 	.word	0x40023800
 8002338:	40020000 	.word	0x40020000

0800233c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800234c:	d115      	bne.n	800237a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	4b0c      	ldr	r3, [pc, #48]	@ (8002384 <HAL_TIM_Base_MspInit+0x48>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002356:	4a0b      	ldr	r2, [pc, #44]	@ (8002384 <HAL_TIM_Base_MspInit+0x48>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	6413      	str	r3, [r2, #64]	@ 0x40
 800235e:	4b09      	ldr	r3, [pc, #36]	@ (8002384 <HAL_TIM_Base_MspInit+0x48>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800236a:	2200      	movs	r2, #0
 800236c:	2100      	movs	r1, #0
 800236e:	201c      	movs	r0, #28
 8002370:	f000 fd23 	bl	8002dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002374:	201c      	movs	r0, #28
 8002376:	f000 fd3c 	bl	8002df2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800237a:	bf00      	nop
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40023800 	.word	0x40023800

08002388 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08a      	sub	sp, #40	@ 0x28
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a19      	ldr	r2, [pc, #100]	@ (800240c <HAL_UART_MspInit+0x84>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d12c      	bne.n	8002404 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	613b      	str	r3, [r7, #16]
 80023ae:	4b18      	ldr	r3, [pc, #96]	@ (8002410 <HAL_UART_MspInit+0x88>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b2:	4a17      	ldr	r2, [pc, #92]	@ (8002410 <HAL_UART_MspInit+0x88>)
 80023b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ba:	4b15      	ldr	r3, [pc, #84]	@ (8002410 <HAL_UART_MspInit+0x88>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023c2:	613b      	str	r3, [r7, #16]
 80023c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	4b11      	ldr	r3, [pc, #68]	@ (8002410 <HAL_UART_MspInit+0x88>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ce:	4a10      	ldr	r2, [pc, #64]	@ (8002410 <HAL_UART_MspInit+0x88>)
 80023d0:	f043 0308 	orr.w	r3, r3, #8
 80023d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002410 <HAL_UART_MspInit+0x88>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80023e2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80023e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e8:	2302      	movs	r3, #2
 80023ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f0:	2303      	movs	r3, #3
 80023f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023f4:	2307      	movs	r3, #7
 80023f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023f8:	f107 0314 	add.w	r3, r7, #20
 80023fc:	4619      	mov	r1, r3
 80023fe:	4805      	ldr	r0, [pc, #20]	@ (8002414 <HAL_UART_MspInit+0x8c>)
 8002400:	f000 fd12 	bl	8002e28 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002404:	bf00      	nop
 8002406:	3728      	adds	r7, #40	@ 0x28
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40004800 	.word	0x40004800
 8002410:	40023800 	.word	0x40023800
 8002414:	40020c00 	.word	0x40020c00

08002418 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b0a0      	sub	sp, #128	@ 0x80
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002420:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002430:	f107 0310 	add.w	r3, r7, #16
 8002434:	225c      	movs	r2, #92	@ 0x5c
 8002436:	2100      	movs	r1, #0
 8002438:	4618      	mov	r0, r3
 800243a:	f003 ffa8 	bl	800638e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002446:	d14e      	bne.n	80024e6 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002448:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800244c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800244e:	2300      	movs	r3, #0
 8002450:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002452:	f107 0310 	add.w	r3, r7, #16
 8002456:	4618      	mov	r0, r3
 8002458:	f001 f91a 	bl	8003690 <HAL_RCCEx_PeriphCLKConfig>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8002462:	f7ff fc15 	bl	8001c90 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	4b21      	ldr	r3, [pc, #132]	@ (80024f0 <HAL_PCD_MspInit+0xd8>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246e:	4a20      	ldr	r2, [pc, #128]	@ (80024f0 <HAL_PCD_MspInit+0xd8>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	6313      	str	r3, [r2, #48]	@ 0x30
 8002476:	4b1e      	ldr	r3, [pc, #120]	@ (80024f0 <HAL_PCD_MspInit+0xd8>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002482:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002486:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002488:	2302      	movs	r3, #2
 800248a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248c:	2300      	movs	r3, #0
 800248e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002490:	2303      	movs	r3, #3
 8002492:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002494:	230a      	movs	r3, #10
 8002496:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002498:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800249c:	4619      	mov	r1, r3
 800249e:	4815      	ldr	r0, [pc, #84]	@ (80024f4 <HAL_PCD_MspInit+0xdc>)
 80024a0:	f000 fcc2 	bl	8002e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80024a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024aa:	2300      	movs	r3, #0
 80024ac:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80024b2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80024b6:	4619      	mov	r1, r3
 80024b8:	480e      	ldr	r0, [pc, #56]	@ (80024f4 <HAL_PCD_MspInit+0xdc>)
 80024ba:	f000 fcb5 	bl	8002e28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80024be:	4b0c      	ldr	r3, [pc, #48]	@ (80024f0 <HAL_PCD_MspInit+0xd8>)
 80024c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024c2:	4a0b      	ldr	r2, [pc, #44]	@ (80024f0 <HAL_PCD_MspInit+0xd8>)
 80024c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024c8:	6353      	str	r3, [r2, #52]	@ 0x34
 80024ca:	2300      	movs	r3, #0
 80024cc:	60bb      	str	r3, [r7, #8]
 80024ce:	4b08      	ldr	r3, [pc, #32]	@ (80024f0 <HAL_PCD_MspInit+0xd8>)
 80024d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d2:	4a07      	ldr	r2, [pc, #28]	@ (80024f0 <HAL_PCD_MspInit+0xd8>)
 80024d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024da:	4b05      	ldr	r3, [pc, #20]	@ (80024f0 <HAL_PCD_MspInit+0xd8>)
 80024dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024e2:	60bb      	str	r3, [r7, #8]
 80024e4:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80024e6:	bf00      	nop
 80024e8:	3780      	adds	r7, #128	@ 0x80
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40020000 	.word	0x40020000

080024f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024fc:	bf00      	nop
 80024fe:	e7fd      	b.n	80024fc <NMI_Handler+0x4>

08002500 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002504:	bf00      	nop
 8002506:	e7fd      	b.n	8002504 <HardFault_Handler+0x4>

08002508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800250c:	bf00      	nop
 800250e:	e7fd      	b.n	800250c <MemManage_Handler+0x4>

08002510 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002514:	bf00      	nop
 8002516:	e7fd      	b.n	8002514 <BusFault_Handler+0x4>

08002518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800251c:	bf00      	nop
 800251e:	e7fd      	b.n	800251c <UsageFault_Handler+0x4>

08002520 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800252e:	b480      	push	{r7}
 8002530:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800254e:	f000 f8a3 	bl	8002698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800255c:	4802      	ldr	r0, [pc, #8]	@ (8002568 <TIM2_IRQHandler+0x10>)
 800255e:	f002 fd99 	bl	8005094 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	2000012c 	.word	0x2000012c

0800256c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8002570:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002574:	f000 fe20 	bl	80031b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002578:	bf00      	nop
 800257a:	bd80      	pop	{r7, pc}

0800257c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002580:	4b06      	ldr	r3, [pc, #24]	@ (800259c <SystemInit+0x20>)
 8002582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002586:	4a05      	ldr	r2, [pc, #20]	@ (800259c <SystemInit+0x20>)
 8002588:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800258c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80025a4:	f7ff ffea 	bl	800257c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025a8:	480c      	ldr	r0, [pc, #48]	@ (80025dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025aa:	490d      	ldr	r1, [pc, #52]	@ (80025e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025ac:	4a0d      	ldr	r2, [pc, #52]	@ (80025e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025b0:	e002      	b.n	80025b8 <LoopCopyDataInit>

080025b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025b6:	3304      	adds	r3, #4

080025b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025bc:	d3f9      	bcc.n	80025b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025be:	4a0a      	ldr	r2, [pc, #40]	@ (80025e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025c0:	4c0a      	ldr	r4, [pc, #40]	@ (80025ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80025c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025c4:	e001      	b.n	80025ca <LoopFillZerobss>

080025c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025c8:	3204      	adds	r2, #4

080025ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025cc:	d3fb      	bcc.n	80025c6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80025ce:	f003 feed 	bl	80063ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025d2:	f7fe fe2d 	bl	8001230 <main>
  bx  lr    
 80025d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025e0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80025e4:	08007c98 	.word	0x08007c98
  ldr r2, =_sbss
 80025e8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80025ec:	200007dc 	.word	0x200007dc

080025f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025f0:	e7fe      	b.n	80025f0 <ADC_IRQHandler>
	...

080025f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002634 <HAL_Init+0x40>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002634 <HAL_Init+0x40>)
 80025fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002602:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002604:	4b0b      	ldr	r3, [pc, #44]	@ (8002634 <HAL_Init+0x40>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a0a      	ldr	r2, [pc, #40]	@ (8002634 <HAL_Init+0x40>)
 800260a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800260e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002610:	4b08      	ldr	r3, [pc, #32]	@ (8002634 <HAL_Init+0x40>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a07      	ldr	r2, [pc, #28]	@ (8002634 <HAL_Init+0x40>)
 8002616:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800261a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800261c:	2003      	movs	r0, #3
 800261e:	f000 fbc1 	bl	8002da4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002622:	2000      	movs	r0, #0
 8002624:	f000 f808 	bl	8002638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002628:	f7ff fdd4 	bl	80021d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40023c00 	.word	0x40023c00

08002638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002640:	4b12      	ldr	r3, [pc, #72]	@ (800268c <HAL_InitTick+0x54>)
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	4b12      	ldr	r3, [pc, #72]	@ (8002690 <HAL_InitTick+0x58>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	4619      	mov	r1, r3
 800264a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800264e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002652:	fbb2 f3f3 	udiv	r3, r2, r3
 8002656:	4618      	mov	r0, r3
 8002658:	f000 fbd9 	bl	8002e0e <HAL_SYSTICK_Config>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e00e      	b.n	8002684 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b0f      	cmp	r3, #15
 800266a:	d80a      	bhi.n	8002682 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800266c:	2200      	movs	r2, #0
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	f04f 30ff 	mov.w	r0, #4294967295
 8002674:	f000 fba1 	bl	8002dba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002678:	4a06      	ldr	r2, [pc, #24]	@ (8002694 <HAL_InitTick+0x5c>)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800267e:	2300      	movs	r3, #0
 8002680:	e000      	b.n	8002684 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
}
 8002684:	4618      	mov	r0, r3
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	20000000 	.word	0x20000000
 8002690:	20000008 	.word	0x20000008
 8002694:	20000004 	.word	0x20000004

08002698 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800269c:	4b06      	ldr	r3, [pc, #24]	@ (80026b8 <HAL_IncTick+0x20>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	461a      	mov	r2, r3
 80026a2:	4b06      	ldr	r3, [pc, #24]	@ (80026bc <HAL_IncTick+0x24>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4413      	add	r3, r2
 80026a8:	4a04      	ldr	r2, [pc, #16]	@ (80026bc <HAL_IncTick+0x24>)
 80026aa:	6013      	str	r3, [r2, #0]
}
 80026ac:	bf00      	nop
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	20000008 	.word	0x20000008
 80026bc:	200006a0 	.word	0x200006a0

080026c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  return uwTick;
 80026c4:	4b03      	ldr	r3, [pc, #12]	@ (80026d4 <HAL_GetTick+0x14>)
 80026c6:	681b      	ldr	r3, [r3, #0]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	200006a0 	.word	0x200006a0

080026d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026e0:	f7ff ffee 	bl	80026c0 <HAL_GetTick>
 80026e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f0:	d005      	beq.n	80026fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026f2:	4b0a      	ldr	r3, [pc, #40]	@ (800271c <HAL_Delay+0x44>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	461a      	mov	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4413      	add	r3, r2
 80026fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026fe:	bf00      	nop
 8002700:	f7ff ffde 	bl	80026c0 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	429a      	cmp	r2, r3
 800270e:	d8f7      	bhi.n	8002700 <HAL_Delay+0x28>
  {
  }
}
 8002710:	bf00      	nop
 8002712:	bf00      	nop
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	20000008 	.word	0x20000008

08002720 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002728:	2300      	movs	r3, #0
 800272a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e033      	b.n	800279e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273a:	2b00      	cmp	r3, #0
 800273c:	d109      	bne.n	8002752 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7ff fd70 	bl	8002224 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002756:	f003 0310 	and.w	r3, r3, #16
 800275a:	2b00      	cmp	r3, #0
 800275c:	d118      	bne.n	8002790 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002762:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002766:	f023 0302 	bic.w	r3, r3, #2
 800276a:	f043 0202 	orr.w	r2, r3, #2
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f94a 	bl	8002a0c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002782:	f023 0303 	bic.w	r3, r3, #3
 8002786:	f043 0201 	orr.w	r2, r3, #1
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	641a      	str	r2, [r3, #64]	@ 0x40
 800278e:	e001      	b.n	8002794 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800279c:	7bfb      	ldrb	r3, [r7, #15]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
	...

080027a8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d101      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x1c>
 80027c0:	2302      	movs	r3, #2
 80027c2:	e113      	b.n	80029ec <HAL_ADC_ConfigChannel+0x244>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2b09      	cmp	r3, #9
 80027d2:	d925      	bls.n	8002820 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68d9      	ldr	r1, [r3, #12]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	b29b      	uxth	r3, r3
 80027e0:	461a      	mov	r2, r3
 80027e2:	4613      	mov	r3, r2
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	4413      	add	r3, r2
 80027e8:	3b1e      	subs	r3, #30
 80027ea:	2207      	movs	r2, #7
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43da      	mvns	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	400a      	ands	r2, r1
 80027f8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68d9      	ldr	r1, [r3, #12]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	b29b      	uxth	r3, r3
 800280a:	4618      	mov	r0, r3
 800280c:	4603      	mov	r3, r0
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	4403      	add	r3, r0
 8002812:	3b1e      	subs	r3, #30
 8002814:	409a      	lsls	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	e022      	b.n	8002866 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6919      	ldr	r1, [r3, #16]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	b29b      	uxth	r3, r3
 800282c:	461a      	mov	r2, r3
 800282e:	4613      	mov	r3, r2
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	4413      	add	r3, r2
 8002834:	2207      	movs	r2, #7
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43da      	mvns	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	400a      	ands	r2, r1
 8002842:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6919      	ldr	r1, [r3, #16]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	b29b      	uxth	r3, r3
 8002854:	4618      	mov	r0, r3
 8002856:	4603      	mov	r3, r0
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	4403      	add	r3, r0
 800285c:	409a      	lsls	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b06      	cmp	r3, #6
 800286c:	d824      	bhi.n	80028b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	3b05      	subs	r3, #5
 8002880:	221f      	movs	r2, #31
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43da      	mvns	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	400a      	ands	r2, r1
 800288e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	b29b      	uxth	r3, r3
 800289c:	4618      	mov	r0, r3
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	4613      	mov	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	3b05      	subs	r3, #5
 80028aa:	fa00 f203 	lsl.w	r2, r0, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80028b6:	e04c      	b.n	8002952 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b0c      	cmp	r3, #12
 80028be:	d824      	bhi.n	800290a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	3b23      	subs	r3, #35	@ 0x23
 80028d2:	221f      	movs	r2, #31
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43da      	mvns	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	400a      	ands	r2, r1
 80028e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	4618      	mov	r0, r3
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	3b23      	subs	r3, #35	@ 0x23
 80028fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	631a      	str	r2, [r3, #48]	@ 0x30
 8002908:	e023      	b.n	8002952 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	4613      	mov	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	3b41      	subs	r3, #65	@ 0x41
 800291c:	221f      	movs	r2, #31
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	43da      	mvns	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	400a      	ands	r2, r1
 800292a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	b29b      	uxth	r3, r3
 8002938:	4618      	mov	r0, r3
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	3b41      	subs	r3, #65	@ 0x41
 8002946:	fa00 f203 	lsl.w	r2, r0, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002952:	4b29      	ldr	r3, [pc, #164]	@ (80029f8 <HAL_ADC_ConfigChannel+0x250>)
 8002954:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a28      	ldr	r2, [pc, #160]	@ (80029fc <HAL_ADC_ConfigChannel+0x254>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d10f      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x1d8>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b12      	cmp	r3, #18
 8002966:	d10b      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a1d      	ldr	r2, [pc, #116]	@ (80029fc <HAL_ADC_ConfigChannel+0x254>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d12b      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x23a>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a1c      	ldr	r2, [pc, #112]	@ (8002a00 <HAL_ADC_ConfigChannel+0x258>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d003      	beq.n	800299c <HAL_ADC_ConfigChannel+0x1f4>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2b11      	cmp	r3, #17
 800299a:	d122      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a11      	ldr	r2, [pc, #68]	@ (8002a00 <HAL_ADC_ConfigChannel+0x258>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d111      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029be:	4b11      	ldr	r3, [pc, #68]	@ (8002a04 <HAL_ADC_ConfigChannel+0x25c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a11      	ldr	r2, [pc, #68]	@ (8002a08 <HAL_ADC_ConfigChannel+0x260>)
 80029c4:	fba2 2303 	umull	r2, r3, r2, r3
 80029c8:	0c9a      	lsrs	r2, r3, #18
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80029d4:	e002      	b.n	80029dc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	3b01      	subs	r3, #1
 80029da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f9      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	40012300 	.word	0x40012300
 80029fc:	40012000 	.word	0x40012000
 8002a00:	10000012 	.word	0x10000012
 8002a04:	20000000 	.word	0x20000000
 8002a08:	431bde83 	.word	0x431bde83

08002a0c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a14:	4b79      	ldr	r3, [pc, #484]	@ (8002bfc <ADC_Init+0x1f0>)
 8002a16:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6859      	ldr	r1, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	021a      	lsls	r2, r3, #8
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002a64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6859      	ldr	r1, [r3, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6899      	ldr	r1, [r3, #8]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a9e:	4a58      	ldr	r2, [pc, #352]	@ (8002c00 <ADC_Init+0x1f4>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d022      	beq.n	8002aea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689a      	ldr	r2, [r3, #8]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ab2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6899      	ldr	r1, [r3, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ad4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6899      	ldr	r1, [r3, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	609a      	str	r2, [r3, #8]
 8002ae8:	e00f      	b.n	8002b0a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002af8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b08:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0202 	bic.w	r2, r2, #2
 8002b18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6899      	ldr	r1, [r3, #8]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	7e1b      	ldrb	r3, [r3, #24]
 8002b24:	005a      	lsls	r2, r3, #1
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d01b      	beq.n	8002b70 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b46:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002b56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6859      	ldr	r1, [r3, #4]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b62:	3b01      	subs	r3, #1
 8002b64:	035a      	lsls	r2, r3, #13
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	605a      	str	r2, [r3, #4]
 8002b6e:	e007      	b.n	8002b80 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b7e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002b8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	051a      	lsls	r2, r3, #20
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002bb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6899      	ldr	r1, [r3, #8]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002bc2:	025a      	lsls	r2, r3, #9
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6899      	ldr	r1, [r3, #8]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	029a      	lsls	r2, r3, #10
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	609a      	str	r2, [r3, #8]
}
 8002bf0:	bf00      	nop
 8002bf2:	3714      	adds	r7, #20
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	40012300 	.word	0x40012300
 8002c00:	0f000001 	.word	0x0f000001

08002c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c14:	4b0c      	ldr	r3, [pc, #48]	@ (8002c48 <__NVIC_SetPriorityGrouping+0x44>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c20:	4013      	ands	r3, r2
 8002c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c36:	4a04      	ldr	r2, [pc, #16]	@ (8002c48 <__NVIC_SetPriorityGrouping+0x44>)
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	60d3      	str	r3, [r2, #12]
}
 8002c3c:	bf00      	nop
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	e000ed00 	.word	0xe000ed00

08002c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c50:	4b04      	ldr	r3, [pc, #16]	@ (8002c64 <__NVIC_GetPriorityGrouping+0x18>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	0a1b      	lsrs	r3, r3, #8
 8002c56:	f003 0307 	and.w	r3, r3, #7
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	e000ed00 	.word	0xe000ed00

08002c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	db0b      	blt.n	8002c92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	f003 021f 	and.w	r2, r3, #31
 8002c80:	4907      	ldr	r1, [pc, #28]	@ (8002ca0 <__NVIC_EnableIRQ+0x38>)
 8002c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	2001      	movs	r0, #1
 8002c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	e000e100 	.word	0xe000e100

08002ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	6039      	str	r1, [r7, #0]
 8002cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	db0a      	blt.n	8002cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	490c      	ldr	r1, [pc, #48]	@ (8002cf0 <__NVIC_SetPriority+0x4c>)
 8002cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc2:	0112      	lsls	r2, r2, #4
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ccc:	e00a      	b.n	8002ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	4908      	ldr	r1, [pc, #32]	@ (8002cf4 <__NVIC_SetPriority+0x50>)
 8002cd4:	79fb      	ldrb	r3, [r7, #7]
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	3b04      	subs	r3, #4
 8002cdc:	0112      	lsls	r2, r2, #4
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	761a      	strb	r2, [r3, #24]
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	e000e100 	.word	0xe000e100
 8002cf4:	e000ed00 	.word	0xe000ed00

08002cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b089      	sub	sp, #36	@ 0x24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f1c3 0307 	rsb	r3, r3, #7
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	bf28      	it	cs
 8002d16:	2304      	movcs	r3, #4
 8002d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	2b06      	cmp	r3, #6
 8002d20:	d902      	bls.n	8002d28 <NVIC_EncodePriority+0x30>
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	3b03      	subs	r3, #3
 8002d26:	e000      	b.n	8002d2a <NVIC_EncodePriority+0x32>
 8002d28:	2300      	movs	r3, #0
 8002d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43da      	mvns	r2, r3
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	401a      	ands	r2, r3
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d40:	f04f 31ff 	mov.w	r1, #4294967295
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4a:	43d9      	mvns	r1, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d50:	4313      	orrs	r3, r2
         );
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3724      	adds	r7, #36	@ 0x24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
	...

08002d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d70:	d301      	bcc.n	8002d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d72:	2301      	movs	r3, #1
 8002d74:	e00f      	b.n	8002d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d76:	4a0a      	ldr	r2, [pc, #40]	@ (8002da0 <SysTick_Config+0x40>)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d7e:	210f      	movs	r1, #15
 8002d80:	f04f 30ff 	mov.w	r0, #4294967295
 8002d84:	f7ff ff8e 	bl	8002ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d88:	4b05      	ldr	r3, [pc, #20]	@ (8002da0 <SysTick_Config+0x40>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d8e:	4b04      	ldr	r3, [pc, #16]	@ (8002da0 <SysTick_Config+0x40>)
 8002d90:	2207      	movs	r2, #7
 8002d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	e000e010 	.word	0xe000e010

08002da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f7ff ff29 	bl	8002c04 <__NVIC_SetPriorityGrouping>
}
 8002db2:	bf00      	nop
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b086      	sub	sp, #24
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	607a      	str	r2, [r7, #4]
 8002dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dcc:	f7ff ff3e 	bl	8002c4c <__NVIC_GetPriorityGrouping>
 8002dd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	68b9      	ldr	r1, [r7, #8]
 8002dd6:	6978      	ldr	r0, [r7, #20]
 8002dd8:	f7ff ff8e 	bl	8002cf8 <NVIC_EncodePriority>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002de2:	4611      	mov	r1, r2
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff ff5d 	bl	8002ca4 <__NVIC_SetPriority>
}
 8002dea:	bf00      	nop
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b082      	sub	sp, #8
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	4603      	mov	r3, r0
 8002dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff ff31 	bl	8002c68 <__NVIC_EnableIRQ>
}
 8002e06:	bf00      	nop
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7ff ffa2 	bl	8002d60 <SysTick_Config>
 8002e1c:	4603      	mov	r3, r0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b089      	sub	sp, #36	@ 0x24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61fb      	str	r3, [r7, #28]
 8002e42:	e165      	b.n	8003110 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e44:	2201      	movs	r2, #1
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	4013      	ands	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	f040 8154 	bne.w	800310a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d005      	beq.n	8002e7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d130      	bne.n	8002edc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	2203      	movs	r2, #3
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	68da      	ldr	r2, [r3, #12]
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	091b      	lsrs	r3, r3, #4
 8002ec6:	f003 0201 	and.w	r2, r3, #1
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f003 0303 	and.w	r3, r3, #3
 8002ee4:	2b03      	cmp	r3, #3
 8002ee6:	d017      	beq.n	8002f18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4013      	ands	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 0303 	and.w	r3, r3, #3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d123      	bne.n	8002f6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	08da      	lsrs	r2, r3, #3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3208      	adds	r2, #8
 8002f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	220f      	movs	r2, #15
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4013      	ands	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	691a      	ldr	r2, [r3, #16]
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	08da      	lsrs	r2, r3, #3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3208      	adds	r2, #8
 8002f66:	69b9      	ldr	r1, [r7, #24]
 8002f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	2203      	movs	r2, #3
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	4013      	ands	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 0203 	and.w	r2, r3, #3
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 80ae 	beq.w	800310a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	4b5d      	ldr	r3, [pc, #372]	@ (8003128 <HAL_GPIO_Init+0x300>)
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb6:	4a5c      	ldr	r2, [pc, #368]	@ (8003128 <HAL_GPIO_Init+0x300>)
 8002fb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fbe:	4b5a      	ldr	r3, [pc, #360]	@ (8003128 <HAL_GPIO_Init+0x300>)
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fca:	4a58      	ldr	r2, [pc, #352]	@ (800312c <HAL_GPIO_Init+0x304>)
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	089b      	lsrs	r3, r3, #2
 8002fd0:	3302      	adds	r3, #2
 8002fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	220f      	movs	r2, #15
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4013      	ands	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a4f      	ldr	r2, [pc, #316]	@ (8003130 <HAL_GPIO_Init+0x308>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d025      	beq.n	8003042 <HAL_GPIO_Init+0x21a>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a4e      	ldr	r2, [pc, #312]	@ (8003134 <HAL_GPIO_Init+0x30c>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d01f      	beq.n	800303e <HAL_GPIO_Init+0x216>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a4d      	ldr	r2, [pc, #308]	@ (8003138 <HAL_GPIO_Init+0x310>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d019      	beq.n	800303a <HAL_GPIO_Init+0x212>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a4c      	ldr	r2, [pc, #304]	@ (800313c <HAL_GPIO_Init+0x314>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d013      	beq.n	8003036 <HAL_GPIO_Init+0x20e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a4b      	ldr	r2, [pc, #300]	@ (8003140 <HAL_GPIO_Init+0x318>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d00d      	beq.n	8003032 <HAL_GPIO_Init+0x20a>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a4a      	ldr	r2, [pc, #296]	@ (8003144 <HAL_GPIO_Init+0x31c>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d007      	beq.n	800302e <HAL_GPIO_Init+0x206>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a49      	ldr	r2, [pc, #292]	@ (8003148 <HAL_GPIO_Init+0x320>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d101      	bne.n	800302a <HAL_GPIO_Init+0x202>
 8003026:	2306      	movs	r3, #6
 8003028:	e00c      	b.n	8003044 <HAL_GPIO_Init+0x21c>
 800302a:	2307      	movs	r3, #7
 800302c:	e00a      	b.n	8003044 <HAL_GPIO_Init+0x21c>
 800302e:	2305      	movs	r3, #5
 8003030:	e008      	b.n	8003044 <HAL_GPIO_Init+0x21c>
 8003032:	2304      	movs	r3, #4
 8003034:	e006      	b.n	8003044 <HAL_GPIO_Init+0x21c>
 8003036:	2303      	movs	r3, #3
 8003038:	e004      	b.n	8003044 <HAL_GPIO_Init+0x21c>
 800303a:	2302      	movs	r3, #2
 800303c:	e002      	b.n	8003044 <HAL_GPIO_Init+0x21c>
 800303e:	2301      	movs	r3, #1
 8003040:	e000      	b.n	8003044 <HAL_GPIO_Init+0x21c>
 8003042:	2300      	movs	r3, #0
 8003044:	69fa      	ldr	r2, [r7, #28]
 8003046:	f002 0203 	and.w	r2, r2, #3
 800304a:	0092      	lsls	r2, r2, #2
 800304c:	4093      	lsls	r3, r2
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4313      	orrs	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003054:	4935      	ldr	r1, [pc, #212]	@ (800312c <HAL_GPIO_Init+0x304>)
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	089b      	lsrs	r3, r3, #2
 800305a:	3302      	adds	r3, #2
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003062:	4b3a      	ldr	r3, [pc, #232]	@ (800314c <HAL_GPIO_Init+0x324>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	43db      	mvns	r3, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4013      	ands	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	4313      	orrs	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003086:	4a31      	ldr	r2, [pc, #196]	@ (800314c <HAL_GPIO_Init+0x324>)
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800308c:	4b2f      	ldr	r3, [pc, #188]	@ (800314c <HAL_GPIO_Init+0x324>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	43db      	mvns	r3, r3
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4013      	ands	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030b0:	4a26      	ldr	r2, [pc, #152]	@ (800314c <HAL_GPIO_Init+0x324>)
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030b6:	4b25      	ldr	r3, [pc, #148]	@ (800314c <HAL_GPIO_Init+0x324>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	43db      	mvns	r3, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4013      	ands	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030da:	4a1c      	ldr	r2, [pc, #112]	@ (800314c <HAL_GPIO_Init+0x324>)
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030e0:	4b1a      	ldr	r3, [pc, #104]	@ (800314c <HAL_GPIO_Init+0x324>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	43db      	mvns	r3, r3
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	4013      	ands	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	4313      	orrs	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003104:	4a11      	ldr	r2, [pc, #68]	@ (800314c <HAL_GPIO_Init+0x324>)
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	3301      	adds	r3, #1
 800310e:	61fb      	str	r3, [r7, #28]
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	2b0f      	cmp	r3, #15
 8003114:	f67f ae96 	bls.w	8002e44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003118:	bf00      	nop
 800311a:	bf00      	nop
 800311c:	3724      	adds	r7, #36	@ 0x24
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	40023800 	.word	0x40023800
 800312c:	40013800 	.word	0x40013800
 8003130:	40020000 	.word	0x40020000
 8003134:	40020400 	.word	0x40020400
 8003138:	40020800 	.word	0x40020800
 800313c:	40020c00 	.word	0x40020c00
 8003140:	40021000 	.word	0x40021000
 8003144:	40021400 	.word	0x40021400
 8003148:	40021800 	.word	0x40021800
 800314c:	40013c00 	.word	0x40013c00

08003150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	807b      	strh	r3, [r7, #2]
 800315c:	4613      	mov	r3, r2
 800315e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003160:	787b      	ldrb	r3, [r7, #1]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003166:	887a      	ldrh	r2, [r7, #2]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800316c:	e003      	b.n	8003176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800316e:	887b      	ldrh	r3, [r7, #2]
 8003170:	041a      	lsls	r2, r3, #16
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	619a      	str	r2, [r3, #24]
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003182:	b480      	push	{r7}
 8003184:	b085      	sub	sp, #20
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
 800318a:	460b      	mov	r3, r1
 800318c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003194:	887a      	ldrh	r2, [r7, #2]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	4013      	ands	r3, r2
 800319a:	041a      	lsls	r2, r3, #16
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	43d9      	mvns	r1, r3
 80031a0:	887b      	ldrh	r3, [r7, #2]
 80031a2:	400b      	ands	r3, r1
 80031a4:	431a      	orrs	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	619a      	str	r2, [r3, #24]
}
 80031aa:	bf00      	nop
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
	...

080031b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80031c2:	4b08      	ldr	r3, [pc, #32]	@ (80031e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031c4:	695a      	ldr	r2, [r3, #20]
 80031c6:	88fb      	ldrh	r3, [r7, #6]
 80031c8:	4013      	ands	r3, r2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d006      	beq.n	80031dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031ce:	4a05      	ldr	r2, [pc, #20]	@ (80031e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031d0:	88fb      	ldrh	r3, [r7, #6]
 80031d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031d4:	88fb      	ldrh	r3, [r7, #6]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fe fd4a 	bl	8001c70 <HAL_GPIO_EXTI_Callback>
  }
}
 80031dc:	bf00      	nop
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40013c00 	.word	0x40013c00

080031e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af02      	add	r7, sp, #8
 80031ee:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e108      	b.n	800340c <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d106      	bne.n	800321a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7ff f8ff 	bl	8002418 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2203      	movs	r2, #3
 800321e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003228:	d102      	bne.n	8003230 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f002 fe15 	bl	8005e64 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6818      	ldr	r0, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	7c1a      	ldrb	r2, [r3, #16]
 8003242:	f88d 2000 	strb.w	r2, [sp]
 8003246:	3304      	adds	r3, #4
 8003248:	cb0e      	ldmia	r3, {r1, r2, r3}
 800324a:	f002 fda7 	bl	8005d9c <USB_CoreInit>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d005      	beq.n	8003260 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e0d5      	b.n	800340c <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2100      	movs	r1, #0
 8003266:	4618      	mov	r0, r3
 8003268:	f002 fe0d 	bl	8005e86 <USB_SetCurrentMode>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d005      	beq.n	800327e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2202      	movs	r2, #2
 8003276:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e0c6      	b.n	800340c <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800327e:	2300      	movs	r3, #0
 8003280:	73fb      	strb	r3, [r7, #15]
 8003282:	e04a      	b.n	800331a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003284:	7bfa      	ldrb	r2, [r7, #15]
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	4413      	add	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	3315      	adds	r3, #21
 8003294:	2201      	movs	r2, #1
 8003296:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003298:	7bfa      	ldrb	r2, [r7, #15]
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	4613      	mov	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	4413      	add	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	3314      	adds	r3, #20
 80032a8:	7bfa      	ldrb	r2, [r7, #15]
 80032aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032ac:	7bfa      	ldrb	r2, [r7, #15]
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
 80032b0:	b298      	uxth	r0, r3
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	4413      	add	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	332e      	adds	r3, #46	@ 0x2e
 80032c0:	4602      	mov	r2, r0
 80032c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032c4:	7bfa      	ldrb	r2, [r7, #15]
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	4613      	mov	r3, r2
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	4413      	add	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	3318      	adds	r3, #24
 80032d4:	2200      	movs	r2, #0
 80032d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032d8:	7bfa      	ldrb	r2, [r7, #15]
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	4613      	mov	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	4413      	add	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	440b      	add	r3, r1
 80032e6:	331c      	adds	r3, #28
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032ec:	7bfa      	ldrb	r2, [r7, #15]
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	4413      	add	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	3320      	adds	r3, #32
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003300:	7bfa      	ldrb	r2, [r7, #15]
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	4613      	mov	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4413      	add	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	3324      	adds	r3, #36	@ 0x24
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003314:	7bfb      	ldrb	r3, [r7, #15]
 8003316:	3301      	adds	r3, #1
 8003318:	73fb      	strb	r3, [r7, #15]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	791b      	ldrb	r3, [r3, #4]
 800331e:	7bfa      	ldrb	r2, [r7, #15]
 8003320:	429a      	cmp	r2, r3
 8003322:	d3af      	bcc.n	8003284 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003324:	2300      	movs	r3, #0
 8003326:	73fb      	strb	r3, [r7, #15]
 8003328:	e044      	b.n	80033b4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800332a:	7bfa      	ldrb	r2, [r7, #15]
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	4613      	mov	r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800333c:	2200      	movs	r2, #0
 800333e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003340:	7bfa      	ldrb	r2, [r7, #15]
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	4413      	add	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003352:	7bfa      	ldrb	r2, [r7, #15]
 8003354:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003356:	7bfa      	ldrb	r2, [r7, #15]
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	4613      	mov	r3, r2
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	4413      	add	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	440b      	add	r3, r1
 8003364:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003368:	2200      	movs	r2, #0
 800336a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800336c:	7bfa      	ldrb	r2, [r7, #15]
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	4613      	mov	r3, r2
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	4413      	add	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800337e:	2200      	movs	r2, #0
 8003380:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003382:	7bfa      	ldrb	r2, [r7, #15]
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	4613      	mov	r3, r2
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	4413      	add	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	440b      	add	r3, r1
 8003390:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003398:	7bfa      	ldrb	r2, [r7, #15]
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	4613      	mov	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	4413      	add	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80033aa:	2200      	movs	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ae:	7bfb      	ldrb	r3, [r7, #15]
 80033b0:	3301      	adds	r3, #1
 80033b2:	73fb      	strb	r3, [r7, #15]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	791b      	ldrb	r3, [r3, #4]
 80033b8:	7bfa      	ldrb	r2, [r7, #15]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d3b5      	bcc.n	800332a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	7c1a      	ldrb	r2, [r3, #16]
 80033c6:	f88d 2000 	strb.w	r2, [sp]
 80033ca:	3304      	adds	r3, #4
 80033cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033ce:	f002 fda7 	bl	8005f20 <USB_DevInit>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d005      	beq.n	80033e4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2202      	movs	r2, #2
 80033dc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e013      	b.n	800340c <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	7b1b      	ldrb	r3, [r3, #12]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d102      	bne.n	8003400 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f80a 	bl	8003414 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f002 ff62 	bl	80062ce <USB_DevDisconnect>

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003442:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003446:	f043 0303 	orr.w	r3, r3, #3
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0cc      	b.n	800360a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003470:	4b68      	ldr	r3, [pc, #416]	@ (8003614 <HAL_RCC_ClockConfig+0x1b8>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 030f 	and.w	r3, r3, #15
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d90c      	bls.n	8003498 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347e:	4b65      	ldr	r3, [pc, #404]	@ (8003614 <HAL_RCC_ClockConfig+0x1b8>)
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003486:	4b63      	ldr	r3, [pc, #396]	@ (8003614 <HAL_RCC_ClockConfig+0x1b8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	429a      	cmp	r2, r3
 8003492:	d001      	beq.n	8003498 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e0b8      	b.n	800360a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d020      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d005      	beq.n	80034bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034b0:	4b59      	ldr	r3, [pc, #356]	@ (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	4a58      	ldr	r2, [pc, #352]	@ (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80034b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80034ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0308 	and.w	r3, r3, #8
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034c8:	4b53      	ldr	r3, [pc, #332]	@ (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	4a52      	ldr	r2, [pc, #328]	@ (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80034d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034d4:	4b50      	ldr	r3, [pc, #320]	@ (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	494d      	ldr	r1, [pc, #308]	@ (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d044      	beq.n	800357c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d107      	bne.n	800350a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fa:	4b47      	ldr	r3, [pc, #284]	@ (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d119      	bne.n	800353a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e07f      	b.n	800360a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b02      	cmp	r3, #2
 8003510:	d003      	beq.n	800351a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003516:	2b03      	cmp	r3, #3
 8003518:	d107      	bne.n	800352a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800351a:	4b3f      	ldr	r3, [pc, #252]	@ (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d109      	bne.n	800353a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e06f      	b.n	800360a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800352a:	4b3b      	ldr	r3, [pc, #236]	@ (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e067      	b.n	800360a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800353a:	4b37      	ldr	r3, [pc, #220]	@ (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f023 0203 	bic.w	r2, r3, #3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	4934      	ldr	r1, [pc, #208]	@ (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 8003548:	4313      	orrs	r3, r2
 800354a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800354c:	f7ff f8b8 	bl	80026c0 <HAL_GetTick>
 8003550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003552:	e00a      	b.n	800356a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003554:	f7ff f8b4 	bl	80026c0 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003562:	4293      	cmp	r3, r2
 8003564:	d901      	bls.n	800356a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e04f      	b.n	800360a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800356a:	4b2b      	ldr	r3, [pc, #172]	@ (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 020c 	and.w	r2, r3, #12
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	429a      	cmp	r2, r3
 800357a:	d1eb      	bne.n	8003554 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800357c:	4b25      	ldr	r3, [pc, #148]	@ (8003614 <HAL_RCC_ClockConfig+0x1b8>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 030f 	and.w	r3, r3, #15
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	429a      	cmp	r2, r3
 8003588:	d20c      	bcs.n	80035a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800358a:	4b22      	ldr	r3, [pc, #136]	@ (8003614 <HAL_RCC_ClockConfig+0x1b8>)
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003592:	4b20      	ldr	r3, [pc, #128]	@ (8003614 <HAL_RCC_ClockConfig+0x1b8>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	429a      	cmp	r2, r3
 800359e:	d001      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e032      	b.n	800360a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d008      	beq.n	80035c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035b0:	4b19      	ldr	r3, [pc, #100]	@ (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	4916      	ldr	r1, [pc, #88]	@ (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d009      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ce:	4b12      	ldr	r3, [pc, #72]	@ (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	490e      	ldr	r1, [pc, #56]	@ (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035e2:	f000 fb7f 	bl	8003ce4 <HAL_RCC_GetSysClockFreq>
 80035e6:	4602      	mov	r2, r0
 80035e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	091b      	lsrs	r3, r3, #4
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	490a      	ldr	r1, [pc, #40]	@ (800361c <HAL_RCC_ClockConfig+0x1c0>)
 80035f4:	5ccb      	ldrb	r3, [r1, r3]
 80035f6:	fa22 f303 	lsr.w	r3, r2, r3
 80035fa:	4a09      	ldr	r2, [pc, #36]	@ (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80035fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80035fe:	4b09      	ldr	r3, [pc, #36]	@ (8003624 <HAL_RCC_ClockConfig+0x1c8>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff f818 	bl	8002638 <HAL_InitTick>

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40023c00 	.word	0x40023c00
 8003618:	40023800 	.word	0x40023800
 800361c:	08007a58 	.word	0x08007a58
 8003620:	20000000 	.word	0x20000000
 8003624:	20000004 	.word	0x20000004

08003628 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800362c:	4b03      	ldr	r3, [pc, #12]	@ (800363c <HAL_RCC_GetHCLKFreq+0x14>)
 800362e:	681b      	ldr	r3, [r3, #0]
}
 8003630:	4618      	mov	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	20000000 	.word	0x20000000

08003640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003644:	f7ff fff0 	bl	8003628 <HAL_RCC_GetHCLKFreq>
 8003648:	4602      	mov	r2, r0
 800364a:	4b05      	ldr	r3, [pc, #20]	@ (8003660 <HAL_RCC_GetPCLK1Freq+0x20>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	0a9b      	lsrs	r3, r3, #10
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	4903      	ldr	r1, [pc, #12]	@ (8003664 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003656:	5ccb      	ldrb	r3, [r1, r3]
 8003658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800365c:	4618      	mov	r0, r3
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40023800 	.word	0x40023800
 8003664:	08007a68 	.word	0x08007a68

08003668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800366c:	f7ff ffdc 	bl	8003628 <HAL_RCC_GetHCLKFreq>
 8003670:	4602      	mov	r2, r0
 8003672:	4b05      	ldr	r3, [pc, #20]	@ (8003688 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	0b5b      	lsrs	r3, r3, #13
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	4903      	ldr	r1, [pc, #12]	@ (800368c <HAL_RCC_GetPCLK2Freq+0x24>)
 800367e:	5ccb      	ldrb	r3, [r1, r3]
 8003680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003684:	4618      	mov	r0, r3
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40023800 	.word	0x40023800
 800368c:	08007a68 	.word	0x08007a68

08003690 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b08c      	sub	sp, #48	@ 0x30
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80036ac:	2300      	movs	r3, #0
 80036ae:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d010      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80036c8:	4b6f      	ldr	r3, [pc, #444]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036ce:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d6:	496c      	ldr	r1, [pc, #432]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80036e6:	2301      	movs	r3, #1
 80036e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d010      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80036f6:	4b64      	ldr	r3, [pc, #400]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036fc:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003704:	4960      	ldr	r1, [pc, #384]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003706:	4313      	orrs	r3, r2
 8003708:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003714:	2301      	movs	r3, #1
 8003716:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d017      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003724:	4b58      	ldr	r3, [pc, #352]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003726:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800372a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003732:	4955      	ldr	r1, [pc, #340]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003734:	4313      	orrs	r3, r2
 8003736:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003742:	d101      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003744:	2301      	movs	r3, #1
 8003746:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003750:	2301      	movs	r3, #1
 8003752:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b00      	cmp	r3, #0
 800375e:	d017      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003760:	4b49      	ldr	r3, [pc, #292]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003762:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003766:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800376e:	4946      	ldr	r1, [pc, #280]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003770:	4313      	orrs	r3, r2
 8003772:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800377a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800377e:	d101      	bne.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003780:	2301      	movs	r3, #1
 8003782:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800378c:	2301      	movs	r3, #1
 800378e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0320 	and.w	r3, r3, #32
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 808a 	beq.w	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800379e:	2300      	movs	r3, #0
 80037a0:	60bb      	str	r3, [r7, #8]
 80037a2:	4b39      	ldr	r3, [pc, #228]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a6:	4a38      	ldr	r2, [pc, #224]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80037ae:	4b36      	ldr	r3, [pc, #216]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037b6:	60bb      	str	r3, [r7, #8]
 80037b8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80037ba:	4b34      	ldr	r3, [pc, #208]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a33      	ldr	r2, [pc, #204]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80037c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80037c6:	f7fe ff7b 	bl	80026c0 <HAL_GetTick>
 80037ca:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80037cc:	e008      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ce:	f7fe ff77 	bl	80026c0 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e278      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80037e0:	4b2a      	ldr	r3, [pc, #168]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0f0      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037ec:	4b26      	ldr	r3, [pc, #152]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037f4:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d02f      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003800:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003804:	6a3a      	ldr	r2, [r7, #32]
 8003806:	429a      	cmp	r2, r3
 8003808:	d028      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800380a:	4b1f      	ldr	r3, [pc, #124]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800380c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800380e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003812:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003814:	4b1e      	ldr	r3, [pc, #120]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003816:	2201      	movs	r2, #1
 8003818:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800381a:	4b1d      	ldr	r3, [pc, #116]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003820:	4a19      	ldr	r2, [pc, #100]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003826:	4b18      	ldr	r3, [pc, #96]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b01      	cmp	r3, #1
 8003830:	d114      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003832:	f7fe ff45 	bl	80026c0 <HAL_GetTick>
 8003836:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003838:	e00a      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800383a:	f7fe ff41 	bl	80026c0 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003848:	4293      	cmp	r3, r2
 800384a:	d901      	bls.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e240      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003850:	4b0d      	ldr	r3, [pc, #52]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003852:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0ee      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003860:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003864:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003868:	d114      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800386a:	4b07      	ldr	r3, [pc, #28]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003876:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800387a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800387e:	4902      	ldr	r1, [pc, #8]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003880:	4313      	orrs	r3, r2
 8003882:	608b      	str	r3, [r1, #8]
 8003884:	e00c      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003886:	bf00      	nop
 8003888:	40023800 	.word	0x40023800
 800388c:	40007000 	.word	0x40007000
 8003890:	42470e40 	.word	0x42470e40
 8003894:	4b4a      	ldr	r3, [pc, #296]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	4a49      	ldr	r2, [pc, #292]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800389a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800389e:	6093      	str	r3, [r2, #8]
 80038a0:	4b47      	ldr	r3, [pc, #284]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ac:	4944      	ldr	r1, [pc, #272]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0310 	and.w	r3, r3, #16
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d004      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80038c4:	4b3f      	ldr	r3, [pc, #252]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80038c6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00a      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80038d4:	4b3a      	ldr	r3, [pc, #232]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038e2:	4937      	ldr	r1, [pc, #220]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00a      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038f6:	4b32      	ldr	r3, [pc, #200]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038fc:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003904:	492e      	ldr	r1, [pc, #184]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003914:	2b00      	cmp	r3, #0
 8003916:	d011      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003918:	4b29      	ldr	r3, [pc, #164]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800391a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800391e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003926:	4926      	ldr	r1, [pc, #152]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003928:	4313      	orrs	r3, r2
 800392a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003932:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003936:	d101      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003938:	2301      	movs	r3, #1
 800393a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00a      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003948:	4b1d      	ldr	r3, [pc, #116]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800394a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800394e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003956:	491a      	ldr	r1, [pc, #104]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003958:	4313      	orrs	r3, r2
 800395a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003966:	2b00      	cmp	r3, #0
 8003968:	d011      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800396a:	4b15      	ldr	r3, [pc, #84]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800396c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003970:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003978:	4911      	ldr	r1, [pc, #68]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800397a:	4313      	orrs	r3, r2
 800397c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003984:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003988:	d101      	bne.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800398a:	2301      	movs	r3, #1
 800398c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800398e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003990:	2b01      	cmp	r3, #1
 8003992:	d005      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800399c:	f040 80ff 	bne.w	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039a0:	4b09      	ldr	r3, [pc, #36]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80039a6:	f7fe fe8b 	bl	80026c0 <HAL_GetTick>
 80039aa:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039ac:	e00e      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039ae:	f7fe fe87 	bl	80026c0 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d907      	bls.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e188      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80039c0:	40023800 	.word	0x40023800
 80039c4:	424711e0 	.word	0x424711e0
 80039c8:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039cc:	4b7e      	ldr	r3, [pc, #504]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1ea      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d009      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d028      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d124      	bne.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003a00:	4b71      	ldr	r3, [pc, #452]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a06:	0c1b      	lsrs	r3, r3, #16
 8003a08:	f003 0303 	and.w	r3, r3, #3
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a12:	4b6d      	ldr	r3, [pc, #436]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a18:	0e1b      	lsrs	r3, r3, #24
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	019b      	lsls	r3, r3, #6
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	085b      	lsrs	r3, r3, #1
 8003a30:	3b01      	subs	r3, #1
 8003a32:	041b      	lsls	r3, r3, #16
 8003a34:	431a      	orrs	r2, r3
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	061b      	lsls	r3, r3, #24
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	071b      	lsls	r3, r3, #28
 8003a42:	4961      	ldr	r1, [pc, #388]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0304 	and.w	r3, r3, #4
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d004      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a5e:	d00a      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d035      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a74:	d130      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003a76:	4b54      	ldr	r3, [pc, #336]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a7c:	0c1b      	lsrs	r3, r3, #16
 8003a7e:	f003 0303 	and.w	r3, r3, #3
 8003a82:	3301      	adds	r3, #1
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a88:	4b4f      	ldr	r3, [pc, #316]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a8e:	0f1b      	lsrs	r3, r3, #28
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	019b      	lsls	r3, r3, #6
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	085b      	lsrs	r3, r3, #1
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	041b      	lsls	r3, r3, #16
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	061b      	lsls	r3, r3, #24
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	071b      	lsls	r3, r3, #28
 8003ab8:	4943      	ldr	r1, [pc, #268]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003ac0:	4b41      	ldr	r3, [pc, #260]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ac6:	f023 021f 	bic.w	r2, r3, #31
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	493d      	ldr	r1, [pc, #244]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d029      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003aec:	d124      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003aee:	4b36      	ldr	r3, [pc, #216]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003af4:	0c1b      	lsrs	r3, r3, #16
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	3301      	adds	r3, #1
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b00:	4b31      	ldr	r3, [pc, #196]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b06:	0f1b      	lsrs	r3, r3, #28
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	019b      	lsls	r3, r3, #6
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	085b      	lsrs	r3, r3, #1
 8003b20:	3b01      	subs	r3, #1
 8003b22:	041b      	lsls	r3, r3, #16
 8003b24:	431a      	orrs	r2, r3
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	061b      	lsls	r3, r3, #24
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	071b      	lsls	r3, r3, #28
 8003b30:	4925      	ldr	r1, [pc, #148]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d016      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685a      	ldr	r2, [r3, #4]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	019b      	lsls	r3, r3, #6
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	085b      	lsrs	r3, r3, #1
 8003b56:	3b01      	subs	r3, #1
 8003b58:	041b      	lsls	r3, r3, #16
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	061b      	lsls	r3, r3, #24
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	071b      	lsls	r3, r3, #28
 8003b6a:	4917      	ldr	r1, [pc, #92]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b72:	4b16      	ldr	r3, [pc, #88]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003b74:	2201      	movs	r2, #1
 8003b76:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b78:	f7fe fda2 	bl	80026c0 <HAL_GetTick>
 8003b7c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b80:	f7fe fd9e 	bl	80026c0 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e09f      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b92:	4b0d      	ldr	r3, [pc, #52]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0f0      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8003b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	f040 8095 	bne.w	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bac:	f7fe fd88 	bl	80026c0 <HAL_GetTick>
 8003bb0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bb2:	e00f      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003bb4:	f7fe fd84 	bl	80026c0 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d908      	bls.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e085      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003bc6:	bf00      	nop
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	42470068 	.word	0x42470068
 8003bd0:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bd4:	4b41      	ldr	r3, [pc, #260]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003bdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003be0:	d0e8      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d009      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d02b      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d127      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003c0a:	4b34      	ldr	r3, [pc, #208]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c10:	0c1b      	lsrs	r3, r3, #16
 8003c12:	f003 0303 	and.w	r3, r3, #3
 8003c16:	3301      	adds	r3, #1
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	699a      	ldr	r2, [r3, #24]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	019b      	lsls	r3, r3, #6
 8003c26:	431a      	orrs	r2, r3
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	085b      	lsrs	r3, r3, #1
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	041b      	lsls	r3, r3, #16
 8003c30:	431a      	orrs	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c36:	061b      	lsls	r3, r3, #24
 8003c38:	4928      	ldr	r1, [pc, #160]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c40:	4b26      	ldr	r3, [pc, #152]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c46:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	021b      	lsls	r3, r3, #8
 8003c52:	4922      	ldr	r1, [pc, #136]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d01d      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c6e:	d118      	bne.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c70:	4b1a      	ldr	r3, [pc, #104]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c76:	0e1b      	lsrs	r3, r3, #24
 8003c78:	f003 030f 	and.w	r3, r3, #15
 8003c7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	699a      	ldr	r2, [r3, #24]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	019b      	lsls	r3, r3, #6
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	085b      	lsrs	r3, r3, #1
 8003c90:	3b01      	subs	r3, #1
 8003c92:	041b      	lsls	r3, r3, #16
 8003c94:	431a      	orrs	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	061b      	lsls	r3, r3, #24
 8003c9a:	4910      	ldr	r1, [pc, #64]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ca2:	4b0f      	ldr	r3, [pc, #60]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ca8:	f7fe fd0a 	bl	80026c0 <HAL_GetTick>
 8003cac:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cb0:	f7fe fd06 	bl	80026c0 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e007      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cc2:	4b06      	ldr	r3, [pc, #24]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003cca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cce:	d1ef      	bne.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3730      	adds	r7, #48	@ 0x30
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	40023800 	.word	0x40023800
 8003ce0:	42470070 	.word	0x42470070

08003ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ce8:	b0ae      	sub	sp, #184	@ 0xb8
 8003cea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003d04:	2300      	movs	r3, #0
 8003d06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d0a:	4bcb      	ldr	r3, [pc, #812]	@ (8004038 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 030c 	and.w	r3, r3, #12
 8003d12:	2b0c      	cmp	r3, #12
 8003d14:	f200 8206 	bhi.w	8004124 <HAL_RCC_GetSysClockFreq+0x440>
 8003d18:	a201      	add	r2, pc, #4	@ (adr r2, 8003d20 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1e:	bf00      	nop
 8003d20:	08003d55 	.word	0x08003d55
 8003d24:	08004125 	.word	0x08004125
 8003d28:	08004125 	.word	0x08004125
 8003d2c:	08004125 	.word	0x08004125
 8003d30:	08003d5d 	.word	0x08003d5d
 8003d34:	08004125 	.word	0x08004125
 8003d38:	08004125 	.word	0x08004125
 8003d3c:	08004125 	.word	0x08004125
 8003d40:	08003d65 	.word	0x08003d65
 8003d44:	08004125 	.word	0x08004125
 8003d48:	08004125 	.word	0x08004125
 8003d4c:	08004125 	.word	0x08004125
 8003d50:	08003f55 	.word	0x08003f55
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d54:	4bb9      	ldr	r3, [pc, #740]	@ (800403c <HAL_RCC_GetSysClockFreq+0x358>)
 8003d56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d5a:	e1e7      	b.n	800412c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d5c:	4bb8      	ldr	r3, [pc, #736]	@ (8004040 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003d5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d62:	e1e3      	b.n	800412c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d64:	4bb4      	ldr	r3, [pc, #720]	@ (8004038 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d70:	4bb1      	ldr	r3, [pc, #708]	@ (8004038 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d071      	beq.n	8003e60 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d7c:	4bae      	ldr	r3, [pc, #696]	@ (8004038 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	099b      	lsrs	r3, r3, #6
 8003d82:	2200      	movs	r2, #0
 8003d84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d88:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003d8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d94:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d98:	2300      	movs	r3, #0
 8003d9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003d9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003da2:	4622      	mov	r2, r4
 8003da4:	462b      	mov	r3, r5
 8003da6:	f04f 0000 	mov.w	r0, #0
 8003daa:	f04f 0100 	mov.w	r1, #0
 8003dae:	0159      	lsls	r1, r3, #5
 8003db0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003db4:	0150      	lsls	r0, r2, #5
 8003db6:	4602      	mov	r2, r0
 8003db8:	460b      	mov	r3, r1
 8003dba:	4621      	mov	r1, r4
 8003dbc:	1a51      	subs	r1, r2, r1
 8003dbe:	6439      	str	r1, [r7, #64]	@ 0x40
 8003dc0:	4629      	mov	r1, r5
 8003dc2:	eb63 0301 	sbc.w	r3, r3, r1
 8003dc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dc8:	f04f 0200 	mov.w	r2, #0
 8003dcc:	f04f 0300 	mov.w	r3, #0
 8003dd0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003dd4:	4649      	mov	r1, r9
 8003dd6:	018b      	lsls	r3, r1, #6
 8003dd8:	4641      	mov	r1, r8
 8003dda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dde:	4641      	mov	r1, r8
 8003de0:	018a      	lsls	r2, r1, #6
 8003de2:	4641      	mov	r1, r8
 8003de4:	1a51      	subs	r1, r2, r1
 8003de6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003de8:	4649      	mov	r1, r9
 8003dea:	eb63 0301 	sbc.w	r3, r3, r1
 8003dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	f04f 0300 	mov.w	r3, #0
 8003df8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003dfc:	4649      	mov	r1, r9
 8003dfe:	00cb      	lsls	r3, r1, #3
 8003e00:	4641      	mov	r1, r8
 8003e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e06:	4641      	mov	r1, r8
 8003e08:	00ca      	lsls	r2, r1, #3
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4603      	mov	r3, r0
 8003e10:	4622      	mov	r2, r4
 8003e12:	189b      	adds	r3, r3, r2
 8003e14:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e16:	462b      	mov	r3, r5
 8003e18:	460a      	mov	r2, r1
 8003e1a:	eb42 0303 	adc.w	r3, r2, r3
 8003e1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e20:	f04f 0200 	mov.w	r2, #0
 8003e24:	f04f 0300 	mov.w	r3, #0
 8003e28:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003e2c:	4629      	mov	r1, r5
 8003e2e:	024b      	lsls	r3, r1, #9
 8003e30:	4621      	mov	r1, r4
 8003e32:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e36:	4621      	mov	r1, r4
 8003e38:	024a      	lsls	r2, r1, #9
 8003e3a:	4610      	mov	r0, r2
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e42:	2200      	movs	r2, #0
 8003e44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e48:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e4c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003e50:	f7fc febe 	bl	8000bd0 <__aeabi_uldivmod>
 8003e54:	4602      	mov	r2, r0
 8003e56:	460b      	mov	r3, r1
 8003e58:	4613      	mov	r3, r2
 8003e5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e5e:	e067      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e60:	4b75      	ldr	r3, [pc, #468]	@ (8004038 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	099b      	lsrs	r3, r3, #6
 8003e66:	2200      	movs	r2, #0
 8003e68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e6c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003e70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e7e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003e82:	4622      	mov	r2, r4
 8003e84:	462b      	mov	r3, r5
 8003e86:	f04f 0000 	mov.w	r0, #0
 8003e8a:	f04f 0100 	mov.w	r1, #0
 8003e8e:	0159      	lsls	r1, r3, #5
 8003e90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e94:	0150      	lsls	r0, r2, #5
 8003e96:	4602      	mov	r2, r0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4621      	mov	r1, r4
 8003e9c:	1a51      	subs	r1, r2, r1
 8003e9e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003ea0:	4629      	mov	r1, r5
 8003ea2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ea8:	f04f 0200 	mov.w	r2, #0
 8003eac:	f04f 0300 	mov.w	r3, #0
 8003eb0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003eb4:	4649      	mov	r1, r9
 8003eb6:	018b      	lsls	r3, r1, #6
 8003eb8:	4641      	mov	r1, r8
 8003eba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ebe:	4641      	mov	r1, r8
 8003ec0:	018a      	lsls	r2, r1, #6
 8003ec2:	4641      	mov	r1, r8
 8003ec4:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ec8:	4649      	mov	r1, r9
 8003eca:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	f04f 0300 	mov.w	r3, #0
 8003ed6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003eda:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ede:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ee2:	4692      	mov	sl, r2
 8003ee4:	469b      	mov	fp, r3
 8003ee6:	4623      	mov	r3, r4
 8003ee8:	eb1a 0303 	adds.w	r3, sl, r3
 8003eec:	623b      	str	r3, [r7, #32]
 8003eee:	462b      	mov	r3, r5
 8003ef0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ef4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	f04f 0300 	mov.w	r3, #0
 8003efe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003f02:	4629      	mov	r1, r5
 8003f04:	028b      	lsls	r3, r1, #10
 8003f06:	4621      	mov	r1, r4
 8003f08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f0c:	4621      	mov	r1, r4
 8003f0e:	028a      	lsls	r2, r1, #10
 8003f10:	4610      	mov	r0, r2
 8003f12:	4619      	mov	r1, r3
 8003f14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f18:	2200      	movs	r2, #0
 8003f1a:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f1c:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f1e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003f22:	f7fc fe55 	bl	8000bd0 <__aeabi_uldivmod>
 8003f26:	4602      	mov	r2, r0
 8003f28:	460b      	mov	r3, r1
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003f30:	4b41      	ldr	r3, [pc, #260]	@ (8004038 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	0c1b      	lsrs	r3, r3, #16
 8003f36:	f003 0303 	and.w	r3, r3, #3
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003f42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f52:	e0eb      	b.n	800412c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f54:	4b38      	ldr	r3, [pc, #224]	@ (8004038 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f60:	4b35      	ldr	r3, [pc, #212]	@ (8004038 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d06b      	beq.n	8004044 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f6c:	4b32      	ldr	r3, [pc, #200]	@ (8004038 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	099b      	lsrs	r3, r3, #6
 8003f72:	2200      	movs	r2, #0
 8003f74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f76:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f7e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f80:	2300      	movs	r3, #0
 8003f82:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f84:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003f88:	4622      	mov	r2, r4
 8003f8a:	462b      	mov	r3, r5
 8003f8c:	f04f 0000 	mov.w	r0, #0
 8003f90:	f04f 0100 	mov.w	r1, #0
 8003f94:	0159      	lsls	r1, r3, #5
 8003f96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f9a:	0150      	lsls	r0, r2, #5
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4621      	mov	r1, r4
 8003fa2:	1a51      	subs	r1, r2, r1
 8003fa4:	61b9      	str	r1, [r7, #24]
 8003fa6:	4629      	mov	r1, r5
 8003fa8:	eb63 0301 	sbc.w	r3, r3, r1
 8003fac:	61fb      	str	r3, [r7, #28]
 8003fae:	f04f 0200 	mov.w	r2, #0
 8003fb2:	f04f 0300 	mov.w	r3, #0
 8003fb6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003fba:	4659      	mov	r1, fp
 8003fbc:	018b      	lsls	r3, r1, #6
 8003fbe:	4651      	mov	r1, sl
 8003fc0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fc4:	4651      	mov	r1, sl
 8003fc6:	018a      	lsls	r2, r1, #6
 8003fc8:	4651      	mov	r1, sl
 8003fca:	ebb2 0801 	subs.w	r8, r2, r1
 8003fce:	4659      	mov	r1, fp
 8003fd0:	eb63 0901 	sbc.w	r9, r3, r1
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	f04f 0300 	mov.w	r3, #0
 8003fdc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fe0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fe4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fe8:	4690      	mov	r8, r2
 8003fea:	4699      	mov	r9, r3
 8003fec:	4623      	mov	r3, r4
 8003fee:	eb18 0303 	adds.w	r3, r8, r3
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	462b      	mov	r3, r5
 8003ff6:	eb49 0303 	adc.w	r3, r9, r3
 8003ffa:	617b      	str	r3, [r7, #20]
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	f04f 0300 	mov.w	r3, #0
 8004004:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004008:	4629      	mov	r1, r5
 800400a:	024b      	lsls	r3, r1, #9
 800400c:	4621      	mov	r1, r4
 800400e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004012:	4621      	mov	r1, r4
 8004014:	024a      	lsls	r2, r1, #9
 8004016:	4610      	mov	r0, r2
 8004018:	4619      	mov	r1, r3
 800401a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800401e:	2200      	movs	r2, #0
 8004020:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004022:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004024:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004028:	f7fc fdd2 	bl	8000bd0 <__aeabi_uldivmod>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	4613      	mov	r3, r2
 8004032:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004036:	e065      	b.n	8004104 <HAL_RCC_GetSysClockFreq+0x420>
 8004038:	40023800 	.word	0x40023800
 800403c:	00f42400 	.word	0x00f42400
 8004040:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004044:	4b3d      	ldr	r3, [pc, #244]	@ (800413c <HAL_RCC_GetSysClockFreq+0x458>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	099b      	lsrs	r3, r3, #6
 800404a:	2200      	movs	r2, #0
 800404c:	4618      	mov	r0, r3
 800404e:	4611      	mov	r1, r2
 8004050:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004054:	653b      	str	r3, [r7, #80]	@ 0x50
 8004056:	2300      	movs	r3, #0
 8004058:	657b      	str	r3, [r7, #84]	@ 0x54
 800405a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800405e:	4642      	mov	r2, r8
 8004060:	464b      	mov	r3, r9
 8004062:	f04f 0000 	mov.w	r0, #0
 8004066:	f04f 0100 	mov.w	r1, #0
 800406a:	0159      	lsls	r1, r3, #5
 800406c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004070:	0150      	lsls	r0, r2, #5
 8004072:	4602      	mov	r2, r0
 8004074:	460b      	mov	r3, r1
 8004076:	4641      	mov	r1, r8
 8004078:	1a51      	subs	r1, r2, r1
 800407a:	60b9      	str	r1, [r7, #8]
 800407c:	4649      	mov	r1, r9
 800407e:	eb63 0301 	sbc.w	r3, r3, r1
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	f04f 0200 	mov.w	r2, #0
 8004088:	f04f 0300 	mov.w	r3, #0
 800408c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004090:	4659      	mov	r1, fp
 8004092:	018b      	lsls	r3, r1, #6
 8004094:	4651      	mov	r1, sl
 8004096:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800409a:	4651      	mov	r1, sl
 800409c:	018a      	lsls	r2, r1, #6
 800409e:	4651      	mov	r1, sl
 80040a0:	1a54      	subs	r4, r2, r1
 80040a2:	4659      	mov	r1, fp
 80040a4:	eb63 0501 	sbc.w	r5, r3, r1
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	f04f 0300 	mov.w	r3, #0
 80040b0:	00eb      	lsls	r3, r5, #3
 80040b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040b6:	00e2      	lsls	r2, r4, #3
 80040b8:	4614      	mov	r4, r2
 80040ba:	461d      	mov	r5, r3
 80040bc:	4643      	mov	r3, r8
 80040be:	18e3      	adds	r3, r4, r3
 80040c0:	603b      	str	r3, [r7, #0]
 80040c2:	464b      	mov	r3, r9
 80040c4:	eb45 0303 	adc.w	r3, r5, r3
 80040c8:	607b      	str	r3, [r7, #4]
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	f04f 0300 	mov.w	r3, #0
 80040d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040d6:	4629      	mov	r1, r5
 80040d8:	028b      	lsls	r3, r1, #10
 80040da:	4621      	mov	r1, r4
 80040dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040e0:	4621      	mov	r1, r4
 80040e2:	028a      	lsls	r2, r1, #10
 80040e4:	4610      	mov	r0, r2
 80040e6:	4619      	mov	r1, r3
 80040e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040ec:	2200      	movs	r2, #0
 80040ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040f0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80040f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80040f6:	f7fc fd6b 	bl	8000bd0 <__aeabi_uldivmod>
 80040fa:	4602      	mov	r2, r0
 80040fc:	460b      	mov	r3, r1
 80040fe:	4613      	mov	r3, r2
 8004100:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004104:	4b0d      	ldr	r3, [pc, #52]	@ (800413c <HAL_RCC_GetSysClockFreq+0x458>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	0f1b      	lsrs	r3, r3, #28
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004112:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004116:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800411a:	fbb2 f3f3 	udiv	r3, r2, r3
 800411e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004122:	e003      	b.n	800412c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004124:	4b06      	ldr	r3, [pc, #24]	@ (8004140 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004126:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800412a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800412c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004130:	4618      	mov	r0, r3
 8004132:	37b8      	adds	r7, #184	@ 0xb8
 8004134:	46bd      	mov	sp, r7
 8004136:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800413a:	bf00      	nop
 800413c:	40023800 	.word	0x40023800
 8004140:	00f42400 	.word	0x00f42400

08004144 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e28d      	b.n	8004672 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	f000 8083 	beq.w	800426a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004164:	4b94      	ldr	r3, [pc, #592]	@ (80043b8 <HAL_RCC_OscConfig+0x274>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f003 030c 	and.w	r3, r3, #12
 800416c:	2b04      	cmp	r3, #4
 800416e:	d019      	beq.n	80041a4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004170:	4b91      	ldr	r3, [pc, #580]	@ (80043b8 <HAL_RCC_OscConfig+0x274>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f003 030c 	and.w	r3, r3, #12
        || \
 8004178:	2b08      	cmp	r3, #8
 800417a:	d106      	bne.n	800418a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800417c:	4b8e      	ldr	r3, [pc, #568]	@ (80043b8 <HAL_RCC_OscConfig+0x274>)
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004184:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004188:	d00c      	beq.n	80041a4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800418a:	4b8b      	ldr	r3, [pc, #556]	@ (80043b8 <HAL_RCC_OscConfig+0x274>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004192:	2b0c      	cmp	r3, #12
 8004194:	d112      	bne.n	80041bc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004196:	4b88      	ldr	r3, [pc, #544]	@ (80043b8 <HAL_RCC_OscConfig+0x274>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800419e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041a2:	d10b      	bne.n	80041bc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a4:	4b84      	ldr	r3, [pc, #528]	@ (80043b8 <HAL_RCC_OscConfig+0x274>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d05b      	beq.n	8004268 <HAL_RCC_OscConfig+0x124>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d157      	bne.n	8004268 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e25a      	b.n	8004672 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041c4:	d106      	bne.n	80041d4 <HAL_RCC_OscConfig+0x90>
 80041c6:	4b7c      	ldr	r3, [pc, #496]	@ (80043b8 <HAL_RCC_OscConfig+0x274>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a7b      	ldr	r2, [pc, #492]	@ (80043b8 <HAL_RCC_OscConfig+0x274>)
 80041cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	e01d      	b.n	8004210 <HAL_RCC_OscConfig+0xcc>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041dc:	d10c      	bne.n	80041f8 <HAL_RCC_OscConfig+0xb4>
 80041de:	4b76      	ldr	r3, [pc, #472]	@ (80043b8 <HAL_RCC_OscConfig+0x274>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a75      	ldr	r2, [pc, #468]	@ (80043b8 <HAL_RCC_OscConfig+0x274>)
 80041e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041e8:	6013      	str	r3, [r2, #0]
 80041ea:	4b73      	ldr	r3, [pc, #460]	@ (80043b8 <HAL_RCC_OscConfig+0x274>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a72      	ldr	r2, [pc, #456]	@ (80043b8 <HAL_RCC_OscConfig+0x274>)
 80041f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041f4:	6013      	str	r3, [r2, #0]
 80041f6:	e00b      	b.n	8004210 <HAL_RCC_OscConfig+0xcc>
 80041f8:	4b6f      	ldr	r3, [pc, #444]	@ (80043b8 <HAL_RCC_OscConfig+0x274>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a6e      	ldr	r2, [pc, #440]	@ (80043b8 <HAL_RCC_OscConfig+0x274>)
 80041fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004202:	6013      	str	r3, [r2, #0]
 8004204:	4b6c      	ldr	r3, [pc, #432]	@ (80043b8 <HAL_RCC_OscConfig+0x274>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a6b      	ldr	r2, [pc, #428]	@ (80043b8 <HAL_RCC_OscConfig+0x274>)
 800420a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800420e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d013      	beq.n	8004240 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004218:	f7fe fa52 	bl	80026c0 <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004220:	f7fe fa4e 	bl	80026c0 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b64      	cmp	r3, #100	@ 0x64
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e21f      	b.n	8004672 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004232:	4b61      	ldr	r3, [pc, #388]	@ (80043b8 <HAL_RCC_OscConfig+0x274>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d0f0      	beq.n	8004220 <HAL_RCC_OscConfig+0xdc>
 800423e:	e014      	b.n	800426a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004240:	f7fe fa3e 	bl	80026c0 <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004248:	f7fe fa3a 	bl	80026c0 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b64      	cmp	r3, #100	@ 0x64
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e20b      	b.n	8004672 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800425a:	4b57      	ldr	r3, [pc, #348]	@ (80043b8 <HAL_RCC_OscConfig+0x274>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1f0      	bne.n	8004248 <HAL_RCC_OscConfig+0x104>
 8004266:	e000      	b.n	800426a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d06f      	beq.n	8004356 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004276:	4b50      	ldr	r3, [pc, #320]	@ (80043b8 <HAL_RCC_OscConfig+0x274>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f003 030c 	and.w	r3, r3, #12
 800427e:	2b00      	cmp	r3, #0
 8004280:	d017      	beq.n	80042b2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004282:	4b4d      	ldr	r3, [pc, #308]	@ (80043b8 <HAL_RCC_OscConfig+0x274>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 030c 	and.w	r3, r3, #12
        || \
 800428a:	2b08      	cmp	r3, #8
 800428c:	d105      	bne.n	800429a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800428e:	4b4a      	ldr	r3, [pc, #296]	@ (80043b8 <HAL_RCC_OscConfig+0x274>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00b      	beq.n	80042b2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800429a:	4b47      	ldr	r3, [pc, #284]	@ (80043b8 <HAL_RCC_OscConfig+0x274>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80042a2:	2b0c      	cmp	r3, #12
 80042a4:	d11c      	bne.n	80042e0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042a6:	4b44      	ldr	r3, [pc, #272]	@ (80043b8 <HAL_RCC_OscConfig+0x274>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d116      	bne.n	80042e0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042b2:	4b41      	ldr	r3, [pc, #260]	@ (80043b8 <HAL_RCC_OscConfig+0x274>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d005      	beq.n	80042ca <HAL_RCC_OscConfig+0x186>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d001      	beq.n	80042ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e1d3      	b.n	8004672 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ca:	4b3b      	ldr	r3, [pc, #236]	@ (80043b8 <HAL_RCC_OscConfig+0x274>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	4937      	ldr	r1, [pc, #220]	@ (80043b8 <HAL_RCC_OscConfig+0x274>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042de:	e03a      	b.n	8004356 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d020      	beq.n	800432a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042e8:	4b34      	ldr	r3, [pc, #208]	@ (80043bc <HAL_RCC_OscConfig+0x278>)
 80042ea:	2201      	movs	r2, #1
 80042ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ee:	f7fe f9e7 	bl	80026c0 <HAL_GetTick>
 80042f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f4:	e008      	b.n	8004308 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042f6:	f7fe f9e3 	bl	80026c0 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e1b4      	b.n	8004672 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004308:	4b2b      	ldr	r3, [pc, #172]	@ (80043b8 <HAL_RCC_OscConfig+0x274>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0f0      	beq.n	80042f6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004314:	4b28      	ldr	r3, [pc, #160]	@ (80043b8 <HAL_RCC_OscConfig+0x274>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	00db      	lsls	r3, r3, #3
 8004322:	4925      	ldr	r1, [pc, #148]	@ (80043b8 <HAL_RCC_OscConfig+0x274>)
 8004324:	4313      	orrs	r3, r2
 8004326:	600b      	str	r3, [r1, #0]
 8004328:	e015      	b.n	8004356 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800432a:	4b24      	ldr	r3, [pc, #144]	@ (80043bc <HAL_RCC_OscConfig+0x278>)
 800432c:	2200      	movs	r2, #0
 800432e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004330:	f7fe f9c6 	bl	80026c0 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004338:	f7fe f9c2 	bl	80026c0 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e193      	b.n	8004672 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800434a:	4b1b      	ldr	r3, [pc, #108]	@ (80043b8 <HAL_RCC_OscConfig+0x274>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1f0      	bne.n	8004338 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0308 	and.w	r3, r3, #8
 800435e:	2b00      	cmp	r3, #0
 8004360:	d036      	beq.n	80043d0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d016      	beq.n	8004398 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800436a:	4b15      	ldr	r3, [pc, #84]	@ (80043c0 <HAL_RCC_OscConfig+0x27c>)
 800436c:	2201      	movs	r2, #1
 800436e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004370:	f7fe f9a6 	bl	80026c0 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004378:	f7fe f9a2 	bl	80026c0 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e173      	b.n	8004672 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800438a:	4b0b      	ldr	r3, [pc, #44]	@ (80043b8 <HAL_RCC_OscConfig+0x274>)
 800438c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0f0      	beq.n	8004378 <HAL_RCC_OscConfig+0x234>
 8004396:	e01b      	b.n	80043d0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004398:	4b09      	ldr	r3, [pc, #36]	@ (80043c0 <HAL_RCC_OscConfig+0x27c>)
 800439a:	2200      	movs	r2, #0
 800439c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439e:	f7fe f98f 	bl	80026c0 <HAL_GetTick>
 80043a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043a4:	e00e      	b.n	80043c4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043a6:	f7fe f98b 	bl	80026c0 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d907      	bls.n	80043c4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e15c      	b.n	8004672 <HAL_RCC_OscConfig+0x52e>
 80043b8:	40023800 	.word	0x40023800
 80043bc:	42470000 	.word	0x42470000
 80043c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043c4:	4b8a      	ldr	r3, [pc, #552]	@ (80045f0 <HAL_RCC_OscConfig+0x4ac>)
 80043c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1ea      	bne.n	80043a6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0304 	and.w	r3, r3, #4
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 8097 	beq.w	800450c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043de:	2300      	movs	r3, #0
 80043e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043e2:	4b83      	ldr	r3, [pc, #524]	@ (80045f0 <HAL_RCC_OscConfig+0x4ac>)
 80043e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10f      	bne.n	800440e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ee:	2300      	movs	r3, #0
 80043f0:	60bb      	str	r3, [r7, #8]
 80043f2:	4b7f      	ldr	r3, [pc, #508]	@ (80045f0 <HAL_RCC_OscConfig+0x4ac>)
 80043f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f6:	4a7e      	ldr	r2, [pc, #504]	@ (80045f0 <HAL_RCC_OscConfig+0x4ac>)
 80043f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80043fe:	4b7c      	ldr	r3, [pc, #496]	@ (80045f0 <HAL_RCC_OscConfig+0x4ac>)
 8004400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004406:	60bb      	str	r3, [r7, #8]
 8004408:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800440a:	2301      	movs	r3, #1
 800440c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800440e:	4b79      	ldr	r3, [pc, #484]	@ (80045f4 <HAL_RCC_OscConfig+0x4b0>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004416:	2b00      	cmp	r3, #0
 8004418:	d118      	bne.n	800444c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800441a:	4b76      	ldr	r3, [pc, #472]	@ (80045f4 <HAL_RCC_OscConfig+0x4b0>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a75      	ldr	r2, [pc, #468]	@ (80045f4 <HAL_RCC_OscConfig+0x4b0>)
 8004420:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004424:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004426:	f7fe f94b 	bl	80026c0 <HAL_GetTick>
 800442a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800442c:	e008      	b.n	8004440 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800442e:	f7fe f947 	bl	80026c0 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e118      	b.n	8004672 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004440:	4b6c      	ldr	r3, [pc, #432]	@ (80045f4 <HAL_RCC_OscConfig+0x4b0>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0f0      	beq.n	800442e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d106      	bne.n	8004462 <HAL_RCC_OscConfig+0x31e>
 8004454:	4b66      	ldr	r3, [pc, #408]	@ (80045f0 <HAL_RCC_OscConfig+0x4ac>)
 8004456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004458:	4a65      	ldr	r2, [pc, #404]	@ (80045f0 <HAL_RCC_OscConfig+0x4ac>)
 800445a:	f043 0301 	orr.w	r3, r3, #1
 800445e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004460:	e01c      	b.n	800449c <HAL_RCC_OscConfig+0x358>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	2b05      	cmp	r3, #5
 8004468:	d10c      	bne.n	8004484 <HAL_RCC_OscConfig+0x340>
 800446a:	4b61      	ldr	r3, [pc, #388]	@ (80045f0 <HAL_RCC_OscConfig+0x4ac>)
 800446c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800446e:	4a60      	ldr	r2, [pc, #384]	@ (80045f0 <HAL_RCC_OscConfig+0x4ac>)
 8004470:	f043 0304 	orr.w	r3, r3, #4
 8004474:	6713      	str	r3, [r2, #112]	@ 0x70
 8004476:	4b5e      	ldr	r3, [pc, #376]	@ (80045f0 <HAL_RCC_OscConfig+0x4ac>)
 8004478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800447a:	4a5d      	ldr	r2, [pc, #372]	@ (80045f0 <HAL_RCC_OscConfig+0x4ac>)
 800447c:	f043 0301 	orr.w	r3, r3, #1
 8004480:	6713      	str	r3, [r2, #112]	@ 0x70
 8004482:	e00b      	b.n	800449c <HAL_RCC_OscConfig+0x358>
 8004484:	4b5a      	ldr	r3, [pc, #360]	@ (80045f0 <HAL_RCC_OscConfig+0x4ac>)
 8004486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004488:	4a59      	ldr	r2, [pc, #356]	@ (80045f0 <HAL_RCC_OscConfig+0x4ac>)
 800448a:	f023 0301 	bic.w	r3, r3, #1
 800448e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004490:	4b57      	ldr	r3, [pc, #348]	@ (80045f0 <HAL_RCC_OscConfig+0x4ac>)
 8004492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004494:	4a56      	ldr	r2, [pc, #344]	@ (80045f0 <HAL_RCC_OscConfig+0x4ac>)
 8004496:	f023 0304 	bic.w	r3, r3, #4
 800449a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d015      	beq.n	80044d0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a4:	f7fe f90c 	bl	80026c0 <HAL_GetTick>
 80044a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044aa:	e00a      	b.n	80044c2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ac:	f7fe f908 	bl	80026c0 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e0d7      	b.n	8004672 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044c2:	4b4b      	ldr	r3, [pc, #300]	@ (80045f0 <HAL_RCC_OscConfig+0x4ac>)
 80044c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0ee      	beq.n	80044ac <HAL_RCC_OscConfig+0x368>
 80044ce:	e014      	b.n	80044fa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d0:	f7fe f8f6 	bl	80026c0 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044d6:	e00a      	b.n	80044ee <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044d8:	f7fe f8f2 	bl	80026c0 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e0c1      	b.n	8004672 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ee:	4b40      	ldr	r3, [pc, #256]	@ (80045f0 <HAL_RCC_OscConfig+0x4ac>)
 80044f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1ee      	bne.n	80044d8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044fa:	7dfb      	ldrb	r3, [r7, #23]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d105      	bne.n	800450c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004500:	4b3b      	ldr	r3, [pc, #236]	@ (80045f0 <HAL_RCC_OscConfig+0x4ac>)
 8004502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004504:	4a3a      	ldr	r2, [pc, #232]	@ (80045f0 <HAL_RCC_OscConfig+0x4ac>)
 8004506:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800450a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 80ad 	beq.w	8004670 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004516:	4b36      	ldr	r3, [pc, #216]	@ (80045f0 <HAL_RCC_OscConfig+0x4ac>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 030c 	and.w	r3, r3, #12
 800451e:	2b08      	cmp	r3, #8
 8004520:	d060      	beq.n	80045e4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	2b02      	cmp	r3, #2
 8004528:	d145      	bne.n	80045b6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800452a:	4b33      	ldr	r3, [pc, #204]	@ (80045f8 <HAL_RCC_OscConfig+0x4b4>)
 800452c:	2200      	movs	r2, #0
 800452e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004530:	f7fe f8c6 	bl	80026c0 <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004538:	f7fe f8c2 	bl	80026c0 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e093      	b.n	8004672 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800454a:	4b29      	ldr	r3, [pc, #164]	@ (80045f0 <HAL_RCC_OscConfig+0x4ac>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1f0      	bne.n	8004538 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	69da      	ldr	r2, [r3, #28]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	431a      	orrs	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004564:	019b      	lsls	r3, r3, #6
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456c:	085b      	lsrs	r3, r3, #1
 800456e:	3b01      	subs	r3, #1
 8004570:	041b      	lsls	r3, r3, #16
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004578:	061b      	lsls	r3, r3, #24
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004580:	071b      	lsls	r3, r3, #28
 8004582:	491b      	ldr	r1, [pc, #108]	@ (80045f0 <HAL_RCC_OscConfig+0x4ac>)
 8004584:	4313      	orrs	r3, r2
 8004586:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004588:	4b1b      	ldr	r3, [pc, #108]	@ (80045f8 <HAL_RCC_OscConfig+0x4b4>)
 800458a:	2201      	movs	r2, #1
 800458c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458e:	f7fe f897 	bl	80026c0 <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004594:	e008      	b.n	80045a8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004596:	f7fe f893 	bl	80026c0 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e064      	b.n	8004672 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045a8:	4b11      	ldr	r3, [pc, #68]	@ (80045f0 <HAL_RCC_OscConfig+0x4ac>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0f0      	beq.n	8004596 <HAL_RCC_OscConfig+0x452>
 80045b4:	e05c      	b.n	8004670 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045b6:	4b10      	ldr	r3, [pc, #64]	@ (80045f8 <HAL_RCC_OscConfig+0x4b4>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045bc:	f7fe f880 	bl	80026c0 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c4:	f7fe f87c 	bl	80026c0 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e04d      	b.n	8004672 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045d6:	4b06      	ldr	r3, [pc, #24]	@ (80045f0 <HAL_RCC_OscConfig+0x4ac>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1f0      	bne.n	80045c4 <HAL_RCC_OscConfig+0x480>
 80045e2:	e045      	b.n	8004670 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d107      	bne.n	80045fc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e040      	b.n	8004672 <HAL_RCC_OscConfig+0x52e>
 80045f0:	40023800 	.word	0x40023800
 80045f4:	40007000 	.word	0x40007000
 80045f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045fc:	4b1f      	ldr	r3, [pc, #124]	@ (800467c <HAL_RCC_OscConfig+0x538>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d030      	beq.n	800466c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004614:	429a      	cmp	r2, r3
 8004616:	d129      	bne.n	800466c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004622:	429a      	cmp	r2, r3
 8004624:	d122      	bne.n	800466c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800462c:	4013      	ands	r3, r2
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004632:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004634:	4293      	cmp	r3, r2
 8004636:	d119      	bne.n	800466c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004642:	085b      	lsrs	r3, r3, #1
 8004644:	3b01      	subs	r3, #1
 8004646:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004648:	429a      	cmp	r2, r3
 800464a:	d10f      	bne.n	800466c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004656:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004658:	429a      	cmp	r2, r3
 800465a:	d107      	bne.n	800466c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004666:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004668:	429a      	cmp	r2, r3
 800466a:	d001      	beq.n	8004670 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e000      	b.n	8004672 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3718      	adds	r7, #24
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	40023800 	.word	0x40023800

08004680 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e07b      	b.n	800478a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004696:	2b00      	cmp	r3, #0
 8004698:	d108      	bne.n	80046ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046a2:	d009      	beq.n	80046b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	61da      	str	r2, [r3, #28]
 80046aa:	e005      	b.n	80046b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d106      	bne.n	80046d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7fd fdea 	bl	80022ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004700:	431a      	orrs	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	431a      	orrs	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004728:	431a      	orrs	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800473c:	ea42 0103 	orr.w	r1, r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004744:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	0c1b      	lsrs	r3, r3, #16
 8004756:	f003 0104 	and.w	r1, r3, #4
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475e:	f003 0210 	and.w	r2, r3, #16
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69da      	ldr	r2, [r3, #28]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004778:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b088      	sub	sp, #32
 8004796:	af00      	add	r7, sp, #0
 8004798:	60f8      	str	r0, [r7, #12]
 800479a:	60b9      	str	r1, [r7, #8]
 800479c:	603b      	str	r3, [r7, #0]
 800479e:	4613      	mov	r3, r2
 80047a0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047a2:	f7fd ff8d 	bl	80026c0 <HAL_GetTick>
 80047a6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80047a8:	88fb      	ldrh	r3, [r7, #6]
 80047aa:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d001      	beq.n	80047bc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80047b8:	2302      	movs	r3, #2
 80047ba:	e12a      	b.n	8004a12 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <HAL_SPI_Transmit+0x36>
 80047c2:	88fb      	ldrh	r3, [r7, #6]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e122      	b.n	8004a12 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d101      	bne.n	80047da <HAL_SPI_Transmit+0x48>
 80047d6:	2302      	movs	r3, #2
 80047d8:	e11b      	b.n	8004a12 <HAL_SPI_Transmit+0x280>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2203      	movs	r2, #3
 80047e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	88fa      	ldrh	r2, [r7, #6]
 80047fa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	88fa      	ldrh	r2, [r7, #6]
 8004800:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004828:	d10f      	bne.n	800484a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004838:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004848:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004854:	2b40      	cmp	r3, #64	@ 0x40
 8004856:	d007      	beq.n	8004868 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004866:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004870:	d152      	bne.n	8004918 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d002      	beq.n	8004880 <HAL_SPI_Transmit+0xee>
 800487a:	8b7b      	ldrh	r3, [r7, #26]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d145      	bne.n	800490c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004884:	881a      	ldrh	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004890:	1c9a      	adds	r2, r3, #2
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800489a:	b29b      	uxth	r3, r3
 800489c:	3b01      	subs	r3, #1
 800489e:	b29a      	uxth	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80048a4:	e032      	b.n	800490c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d112      	bne.n	80048da <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b8:	881a      	ldrh	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c4:	1c9a      	adds	r2, r3, #2
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	3b01      	subs	r3, #1
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80048d8:	e018      	b.n	800490c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048da:	f7fd fef1 	bl	80026c0 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d803      	bhi.n	80048f2 <HAL_SPI_Transmit+0x160>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f0:	d102      	bne.n	80048f8 <HAL_SPI_Transmit+0x166>
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d109      	bne.n	800490c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e082      	b.n	8004a12 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004910:	b29b      	uxth	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1c7      	bne.n	80048a6 <HAL_SPI_Transmit+0x114>
 8004916:	e053      	b.n	80049c0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d002      	beq.n	8004926 <HAL_SPI_Transmit+0x194>
 8004920:	8b7b      	ldrh	r3, [r7, #26]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d147      	bne.n	80049b6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	330c      	adds	r3, #12
 8004930:	7812      	ldrb	r2, [r2, #0]
 8004932:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004938:	1c5a      	adds	r2, r3, #1
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004942:	b29b      	uxth	r3, r3
 8004944:	3b01      	subs	r3, #1
 8004946:	b29a      	uxth	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800494c:	e033      	b.n	80049b6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b02      	cmp	r3, #2
 800495a:	d113      	bne.n	8004984 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	330c      	adds	r3, #12
 8004966:	7812      	ldrb	r2, [r2, #0]
 8004968:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496e:	1c5a      	adds	r2, r3, #1
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004978:	b29b      	uxth	r3, r3
 800497a:	3b01      	subs	r3, #1
 800497c:	b29a      	uxth	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004982:	e018      	b.n	80049b6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004984:	f7fd fe9c 	bl	80026c0 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d803      	bhi.n	800499c <HAL_SPI_Transmit+0x20a>
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499a:	d102      	bne.n	80049a2 <HAL_SPI_Transmit+0x210>
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d109      	bne.n	80049b6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e02d      	b.n	8004a12 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1c6      	bne.n	800494e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049c0:	69fa      	ldr	r2, [r7, #28]
 80049c2:	6839      	ldr	r1, [r7, #0]
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 fa59 	bl	8004e7c <SPI_EndRxTxTransaction>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d002      	beq.n	80049d6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2220      	movs	r2, #32
 80049d4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10a      	bne.n	80049f4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049de:	2300      	movs	r3, #0
 80049e0:	617b      	str	r3, [r7, #20]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	617b      	str	r3, [r7, #20]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	617b      	str	r3, [r7, #20]
 80049f2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e000      	b.n	8004a12 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004a10:	2300      	movs	r3, #0
  }
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3720      	adds	r7, #32
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b08a      	sub	sp, #40	@ 0x28
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	60f8      	str	r0, [r7, #12]
 8004a22:	60b9      	str	r1, [r7, #8]
 8004a24:	607a      	str	r2, [r7, #4]
 8004a26:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a2c:	f7fd fe48 	bl	80026c0 <HAL_GetTick>
 8004a30:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a38:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004a40:	887b      	ldrh	r3, [r7, #2]
 8004a42:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a44:	7ffb      	ldrb	r3, [r7, #31]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d00c      	beq.n	8004a64 <HAL_SPI_TransmitReceive+0x4a>
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a50:	d106      	bne.n	8004a60 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d102      	bne.n	8004a60 <HAL_SPI_TransmitReceive+0x46>
 8004a5a:	7ffb      	ldrb	r3, [r7, #31]
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d001      	beq.n	8004a64 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004a60:	2302      	movs	r3, #2
 8004a62:	e17f      	b.n	8004d64 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d005      	beq.n	8004a76 <HAL_SPI_TransmitReceive+0x5c>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d002      	beq.n	8004a76 <HAL_SPI_TransmitReceive+0x5c>
 8004a70:	887b      	ldrh	r3, [r7, #2]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e174      	b.n	8004d64 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d101      	bne.n	8004a88 <HAL_SPI_TransmitReceive+0x6e>
 8004a84:	2302      	movs	r3, #2
 8004a86:	e16d      	b.n	8004d64 <HAL_SPI_TransmitReceive+0x34a>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d003      	beq.n	8004aa4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2205      	movs	r2, #5
 8004aa0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	887a      	ldrh	r2, [r7, #2]
 8004ab4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	887a      	ldrh	r2, [r7, #2]
 8004aba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	887a      	ldrh	r2, [r7, #2]
 8004ac6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	887a      	ldrh	r2, [r7, #2]
 8004acc:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae4:	2b40      	cmp	r3, #64	@ 0x40
 8004ae6:	d007      	beq.n	8004af8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004af6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b00:	d17e      	bne.n	8004c00 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d002      	beq.n	8004b10 <HAL_SPI_TransmitReceive+0xf6>
 8004b0a:	8afb      	ldrh	r3, [r7, #22]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d16c      	bne.n	8004bea <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b14:	881a      	ldrh	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b20:	1c9a      	adds	r2, r3, #2
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b34:	e059      	b.n	8004bea <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d11b      	bne.n	8004b7c <HAL_SPI_TransmitReceive+0x162>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d016      	beq.n	8004b7c <HAL_SPI_TransmitReceive+0x162>
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d113      	bne.n	8004b7c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b58:	881a      	ldrh	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b64:	1c9a      	adds	r2, r3, #2
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	3b01      	subs	r3, #1
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d119      	bne.n	8004bbe <HAL_SPI_TransmitReceive+0x1a4>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d014      	beq.n	8004bbe <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b9e:	b292      	uxth	r2, r2
 8004ba0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba6:	1c9a      	adds	r2, r3, #2
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004bbe:	f7fd fd7f 	bl	80026c0 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	6a3b      	ldr	r3, [r7, #32]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d80d      	bhi.n	8004bea <HAL_SPI_TransmitReceive+0x1d0>
 8004bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd4:	d009      	beq.n	8004bea <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e0bc      	b.n	8004d64 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1a0      	bne.n	8004b36 <HAL_SPI_TransmitReceive+0x11c>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d19b      	bne.n	8004b36 <HAL_SPI_TransmitReceive+0x11c>
 8004bfe:	e082      	b.n	8004d06 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d002      	beq.n	8004c0e <HAL_SPI_TransmitReceive+0x1f4>
 8004c08:	8afb      	ldrh	r3, [r7, #22]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d171      	bne.n	8004cf2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	330c      	adds	r3, #12
 8004c18:	7812      	ldrb	r2, [r2, #0]
 8004c1a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c20:	1c5a      	adds	r2, r3, #1
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c34:	e05d      	b.n	8004cf2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d11c      	bne.n	8004c7e <HAL_SPI_TransmitReceive+0x264>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d017      	beq.n	8004c7e <HAL_SPI_TransmitReceive+0x264>
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d114      	bne.n	8004c7e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	330c      	adds	r3, #12
 8004c5e:	7812      	ldrb	r2, [r2, #0]
 8004c60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c66:	1c5a      	adds	r2, r3, #1
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	3b01      	subs	r3, #1
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d119      	bne.n	8004cc0 <HAL_SPI_TransmitReceive+0x2a6>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d014      	beq.n	8004cc0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca0:	b2d2      	uxtb	r2, r2
 8004ca2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca8:	1c5a      	adds	r2, r3, #1
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004cc0:	f7fd fcfe 	bl	80026c0 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d803      	bhi.n	8004cd8 <HAL_SPI_TransmitReceive+0x2be>
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd6:	d102      	bne.n	8004cde <HAL_SPI_TransmitReceive+0x2c4>
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d109      	bne.n	8004cf2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e038      	b.n	8004d64 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d19c      	bne.n	8004c36 <HAL_SPI_TransmitReceive+0x21c>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d197      	bne.n	8004c36 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d06:	6a3a      	ldr	r2, [r7, #32]
 8004d08:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f000 f8b6 	bl	8004e7c <SPI_EndRxTxTransaction>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d008      	beq.n	8004d28 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e01d      	b.n	8004d64 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10a      	bne.n	8004d46 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d30:	2300      	movs	r3, #0
 8004d32:	613b      	str	r3, [r7, #16]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	613b      	str	r3, [r7, #16]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	613b      	str	r3, [r7, #16]
 8004d44:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e000      	b.n	8004d64 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004d62:	2300      	movs	r3, #0
  }
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3728      	adds	r7, #40	@ 0x28
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b088      	sub	sp, #32
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	603b      	str	r3, [r7, #0]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d7c:	f7fd fca0 	bl	80026c0 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d84:	1a9b      	subs	r3, r3, r2
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	4413      	add	r3, r2
 8004d8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d8c:	f7fd fc98 	bl	80026c0 <HAL_GetTick>
 8004d90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d92:	4b39      	ldr	r3, [pc, #228]	@ (8004e78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	015b      	lsls	r3, r3, #5
 8004d98:	0d1b      	lsrs	r3, r3, #20
 8004d9a:	69fa      	ldr	r2, [r7, #28]
 8004d9c:	fb02 f303 	mul.w	r3, r2, r3
 8004da0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004da2:	e054      	b.n	8004e4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004daa:	d050      	beq.n	8004e4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004dac:	f7fd fc88 	bl	80026c0 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	69fa      	ldr	r2, [r7, #28]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d902      	bls.n	8004dc2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d13d      	bne.n	8004e3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004dd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dda:	d111      	bne.n	8004e00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004de4:	d004      	beq.n	8004df0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dee:	d107      	bne.n	8004e00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004dfe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e08:	d10f      	bne.n	8004e2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e18:	601a      	str	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e017      	b.n	8004e6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e44:	2300      	movs	r3, #0
 8004e46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	689a      	ldr	r2, [r3, #8]
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	4013      	ands	r3, r2
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	bf0c      	ite	eq
 8004e5e:	2301      	moveq	r3, #1
 8004e60:	2300      	movne	r3, #0
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	461a      	mov	r2, r3
 8004e66:	79fb      	ldrb	r3, [r7, #7]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d19b      	bne.n	8004da4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3720      	adds	r7, #32
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	20000000 	.word	0x20000000

08004e7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b088      	sub	sp, #32
 8004e80:	af02      	add	r7, sp, #8
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	9300      	str	r3, [sp, #0]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	2102      	movs	r1, #2
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f7ff ff6a 	bl	8004d6c <SPI_WaitFlagStateUntilTimeout>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d007      	beq.n	8004eae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea2:	f043 0220 	orr.w	r2, r3, #32
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e032      	b.n	8004f14 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004eae:	4b1b      	ldr	r3, [pc, #108]	@ (8004f1c <SPI_EndRxTxTransaction+0xa0>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a1b      	ldr	r2, [pc, #108]	@ (8004f20 <SPI_EndRxTxTransaction+0xa4>)
 8004eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb8:	0d5b      	lsrs	r3, r3, #21
 8004eba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004ebe:	fb02 f303 	mul.w	r3, r2, r3
 8004ec2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ecc:	d112      	bne.n	8004ef4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	2180      	movs	r1, #128	@ 0x80
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	f7ff ff47 	bl	8004d6c <SPI_WaitFlagStateUntilTimeout>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d016      	beq.n	8004f12 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ee8:	f043 0220 	orr.w	r2, r3, #32
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e00f      	b.n	8004f14 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	3b01      	subs	r3, #1
 8004efe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f0a:	2b80      	cmp	r3, #128	@ 0x80
 8004f0c:	d0f2      	beq.n	8004ef4 <SPI_EndRxTxTransaction+0x78>
 8004f0e:	e000      	b.n	8004f12 <SPI_EndRxTxTransaction+0x96>
        break;
 8004f10:	bf00      	nop
  }

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3718      	adds	r7, #24
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	20000000 	.word	0x20000000
 8004f20:	165e9f81 	.word	0x165e9f81

08004f24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e041      	b.n	8004fba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d106      	bne.n	8004f50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7fd f9f6 	bl	800233c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	3304      	adds	r3, #4
 8004f60:	4619      	mov	r1, r3
 8004f62:	4610      	mov	r0, r2
 8004f64:	f000 fa80 	bl	8005468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3708      	adds	r7, #8
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
	...

08004fc4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d001      	beq.n	8004fdc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e046      	b.n	800506a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a23      	ldr	r2, [pc, #140]	@ (8005078 <HAL_TIM_Base_Start+0xb4>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d022      	beq.n	8005034 <HAL_TIM_Base_Start+0x70>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ff6:	d01d      	beq.n	8005034 <HAL_TIM_Base_Start+0x70>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a1f      	ldr	r2, [pc, #124]	@ (800507c <HAL_TIM_Base_Start+0xb8>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d018      	beq.n	8005034 <HAL_TIM_Base_Start+0x70>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a1e      	ldr	r2, [pc, #120]	@ (8005080 <HAL_TIM_Base_Start+0xbc>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d013      	beq.n	8005034 <HAL_TIM_Base_Start+0x70>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a1c      	ldr	r2, [pc, #112]	@ (8005084 <HAL_TIM_Base_Start+0xc0>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d00e      	beq.n	8005034 <HAL_TIM_Base_Start+0x70>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a1b      	ldr	r2, [pc, #108]	@ (8005088 <HAL_TIM_Base_Start+0xc4>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d009      	beq.n	8005034 <HAL_TIM_Base_Start+0x70>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a19      	ldr	r2, [pc, #100]	@ (800508c <HAL_TIM_Base_Start+0xc8>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d004      	beq.n	8005034 <HAL_TIM_Base_Start+0x70>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a18      	ldr	r2, [pc, #96]	@ (8005090 <HAL_TIM_Base_Start+0xcc>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d111      	bne.n	8005058 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2b06      	cmp	r3, #6
 8005044:	d010      	beq.n	8005068 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f042 0201 	orr.w	r2, r2, #1
 8005054:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005056:	e007      	b.n	8005068 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f042 0201 	orr.w	r2, r2, #1
 8005066:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	40010000 	.word	0x40010000
 800507c:	40000400 	.word	0x40000400
 8005080:	40000800 	.word	0x40000800
 8005084:	40000c00 	.word	0x40000c00
 8005088:	40010400 	.word	0x40010400
 800508c:	40014000 	.word	0x40014000
 8005090:	40001800 	.word	0x40001800

08005094 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d020      	beq.n	80050f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d01b      	beq.n	80050f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f06f 0202 	mvn.w	r2, #2
 80050c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	f003 0303 	and.w	r3, r3, #3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d003      	beq.n	80050e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f9a3 	bl	800542a <HAL_TIM_IC_CaptureCallback>
 80050e4:	e005      	b.n	80050f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f995 	bl	8005416 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 f9a6 	bl	800543e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	f003 0304 	and.w	r3, r3, #4
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d020      	beq.n	8005144 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	d01b      	beq.n	8005144 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f06f 0204 	mvn.w	r2, #4
 8005114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2202      	movs	r2, #2
 800511a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f97d 	bl	800542a <HAL_TIM_IC_CaptureCallback>
 8005130:	e005      	b.n	800513e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f96f 	bl	8005416 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f980 	bl	800543e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	f003 0308 	and.w	r3, r3, #8
 800514a:	2b00      	cmp	r3, #0
 800514c:	d020      	beq.n	8005190 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f003 0308 	and.w	r3, r3, #8
 8005154:	2b00      	cmp	r3, #0
 8005156:	d01b      	beq.n	8005190 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f06f 0208 	mvn.w	r2, #8
 8005160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2204      	movs	r2, #4
 8005166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	f003 0303 	and.w	r3, r3, #3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f957 	bl	800542a <HAL_TIM_IC_CaptureCallback>
 800517c:	e005      	b.n	800518a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f949 	bl	8005416 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 f95a 	bl	800543e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	f003 0310 	and.w	r3, r3, #16
 8005196:	2b00      	cmp	r3, #0
 8005198:	d020      	beq.n	80051dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f003 0310 	and.w	r3, r3, #16
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d01b      	beq.n	80051dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f06f 0210 	mvn.w	r2, #16
 80051ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2208      	movs	r2, #8
 80051b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f931 	bl	800542a <HAL_TIM_IC_CaptureCallback>
 80051c8:	e005      	b.n	80051d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f923 	bl	8005416 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 f934 	bl	800543e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00c      	beq.n	8005200 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d007      	beq.n	8005200 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f06f 0201 	mvn.w	r2, #1
 80051f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f901 	bl	8005402 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00c      	beq.n	8005224 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005210:	2b00      	cmp	r3, #0
 8005212:	d007      	beq.n	8005224 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800521c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 faee 	bl	8005800 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00c      	beq.n	8005248 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005234:	2b00      	cmp	r3, #0
 8005236:	d007      	beq.n	8005248 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f905 	bl	8005452 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	f003 0320 	and.w	r3, r3, #32
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00c      	beq.n	800526c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f003 0320 	and.w	r3, r3, #32
 8005258:	2b00      	cmp	r3, #0
 800525a:	d007      	beq.n	800526c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f06f 0220 	mvn.w	r2, #32
 8005264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 fac0 	bl	80057ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800526c:	bf00      	nop
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800527e:	2300      	movs	r3, #0
 8005280:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005288:	2b01      	cmp	r3, #1
 800528a:	d101      	bne.n	8005290 <HAL_TIM_ConfigClockSource+0x1c>
 800528c:	2302      	movs	r3, #2
 800528e:	e0b4      	b.n	80053fa <HAL_TIM_ConfigClockSource+0x186>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2202      	movs	r2, #2
 800529c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80052ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052c8:	d03e      	beq.n	8005348 <HAL_TIM_ConfigClockSource+0xd4>
 80052ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052ce:	f200 8087 	bhi.w	80053e0 <HAL_TIM_ConfigClockSource+0x16c>
 80052d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052d6:	f000 8086 	beq.w	80053e6 <HAL_TIM_ConfigClockSource+0x172>
 80052da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052de:	d87f      	bhi.n	80053e0 <HAL_TIM_ConfigClockSource+0x16c>
 80052e0:	2b70      	cmp	r3, #112	@ 0x70
 80052e2:	d01a      	beq.n	800531a <HAL_TIM_ConfigClockSource+0xa6>
 80052e4:	2b70      	cmp	r3, #112	@ 0x70
 80052e6:	d87b      	bhi.n	80053e0 <HAL_TIM_ConfigClockSource+0x16c>
 80052e8:	2b60      	cmp	r3, #96	@ 0x60
 80052ea:	d050      	beq.n	800538e <HAL_TIM_ConfigClockSource+0x11a>
 80052ec:	2b60      	cmp	r3, #96	@ 0x60
 80052ee:	d877      	bhi.n	80053e0 <HAL_TIM_ConfigClockSource+0x16c>
 80052f0:	2b50      	cmp	r3, #80	@ 0x50
 80052f2:	d03c      	beq.n	800536e <HAL_TIM_ConfigClockSource+0xfa>
 80052f4:	2b50      	cmp	r3, #80	@ 0x50
 80052f6:	d873      	bhi.n	80053e0 <HAL_TIM_ConfigClockSource+0x16c>
 80052f8:	2b40      	cmp	r3, #64	@ 0x40
 80052fa:	d058      	beq.n	80053ae <HAL_TIM_ConfigClockSource+0x13a>
 80052fc:	2b40      	cmp	r3, #64	@ 0x40
 80052fe:	d86f      	bhi.n	80053e0 <HAL_TIM_ConfigClockSource+0x16c>
 8005300:	2b30      	cmp	r3, #48	@ 0x30
 8005302:	d064      	beq.n	80053ce <HAL_TIM_ConfigClockSource+0x15a>
 8005304:	2b30      	cmp	r3, #48	@ 0x30
 8005306:	d86b      	bhi.n	80053e0 <HAL_TIM_ConfigClockSource+0x16c>
 8005308:	2b20      	cmp	r3, #32
 800530a:	d060      	beq.n	80053ce <HAL_TIM_ConfigClockSource+0x15a>
 800530c:	2b20      	cmp	r3, #32
 800530e:	d867      	bhi.n	80053e0 <HAL_TIM_ConfigClockSource+0x16c>
 8005310:	2b00      	cmp	r3, #0
 8005312:	d05c      	beq.n	80053ce <HAL_TIM_ConfigClockSource+0x15a>
 8005314:	2b10      	cmp	r3, #16
 8005316:	d05a      	beq.n	80053ce <HAL_TIM_ConfigClockSource+0x15a>
 8005318:	e062      	b.n	80053e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800532a:	f000 f9c3 	bl	80056b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800533c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	609a      	str	r2, [r3, #8]
      break;
 8005346:	e04f      	b.n	80053e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005358:	f000 f9ac 	bl	80056b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689a      	ldr	r2, [r3, #8]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800536a:	609a      	str	r2, [r3, #8]
      break;
 800536c:	e03c      	b.n	80053e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800537a:	461a      	mov	r2, r3
 800537c:	f000 f920 	bl	80055c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2150      	movs	r1, #80	@ 0x50
 8005386:	4618      	mov	r0, r3
 8005388:	f000 f979 	bl	800567e <TIM_ITRx_SetConfig>
      break;
 800538c:	e02c      	b.n	80053e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800539a:	461a      	mov	r2, r3
 800539c:	f000 f93f 	bl	800561e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2160      	movs	r1, #96	@ 0x60
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 f969 	bl	800567e <TIM_ITRx_SetConfig>
      break;
 80053ac:	e01c      	b.n	80053e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ba:	461a      	mov	r2, r3
 80053bc:	f000 f900 	bl	80055c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2140      	movs	r1, #64	@ 0x40
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 f959 	bl	800567e <TIM_ITRx_SetConfig>
      break;
 80053cc:	e00c      	b.n	80053e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4619      	mov	r1, r3
 80053d8:	4610      	mov	r0, r2
 80053da:	f000 f950 	bl	800567e <TIM_ITRx_SetConfig>
      break;
 80053de:	e003      	b.n	80053e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	73fb      	strb	r3, [r7, #15]
      break;
 80053e4:	e000      	b.n	80053e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80053e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80053f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005402:	b480      	push	{r7}
 8005404:	b083      	sub	sp, #12
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800540a:	bf00      	nop
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005416:	b480      	push	{r7}
 8005418:	b083      	sub	sp, #12
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800541e:	bf00      	nop
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800542a:	b480      	push	{r7}
 800542c:	b083      	sub	sp, #12
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005432:	bf00      	nop
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800543e:	b480      	push	{r7}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005446:	bf00      	nop
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800545a:	bf00      	nop
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
	...

08005468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a46      	ldr	r2, [pc, #280]	@ (8005594 <TIM_Base_SetConfig+0x12c>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d013      	beq.n	80054a8 <TIM_Base_SetConfig+0x40>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005486:	d00f      	beq.n	80054a8 <TIM_Base_SetConfig+0x40>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a43      	ldr	r2, [pc, #268]	@ (8005598 <TIM_Base_SetConfig+0x130>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d00b      	beq.n	80054a8 <TIM_Base_SetConfig+0x40>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a42      	ldr	r2, [pc, #264]	@ (800559c <TIM_Base_SetConfig+0x134>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d007      	beq.n	80054a8 <TIM_Base_SetConfig+0x40>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a41      	ldr	r2, [pc, #260]	@ (80055a0 <TIM_Base_SetConfig+0x138>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d003      	beq.n	80054a8 <TIM_Base_SetConfig+0x40>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a40      	ldr	r2, [pc, #256]	@ (80055a4 <TIM_Base_SetConfig+0x13c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d108      	bne.n	80054ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a35      	ldr	r2, [pc, #212]	@ (8005594 <TIM_Base_SetConfig+0x12c>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d02b      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054c8:	d027      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a32      	ldr	r2, [pc, #200]	@ (8005598 <TIM_Base_SetConfig+0x130>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d023      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a31      	ldr	r2, [pc, #196]	@ (800559c <TIM_Base_SetConfig+0x134>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d01f      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a30      	ldr	r2, [pc, #192]	@ (80055a0 <TIM_Base_SetConfig+0x138>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d01b      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a2f      	ldr	r2, [pc, #188]	@ (80055a4 <TIM_Base_SetConfig+0x13c>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d017      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a2e      	ldr	r2, [pc, #184]	@ (80055a8 <TIM_Base_SetConfig+0x140>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d013      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a2d      	ldr	r2, [pc, #180]	@ (80055ac <TIM_Base_SetConfig+0x144>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d00f      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a2c      	ldr	r2, [pc, #176]	@ (80055b0 <TIM_Base_SetConfig+0x148>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d00b      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a2b      	ldr	r2, [pc, #172]	@ (80055b4 <TIM_Base_SetConfig+0x14c>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d007      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a2a      	ldr	r2, [pc, #168]	@ (80055b8 <TIM_Base_SetConfig+0x150>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d003      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a29      	ldr	r2, [pc, #164]	@ (80055bc <TIM_Base_SetConfig+0x154>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d108      	bne.n	800552c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005520:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	4313      	orrs	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	4313      	orrs	r3, r2
 8005538:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a10      	ldr	r2, [pc, #64]	@ (8005594 <TIM_Base_SetConfig+0x12c>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d003      	beq.n	8005560 <TIM_Base_SetConfig+0xf8>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a12      	ldr	r2, [pc, #72]	@ (80055a4 <TIM_Base_SetConfig+0x13c>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d103      	bne.n	8005568 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	691a      	ldr	r2, [r3, #16]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b01      	cmp	r3, #1
 8005578:	d105      	bne.n	8005586 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	f023 0201 	bic.w	r2, r3, #1
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	611a      	str	r2, [r3, #16]
  }
}
 8005586:	bf00      	nop
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	40010000 	.word	0x40010000
 8005598:	40000400 	.word	0x40000400
 800559c:	40000800 	.word	0x40000800
 80055a0:	40000c00 	.word	0x40000c00
 80055a4:	40010400 	.word	0x40010400
 80055a8:	40014000 	.word	0x40014000
 80055ac:	40014400 	.word	0x40014400
 80055b0:	40014800 	.word	0x40014800
 80055b4:	40001800 	.word	0x40001800
 80055b8:	40001c00 	.word	0x40001c00
 80055bc:	40002000 	.word	0x40002000

080055c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b087      	sub	sp, #28
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	f023 0201 	bic.w	r2, r3, #1
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	011b      	lsls	r3, r3, #4
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f023 030a 	bic.w	r3, r3, #10
 80055fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	4313      	orrs	r3, r2
 8005604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	621a      	str	r2, [r3, #32]
}
 8005612:	bf00      	nop
 8005614:	371c      	adds	r7, #28
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800561e:	b480      	push	{r7}
 8005620:	b087      	sub	sp, #28
 8005622:	af00      	add	r7, sp, #0
 8005624:	60f8      	str	r0, [r7, #12]
 8005626:	60b9      	str	r1, [r7, #8]
 8005628:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	f023 0210 	bic.w	r2, r3, #16
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005648:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	031b      	lsls	r3, r3, #12
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	4313      	orrs	r3, r2
 8005652:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800565a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	011b      	lsls	r3, r3, #4
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	4313      	orrs	r3, r2
 8005664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	621a      	str	r2, [r3, #32]
}
 8005672:	bf00      	nop
 8005674:	371c      	adds	r7, #28
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800567e:	b480      	push	{r7}
 8005680:	b085      	sub	sp, #20
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
 8005686:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005694:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	4313      	orrs	r3, r2
 800569c:	f043 0307 	orr.w	r3, r3, #7
 80056a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	609a      	str	r2, [r3, #8]
}
 80056a8:	bf00      	nop
 80056aa:	3714      	adds	r7, #20
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b087      	sub	sp, #28
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
 80056c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	021a      	lsls	r2, r3, #8
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	431a      	orrs	r2, r3
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	4313      	orrs	r3, r2
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	4313      	orrs	r3, r2
 80056e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	609a      	str	r2, [r3, #8]
}
 80056e8:	bf00      	nop
 80056ea:	371c      	adds	r7, #28
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005704:	2b01      	cmp	r3, #1
 8005706:	d101      	bne.n	800570c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005708:	2302      	movs	r3, #2
 800570a:	e05a      	b.n	80057c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2202      	movs	r2, #2
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005732:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	4313      	orrs	r3, r2
 800573c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a21      	ldr	r2, [pc, #132]	@ (80057d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d022      	beq.n	8005796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005758:	d01d      	beq.n	8005796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a1d      	ldr	r2, [pc, #116]	@ (80057d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d018      	beq.n	8005796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a1b      	ldr	r2, [pc, #108]	@ (80057d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d013      	beq.n	8005796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a1a      	ldr	r2, [pc, #104]	@ (80057dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d00e      	beq.n	8005796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a18      	ldr	r2, [pc, #96]	@ (80057e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d009      	beq.n	8005796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a17      	ldr	r2, [pc, #92]	@ (80057e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d004      	beq.n	8005796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a15      	ldr	r2, [pc, #84]	@ (80057e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d10c      	bne.n	80057b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800579c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	40010000 	.word	0x40010000
 80057d4:	40000400 	.word	0x40000400
 80057d8:	40000800 	.word	0x40000800
 80057dc:	40000c00 	.word	0x40000c00
 80057e0:	40010400 	.word	0x40010400
 80057e4:	40014000 	.word	0x40014000
 80057e8:	40001800 	.word	0x40001800

080057ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e042      	b.n	80058ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d106      	bne.n	8005840 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7fc fda4 	bl	8002388 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2224      	movs	r2, #36	@ 0x24
 8005844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68da      	ldr	r2, [r3, #12]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005856:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 f82b 	bl	80058b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	691a      	ldr	r2, [r3, #16]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800586c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	695a      	ldr	r2, [r3, #20]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800587c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68da      	ldr	r2, [r3, #12]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800588c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2220      	movs	r2, #32
 8005898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2220      	movs	r2, #32
 80058a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3708      	adds	r7, #8
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058b8:	b0c0      	sub	sp, #256	@ 0x100
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80058cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d0:	68d9      	ldr	r1, [r3, #12]
 80058d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	ea40 0301 	orr.w	r3, r0, r1
 80058dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e2:	689a      	ldr	r2, [r3, #8]
 80058e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	431a      	orrs	r2, r3
 80058ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	431a      	orrs	r2, r3
 80058f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800590c:	f021 010c 	bic.w	r1, r1, #12
 8005910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800591a:	430b      	orrs	r3, r1
 800591c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800591e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800592a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800592e:	6999      	ldr	r1, [r3, #24]
 8005930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	ea40 0301 	orr.w	r3, r0, r1
 800593a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800593c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	4b8f      	ldr	r3, [pc, #572]	@ (8005b80 <UART_SetConfig+0x2cc>)
 8005944:	429a      	cmp	r2, r3
 8005946:	d005      	beq.n	8005954 <UART_SetConfig+0xa0>
 8005948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	4b8d      	ldr	r3, [pc, #564]	@ (8005b84 <UART_SetConfig+0x2d0>)
 8005950:	429a      	cmp	r2, r3
 8005952:	d104      	bne.n	800595e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005954:	f7fd fe88 	bl	8003668 <HAL_RCC_GetPCLK2Freq>
 8005958:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800595c:	e003      	b.n	8005966 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800595e:	f7fd fe6f 	bl	8003640 <HAL_RCC_GetPCLK1Freq>
 8005962:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800596a:	69db      	ldr	r3, [r3, #28]
 800596c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005970:	f040 810c 	bne.w	8005b8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005974:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005978:	2200      	movs	r2, #0
 800597a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800597e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005982:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005986:	4622      	mov	r2, r4
 8005988:	462b      	mov	r3, r5
 800598a:	1891      	adds	r1, r2, r2
 800598c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800598e:	415b      	adcs	r3, r3
 8005990:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005992:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005996:	4621      	mov	r1, r4
 8005998:	eb12 0801 	adds.w	r8, r2, r1
 800599c:	4629      	mov	r1, r5
 800599e:	eb43 0901 	adc.w	r9, r3, r1
 80059a2:	f04f 0200 	mov.w	r2, #0
 80059a6:	f04f 0300 	mov.w	r3, #0
 80059aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059b6:	4690      	mov	r8, r2
 80059b8:	4699      	mov	r9, r3
 80059ba:	4623      	mov	r3, r4
 80059bc:	eb18 0303 	adds.w	r3, r8, r3
 80059c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80059c4:	462b      	mov	r3, r5
 80059c6:	eb49 0303 	adc.w	r3, r9, r3
 80059ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80059ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80059da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80059de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80059e2:	460b      	mov	r3, r1
 80059e4:	18db      	adds	r3, r3, r3
 80059e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80059e8:	4613      	mov	r3, r2
 80059ea:	eb42 0303 	adc.w	r3, r2, r3
 80059ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80059f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80059f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80059f8:	f7fb f8ea 	bl	8000bd0 <__aeabi_uldivmod>
 80059fc:	4602      	mov	r2, r0
 80059fe:	460b      	mov	r3, r1
 8005a00:	4b61      	ldr	r3, [pc, #388]	@ (8005b88 <UART_SetConfig+0x2d4>)
 8005a02:	fba3 2302 	umull	r2, r3, r3, r2
 8005a06:	095b      	lsrs	r3, r3, #5
 8005a08:	011c      	lsls	r4, r3, #4
 8005a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a14:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005a18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005a1c:	4642      	mov	r2, r8
 8005a1e:	464b      	mov	r3, r9
 8005a20:	1891      	adds	r1, r2, r2
 8005a22:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005a24:	415b      	adcs	r3, r3
 8005a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005a2c:	4641      	mov	r1, r8
 8005a2e:	eb12 0a01 	adds.w	sl, r2, r1
 8005a32:	4649      	mov	r1, r9
 8005a34:	eb43 0b01 	adc.w	fp, r3, r1
 8005a38:	f04f 0200 	mov.w	r2, #0
 8005a3c:	f04f 0300 	mov.w	r3, #0
 8005a40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a4c:	4692      	mov	sl, r2
 8005a4e:	469b      	mov	fp, r3
 8005a50:	4643      	mov	r3, r8
 8005a52:	eb1a 0303 	adds.w	r3, sl, r3
 8005a56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a5a:	464b      	mov	r3, r9
 8005a5c:	eb4b 0303 	adc.w	r3, fp, r3
 8005a60:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a70:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005a74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005a78:	460b      	mov	r3, r1
 8005a7a:	18db      	adds	r3, r3, r3
 8005a7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a7e:	4613      	mov	r3, r2
 8005a80:	eb42 0303 	adc.w	r3, r2, r3
 8005a84:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005a8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005a8e:	f7fb f89f 	bl	8000bd0 <__aeabi_uldivmod>
 8005a92:	4602      	mov	r2, r0
 8005a94:	460b      	mov	r3, r1
 8005a96:	4611      	mov	r1, r2
 8005a98:	4b3b      	ldr	r3, [pc, #236]	@ (8005b88 <UART_SetConfig+0x2d4>)
 8005a9a:	fba3 2301 	umull	r2, r3, r3, r1
 8005a9e:	095b      	lsrs	r3, r3, #5
 8005aa0:	2264      	movs	r2, #100	@ 0x64
 8005aa2:	fb02 f303 	mul.w	r3, r2, r3
 8005aa6:	1acb      	subs	r3, r1, r3
 8005aa8:	00db      	lsls	r3, r3, #3
 8005aaa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005aae:	4b36      	ldr	r3, [pc, #216]	@ (8005b88 <UART_SetConfig+0x2d4>)
 8005ab0:	fba3 2302 	umull	r2, r3, r3, r2
 8005ab4:	095b      	lsrs	r3, r3, #5
 8005ab6:	005b      	lsls	r3, r3, #1
 8005ab8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005abc:	441c      	add	r4, r3
 8005abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ac8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005acc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005ad0:	4642      	mov	r2, r8
 8005ad2:	464b      	mov	r3, r9
 8005ad4:	1891      	adds	r1, r2, r2
 8005ad6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005ad8:	415b      	adcs	r3, r3
 8005ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005adc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005ae0:	4641      	mov	r1, r8
 8005ae2:	1851      	adds	r1, r2, r1
 8005ae4:	6339      	str	r1, [r7, #48]	@ 0x30
 8005ae6:	4649      	mov	r1, r9
 8005ae8:	414b      	adcs	r3, r1
 8005aea:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aec:	f04f 0200 	mov.w	r2, #0
 8005af0:	f04f 0300 	mov.w	r3, #0
 8005af4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005af8:	4659      	mov	r1, fp
 8005afa:	00cb      	lsls	r3, r1, #3
 8005afc:	4651      	mov	r1, sl
 8005afe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b02:	4651      	mov	r1, sl
 8005b04:	00ca      	lsls	r2, r1, #3
 8005b06:	4610      	mov	r0, r2
 8005b08:	4619      	mov	r1, r3
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	4642      	mov	r2, r8
 8005b0e:	189b      	adds	r3, r3, r2
 8005b10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b14:	464b      	mov	r3, r9
 8005b16:	460a      	mov	r2, r1
 8005b18:	eb42 0303 	adc.w	r3, r2, r3
 8005b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b2c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005b30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005b34:	460b      	mov	r3, r1
 8005b36:	18db      	adds	r3, r3, r3
 8005b38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	eb42 0303 	adc.w	r3, r2, r3
 8005b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005b4a:	f7fb f841 	bl	8000bd0 <__aeabi_uldivmod>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	460b      	mov	r3, r1
 8005b52:	4b0d      	ldr	r3, [pc, #52]	@ (8005b88 <UART_SetConfig+0x2d4>)
 8005b54:	fba3 1302 	umull	r1, r3, r3, r2
 8005b58:	095b      	lsrs	r3, r3, #5
 8005b5a:	2164      	movs	r1, #100	@ 0x64
 8005b5c:	fb01 f303 	mul.w	r3, r1, r3
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	00db      	lsls	r3, r3, #3
 8005b64:	3332      	adds	r3, #50	@ 0x32
 8005b66:	4a08      	ldr	r2, [pc, #32]	@ (8005b88 <UART_SetConfig+0x2d4>)
 8005b68:	fba2 2303 	umull	r2, r3, r2, r3
 8005b6c:	095b      	lsrs	r3, r3, #5
 8005b6e:	f003 0207 	and.w	r2, r3, #7
 8005b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4422      	add	r2, r4
 8005b7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b7c:	e106      	b.n	8005d8c <UART_SetConfig+0x4d8>
 8005b7e:	bf00      	nop
 8005b80:	40011000 	.word	0x40011000
 8005b84:	40011400 	.word	0x40011400
 8005b88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b90:	2200      	movs	r2, #0
 8005b92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005b96:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005b9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005b9e:	4642      	mov	r2, r8
 8005ba0:	464b      	mov	r3, r9
 8005ba2:	1891      	adds	r1, r2, r2
 8005ba4:	6239      	str	r1, [r7, #32]
 8005ba6:	415b      	adcs	r3, r3
 8005ba8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005baa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bae:	4641      	mov	r1, r8
 8005bb0:	1854      	adds	r4, r2, r1
 8005bb2:	4649      	mov	r1, r9
 8005bb4:	eb43 0501 	adc.w	r5, r3, r1
 8005bb8:	f04f 0200 	mov.w	r2, #0
 8005bbc:	f04f 0300 	mov.w	r3, #0
 8005bc0:	00eb      	lsls	r3, r5, #3
 8005bc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bc6:	00e2      	lsls	r2, r4, #3
 8005bc8:	4614      	mov	r4, r2
 8005bca:	461d      	mov	r5, r3
 8005bcc:	4643      	mov	r3, r8
 8005bce:	18e3      	adds	r3, r4, r3
 8005bd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005bd4:	464b      	mov	r3, r9
 8005bd6:	eb45 0303 	adc.w	r3, r5, r3
 8005bda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005bea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005bee:	f04f 0200 	mov.w	r2, #0
 8005bf2:	f04f 0300 	mov.w	r3, #0
 8005bf6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005bfa:	4629      	mov	r1, r5
 8005bfc:	008b      	lsls	r3, r1, #2
 8005bfe:	4621      	mov	r1, r4
 8005c00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c04:	4621      	mov	r1, r4
 8005c06:	008a      	lsls	r2, r1, #2
 8005c08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005c0c:	f7fa ffe0 	bl	8000bd0 <__aeabi_uldivmod>
 8005c10:	4602      	mov	r2, r0
 8005c12:	460b      	mov	r3, r1
 8005c14:	4b60      	ldr	r3, [pc, #384]	@ (8005d98 <UART_SetConfig+0x4e4>)
 8005c16:	fba3 2302 	umull	r2, r3, r3, r2
 8005c1a:	095b      	lsrs	r3, r3, #5
 8005c1c:	011c      	lsls	r4, r3, #4
 8005c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c22:	2200      	movs	r2, #0
 8005c24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c28:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005c2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005c30:	4642      	mov	r2, r8
 8005c32:	464b      	mov	r3, r9
 8005c34:	1891      	adds	r1, r2, r2
 8005c36:	61b9      	str	r1, [r7, #24]
 8005c38:	415b      	adcs	r3, r3
 8005c3a:	61fb      	str	r3, [r7, #28]
 8005c3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c40:	4641      	mov	r1, r8
 8005c42:	1851      	adds	r1, r2, r1
 8005c44:	6139      	str	r1, [r7, #16]
 8005c46:	4649      	mov	r1, r9
 8005c48:	414b      	adcs	r3, r1
 8005c4a:	617b      	str	r3, [r7, #20]
 8005c4c:	f04f 0200 	mov.w	r2, #0
 8005c50:	f04f 0300 	mov.w	r3, #0
 8005c54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c58:	4659      	mov	r1, fp
 8005c5a:	00cb      	lsls	r3, r1, #3
 8005c5c:	4651      	mov	r1, sl
 8005c5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c62:	4651      	mov	r1, sl
 8005c64:	00ca      	lsls	r2, r1, #3
 8005c66:	4610      	mov	r0, r2
 8005c68:	4619      	mov	r1, r3
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	4642      	mov	r2, r8
 8005c6e:	189b      	adds	r3, r3, r2
 8005c70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c74:	464b      	mov	r3, r9
 8005c76:	460a      	mov	r2, r1
 8005c78:	eb42 0303 	adc.w	r3, r2, r3
 8005c7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c8a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005c8c:	f04f 0200 	mov.w	r2, #0
 8005c90:	f04f 0300 	mov.w	r3, #0
 8005c94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005c98:	4649      	mov	r1, r9
 8005c9a:	008b      	lsls	r3, r1, #2
 8005c9c:	4641      	mov	r1, r8
 8005c9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ca2:	4641      	mov	r1, r8
 8005ca4:	008a      	lsls	r2, r1, #2
 8005ca6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005caa:	f7fa ff91 	bl	8000bd0 <__aeabi_uldivmod>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	4611      	mov	r1, r2
 8005cb4:	4b38      	ldr	r3, [pc, #224]	@ (8005d98 <UART_SetConfig+0x4e4>)
 8005cb6:	fba3 2301 	umull	r2, r3, r3, r1
 8005cba:	095b      	lsrs	r3, r3, #5
 8005cbc:	2264      	movs	r2, #100	@ 0x64
 8005cbe:	fb02 f303 	mul.w	r3, r2, r3
 8005cc2:	1acb      	subs	r3, r1, r3
 8005cc4:	011b      	lsls	r3, r3, #4
 8005cc6:	3332      	adds	r3, #50	@ 0x32
 8005cc8:	4a33      	ldr	r2, [pc, #204]	@ (8005d98 <UART_SetConfig+0x4e4>)
 8005cca:	fba2 2303 	umull	r2, r3, r2, r3
 8005cce:	095b      	lsrs	r3, r3, #5
 8005cd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005cd4:	441c      	add	r4, r3
 8005cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cda:	2200      	movs	r2, #0
 8005cdc:	673b      	str	r3, [r7, #112]	@ 0x70
 8005cde:	677a      	str	r2, [r7, #116]	@ 0x74
 8005ce0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005ce4:	4642      	mov	r2, r8
 8005ce6:	464b      	mov	r3, r9
 8005ce8:	1891      	adds	r1, r2, r2
 8005cea:	60b9      	str	r1, [r7, #8]
 8005cec:	415b      	adcs	r3, r3
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cf4:	4641      	mov	r1, r8
 8005cf6:	1851      	adds	r1, r2, r1
 8005cf8:	6039      	str	r1, [r7, #0]
 8005cfa:	4649      	mov	r1, r9
 8005cfc:	414b      	adcs	r3, r1
 8005cfe:	607b      	str	r3, [r7, #4]
 8005d00:	f04f 0200 	mov.w	r2, #0
 8005d04:	f04f 0300 	mov.w	r3, #0
 8005d08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d0c:	4659      	mov	r1, fp
 8005d0e:	00cb      	lsls	r3, r1, #3
 8005d10:	4651      	mov	r1, sl
 8005d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d16:	4651      	mov	r1, sl
 8005d18:	00ca      	lsls	r2, r1, #3
 8005d1a:	4610      	mov	r0, r2
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	4603      	mov	r3, r0
 8005d20:	4642      	mov	r2, r8
 8005d22:	189b      	adds	r3, r3, r2
 8005d24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d26:	464b      	mov	r3, r9
 8005d28:	460a      	mov	r2, r1
 8005d2a:	eb42 0303 	adc.w	r3, r2, r3
 8005d2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d3a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005d3c:	f04f 0200 	mov.w	r2, #0
 8005d40:	f04f 0300 	mov.w	r3, #0
 8005d44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005d48:	4649      	mov	r1, r9
 8005d4a:	008b      	lsls	r3, r1, #2
 8005d4c:	4641      	mov	r1, r8
 8005d4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d52:	4641      	mov	r1, r8
 8005d54:	008a      	lsls	r2, r1, #2
 8005d56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005d5a:	f7fa ff39 	bl	8000bd0 <__aeabi_uldivmod>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	460b      	mov	r3, r1
 8005d62:	4b0d      	ldr	r3, [pc, #52]	@ (8005d98 <UART_SetConfig+0x4e4>)
 8005d64:	fba3 1302 	umull	r1, r3, r3, r2
 8005d68:	095b      	lsrs	r3, r3, #5
 8005d6a:	2164      	movs	r1, #100	@ 0x64
 8005d6c:	fb01 f303 	mul.w	r3, r1, r3
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	011b      	lsls	r3, r3, #4
 8005d74:	3332      	adds	r3, #50	@ 0x32
 8005d76:	4a08      	ldr	r2, [pc, #32]	@ (8005d98 <UART_SetConfig+0x4e4>)
 8005d78:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7c:	095b      	lsrs	r3, r3, #5
 8005d7e:	f003 020f 	and.w	r2, r3, #15
 8005d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4422      	add	r2, r4
 8005d8a:	609a      	str	r2, [r3, #8]
}
 8005d8c:	bf00      	nop
 8005d8e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005d92:	46bd      	mov	sp, r7
 8005d94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d98:	51eb851f 	.word	0x51eb851f

08005d9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d9c:	b084      	sub	sp, #16
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b084      	sub	sp, #16
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	f107 001c 	add.w	r0, r7, #28
 8005daa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005dae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d123      	bne.n	8005dfe <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005dca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005dde:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d105      	bne.n	8005df2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 fa9a 	bl	800632c <USB_CoreReset>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	73fb      	strb	r3, [r7, #15]
 8005dfc:	e01b      	b.n	8005e36 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 fa8e 	bl	800632c <USB_CoreReset>
 8005e10:	4603      	mov	r3, r0
 8005e12:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005e14:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d106      	bne.n	8005e2a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e20:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	639a      	str	r2, [r3, #56]	@ 0x38
 8005e28:	e005      	b.n	8005e36 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e2e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005e36:	7fbb      	ldrb	r3, [r7, #30]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d10b      	bne.n	8005e54 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f043 0206 	orr.w	r2, r3, #6
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f043 0220 	orr.w	r2, r3, #32
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e60:	b004      	add	sp, #16
 8005e62:	4770      	bx	lr

08005e64 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f023 0201 	bic.w	r2, r3, #1
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b084      	sub	sp, #16
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
 8005e8e:	460b      	mov	r3, r1
 8005e90:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005e92:	2300      	movs	r3, #0
 8005e94:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005ea2:	78fb      	ldrb	r3, [r7, #3]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d115      	bne.n	8005ed4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005eb4:	200a      	movs	r0, #10
 8005eb6:	f7fc fc0f 	bl	80026d8 <HAL_Delay>
      ms += 10U;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	330a      	adds	r3, #10
 8005ebe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fa25 	bl	8006310 <USB_GetMode>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d01e      	beq.n	8005f0a <USB_SetCurrentMode+0x84>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2bc7      	cmp	r3, #199	@ 0xc7
 8005ed0:	d9f0      	bls.n	8005eb4 <USB_SetCurrentMode+0x2e>
 8005ed2:	e01a      	b.n	8005f0a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ed4:	78fb      	ldrb	r3, [r7, #3]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d115      	bne.n	8005f06 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005ee6:	200a      	movs	r0, #10
 8005ee8:	f7fc fbf6 	bl	80026d8 <HAL_Delay>
      ms += 10U;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	330a      	adds	r3, #10
 8005ef0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 fa0c 	bl	8006310 <USB_GetMode>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d005      	beq.n	8005f0a <USB_SetCurrentMode+0x84>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2bc7      	cmp	r3, #199	@ 0xc7
 8005f02:	d9f0      	bls.n	8005ee6 <USB_SetCurrentMode+0x60>
 8005f04:	e001      	b.n	8005f0a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e005      	b.n	8005f16 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2bc8      	cmp	r3, #200	@ 0xc8
 8005f0e:	d101      	bne.n	8005f14 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e000      	b.n	8005f16 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
	...

08005f20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f20:	b084      	sub	sp, #16
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b086      	sub	sp, #24
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
 8005f2a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005f2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005f32:	2300      	movs	r3, #0
 8005f34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	613b      	str	r3, [r7, #16]
 8005f3e:	e009      	b.n	8005f54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	3340      	adds	r3, #64	@ 0x40
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4413      	add	r3, r2
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	3301      	adds	r3, #1
 8005f52:	613b      	str	r3, [r7, #16]
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	2b0e      	cmp	r3, #14
 8005f58:	d9f2      	bls.n	8005f40 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005f5a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d11c      	bne.n	8005f9c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f70:	f043 0302 	orr.w	r3, r3, #2
 8005f74:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f7a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	601a      	str	r2, [r3, #0]
 8005f9a:	e005      	b.n	8005fa8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fa0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005fae:	461a      	mov	r2, r3
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005fb4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d10d      	bne.n	8005fd8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d104      	bne.n	8005fce <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005fc4:	2100      	movs	r1, #0
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 f968 	bl	800629c <USB_SetDevSpeed>
 8005fcc:	e008      	b.n	8005fe0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005fce:	2101      	movs	r1, #1
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 f963 	bl	800629c <USB_SetDevSpeed>
 8005fd6:	e003      	b.n	8005fe0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005fd8:	2103      	movs	r1, #3
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f95e 	bl	800629c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005fe0:	2110      	movs	r1, #16
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f8fa 	bl	80061dc <USB_FlushTxFifo>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d001      	beq.n	8005ff2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f924 	bl	8006240 <USB_FlushRxFifo>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006008:	461a      	mov	r2, r3
 800600a:	2300      	movs	r3, #0
 800600c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006014:	461a      	mov	r2, r3
 8006016:	2300      	movs	r3, #0
 8006018:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006020:	461a      	mov	r2, r3
 8006022:	2300      	movs	r3, #0
 8006024:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006026:	2300      	movs	r3, #0
 8006028:	613b      	str	r3, [r7, #16]
 800602a:	e043      	b.n	80060b4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4413      	add	r3, r2
 8006034:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800603e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006042:	d118      	bne.n	8006076 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10a      	bne.n	8006060 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	015a      	lsls	r2, r3, #5
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	4413      	add	r3, r2
 8006052:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006056:	461a      	mov	r2, r3
 8006058:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800605c:	6013      	str	r3, [r2, #0]
 800605e:	e013      	b.n	8006088 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	4413      	add	r3, r2
 8006068:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800606c:	461a      	mov	r2, r3
 800606e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006072:	6013      	str	r3, [r2, #0]
 8006074:	e008      	b.n	8006088 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	015a      	lsls	r2, r3, #5
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	4413      	add	r3, r2
 800607e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006082:	461a      	mov	r2, r3
 8006084:	2300      	movs	r3, #0
 8006086:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	015a      	lsls	r2, r3, #5
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	4413      	add	r3, r2
 8006090:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006094:	461a      	mov	r2, r3
 8006096:	2300      	movs	r3, #0
 8006098:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	015a      	lsls	r2, r3, #5
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	4413      	add	r3, r2
 80060a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060a6:	461a      	mov	r2, r3
 80060a8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80060ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	3301      	adds	r3, #1
 80060b2:	613b      	str	r3, [r7, #16]
 80060b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80060b8:	461a      	mov	r2, r3
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	4293      	cmp	r3, r2
 80060be:	d3b5      	bcc.n	800602c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060c0:	2300      	movs	r3, #0
 80060c2:	613b      	str	r3, [r7, #16]
 80060c4:	e043      	b.n	800614e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060dc:	d118      	bne.n	8006110 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d10a      	bne.n	80060fa <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060f0:	461a      	mov	r2, r3
 80060f2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80060f6:	6013      	str	r3, [r2, #0]
 80060f8:	e013      	b.n	8006122 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	015a      	lsls	r2, r3, #5
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	4413      	add	r3, r2
 8006102:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006106:	461a      	mov	r2, r3
 8006108:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800610c:	6013      	str	r3, [r2, #0]
 800610e:	e008      	b.n	8006122 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	015a      	lsls	r2, r3, #5
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	4413      	add	r3, r2
 8006118:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800611c:	461a      	mov	r2, r3
 800611e:	2300      	movs	r3, #0
 8006120:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	015a      	lsls	r2, r3, #5
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	4413      	add	r3, r2
 800612a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800612e:	461a      	mov	r2, r3
 8006130:	2300      	movs	r3, #0
 8006132:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4413      	add	r3, r2
 800613c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006140:	461a      	mov	r2, r3
 8006142:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006146:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	3301      	adds	r3, #1
 800614c:	613b      	str	r3, [r7, #16]
 800614e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006152:	461a      	mov	r2, r3
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	4293      	cmp	r3, r2
 8006158:	d3b5      	bcc.n	80060c6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006168:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800616c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800617a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800617c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006180:	2b00      	cmp	r3, #0
 8006182:	d105      	bne.n	8006190 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	f043 0210 	orr.w	r2, r3, #16
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	699a      	ldr	r2, [r3, #24]
 8006194:	4b10      	ldr	r3, [pc, #64]	@ (80061d8 <USB_DevInit+0x2b8>)
 8006196:	4313      	orrs	r3, r2
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800619c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d005      	beq.n	80061b0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	699b      	ldr	r3, [r3, #24]
 80061a8:	f043 0208 	orr.w	r2, r3, #8
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80061b0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d107      	bne.n	80061c8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061c0:	f043 0304 	orr.w	r3, r3, #4
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80061c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3718      	adds	r7, #24
 80061ce:	46bd      	mov	sp, r7
 80061d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061d4:	b004      	add	sp, #16
 80061d6:	4770      	bx	lr
 80061d8:	803c3800 	.word	0x803c3800

080061dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80061e6:	2300      	movs	r3, #0
 80061e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	3301      	adds	r3, #1
 80061ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061f6:	d901      	bls.n	80061fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	e01b      	b.n	8006234 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	2b00      	cmp	r3, #0
 8006202:	daf2      	bge.n	80061ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006204:	2300      	movs	r3, #0
 8006206:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	019b      	lsls	r3, r3, #6
 800620c:	f043 0220 	orr.w	r2, r3, #32
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	3301      	adds	r3, #1
 8006218:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006220:	d901      	bls.n	8006226 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006222:	2303      	movs	r3, #3
 8006224:	e006      	b.n	8006234 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	f003 0320 	and.w	r3, r3, #32
 800622e:	2b20      	cmp	r3, #32
 8006230:	d0f0      	beq.n	8006214 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3714      	adds	r7, #20
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006248:	2300      	movs	r3, #0
 800624a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	3301      	adds	r3, #1
 8006250:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006258:	d901      	bls.n	800625e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e018      	b.n	8006290 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	2b00      	cmp	r3, #0
 8006264:	daf2      	bge.n	800624c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006266:	2300      	movs	r3, #0
 8006268:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2210      	movs	r2, #16
 800626e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	3301      	adds	r3, #1
 8006274:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800627c:	d901      	bls.n	8006282 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e006      	b.n	8006290 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	f003 0310 	and.w	r3, r3, #16
 800628a:	2b10      	cmp	r3, #16
 800628c:	d0f0      	beq.n	8006270 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3714      	adds	r7, #20
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	460b      	mov	r3, r1
 80062a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	78fb      	ldrb	r3, [r7, #3]
 80062b6:	68f9      	ldr	r1, [r7, #12]
 80062b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80062bc:	4313      	orrs	r3, r2
 80062be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80062ce:	b480      	push	{r7}
 80062d0:	b085      	sub	sp, #20
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80062e8:	f023 0303 	bic.w	r3, r3, #3
 80062ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062fc:	f043 0302 	orr.w	r3, r3, #2
 8006300:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3714      	adds	r7, #20
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	695b      	ldr	r3, [r3, #20]
 800631c:	f003 0301 	and.w	r3, r3, #1
}
 8006320:	4618      	mov	r0, r3
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006334:	2300      	movs	r3, #0
 8006336:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	3301      	adds	r3, #1
 800633c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006344:	d901      	bls.n	800634a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e01b      	b.n	8006382 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	2b00      	cmp	r3, #0
 8006350:	daf2      	bge.n	8006338 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006352:	2300      	movs	r3, #0
 8006354:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	f043 0201 	orr.w	r2, r3, #1
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	3301      	adds	r3, #1
 8006366:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800636e:	d901      	bls.n	8006374 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e006      	b.n	8006382 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	f003 0301 	and.w	r3, r3, #1
 800637c:	2b01      	cmp	r3, #1
 800637e:	d0f0      	beq.n	8006362 <USB_CoreReset+0x36>

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <memset>:
 800638e:	4402      	add	r2, r0
 8006390:	4603      	mov	r3, r0
 8006392:	4293      	cmp	r3, r2
 8006394:	d100      	bne.n	8006398 <memset+0xa>
 8006396:	4770      	bx	lr
 8006398:	f803 1b01 	strb.w	r1, [r3], #1
 800639c:	e7f9      	b.n	8006392 <memset+0x4>
	...

080063a0 <__errno>:
 80063a0:	4b01      	ldr	r3, [pc, #4]	@ (80063a8 <__errno+0x8>)
 80063a2:	6818      	ldr	r0, [r3, #0]
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	2000000c 	.word	0x2000000c

080063ac <__libc_init_array>:
 80063ac:	b570      	push	{r4, r5, r6, lr}
 80063ae:	4d0d      	ldr	r5, [pc, #52]	@ (80063e4 <__libc_init_array+0x38>)
 80063b0:	4c0d      	ldr	r4, [pc, #52]	@ (80063e8 <__libc_init_array+0x3c>)
 80063b2:	1b64      	subs	r4, r4, r5
 80063b4:	10a4      	asrs	r4, r4, #2
 80063b6:	2600      	movs	r6, #0
 80063b8:	42a6      	cmp	r6, r4
 80063ba:	d109      	bne.n	80063d0 <__libc_init_array+0x24>
 80063bc:	4d0b      	ldr	r5, [pc, #44]	@ (80063ec <__libc_init_array+0x40>)
 80063be:	4c0c      	ldr	r4, [pc, #48]	@ (80063f0 <__libc_init_array+0x44>)
 80063c0:	f001 fb3e 	bl	8007a40 <_init>
 80063c4:	1b64      	subs	r4, r4, r5
 80063c6:	10a4      	asrs	r4, r4, #2
 80063c8:	2600      	movs	r6, #0
 80063ca:	42a6      	cmp	r6, r4
 80063cc:	d105      	bne.n	80063da <__libc_init_array+0x2e>
 80063ce:	bd70      	pop	{r4, r5, r6, pc}
 80063d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80063d4:	4798      	blx	r3
 80063d6:	3601      	adds	r6, #1
 80063d8:	e7ee      	b.n	80063b8 <__libc_init_array+0xc>
 80063da:	f855 3b04 	ldr.w	r3, [r5], #4
 80063de:	4798      	blx	r3
 80063e0:	3601      	adds	r6, #1
 80063e2:	e7f2      	b.n	80063ca <__libc_init_array+0x1e>
 80063e4:	08007c90 	.word	0x08007c90
 80063e8:	08007c90 	.word	0x08007c90
 80063ec:	08007c90 	.word	0x08007c90
 80063f0:	08007c94 	.word	0x08007c94

080063f4 <sqrt>:
 80063f4:	b538      	push	{r3, r4, r5, lr}
 80063f6:	ed2d 8b02 	vpush	{d8}
 80063fa:	ec55 4b10 	vmov	r4, r5, d0
 80063fe:	f000 fa6f 	bl	80068e0 <__ieee754_sqrt>
 8006402:	4622      	mov	r2, r4
 8006404:	462b      	mov	r3, r5
 8006406:	4620      	mov	r0, r4
 8006408:	4629      	mov	r1, r5
 800640a:	eeb0 8a40 	vmov.f32	s16, s0
 800640e:	eef0 8a60 	vmov.f32	s17, s1
 8006412:	f7fa fb4f 	bl	8000ab4 <__aeabi_dcmpun>
 8006416:	b990      	cbnz	r0, 800643e <sqrt+0x4a>
 8006418:	2200      	movs	r2, #0
 800641a:	2300      	movs	r3, #0
 800641c:	4620      	mov	r0, r4
 800641e:	4629      	mov	r1, r5
 8006420:	f7fa fb20 	bl	8000a64 <__aeabi_dcmplt>
 8006424:	b158      	cbz	r0, 800643e <sqrt+0x4a>
 8006426:	f7ff ffbb 	bl	80063a0 <__errno>
 800642a:	2321      	movs	r3, #33	@ 0x21
 800642c:	6003      	str	r3, [r0, #0]
 800642e:	2200      	movs	r2, #0
 8006430:	2300      	movs	r3, #0
 8006432:	4610      	mov	r0, r2
 8006434:	4619      	mov	r1, r3
 8006436:	f7fa f9cd 	bl	80007d4 <__aeabi_ddiv>
 800643a:	ec41 0b18 	vmov	d8, r0, r1
 800643e:	eeb0 0a48 	vmov.f32	s0, s16
 8006442:	eef0 0a68 	vmov.f32	s1, s17
 8006446:	ecbd 8b02 	vpop	{d8}
 800644a:	bd38      	pop	{r3, r4, r5, pc}
 800644c:	0000      	movs	r0, r0
	...

08006450 <atan>:
 8006450:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006454:	ec55 4b10 	vmov	r4, r5, d0
 8006458:	4bbf      	ldr	r3, [pc, #764]	@ (8006758 <atan+0x308>)
 800645a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800645e:	429e      	cmp	r6, r3
 8006460:	46ab      	mov	fp, r5
 8006462:	d918      	bls.n	8006496 <atan+0x46>
 8006464:	4bbd      	ldr	r3, [pc, #756]	@ (800675c <atan+0x30c>)
 8006466:	429e      	cmp	r6, r3
 8006468:	d801      	bhi.n	800646e <atan+0x1e>
 800646a:	d109      	bne.n	8006480 <atan+0x30>
 800646c:	b144      	cbz	r4, 8006480 <atan+0x30>
 800646e:	4622      	mov	r2, r4
 8006470:	462b      	mov	r3, r5
 8006472:	4620      	mov	r0, r4
 8006474:	4629      	mov	r1, r5
 8006476:	f7f9 fecd 	bl	8000214 <__adddf3>
 800647a:	4604      	mov	r4, r0
 800647c:	460d      	mov	r5, r1
 800647e:	e006      	b.n	800648e <atan+0x3e>
 8006480:	f1bb 0f00 	cmp.w	fp, #0
 8006484:	f340 812b 	ble.w	80066de <atan+0x28e>
 8006488:	a597      	add	r5, pc, #604	@ (adr r5, 80066e8 <atan+0x298>)
 800648a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800648e:	ec45 4b10 	vmov	d0, r4, r5
 8006492:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006496:	4bb2      	ldr	r3, [pc, #712]	@ (8006760 <atan+0x310>)
 8006498:	429e      	cmp	r6, r3
 800649a:	d813      	bhi.n	80064c4 <atan+0x74>
 800649c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80064a0:	429e      	cmp	r6, r3
 80064a2:	d80c      	bhi.n	80064be <atan+0x6e>
 80064a4:	a392      	add	r3, pc, #584	@ (adr r3, 80066f0 <atan+0x2a0>)
 80064a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064aa:	4620      	mov	r0, r4
 80064ac:	4629      	mov	r1, r5
 80064ae:	f7f9 feb1 	bl	8000214 <__adddf3>
 80064b2:	4bac      	ldr	r3, [pc, #688]	@ (8006764 <atan+0x314>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	f7fa faf3 	bl	8000aa0 <__aeabi_dcmpgt>
 80064ba:	2800      	cmp	r0, #0
 80064bc:	d1e7      	bne.n	800648e <atan+0x3e>
 80064be:	f04f 3aff 	mov.w	sl, #4294967295
 80064c2:	e029      	b.n	8006518 <atan+0xc8>
 80064c4:	f000 f9b0 	bl	8006828 <fabs>
 80064c8:	4ba7      	ldr	r3, [pc, #668]	@ (8006768 <atan+0x318>)
 80064ca:	429e      	cmp	r6, r3
 80064cc:	ec55 4b10 	vmov	r4, r5, d0
 80064d0:	f200 80bc 	bhi.w	800664c <atan+0x1fc>
 80064d4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80064d8:	429e      	cmp	r6, r3
 80064da:	f200 809e 	bhi.w	800661a <atan+0x1ca>
 80064de:	4622      	mov	r2, r4
 80064e0:	462b      	mov	r3, r5
 80064e2:	4620      	mov	r0, r4
 80064e4:	4629      	mov	r1, r5
 80064e6:	f7f9 fe95 	bl	8000214 <__adddf3>
 80064ea:	4b9e      	ldr	r3, [pc, #632]	@ (8006764 <atan+0x314>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	f7f9 fe8f 	bl	8000210 <__aeabi_dsub>
 80064f2:	2200      	movs	r2, #0
 80064f4:	4606      	mov	r6, r0
 80064f6:	460f      	mov	r7, r1
 80064f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80064fc:	4620      	mov	r0, r4
 80064fe:	4629      	mov	r1, r5
 8006500:	f7f9 fe88 	bl	8000214 <__adddf3>
 8006504:	4602      	mov	r2, r0
 8006506:	460b      	mov	r3, r1
 8006508:	4630      	mov	r0, r6
 800650a:	4639      	mov	r1, r7
 800650c:	f7fa f962 	bl	80007d4 <__aeabi_ddiv>
 8006510:	f04f 0a00 	mov.w	sl, #0
 8006514:	4604      	mov	r4, r0
 8006516:	460d      	mov	r5, r1
 8006518:	4622      	mov	r2, r4
 800651a:	462b      	mov	r3, r5
 800651c:	4620      	mov	r0, r4
 800651e:	4629      	mov	r1, r5
 8006520:	f7fa f82e 	bl	8000580 <__aeabi_dmul>
 8006524:	4602      	mov	r2, r0
 8006526:	460b      	mov	r3, r1
 8006528:	4680      	mov	r8, r0
 800652a:	4689      	mov	r9, r1
 800652c:	f7fa f828 	bl	8000580 <__aeabi_dmul>
 8006530:	a371      	add	r3, pc, #452	@ (adr r3, 80066f8 <atan+0x2a8>)
 8006532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006536:	4606      	mov	r6, r0
 8006538:	460f      	mov	r7, r1
 800653a:	f7fa f821 	bl	8000580 <__aeabi_dmul>
 800653e:	a370      	add	r3, pc, #448	@ (adr r3, 8006700 <atan+0x2b0>)
 8006540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006544:	f7f9 fe66 	bl	8000214 <__adddf3>
 8006548:	4632      	mov	r2, r6
 800654a:	463b      	mov	r3, r7
 800654c:	f7fa f818 	bl	8000580 <__aeabi_dmul>
 8006550:	a36d      	add	r3, pc, #436	@ (adr r3, 8006708 <atan+0x2b8>)
 8006552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006556:	f7f9 fe5d 	bl	8000214 <__adddf3>
 800655a:	4632      	mov	r2, r6
 800655c:	463b      	mov	r3, r7
 800655e:	f7fa f80f 	bl	8000580 <__aeabi_dmul>
 8006562:	a36b      	add	r3, pc, #428	@ (adr r3, 8006710 <atan+0x2c0>)
 8006564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006568:	f7f9 fe54 	bl	8000214 <__adddf3>
 800656c:	4632      	mov	r2, r6
 800656e:	463b      	mov	r3, r7
 8006570:	f7fa f806 	bl	8000580 <__aeabi_dmul>
 8006574:	a368      	add	r3, pc, #416	@ (adr r3, 8006718 <atan+0x2c8>)
 8006576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657a:	f7f9 fe4b 	bl	8000214 <__adddf3>
 800657e:	4632      	mov	r2, r6
 8006580:	463b      	mov	r3, r7
 8006582:	f7f9 fffd 	bl	8000580 <__aeabi_dmul>
 8006586:	a366      	add	r3, pc, #408	@ (adr r3, 8006720 <atan+0x2d0>)
 8006588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658c:	f7f9 fe42 	bl	8000214 <__adddf3>
 8006590:	4642      	mov	r2, r8
 8006592:	464b      	mov	r3, r9
 8006594:	f7f9 fff4 	bl	8000580 <__aeabi_dmul>
 8006598:	a363      	add	r3, pc, #396	@ (adr r3, 8006728 <atan+0x2d8>)
 800659a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659e:	4680      	mov	r8, r0
 80065a0:	4689      	mov	r9, r1
 80065a2:	4630      	mov	r0, r6
 80065a4:	4639      	mov	r1, r7
 80065a6:	f7f9 ffeb 	bl	8000580 <__aeabi_dmul>
 80065aa:	a361      	add	r3, pc, #388	@ (adr r3, 8006730 <atan+0x2e0>)
 80065ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b0:	f7f9 fe2e 	bl	8000210 <__aeabi_dsub>
 80065b4:	4632      	mov	r2, r6
 80065b6:	463b      	mov	r3, r7
 80065b8:	f7f9 ffe2 	bl	8000580 <__aeabi_dmul>
 80065bc:	a35e      	add	r3, pc, #376	@ (adr r3, 8006738 <atan+0x2e8>)
 80065be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c2:	f7f9 fe25 	bl	8000210 <__aeabi_dsub>
 80065c6:	4632      	mov	r2, r6
 80065c8:	463b      	mov	r3, r7
 80065ca:	f7f9 ffd9 	bl	8000580 <__aeabi_dmul>
 80065ce:	a35c      	add	r3, pc, #368	@ (adr r3, 8006740 <atan+0x2f0>)
 80065d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d4:	f7f9 fe1c 	bl	8000210 <__aeabi_dsub>
 80065d8:	4632      	mov	r2, r6
 80065da:	463b      	mov	r3, r7
 80065dc:	f7f9 ffd0 	bl	8000580 <__aeabi_dmul>
 80065e0:	a359      	add	r3, pc, #356	@ (adr r3, 8006748 <atan+0x2f8>)
 80065e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e6:	f7f9 fe13 	bl	8000210 <__aeabi_dsub>
 80065ea:	4632      	mov	r2, r6
 80065ec:	463b      	mov	r3, r7
 80065ee:	f7f9 ffc7 	bl	8000580 <__aeabi_dmul>
 80065f2:	4602      	mov	r2, r0
 80065f4:	460b      	mov	r3, r1
 80065f6:	4640      	mov	r0, r8
 80065f8:	4649      	mov	r1, r9
 80065fa:	f7f9 fe0b 	bl	8000214 <__adddf3>
 80065fe:	4622      	mov	r2, r4
 8006600:	462b      	mov	r3, r5
 8006602:	f7f9 ffbd 	bl	8000580 <__aeabi_dmul>
 8006606:	f1ba 3fff 	cmp.w	sl, #4294967295
 800660a:	4602      	mov	r2, r0
 800660c:	460b      	mov	r3, r1
 800660e:	d148      	bne.n	80066a2 <atan+0x252>
 8006610:	4620      	mov	r0, r4
 8006612:	4629      	mov	r1, r5
 8006614:	f7f9 fdfc 	bl	8000210 <__aeabi_dsub>
 8006618:	e72f      	b.n	800647a <atan+0x2a>
 800661a:	4b52      	ldr	r3, [pc, #328]	@ (8006764 <atan+0x314>)
 800661c:	2200      	movs	r2, #0
 800661e:	4620      	mov	r0, r4
 8006620:	4629      	mov	r1, r5
 8006622:	f7f9 fdf5 	bl	8000210 <__aeabi_dsub>
 8006626:	4b4f      	ldr	r3, [pc, #316]	@ (8006764 <atan+0x314>)
 8006628:	4606      	mov	r6, r0
 800662a:	460f      	mov	r7, r1
 800662c:	2200      	movs	r2, #0
 800662e:	4620      	mov	r0, r4
 8006630:	4629      	mov	r1, r5
 8006632:	f7f9 fdef 	bl	8000214 <__adddf3>
 8006636:	4602      	mov	r2, r0
 8006638:	460b      	mov	r3, r1
 800663a:	4630      	mov	r0, r6
 800663c:	4639      	mov	r1, r7
 800663e:	f7fa f8c9 	bl	80007d4 <__aeabi_ddiv>
 8006642:	f04f 0a01 	mov.w	sl, #1
 8006646:	4604      	mov	r4, r0
 8006648:	460d      	mov	r5, r1
 800664a:	e765      	b.n	8006518 <atan+0xc8>
 800664c:	4b47      	ldr	r3, [pc, #284]	@ (800676c <atan+0x31c>)
 800664e:	429e      	cmp	r6, r3
 8006650:	d21c      	bcs.n	800668c <atan+0x23c>
 8006652:	4b47      	ldr	r3, [pc, #284]	@ (8006770 <atan+0x320>)
 8006654:	2200      	movs	r2, #0
 8006656:	4620      	mov	r0, r4
 8006658:	4629      	mov	r1, r5
 800665a:	f7f9 fdd9 	bl	8000210 <__aeabi_dsub>
 800665e:	4b44      	ldr	r3, [pc, #272]	@ (8006770 <atan+0x320>)
 8006660:	4606      	mov	r6, r0
 8006662:	460f      	mov	r7, r1
 8006664:	2200      	movs	r2, #0
 8006666:	4620      	mov	r0, r4
 8006668:	4629      	mov	r1, r5
 800666a:	f7f9 ff89 	bl	8000580 <__aeabi_dmul>
 800666e:	4b3d      	ldr	r3, [pc, #244]	@ (8006764 <atan+0x314>)
 8006670:	2200      	movs	r2, #0
 8006672:	f7f9 fdcf 	bl	8000214 <__adddf3>
 8006676:	4602      	mov	r2, r0
 8006678:	460b      	mov	r3, r1
 800667a:	4630      	mov	r0, r6
 800667c:	4639      	mov	r1, r7
 800667e:	f7fa f8a9 	bl	80007d4 <__aeabi_ddiv>
 8006682:	f04f 0a02 	mov.w	sl, #2
 8006686:	4604      	mov	r4, r0
 8006688:	460d      	mov	r5, r1
 800668a:	e745      	b.n	8006518 <atan+0xc8>
 800668c:	4622      	mov	r2, r4
 800668e:	462b      	mov	r3, r5
 8006690:	4938      	ldr	r1, [pc, #224]	@ (8006774 <atan+0x324>)
 8006692:	2000      	movs	r0, #0
 8006694:	f7fa f89e 	bl	80007d4 <__aeabi_ddiv>
 8006698:	f04f 0a03 	mov.w	sl, #3
 800669c:	4604      	mov	r4, r0
 800669e:	460d      	mov	r5, r1
 80066a0:	e73a      	b.n	8006518 <atan+0xc8>
 80066a2:	4b35      	ldr	r3, [pc, #212]	@ (8006778 <atan+0x328>)
 80066a4:	4e35      	ldr	r6, [pc, #212]	@ (800677c <atan+0x32c>)
 80066a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80066aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ae:	f7f9 fdaf 	bl	8000210 <__aeabi_dsub>
 80066b2:	4622      	mov	r2, r4
 80066b4:	462b      	mov	r3, r5
 80066b6:	f7f9 fdab 	bl	8000210 <__aeabi_dsub>
 80066ba:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80066be:	4602      	mov	r2, r0
 80066c0:	460b      	mov	r3, r1
 80066c2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80066c6:	f7f9 fda3 	bl	8000210 <__aeabi_dsub>
 80066ca:	f1bb 0f00 	cmp.w	fp, #0
 80066ce:	4604      	mov	r4, r0
 80066d0:	460d      	mov	r5, r1
 80066d2:	f6bf aedc 	bge.w	800648e <atan+0x3e>
 80066d6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80066da:	461d      	mov	r5, r3
 80066dc:	e6d7      	b.n	800648e <atan+0x3e>
 80066de:	a51c      	add	r5, pc, #112	@ (adr r5, 8006750 <atan+0x300>)
 80066e0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80066e4:	e6d3      	b.n	800648e <atan+0x3e>
 80066e6:	bf00      	nop
 80066e8:	54442d18 	.word	0x54442d18
 80066ec:	3ff921fb 	.word	0x3ff921fb
 80066f0:	8800759c 	.word	0x8800759c
 80066f4:	7e37e43c 	.word	0x7e37e43c
 80066f8:	e322da11 	.word	0xe322da11
 80066fc:	3f90ad3a 	.word	0x3f90ad3a
 8006700:	24760deb 	.word	0x24760deb
 8006704:	3fa97b4b 	.word	0x3fa97b4b
 8006708:	a0d03d51 	.word	0xa0d03d51
 800670c:	3fb10d66 	.word	0x3fb10d66
 8006710:	c54c206e 	.word	0xc54c206e
 8006714:	3fb745cd 	.word	0x3fb745cd
 8006718:	920083ff 	.word	0x920083ff
 800671c:	3fc24924 	.word	0x3fc24924
 8006720:	5555550d 	.word	0x5555550d
 8006724:	3fd55555 	.word	0x3fd55555
 8006728:	2c6a6c2f 	.word	0x2c6a6c2f
 800672c:	bfa2b444 	.word	0xbfa2b444
 8006730:	52defd9a 	.word	0x52defd9a
 8006734:	3fadde2d 	.word	0x3fadde2d
 8006738:	af749a6d 	.word	0xaf749a6d
 800673c:	3fb3b0f2 	.word	0x3fb3b0f2
 8006740:	fe231671 	.word	0xfe231671
 8006744:	3fbc71c6 	.word	0x3fbc71c6
 8006748:	9998ebc4 	.word	0x9998ebc4
 800674c:	3fc99999 	.word	0x3fc99999
 8006750:	54442d18 	.word	0x54442d18
 8006754:	bff921fb 	.word	0xbff921fb
 8006758:	440fffff 	.word	0x440fffff
 800675c:	7ff00000 	.word	0x7ff00000
 8006760:	3fdbffff 	.word	0x3fdbffff
 8006764:	3ff00000 	.word	0x3ff00000
 8006768:	3ff2ffff 	.word	0x3ff2ffff
 800676c:	40038000 	.word	0x40038000
 8006770:	3ff80000 	.word	0x3ff80000
 8006774:	bff00000 	.word	0xbff00000
 8006778:	08007a70 	.word	0x08007a70
 800677c:	08007a90 	.word	0x08007a90

08006780 <cos>:
 8006780:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006782:	ec53 2b10 	vmov	r2, r3, d0
 8006786:	4826      	ldr	r0, [pc, #152]	@ (8006820 <cos+0xa0>)
 8006788:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800678c:	4281      	cmp	r1, r0
 800678e:	d806      	bhi.n	800679e <cos+0x1e>
 8006790:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8006818 <cos+0x98>
 8006794:	b005      	add	sp, #20
 8006796:	f85d eb04 	ldr.w	lr, [sp], #4
 800679a:	f000 b97d 	b.w	8006a98 <__kernel_cos>
 800679e:	4821      	ldr	r0, [pc, #132]	@ (8006824 <cos+0xa4>)
 80067a0:	4281      	cmp	r1, r0
 80067a2:	d908      	bls.n	80067b6 <cos+0x36>
 80067a4:	4610      	mov	r0, r2
 80067a6:	4619      	mov	r1, r3
 80067a8:	f7f9 fd32 	bl	8000210 <__aeabi_dsub>
 80067ac:	ec41 0b10 	vmov	d0, r0, r1
 80067b0:	b005      	add	sp, #20
 80067b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80067b6:	4668      	mov	r0, sp
 80067b8:	f000 faf2 	bl	8006da0 <__ieee754_rem_pio2>
 80067bc:	f000 0003 	and.w	r0, r0, #3
 80067c0:	2801      	cmp	r0, #1
 80067c2:	d00b      	beq.n	80067dc <cos+0x5c>
 80067c4:	2802      	cmp	r0, #2
 80067c6:	d015      	beq.n	80067f4 <cos+0x74>
 80067c8:	b9d8      	cbnz	r0, 8006802 <cos+0x82>
 80067ca:	ed9d 1b02 	vldr	d1, [sp, #8]
 80067ce:	ed9d 0b00 	vldr	d0, [sp]
 80067d2:	f000 f961 	bl	8006a98 <__kernel_cos>
 80067d6:	ec51 0b10 	vmov	r0, r1, d0
 80067da:	e7e7      	b.n	80067ac <cos+0x2c>
 80067dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80067e0:	ed9d 0b00 	vldr	d0, [sp]
 80067e4:	f000 fa20 	bl	8006c28 <__kernel_sin>
 80067e8:	ec53 2b10 	vmov	r2, r3, d0
 80067ec:	4610      	mov	r0, r2
 80067ee:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80067f2:	e7db      	b.n	80067ac <cos+0x2c>
 80067f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80067f8:	ed9d 0b00 	vldr	d0, [sp]
 80067fc:	f000 f94c 	bl	8006a98 <__kernel_cos>
 8006800:	e7f2      	b.n	80067e8 <cos+0x68>
 8006802:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006806:	ed9d 0b00 	vldr	d0, [sp]
 800680a:	2001      	movs	r0, #1
 800680c:	f000 fa0c 	bl	8006c28 <__kernel_sin>
 8006810:	e7e1      	b.n	80067d6 <cos+0x56>
 8006812:	bf00      	nop
 8006814:	f3af 8000 	nop.w
	...
 8006820:	3fe921fb 	.word	0x3fe921fb
 8006824:	7fefffff 	.word	0x7fefffff

08006828 <fabs>:
 8006828:	ec51 0b10 	vmov	r0, r1, d0
 800682c:	4602      	mov	r2, r0
 800682e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006832:	ec43 2b10 	vmov	d0, r2, r3
 8006836:	4770      	bx	lr

08006838 <sin>:
 8006838:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800683a:	ec53 2b10 	vmov	r2, r3, d0
 800683e:	4826      	ldr	r0, [pc, #152]	@ (80068d8 <sin+0xa0>)
 8006840:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006844:	4281      	cmp	r1, r0
 8006846:	d807      	bhi.n	8006858 <sin+0x20>
 8006848:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80068d0 <sin+0x98>
 800684c:	2000      	movs	r0, #0
 800684e:	b005      	add	sp, #20
 8006850:	f85d eb04 	ldr.w	lr, [sp], #4
 8006854:	f000 b9e8 	b.w	8006c28 <__kernel_sin>
 8006858:	4820      	ldr	r0, [pc, #128]	@ (80068dc <sin+0xa4>)
 800685a:	4281      	cmp	r1, r0
 800685c:	d908      	bls.n	8006870 <sin+0x38>
 800685e:	4610      	mov	r0, r2
 8006860:	4619      	mov	r1, r3
 8006862:	f7f9 fcd5 	bl	8000210 <__aeabi_dsub>
 8006866:	ec41 0b10 	vmov	d0, r0, r1
 800686a:	b005      	add	sp, #20
 800686c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006870:	4668      	mov	r0, sp
 8006872:	f000 fa95 	bl	8006da0 <__ieee754_rem_pio2>
 8006876:	f000 0003 	and.w	r0, r0, #3
 800687a:	2801      	cmp	r0, #1
 800687c:	d00c      	beq.n	8006898 <sin+0x60>
 800687e:	2802      	cmp	r0, #2
 8006880:	d011      	beq.n	80068a6 <sin+0x6e>
 8006882:	b9e8      	cbnz	r0, 80068c0 <sin+0x88>
 8006884:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006888:	ed9d 0b00 	vldr	d0, [sp]
 800688c:	2001      	movs	r0, #1
 800688e:	f000 f9cb 	bl	8006c28 <__kernel_sin>
 8006892:	ec51 0b10 	vmov	r0, r1, d0
 8006896:	e7e6      	b.n	8006866 <sin+0x2e>
 8006898:	ed9d 1b02 	vldr	d1, [sp, #8]
 800689c:	ed9d 0b00 	vldr	d0, [sp]
 80068a0:	f000 f8fa 	bl	8006a98 <__kernel_cos>
 80068a4:	e7f5      	b.n	8006892 <sin+0x5a>
 80068a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80068aa:	ed9d 0b00 	vldr	d0, [sp]
 80068ae:	2001      	movs	r0, #1
 80068b0:	f000 f9ba 	bl	8006c28 <__kernel_sin>
 80068b4:	ec53 2b10 	vmov	r2, r3, d0
 80068b8:	4610      	mov	r0, r2
 80068ba:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80068be:	e7d2      	b.n	8006866 <sin+0x2e>
 80068c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80068c4:	ed9d 0b00 	vldr	d0, [sp]
 80068c8:	f000 f8e6 	bl	8006a98 <__kernel_cos>
 80068cc:	e7f2      	b.n	80068b4 <sin+0x7c>
 80068ce:	bf00      	nop
	...
 80068d8:	3fe921fb 	.word	0x3fe921fb
 80068dc:	7fefffff 	.word	0x7fefffff

080068e0 <__ieee754_sqrt>:
 80068e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e4:	4a68      	ldr	r2, [pc, #416]	@ (8006a88 <__ieee754_sqrt+0x1a8>)
 80068e6:	ec55 4b10 	vmov	r4, r5, d0
 80068ea:	43aa      	bics	r2, r5
 80068ec:	462b      	mov	r3, r5
 80068ee:	4621      	mov	r1, r4
 80068f0:	d110      	bne.n	8006914 <__ieee754_sqrt+0x34>
 80068f2:	4622      	mov	r2, r4
 80068f4:	4620      	mov	r0, r4
 80068f6:	4629      	mov	r1, r5
 80068f8:	f7f9 fe42 	bl	8000580 <__aeabi_dmul>
 80068fc:	4602      	mov	r2, r0
 80068fe:	460b      	mov	r3, r1
 8006900:	4620      	mov	r0, r4
 8006902:	4629      	mov	r1, r5
 8006904:	f7f9 fc86 	bl	8000214 <__adddf3>
 8006908:	4604      	mov	r4, r0
 800690a:	460d      	mov	r5, r1
 800690c:	ec45 4b10 	vmov	d0, r4, r5
 8006910:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006914:	2d00      	cmp	r5, #0
 8006916:	dc0e      	bgt.n	8006936 <__ieee754_sqrt+0x56>
 8006918:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800691c:	4322      	orrs	r2, r4
 800691e:	d0f5      	beq.n	800690c <__ieee754_sqrt+0x2c>
 8006920:	b19d      	cbz	r5, 800694a <__ieee754_sqrt+0x6a>
 8006922:	4622      	mov	r2, r4
 8006924:	4620      	mov	r0, r4
 8006926:	4629      	mov	r1, r5
 8006928:	f7f9 fc72 	bl	8000210 <__aeabi_dsub>
 800692c:	4602      	mov	r2, r0
 800692e:	460b      	mov	r3, r1
 8006930:	f7f9 ff50 	bl	80007d4 <__aeabi_ddiv>
 8006934:	e7e8      	b.n	8006908 <__ieee754_sqrt+0x28>
 8006936:	152a      	asrs	r2, r5, #20
 8006938:	d115      	bne.n	8006966 <__ieee754_sqrt+0x86>
 800693a:	2000      	movs	r0, #0
 800693c:	e009      	b.n	8006952 <__ieee754_sqrt+0x72>
 800693e:	0acb      	lsrs	r3, r1, #11
 8006940:	3a15      	subs	r2, #21
 8006942:	0549      	lsls	r1, r1, #21
 8006944:	2b00      	cmp	r3, #0
 8006946:	d0fa      	beq.n	800693e <__ieee754_sqrt+0x5e>
 8006948:	e7f7      	b.n	800693a <__ieee754_sqrt+0x5a>
 800694a:	462a      	mov	r2, r5
 800694c:	e7fa      	b.n	8006944 <__ieee754_sqrt+0x64>
 800694e:	005b      	lsls	r3, r3, #1
 8006950:	3001      	adds	r0, #1
 8006952:	02dc      	lsls	r4, r3, #11
 8006954:	d5fb      	bpl.n	800694e <__ieee754_sqrt+0x6e>
 8006956:	1e44      	subs	r4, r0, #1
 8006958:	1b12      	subs	r2, r2, r4
 800695a:	f1c0 0420 	rsb	r4, r0, #32
 800695e:	fa21 f404 	lsr.w	r4, r1, r4
 8006962:	4323      	orrs	r3, r4
 8006964:	4081      	lsls	r1, r0
 8006966:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800696a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800696e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006972:	07d2      	lsls	r2, r2, #31
 8006974:	bf5c      	itt	pl
 8006976:	005b      	lslpl	r3, r3, #1
 8006978:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800697c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006980:	bf58      	it	pl
 8006982:	0049      	lslpl	r1, r1, #1
 8006984:	2600      	movs	r6, #0
 8006986:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800698a:	106d      	asrs	r5, r5, #1
 800698c:	0049      	lsls	r1, r1, #1
 800698e:	2016      	movs	r0, #22
 8006990:	4632      	mov	r2, r6
 8006992:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8006996:	1917      	adds	r7, r2, r4
 8006998:	429f      	cmp	r7, r3
 800699a:	bfde      	ittt	le
 800699c:	193a      	addle	r2, r7, r4
 800699e:	1bdb      	suble	r3, r3, r7
 80069a0:	1936      	addle	r6, r6, r4
 80069a2:	0fcf      	lsrs	r7, r1, #31
 80069a4:	3801      	subs	r0, #1
 80069a6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80069aa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80069ae:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80069b2:	d1f0      	bne.n	8006996 <__ieee754_sqrt+0xb6>
 80069b4:	4604      	mov	r4, r0
 80069b6:	2720      	movs	r7, #32
 80069b8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80069bc:	429a      	cmp	r2, r3
 80069be:	eb00 0e0c 	add.w	lr, r0, ip
 80069c2:	db02      	blt.n	80069ca <__ieee754_sqrt+0xea>
 80069c4:	d113      	bne.n	80069ee <__ieee754_sqrt+0x10e>
 80069c6:	458e      	cmp	lr, r1
 80069c8:	d811      	bhi.n	80069ee <__ieee754_sqrt+0x10e>
 80069ca:	f1be 0f00 	cmp.w	lr, #0
 80069ce:	eb0e 000c 	add.w	r0, lr, ip
 80069d2:	da42      	bge.n	8006a5a <__ieee754_sqrt+0x17a>
 80069d4:	2800      	cmp	r0, #0
 80069d6:	db40      	blt.n	8006a5a <__ieee754_sqrt+0x17a>
 80069d8:	f102 0801 	add.w	r8, r2, #1
 80069dc:	1a9b      	subs	r3, r3, r2
 80069de:	458e      	cmp	lr, r1
 80069e0:	bf88      	it	hi
 80069e2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80069e6:	eba1 010e 	sub.w	r1, r1, lr
 80069ea:	4464      	add	r4, ip
 80069ec:	4642      	mov	r2, r8
 80069ee:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80069f2:	3f01      	subs	r7, #1
 80069f4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80069f8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80069fc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006a00:	d1dc      	bne.n	80069bc <__ieee754_sqrt+0xdc>
 8006a02:	4319      	orrs	r1, r3
 8006a04:	d01b      	beq.n	8006a3e <__ieee754_sqrt+0x15e>
 8006a06:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8006a8c <__ieee754_sqrt+0x1ac>
 8006a0a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8006a90 <__ieee754_sqrt+0x1b0>
 8006a0e:	e9da 0100 	ldrd	r0, r1, [sl]
 8006a12:	e9db 2300 	ldrd	r2, r3, [fp]
 8006a16:	f7f9 fbfb 	bl	8000210 <__aeabi_dsub>
 8006a1a:	e9da 8900 	ldrd	r8, r9, [sl]
 8006a1e:	4602      	mov	r2, r0
 8006a20:	460b      	mov	r3, r1
 8006a22:	4640      	mov	r0, r8
 8006a24:	4649      	mov	r1, r9
 8006a26:	f7fa f827 	bl	8000a78 <__aeabi_dcmple>
 8006a2a:	b140      	cbz	r0, 8006a3e <__ieee754_sqrt+0x15e>
 8006a2c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006a30:	e9da 0100 	ldrd	r0, r1, [sl]
 8006a34:	e9db 2300 	ldrd	r2, r3, [fp]
 8006a38:	d111      	bne.n	8006a5e <__ieee754_sqrt+0x17e>
 8006a3a:	3601      	adds	r6, #1
 8006a3c:	463c      	mov	r4, r7
 8006a3e:	1072      	asrs	r2, r6, #1
 8006a40:	0863      	lsrs	r3, r4, #1
 8006a42:	07f1      	lsls	r1, r6, #31
 8006a44:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8006a48:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8006a4c:	bf48      	it	mi
 8006a4e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8006a52:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8006a56:	4618      	mov	r0, r3
 8006a58:	e756      	b.n	8006908 <__ieee754_sqrt+0x28>
 8006a5a:	4690      	mov	r8, r2
 8006a5c:	e7be      	b.n	80069dc <__ieee754_sqrt+0xfc>
 8006a5e:	f7f9 fbd9 	bl	8000214 <__adddf3>
 8006a62:	e9da 8900 	ldrd	r8, r9, [sl]
 8006a66:	4602      	mov	r2, r0
 8006a68:	460b      	mov	r3, r1
 8006a6a:	4640      	mov	r0, r8
 8006a6c:	4649      	mov	r1, r9
 8006a6e:	f7f9 fff9 	bl	8000a64 <__aeabi_dcmplt>
 8006a72:	b120      	cbz	r0, 8006a7e <__ieee754_sqrt+0x19e>
 8006a74:	1ca0      	adds	r0, r4, #2
 8006a76:	bf08      	it	eq
 8006a78:	3601      	addeq	r6, #1
 8006a7a:	3402      	adds	r4, #2
 8006a7c:	e7df      	b.n	8006a3e <__ieee754_sqrt+0x15e>
 8006a7e:	1c63      	adds	r3, r4, #1
 8006a80:	f023 0401 	bic.w	r4, r3, #1
 8006a84:	e7db      	b.n	8006a3e <__ieee754_sqrt+0x15e>
 8006a86:	bf00      	nop
 8006a88:	7ff00000 	.word	0x7ff00000
 8006a8c:	20000068 	.word	0x20000068
 8006a90:	20000060 	.word	0x20000060
 8006a94:	00000000 	.word	0x00000000

08006a98 <__kernel_cos>:
 8006a98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a9c:	ec57 6b10 	vmov	r6, r7, d0
 8006aa0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8006aa4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8006aa8:	ed8d 1b00 	vstr	d1, [sp]
 8006aac:	d206      	bcs.n	8006abc <__kernel_cos+0x24>
 8006aae:	4630      	mov	r0, r6
 8006ab0:	4639      	mov	r1, r7
 8006ab2:	f7fa f815 	bl	8000ae0 <__aeabi_d2iz>
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	f000 8088 	beq.w	8006bcc <__kernel_cos+0x134>
 8006abc:	4632      	mov	r2, r6
 8006abe:	463b      	mov	r3, r7
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	4639      	mov	r1, r7
 8006ac4:	f7f9 fd5c 	bl	8000580 <__aeabi_dmul>
 8006ac8:	4b51      	ldr	r3, [pc, #324]	@ (8006c10 <__kernel_cos+0x178>)
 8006aca:	2200      	movs	r2, #0
 8006acc:	4604      	mov	r4, r0
 8006ace:	460d      	mov	r5, r1
 8006ad0:	f7f9 fd56 	bl	8000580 <__aeabi_dmul>
 8006ad4:	a340      	add	r3, pc, #256	@ (adr r3, 8006bd8 <__kernel_cos+0x140>)
 8006ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ada:	4682      	mov	sl, r0
 8006adc:	468b      	mov	fp, r1
 8006ade:	4620      	mov	r0, r4
 8006ae0:	4629      	mov	r1, r5
 8006ae2:	f7f9 fd4d 	bl	8000580 <__aeabi_dmul>
 8006ae6:	a33e      	add	r3, pc, #248	@ (adr r3, 8006be0 <__kernel_cos+0x148>)
 8006ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aec:	f7f9 fb92 	bl	8000214 <__adddf3>
 8006af0:	4622      	mov	r2, r4
 8006af2:	462b      	mov	r3, r5
 8006af4:	f7f9 fd44 	bl	8000580 <__aeabi_dmul>
 8006af8:	a33b      	add	r3, pc, #236	@ (adr r3, 8006be8 <__kernel_cos+0x150>)
 8006afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afe:	f7f9 fb87 	bl	8000210 <__aeabi_dsub>
 8006b02:	4622      	mov	r2, r4
 8006b04:	462b      	mov	r3, r5
 8006b06:	f7f9 fd3b 	bl	8000580 <__aeabi_dmul>
 8006b0a:	a339      	add	r3, pc, #228	@ (adr r3, 8006bf0 <__kernel_cos+0x158>)
 8006b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b10:	f7f9 fb80 	bl	8000214 <__adddf3>
 8006b14:	4622      	mov	r2, r4
 8006b16:	462b      	mov	r3, r5
 8006b18:	f7f9 fd32 	bl	8000580 <__aeabi_dmul>
 8006b1c:	a336      	add	r3, pc, #216	@ (adr r3, 8006bf8 <__kernel_cos+0x160>)
 8006b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b22:	f7f9 fb75 	bl	8000210 <__aeabi_dsub>
 8006b26:	4622      	mov	r2, r4
 8006b28:	462b      	mov	r3, r5
 8006b2a:	f7f9 fd29 	bl	8000580 <__aeabi_dmul>
 8006b2e:	a334      	add	r3, pc, #208	@ (adr r3, 8006c00 <__kernel_cos+0x168>)
 8006b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b34:	f7f9 fb6e 	bl	8000214 <__adddf3>
 8006b38:	4622      	mov	r2, r4
 8006b3a:	462b      	mov	r3, r5
 8006b3c:	f7f9 fd20 	bl	8000580 <__aeabi_dmul>
 8006b40:	4622      	mov	r2, r4
 8006b42:	462b      	mov	r3, r5
 8006b44:	f7f9 fd1c 	bl	8000580 <__aeabi_dmul>
 8006b48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b4c:	4604      	mov	r4, r0
 8006b4e:	460d      	mov	r5, r1
 8006b50:	4630      	mov	r0, r6
 8006b52:	4639      	mov	r1, r7
 8006b54:	f7f9 fd14 	bl	8000580 <__aeabi_dmul>
 8006b58:	460b      	mov	r3, r1
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	4629      	mov	r1, r5
 8006b5e:	4620      	mov	r0, r4
 8006b60:	f7f9 fb56 	bl	8000210 <__aeabi_dsub>
 8006b64:	4b2b      	ldr	r3, [pc, #172]	@ (8006c14 <__kernel_cos+0x17c>)
 8006b66:	4598      	cmp	r8, r3
 8006b68:	4606      	mov	r6, r0
 8006b6a:	460f      	mov	r7, r1
 8006b6c:	d810      	bhi.n	8006b90 <__kernel_cos+0xf8>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	460b      	mov	r3, r1
 8006b72:	4650      	mov	r0, sl
 8006b74:	4659      	mov	r1, fp
 8006b76:	f7f9 fb4b 	bl	8000210 <__aeabi_dsub>
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	4926      	ldr	r1, [pc, #152]	@ (8006c18 <__kernel_cos+0x180>)
 8006b7e:	4602      	mov	r2, r0
 8006b80:	2000      	movs	r0, #0
 8006b82:	f7f9 fb45 	bl	8000210 <__aeabi_dsub>
 8006b86:	ec41 0b10 	vmov	d0, r0, r1
 8006b8a:	b003      	add	sp, #12
 8006b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b90:	4b22      	ldr	r3, [pc, #136]	@ (8006c1c <__kernel_cos+0x184>)
 8006b92:	4921      	ldr	r1, [pc, #132]	@ (8006c18 <__kernel_cos+0x180>)
 8006b94:	4598      	cmp	r8, r3
 8006b96:	bf8c      	ite	hi
 8006b98:	4d21      	ldrhi	r5, [pc, #132]	@ (8006c20 <__kernel_cos+0x188>)
 8006b9a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8006b9e:	2400      	movs	r4, #0
 8006ba0:	4622      	mov	r2, r4
 8006ba2:	462b      	mov	r3, r5
 8006ba4:	2000      	movs	r0, #0
 8006ba6:	f7f9 fb33 	bl	8000210 <__aeabi_dsub>
 8006baa:	4622      	mov	r2, r4
 8006bac:	4680      	mov	r8, r0
 8006bae:	4689      	mov	r9, r1
 8006bb0:	462b      	mov	r3, r5
 8006bb2:	4650      	mov	r0, sl
 8006bb4:	4659      	mov	r1, fp
 8006bb6:	f7f9 fb2b 	bl	8000210 <__aeabi_dsub>
 8006bba:	4632      	mov	r2, r6
 8006bbc:	463b      	mov	r3, r7
 8006bbe:	f7f9 fb27 	bl	8000210 <__aeabi_dsub>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	4640      	mov	r0, r8
 8006bc8:	4649      	mov	r1, r9
 8006bca:	e7da      	b.n	8006b82 <__kernel_cos+0xea>
 8006bcc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8006c08 <__kernel_cos+0x170>
 8006bd0:	e7db      	b.n	8006b8a <__kernel_cos+0xf2>
 8006bd2:	bf00      	nop
 8006bd4:	f3af 8000 	nop.w
 8006bd8:	be8838d4 	.word	0xbe8838d4
 8006bdc:	bda8fae9 	.word	0xbda8fae9
 8006be0:	bdb4b1c4 	.word	0xbdb4b1c4
 8006be4:	3e21ee9e 	.word	0x3e21ee9e
 8006be8:	809c52ad 	.word	0x809c52ad
 8006bec:	3e927e4f 	.word	0x3e927e4f
 8006bf0:	19cb1590 	.word	0x19cb1590
 8006bf4:	3efa01a0 	.word	0x3efa01a0
 8006bf8:	16c15177 	.word	0x16c15177
 8006bfc:	3f56c16c 	.word	0x3f56c16c
 8006c00:	5555554c 	.word	0x5555554c
 8006c04:	3fa55555 	.word	0x3fa55555
 8006c08:	00000000 	.word	0x00000000
 8006c0c:	3ff00000 	.word	0x3ff00000
 8006c10:	3fe00000 	.word	0x3fe00000
 8006c14:	3fd33332 	.word	0x3fd33332
 8006c18:	3ff00000 	.word	0x3ff00000
 8006c1c:	3fe90000 	.word	0x3fe90000
 8006c20:	3fd20000 	.word	0x3fd20000
 8006c24:	00000000 	.word	0x00000000

08006c28 <__kernel_sin>:
 8006c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c2c:	ec55 4b10 	vmov	r4, r5, d0
 8006c30:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006c34:	b085      	sub	sp, #20
 8006c36:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8006c3a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8006c3e:	4680      	mov	r8, r0
 8006c40:	d205      	bcs.n	8006c4e <__kernel_sin+0x26>
 8006c42:	4620      	mov	r0, r4
 8006c44:	4629      	mov	r1, r5
 8006c46:	f7f9 ff4b 	bl	8000ae0 <__aeabi_d2iz>
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	d052      	beq.n	8006cf4 <__kernel_sin+0xcc>
 8006c4e:	4622      	mov	r2, r4
 8006c50:	462b      	mov	r3, r5
 8006c52:	4620      	mov	r0, r4
 8006c54:	4629      	mov	r1, r5
 8006c56:	f7f9 fc93 	bl	8000580 <__aeabi_dmul>
 8006c5a:	4682      	mov	sl, r0
 8006c5c:	468b      	mov	fp, r1
 8006c5e:	4602      	mov	r2, r0
 8006c60:	460b      	mov	r3, r1
 8006c62:	4620      	mov	r0, r4
 8006c64:	4629      	mov	r1, r5
 8006c66:	f7f9 fc8b 	bl	8000580 <__aeabi_dmul>
 8006c6a:	a342      	add	r3, pc, #264	@ (adr r3, 8006d74 <__kernel_sin+0x14c>)
 8006c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c70:	e9cd 0100 	strd	r0, r1, [sp]
 8006c74:	4650      	mov	r0, sl
 8006c76:	4659      	mov	r1, fp
 8006c78:	f7f9 fc82 	bl	8000580 <__aeabi_dmul>
 8006c7c:	a33f      	add	r3, pc, #252	@ (adr r3, 8006d7c <__kernel_sin+0x154>)
 8006c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c82:	f7f9 fac5 	bl	8000210 <__aeabi_dsub>
 8006c86:	4652      	mov	r2, sl
 8006c88:	465b      	mov	r3, fp
 8006c8a:	f7f9 fc79 	bl	8000580 <__aeabi_dmul>
 8006c8e:	a33d      	add	r3, pc, #244	@ (adr r3, 8006d84 <__kernel_sin+0x15c>)
 8006c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c94:	f7f9 fabe 	bl	8000214 <__adddf3>
 8006c98:	4652      	mov	r2, sl
 8006c9a:	465b      	mov	r3, fp
 8006c9c:	f7f9 fc70 	bl	8000580 <__aeabi_dmul>
 8006ca0:	a33a      	add	r3, pc, #232	@ (adr r3, 8006d8c <__kernel_sin+0x164>)
 8006ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca6:	f7f9 fab3 	bl	8000210 <__aeabi_dsub>
 8006caa:	4652      	mov	r2, sl
 8006cac:	465b      	mov	r3, fp
 8006cae:	f7f9 fc67 	bl	8000580 <__aeabi_dmul>
 8006cb2:	a338      	add	r3, pc, #224	@ (adr r3, 8006d94 <__kernel_sin+0x16c>)
 8006cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb8:	f7f9 faac 	bl	8000214 <__adddf3>
 8006cbc:	4606      	mov	r6, r0
 8006cbe:	460f      	mov	r7, r1
 8006cc0:	f1b8 0f00 	cmp.w	r8, #0
 8006cc4:	d11b      	bne.n	8006cfe <__kernel_sin+0xd6>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	460b      	mov	r3, r1
 8006cca:	4650      	mov	r0, sl
 8006ccc:	4659      	mov	r1, fp
 8006cce:	f7f9 fc57 	bl	8000580 <__aeabi_dmul>
 8006cd2:	a325      	add	r3, pc, #148	@ (adr r3, 8006d68 <__kernel_sin+0x140>)
 8006cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd8:	f7f9 fa9a 	bl	8000210 <__aeabi_dsub>
 8006cdc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ce0:	f7f9 fc4e 	bl	8000580 <__aeabi_dmul>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	4620      	mov	r0, r4
 8006cea:	4629      	mov	r1, r5
 8006cec:	f7f9 fa92 	bl	8000214 <__adddf3>
 8006cf0:	4604      	mov	r4, r0
 8006cf2:	460d      	mov	r5, r1
 8006cf4:	ec45 4b10 	vmov	d0, r4, r5
 8006cf8:	b005      	add	sp, #20
 8006cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d02:	4b1b      	ldr	r3, [pc, #108]	@ (8006d70 <__kernel_sin+0x148>)
 8006d04:	2200      	movs	r2, #0
 8006d06:	f7f9 fc3b 	bl	8000580 <__aeabi_dmul>
 8006d0a:	4632      	mov	r2, r6
 8006d0c:	4680      	mov	r8, r0
 8006d0e:	4689      	mov	r9, r1
 8006d10:	463b      	mov	r3, r7
 8006d12:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d16:	f7f9 fc33 	bl	8000580 <__aeabi_dmul>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	4640      	mov	r0, r8
 8006d20:	4649      	mov	r1, r9
 8006d22:	f7f9 fa75 	bl	8000210 <__aeabi_dsub>
 8006d26:	4652      	mov	r2, sl
 8006d28:	465b      	mov	r3, fp
 8006d2a:	f7f9 fc29 	bl	8000580 <__aeabi_dmul>
 8006d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d32:	f7f9 fa6d 	bl	8000210 <__aeabi_dsub>
 8006d36:	a30c      	add	r3, pc, #48	@ (adr r3, 8006d68 <__kernel_sin+0x140>)
 8006d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3c:	4606      	mov	r6, r0
 8006d3e:	460f      	mov	r7, r1
 8006d40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d44:	f7f9 fc1c 	bl	8000580 <__aeabi_dmul>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	4630      	mov	r0, r6
 8006d4e:	4639      	mov	r1, r7
 8006d50:	f7f9 fa60 	bl	8000214 <__adddf3>
 8006d54:	4602      	mov	r2, r0
 8006d56:	460b      	mov	r3, r1
 8006d58:	4620      	mov	r0, r4
 8006d5a:	4629      	mov	r1, r5
 8006d5c:	f7f9 fa58 	bl	8000210 <__aeabi_dsub>
 8006d60:	e7c6      	b.n	8006cf0 <__kernel_sin+0xc8>
 8006d62:	bf00      	nop
 8006d64:	f3af 8000 	nop.w
 8006d68:	55555549 	.word	0x55555549
 8006d6c:	3fc55555 	.word	0x3fc55555
 8006d70:	3fe00000 	.word	0x3fe00000
 8006d74:	5acfd57c 	.word	0x5acfd57c
 8006d78:	3de5d93a 	.word	0x3de5d93a
 8006d7c:	8a2b9ceb 	.word	0x8a2b9ceb
 8006d80:	3e5ae5e6 	.word	0x3e5ae5e6
 8006d84:	57b1fe7d 	.word	0x57b1fe7d
 8006d88:	3ec71de3 	.word	0x3ec71de3
 8006d8c:	19c161d5 	.word	0x19c161d5
 8006d90:	3f2a01a0 	.word	0x3f2a01a0
 8006d94:	1110f8a6 	.word	0x1110f8a6
 8006d98:	3f811111 	.word	0x3f811111
 8006d9c:	00000000 	.word	0x00000000

08006da0 <__ieee754_rem_pio2>:
 8006da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da4:	ec57 6b10 	vmov	r6, r7, d0
 8006da8:	4bc5      	ldr	r3, [pc, #788]	@ (80070c0 <__ieee754_rem_pio2+0x320>)
 8006daa:	b08d      	sub	sp, #52	@ 0x34
 8006dac:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8006db0:	4598      	cmp	r8, r3
 8006db2:	4604      	mov	r4, r0
 8006db4:	9704      	str	r7, [sp, #16]
 8006db6:	d807      	bhi.n	8006dc8 <__ieee754_rem_pio2+0x28>
 8006db8:	2200      	movs	r2, #0
 8006dba:	2300      	movs	r3, #0
 8006dbc:	ed80 0b00 	vstr	d0, [r0]
 8006dc0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006dc4:	2500      	movs	r5, #0
 8006dc6:	e028      	b.n	8006e1a <__ieee754_rem_pio2+0x7a>
 8006dc8:	4bbe      	ldr	r3, [pc, #760]	@ (80070c4 <__ieee754_rem_pio2+0x324>)
 8006dca:	4598      	cmp	r8, r3
 8006dcc:	d878      	bhi.n	8006ec0 <__ieee754_rem_pio2+0x120>
 8006dce:	9b04      	ldr	r3, [sp, #16]
 8006dd0:	4dbd      	ldr	r5, [pc, #756]	@ (80070c8 <__ieee754_rem_pio2+0x328>)
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	4630      	mov	r0, r6
 8006dd6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8007088 <__ieee754_rem_pio2+0x2e8>)
 8006dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ddc:	4639      	mov	r1, r7
 8006dde:	dd38      	ble.n	8006e52 <__ieee754_rem_pio2+0xb2>
 8006de0:	f7f9 fa16 	bl	8000210 <__aeabi_dsub>
 8006de4:	45a8      	cmp	r8, r5
 8006de6:	4606      	mov	r6, r0
 8006de8:	460f      	mov	r7, r1
 8006dea:	d01a      	beq.n	8006e22 <__ieee754_rem_pio2+0x82>
 8006dec:	a3a8      	add	r3, pc, #672	@ (adr r3, 8007090 <__ieee754_rem_pio2+0x2f0>)
 8006dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df2:	f7f9 fa0d 	bl	8000210 <__aeabi_dsub>
 8006df6:	4602      	mov	r2, r0
 8006df8:	460b      	mov	r3, r1
 8006dfa:	4680      	mov	r8, r0
 8006dfc:	4689      	mov	r9, r1
 8006dfe:	4630      	mov	r0, r6
 8006e00:	4639      	mov	r1, r7
 8006e02:	f7f9 fa05 	bl	8000210 <__aeabi_dsub>
 8006e06:	a3a2      	add	r3, pc, #648	@ (adr r3, 8007090 <__ieee754_rem_pio2+0x2f0>)
 8006e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0c:	f7f9 fa00 	bl	8000210 <__aeabi_dsub>
 8006e10:	e9c4 8900 	strd	r8, r9, [r4]
 8006e14:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006e18:	2501      	movs	r5, #1
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	b00d      	add	sp, #52	@ 0x34
 8006e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e22:	a39d      	add	r3, pc, #628	@ (adr r3, 8007098 <__ieee754_rem_pio2+0x2f8>)
 8006e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e28:	f7f9 f9f2 	bl	8000210 <__aeabi_dsub>
 8006e2c:	a39c      	add	r3, pc, #624	@ (adr r3, 80070a0 <__ieee754_rem_pio2+0x300>)
 8006e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e32:	4606      	mov	r6, r0
 8006e34:	460f      	mov	r7, r1
 8006e36:	f7f9 f9eb 	bl	8000210 <__aeabi_dsub>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	4680      	mov	r8, r0
 8006e40:	4689      	mov	r9, r1
 8006e42:	4630      	mov	r0, r6
 8006e44:	4639      	mov	r1, r7
 8006e46:	f7f9 f9e3 	bl	8000210 <__aeabi_dsub>
 8006e4a:	a395      	add	r3, pc, #596	@ (adr r3, 80070a0 <__ieee754_rem_pio2+0x300>)
 8006e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e50:	e7dc      	b.n	8006e0c <__ieee754_rem_pio2+0x6c>
 8006e52:	f7f9 f9df 	bl	8000214 <__adddf3>
 8006e56:	45a8      	cmp	r8, r5
 8006e58:	4606      	mov	r6, r0
 8006e5a:	460f      	mov	r7, r1
 8006e5c:	d018      	beq.n	8006e90 <__ieee754_rem_pio2+0xf0>
 8006e5e:	a38c      	add	r3, pc, #560	@ (adr r3, 8007090 <__ieee754_rem_pio2+0x2f0>)
 8006e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e64:	f7f9 f9d6 	bl	8000214 <__adddf3>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	4680      	mov	r8, r0
 8006e6e:	4689      	mov	r9, r1
 8006e70:	4630      	mov	r0, r6
 8006e72:	4639      	mov	r1, r7
 8006e74:	f7f9 f9cc 	bl	8000210 <__aeabi_dsub>
 8006e78:	a385      	add	r3, pc, #532	@ (adr r3, 8007090 <__ieee754_rem_pio2+0x2f0>)
 8006e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7e:	f7f9 f9c9 	bl	8000214 <__adddf3>
 8006e82:	f04f 35ff 	mov.w	r5, #4294967295
 8006e86:	e9c4 8900 	strd	r8, r9, [r4]
 8006e8a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006e8e:	e7c4      	b.n	8006e1a <__ieee754_rem_pio2+0x7a>
 8006e90:	a381      	add	r3, pc, #516	@ (adr r3, 8007098 <__ieee754_rem_pio2+0x2f8>)
 8006e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e96:	f7f9 f9bd 	bl	8000214 <__adddf3>
 8006e9a:	a381      	add	r3, pc, #516	@ (adr r3, 80070a0 <__ieee754_rem_pio2+0x300>)
 8006e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea0:	4606      	mov	r6, r0
 8006ea2:	460f      	mov	r7, r1
 8006ea4:	f7f9 f9b6 	bl	8000214 <__adddf3>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	460b      	mov	r3, r1
 8006eac:	4680      	mov	r8, r0
 8006eae:	4689      	mov	r9, r1
 8006eb0:	4630      	mov	r0, r6
 8006eb2:	4639      	mov	r1, r7
 8006eb4:	f7f9 f9ac 	bl	8000210 <__aeabi_dsub>
 8006eb8:	a379      	add	r3, pc, #484	@ (adr r3, 80070a0 <__ieee754_rem_pio2+0x300>)
 8006eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebe:	e7de      	b.n	8006e7e <__ieee754_rem_pio2+0xde>
 8006ec0:	4b82      	ldr	r3, [pc, #520]	@ (80070cc <__ieee754_rem_pio2+0x32c>)
 8006ec2:	4598      	cmp	r8, r3
 8006ec4:	f200 80d1 	bhi.w	800706a <__ieee754_rem_pio2+0x2ca>
 8006ec8:	f7ff fcae 	bl	8006828 <fabs>
 8006ecc:	ec57 6b10 	vmov	r6, r7, d0
 8006ed0:	a375      	add	r3, pc, #468	@ (adr r3, 80070a8 <__ieee754_rem_pio2+0x308>)
 8006ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed6:	4630      	mov	r0, r6
 8006ed8:	4639      	mov	r1, r7
 8006eda:	f7f9 fb51 	bl	8000580 <__aeabi_dmul>
 8006ede:	4b7c      	ldr	r3, [pc, #496]	@ (80070d0 <__ieee754_rem_pio2+0x330>)
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f7f9 f997 	bl	8000214 <__adddf3>
 8006ee6:	f7f9 fdfb 	bl	8000ae0 <__aeabi_d2iz>
 8006eea:	4605      	mov	r5, r0
 8006eec:	f7f9 fade 	bl	80004ac <__aeabi_i2d>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ef8:	a363      	add	r3, pc, #396	@ (adr r3, 8007088 <__ieee754_rem_pio2+0x2e8>)
 8006efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efe:	f7f9 fb3f 	bl	8000580 <__aeabi_dmul>
 8006f02:	4602      	mov	r2, r0
 8006f04:	460b      	mov	r3, r1
 8006f06:	4630      	mov	r0, r6
 8006f08:	4639      	mov	r1, r7
 8006f0a:	f7f9 f981 	bl	8000210 <__aeabi_dsub>
 8006f0e:	a360      	add	r3, pc, #384	@ (adr r3, 8007090 <__ieee754_rem_pio2+0x2f0>)
 8006f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f14:	4682      	mov	sl, r0
 8006f16:	468b      	mov	fp, r1
 8006f18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f1c:	f7f9 fb30 	bl	8000580 <__aeabi_dmul>
 8006f20:	2d1f      	cmp	r5, #31
 8006f22:	4606      	mov	r6, r0
 8006f24:	460f      	mov	r7, r1
 8006f26:	dc0c      	bgt.n	8006f42 <__ieee754_rem_pio2+0x1a2>
 8006f28:	4b6a      	ldr	r3, [pc, #424]	@ (80070d4 <__ieee754_rem_pio2+0x334>)
 8006f2a:	1e6a      	subs	r2, r5, #1
 8006f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f30:	4543      	cmp	r3, r8
 8006f32:	d006      	beq.n	8006f42 <__ieee754_rem_pio2+0x1a2>
 8006f34:	4632      	mov	r2, r6
 8006f36:	463b      	mov	r3, r7
 8006f38:	4650      	mov	r0, sl
 8006f3a:	4659      	mov	r1, fp
 8006f3c:	f7f9 f968 	bl	8000210 <__aeabi_dsub>
 8006f40:	e00e      	b.n	8006f60 <__ieee754_rem_pio2+0x1c0>
 8006f42:	463b      	mov	r3, r7
 8006f44:	4632      	mov	r2, r6
 8006f46:	4650      	mov	r0, sl
 8006f48:	4659      	mov	r1, fp
 8006f4a:	f7f9 f961 	bl	8000210 <__aeabi_dsub>
 8006f4e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006f52:	9305      	str	r3, [sp, #20]
 8006f54:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006f58:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8006f5c:	2b10      	cmp	r3, #16
 8006f5e:	dc02      	bgt.n	8006f66 <__ieee754_rem_pio2+0x1c6>
 8006f60:	e9c4 0100 	strd	r0, r1, [r4]
 8006f64:	e039      	b.n	8006fda <__ieee754_rem_pio2+0x23a>
 8006f66:	a34c      	add	r3, pc, #304	@ (adr r3, 8007098 <__ieee754_rem_pio2+0x2f8>)
 8006f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f70:	f7f9 fb06 	bl	8000580 <__aeabi_dmul>
 8006f74:	4606      	mov	r6, r0
 8006f76:	460f      	mov	r7, r1
 8006f78:	4602      	mov	r2, r0
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	4650      	mov	r0, sl
 8006f7e:	4659      	mov	r1, fp
 8006f80:	f7f9 f946 	bl	8000210 <__aeabi_dsub>
 8006f84:	4602      	mov	r2, r0
 8006f86:	460b      	mov	r3, r1
 8006f88:	4680      	mov	r8, r0
 8006f8a:	4689      	mov	r9, r1
 8006f8c:	4650      	mov	r0, sl
 8006f8e:	4659      	mov	r1, fp
 8006f90:	f7f9 f93e 	bl	8000210 <__aeabi_dsub>
 8006f94:	4632      	mov	r2, r6
 8006f96:	463b      	mov	r3, r7
 8006f98:	f7f9 f93a 	bl	8000210 <__aeabi_dsub>
 8006f9c:	a340      	add	r3, pc, #256	@ (adr r3, 80070a0 <__ieee754_rem_pio2+0x300>)
 8006f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa2:	4606      	mov	r6, r0
 8006fa4:	460f      	mov	r7, r1
 8006fa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006faa:	f7f9 fae9 	bl	8000580 <__aeabi_dmul>
 8006fae:	4632      	mov	r2, r6
 8006fb0:	463b      	mov	r3, r7
 8006fb2:	f7f9 f92d 	bl	8000210 <__aeabi_dsub>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	460b      	mov	r3, r1
 8006fba:	4606      	mov	r6, r0
 8006fbc:	460f      	mov	r7, r1
 8006fbe:	4640      	mov	r0, r8
 8006fc0:	4649      	mov	r1, r9
 8006fc2:	f7f9 f925 	bl	8000210 <__aeabi_dsub>
 8006fc6:	9a05      	ldr	r2, [sp, #20]
 8006fc8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	2b31      	cmp	r3, #49	@ 0x31
 8006fd0:	dc20      	bgt.n	8007014 <__ieee754_rem_pio2+0x274>
 8006fd2:	e9c4 0100 	strd	r0, r1, [r4]
 8006fd6:	46c2      	mov	sl, r8
 8006fd8:	46cb      	mov	fp, r9
 8006fda:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006fde:	4650      	mov	r0, sl
 8006fe0:	4642      	mov	r2, r8
 8006fe2:	464b      	mov	r3, r9
 8006fe4:	4659      	mov	r1, fp
 8006fe6:	f7f9 f913 	bl	8000210 <__aeabi_dsub>
 8006fea:	463b      	mov	r3, r7
 8006fec:	4632      	mov	r2, r6
 8006fee:	f7f9 f90f 	bl	8000210 <__aeabi_dsub>
 8006ff2:	9b04      	ldr	r3, [sp, #16]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006ffa:	f6bf af0e 	bge.w	8006e1a <__ieee754_rem_pio2+0x7a>
 8006ffe:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8007002:	6063      	str	r3, [r4, #4]
 8007004:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007008:	f8c4 8000 	str.w	r8, [r4]
 800700c:	60a0      	str	r0, [r4, #8]
 800700e:	60e3      	str	r3, [r4, #12]
 8007010:	426d      	negs	r5, r5
 8007012:	e702      	b.n	8006e1a <__ieee754_rem_pio2+0x7a>
 8007014:	a326      	add	r3, pc, #152	@ (adr r3, 80070b0 <__ieee754_rem_pio2+0x310>)
 8007016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800701e:	f7f9 faaf 	bl	8000580 <__aeabi_dmul>
 8007022:	4606      	mov	r6, r0
 8007024:	460f      	mov	r7, r1
 8007026:	4602      	mov	r2, r0
 8007028:	460b      	mov	r3, r1
 800702a:	4640      	mov	r0, r8
 800702c:	4649      	mov	r1, r9
 800702e:	f7f9 f8ef 	bl	8000210 <__aeabi_dsub>
 8007032:	4602      	mov	r2, r0
 8007034:	460b      	mov	r3, r1
 8007036:	4682      	mov	sl, r0
 8007038:	468b      	mov	fp, r1
 800703a:	4640      	mov	r0, r8
 800703c:	4649      	mov	r1, r9
 800703e:	f7f9 f8e7 	bl	8000210 <__aeabi_dsub>
 8007042:	4632      	mov	r2, r6
 8007044:	463b      	mov	r3, r7
 8007046:	f7f9 f8e3 	bl	8000210 <__aeabi_dsub>
 800704a:	a31b      	add	r3, pc, #108	@ (adr r3, 80070b8 <__ieee754_rem_pio2+0x318>)
 800704c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007050:	4606      	mov	r6, r0
 8007052:	460f      	mov	r7, r1
 8007054:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007058:	f7f9 fa92 	bl	8000580 <__aeabi_dmul>
 800705c:	4632      	mov	r2, r6
 800705e:	463b      	mov	r3, r7
 8007060:	f7f9 f8d6 	bl	8000210 <__aeabi_dsub>
 8007064:	4606      	mov	r6, r0
 8007066:	460f      	mov	r7, r1
 8007068:	e764      	b.n	8006f34 <__ieee754_rem_pio2+0x194>
 800706a:	4b1b      	ldr	r3, [pc, #108]	@ (80070d8 <__ieee754_rem_pio2+0x338>)
 800706c:	4598      	cmp	r8, r3
 800706e:	d935      	bls.n	80070dc <__ieee754_rem_pio2+0x33c>
 8007070:	4632      	mov	r2, r6
 8007072:	463b      	mov	r3, r7
 8007074:	4630      	mov	r0, r6
 8007076:	4639      	mov	r1, r7
 8007078:	f7f9 f8ca 	bl	8000210 <__aeabi_dsub>
 800707c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007080:	e9c4 0100 	strd	r0, r1, [r4]
 8007084:	e69e      	b.n	8006dc4 <__ieee754_rem_pio2+0x24>
 8007086:	bf00      	nop
 8007088:	54400000 	.word	0x54400000
 800708c:	3ff921fb 	.word	0x3ff921fb
 8007090:	1a626331 	.word	0x1a626331
 8007094:	3dd0b461 	.word	0x3dd0b461
 8007098:	1a600000 	.word	0x1a600000
 800709c:	3dd0b461 	.word	0x3dd0b461
 80070a0:	2e037073 	.word	0x2e037073
 80070a4:	3ba3198a 	.word	0x3ba3198a
 80070a8:	6dc9c883 	.word	0x6dc9c883
 80070ac:	3fe45f30 	.word	0x3fe45f30
 80070b0:	2e000000 	.word	0x2e000000
 80070b4:	3ba3198a 	.word	0x3ba3198a
 80070b8:	252049c1 	.word	0x252049c1
 80070bc:	397b839a 	.word	0x397b839a
 80070c0:	3fe921fb 	.word	0x3fe921fb
 80070c4:	4002d97b 	.word	0x4002d97b
 80070c8:	3ff921fb 	.word	0x3ff921fb
 80070cc:	413921fb 	.word	0x413921fb
 80070d0:	3fe00000 	.word	0x3fe00000
 80070d4:	08007ab0 	.word	0x08007ab0
 80070d8:	7fefffff 	.word	0x7fefffff
 80070dc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80070e0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80070e4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80070e8:	4630      	mov	r0, r6
 80070ea:	460f      	mov	r7, r1
 80070ec:	f7f9 fcf8 	bl	8000ae0 <__aeabi_d2iz>
 80070f0:	f7f9 f9dc 	bl	80004ac <__aeabi_i2d>
 80070f4:	4602      	mov	r2, r0
 80070f6:	460b      	mov	r3, r1
 80070f8:	4630      	mov	r0, r6
 80070fa:	4639      	mov	r1, r7
 80070fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007100:	f7f9 f886 	bl	8000210 <__aeabi_dsub>
 8007104:	4b22      	ldr	r3, [pc, #136]	@ (8007190 <__ieee754_rem_pio2+0x3f0>)
 8007106:	2200      	movs	r2, #0
 8007108:	f7f9 fa3a 	bl	8000580 <__aeabi_dmul>
 800710c:	460f      	mov	r7, r1
 800710e:	4606      	mov	r6, r0
 8007110:	f7f9 fce6 	bl	8000ae0 <__aeabi_d2iz>
 8007114:	f7f9 f9ca 	bl	80004ac <__aeabi_i2d>
 8007118:	4602      	mov	r2, r0
 800711a:	460b      	mov	r3, r1
 800711c:	4630      	mov	r0, r6
 800711e:	4639      	mov	r1, r7
 8007120:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007124:	f7f9 f874 	bl	8000210 <__aeabi_dsub>
 8007128:	4b19      	ldr	r3, [pc, #100]	@ (8007190 <__ieee754_rem_pio2+0x3f0>)
 800712a:	2200      	movs	r2, #0
 800712c:	f7f9 fa28 	bl	8000580 <__aeabi_dmul>
 8007130:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8007134:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8007138:	f04f 0803 	mov.w	r8, #3
 800713c:	2600      	movs	r6, #0
 800713e:	2700      	movs	r7, #0
 8007140:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8007144:	4632      	mov	r2, r6
 8007146:	463b      	mov	r3, r7
 8007148:	46c2      	mov	sl, r8
 800714a:	f108 38ff 	add.w	r8, r8, #4294967295
 800714e:	f7f9 fc7f 	bl	8000a50 <__aeabi_dcmpeq>
 8007152:	2800      	cmp	r0, #0
 8007154:	d1f4      	bne.n	8007140 <__ieee754_rem_pio2+0x3a0>
 8007156:	4b0f      	ldr	r3, [pc, #60]	@ (8007194 <__ieee754_rem_pio2+0x3f4>)
 8007158:	9301      	str	r3, [sp, #4]
 800715a:	2302      	movs	r3, #2
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	462a      	mov	r2, r5
 8007160:	4653      	mov	r3, sl
 8007162:	4621      	mov	r1, r4
 8007164:	a806      	add	r0, sp, #24
 8007166:	f000 f817 	bl	8007198 <__kernel_rem_pio2>
 800716a:	9b04      	ldr	r3, [sp, #16]
 800716c:	2b00      	cmp	r3, #0
 800716e:	4605      	mov	r5, r0
 8007170:	f6bf ae53 	bge.w	8006e1a <__ieee754_rem_pio2+0x7a>
 8007174:	e9d4 2100 	ldrd	r2, r1, [r4]
 8007178:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800717c:	e9c4 2300 	strd	r2, r3, [r4]
 8007180:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8007184:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007188:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800718c:	e740      	b.n	8007010 <__ieee754_rem_pio2+0x270>
 800718e:	bf00      	nop
 8007190:	41700000 	.word	0x41700000
 8007194:	08007b30 	.word	0x08007b30

08007198 <__kernel_rem_pio2>:
 8007198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800719c:	ed2d 8b02 	vpush	{d8}
 80071a0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80071a4:	f112 0f14 	cmn.w	r2, #20
 80071a8:	9306      	str	r3, [sp, #24]
 80071aa:	9104      	str	r1, [sp, #16]
 80071ac:	4bbe      	ldr	r3, [pc, #760]	@ (80074a8 <__kernel_rem_pio2+0x310>)
 80071ae:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80071b0:	9008      	str	r0, [sp, #32]
 80071b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	9b06      	ldr	r3, [sp, #24]
 80071ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80071be:	bfa8      	it	ge
 80071c0:	1ed4      	subge	r4, r2, #3
 80071c2:	9305      	str	r3, [sp, #20]
 80071c4:	bfb2      	itee	lt
 80071c6:	2400      	movlt	r4, #0
 80071c8:	2318      	movge	r3, #24
 80071ca:	fb94 f4f3 	sdivge	r4, r4, r3
 80071ce:	f06f 0317 	mvn.w	r3, #23
 80071d2:	fb04 3303 	mla	r3, r4, r3, r3
 80071d6:	eb03 0b02 	add.w	fp, r3, r2
 80071da:	9b00      	ldr	r3, [sp, #0]
 80071dc:	9a05      	ldr	r2, [sp, #20]
 80071de:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8007498 <__kernel_rem_pio2+0x300>
 80071e2:	eb03 0802 	add.w	r8, r3, r2
 80071e6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80071e8:	1aa7      	subs	r7, r4, r2
 80071ea:	ae20      	add	r6, sp, #128	@ 0x80
 80071ec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80071f0:	2500      	movs	r5, #0
 80071f2:	4545      	cmp	r5, r8
 80071f4:	dd13      	ble.n	800721e <__kernel_rem_pio2+0x86>
 80071f6:	9b06      	ldr	r3, [sp, #24]
 80071f8:	aa20      	add	r2, sp, #128	@ 0x80
 80071fa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80071fe:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8007202:	f04f 0800 	mov.w	r8, #0
 8007206:	9b00      	ldr	r3, [sp, #0]
 8007208:	4598      	cmp	r8, r3
 800720a:	dc31      	bgt.n	8007270 <__kernel_rem_pio2+0xd8>
 800720c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8007498 <__kernel_rem_pio2+0x300>
 8007210:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007214:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007218:	462f      	mov	r7, r5
 800721a:	2600      	movs	r6, #0
 800721c:	e01b      	b.n	8007256 <__kernel_rem_pio2+0xbe>
 800721e:	42ef      	cmn	r7, r5
 8007220:	d407      	bmi.n	8007232 <__kernel_rem_pio2+0x9a>
 8007222:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007226:	f7f9 f941 	bl	80004ac <__aeabi_i2d>
 800722a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800722e:	3501      	adds	r5, #1
 8007230:	e7df      	b.n	80071f2 <__kernel_rem_pio2+0x5a>
 8007232:	ec51 0b18 	vmov	r0, r1, d8
 8007236:	e7f8      	b.n	800722a <__kernel_rem_pio2+0x92>
 8007238:	e9d7 2300 	ldrd	r2, r3, [r7]
 800723c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007240:	f7f9 f99e 	bl	8000580 <__aeabi_dmul>
 8007244:	4602      	mov	r2, r0
 8007246:	460b      	mov	r3, r1
 8007248:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800724c:	f7f8 ffe2 	bl	8000214 <__adddf3>
 8007250:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007254:	3601      	adds	r6, #1
 8007256:	9b05      	ldr	r3, [sp, #20]
 8007258:	429e      	cmp	r6, r3
 800725a:	f1a7 0708 	sub.w	r7, r7, #8
 800725e:	ddeb      	ble.n	8007238 <__kernel_rem_pio2+0xa0>
 8007260:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007264:	f108 0801 	add.w	r8, r8, #1
 8007268:	ecaa 7b02 	vstmia	sl!, {d7}
 800726c:	3508      	adds	r5, #8
 800726e:	e7ca      	b.n	8007206 <__kernel_rem_pio2+0x6e>
 8007270:	9b00      	ldr	r3, [sp, #0]
 8007272:	f8dd 8000 	ldr.w	r8, [sp]
 8007276:	aa0c      	add	r2, sp, #48	@ 0x30
 8007278:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800727c:	930a      	str	r3, [sp, #40]	@ 0x28
 800727e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8007280:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007284:	9309      	str	r3, [sp, #36]	@ 0x24
 8007286:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800728a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800728c:	ab98      	add	r3, sp, #608	@ 0x260
 800728e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007292:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8007296:	ed8d 7b02 	vstr	d7, [sp, #8]
 800729a:	ac0c      	add	r4, sp, #48	@ 0x30
 800729c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800729e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80072a2:	46a1      	mov	r9, r4
 80072a4:	46c2      	mov	sl, r8
 80072a6:	f1ba 0f00 	cmp.w	sl, #0
 80072aa:	f1a5 0508 	sub.w	r5, r5, #8
 80072ae:	dc77      	bgt.n	80073a0 <__kernel_rem_pio2+0x208>
 80072b0:	4658      	mov	r0, fp
 80072b2:	ed9d 0b02 	vldr	d0, [sp, #8]
 80072b6:	f000 fac7 	bl	8007848 <scalbn>
 80072ba:	ec57 6b10 	vmov	r6, r7, d0
 80072be:	2200      	movs	r2, #0
 80072c0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80072c4:	4630      	mov	r0, r6
 80072c6:	4639      	mov	r1, r7
 80072c8:	f7f9 f95a 	bl	8000580 <__aeabi_dmul>
 80072cc:	ec41 0b10 	vmov	d0, r0, r1
 80072d0:	f000 fb3a 	bl	8007948 <floor>
 80072d4:	4b75      	ldr	r3, [pc, #468]	@ (80074ac <__kernel_rem_pio2+0x314>)
 80072d6:	ec51 0b10 	vmov	r0, r1, d0
 80072da:	2200      	movs	r2, #0
 80072dc:	f7f9 f950 	bl	8000580 <__aeabi_dmul>
 80072e0:	4602      	mov	r2, r0
 80072e2:	460b      	mov	r3, r1
 80072e4:	4630      	mov	r0, r6
 80072e6:	4639      	mov	r1, r7
 80072e8:	f7f8 ff92 	bl	8000210 <__aeabi_dsub>
 80072ec:	460f      	mov	r7, r1
 80072ee:	4606      	mov	r6, r0
 80072f0:	f7f9 fbf6 	bl	8000ae0 <__aeabi_d2iz>
 80072f4:	9002      	str	r0, [sp, #8]
 80072f6:	f7f9 f8d9 	bl	80004ac <__aeabi_i2d>
 80072fa:	4602      	mov	r2, r0
 80072fc:	460b      	mov	r3, r1
 80072fe:	4630      	mov	r0, r6
 8007300:	4639      	mov	r1, r7
 8007302:	f7f8 ff85 	bl	8000210 <__aeabi_dsub>
 8007306:	f1bb 0f00 	cmp.w	fp, #0
 800730a:	4606      	mov	r6, r0
 800730c:	460f      	mov	r7, r1
 800730e:	dd6c      	ble.n	80073ea <__kernel_rem_pio2+0x252>
 8007310:	f108 31ff 	add.w	r1, r8, #4294967295
 8007314:	ab0c      	add	r3, sp, #48	@ 0x30
 8007316:	9d02      	ldr	r5, [sp, #8]
 8007318:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800731c:	f1cb 0018 	rsb	r0, fp, #24
 8007320:	fa43 f200 	asr.w	r2, r3, r0
 8007324:	4415      	add	r5, r2
 8007326:	4082      	lsls	r2, r0
 8007328:	1a9b      	subs	r3, r3, r2
 800732a:	aa0c      	add	r2, sp, #48	@ 0x30
 800732c:	9502      	str	r5, [sp, #8]
 800732e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8007332:	f1cb 0217 	rsb	r2, fp, #23
 8007336:	fa43 f902 	asr.w	r9, r3, r2
 800733a:	f1b9 0f00 	cmp.w	r9, #0
 800733e:	dd64      	ble.n	800740a <__kernel_rem_pio2+0x272>
 8007340:	9b02      	ldr	r3, [sp, #8]
 8007342:	2200      	movs	r2, #0
 8007344:	3301      	adds	r3, #1
 8007346:	9302      	str	r3, [sp, #8]
 8007348:	4615      	mov	r5, r2
 800734a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800734e:	4590      	cmp	r8, r2
 8007350:	f300 80b8 	bgt.w	80074c4 <__kernel_rem_pio2+0x32c>
 8007354:	f1bb 0f00 	cmp.w	fp, #0
 8007358:	dd07      	ble.n	800736a <__kernel_rem_pio2+0x1d2>
 800735a:	f1bb 0f01 	cmp.w	fp, #1
 800735e:	f000 80bf 	beq.w	80074e0 <__kernel_rem_pio2+0x348>
 8007362:	f1bb 0f02 	cmp.w	fp, #2
 8007366:	f000 80c6 	beq.w	80074f6 <__kernel_rem_pio2+0x35e>
 800736a:	f1b9 0f02 	cmp.w	r9, #2
 800736e:	d14c      	bne.n	800740a <__kernel_rem_pio2+0x272>
 8007370:	4632      	mov	r2, r6
 8007372:	463b      	mov	r3, r7
 8007374:	494e      	ldr	r1, [pc, #312]	@ (80074b0 <__kernel_rem_pio2+0x318>)
 8007376:	2000      	movs	r0, #0
 8007378:	f7f8 ff4a 	bl	8000210 <__aeabi_dsub>
 800737c:	4606      	mov	r6, r0
 800737e:	460f      	mov	r7, r1
 8007380:	2d00      	cmp	r5, #0
 8007382:	d042      	beq.n	800740a <__kernel_rem_pio2+0x272>
 8007384:	4658      	mov	r0, fp
 8007386:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80074a0 <__kernel_rem_pio2+0x308>
 800738a:	f000 fa5d 	bl	8007848 <scalbn>
 800738e:	4630      	mov	r0, r6
 8007390:	4639      	mov	r1, r7
 8007392:	ec53 2b10 	vmov	r2, r3, d0
 8007396:	f7f8 ff3b 	bl	8000210 <__aeabi_dsub>
 800739a:	4606      	mov	r6, r0
 800739c:	460f      	mov	r7, r1
 800739e:	e034      	b.n	800740a <__kernel_rem_pio2+0x272>
 80073a0:	4b44      	ldr	r3, [pc, #272]	@ (80074b4 <__kernel_rem_pio2+0x31c>)
 80073a2:	2200      	movs	r2, #0
 80073a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073a8:	f7f9 f8ea 	bl	8000580 <__aeabi_dmul>
 80073ac:	f7f9 fb98 	bl	8000ae0 <__aeabi_d2iz>
 80073b0:	f7f9 f87c 	bl	80004ac <__aeabi_i2d>
 80073b4:	4b40      	ldr	r3, [pc, #256]	@ (80074b8 <__kernel_rem_pio2+0x320>)
 80073b6:	2200      	movs	r2, #0
 80073b8:	4606      	mov	r6, r0
 80073ba:	460f      	mov	r7, r1
 80073bc:	f7f9 f8e0 	bl	8000580 <__aeabi_dmul>
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
 80073c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073c8:	f7f8 ff22 	bl	8000210 <__aeabi_dsub>
 80073cc:	f7f9 fb88 	bl	8000ae0 <__aeabi_d2iz>
 80073d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80073d4:	f849 0b04 	str.w	r0, [r9], #4
 80073d8:	4639      	mov	r1, r7
 80073da:	4630      	mov	r0, r6
 80073dc:	f7f8 ff1a 	bl	8000214 <__adddf3>
 80073e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073e8:	e75d      	b.n	80072a6 <__kernel_rem_pio2+0x10e>
 80073ea:	d107      	bne.n	80073fc <__kernel_rem_pio2+0x264>
 80073ec:	f108 33ff 	add.w	r3, r8, #4294967295
 80073f0:	aa0c      	add	r2, sp, #48	@ 0x30
 80073f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073f6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80073fa:	e79e      	b.n	800733a <__kernel_rem_pio2+0x1a2>
 80073fc:	4b2f      	ldr	r3, [pc, #188]	@ (80074bc <__kernel_rem_pio2+0x324>)
 80073fe:	2200      	movs	r2, #0
 8007400:	f7f9 fb44 	bl	8000a8c <__aeabi_dcmpge>
 8007404:	2800      	cmp	r0, #0
 8007406:	d143      	bne.n	8007490 <__kernel_rem_pio2+0x2f8>
 8007408:	4681      	mov	r9, r0
 800740a:	2200      	movs	r2, #0
 800740c:	2300      	movs	r3, #0
 800740e:	4630      	mov	r0, r6
 8007410:	4639      	mov	r1, r7
 8007412:	f7f9 fb1d 	bl	8000a50 <__aeabi_dcmpeq>
 8007416:	2800      	cmp	r0, #0
 8007418:	f000 80bf 	beq.w	800759a <__kernel_rem_pio2+0x402>
 800741c:	f108 33ff 	add.w	r3, r8, #4294967295
 8007420:	2200      	movs	r2, #0
 8007422:	9900      	ldr	r1, [sp, #0]
 8007424:	428b      	cmp	r3, r1
 8007426:	da6e      	bge.n	8007506 <__kernel_rem_pio2+0x36e>
 8007428:	2a00      	cmp	r2, #0
 800742a:	f000 8089 	beq.w	8007540 <__kernel_rem_pio2+0x3a8>
 800742e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007432:	ab0c      	add	r3, sp, #48	@ 0x30
 8007434:	f1ab 0b18 	sub.w	fp, fp, #24
 8007438:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d0f6      	beq.n	800742e <__kernel_rem_pio2+0x296>
 8007440:	4658      	mov	r0, fp
 8007442:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80074a0 <__kernel_rem_pio2+0x308>
 8007446:	f000 f9ff 	bl	8007848 <scalbn>
 800744a:	f108 0301 	add.w	r3, r8, #1
 800744e:	00da      	lsls	r2, r3, #3
 8007450:	9205      	str	r2, [sp, #20]
 8007452:	ec55 4b10 	vmov	r4, r5, d0
 8007456:	aa70      	add	r2, sp, #448	@ 0x1c0
 8007458:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80074b4 <__kernel_rem_pio2+0x31c>
 800745c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8007460:	4646      	mov	r6, r8
 8007462:	f04f 0a00 	mov.w	sl, #0
 8007466:	2e00      	cmp	r6, #0
 8007468:	f280 80cf 	bge.w	800760a <__kernel_rem_pio2+0x472>
 800746c:	4644      	mov	r4, r8
 800746e:	2c00      	cmp	r4, #0
 8007470:	f2c0 80fd 	blt.w	800766e <__kernel_rem_pio2+0x4d6>
 8007474:	4b12      	ldr	r3, [pc, #72]	@ (80074c0 <__kernel_rem_pio2+0x328>)
 8007476:	461f      	mov	r7, r3
 8007478:	ab70      	add	r3, sp, #448	@ 0x1c0
 800747a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800747e:	9306      	str	r3, [sp, #24]
 8007480:	f04f 0a00 	mov.w	sl, #0
 8007484:	f04f 0b00 	mov.w	fp, #0
 8007488:	2600      	movs	r6, #0
 800748a:	eba8 0504 	sub.w	r5, r8, r4
 800748e:	e0e2      	b.n	8007656 <__kernel_rem_pio2+0x4be>
 8007490:	f04f 0902 	mov.w	r9, #2
 8007494:	e754      	b.n	8007340 <__kernel_rem_pio2+0x1a8>
 8007496:	bf00      	nop
	...
 80074a4:	3ff00000 	.word	0x3ff00000
 80074a8:	08007c78 	.word	0x08007c78
 80074ac:	40200000 	.word	0x40200000
 80074b0:	3ff00000 	.word	0x3ff00000
 80074b4:	3e700000 	.word	0x3e700000
 80074b8:	41700000 	.word	0x41700000
 80074bc:	3fe00000 	.word	0x3fe00000
 80074c0:	08007c38 	.word	0x08007c38
 80074c4:	f854 3b04 	ldr.w	r3, [r4], #4
 80074c8:	b945      	cbnz	r5, 80074dc <__kernel_rem_pio2+0x344>
 80074ca:	b123      	cbz	r3, 80074d6 <__kernel_rem_pio2+0x33e>
 80074cc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80074d0:	f844 3c04 	str.w	r3, [r4, #-4]
 80074d4:	2301      	movs	r3, #1
 80074d6:	3201      	adds	r2, #1
 80074d8:	461d      	mov	r5, r3
 80074da:	e738      	b.n	800734e <__kernel_rem_pio2+0x1b6>
 80074dc:	1acb      	subs	r3, r1, r3
 80074de:	e7f7      	b.n	80074d0 <__kernel_rem_pio2+0x338>
 80074e0:	f108 32ff 	add.w	r2, r8, #4294967295
 80074e4:	ab0c      	add	r3, sp, #48	@ 0x30
 80074e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ea:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80074ee:	a90c      	add	r1, sp, #48	@ 0x30
 80074f0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80074f4:	e739      	b.n	800736a <__kernel_rem_pio2+0x1d2>
 80074f6:	f108 32ff 	add.w	r2, r8, #4294967295
 80074fa:	ab0c      	add	r3, sp, #48	@ 0x30
 80074fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007500:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007504:	e7f3      	b.n	80074ee <__kernel_rem_pio2+0x356>
 8007506:	a90c      	add	r1, sp, #48	@ 0x30
 8007508:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800750c:	3b01      	subs	r3, #1
 800750e:	430a      	orrs	r2, r1
 8007510:	e787      	b.n	8007422 <__kernel_rem_pio2+0x28a>
 8007512:	3401      	adds	r4, #1
 8007514:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007518:	2a00      	cmp	r2, #0
 800751a:	d0fa      	beq.n	8007512 <__kernel_rem_pio2+0x37a>
 800751c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800751e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007522:	eb0d 0503 	add.w	r5, sp, r3
 8007526:	9b06      	ldr	r3, [sp, #24]
 8007528:	aa20      	add	r2, sp, #128	@ 0x80
 800752a:	4443      	add	r3, r8
 800752c:	f108 0701 	add.w	r7, r8, #1
 8007530:	3d98      	subs	r5, #152	@ 0x98
 8007532:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8007536:	4444      	add	r4, r8
 8007538:	42bc      	cmp	r4, r7
 800753a:	da04      	bge.n	8007546 <__kernel_rem_pio2+0x3ae>
 800753c:	46a0      	mov	r8, r4
 800753e:	e6a2      	b.n	8007286 <__kernel_rem_pio2+0xee>
 8007540:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007542:	2401      	movs	r4, #1
 8007544:	e7e6      	b.n	8007514 <__kernel_rem_pio2+0x37c>
 8007546:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007548:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800754c:	f7f8 ffae 	bl	80004ac <__aeabi_i2d>
 8007550:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8007818 <__kernel_rem_pio2+0x680>
 8007554:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007558:	ed8d 7b02 	vstr	d7, [sp, #8]
 800755c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007560:	46b2      	mov	sl, r6
 8007562:	f04f 0800 	mov.w	r8, #0
 8007566:	9b05      	ldr	r3, [sp, #20]
 8007568:	4598      	cmp	r8, r3
 800756a:	dd05      	ble.n	8007578 <__kernel_rem_pio2+0x3e0>
 800756c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007570:	3701      	adds	r7, #1
 8007572:	eca5 7b02 	vstmia	r5!, {d7}
 8007576:	e7df      	b.n	8007538 <__kernel_rem_pio2+0x3a0>
 8007578:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800757c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007580:	f7f8 fffe 	bl	8000580 <__aeabi_dmul>
 8007584:	4602      	mov	r2, r0
 8007586:	460b      	mov	r3, r1
 8007588:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800758c:	f7f8 fe42 	bl	8000214 <__adddf3>
 8007590:	f108 0801 	add.w	r8, r8, #1
 8007594:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007598:	e7e5      	b.n	8007566 <__kernel_rem_pio2+0x3ce>
 800759a:	f1cb 0000 	rsb	r0, fp, #0
 800759e:	ec47 6b10 	vmov	d0, r6, r7
 80075a2:	f000 f951 	bl	8007848 <scalbn>
 80075a6:	ec55 4b10 	vmov	r4, r5, d0
 80075aa:	4b9d      	ldr	r3, [pc, #628]	@ (8007820 <__kernel_rem_pio2+0x688>)
 80075ac:	2200      	movs	r2, #0
 80075ae:	4620      	mov	r0, r4
 80075b0:	4629      	mov	r1, r5
 80075b2:	f7f9 fa6b 	bl	8000a8c <__aeabi_dcmpge>
 80075b6:	b300      	cbz	r0, 80075fa <__kernel_rem_pio2+0x462>
 80075b8:	4b9a      	ldr	r3, [pc, #616]	@ (8007824 <__kernel_rem_pio2+0x68c>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	4620      	mov	r0, r4
 80075be:	4629      	mov	r1, r5
 80075c0:	f7f8 ffde 	bl	8000580 <__aeabi_dmul>
 80075c4:	f7f9 fa8c 	bl	8000ae0 <__aeabi_d2iz>
 80075c8:	4606      	mov	r6, r0
 80075ca:	f7f8 ff6f 	bl	80004ac <__aeabi_i2d>
 80075ce:	4b94      	ldr	r3, [pc, #592]	@ (8007820 <__kernel_rem_pio2+0x688>)
 80075d0:	2200      	movs	r2, #0
 80075d2:	f7f8 ffd5 	bl	8000580 <__aeabi_dmul>
 80075d6:	460b      	mov	r3, r1
 80075d8:	4602      	mov	r2, r0
 80075da:	4629      	mov	r1, r5
 80075dc:	4620      	mov	r0, r4
 80075de:	f7f8 fe17 	bl	8000210 <__aeabi_dsub>
 80075e2:	f7f9 fa7d 	bl	8000ae0 <__aeabi_d2iz>
 80075e6:	ab0c      	add	r3, sp, #48	@ 0x30
 80075e8:	f10b 0b18 	add.w	fp, fp, #24
 80075ec:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80075f0:	f108 0801 	add.w	r8, r8, #1
 80075f4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80075f8:	e722      	b.n	8007440 <__kernel_rem_pio2+0x2a8>
 80075fa:	4620      	mov	r0, r4
 80075fc:	4629      	mov	r1, r5
 80075fe:	f7f9 fa6f 	bl	8000ae0 <__aeabi_d2iz>
 8007602:	ab0c      	add	r3, sp, #48	@ 0x30
 8007604:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007608:	e71a      	b.n	8007440 <__kernel_rem_pio2+0x2a8>
 800760a:	ab0c      	add	r3, sp, #48	@ 0x30
 800760c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007610:	f7f8 ff4c 	bl	80004ac <__aeabi_i2d>
 8007614:	4622      	mov	r2, r4
 8007616:	462b      	mov	r3, r5
 8007618:	f7f8 ffb2 	bl	8000580 <__aeabi_dmul>
 800761c:	4652      	mov	r2, sl
 800761e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8007622:	465b      	mov	r3, fp
 8007624:	4620      	mov	r0, r4
 8007626:	4629      	mov	r1, r5
 8007628:	f7f8 ffaa 	bl	8000580 <__aeabi_dmul>
 800762c:	3e01      	subs	r6, #1
 800762e:	4604      	mov	r4, r0
 8007630:	460d      	mov	r5, r1
 8007632:	e718      	b.n	8007466 <__kernel_rem_pio2+0x2ce>
 8007634:	9906      	ldr	r1, [sp, #24]
 8007636:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800763a:	9106      	str	r1, [sp, #24]
 800763c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8007640:	f7f8 ff9e 	bl	8000580 <__aeabi_dmul>
 8007644:	4602      	mov	r2, r0
 8007646:	460b      	mov	r3, r1
 8007648:	4650      	mov	r0, sl
 800764a:	4659      	mov	r1, fp
 800764c:	f7f8 fde2 	bl	8000214 <__adddf3>
 8007650:	3601      	adds	r6, #1
 8007652:	4682      	mov	sl, r0
 8007654:	468b      	mov	fp, r1
 8007656:	9b00      	ldr	r3, [sp, #0]
 8007658:	429e      	cmp	r6, r3
 800765a:	dc01      	bgt.n	8007660 <__kernel_rem_pio2+0x4c8>
 800765c:	42b5      	cmp	r5, r6
 800765e:	dae9      	bge.n	8007634 <__kernel_rem_pio2+0x49c>
 8007660:	ab48      	add	r3, sp, #288	@ 0x120
 8007662:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007666:	e9c5 ab00 	strd	sl, fp, [r5]
 800766a:	3c01      	subs	r4, #1
 800766c:	e6ff      	b.n	800746e <__kernel_rem_pio2+0x2d6>
 800766e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8007670:	2b02      	cmp	r3, #2
 8007672:	dc0b      	bgt.n	800768c <__kernel_rem_pio2+0x4f4>
 8007674:	2b00      	cmp	r3, #0
 8007676:	dc39      	bgt.n	80076ec <__kernel_rem_pio2+0x554>
 8007678:	d05d      	beq.n	8007736 <__kernel_rem_pio2+0x59e>
 800767a:	9b02      	ldr	r3, [sp, #8]
 800767c:	f003 0007 	and.w	r0, r3, #7
 8007680:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8007684:	ecbd 8b02 	vpop	{d8}
 8007688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800768c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800768e:	2b03      	cmp	r3, #3
 8007690:	d1f3      	bne.n	800767a <__kernel_rem_pio2+0x4e2>
 8007692:	9b05      	ldr	r3, [sp, #20]
 8007694:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007698:	eb0d 0403 	add.w	r4, sp, r3
 800769c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80076a0:	4625      	mov	r5, r4
 80076a2:	46c2      	mov	sl, r8
 80076a4:	f1ba 0f00 	cmp.w	sl, #0
 80076a8:	f1a5 0508 	sub.w	r5, r5, #8
 80076ac:	dc6b      	bgt.n	8007786 <__kernel_rem_pio2+0x5ee>
 80076ae:	4645      	mov	r5, r8
 80076b0:	2d01      	cmp	r5, #1
 80076b2:	f1a4 0408 	sub.w	r4, r4, #8
 80076b6:	f300 8087 	bgt.w	80077c8 <__kernel_rem_pio2+0x630>
 80076ba:	9c05      	ldr	r4, [sp, #20]
 80076bc:	ab48      	add	r3, sp, #288	@ 0x120
 80076be:	441c      	add	r4, r3
 80076c0:	2000      	movs	r0, #0
 80076c2:	2100      	movs	r1, #0
 80076c4:	f1b8 0f01 	cmp.w	r8, #1
 80076c8:	f300 809c 	bgt.w	8007804 <__kernel_rem_pio2+0x66c>
 80076cc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80076d0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80076d4:	f1b9 0f00 	cmp.w	r9, #0
 80076d8:	f040 80a6 	bne.w	8007828 <__kernel_rem_pio2+0x690>
 80076dc:	9b04      	ldr	r3, [sp, #16]
 80076de:	e9c3 7800 	strd	r7, r8, [r3]
 80076e2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80076e6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80076ea:	e7c6      	b.n	800767a <__kernel_rem_pio2+0x4e2>
 80076ec:	9d05      	ldr	r5, [sp, #20]
 80076ee:	ab48      	add	r3, sp, #288	@ 0x120
 80076f0:	441d      	add	r5, r3
 80076f2:	4644      	mov	r4, r8
 80076f4:	2000      	movs	r0, #0
 80076f6:	2100      	movs	r1, #0
 80076f8:	2c00      	cmp	r4, #0
 80076fa:	da35      	bge.n	8007768 <__kernel_rem_pio2+0x5d0>
 80076fc:	f1b9 0f00 	cmp.w	r9, #0
 8007700:	d038      	beq.n	8007774 <__kernel_rem_pio2+0x5dc>
 8007702:	4602      	mov	r2, r0
 8007704:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007708:	9c04      	ldr	r4, [sp, #16]
 800770a:	e9c4 2300 	strd	r2, r3, [r4]
 800770e:	4602      	mov	r2, r0
 8007710:	460b      	mov	r3, r1
 8007712:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8007716:	f7f8 fd7b 	bl	8000210 <__aeabi_dsub>
 800771a:	ad4a      	add	r5, sp, #296	@ 0x128
 800771c:	2401      	movs	r4, #1
 800771e:	45a0      	cmp	r8, r4
 8007720:	da2b      	bge.n	800777a <__kernel_rem_pio2+0x5e2>
 8007722:	f1b9 0f00 	cmp.w	r9, #0
 8007726:	d002      	beq.n	800772e <__kernel_rem_pio2+0x596>
 8007728:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800772c:	4619      	mov	r1, r3
 800772e:	9b04      	ldr	r3, [sp, #16]
 8007730:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007734:	e7a1      	b.n	800767a <__kernel_rem_pio2+0x4e2>
 8007736:	9c05      	ldr	r4, [sp, #20]
 8007738:	ab48      	add	r3, sp, #288	@ 0x120
 800773a:	441c      	add	r4, r3
 800773c:	2000      	movs	r0, #0
 800773e:	2100      	movs	r1, #0
 8007740:	f1b8 0f00 	cmp.w	r8, #0
 8007744:	da09      	bge.n	800775a <__kernel_rem_pio2+0x5c2>
 8007746:	f1b9 0f00 	cmp.w	r9, #0
 800774a:	d002      	beq.n	8007752 <__kernel_rem_pio2+0x5ba>
 800774c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007750:	4619      	mov	r1, r3
 8007752:	9b04      	ldr	r3, [sp, #16]
 8007754:	e9c3 0100 	strd	r0, r1, [r3]
 8007758:	e78f      	b.n	800767a <__kernel_rem_pio2+0x4e2>
 800775a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800775e:	f7f8 fd59 	bl	8000214 <__adddf3>
 8007762:	f108 38ff 	add.w	r8, r8, #4294967295
 8007766:	e7eb      	b.n	8007740 <__kernel_rem_pio2+0x5a8>
 8007768:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800776c:	f7f8 fd52 	bl	8000214 <__adddf3>
 8007770:	3c01      	subs	r4, #1
 8007772:	e7c1      	b.n	80076f8 <__kernel_rem_pio2+0x560>
 8007774:	4602      	mov	r2, r0
 8007776:	460b      	mov	r3, r1
 8007778:	e7c6      	b.n	8007708 <__kernel_rem_pio2+0x570>
 800777a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800777e:	f7f8 fd49 	bl	8000214 <__adddf3>
 8007782:	3401      	adds	r4, #1
 8007784:	e7cb      	b.n	800771e <__kernel_rem_pio2+0x586>
 8007786:	ed95 7b00 	vldr	d7, [r5]
 800778a:	ed8d 7b00 	vstr	d7, [sp]
 800778e:	ed95 7b02 	vldr	d7, [r5, #8]
 8007792:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007796:	ec53 2b17 	vmov	r2, r3, d7
 800779a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800779e:	f7f8 fd39 	bl	8000214 <__adddf3>
 80077a2:	4602      	mov	r2, r0
 80077a4:	460b      	mov	r3, r1
 80077a6:	4606      	mov	r6, r0
 80077a8:	460f      	mov	r7, r1
 80077aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077ae:	f7f8 fd2f 	bl	8000210 <__aeabi_dsub>
 80077b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80077b6:	f7f8 fd2d 	bl	8000214 <__adddf3>
 80077ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80077be:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80077c2:	e9c5 6700 	strd	r6, r7, [r5]
 80077c6:	e76d      	b.n	80076a4 <__kernel_rem_pio2+0x50c>
 80077c8:	ed94 7b00 	vldr	d7, [r4]
 80077cc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80077d0:	ec51 0b17 	vmov	r0, r1, d7
 80077d4:	4652      	mov	r2, sl
 80077d6:	465b      	mov	r3, fp
 80077d8:	ed8d 7b00 	vstr	d7, [sp]
 80077dc:	f7f8 fd1a 	bl	8000214 <__adddf3>
 80077e0:	4602      	mov	r2, r0
 80077e2:	460b      	mov	r3, r1
 80077e4:	4606      	mov	r6, r0
 80077e6:	460f      	mov	r7, r1
 80077e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077ec:	f7f8 fd10 	bl	8000210 <__aeabi_dsub>
 80077f0:	4652      	mov	r2, sl
 80077f2:	465b      	mov	r3, fp
 80077f4:	f7f8 fd0e 	bl	8000214 <__adddf3>
 80077f8:	3d01      	subs	r5, #1
 80077fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80077fe:	e9c4 6700 	strd	r6, r7, [r4]
 8007802:	e755      	b.n	80076b0 <__kernel_rem_pio2+0x518>
 8007804:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007808:	f7f8 fd04 	bl	8000214 <__adddf3>
 800780c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007810:	e758      	b.n	80076c4 <__kernel_rem_pio2+0x52c>
 8007812:	bf00      	nop
 8007814:	f3af 8000 	nop.w
	...
 8007820:	41700000 	.word	0x41700000
 8007824:	3e700000 	.word	0x3e700000
 8007828:	9b04      	ldr	r3, [sp, #16]
 800782a:	9a04      	ldr	r2, [sp, #16]
 800782c:	601f      	str	r7, [r3, #0]
 800782e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8007832:	605c      	str	r4, [r3, #4]
 8007834:	609d      	str	r5, [r3, #8]
 8007836:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800783a:	60d3      	str	r3, [r2, #12]
 800783c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007840:	6110      	str	r0, [r2, #16]
 8007842:	6153      	str	r3, [r2, #20]
 8007844:	e719      	b.n	800767a <__kernel_rem_pio2+0x4e2>
 8007846:	bf00      	nop

08007848 <scalbn>:
 8007848:	b570      	push	{r4, r5, r6, lr}
 800784a:	ec55 4b10 	vmov	r4, r5, d0
 800784e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007852:	4606      	mov	r6, r0
 8007854:	462b      	mov	r3, r5
 8007856:	b991      	cbnz	r1, 800787e <scalbn+0x36>
 8007858:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800785c:	4323      	orrs	r3, r4
 800785e:	d03d      	beq.n	80078dc <scalbn+0x94>
 8007860:	4b35      	ldr	r3, [pc, #212]	@ (8007938 <scalbn+0xf0>)
 8007862:	4620      	mov	r0, r4
 8007864:	4629      	mov	r1, r5
 8007866:	2200      	movs	r2, #0
 8007868:	f7f8 fe8a 	bl	8000580 <__aeabi_dmul>
 800786c:	4b33      	ldr	r3, [pc, #204]	@ (800793c <scalbn+0xf4>)
 800786e:	429e      	cmp	r6, r3
 8007870:	4604      	mov	r4, r0
 8007872:	460d      	mov	r5, r1
 8007874:	da0f      	bge.n	8007896 <scalbn+0x4e>
 8007876:	a328      	add	r3, pc, #160	@ (adr r3, 8007918 <scalbn+0xd0>)
 8007878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787c:	e01e      	b.n	80078bc <scalbn+0x74>
 800787e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8007882:	4291      	cmp	r1, r2
 8007884:	d10b      	bne.n	800789e <scalbn+0x56>
 8007886:	4622      	mov	r2, r4
 8007888:	4620      	mov	r0, r4
 800788a:	4629      	mov	r1, r5
 800788c:	f7f8 fcc2 	bl	8000214 <__adddf3>
 8007890:	4604      	mov	r4, r0
 8007892:	460d      	mov	r5, r1
 8007894:	e022      	b.n	80078dc <scalbn+0x94>
 8007896:	460b      	mov	r3, r1
 8007898:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800789c:	3936      	subs	r1, #54	@ 0x36
 800789e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80078a2:	4296      	cmp	r6, r2
 80078a4:	dd0d      	ble.n	80078c2 <scalbn+0x7a>
 80078a6:	2d00      	cmp	r5, #0
 80078a8:	a11d      	add	r1, pc, #116	@ (adr r1, 8007920 <scalbn+0xd8>)
 80078aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078ae:	da02      	bge.n	80078b6 <scalbn+0x6e>
 80078b0:	a11d      	add	r1, pc, #116	@ (adr r1, 8007928 <scalbn+0xe0>)
 80078b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078b6:	a31a      	add	r3, pc, #104	@ (adr r3, 8007920 <scalbn+0xd8>)
 80078b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078bc:	f7f8 fe60 	bl	8000580 <__aeabi_dmul>
 80078c0:	e7e6      	b.n	8007890 <scalbn+0x48>
 80078c2:	1872      	adds	r2, r6, r1
 80078c4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80078c8:	428a      	cmp	r2, r1
 80078ca:	dcec      	bgt.n	80078a6 <scalbn+0x5e>
 80078cc:	2a00      	cmp	r2, #0
 80078ce:	dd08      	ble.n	80078e2 <scalbn+0x9a>
 80078d0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80078d4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80078d8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80078dc:	ec45 4b10 	vmov	d0, r4, r5
 80078e0:	bd70      	pop	{r4, r5, r6, pc}
 80078e2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80078e6:	da08      	bge.n	80078fa <scalbn+0xb2>
 80078e8:	2d00      	cmp	r5, #0
 80078ea:	a10b      	add	r1, pc, #44	@ (adr r1, 8007918 <scalbn+0xd0>)
 80078ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078f0:	dac1      	bge.n	8007876 <scalbn+0x2e>
 80078f2:	a10f      	add	r1, pc, #60	@ (adr r1, 8007930 <scalbn+0xe8>)
 80078f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078f8:	e7bd      	b.n	8007876 <scalbn+0x2e>
 80078fa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80078fe:	3236      	adds	r2, #54	@ 0x36
 8007900:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007904:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007908:	4620      	mov	r0, r4
 800790a:	4b0d      	ldr	r3, [pc, #52]	@ (8007940 <scalbn+0xf8>)
 800790c:	4629      	mov	r1, r5
 800790e:	2200      	movs	r2, #0
 8007910:	e7d4      	b.n	80078bc <scalbn+0x74>
 8007912:	bf00      	nop
 8007914:	f3af 8000 	nop.w
 8007918:	c2f8f359 	.word	0xc2f8f359
 800791c:	01a56e1f 	.word	0x01a56e1f
 8007920:	8800759c 	.word	0x8800759c
 8007924:	7e37e43c 	.word	0x7e37e43c
 8007928:	8800759c 	.word	0x8800759c
 800792c:	fe37e43c 	.word	0xfe37e43c
 8007930:	c2f8f359 	.word	0xc2f8f359
 8007934:	81a56e1f 	.word	0x81a56e1f
 8007938:	43500000 	.word	0x43500000
 800793c:	ffff3cb0 	.word	0xffff3cb0
 8007940:	3c900000 	.word	0x3c900000
 8007944:	00000000 	.word	0x00000000

08007948 <floor>:
 8007948:	ec51 0b10 	vmov	r0, r1, d0
 800794c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007954:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8007958:	2e13      	cmp	r6, #19
 800795a:	460c      	mov	r4, r1
 800795c:	4605      	mov	r5, r0
 800795e:	4680      	mov	r8, r0
 8007960:	dc34      	bgt.n	80079cc <floor+0x84>
 8007962:	2e00      	cmp	r6, #0
 8007964:	da17      	bge.n	8007996 <floor+0x4e>
 8007966:	a332      	add	r3, pc, #200	@ (adr r3, 8007a30 <floor+0xe8>)
 8007968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796c:	f7f8 fc52 	bl	8000214 <__adddf3>
 8007970:	2200      	movs	r2, #0
 8007972:	2300      	movs	r3, #0
 8007974:	f7f9 f894 	bl	8000aa0 <__aeabi_dcmpgt>
 8007978:	b150      	cbz	r0, 8007990 <floor+0x48>
 800797a:	2c00      	cmp	r4, #0
 800797c:	da55      	bge.n	8007a2a <floor+0xe2>
 800797e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8007982:	432c      	orrs	r4, r5
 8007984:	2500      	movs	r5, #0
 8007986:	42ac      	cmp	r4, r5
 8007988:	4c2b      	ldr	r4, [pc, #172]	@ (8007a38 <floor+0xf0>)
 800798a:	bf08      	it	eq
 800798c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8007990:	4621      	mov	r1, r4
 8007992:	4628      	mov	r0, r5
 8007994:	e023      	b.n	80079de <floor+0x96>
 8007996:	4f29      	ldr	r7, [pc, #164]	@ (8007a3c <floor+0xf4>)
 8007998:	4137      	asrs	r7, r6
 800799a:	ea01 0307 	and.w	r3, r1, r7
 800799e:	4303      	orrs	r3, r0
 80079a0:	d01d      	beq.n	80079de <floor+0x96>
 80079a2:	a323      	add	r3, pc, #140	@ (adr r3, 8007a30 <floor+0xe8>)
 80079a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a8:	f7f8 fc34 	bl	8000214 <__adddf3>
 80079ac:	2200      	movs	r2, #0
 80079ae:	2300      	movs	r3, #0
 80079b0:	f7f9 f876 	bl	8000aa0 <__aeabi_dcmpgt>
 80079b4:	2800      	cmp	r0, #0
 80079b6:	d0eb      	beq.n	8007990 <floor+0x48>
 80079b8:	2c00      	cmp	r4, #0
 80079ba:	bfbe      	ittt	lt
 80079bc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80079c0:	4133      	asrlt	r3, r6
 80079c2:	18e4      	addlt	r4, r4, r3
 80079c4:	ea24 0407 	bic.w	r4, r4, r7
 80079c8:	2500      	movs	r5, #0
 80079ca:	e7e1      	b.n	8007990 <floor+0x48>
 80079cc:	2e33      	cmp	r6, #51	@ 0x33
 80079ce:	dd0a      	ble.n	80079e6 <floor+0x9e>
 80079d0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80079d4:	d103      	bne.n	80079de <floor+0x96>
 80079d6:	4602      	mov	r2, r0
 80079d8:	460b      	mov	r3, r1
 80079da:	f7f8 fc1b 	bl	8000214 <__adddf3>
 80079de:	ec41 0b10 	vmov	d0, r0, r1
 80079e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079e6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80079ea:	f04f 37ff 	mov.w	r7, #4294967295
 80079ee:	40df      	lsrs	r7, r3
 80079f0:	4207      	tst	r7, r0
 80079f2:	d0f4      	beq.n	80079de <floor+0x96>
 80079f4:	a30e      	add	r3, pc, #56	@ (adr r3, 8007a30 <floor+0xe8>)
 80079f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fa:	f7f8 fc0b 	bl	8000214 <__adddf3>
 80079fe:	2200      	movs	r2, #0
 8007a00:	2300      	movs	r3, #0
 8007a02:	f7f9 f84d 	bl	8000aa0 <__aeabi_dcmpgt>
 8007a06:	2800      	cmp	r0, #0
 8007a08:	d0c2      	beq.n	8007990 <floor+0x48>
 8007a0a:	2c00      	cmp	r4, #0
 8007a0c:	da0a      	bge.n	8007a24 <floor+0xdc>
 8007a0e:	2e14      	cmp	r6, #20
 8007a10:	d101      	bne.n	8007a16 <floor+0xce>
 8007a12:	3401      	adds	r4, #1
 8007a14:	e006      	b.n	8007a24 <floor+0xdc>
 8007a16:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	40b3      	lsls	r3, r6
 8007a1e:	441d      	add	r5, r3
 8007a20:	4545      	cmp	r5, r8
 8007a22:	d3f6      	bcc.n	8007a12 <floor+0xca>
 8007a24:	ea25 0507 	bic.w	r5, r5, r7
 8007a28:	e7b2      	b.n	8007990 <floor+0x48>
 8007a2a:	2500      	movs	r5, #0
 8007a2c:	462c      	mov	r4, r5
 8007a2e:	e7af      	b.n	8007990 <floor+0x48>
 8007a30:	8800759c 	.word	0x8800759c
 8007a34:	7e37e43c 	.word	0x7e37e43c
 8007a38:	bff00000 	.word	0xbff00000
 8007a3c:	000fffff 	.word	0x000fffff

08007a40 <_init>:
 8007a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a42:	bf00      	nop
 8007a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a46:	bc08      	pop	{r3}
 8007a48:	469e      	mov	lr, r3
 8007a4a:	4770      	bx	lr

08007a4c <_fini>:
 8007a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a4e:	bf00      	nop
 8007a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a52:	bc08      	pop	{r3}
 8007a54:	469e      	mov	lr, r3
 8007a56:	4770      	bx	lr
