
lcr-meter-stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070a8  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08007270  08007270  00008270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007460  08007460  0000900c  2**0
                  CONTENTS
  4 .ARM          00000008  08007460  08007460  00008460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007468  08007468  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007468  08007468  00008468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800746c  0800746c  0000846c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08007470  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000634  2000000c  0800747c  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000640  0800747c  00009640  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015671  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dcf  00000000  00000000  0001e6ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  00021480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ec8  00000000  00000000  00022770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000248b4  00000000  00000000  00023638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000174e4  00000000  00000000  00047eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e207b  00000000  00000000  0005f3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014144b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005574  00000000  00000000  00141490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00146a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007258 	.word	0x08007258

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08007258 	.word	0x08007258

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_uldivmod>:
 8000ba4:	b953      	cbnz	r3, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba6:	b94a      	cbnz	r2, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	bf08      	it	eq
 8000bac:	2800      	cmpeq	r0, #0
 8000bae:	bf1c      	itt	ne
 8000bb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb8:	f000 b98a 	b.w	8000ed0 <__aeabi_idiv0>
 8000bbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc4:	f000 f826 	bl	8000c14 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4770      	bx	lr

08000bd4 <__aeabi_f2ulz>:
 8000bd4:	b5d0      	push	{r4, r6, r7, lr}
 8000bd6:	f7ff fc7b 	bl	80004d0 <__aeabi_f2d>
 8000bda:	4b0c      	ldr	r3, [pc, #48]	@ (8000c0c <__aeabi_f2ulz+0x38>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	4606      	mov	r6, r0
 8000be0:	460f      	mov	r7, r1
 8000be2:	f7ff fccd 	bl	8000580 <__aeabi_dmul>
 8000be6:	f000 f975 	bl	8000ed4 <__aeabi_d2uiz>
 8000bea:	4604      	mov	r4, r0
 8000bec:	f7ff fc4e 	bl	800048c <__aeabi_ui2d>
 8000bf0:	4b07      	ldr	r3, [pc, #28]	@ (8000c10 <__aeabi_f2ulz+0x3c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f7ff fcc4 	bl	8000580 <__aeabi_dmul>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	4630      	mov	r0, r6
 8000bfe:	4639      	mov	r1, r7
 8000c00:	f7ff fb06 	bl	8000210 <__aeabi_dsub>
 8000c04:	f000 f966 	bl	8000ed4 <__aeabi_d2uiz>
 8000c08:	4621      	mov	r1, r4
 8000c0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c0c:	3df00000 	.word	0x3df00000
 8000c10:	41f00000 	.word	0x41f00000

08000c14 <__udivmoddi4>:
 8000c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c18:	9d08      	ldr	r5, [sp, #32]
 8000c1a:	460c      	mov	r4, r1
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d14e      	bne.n	8000cbe <__udivmoddi4+0xaa>
 8000c20:	4694      	mov	ip, r2
 8000c22:	458c      	cmp	ip, r1
 8000c24:	4686      	mov	lr, r0
 8000c26:	fab2 f282 	clz	r2, r2
 8000c2a:	d962      	bls.n	8000cf2 <__udivmoddi4+0xde>
 8000c2c:	b14a      	cbz	r2, 8000c42 <__udivmoddi4+0x2e>
 8000c2e:	f1c2 0320 	rsb	r3, r2, #32
 8000c32:	4091      	lsls	r1, r2
 8000c34:	fa20 f303 	lsr.w	r3, r0, r3
 8000c38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c3c:	4319      	orrs	r1, r3
 8000c3e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c46:	fa1f f68c 	uxth.w	r6, ip
 8000c4a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c52:	fb07 1114 	mls	r1, r7, r4, r1
 8000c56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5a:	fb04 f106 	mul.w	r1, r4, r6
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x64>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6a:	f080 8112 	bcs.w	8000e92 <__udivmoddi4+0x27e>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 810f 	bls.w	8000e92 <__udivmoddi4+0x27e>
 8000c74:	3c02      	subs	r4, #2
 8000c76:	4463      	add	r3, ip
 8000c78:	1a59      	subs	r1, r3, r1
 8000c7a:	fa1f f38e 	uxth.w	r3, lr
 8000c7e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c82:	fb07 1110 	mls	r1, r7, r0, r1
 8000c86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8a:	fb00 f606 	mul.w	r6, r0, r6
 8000c8e:	429e      	cmp	r6, r3
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x94>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9a:	f080 80fc 	bcs.w	8000e96 <__udivmoddi4+0x282>
 8000c9e:	429e      	cmp	r6, r3
 8000ca0:	f240 80f9 	bls.w	8000e96 <__udivmoddi4+0x282>
 8000ca4:	4463      	add	r3, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	1b9b      	subs	r3, r3, r6
 8000caa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa6>
 8000cb2:	40d3      	lsrs	r3, r2
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xba>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb4>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa6>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x150>
 8000cd6:	42a3      	cmp	r3, r4
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xcc>
 8000cda:	4290      	cmp	r0, r2
 8000cdc:	f0c0 80f0 	bcc.w	8000ec0 <__udivmoddi4+0x2ac>
 8000ce0:	1a86      	subs	r6, r0, r2
 8000ce2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	2d00      	cmp	r5, #0
 8000cea:	d0e6      	beq.n	8000cba <__udivmoddi4+0xa6>
 8000cec:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf0:	e7e3      	b.n	8000cba <__udivmoddi4+0xa6>
 8000cf2:	2a00      	cmp	r2, #0
 8000cf4:	f040 8090 	bne.w	8000e18 <__udivmoddi4+0x204>
 8000cf8:	eba1 040c 	sub.w	r4, r1, ip
 8000cfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d00:	fa1f f78c 	uxth.w	r7, ip
 8000d04:	2101      	movs	r1, #1
 8000d06:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d0e:	fb08 4416 	mls	r4, r8, r6, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb07 f006 	mul.w	r0, r7, r6
 8000d1a:	4298      	cmp	r0, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x11c>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x11a>
 8000d28:	4298      	cmp	r0, r3
 8000d2a:	f200 80cd 	bhi.w	8000ec8 <__udivmoddi4+0x2b4>
 8000d2e:	4626      	mov	r6, r4
 8000d30:	1a1c      	subs	r4, r3, r0
 8000d32:	fa1f f38e 	uxth.w	r3, lr
 8000d36:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d42:	fb00 f707 	mul.w	r7, r0, r7
 8000d46:	429f      	cmp	r7, r3
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x148>
 8000d4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x146>
 8000d54:	429f      	cmp	r7, r3
 8000d56:	f200 80b0 	bhi.w	8000eba <__udivmoddi4+0x2a6>
 8000d5a:	4620      	mov	r0, r4
 8000d5c:	1bdb      	subs	r3, r3, r7
 8000d5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x9c>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d74:	fa04 f301 	lsl.w	r3, r4, r1
 8000d78:	ea43 030c 	orr.w	r3, r3, ip
 8000d7c:	40f4      	lsrs	r4, r6
 8000d7e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d82:	0c38      	lsrs	r0, r7, #16
 8000d84:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d88:	fbb4 fef0 	udiv	lr, r4, r0
 8000d8c:	fa1f fc87 	uxth.w	ip, r7
 8000d90:	fb00 441e 	mls	r4, r0, lr, r4
 8000d94:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d98:	fb0e f90c 	mul.w	r9, lr, ip
 8000d9c:	45a1      	cmp	r9, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d90a      	bls.n	8000dba <__udivmoddi4+0x1a6>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000daa:	f080 8084 	bcs.w	8000eb6 <__udivmoddi4+0x2a2>
 8000dae:	45a1      	cmp	r9, r4
 8000db0:	f240 8081 	bls.w	8000eb6 <__udivmoddi4+0x2a2>
 8000db4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	eba4 0409 	sub.w	r4, r4, r9
 8000dbe:	fa1f f983 	uxth.w	r9, r3
 8000dc2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dc6:	fb00 4413 	mls	r4, r0, r3, r4
 8000dca:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dce:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d907      	bls.n	8000de6 <__udivmoddi4+0x1d2>
 8000dd6:	193c      	adds	r4, r7, r4
 8000dd8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ddc:	d267      	bcs.n	8000eae <__udivmoddi4+0x29a>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d965      	bls.n	8000eae <__udivmoddi4+0x29a>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dea:	fba0 9302 	umull	r9, r3, r0, r2
 8000dee:	eba4 040c 	sub.w	r4, r4, ip
 8000df2:	429c      	cmp	r4, r3
 8000df4:	46ce      	mov	lr, r9
 8000df6:	469c      	mov	ip, r3
 8000df8:	d351      	bcc.n	8000e9e <__udivmoddi4+0x28a>
 8000dfa:	d04e      	beq.n	8000e9a <__udivmoddi4+0x286>
 8000dfc:	b155      	cbz	r5, 8000e14 <__udivmoddi4+0x200>
 8000dfe:	ebb8 030e 	subs.w	r3, r8, lr
 8000e02:	eb64 040c 	sbc.w	r4, r4, ip
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	40cb      	lsrs	r3, r1
 8000e0c:	431e      	orrs	r6, r3
 8000e0e:	40cc      	lsrs	r4, r1
 8000e10:	e9c5 6400 	strd	r6, r4, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	e750      	b.n	8000cba <__udivmoddi4+0xa6>
 8000e18:	f1c2 0320 	rsb	r3, r2, #32
 8000e1c:	fa20 f103 	lsr.w	r1, r0, r3
 8000e20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e24:	fa24 f303 	lsr.w	r3, r4, r3
 8000e28:	4094      	lsls	r4, r2
 8000e2a:	430c      	orrs	r4, r1
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e34:	fa1f f78c 	uxth.w	r7, ip
 8000e38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e3c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e40:	0c23      	lsrs	r3, r4, #16
 8000e42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e46:	fb00 f107 	mul.w	r1, r0, r7
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x24c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e56:	d22c      	bcs.n	8000eb2 <__udivmoddi4+0x29e>
 8000e58:	4299      	cmp	r1, r3
 8000e5a:	d92a      	bls.n	8000eb2 <__udivmoddi4+0x29e>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4463      	add	r3, ip
 8000e60:	1a5b      	subs	r3, r3, r1
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e68:	fb08 3311 	mls	r3, r8, r1, r3
 8000e6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e70:	fb01 f307 	mul.w	r3, r1, r7
 8000e74:	42a3      	cmp	r3, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x276>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e80:	d213      	bcs.n	8000eaa <__udivmoddi4+0x296>
 8000e82:	42a3      	cmp	r3, r4
 8000e84:	d911      	bls.n	8000eaa <__udivmoddi4+0x296>
 8000e86:	3902      	subs	r1, #2
 8000e88:	4464      	add	r4, ip
 8000e8a:	1ae4      	subs	r4, r4, r3
 8000e8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e90:	e739      	b.n	8000d06 <__udivmoddi4+0xf2>
 8000e92:	4604      	mov	r4, r0
 8000e94:	e6f0      	b.n	8000c78 <__udivmoddi4+0x64>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e706      	b.n	8000ca8 <__udivmoddi4+0x94>
 8000e9a:	45c8      	cmp	r8, r9
 8000e9c:	d2ae      	bcs.n	8000dfc <__udivmoddi4+0x1e8>
 8000e9e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ea6:	3801      	subs	r0, #1
 8000ea8:	e7a8      	b.n	8000dfc <__udivmoddi4+0x1e8>
 8000eaa:	4631      	mov	r1, r6
 8000eac:	e7ed      	b.n	8000e8a <__udivmoddi4+0x276>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	e799      	b.n	8000de6 <__udivmoddi4+0x1d2>
 8000eb2:	4630      	mov	r0, r6
 8000eb4:	e7d4      	b.n	8000e60 <__udivmoddi4+0x24c>
 8000eb6:	46d6      	mov	lr, sl
 8000eb8:	e77f      	b.n	8000dba <__udivmoddi4+0x1a6>
 8000eba:	4463      	add	r3, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e74d      	b.n	8000d5c <__udivmoddi4+0x148>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	4623      	mov	r3, r4
 8000ec4:	4608      	mov	r0, r1
 8000ec6:	e70f      	b.n	8000ce8 <__udivmoddi4+0xd4>
 8000ec8:	3e02      	subs	r6, #2
 8000eca:	4463      	add	r3, ip
 8000ecc:	e730      	b.n	8000d30 <__udivmoddi4+0x11c>
 8000ece:	bf00      	nop

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_d2uiz>:
 8000ed4:	004a      	lsls	r2, r1, #1
 8000ed6:	d211      	bcs.n	8000efc <__aeabi_d2uiz+0x28>
 8000ed8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000edc:	d211      	bcs.n	8000f02 <__aeabi_d2uiz+0x2e>
 8000ede:	d50d      	bpl.n	8000efc <__aeabi_d2uiz+0x28>
 8000ee0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ee4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ee8:	d40e      	bmi.n	8000f08 <__aeabi_d2uiz+0x34>
 8000eea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000eee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ef2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ef6:	fa23 f002 	lsr.w	r0, r3, r2
 8000efa:	4770      	bx	lr
 8000efc:	f04f 0000 	mov.w	r0, #0
 8000f00:	4770      	bx	lr
 8000f02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f06:	d102      	bne.n	8000f0e <__aeabi_d2uiz+0x3a>
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	4770      	bx	lr
 8000f0e:	f04f 0000 	mov.w	r0, #0
 8000f12:	4770      	bx	lr

08000f14 <AD9833_write>:

// MaKE SURE THIS IS DEFINED IN THE main.c FILE
extern SPI_HandleTypeDef hspi1; // SPI handle (Assuming SPI1 is used)


void AD9833_write(uint8_t data_high, uint8_t data_low) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	460a      	mov	r2, r1
 8000f1e:	71fb      	strb	r3, [r7, #7]
 8000f20:	4613      	mov	r3, r2
 8000f22:	71bb      	strb	r3, [r7, #6]
    uint8_t data_out[2] = {data_high, data_low};
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	733b      	strb	r3, [r7, #12]
 8000f28:	79bb      	ldrb	r3, [r7, #6]
 8000f2a:	737b      	strb	r3, [r7, #13]
    

    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;  // CPOL = 1 (Clock idle high)
 8000f2c:	4b10      	ldr	r3, [pc, #64]	@ (8000f70 <AD9833_write+0x5c>)
 8000f2e:	2202      	movs	r2, #2
 8000f30:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;       // CPHA = 0 (Sample on the falling edge)
 8000f32:	4b0f      	ldr	r3, [pc, #60]	@ (8000f70 <AD9833_write+0x5c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	615a      	str	r2, [r3, #20]
    HAL_SPI_Init(&hspi1); // Restart the SPI module
 8000f38:	480d      	ldr	r0, [pc, #52]	@ (8000f70 <AD9833_write+0x5c>)
 8000f3a:	f003 fa53 	bl	80043e4 <HAL_SPI_Init>

    HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f44:	480b      	ldr	r0, [pc, #44]	@ (8000f74 <AD9833_write+0x60>)
 8000f46:	f001 ffb5 	bl	8002eb4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data_out, 2, HAL_MAX_DELAY);
 8000f4a:	f107 010c 	add.w	r1, r7, #12
 8000f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f52:	2202      	movs	r2, #2
 8000f54:	4806      	ldr	r0, [pc, #24]	@ (8000f70 <AD9833_write+0x5c>)
 8000f56:	f003 face 	bl	80044f6 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_SET);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f60:	4804      	ldr	r0, [pc, #16]	@ (8000f74 <AD9833_write+0x60>)
 8000f62:	f001 ffa7 	bl	8002eb4 <HAL_GPIO_WritePin>
}
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000070 	.word	0x20000070
 8000f74:	40020c00 	.word	0x40020c00

08000f78 <AD9833_write4>:

void AD9833_write4(uint8_t data_l_high, uint8_t data_l_low, uint8_t data_h_high, uint8_t data_h_low) {
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4604      	mov	r4, r0
 8000f80:	4608      	mov	r0, r1
 8000f82:	4611      	mov	r1, r2
 8000f84:	461a      	mov	r2, r3
 8000f86:	4623      	mov	r3, r4
 8000f88:	71fb      	strb	r3, [r7, #7]
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71bb      	strb	r3, [r7, #6]
 8000f8e:	460b      	mov	r3, r1
 8000f90:	717b      	strb	r3, [r7, #5]
 8000f92:	4613      	mov	r3, r2
 8000f94:	713b      	strb	r3, [r7, #4]
    uint8_t data_out[4] = {data_l_high, data_l_low, data_h_high, data_h_low};
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	733b      	strb	r3, [r7, #12]
 8000f9a:	79bb      	ldrb	r3, [r7, #6]
 8000f9c:	737b      	strb	r3, [r7, #13]
 8000f9e:	797b      	ldrb	r3, [r7, #5]
 8000fa0:	73bb      	strb	r3, [r7, #14]
 8000fa2:	793b      	ldrb	r3, [r7, #4]
 8000fa4:	73fb      	strb	r3, [r7, #15]

    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;  // CPOL = 1 (Clock idle high)
 8000fa6:	4b10      	ldr	r3, [pc, #64]	@ (8000fe8 <AD9833_write4+0x70>)
 8000fa8:	2202      	movs	r2, #2
 8000faa:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;       // CPHA = 0 (Sample on the falling edge)
 8000fac:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe8 <AD9833_write4+0x70>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	615a      	str	r2, [r3, #20]
    HAL_SPI_Init(&hspi1); // Restart the SPI module
 8000fb2:	480d      	ldr	r0, [pc, #52]	@ (8000fe8 <AD9833_write4+0x70>)
 8000fb4:	f003 fa16 	bl	80043e4 <HAL_SPI_Init>

    HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fbe:	480b      	ldr	r0, [pc, #44]	@ (8000fec <AD9833_write4+0x74>)
 8000fc0:	f001 ff78 	bl	8002eb4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data_out, 4, HAL_MAX_DELAY);
 8000fc4:	f107 010c 	add.w	r1, r7, #12
 8000fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fcc:	2204      	movs	r2, #4
 8000fce:	4806      	ldr	r0, [pc, #24]	@ (8000fe8 <AD9833_write4+0x70>)
 8000fd0:	f003 fa91 	bl	80044f6 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fda:	4804      	ldr	r0, [pc, #16]	@ (8000fec <AD9833_write4+0x74>)
 8000fdc:	f001 ff6a 	bl	8002eb4 <HAL_GPIO_WritePin>
}
 8000fe0:	bf00      	nop
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd90      	pop	{r4, r7, pc}
 8000fe8:	20000070 	.word	0x20000070
 8000fec:	40020c00 	.word	0x40020c00

08000ff0 <AD9833_set_freq>:

void AD9833_set_freq(uint64_t f) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	e9c7 0100 	strd	r0, r1, [r7]
    AD9833_write(0b00100000, 0b10000000); // Control reg, start reset
 8000ffa:	2180      	movs	r1, #128	@ 0x80
 8000ffc:	2020      	movs	r0, #32
 8000ffe:	f7ff ff89 	bl	8000f14 <AD9833_write>

    uint64_t FRQREG = (uint64_t)((f * (1 << 28)) / MASTER_CLK);
 8001002:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001006:	f04f 0000 	mov.w	r0, #0
 800100a:	f04f 0100 	mov.w	r1, #0
 800100e:	0719      	lsls	r1, r3, #28
 8001010:	ea41 1112 	orr.w	r1, r1, r2, lsr #4
 8001014:	0710      	lsls	r0, r2, #28
 8001016:	4a21      	ldr	r2, [pc, #132]	@ (800109c <AD9833_set_freq+0xac>)
 8001018:	f04f 0300 	mov.w	r3, #0
 800101c:	f7ff fdc2 	bl	8000ba4 <__aeabi_uldivmod>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // Lower bytes
    uint16_t FL = FRQREG & 0x3FFF;
 8001028:	8a3b      	ldrh	r3, [r7, #16]
 800102a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800102e:	81fb      	strh	r3, [r7, #14]
    uint8_t Llb = FL & 0xFF;
 8001030:	89fb      	ldrh	r3, [r7, #14]
 8001032:	737b      	strb	r3, [r7, #13]
    uint8_t Lhb = ((FL >> 8) & 0x3F) | 0b01000000;
 8001034:	89fb      	ldrh	r3, [r7, #14]
 8001036:	0a1b      	lsrs	r3, r3, #8
 8001038:	b29b      	uxth	r3, r3
 800103a:	b25b      	sxtb	r3, r3
 800103c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001040:	b25b      	sxtb	r3, r3
 8001042:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001046:	b25b      	sxtb	r3, r3
 8001048:	733b      	strb	r3, [r7, #12]

    // Higher bytes
    uint16_t FH = (FRQREG >> 14) & 0x3FFF;
 800104a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	f04f 0300 	mov.w	r3, #0
 8001056:	0b82      	lsrs	r2, r0, #14
 8001058:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 800105c:	0b8b      	lsrs	r3, r1, #14
 800105e:	b293      	uxth	r3, r2
 8001060:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001064:	817b      	strh	r3, [r7, #10]
    uint8_t Hlb = FH & 0xFF;
 8001066:	897b      	ldrh	r3, [r7, #10]
 8001068:	727b      	strb	r3, [r7, #9]
    uint8_t Hhb = ((FH >> 8) & 0x3F) | 0b01000000;
 800106a:	897b      	ldrh	r3, [r7, #10]
 800106c:	0a1b      	lsrs	r3, r3, #8
 800106e:	b29b      	uxth	r3, r3
 8001070:	b25b      	sxtb	r3, r3
 8001072:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001076:	b25b      	sxtb	r3, r3
 8001078:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800107c:	b25b      	sxtb	r3, r3
 800107e:	723b      	strb	r3, [r7, #8]

    AD9833_write4(Lhb, Llb, Hhb, Hlb);
 8001080:	7a7b      	ldrb	r3, [r7, #9]
 8001082:	7a3a      	ldrb	r2, [r7, #8]
 8001084:	7b79      	ldrb	r1, [r7, #13]
 8001086:	7b38      	ldrb	r0, [r7, #12]
 8001088:	f7ff ff76 	bl	8000f78 <AD9833_write4>

    AD9833_write(0b00100000, 0b00000000); // Control reg, finish reset and configure IC
 800108c:	2100      	movs	r1, #0
 800108e:	2020      	movs	r0, #32
 8001090:	f7ff ff40 	bl	8000f14 <AD9833_write>
}
 8001094:	bf00      	nop
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	000f4240 	.word	0x000f4240

080010a0 <ADC_Channel0>:

// MaKE SURE THIS IS DEFINED IN THE main.c FILE
extern SPI_HandleTypeDef hspi1; // SPI handle (Assuming SPI1 is used)

// Function to read from ADC Channel 0 (CH0)
float ADC_Channel0(void) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af02      	add	r7, sp, #8
    uint8_t data_out[2] = { MCP3202_CH0, 0x00 };
 80010a6:	23d0      	movs	r3, #208	@ 0xd0
 80010a8:	80bb      	strh	r3, [r7, #4]
    uint8_t data_in[2] = { 0x00, 0x00 };
 80010aa:	2300      	movs	r3, #0
 80010ac:	803b      	strh	r3, [r7, #0]


    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;   // CPOL = 0 (Clock idle Low)
 80010ae:	4b20      	ldr	r3, [pc, #128]	@ (8001130 <ADC_Channel0+0x90>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;       // CPHA = 0 (Sample on the falling edge)
 80010b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001130 <ADC_Channel0+0x90>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	615a      	str	r2, [r3, #20]
    HAL_SPI_Init(&hspi1); // Restart the SPI module
 80010ba:	481d      	ldr	r0, [pc, #116]	@ (8001130 <ADC_Channel0+0x90>)
 80010bc:	f003 f992 	bl	80043e4 <HAL_SPI_Init>

    // Transmit and receive data via SPI
    HAL_GPIO_WritePin(MCP3202_NCS_GPIO_Port, MCP3202_NCS_Pin, GPIO_PIN_RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010c6:	481b      	ldr	r0, [pc, #108]	@ (8001134 <ADC_Channel0+0x94>)
 80010c8:	f001 fef4 	bl	8002eb4 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, data_out, data_in, 2, HAL_MAX_DELAY);
 80010cc:	463a      	mov	r2, r7
 80010ce:	1d39      	adds	r1, r7, #4
 80010d0:	f04f 33ff 	mov.w	r3, #4294967295
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2302      	movs	r3, #2
 80010d8:	4815      	ldr	r0, [pc, #84]	@ (8001130 <ADC_Channel0+0x90>)
 80010da:	f003 fb50 	bl	800477e <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(MCP3202_NCS_GPIO_Port, MCP3202_NCS_Pin, GPIO_PIN_SET);
 80010de:	2201      	movs	r2, #1
 80010e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010e4:	4813      	ldr	r0, [pc, #76]	@ (8001134 <ADC_Channel0+0x94>)
 80010e6:	f001 fee5 	bl	8002eb4 <HAL_GPIO_WritePin>

    // Combine the received bytes to form the 12-bit ADC value
    uint16_t adc_value = ((data_in[0] & 0x0F) << 8) | data_in[1];
 80010ea:	783b      	ldrb	r3, [r7, #0]
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	b21b      	sxth	r3, r3
 80010f0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80010f4:	b21a      	sxth	r2, r3
 80010f6:	787b      	ldrb	r3, [r7, #1]
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	4313      	orrs	r3, r2
 80010fc:	b21b      	sxth	r3, r3
 80010fe:	81fb      	strh	r3, [r7, #14]

    // Calculate the voltage based on the 3.3V reference and 12-bit ADC resolution
    float voltage = 3.3f * adc_value / (float)(1 << 11); // 12-bit resolution (2^12)
 8001100:	89fb      	ldrh	r3, [r7, #14]
 8001102:	ee07 3a90 	vmov	s15, r3
 8001106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800110a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001138 <ADC_Channel0+0x98>
 800110e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001112:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800113c <ADC_Channel0+0x9c>
 8001116:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800111a:	edc7 7a02 	vstr	s15, [r7, #8]

    return voltage;
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	ee07 3a90 	vmov	s15, r3
}
 8001124:	eeb0 0a67 	vmov.f32	s0, s15
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000070 	.word	0x20000070
 8001134:	40020c00 	.word	0x40020c00
 8001138:	40533333 	.word	0x40533333
 800113c:	45000000 	.word	0x45000000

08001140 <ADC_Channel1>:

// Function to read from ADC Channel 1 (CH1)
float ADC_Channel1(void) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af02      	add	r7, sp, #8
    uint8_t data_out[2] = { MCP3202_CH1, 0x00 };
 8001146:	23f0      	movs	r3, #240	@ 0xf0
 8001148:	80bb      	strh	r3, [r7, #4]
    uint8_t data_in[2] = { 0x00, 0x00 };
 800114a:	2300      	movs	r3, #0
 800114c:	803b      	strh	r3, [r7, #0]


    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;   // CPOL = 0 (Clock idle Low)
 800114e:	4b20      	ldr	r3, [pc, #128]	@ (80011d0 <ADC_Channel1+0x90>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;       // CPHA = 0 (Sample on the falling edge)
 8001154:	4b1e      	ldr	r3, [pc, #120]	@ (80011d0 <ADC_Channel1+0x90>)
 8001156:	2200      	movs	r2, #0
 8001158:	615a      	str	r2, [r3, #20]
    HAL_SPI_Init(&hspi1); // Restart the SPI module
 800115a:	481d      	ldr	r0, [pc, #116]	@ (80011d0 <ADC_Channel1+0x90>)
 800115c:	f003 f942 	bl	80043e4 <HAL_SPI_Init>

    // Transmit and receive data via SPI
    HAL_GPIO_WritePin(MCP3202_NCS_GPIO_Port, MCP3202_NCS_Pin, GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001166:	481b      	ldr	r0, [pc, #108]	@ (80011d4 <ADC_Channel1+0x94>)
 8001168:	f001 fea4 	bl	8002eb4 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, data_out, data_in, 2, HAL_MAX_DELAY);
 800116c:	463a      	mov	r2, r7
 800116e:	1d39      	adds	r1, r7, #4
 8001170:	f04f 33ff 	mov.w	r3, #4294967295
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	2302      	movs	r3, #2
 8001178:	4815      	ldr	r0, [pc, #84]	@ (80011d0 <ADC_Channel1+0x90>)
 800117a:	f003 fb00 	bl	800477e <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(MCP3202_NCS_GPIO_Port, MCP3202_NCS_Pin, GPIO_PIN_SET);
 800117e:	2201      	movs	r2, #1
 8001180:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001184:	4813      	ldr	r0, [pc, #76]	@ (80011d4 <ADC_Channel1+0x94>)
 8001186:	f001 fe95 	bl	8002eb4 <HAL_GPIO_WritePin>

    // Combine the received bytes to form the 12-bit ADC value
    uint16_t adc_value = ((data_in[0] & 0x0F) << 8) | data_in[1];
 800118a:	783b      	ldrb	r3, [r7, #0]
 800118c:	021b      	lsls	r3, r3, #8
 800118e:	b21b      	sxth	r3, r3
 8001190:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001194:	b21a      	sxth	r2, r3
 8001196:	787b      	ldrb	r3, [r7, #1]
 8001198:	b21b      	sxth	r3, r3
 800119a:	4313      	orrs	r3, r2
 800119c:	b21b      	sxth	r3, r3
 800119e:	81fb      	strh	r3, [r7, #14]

    // Calculate the voltage based on the 3.3V reference and 12-bit ADC resolution
    float voltage = 3.3f * adc_value / (float)(1 << 11); // 12-bit resolution (2^12)
 80011a0:	89fb      	ldrh	r3, [r7, #14]
 80011a2:	ee07 3a90 	vmov	s15, r3
 80011a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011aa:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80011d8 <ADC_Channel1+0x98>
 80011ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011b2:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80011dc <ADC_Channel1+0x9c>
 80011b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ba:	edc7 7a02 	vstr	s15, [r7, #8]

    return voltage;
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	ee07 3a90 	vmov	s15, r3
}
 80011c4:	eeb0 0a67 	vmov.f32	s0, s15
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000070 	.word	0x20000070
 80011d4:	40020c00 	.word	0x40020c00
 80011d8:	40533333 	.word	0x40533333
 80011dc:	45000000 	.word	0x45000000

080011e0 <Get_Time_us.0>:


  __HAL_TIM_SET_COUNTER(&htim2, 0);
  HAL_TIM_Base_Start(&htim2);

  uint32_t Get_Time_us(void) {
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	f8c7 c004 	str.w	ip, [r7, #4]
	    return __HAL_TIM_GET_COUNTER(&htim2); // Read timer
 80011ea:	4b04      	ldr	r3, [pc, #16]	@ (80011fc <Get_Time_us.0+0x1c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  }
 80011f0:	4618      	mov	r0, r3
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	200000c8 	.word	0x200000c8

08001200 <main>:
{
 8001200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001204:	b0a6      	sub	sp, #152	@ 0x98
 8001206:	af02      	add	r7, sp, #8
int main(void)
 8001208:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800120c:	643b      	str	r3, [r7, #64]	@ 0x40
  HAL_Init();
 800120e:	f001 f8a3 	bl	8002358 <HAL_Init>
  SystemClock_Config();
 8001212:	f000 fa5b 	bl	80016cc <SystemClock_Config>
  MX_GPIO_Init();
 8001216:	f000 fbf1 	bl	80019fc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800121a:	f000 fb97 	bl	800194c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800121e:	f000 fbbf 	bl	80019a0 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8001222:	f000 fabf 	bl	80017a4 <MX_ADC1_Init>
  MX_SPI1_Init();
 8001226:	f000 fb0f 	bl	8001848 <MX_SPI1_Init>
  MX_TIM2_Init();
 800122a:	f000 fb43 	bl	80018b4 <MX_TIM2_Init>
  float frequency = 10000;
 800122e:	4be0      	ldr	r3, [pc, #896]	@ (80015b0 <main+0x3b0>)
 8001230:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  AD9833_set_freq(frequency);
 8001234:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8001238:	f7ff fccc 	bl	8000bd4 <__aeabi_f2ulz>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4610      	mov	r0, r2
 8001242:	4619      	mov	r1, r3
 8001244:	f7ff fed4 	bl	8000ff0 <AD9833_set_freq>
  int n_points = 1000;
 8001248:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800124c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  int sample_delay = 1;
 8001250:	2301      	movs	r3, #1
 8001252:	67fb      	str	r3, [r7, #124]	@ 0x7c
  int i = 0; // Array index counter
 8001254:	2300      	movs	r3, #0
 8001256:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  float ch0_data[n_points];
 800125a:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800125e:	1e4b      	subs	r3, r1, #1
 8001260:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001262:	460a      	mov	r2, r1
 8001264:	2300      	movs	r3, #0
 8001266:	4614      	mov	r4, r2
 8001268:	461d      	mov	r5, r3
 800126a:	f04f 0200 	mov.w	r2, #0
 800126e:	f04f 0300 	mov.w	r3, #0
 8001272:	016b      	lsls	r3, r5, #5
 8001274:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001278:	0162      	lsls	r2, r4, #5
 800127a:	460a      	mov	r2, r1
 800127c:	2300      	movs	r3, #0
 800127e:	4690      	mov	r8, r2
 8001280:	4699      	mov	r9, r3
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	f04f 0300 	mov.w	r3, #0
 800128a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800128e:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001292:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001296:	460b      	mov	r3, r1
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	3307      	adds	r3, #7
 800129c:	08db      	lsrs	r3, r3, #3
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	ebad 0d03 	sub.w	sp, sp, r3
 80012a4:	ab02      	add	r3, sp, #8
 80012a6:	3303      	adds	r3, #3
 80012a8:	089b      	lsrs	r3, r3, #2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	677b      	str	r3, [r7, #116]	@ 0x74
  float ch0_time[n_points];
 80012ae:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80012b2:	1e4b      	subs	r3, r1, #1
 80012b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80012b6:	460a      	mov	r2, r1
 80012b8:	2300      	movs	r3, #0
 80012ba:	4692      	mov	sl, r2
 80012bc:	469b      	mov	fp, r3
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	f04f 0300 	mov.w	r3, #0
 80012c6:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80012ca:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 80012ce:	ea4f 124a 	mov.w	r2, sl, lsl #5
 80012d2:	460a      	mov	r2, r1
 80012d4:	2300      	movs	r3, #0
 80012d6:	623a      	str	r2, [r7, #32]
 80012d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	f04f 0300 	mov.w	r3, #0
 80012e2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80012e6:	4628      	mov	r0, r5
 80012e8:	0143      	lsls	r3, r0, #5
 80012ea:	4620      	mov	r0, r4
 80012ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80012f0:	4620      	mov	r0, r4
 80012f2:	0142      	lsls	r2, r0, #5
 80012f4:	460b      	mov	r3, r1
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	3307      	adds	r3, #7
 80012fa:	08db      	lsrs	r3, r3, #3
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	ebad 0d03 	sub.w	sp, sp, r3
 8001302:	ab02      	add	r3, sp, #8
 8001304:	3303      	adds	r3, #3
 8001306:	089b      	lsrs	r3, r3, #2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  memset(ch0_data, 0, n_points);  // Set all bytes in the array to 0
 800130c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001310:	461a      	mov	r2, r3
 8001312:	2100      	movs	r1, #0
 8001314:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001316:	f004 feec 	bl	80060f2 <memset>
  memset(ch0_time, 0, n_points);  // Set all bytes in the array to 0
 800131a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800131e:	461a      	mov	r2, r3
 8001320:	2100      	movs	r1, #0
 8001322:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001324:	f004 fee5 	bl	80060f2 <memset>
  float ch1_data[n_points];
 8001328:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800132c:	1e4b      	subs	r3, r1, #1
 800132e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001330:	460a      	mov	r2, r1
 8001332:	2300      	movs	r3, #0
 8001334:	61ba      	str	r2, [r7, #24]
 8001336:	61fb      	str	r3, [r7, #28]
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	f04f 0300 	mov.w	r3, #0
 8001340:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001344:	4628      	mov	r0, r5
 8001346:	0143      	lsls	r3, r0, #5
 8001348:	4620      	mov	r0, r4
 800134a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800134e:	4620      	mov	r0, r4
 8001350:	0142      	lsls	r2, r0, #5
 8001352:	460a      	mov	r2, r1
 8001354:	2300      	movs	r3, #0
 8001356:	613a      	str	r2, [r7, #16]
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	f04f 0200 	mov.w	r2, #0
 800135e:	f04f 0300 	mov.w	r3, #0
 8001362:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001366:	4628      	mov	r0, r5
 8001368:	0143      	lsls	r3, r0, #5
 800136a:	4620      	mov	r0, r4
 800136c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001370:	4620      	mov	r0, r4
 8001372:	0142      	lsls	r2, r0, #5
 8001374:	460b      	mov	r3, r1
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	3307      	adds	r3, #7
 800137a:	08db      	lsrs	r3, r3, #3
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	ebad 0d03 	sub.w	sp, sp, r3
 8001382:	ab02      	add	r3, sp, #8
 8001384:	3303      	adds	r3, #3
 8001386:	089b      	lsrs	r3, r3, #2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	667b      	str	r3, [r7, #100]	@ 0x64
  float ch1_time[n_points];
 800138c:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8001390:	1e4b      	subs	r3, r1, #1
 8001392:	663b      	str	r3, [r7, #96]	@ 0x60
 8001394:	460a      	mov	r2, r1
 8001396:	2300      	movs	r3, #0
 8001398:	60ba      	str	r2, [r7, #8]
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	f04f 0300 	mov.w	r3, #0
 80013a4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80013a8:	4628      	mov	r0, r5
 80013aa:	0143      	lsls	r3, r0, #5
 80013ac:	4620      	mov	r0, r4
 80013ae:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80013b2:	4620      	mov	r0, r4
 80013b4:	0142      	lsls	r2, r0, #5
 80013b6:	460a      	mov	r2, r1
 80013b8:	2300      	movs	r3, #0
 80013ba:	603a      	str	r2, [r7, #0]
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	f04f 0300 	mov.w	r3, #0
 80013c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80013ca:	4628      	mov	r0, r5
 80013cc:	0143      	lsls	r3, r0, #5
 80013ce:	4620      	mov	r0, r4
 80013d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80013d4:	4620      	mov	r0, r4
 80013d6:	0142      	lsls	r2, r0, #5
 80013d8:	460b      	mov	r3, r1
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	3307      	adds	r3, #7
 80013de:	08db      	lsrs	r3, r3, #3
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	ebad 0d03 	sub.w	sp, sp, r3
 80013e6:	ab02      	add	r3, sp, #8
 80013e8:	3303      	adds	r3, #3
 80013ea:	089b      	lsrs	r3, r3, #2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  memset(ch1_time, 0, n_points);  // Set all bytes in the array to 0
 80013f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80013f4:	461a      	mov	r2, r3
 80013f6:	2100      	movs	r1, #0
 80013f8:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80013fa:	f004 fe7a 	bl	80060f2 <memset>
  memset(ch1_data, 0, n_points);  // Set all bytes in the array to 0
 80013fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001402:	461a      	mov	r2, r3
 8001404:	2100      	movs	r1, #0
 8001406:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8001408:	f004 fe73 	bl	80060f2 <memset>
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 800140c:	4b69      	ldr	r3, [pc, #420]	@ (80015b4 <main+0x3b4>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2200      	movs	r2, #0
 8001412:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start(&htim2);
 8001414:	4867      	ldr	r0, [pc, #412]	@ (80015b4 <main+0x3b4>)
 8001416:	f003 fc87 	bl	8004d28 <HAL_TIM_Base_Start>

  start_time = Get_Time_us();
 800141a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800141e:	469c      	mov	ip, r3
 8001420:	f7ff fede 	bl	80011e0 <Get_Time_us.0>
 8001424:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c

  float load_amplitude = 0;
 8001428:	f04f 0300 	mov.w	r3, #0
 800142c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float load_phase = 0;
 800142e:	f04f 0300 	mov.w	r3, #0
 8001432:	63bb      	str	r3, [r7, #56]	@ 0x38
  float load_offset = 0;
 8001434:	f04f 0300 	mov.w	r3, #0
 8001438:	637b      	str	r3, [r7, #52]	@ 0x34

  float shunt_amplitude = 0;
 800143a:	f04f 0300 	mov.w	r3, #0
 800143e:	633b      	str	r3, [r7, #48]	@ 0x30
  float shunt_phase = 0;
 8001440:	f04f 0300 	mov.w	r3, #0
 8001444:	62fb      	str	r3, [r7, #44]	@ 0x2c
  float shunt_offset = 0;
 8001446:	f04f 0300 	mov.w	r3, #0
 800144a:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  HAL_Delay(sample_delay);
	  ch0_data[i] = ADC_Channel0();
 800144c:	f7ff fe28 	bl	80010a0 <ADC_Channel0>
 8001450:	eef0 7a40 	vmov.f32	s15, s0
 8001454:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001456:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4413      	add	r3, r2
 800145e:	edc3 7a00 	vstr	s15, [r3]
	  ch0_time[i] = ((double)(Get_Time_us() - start_time)) / 1e6;
 8001462:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001466:	469c      	mov	ip, r3
 8001468:	f7ff feba 	bl	80011e0 <Get_Time_us.0>
 800146c:	4602      	mov	r2, r0
 800146e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff f809 	bl	800048c <__aeabi_ui2d>
 800147a:	a34b      	add	r3, pc, #300	@ (adr r3, 80015a8 <main+0x3a8>)
 800147c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001480:	f7ff f9a8 	bl	80007d4 <__aeabi_ddiv>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	4610      	mov	r0, r2
 800148a:	4619      	mov	r1, r3
 800148c:	f7ff fb3a 	bl	8000b04 <__aeabi_d2f>
 8001490:	4601      	mov	r1, r0
 8001492:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001494:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4413      	add	r3, r2
 800149c:	6019      	str	r1, [r3, #0]
//	  HAL_Delay(sample_delay);
	  ch1_data[i] = ADC_Channel1();
 800149e:	f7ff fe4f 	bl	8001140 <ADC_Channel1>
 80014a2:	eef0 7a40 	vmov.f32	s15, s0
 80014a6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80014a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	edc3 7a00 	vstr	s15, [r3]
	  ch1_time[i] = ((double)(Get_Time_us() - start_time)) / 1e6;
 80014b4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014b8:	469c      	mov	ip, r3
 80014ba:	f7ff fe91 	bl	80011e0 <Get_Time_us.0>
 80014be:	4602      	mov	r2, r0
 80014c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7fe ffe0 	bl	800048c <__aeabi_ui2d>
 80014cc:	a336      	add	r3, pc, #216	@ (adr r3, 80015a8 <main+0x3a8>)
 80014ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d2:	f7ff f97f 	bl	80007d4 <__aeabi_ddiv>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4610      	mov	r0, r2
 80014dc:	4619      	mov	r1, r3
 80014de:	f7ff fb11 	bl	8000b04 <__aeabi_d2f>
 80014e2:	4601      	mov	r1, r0
 80014e4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80014e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	6019      	str	r1, [r3, #0]

	  if (i >= n_points - 1 ) {
 80014f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80014f4:	3b01      	subs	r3, #1
 80014f6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80014fa:	429a      	cmp	r2, r3
 80014fc:	f2c0 80d4 	blt.w	80016a8 <main+0x4a8>
		  i = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

		  fitSineWave(ch0_data, ch0_time, n_points, frequency, &load_amplitude, &load_phase, &load_offset);
 8001506:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800150a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800150e:	9301      	str	r3, [sp, #4]
 8001510:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	4613      	mov	r3, r2
 8001518:	ed97 0a21 	vldr	s0, [r7, #132]	@ 0x84
 800151c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001520:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001522:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001524:	f000 fc86 	bl	8001e34 <fitSineWave>
		  fitSineWave(ch1_data, ch1_time, n_points, frequency, &shunt_amplitude, &shunt_phase, &shunt_offset);
 8001528:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800152c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001530:	9301      	str	r3, [sp, #4]
 8001532:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	4613      	mov	r3, r2
 800153a:	ed97 0a21 	vldr	s0, [r7, #132]	@ 0x84
 800153e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001542:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001544:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8001546:	f000 fc75 	bl	8001e34 <fitSineWave>

		  float impedance_magnitude = (load_amplitude / (shunt_amplitude / 100));
 800154a:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 800154e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001552:	ed9f 6a19 	vldr	s12, [pc, #100]	@ 80015b8 <main+0x3b8>
 8001556:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800155a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800155e:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		  float impedance_angle = (load_phase - shunt_phase);
 8001562:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001566:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800156a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800156e:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		  float resistance = impedance_magnitude * cos(impedance_angle) - 100;
 8001572:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001574:	f7fe ffac 	bl	80004d0 <__aeabi_f2d>
 8001578:	4604      	mov	r4, r0
 800157a:	460d      	mov	r5, r1
 800157c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800157e:	f7fe ffa7 	bl	80004d0 <__aeabi_f2d>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	ec43 2b10 	vmov	d0, r2, r3
 800158a:	f004 fde1 	bl	8006150 <cos>
 800158e:	ec53 2b10 	vmov	r2, r3, d0
 8001592:	4620      	mov	r0, r4
 8001594:	4629      	mov	r1, r5
 8001596:	f7fe fff3 	bl	8000580 <__aeabi_dmul>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	e00b      	b.n	80015bc <main+0x3bc>
 80015a4:	f3af 8000 	nop.w
 80015a8:	00000000 	.word	0x00000000
 80015ac:	412e8480 	.word	0x412e8480
 80015b0:	461c4000 	.word	0x461c4000
 80015b4:	200000c8 	.word	0x200000c8
 80015b8:	42c80000 	.word	0x42c80000
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	4b3f      	ldr	r3, [pc, #252]	@ (80016c0 <main+0x4c0>)
 80015c2:	f7fe fe25 	bl	8000210 <__aeabi_dsub>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4610      	mov	r0, r2
 80015cc:	4619      	mov	r1, r3
 80015ce:	f7ff fa99 	bl	8000b04 <__aeabi_d2f>
 80015d2:	4603      	mov	r3, r0
 80015d4:	653b      	str	r3, [r7, #80]	@ 0x50
		  float reactance = impedance_magnitude * sin(impedance_angle);
 80015d6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80015d8:	f7fe ff7a 	bl	80004d0 <__aeabi_f2d>
 80015dc:	4604      	mov	r4, r0
 80015de:	460d      	mov	r5, r1
 80015e0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80015e2:	f7fe ff75 	bl	80004d0 <__aeabi_f2d>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	ec43 2b10 	vmov	d0, r2, r3
 80015ee:	f004 fe03 	bl	80061f8 <sin>
 80015f2:	ec53 2b10 	vmov	r2, r3, d0
 80015f6:	4620      	mov	r0, r4
 80015f8:	4629      	mov	r1, r5
 80015fa:	f7fe ffc1 	bl	8000580 <__aeabi_dmul>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4610      	mov	r0, r2
 8001604:	4619      	mov	r1, r3
 8001606:	f7ff fa7d 	bl	8000b04 <__aeabi_d2f>
 800160a:	4603      	mov	r3, r0
 800160c:	64fb      	str	r3, [r7, #76]	@ 0x4c
		  float inductance = reactance / (2 * M_PI * frequency);
 800160e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001610:	f7fe ff5e 	bl	80004d0 <__aeabi_f2d>
 8001614:	4604      	mov	r4, r0
 8001616:	460d      	mov	r5, r1
 8001618:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800161c:	f7fe ff58 	bl	80004d0 <__aeabi_f2d>
 8001620:	a325      	add	r3, pc, #148	@ (adr r3, 80016b8 <main+0x4b8>)
 8001622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001626:	f7fe ffab 	bl	8000580 <__aeabi_dmul>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4620      	mov	r0, r4
 8001630:	4629      	mov	r1, r5
 8001632:	f7ff f8cf 	bl	80007d4 <__aeabi_ddiv>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	f7ff fa61 	bl	8000b04 <__aeabi_d2f>
 8001642:	4603      	mov	r3, r0
 8001644:	64bb      	str	r3, [r7, #72]	@ 0x48
		  float capacitance = - 1 / (2 * M_PI * frequency * reactance);
 8001646:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800164a:	f7fe ff41 	bl	80004d0 <__aeabi_f2d>
 800164e:	a31a      	add	r3, pc, #104	@ (adr r3, 80016b8 <main+0x4b8>)
 8001650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001654:	f7fe ff94 	bl	8000580 <__aeabi_dmul>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4614      	mov	r4, r2
 800165e:	461d      	mov	r5, r3
 8001660:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001662:	f7fe ff35 	bl	80004d0 <__aeabi_f2d>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4620      	mov	r0, r4
 800166c:	4629      	mov	r1, r5
 800166e:	f7fe ff87 	bl	8000580 <__aeabi_dmul>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	f04f 0000 	mov.w	r0, #0
 800167a:	4912      	ldr	r1, [pc, #72]	@ (80016c4 <main+0x4c4>)
 800167c:	f7ff f8aa 	bl	80007d4 <__aeabi_ddiv>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4610      	mov	r0, r2
 8001686:	4619      	mov	r1, r3
 8001688:	f7ff fa3c 	bl	8000b04 <__aeabi_d2f>
 800168c:	4603      	mov	r3, r0
 800168e:	647b      	str	r3, [r7, #68]	@ 0x44
		  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8001690:	4b0d      	ldr	r3, [pc, #52]	@ (80016c8 <main+0x4c8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2200      	movs	r2, #0
 8001696:	625a      	str	r2, [r3, #36]	@ 0x24
		  start_time = Get_Time_us();
 8001698:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800169c:	469c      	mov	ip, r3
 800169e:	f7ff fd9f 	bl	80011e0 <Get_Time_us.0>
 80016a2:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 80016a6:	e6d1      	b.n	800144c <main+0x24c>

	  } else {
		  i++;
 80016a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80016ac:	3301      	adds	r3, #1
 80016ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	  ch0_data[i] = ADC_Channel0();
 80016b2:	e6cb      	b.n	800144c <main+0x24c>
 80016b4:	f3af 8000 	nop.w
 80016b8:	54442d18 	.word	0x54442d18
 80016bc:	401921fb 	.word	0x401921fb
 80016c0:	40590000 	.word	0x40590000
 80016c4:	bff00000 	.word	0xbff00000
 80016c8:	200000c8 	.word	0x200000c8

080016cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b094      	sub	sp, #80	@ 0x50
 80016d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016d2:	f107 031c 	add.w	r3, r7, #28
 80016d6:	2234      	movs	r2, #52	@ 0x34
 80016d8:	2100      	movs	r1, #0
 80016da:	4618      	mov	r0, r3
 80016dc:	f004 fd09 	bl	80060f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e0:	f107 0308 	add.w	r3, r7, #8
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f0:	2300      	movs	r3, #0
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	4b29      	ldr	r3, [pc, #164]	@ (800179c <SystemClock_Config+0xd0>)
 80016f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f8:	4a28      	ldr	r2, [pc, #160]	@ (800179c <SystemClock_Config+0xd0>)
 80016fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001700:	4b26      	ldr	r3, [pc, #152]	@ (800179c <SystemClock_Config+0xd0>)
 8001702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001704:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800170c:	2300      	movs	r3, #0
 800170e:	603b      	str	r3, [r7, #0]
 8001710:	4b23      	ldr	r3, [pc, #140]	@ (80017a0 <SystemClock_Config+0xd4>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a22      	ldr	r2, [pc, #136]	@ (80017a0 <SystemClock_Config+0xd4>)
 8001716:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	4b20      	ldr	r3, [pc, #128]	@ (80017a0 <SystemClock_Config+0xd4>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001724:	603b      	str	r3, [r7, #0]
 8001726:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001728:	2301      	movs	r3, #1
 800172a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800172c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001730:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001732:	2302      	movs	r3, #2
 8001734:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001736:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800173a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800173c:	2304      	movs	r3, #4
 800173e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001740:	23a8      	movs	r3, #168	@ 0xa8
 8001742:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001744:	2302      	movs	r3, #2
 8001746:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001748:	2307      	movs	r3, #7
 800174a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800174c:	2302      	movs	r3, #2
 800174e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001750:	f107 031c 	add.w	r3, r7, #28
 8001754:	4618      	mov	r0, r3
 8001756:	f002 fba7 	bl	8003ea8 <HAL_RCC_OscConfig>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001760:	f000 fa2e 	bl	8001bc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001764:	230f      	movs	r3, #15
 8001766:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001768:	2302      	movs	r3, #2
 800176a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800176c:	2300      	movs	r3, #0
 800176e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001770:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001774:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001776:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800177a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800177c:	f107 0308 	add.w	r3, r7, #8
 8001780:	2105      	movs	r1, #5
 8001782:	4618      	mov	r0, r3
 8001784:	f001 fd1c 	bl	80031c0 <HAL_RCC_ClockConfig>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800178e:	f000 fa17 	bl	8001bc0 <Error_Handler>
  }
}
 8001792:	bf00      	nop
 8001794:	3750      	adds	r7, #80	@ 0x50
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40023800 	.word	0x40023800
 80017a0:	40007000 	.word	0x40007000

080017a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017aa:	463b      	mov	r3, r7
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80017b6:	4b21      	ldr	r3, [pc, #132]	@ (800183c <MX_ADC1_Init+0x98>)
 80017b8:	4a21      	ldr	r2, [pc, #132]	@ (8001840 <MX_ADC1_Init+0x9c>)
 80017ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017bc:	4b1f      	ldr	r3, [pc, #124]	@ (800183c <MX_ADC1_Init+0x98>)
 80017be:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80017c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017c4:	4b1d      	ldr	r3, [pc, #116]	@ (800183c <MX_ADC1_Init+0x98>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80017ca:	4b1c      	ldr	r3, [pc, #112]	@ (800183c <MX_ADC1_Init+0x98>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017d0:	4b1a      	ldr	r3, [pc, #104]	@ (800183c <MX_ADC1_Init+0x98>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017d6:	4b19      	ldr	r3, [pc, #100]	@ (800183c <MX_ADC1_Init+0x98>)
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017de:	4b17      	ldr	r3, [pc, #92]	@ (800183c <MX_ADC1_Init+0x98>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017e4:	4b15      	ldr	r3, [pc, #84]	@ (800183c <MX_ADC1_Init+0x98>)
 80017e6:	4a17      	ldr	r2, [pc, #92]	@ (8001844 <MX_ADC1_Init+0xa0>)
 80017e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017ea:	4b14      	ldr	r3, [pc, #80]	@ (800183c <MX_ADC1_Init+0x98>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017f0:	4b12      	ldr	r3, [pc, #72]	@ (800183c <MX_ADC1_Init+0x98>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017f6:	4b11      	ldr	r3, [pc, #68]	@ (800183c <MX_ADC1_Init+0x98>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017fe:	4b0f      	ldr	r3, [pc, #60]	@ (800183c <MX_ADC1_Init+0x98>)
 8001800:	2201      	movs	r2, #1
 8001802:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001804:	480d      	ldr	r0, [pc, #52]	@ (800183c <MX_ADC1_Init+0x98>)
 8001806:	f000 fe3d 	bl	8002484 <HAL_ADC_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001810:	f000 f9d6 	bl	8001bc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001814:	2309      	movs	r3, #9
 8001816:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001818:	2301      	movs	r3, #1
 800181a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800181c:	2300      	movs	r3, #0
 800181e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001820:	463b      	mov	r3, r7
 8001822:	4619      	mov	r1, r3
 8001824:	4805      	ldr	r0, [pc, #20]	@ (800183c <MX_ADC1_Init+0x98>)
 8001826:	f000 fe71 	bl	800250c <HAL_ADC_ConfigChannel>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001830:	f000 f9c6 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001834:	bf00      	nop
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000028 	.word	0x20000028
 8001840:	40012000 	.word	0x40012000
 8001844:	0f000001 	.word	0x0f000001

08001848 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800184c:	4b17      	ldr	r3, [pc, #92]	@ (80018ac <MX_SPI1_Init+0x64>)
 800184e:	4a18      	ldr	r2, [pc, #96]	@ (80018b0 <MX_SPI1_Init+0x68>)
 8001850:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001852:	4b16      	ldr	r3, [pc, #88]	@ (80018ac <MX_SPI1_Init+0x64>)
 8001854:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001858:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800185a:	4b14      	ldr	r3, [pc, #80]	@ (80018ac <MX_SPI1_Init+0x64>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001860:	4b12      	ldr	r3, [pc, #72]	@ (80018ac <MX_SPI1_Init+0x64>)
 8001862:	2200      	movs	r2, #0
 8001864:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001866:	4b11      	ldr	r3, [pc, #68]	@ (80018ac <MX_SPI1_Init+0x64>)
 8001868:	2202      	movs	r2, #2
 800186a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800186c:	4b0f      	ldr	r3, [pc, #60]	@ (80018ac <MX_SPI1_Init+0x64>)
 800186e:	2200      	movs	r2, #0
 8001870:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001872:	4b0e      	ldr	r3, [pc, #56]	@ (80018ac <MX_SPI1_Init+0x64>)
 8001874:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001878:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800187a:	4b0c      	ldr	r3, [pc, #48]	@ (80018ac <MX_SPI1_Init+0x64>)
 800187c:	2230      	movs	r2, #48	@ 0x30
 800187e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001880:	4b0a      	ldr	r3, [pc, #40]	@ (80018ac <MX_SPI1_Init+0x64>)
 8001882:	2200      	movs	r2, #0
 8001884:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001886:	4b09      	ldr	r3, [pc, #36]	@ (80018ac <MX_SPI1_Init+0x64>)
 8001888:	2200      	movs	r2, #0
 800188a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800188c:	4b07      	ldr	r3, [pc, #28]	@ (80018ac <MX_SPI1_Init+0x64>)
 800188e:	2200      	movs	r2, #0
 8001890:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001892:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <MX_SPI1_Init+0x64>)
 8001894:	220a      	movs	r2, #10
 8001896:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001898:	4804      	ldr	r0, [pc, #16]	@ (80018ac <MX_SPI1_Init+0x64>)
 800189a:	f002 fda3 	bl	80043e4 <HAL_SPI_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018a4:	f000 f98c 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000070 	.word	0x20000070
 80018b0:	40013000 	.word	0x40013000

080018b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ba:	f107 0308 	add.w	r3, r7, #8
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c8:	463b      	mov	r3, r7
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001948 <MX_TIM2_Init+0x94>)
 80018d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 80018d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001948 <MX_TIM2_Init+0x94>)
 80018da:	22a7      	movs	r2, #167	@ 0xa7
 80018dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018de:	4b1a      	ldr	r3, [pc, #104]	@ (8001948 <MX_TIM2_Init+0x94>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80018e4:	4b18      	ldr	r3, [pc, #96]	@ (8001948 <MX_TIM2_Init+0x94>)
 80018e6:	f04f 32ff 	mov.w	r2, #4294967295
 80018ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ec:	4b16      	ldr	r3, [pc, #88]	@ (8001948 <MX_TIM2_Init+0x94>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018f2:	4b15      	ldr	r3, [pc, #84]	@ (8001948 <MX_TIM2_Init+0x94>)
 80018f4:	2280      	movs	r2, #128	@ 0x80
 80018f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018f8:	4813      	ldr	r0, [pc, #76]	@ (8001948 <MX_TIM2_Init+0x94>)
 80018fa:	f003 f9c5 	bl	8004c88 <HAL_TIM_Base_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001904:	f000 f95c 	bl	8001bc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001908:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800190c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800190e:	f107 0308 	add.w	r3, r7, #8
 8001912:	4619      	mov	r1, r3
 8001914:	480c      	ldr	r0, [pc, #48]	@ (8001948 <MX_TIM2_Init+0x94>)
 8001916:	f003 fb5f 	bl	8004fd8 <HAL_TIM_ConfigClockSource>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001920:	f000 f94e 	bl	8001bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001924:	2300      	movs	r3, #0
 8001926:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001928:	2300      	movs	r3, #0
 800192a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800192c:	463b      	mov	r3, r7
 800192e:	4619      	mov	r1, r3
 8001930:	4805      	ldr	r0, [pc, #20]	@ (8001948 <MX_TIM2_Init+0x94>)
 8001932:	f003 fd91 	bl	8005458 <HAL_TIMEx_MasterConfigSynchronization>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800193c:	f000 f940 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001940:	bf00      	nop
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	200000c8 	.word	0x200000c8

0800194c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001950:	4b11      	ldr	r3, [pc, #68]	@ (8001998 <MX_USART3_UART_Init+0x4c>)
 8001952:	4a12      	ldr	r2, [pc, #72]	@ (800199c <MX_USART3_UART_Init+0x50>)
 8001954:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001956:	4b10      	ldr	r3, [pc, #64]	@ (8001998 <MX_USART3_UART_Init+0x4c>)
 8001958:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800195c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800195e:	4b0e      	ldr	r3, [pc, #56]	@ (8001998 <MX_USART3_UART_Init+0x4c>)
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001964:	4b0c      	ldr	r3, [pc, #48]	@ (8001998 <MX_USART3_UART_Init+0x4c>)
 8001966:	2200      	movs	r2, #0
 8001968:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800196a:	4b0b      	ldr	r3, [pc, #44]	@ (8001998 <MX_USART3_UART_Init+0x4c>)
 800196c:	2200      	movs	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001970:	4b09      	ldr	r3, [pc, #36]	@ (8001998 <MX_USART3_UART_Init+0x4c>)
 8001972:	220c      	movs	r2, #12
 8001974:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001976:	4b08      	ldr	r3, [pc, #32]	@ (8001998 <MX_USART3_UART_Init+0x4c>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800197c:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <MX_USART3_UART_Init+0x4c>)
 800197e:	2200      	movs	r2, #0
 8001980:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001982:	4805      	ldr	r0, [pc, #20]	@ (8001998 <MX_USART3_UART_Init+0x4c>)
 8001984:	f003 fdf8 	bl	8005578 <HAL_UART_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800198e:	f000 f917 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000110 	.word	0x20000110
 800199c:	40004800 	.word	0x40004800

080019a0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80019a4:	4b14      	ldr	r3, [pc, #80]	@ (80019f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019a6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80019aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80019ac:	4b12      	ldr	r3, [pc, #72]	@ (80019f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019ae:	2206      	movs	r2, #6
 80019b0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80019b2:	4b11      	ldr	r3, [pc, #68]	@ (80019f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019b4:	2202      	movs	r2, #2
 80019b6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80019b8:	4b0f      	ldr	r3, [pc, #60]	@ (80019f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80019be:	4b0e      	ldr	r3, [pc, #56]	@ (80019f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019c0:	2202      	movs	r2, #2
 80019c2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80019c4:	4b0c      	ldr	r3, [pc, #48]	@ (80019f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80019ca:	4b0b      	ldr	r3, [pc, #44]	@ (80019f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80019d0:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80019d6:	4b08      	ldr	r3, [pc, #32]	@ (80019f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019d8:	2201      	movs	r2, #1
 80019da:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80019dc:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019de:	2200      	movs	r2, #0
 80019e0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80019e2:	4805      	ldr	r0, [pc, #20]	@ (80019f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019e4:	f001 fab2 	bl	8002f4c <HAL_PCD_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80019ee:	f000 f8e7 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000158 	.word	0x20000158

080019fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08c      	sub	sp, #48	@ 0x30
 8001a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a02:	f107 031c 	add.w	r3, r7, #28
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	60da      	str	r2, [r3, #12]
 8001a10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
 8001a16:	4b5d      	ldr	r3, [pc, #372]	@ (8001b8c <MX_GPIO_Init+0x190>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1a:	4a5c      	ldr	r2, [pc, #368]	@ (8001b8c <MX_GPIO_Init+0x190>)
 8001a1c:	f043 0304 	orr.w	r3, r3, #4
 8001a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a22:	4b5a      	ldr	r3, [pc, #360]	@ (8001b8c <MX_GPIO_Init+0x190>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	61bb      	str	r3, [r7, #24]
 8001a2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	4b56      	ldr	r3, [pc, #344]	@ (8001b8c <MX_GPIO_Init+0x190>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	4a55      	ldr	r2, [pc, #340]	@ (8001b8c <MX_GPIO_Init+0x190>)
 8001a38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a3e:	4b53      	ldr	r3, [pc, #332]	@ (8001b8c <MX_GPIO_Init+0x190>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	4b4f      	ldr	r3, [pc, #316]	@ (8001b8c <MX_GPIO_Init+0x190>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a52:	4a4e      	ldr	r2, [pc, #312]	@ (8001b8c <MX_GPIO_Init+0x190>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a5a:	4b4c      	ldr	r3, [pc, #304]	@ (8001b8c <MX_GPIO_Init+0x190>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	4b48      	ldr	r3, [pc, #288]	@ (8001b8c <MX_GPIO_Init+0x190>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	4a47      	ldr	r2, [pc, #284]	@ (8001b8c <MX_GPIO_Init+0x190>)
 8001a70:	f043 0302 	orr.w	r3, r3, #2
 8001a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a76:	4b45      	ldr	r3, [pc, #276]	@ (8001b8c <MX_GPIO_Init+0x190>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	4b41      	ldr	r3, [pc, #260]	@ (8001b8c <MX_GPIO_Init+0x190>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8a:	4a40      	ldr	r2, [pc, #256]	@ (8001b8c <MX_GPIO_Init+0x190>)
 8001a8c:	f043 0308 	orr.w	r3, r3, #8
 8001a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a92:	4b3e      	ldr	r3, [pc, #248]	@ (8001b8c <MX_GPIO_Init+0x190>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	4b3a      	ldr	r3, [pc, #232]	@ (8001b8c <MX_GPIO_Init+0x190>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	4a39      	ldr	r2, [pc, #228]	@ (8001b8c <MX_GPIO_Init+0x190>)
 8001aa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aae:	4b37      	ldr	r3, [pc, #220]	@ (8001b8c <MX_GPIO_Init+0x190>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001aba:	2200      	movs	r2, #0
 8001abc:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001ac0:	4833      	ldr	r0, [pc, #204]	@ (8001b90 <MX_GPIO_Init+0x194>)
 8001ac2:	f001 f9f7 	bl	8002eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_RESET);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001acc:	4831      	ldr	r0, [pc, #196]	@ (8001b94 <MX_GPIO_Init+0x198>)
 8001ace:	f001 f9f1 	bl	8002eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCP3202_NCS_GPIO_Port, MCP3202_NCS_Pin, GPIO_PIN_SET);
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ad8:	482e      	ldr	r0, [pc, #184]	@ (8001b94 <MX_GPIO_Init+0x198>)
 8001ada:	f001 f9eb 	bl	8002eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2140      	movs	r1, #64	@ 0x40
 8001ae2:	482d      	ldr	r0, [pc, #180]	@ (8001b98 <MX_GPIO_Init+0x19c>)
 8001ae4:	f001 f9e6 	bl	8002eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001ae8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aee:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001af8:	f107 031c 	add.w	r3, r7, #28
 8001afc:	4619      	mov	r1, r3
 8001afe:	4827      	ldr	r0, [pc, #156]	@ (8001b9c <MX_GPIO_Init+0x1a0>)
 8001b00:	f001 f844 	bl	8002b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001b04:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2300      	movs	r3, #0
 8001b14:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b16:	f107 031c 	add.w	r3, r7, #28
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	481c      	ldr	r0, [pc, #112]	@ (8001b90 <MX_GPIO_Init+0x194>)
 8001b1e:	f001 f835 	bl	8002b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : AD9833_NCS_Pin MCP3202_NCS_Pin */
  GPIO_InitStruct.Pin = AD9833_NCS_Pin|MCP3202_NCS_Pin;
 8001b22:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b30:	2303      	movs	r3, #3
 8001b32:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b34:	f107 031c 	add.w	r3, r7, #28
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4816      	ldr	r0, [pc, #88]	@ (8001b94 <MX_GPIO_Init+0x198>)
 8001b3c:	f001 f826 	bl	8002b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001b40:	2340      	movs	r3, #64	@ 0x40
 8001b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b44:	2301      	movs	r3, #1
 8001b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001b50:	f107 031c 	add.w	r3, r7, #28
 8001b54:	4619      	mov	r1, r3
 8001b56:	4810      	ldr	r0, [pc, #64]	@ (8001b98 <MX_GPIO_Init+0x19c>)
 8001b58:	f001 f818 	bl	8002b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001b5c:	2380      	movs	r3, #128	@ 0x80
 8001b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b60:	2300      	movs	r3, #0
 8001b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b68:	f107 031c 	add.w	r3, r7, #28
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	480a      	ldr	r0, [pc, #40]	@ (8001b98 <MX_GPIO_Init+0x19c>)
 8001b70:	f001 f80c 	bl	8002b8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b74:	2200      	movs	r2, #0
 8001b76:	2100      	movs	r1, #0
 8001b78:	2028      	movs	r0, #40	@ 0x28
 8001b7a:	f000 ffd0 	bl	8002b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b7e:	2028      	movs	r0, #40	@ 0x28
 8001b80:	f000 ffe9 	bl	8002b56 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b84:	bf00      	nop
 8001b86:	3730      	adds	r7, #48	@ 0x30
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40020400 	.word	0x40020400
 8001b94:	40020c00 	.word	0x40020c00
 8001b98:	40021800 	.word	0x40021800
 8001b9c:	40020800 	.word	0x40020800

08001ba0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin);
 8001baa:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001bae:	4803      	ldr	r0, [pc, #12]	@ (8001bbc <HAL_GPIO_EXTI_Callback+0x1c>)
 8001bb0:	f001 f999 	bl	8002ee6 <HAL_GPIO_TogglePin>
}
 8001bb4:	bf00      	nop
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40020400 	.word	0x40020400

08001bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc4:	b672      	cpsid	i
}
 8001bc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bc8:	bf00      	nop
 8001bca:	e7fd      	b.n	8001bc8 <Error_Handler+0x8>
 8001bcc:	0000      	movs	r0, r0
	...

08001bd0 <calculateError>:
#include <float.h>
#include <stdbool.h>

// Function to calculate the error between the input data and a sine wave
float calculateError(float data[], float timestamps[], int dataLength,
                      float amplitude, float phase, float offset, float frequency) {
 8001bd0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001bd4:	b08e      	sub	sp, #56	@ 0x38
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	61f8      	str	r0, [r7, #28]
 8001bda:	61b9      	str	r1, [r7, #24]
 8001bdc:	617a      	str	r2, [r7, #20]
 8001bde:	ed87 0a04 	vstr	s0, [r7, #16]
 8001be2:	edc7 0a03 	vstr	s1, [r7, #12]
 8001be6:	ed87 1a02 	vstr	s2, [r7, #8]
 8001bea:	edc7 1a01 	vstr	s3, [r7, #4]
    double error = 0.0;
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    for (int i = 0; i < dataLength; i++) {
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bfe:	e071      	b.n	8001ce4 <calculateError+0x114>
        float sineValue = amplitude * sin(2 * M_PI * frequency * timestamps[i] + phase) + offset;
 8001c00:	6938      	ldr	r0, [r7, #16]
 8001c02:	f7fe fc65 	bl	80004d0 <__aeabi_f2d>
 8001c06:	4604      	mov	r4, r0
 8001c08:	460d      	mov	r5, r1
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7fe fc60 	bl	80004d0 <__aeabi_f2d>
 8001c10:	a33d      	add	r3, pc, #244	@ (adr r3, 8001d08 <calculateError+0x138>)
 8001c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c16:	f7fe fcb3 	bl	8000580 <__aeabi_dmul>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4690      	mov	r8, r2
 8001c20:	4699      	mov	r9, r3
 8001c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4413      	add	r3, r2
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe fc4f 	bl	80004d0 <__aeabi_f2d>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4640      	mov	r0, r8
 8001c38:	4649      	mov	r1, r9
 8001c3a:	f7fe fca1 	bl	8000580 <__aeabi_dmul>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4690      	mov	r8, r2
 8001c44:	4699      	mov	r9, r3
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f7fe fc42 	bl	80004d0 <__aeabi_f2d>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4640      	mov	r0, r8
 8001c52:	4649      	mov	r1, r9
 8001c54:	f7fe fade 	bl	8000214 <__adddf3>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	ec43 2b17 	vmov	d7, r2, r3
 8001c60:	eeb0 0a47 	vmov.f32	s0, s14
 8001c64:	eef0 0a67 	vmov.f32	s1, s15
 8001c68:	f004 fac6 	bl	80061f8 <sin>
 8001c6c:	ec53 2b10 	vmov	r2, r3, d0
 8001c70:	4620      	mov	r0, r4
 8001c72:	4629      	mov	r1, r5
 8001c74:	f7fe fc84 	bl	8000580 <__aeabi_dmul>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4614      	mov	r4, r2
 8001c7e:	461d      	mov	r5, r3
 8001c80:	68b8      	ldr	r0, [r7, #8]
 8001c82:	f7fe fc25 	bl	80004d0 <__aeabi_f2d>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4620      	mov	r0, r4
 8001c8c:	4629      	mov	r1, r5
 8001c8e:	f7fe fac1 	bl	8000214 <__adddf3>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4610      	mov	r0, r2
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f7fe ff33 	bl	8000b04 <__aeabi_d2f>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
        float difference = sineValue - data[i];
 8001ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	69fa      	ldr	r2, [r7, #28]
 8001ca8:	4413      	add	r3, r2
 8001caa:	edd3 7a00 	vldr	s15, [r3]
 8001cae:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001cb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cb6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        error += difference * difference; // Squared error
 8001cba:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001cbe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001cc2:	ee17 0a90 	vmov	r0, s15
 8001cc6:	f7fe fc03 	bl	80004d0 <__aeabi_f2d>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001cd2:	f7fe fa9f 	bl	8000214 <__adddf3>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    for (int i = 0; i < dataLength; i++) {
 8001cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ce4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	db89      	blt.n	8001c00 <calculateError+0x30>
    }
    return error;
 8001cec:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001cf0:	f7fe ff08 	bl	8000b04 <__aeabi_d2f>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	ee07 3a90 	vmov	s15, r3
}
 8001cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8001cfe:	3738      	adds	r7, #56	@ 0x38
 8001d00:	46bd      	mov	sp, r7
 8001d02:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d06:	bf00      	nop
 8001d08:	54442d18 	.word	0x54442d18
 8001d0c:	401921fb 	.word	0x401921fb

08001d10 <max>:


float max(float data[], int dataLength) {
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
	float max = 0.0f;
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < dataLength; i++) {
 8001d20:	2300      	movs	r3, #0
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	e015      	b.n	8001d52 <max+0x42>
		if (data[i] > max) {
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	edd3 7a00 	vldr	s15, [r3]
 8001d32:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3e:	d505      	bpl.n	8001d4c <max+0x3c>
			max = data[i];
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	4413      	add	r3, r2
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < dataLength; i++) {
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	dbe5      	blt.n	8001d26 <max+0x16>
		}
	}
	return max;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	ee07 3a90 	vmov	s15, r3
}
 8001d60:	eeb0 0a67 	vmov.f32	s0, s15
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <min>:


float min(float data[], int dataLength) {
 8001d6e:	b480      	push	{r7}
 8001d70:	b085      	sub	sp, #20
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	6039      	str	r1, [r7, #0]
	float min = data[0];
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < dataLength; i++) {
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	e015      	b.n	8001db0 <min+0x42>
		if (data[i] < min) {
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	edd3 7a00 	vldr	s15, [r3]
 8001d90:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9c:	dd05      	ble.n	8001daa <min+0x3c>
			min = data[i];
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < dataLength; i++) {
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	3301      	adds	r3, #1
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	68ba      	ldr	r2, [r7, #8]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	dbe5      	blt.n	8001d84 <min+0x16>
		}
	}
	return min;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	ee07 3a90 	vmov	s15, r3
}
 8001dbe:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <find_offset>:
			}
		}
	}
}

float find_offset(float data[], int dataLength) {
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
	float total = 0;
 8001dd6:	f04f 0300 	mov.w	r3, #0
 8001dda:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < dataLength; i++) {
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	e00e      	b.n	8001e00 <find_offset+0x34>
		total += data[i];
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	edd3 7a00 	vldr	s15, [r3]
 8001dee:	ed97 7a03 	vldr	s14, [r7, #12]
 8001df2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df6:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i = 0; i < dataLength; i++) {
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	60bb      	str	r3, [r7, #8]
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	dbec      	blt.n	8001de2 <find_offset+0x16>
	}
	total = total / dataLength;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	ee07 3a90 	vmov	s15, r3
 8001e0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e12:	edd7 6a03 	vldr	s13, [r7, #12]
 8001e16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e1a:	edc7 7a03 	vstr	s15, [r7, #12]
	return total;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	ee07 3a90 	vmov	s15, r3
}
 8001e24:	eeb0 0a67 	vmov.f32	s0, s15
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <fitSineWave>:

// Function to fit sine wave to the data by sweeping amplitude, phase, and offset
void fitSineWave(const float data[], const float timestamps[], int dataLength, float frequency,
				float* bestAmplitude, float* bestPhase, float* bestOffset) {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	ed2d 8b02 	vpush	{d8}
 8001e3a:	b094      	sub	sp, #80	@ 0x50
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6178      	str	r0, [r7, #20]
 8001e40:	6139      	str	r1, [r7, #16]
 8001e42:	60fa      	str	r2, [r7, #12]
 8001e44:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e48:	607b      	str	r3, [r7, #4]

    float amplitudeMin = 0.01, amplitudeMax = 1.0, amplitudeStep = 0.01;
 8001e4a:	4b38      	ldr	r3, [pc, #224]	@ (8001f2c <fitSineWave+0xf8>)
 8001e4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e4e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e52:	643b      	str	r3, [r7, #64]	@ 0x40
 8001e54:	4b35      	ldr	r3, [pc, #212]	@ (8001f2c <fitSineWave+0xf8>)
 8001e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float phaseMin = - M_PI, phaseMax = M_PI, phaseStep = 0.01;
 8001e58:	4b35      	ldr	r3, [pc, #212]	@ (8001f30 <fitSineWave+0xfc>)
 8001e5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e5c:	4b35      	ldr	r3, [pc, #212]	@ (8001f34 <fitSineWave+0x100>)
 8001e5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e60:	4b32      	ldr	r3, [pc, #200]	@ (8001f2c <fitSineWave+0xf8>)
 8001e62:	633b      	str	r3, [r7, #48]	@ 0x30
    float offsetMin = 0.5, offsetMax = 2.0, offsetStep = 0.01;
 8001e64:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8001e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e6a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e70:	4b2e      	ldr	r3, [pc, #184]	@ (8001f2c <fitSineWave+0xf8>)
 8001e72:	627b      	str	r3, [r7, #36]	@ 0x24

    // SImplest (worst) method for sine fitting.
    // Bad guesses for amplitude and offset, then recursively find the phase angle.
    float A = (max(data, dataLength) - min(data, dataLength)) / 2;
 8001e74:	68f9      	ldr	r1, [r7, #12]
 8001e76:	6978      	ldr	r0, [r7, #20]
 8001e78:	f7ff ff4a 	bl	8001d10 <max>
 8001e7c:	eeb0 8a40 	vmov.f32	s16, s0
 8001e80:	68f9      	ldr	r1, [r7, #12]
 8001e82:	6978      	ldr	r0, [r7, #20]
 8001e84:	f7ff ff73 	bl	8001d6e <min>
 8001e88:	eef0 7a40 	vmov.f32	s15, s0
 8001e8c:	ee38 7a67 	vsub.f32	s14, s16, s15
 8001e90:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001e94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e98:	edc7 7a08 	vstr	s15, [r7, #32]
//    float O = (max(data, dataLength) + min(data, dataLength)) / 2;
    float O = find_offset(data, dataLength);
 8001e9c:	68f9      	ldr	r1, [r7, #12]
 8001e9e:	6978      	ldr	r0, [r7, #20]
 8001ea0:	f7ff ff94 	bl	8001dcc <find_offset>
 8001ea4:	ed87 0a07 	vstr	s0, [r7, #28]

//	*bestAmplitude = A;
//	*bestOffset = O;
//    *bestPhase = P;

    float minError = DBL_MAX; // Initialize with the largest possible number
 8001ea8:	f04f 43ff 	mov.w	r3, #2139095040	@ 0x7f800000
 8001eac:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (float phase = phaseMin; phase <= phaseMax; phase += phaseStep) {
 8001eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001eb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001eb2:	e02a      	b.n	8001f0a <fitSineWave+0xd6>
		// Calculate the error for the current combination of parameters
		float error = calculateError(data, timestamps, dataLength, A, phase, O, frequency);
 8001eb4:	edd7 1a02 	vldr	s3, [r7, #8]
 8001eb8:	ed97 1a07 	vldr	s2, [r7, #28]
 8001ebc:	edd7 0a12 	vldr	s1, [r7, #72]	@ 0x48
 8001ec0:	ed97 0a08 	vldr	s0, [r7, #32]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	6939      	ldr	r1, [r7, #16]
 8001ec8:	6978      	ldr	r0, [r7, #20]
 8001eca:	f7ff fe81 	bl	8001bd0 <calculateError>
 8001ece:	ed87 0a06 	vstr	s0, [r7, #24]

		// If this combination gives a smaller error, update the best parameters
		if (error < minError) {
 8001ed2:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ed6:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001eda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee2:	d50a      	bpl.n	8001efa <fitSineWave+0xc6>
			minError = error;
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
			*bestPhase = phase;
 8001ee8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001eea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001eec:	601a      	str	r2, [r3, #0]
		    *bestAmplitude = A;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a3a      	ldr	r2, [r7, #32]
 8001ef2:	601a      	str	r2, [r3, #0]
		    *bestOffset = O;
 8001ef4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ef6:	69fa      	ldr	r2, [r7, #28]
 8001ef8:	601a      	str	r2, [r3, #0]
    for (float phase = phaseMin; phase <= phaseMax; phase += phaseStep) {
 8001efa:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001efe:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001f02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f06:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
 8001f0a:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001f0e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001f12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1a:	d9cb      	bls.n	8001eb4 <fitSineWave+0x80>
//					*bestOffset = offset;
//				}
//			}
//		}
//    }
}
 8001f1c:	bf00      	nop
 8001f1e:	bf00      	nop
 8001f20:	3750      	adds	r7, #80	@ 0x50
 8001f22:	46bd      	mov	sp, r7
 8001f24:	ecbd 8b02 	vpop	{d8}
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	3c23d70a 	.word	0x3c23d70a
 8001f30:	c0490fdb 	.word	0xc0490fdb
 8001f34:	40490fdb 	.word	0x40490fdb

08001f38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	607b      	str	r3, [r7, #4]
 8001f42:	4b10      	ldr	r3, [pc, #64]	@ (8001f84 <HAL_MspInit+0x4c>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f46:	4a0f      	ldr	r2, [pc, #60]	@ (8001f84 <HAL_MspInit+0x4c>)
 8001f48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f84 <HAL_MspInit+0x4c>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f56:	607b      	str	r3, [r7, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	603b      	str	r3, [r7, #0]
 8001f5e:	4b09      	ldr	r3, [pc, #36]	@ (8001f84 <HAL_MspInit+0x4c>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f62:	4a08      	ldr	r2, [pc, #32]	@ (8001f84 <HAL_MspInit+0x4c>)
 8001f64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f6a:	4b06      	ldr	r3, [pc, #24]	@ (8001f84 <HAL_MspInit+0x4c>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800

08001f88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08a      	sub	sp, #40	@ 0x28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	f107 0314 	add.w	r3, r7, #20
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a17      	ldr	r2, [pc, #92]	@ (8002004 <HAL_ADC_MspInit+0x7c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d127      	bne.n	8001ffa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	4b16      	ldr	r3, [pc, #88]	@ (8002008 <HAL_ADC_MspInit+0x80>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb2:	4a15      	ldr	r2, [pc, #84]	@ (8002008 <HAL_ADC_MspInit+0x80>)
 8001fb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fba:	4b13      	ldr	r3, [pc, #76]	@ (8002008 <HAL_ADC_MspInit+0x80>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	4b0f      	ldr	r3, [pc, #60]	@ (8002008 <HAL_ADC_MspInit+0x80>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fce:	4a0e      	ldr	r2, [pc, #56]	@ (8002008 <HAL_ADC_MspInit+0x80>)
 8001fd0:	f043 0302 	orr.w	r3, r3, #2
 8001fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8002008 <HAL_ADC_MspInit+0x80>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fee:	f107 0314 	add.w	r3, r7, #20
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4805      	ldr	r0, [pc, #20]	@ (800200c <HAL_ADC_MspInit+0x84>)
 8001ff6:	f000 fdc9 	bl	8002b8c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001ffa:	bf00      	nop
 8001ffc:	3728      	adds	r7, #40	@ 0x28
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40012000 	.word	0x40012000
 8002008:	40023800 	.word	0x40023800
 800200c:	40020400 	.word	0x40020400

08002010 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08a      	sub	sp, #40	@ 0x28
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002018:	f107 0314 	add.w	r3, r7, #20
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a19      	ldr	r2, [pc, #100]	@ (8002094 <HAL_SPI_MspInit+0x84>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d12b      	bne.n	800208a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	4b18      	ldr	r3, [pc, #96]	@ (8002098 <HAL_SPI_MspInit+0x88>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800203a:	4a17      	ldr	r2, [pc, #92]	@ (8002098 <HAL_SPI_MspInit+0x88>)
 800203c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002040:	6453      	str	r3, [r2, #68]	@ 0x44
 8002042:	4b15      	ldr	r3, [pc, #84]	@ (8002098 <HAL_SPI_MspInit+0x88>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002046:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	4b11      	ldr	r3, [pc, #68]	@ (8002098 <HAL_SPI_MspInit+0x88>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002056:	4a10      	ldr	r2, [pc, #64]	@ (8002098 <HAL_SPI_MspInit+0x88>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	6313      	str	r3, [r2, #48]	@ 0x30
 800205e:	4b0e      	ldr	r3, [pc, #56]	@ (8002098 <HAL_SPI_MspInit+0x88>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800206a:	23e0      	movs	r3, #224	@ 0xe0
 800206c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206e:	2302      	movs	r3, #2
 8002070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002076:	2303      	movs	r3, #3
 8002078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800207a:	2305      	movs	r3, #5
 800207c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207e:	f107 0314 	add.w	r3, r7, #20
 8002082:	4619      	mov	r1, r3
 8002084:	4805      	ldr	r0, [pc, #20]	@ (800209c <HAL_SPI_MspInit+0x8c>)
 8002086:	f000 fd81 	bl	8002b8c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800208a:	bf00      	nop
 800208c:	3728      	adds	r7, #40	@ 0x28
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40013000 	.word	0x40013000
 8002098:	40023800 	.word	0x40023800
 800209c:	40020000 	.word	0x40020000

080020a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020b0:	d115      	bne.n	80020de <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	4b0c      	ldr	r3, [pc, #48]	@ (80020e8 <HAL_TIM_Base_MspInit+0x48>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ba:	4a0b      	ldr	r2, [pc, #44]	@ (80020e8 <HAL_TIM_Base_MspInit+0x48>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020c2:	4b09      	ldr	r3, [pc, #36]	@ (80020e8 <HAL_TIM_Base_MspInit+0x48>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2100      	movs	r1, #0
 80020d2:	201c      	movs	r0, #28
 80020d4:	f000 fd23 	bl	8002b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020d8:	201c      	movs	r0, #28
 80020da:	f000 fd3c 	bl	8002b56 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80020de:	bf00      	nop
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40023800 	.word	0x40023800

080020ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08a      	sub	sp, #40	@ 0x28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f4:	f107 0314 	add.w	r3, r7, #20
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a19      	ldr	r2, [pc, #100]	@ (8002170 <HAL_UART_MspInit+0x84>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d12c      	bne.n	8002168 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	4b18      	ldr	r3, [pc, #96]	@ (8002174 <HAL_UART_MspInit+0x88>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002116:	4a17      	ldr	r2, [pc, #92]	@ (8002174 <HAL_UART_MspInit+0x88>)
 8002118:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800211c:	6413      	str	r3, [r2, #64]	@ 0x40
 800211e:	4b15      	ldr	r3, [pc, #84]	@ (8002174 <HAL_UART_MspInit+0x88>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002122:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	4b11      	ldr	r3, [pc, #68]	@ (8002174 <HAL_UART_MspInit+0x88>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002132:	4a10      	ldr	r2, [pc, #64]	@ (8002174 <HAL_UART_MspInit+0x88>)
 8002134:	f043 0308 	orr.w	r3, r3, #8
 8002138:	6313      	str	r3, [r2, #48]	@ 0x30
 800213a:	4b0e      	ldr	r3, [pc, #56]	@ (8002174 <HAL_UART_MspInit+0x88>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002146:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800214a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214c:	2302      	movs	r3, #2
 800214e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002154:	2303      	movs	r3, #3
 8002156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002158:	2307      	movs	r3, #7
 800215a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800215c:	f107 0314 	add.w	r3, r7, #20
 8002160:	4619      	mov	r1, r3
 8002162:	4805      	ldr	r0, [pc, #20]	@ (8002178 <HAL_UART_MspInit+0x8c>)
 8002164:	f000 fd12 	bl	8002b8c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002168:	bf00      	nop
 800216a:	3728      	adds	r7, #40	@ 0x28
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40004800 	.word	0x40004800
 8002174:	40023800 	.word	0x40023800
 8002178:	40020c00 	.word	0x40020c00

0800217c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b0a0      	sub	sp, #128	@ 0x80
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002184:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]
 8002192:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002194:	f107 0310 	add.w	r3, r7, #16
 8002198:	225c      	movs	r2, #92	@ 0x5c
 800219a:	2100      	movs	r1, #0
 800219c:	4618      	mov	r0, r3
 800219e:	f003 ffa8 	bl	80060f2 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021aa:	d14e      	bne.n	800224a <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80021ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021b0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80021b2:	2300      	movs	r3, #0
 80021b4:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021b6:	f107 0310 	add.w	r3, r7, #16
 80021ba:	4618      	mov	r0, r3
 80021bc:	f001 f91a 	bl	80033f4 <HAL_RCCEx_PeriphCLKConfig>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80021c6:	f7ff fcfb 	bl	8001bc0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	4b21      	ldr	r3, [pc, #132]	@ (8002254 <HAL_PCD_MspInit+0xd8>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d2:	4a20      	ldr	r2, [pc, #128]	@ (8002254 <HAL_PCD_MspInit+0xd8>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021da:	4b1e      	ldr	r3, [pc, #120]	@ (8002254 <HAL_PCD_MspInit+0xd8>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80021e6:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80021ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ec:	2302      	movs	r3, #2
 80021ee:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f4:	2303      	movs	r3, #3
 80021f6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80021f8:	230a      	movs	r3, #10
 80021fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002200:	4619      	mov	r1, r3
 8002202:	4815      	ldr	r0, [pc, #84]	@ (8002258 <HAL_PCD_MspInit+0xdc>)
 8002204:	f000 fcc2 	bl	8002b8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002208:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800220c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800220e:	2300      	movs	r3, #0
 8002210:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002216:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800221a:	4619      	mov	r1, r3
 800221c:	480e      	ldr	r0, [pc, #56]	@ (8002258 <HAL_PCD_MspInit+0xdc>)
 800221e:	f000 fcb5 	bl	8002b8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002222:	4b0c      	ldr	r3, [pc, #48]	@ (8002254 <HAL_PCD_MspInit+0xd8>)
 8002224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002226:	4a0b      	ldr	r2, [pc, #44]	@ (8002254 <HAL_PCD_MspInit+0xd8>)
 8002228:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800222c:	6353      	str	r3, [r2, #52]	@ 0x34
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	4b08      	ldr	r3, [pc, #32]	@ (8002254 <HAL_PCD_MspInit+0xd8>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002236:	4a07      	ldr	r2, [pc, #28]	@ (8002254 <HAL_PCD_MspInit+0xd8>)
 8002238:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800223c:	6453      	str	r3, [r2, #68]	@ 0x44
 800223e:	4b05      	ldr	r3, [pc, #20]	@ (8002254 <HAL_PCD_MspInit+0xd8>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002242:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002246:	60bb      	str	r3, [r7, #8]
 8002248:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800224a:	bf00      	nop
 800224c:	3780      	adds	r7, #128	@ 0x80
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40023800 	.word	0x40023800
 8002258:	40020000 	.word	0x40020000

0800225c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002260:	bf00      	nop
 8002262:	e7fd      	b.n	8002260 <NMI_Handler+0x4>

08002264 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002268:	bf00      	nop
 800226a:	e7fd      	b.n	8002268 <HardFault_Handler+0x4>

0800226c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002270:	bf00      	nop
 8002272:	e7fd      	b.n	8002270 <MemManage_Handler+0x4>

08002274 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002278:	bf00      	nop
 800227a:	e7fd      	b.n	8002278 <BusFault_Handler+0x4>

0800227c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002280:	bf00      	nop
 8002282:	e7fd      	b.n	8002280 <UsageFault_Handler+0x4>

08002284 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022b2:	f000 f8a3 	bl	80023fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022c0:	4802      	ldr	r0, [pc, #8]	@ (80022cc <TIM2_IRQHandler+0x10>)
 80022c2:	f002 fd99 	bl	8004df8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	200000c8 	.word	0x200000c8

080022d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80022d4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80022d8:	f000 fe20 	bl	8002f1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022dc:	bf00      	nop
 80022de:	bd80      	pop	{r7, pc}

080022e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022e4:	4b06      	ldr	r3, [pc, #24]	@ (8002300 <SystemInit+0x20>)
 80022e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ea:	4a05      	ldr	r2, [pc, #20]	@ (8002300 <SystemInit+0x20>)
 80022ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002304:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800233c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002308:	f7ff ffea 	bl	80022e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800230c:	480c      	ldr	r0, [pc, #48]	@ (8002340 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800230e:	490d      	ldr	r1, [pc, #52]	@ (8002344 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002310:	4a0d      	ldr	r2, [pc, #52]	@ (8002348 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002314:	e002      	b.n	800231c <LoopCopyDataInit>

08002316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800231a:	3304      	adds	r3, #4

0800231c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800231c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800231e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002320:	d3f9      	bcc.n	8002316 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002322:	4a0a      	ldr	r2, [pc, #40]	@ (800234c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002324:	4c0a      	ldr	r4, [pc, #40]	@ (8002350 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002328:	e001      	b.n	800232e <LoopFillZerobss>

0800232a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800232a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800232c:	3204      	adds	r2, #4

0800232e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800232e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002330:	d3fb      	bcc.n	800232a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002332:	f003 fee7 	bl	8006104 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002336:	f7fe ff63 	bl	8001200 <main>
  bx  lr    
 800233a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800233c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002344:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002348:	08007470 	.word	0x08007470
  ldr r2, =_sbss
 800234c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002350:	20000640 	.word	0x20000640

08002354 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002354:	e7fe      	b.n	8002354 <ADC_IRQHandler>
	...

08002358 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800235c:	4b0e      	ldr	r3, [pc, #56]	@ (8002398 <HAL_Init+0x40>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a0d      	ldr	r2, [pc, #52]	@ (8002398 <HAL_Init+0x40>)
 8002362:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002366:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002368:	4b0b      	ldr	r3, [pc, #44]	@ (8002398 <HAL_Init+0x40>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a0a      	ldr	r2, [pc, #40]	@ (8002398 <HAL_Init+0x40>)
 800236e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002372:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002374:	4b08      	ldr	r3, [pc, #32]	@ (8002398 <HAL_Init+0x40>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a07      	ldr	r2, [pc, #28]	@ (8002398 <HAL_Init+0x40>)
 800237a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800237e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002380:	2003      	movs	r0, #3
 8002382:	f000 fbc1 	bl	8002b08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002386:	2000      	movs	r0, #0
 8002388:	f000 f808 	bl	800239c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800238c:	f7ff fdd4 	bl	8001f38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40023c00 	.word	0x40023c00

0800239c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023a4:	4b12      	ldr	r3, [pc, #72]	@ (80023f0 <HAL_InitTick+0x54>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4b12      	ldr	r3, [pc, #72]	@ (80023f4 <HAL_InitTick+0x58>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	4619      	mov	r1, r3
 80023ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 fbd9 	bl	8002b72 <HAL_SYSTICK_Config>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e00e      	b.n	80023e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b0f      	cmp	r3, #15
 80023ce:	d80a      	bhi.n	80023e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023d0:	2200      	movs	r2, #0
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	f04f 30ff 	mov.w	r0, #4294967295
 80023d8:	f000 fba1 	bl	8002b1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023dc:	4a06      	ldr	r2, [pc, #24]	@ (80023f8 <HAL_InitTick+0x5c>)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	e000      	b.n	80023e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	20000000 	.word	0x20000000
 80023f4:	20000008 	.word	0x20000008
 80023f8:	20000004 	.word	0x20000004

080023fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002400:	4b06      	ldr	r3, [pc, #24]	@ (800241c <HAL_IncTick+0x20>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	461a      	mov	r2, r3
 8002406:	4b06      	ldr	r3, [pc, #24]	@ (8002420 <HAL_IncTick+0x24>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4413      	add	r3, r2
 800240c:	4a04      	ldr	r2, [pc, #16]	@ (8002420 <HAL_IncTick+0x24>)
 800240e:	6013      	str	r3, [r2, #0]
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	20000008 	.word	0x20000008
 8002420:	2000063c 	.word	0x2000063c

08002424 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  return uwTick;
 8002428:	4b03      	ldr	r3, [pc, #12]	@ (8002438 <HAL_GetTick+0x14>)
 800242a:	681b      	ldr	r3, [r3, #0]
}
 800242c:	4618      	mov	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	2000063c 	.word	0x2000063c

0800243c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002444:	f7ff ffee 	bl	8002424 <HAL_GetTick>
 8002448:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002454:	d005      	beq.n	8002462 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002456:	4b0a      	ldr	r3, [pc, #40]	@ (8002480 <HAL_Delay+0x44>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4413      	add	r3, r2
 8002460:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002462:	bf00      	nop
 8002464:	f7ff ffde 	bl	8002424 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	429a      	cmp	r2, r3
 8002472:	d8f7      	bhi.n	8002464 <HAL_Delay+0x28>
  {
  }
}
 8002474:	bf00      	nop
 8002476:	bf00      	nop
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000008 	.word	0x20000008

08002484 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e033      	b.n	8002502 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d109      	bne.n	80024b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7ff fd70 	bl	8001f88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ba:	f003 0310 	and.w	r3, r3, #16
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d118      	bne.n	80024f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80024ca:	f023 0302 	bic.w	r3, r3, #2
 80024ce:	f043 0202 	orr.w	r2, r3, #2
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f94a 	bl	8002770 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e6:	f023 0303 	bic.w	r3, r3, #3
 80024ea:	f043 0201 	orr.w	r2, r3, #1
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	641a      	str	r2, [r3, #64]	@ 0x40
 80024f2:	e001      	b.n	80024f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002500:	7bfb      	ldrb	r3, [r7, #15]
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
	...

0800250c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002516:	2300      	movs	r3, #0
 8002518:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x1c>
 8002524:	2302      	movs	r3, #2
 8002526:	e113      	b.n	8002750 <HAL_ADC_ConfigChannel+0x244>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b09      	cmp	r3, #9
 8002536:	d925      	bls.n	8002584 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68d9      	ldr	r1, [r3, #12]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	b29b      	uxth	r3, r3
 8002544:	461a      	mov	r2, r3
 8002546:	4613      	mov	r3, r2
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	4413      	add	r3, r2
 800254c:	3b1e      	subs	r3, #30
 800254e:	2207      	movs	r2, #7
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43da      	mvns	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	400a      	ands	r2, r1
 800255c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68d9      	ldr	r1, [r3, #12]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	b29b      	uxth	r3, r3
 800256e:	4618      	mov	r0, r3
 8002570:	4603      	mov	r3, r0
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	4403      	add	r3, r0
 8002576:	3b1e      	subs	r3, #30
 8002578:	409a      	lsls	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	60da      	str	r2, [r3, #12]
 8002582:	e022      	b.n	80025ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6919      	ldr	r1, [r3, #16]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	b29b      	uxth	r3, r3
 8002590:	461a      	mov	r2, r3
 8002592:	4613      	mov	r3, r2
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	4413      	add	r3, r2
 8002598:	2207      	movs	r2, #7
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43da      	mvns	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	400a      	ands	r2, r1
 80025a6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6919      	ldr	r1, [r3, #16]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	4618      	mov	r0, r3
 80025ba:	4603      	mov	r3, r0
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	4403      	add	r3, r0
 80025c0:	409a      	lsls	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b06      	cmp	r3, #6
 80025d0:	d824      	bhi.n	800261c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	4613      	mov	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	3b05      	subs	r3, #5
 80025e4:	221f      	movs	r2, #31
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43da      	mvns	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	400a      	ands	r2, r1
 80025f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	b29b      	uxth	r3, r3
 8002600:	4618      	mov	r0, r3
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	4613      	mov	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4413      	add	r3, r2
 800260c:	3b05      	subs	r3, #5
 800260e:	fa00 f203 	lsl.w	r2, r0, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	635a      	str	r2, [r3, #52]	@ 0x34
 800261a:	e04c      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b0c      	cmp	r3, #12
 8002622:	d824      	bhi.n	800266e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	3b23      	subs	r3, #35	@ 0x23
 8002636:	221f      	movs	r2, #31
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43da      	mvns	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	400a      	ands	r2, r1
 8002644:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	b29b      	uxth	r3, r3
 8002652:	4618      	mov	r0, r3
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	3b23      	subs	r3, #35	@ 0x23
 8002660:	fa00 f203 	lsl.w	r2, r0, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	631a      	str	r2, [r3, #48]	@ 0x30
 800266c:	e023      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	3b41      	subs	r3, #65	@ 0x41
 8002680:	221f      	movs	r2, #31
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43da      	mvns	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	400a      	ands	r2, r1
 800268e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	b29b      	uxth	r3, r3
 800269c:	4618      	mov	r0, r3
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	3b41      	subs	r3, #65	@ 0x41
 80026aa:	fa00 f203 	lsl.w	r2, r0, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026b6:	4b29      	ldr	r3, [pc, #164]	@ (800275c <HAL_ADC_ConfigChannel+0x250>)
 80026b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a28      	ldr	r2, [pc, #160]	@ (8002760 <HAL_ADC_ConfigChannel+0x254>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d10f      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x1d8>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b12      	cmp	r3, #18
 80026ca:	d10b      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002760 <HAL_ADC_ConfigChannel+0x254>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d12b      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x23a>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a1c      	ldr	r2, [pc, #112]	@ (8002764 <HAL_ADC_ConfigChannel+0x258>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d003      	beq.n	8002700 <HAL_ADC_ConfigChannel+0x1f4>
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b11      	cmp	r3, #17
 80026fe:	d122      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a11      	ldr	r2, [pc, #68]	@ (8002764 <HAL_ADC_ConfigChannel+0x258>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d111      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002722:	4b11      	ldr	r3, [pc, #68]	@ (8002768 <HAL_ADC_ConfigChannel+0x25c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a11      	ldr	r2, [pc, #68]	@ (800276c <HAL_ADC_ConfigChannel+0x260>)
 8002728:	fba2 2303 	umull	r2, r3, r2, r3
 800272c:	0c9a      	lsrs	r2, r3, #18
 800272e:	4613      	mov	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002738:	e002      	b.n	8002740 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	3b01      	subs	r3, #1
 800273e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f9      	bne.n	800273a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	40012300 	.word	0x40012300
 8002760:	40012000 	.word	0x40012000
 8002764:	10000012 	.word	0x10000012
 8002768:	20000000 	.word	0x20000000
 800276c:	431bde83 	.word	0x431bde83

08002770 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002778:	4b79      	ldr	r3, [pc, #484]	@ (8002960 <ADC_Init+0x1f0>)
 800277a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	431a      	orrs	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6859      	ldr	r1, [r3, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	021a      	lsls	r2, r3, #8
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80027c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6859      	ldr	r1, [r3, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	430a      	orrs	r2, r1
 80027da:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6899      	ldr	r1, [r3, #8]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002802:	4a58      	ldr	r2, [pc, #352]	@ (8002964 <ADC_Init+0x1f4>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d022      	beq.n	800284e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002816:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6899      	ldr	r1, [r3, #8]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002838:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6899      	ldr	r1, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	e00f      	b.n	800286e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800285c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800286c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0202 	bic.w	r2, r2, #2
 800287c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6899      	ldr	r1, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	7e1b      	ldrb	r3, [r3, #24]
 8002888:	005a      	lsls	r2, r3, #1
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d01b      	beq.n	80028d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028aa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80028ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6859      	ldr	r1, [r3, #4]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c6:	3b01      	subs	r3, #1
 80028c8:	035a      	lsls	r2, r3, #13
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	e007      	b.n	80028e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028e2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80028f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	3b01      	subs	r3, #1
 8002900:	051a      	lsls	r2, r3, #20
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002918:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6899      	ldr	r1, [r3, #8]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002926:	025a      	lsls	r2, r3, #9
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800293e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6899      	ldr	r1, [r3, #8]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	029a      	lsls	r2, r3, #10
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	609a      	str	r2, [r3, #8]
}
 8002954:	bf00      	nop
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	40012300 	.word	0x40012300
 8002964:	0f000001 	.word	0x0f000001

08002968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002978:	4b0c      	ldr	r3, [pc, #48]	@ (80029ac <__NVIC_SetPriorityGrouping+0x44>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002984:	4013      	ands	r3, r2
 8002986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002990:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002994:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800299a:	4a04      	ldr	r2, [pc, #16]	@ (80029ac <__NVIC_SetPriorityGrouping+0x44>)
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	60d3      	str	r3, [r2, #12]
}
 80029a0:	bf00      	nop
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	e000ed00 	.word	0xe000ed00

080029b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029b4:	4b04      	ldr	r3, [pc, #16]	@ (80029c8 <__NVIC_GetPriorityGrouping+0x18>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	0a1b      	lsrs	r3, r3, #8
 80029ba:	f003 0307 	and.w	r3, r3, #7
}
 80029be:	4618      	mov	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	e000ed00 	.word	0xe000ed00

080029cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	db0b      	blt.n	80029f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029de:	79fb      	ldrb	r3, [r7, #7]
 80029e0:	f003 021f 	and.w	r2, r3, #31
 80029e4:	4907      	ldr	r1, [pc, #28]	@ (8002a04 <__NVIC_EnableIRQ+0x38>)
 80029e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ea:	095b      	lsrs	r3, r3, #5
 80029ec:	2001      	movs	r0, #1
 80029ee:	fa00 f202 	lsl.w	r2, r0, r2
 80029f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	e000e100 	.word	0xe000e100

08002a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	6039      	str	r1, [r7, #0]
 8002a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	db0a      	blt.n	8002a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	490c      	ldr	r1, [pc, #48]	@ (8002a54 <__NVIC_SetPriority+0x4c>)
 8002a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a26:	0112      	lsls	r2, r2, #4
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a30:	e00a      	b.n	8002a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	4908      	ldr	r1, [pc, #32]	@ (8002a58 <__NVIC_SetPriority+0x50>)
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	3b04      	subs	r3, #4
 8002a40:	0112      	lsls	r2, r2, #4
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	440b      	add	r3, r1
 8002a46:	761a      	strb	r2, [r3, #24]
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	e000e100 	.word	0xe000e100
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b089      	sub	sp, #36	@ 0x24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f1c3 0307 	rsb	r3, r3, #7
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	bf28      	it	cs
 8002a7a:	2304      	movcs	r3, #4
 8002a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	3304      	adds	r3, #4
 8002a82:	2b06      	cmp	r3, #6
 8002a84:	d902      	bls.n	8002a8c <NVIC_EncodePriority+0x30>
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	3b03      	subs	r3, #3
 8002a8a:	e000      	b.n	8002a8e <NVIC_EncodePriority+0x32>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a90:	f04f 32ff 	mov.w	r2, #4294967295
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43da      	mvns	r2, r3
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	401a      	ands	r2, r3
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002aae:	43d9      	mvns	r1, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab4:	4313      	orrs	r3, r2
         );
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3724      	adds	r7, #36	@ 0x24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
	...

08002ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ad4:	d301      	bcc.n	8002ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e00f      	b.n	8002afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ada:	4a0a      	ldr	r2, [pc, #40]	@ (8002b04 <SysTick_Config+0x40>)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ae2:	210f      	movs	r1, #15
 8002ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae8:	f7ff ff8e 	bl	8002a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aec:	4b05      	ldr	r3, [pc, #20]	@ (8002b04 <SysTick_Config+0x40>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002af2:	4b04      	ldr	r3, [pc, #16]	@ (8002b04 <SysTick_Config+0x40>)
 8002af4:	2207      	movs	r2, #7
 8002af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	e000e010 	.word	0xe000e010

08002b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff ff29 	bl	8002968 <__NVIC_SetPriorityGrouping>
}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b086      	sub	sp, #24
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	4603      	mov	r3, r0
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	607a      	str	r2, [r7, #4]
 8002b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b30:	f7ff ff3e 	bl	80029b0 <__NVIC_GetPriorityGrouping>
 8002b34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	68b9      	ldr	r1, [r7, #8]
 8002b3a:	6978      	ldr	r0, [r7, #20]
 8002b3c:	f7ff ff8e 	bl	8002a5c <NVIC_EncodePriority>
 8002b40:	4602      	mov	r2, r0
 8002b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b46:	4611      	mov	r1, r2
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff ff5d 	bl	8002a08 <__NVIC_SetPriority>
}
 8002b4e:	bf00      	nop
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b082      	sub	sp, #8
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff ff31 	bl	80029cc <__NVIC_EnableIRQ>
}
 8002b6a:	bf00      	nop
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b082      	sub	sp, #8
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff ffa2 	bl	8002ac4 <SysTick_Config>
 8002b80:	4603      	mov	r3, r0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
	...

08002b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b089      	sub	sp, #36	@ 0x24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]
 8002ba6:	e165      	b.n	8002e74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ba8:	2201      	movs	r2, #1
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	f040 8154 	bne.w	8002e6e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d005      	beq.n	8002bde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d130      	bne.n	8002c40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	2203      	movs	r2, #3
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c14:	2201      	movs	r2, #1
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4013      	ands	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	091b      	lsrs	r3, r3, #4
 8002c2a:	f003 0201 	and.w	r2, r3, #1
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 0303 	and.w	r3, r3, #3
 8002c48:	2b03      	cmp	r3, #3
 8002c4a:	d017      	beq.n	8002c7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	2203      	movs	r2, #3
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d123      	bne.n	8002cd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	08da      	lsrs	r2, r3, #3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3208      	adds	r2, #8
 8002c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	220f      	movs	r2, #15
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	691a      	ldr	r2, [r3, #16]
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	08da      	lsrs	r2, r3, #3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	3208      	adds	r2, #8
 8002cca:	69b9      	ldr	r1, [r7, #24]
 8002ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	2203      	movs	r2, #3
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 0203 	and.w	r2, r3, #3
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 80ae 	beq.w	8002e6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d12:	2300      	movs	r3, #0
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	4b5d      	ldr	r3, [pc, #372]	@ (8002e8c <HAL_GPIO_Init+0x300>)
 8002d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1a:	4a5c      	ldr	r2, [pc, #368]	@ (8002e8c <HAL_GPIO_Init+0x300>)
 8002d1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d20:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d22:	4b5a      	ldr	r3, [pc, #360]	@ (8002e8c <HAL_GPIO_Init+0x300>)
 8002d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d2e:	4a58      	ldr	r2, [pc, #352]	@ (8002e90 <HAL_GPIO_Init+0x304>)
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	089b      	lsrs	r3, r3, #2
 8002d34:	3302      	adds	r3, #2
 8002d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	220f      	movs	r2, #15
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a4f      	ldr	r2, [pc, #316]	@ (8002e94 <HAL_GPIO_Init+0x308>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d025      	beq.n	8002da6 <HAL_GPIO_Init+0x21a>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a4e      	ldr	r2, [pc, #312]	@ (8002e98 <HAL_GPIO_Init+0x30c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d01f      	beq.n	8002da2 <HAL_GPIO_Init+0x216>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a4d      	ldr	r2, [pc, #308]	@ (8002e9c <HAL_GPIO_Init+0x310>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d019      	beq.n	8002d9e <HAL_GPIO_Init+0x212>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a4c      	ldr	r2, [pc, #304]	@ (8002ea0 <HAL_GPIO_Init+0x314>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d013      	beq.n	8002d9a <HAL_GPIO_Init+0x20e>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a4b      	ldr	r2, [pc, #300]	@ (8002ea4 <HAL_GPIO_Init+0x318>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d00d      	beq.n	8002d96 <HAL_GPIO_Init+0x20a>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a4a      	ldr	r2, [pc, #296]	@ (8002ea8 <HAL_GPIO_Init+0x31c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d007      	beq.n	8002d92 <HAL_GPIO_Init+0x206>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a49      	ldr	r2, [pc, #292]	@ (8002eac <HAL_GPIO_Init+0x320>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d101      	bne.n	8002d8e <HAL_GPIO_Init+0x202>
 8002d8a:	2306      	movs	r3, #6
 8002d8c:	e00c      	b.n	8002da8 <HAL_GPIO_Init+0x21c>
 8002d8e:	2307      	movs	r3, #7
 8002d90:	e00a      	b.n	8002da8 <HAL_GPIO_Init+0x21c>
 8002d92:	2305      	movs	r3, #5
 8002d94:	e008      	b.n	8002da8 <HAL_GPIO_Init+0x21c>
 8002d96:	2304      	movs	r3, #4
 8002d98:	e006      	b.n	8002da8 <HAL_GPIO_Init+0x21c>
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e004      	b.n	8002da8 <HAL_GPIO_Init+0x21c>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e002      	b.n	8002da8 <HAL_GPIO_Init+0x21c>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <HAL_GPIO_Init+0x21c>
 8002da6:	2300      	movs	r3, #0
 8002da8:	69fa      	ldr	r2, [r7, #28]
 8002daa:	f002 0203 	and.w	r2, r2, #3
 8002dae:	0092      	lsls	r2, r2, #2
 8002db0:	4093      	lsls	r3, r2
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002db8:	4935      	ldr	r1, [pc, #212]	@ (8002e90 <HAL_GPIO_Init+0x304>)
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	089b      	lsrs	r3, r3, #2
 8002dbe:	3302      	adds	r3, #2
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dc6:	4b3a      	ldr	r3, [pc, #232]	@ (8002eb0 <HAL_GPIO_Init+0x324>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dea:	4a31      	ldr	r2, [pc, #196]	@ (8002eb0 <HAL_GPIO_Init+0x324>)
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002df0:	4b2f      	ldr	r3, [pc, #188]	@ (8002eb0 <HAL_GPIO_Init+0x324>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e14:	4a26      	ldr	r2, [pc, #152]	@ (8002eb0 <HAL_GPIO_Init+0x324>)
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e1a:	4b25      	ldr	r3, [pc, #148]	@ (8002eb0 <HAL_GPIO_Init+0x324>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	43db      	mvns	r3, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4013      	ands	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e3e:	4a1c      	ldr	r2, [pc, #112]	@ (8002eb0 <HAL_GPIO_Init+0x324>)
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e44:	4b1a      	ldr	r3, [pc, #104]	@ (8002eb0 <HAL_GPIO_Init+0x324>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4013      	ands	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e68:	4a11      	ldr	r2, [pc, #68]	@ (8002eb0 <HAL_GPIO_Init+0x324>)
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	3301      	adds	r3, #1
 8002e72:	61fb      	str	r3, [r7, #28]
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	2b0f      	cmp	r3, #15
 8002e78:	f67f ae96 	bls.w	8002ba8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e7c:	bf00      	nop
 8002e7e:	bf00      	nop
 8002e80:	3724      	adds	r7, #36	@ 0x24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	40013800 	.word	0x40013800
 8002e94:	40020000 	.word	0x40020000
 8002e98:	40020400 	.word	0x40020400
 8002e9c:	40020800 	.word	0x40020800
 8002ea0:	40020c00 	.word	0x40020c00
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40021400 	.word	0x40021400
 8002eac:	40021800 	.word	0x40021800
 8002eb0:	40013c00 	.word	0x40013c00

08002eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	807b      	strh	r3, [r7, #2]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ec4:	787b      	ldrb	r3, [r7, #1]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eca:	887a      	ldrh	r2, [r7, #2]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ed0:	e003      	b.n	8002eda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ed2:	887b      	ldrh	r3, [r7, #2]
 8002ed4:	041a      	lsls	r2, r3, #16
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	619a      	str	r2, [r3, #24]
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b085      	sub	sp, #20
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	460b      	mov	r3, r1
 8002ef0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ef8:	887a      	ldrh	r2, [r7, #2]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	4013      	ands	r3, r2
 8002efe:	041a      	lsls	r2, r3, #16
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	43d9      	mvns	r1, r3
 8002f04:	887b      	ldrh	r3, [r7, #2]
 8002f06:	400b      	ands	r3, r1
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	619a      	str	r2, [r3, #24]
}
 8002f0e:	bf00      	nop
 8002f10:	3714      	adds	r7, #20
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
	...

08002f1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f26:	4b08      	ldr	r3, [pc, #32]	@ (8002f48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f28:	695a      	ldr	r2, [r3, #20]
 8002f2a:	88fb      	ldrh	r3, [r7, #6]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d006      	beq.n	8002f40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f32:	4a05      	ldr	r2, [pc, #20]	@ (8002f48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f34:	88fb      	ldrh	r3, [r7, #6]
 8002f36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f38:	88fb      	ldrh	r3, [r7, #6]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fe fe30 	bl	8001ba0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f40:	bf00      	nop
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40013c00 	.word	0x40013c00

08002f4c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e108      	b.n	8003170 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d106      	bne.n	8002f7e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7ff f8ff 	bl	800217c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2203      	movs	r2, #3
 8002f82:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f8c:	d102      	bne.n	8002f94 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f002 fe15 	bl	8005bc8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	7c1a      	ldrb	r2, [r3, #16]
 8002fa6:	f88d 2000 	strb.w	r2, [sp]
 8002faa:	3304      	adds	r3, #4
 8002fac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fae:	f002 fda7 	bl	8005b00 <USB_CoreInit>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d005      	beq.n	8002fc4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e0d5      	b.n	8003170 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2100      	movs	r1, #0
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f002 fe0d 	bl	8005bea <USB_SetCurrentMode>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d005      	beq.n	8002fe2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2202      	movs	r2, #2
 8002fda:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e0c6      	b.n	8003170 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	73fb      	strb	r3, [r7, #15]
 8002fe6:	e04a      	b.n	800307e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002fe8:	7bfa      	ldrb	r2, [r7, #15]
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	4613      	mov	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	3315      	adds	r3, #21
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ffc:	7bfa      	ldrb	r2, [r7, #15]
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	4613      	mov	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	4413      	add	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	3314      	adds	r3, #20
 800300c:	7bfa      	ldrb	r2, [r7, #15]
 800300e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003010:	7bfa      	ldrb	r2, [r7, #15]
 8003012:	7bfb      	ldrb	r3, [r7, #15]
 8003014:	b298      	uxth	r0, r3
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	4413      	add	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	332e      	adds	r3, #46	@ 0x2e
 8003024:	4602      	mov	r2, r0
 8003026:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003028:	7bfa      	ldrb	r2, [r7, #15]
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	4613      	mov	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	3318      	adds	r3, #24
 8003038:	2200      	movs	r2, #0
 800303a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800303c:	7bfa      	ldrb	r2, [r7, #15]
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	4413      	add	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	331c      	adds	r3, #28
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003050:	7bfa      	ldrb	r2, [r7, #15]
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	4413      	add	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	3320      	adds	r3, #32
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003064:	7bfa      	ldrb	r2, [r7, #15]
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	4413      	add	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	3324      	adds	r3, #36	@ 0x24
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003078:	7bfb      	ldrb	r3, [r7, #15]
 800307a:	3301      	adds	r3, #1
 800307c:	73fb      	strb	r3, [r7, #15]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	791b      	ldrb	r3, [r3, #4]
 8003082:	7bfa      	ldrb	r2, [r7, #15]
 8003084:	429a      	cmp	r2, r3
 8003086:	d3af      	bcc.n	8002fe8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003088:	2300      	movs	r3, #0
 800308a:	73fb      	strb	r3, [r7, #15]
 800308c:	e044      	b.n	8003118 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800308e:	7bfa      	ldrb	r2, [r7, #15]
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	4413      	add	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	440b      	add	r3, r1
 800309c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80030a0:	2200      	movs	r2, #0
 80030a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030a4:	7bfa      	ldrb	r2, [r7, #15]
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	4413      	add	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80030b6:	7bfa      	ldrb	r2, [r7, #15]
 80030b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030ba:	7bfa      	ldrb	r2, [r7, #15]
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	4413      	add	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	440b      	add	r3, r1
 80030c8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80030cc:	2200      	movs	r2, #0
 80030ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030d0:	7bfa      	ldrb	r2, [r7, #15]
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030e6:	7bfa      	ldrb	r2, [r7, #15]
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	4413      	add	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030fc:	7bfa      	ldrb	r2, [r7, #15]
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	4613      	mov	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4413      	add	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800310e:	2200      	movs	r2, #0
 8003110:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003112:	7bfb      	ldrb	r3, [r7, #15]
 8003114:	3301      	adds	r3, #1
 8003116:	73fb      	strb	r3, [r7, #15]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	791b      	ldrb	r3, [r3, #4]
 800311c:	7bfa      	ldrb	r2, [r7, #15]
 800311e:	429a      	cmp	r2, r3
 8003120:	d3b5      	bcc.n	800308e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6818      	ldr	r0, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	7c1a      	ldrb	r2, [r3, #16]
 800312a:	f88d 2000 	strb.w	r2, [sp]
 800312e:	3304      	adds	r3, #4
 8003130:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003132:	f002 fda7 	bl	8005c84 <USB_DevInit>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2202      	movs	r2, #2
 8003140:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e013      	b.n	8003170 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	7b1b      	ldrb	r3, [r3, #12]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d102      	bne.n	8003164 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f80a 	bl	8003178 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f002 ff62 	bl	8006032 <USB_DevDisconnect>

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031aa:	f043 0303 	orr.w	r3, r3, #3
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e0cc      	b.n	800336e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031d4:	4b68      	ldr	r3, [pc, #416]	@ (8003378 <HAL_RCC_ClockConfig+0x1b8>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 030f 	and.w	r3, r3, #15
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d90c      	bls.n	80031fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e2:	4b65      	ldr	r3, [pc, #404]	@ (8003378 <HAL_RCC_ClockConfig+0x1b8>)
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ea:	4b63      	ldr	r3, [pc, #396]	@ (8003378 <HAL_RCC_ClockConfig+0x1b8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d001      	beq.n	80031fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e0b8      	b.n	800336e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d020      	beq.n	800324a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	d005      	beq.n	8003220 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003214:	4b59      	ldr	r3, [pc, #356]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	4a58      	ldr	r2, [pc, #352]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800321e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0308 	and.w	r3, r3, #8
 8003228:	2b00      	cmp	r3, #0
 800322a:	d005      	beq.n	8003238 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800322c:	4b53      	ldr	r3, [pc, #332]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	4a52      	ldr	r2, [pc, #328]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003236:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003238:	4b50      	ldr	r3, [pc, #320]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	494d      	ldr	r1, [pc, #308]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	4313      	orrs	r3, r2
 8003248:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	d044      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d107      	bne.n	800326e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325e:	4b47      	ldr	r3, [pc, #284]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d119      	bne.n	800329e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e07f      	b.n	800336e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2b02      	cmp	r3, #2
 8003274:	d003      	beq.n	800327e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800327a:	2b03      	cmp	r3, #3
 800327c:	d107      	bne.n	800328e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800327e:	4b3f      	ldr	r3, [pc, #252]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d109      	bne.n	800329e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e06f      	b.n	800336e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800328e:	4b3b      	ldr	r3, [pc, #236]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e067      	b.n	800336e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800329e:	4b37      	ldr	r3, [pc, #220]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f023 0203 	bic.w	r2, r3, #3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	4934      	ldr	r1, [pc, #208]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032b0:	f7ff f8b8 	bl	8002424 <HAL_GetTick>
 80032b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b6:	e00a      	b.n	80032ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032b8:	f7ff f8b4 	bl	8002424 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e04f      	b.n	800336e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ce:	4b2b      	ldr	r3, [pc, #172]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 020c 	and.w	r2, r3, #12
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	429a      	cmp	r2, r3
 80032de:	d1eb      	bne.n	80032b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032e0:	4b25      	ldr	r3, [pc, #148]	@ (8003378 <HAL_RCC_ClockConfig+0x1b8>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 030f 	and.w	r3, r3, #15
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d20c      	bcs.n	8003308 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ee:	4b22      	ldr	r3, [pc, #136]	@ (8003378 <HAL_RCC_ClockConfig+0x1b8>)
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f6:	4b20      	ldr	r3, [pc, #128]	@ (8003378 <HAL_RCC_ClockConfig+0x1b8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	429a      	cmp	r2, r3
 8003302:	d001      	beq.n	8003308 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e032      	b.n	800336e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b00      	cmp	r3, #0
 8003312:	d008      	beq.n	8003326 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003314:	4b19      	ldr	r3, [pc, #100]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	4916      	ldr	r1, [pc, #88]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003322:	4313      	orrs	r3, r2
 8003324:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d009      	beq.n	8003346 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003332:	4b12      	ldr	r3, [pc, #72]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	490e      	ldr	r1, [pc, #56]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	4313      	orrs	r3, r2
 8003344:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003346:	f000 fb7f 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 800334a:	4602      	mov	r2, r0
 800334c:	4b0b      	ldr	r3, [pc, #44]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	091b      	lsrs	r3, r3, #4
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	490a      	ldr	r1, [pc, #40]	@ (8003380 <HAL_RCC_ClockConfig+0x1c0>)
 8003358:	5ccb      	ldrb	r3, [r1, r3]
 800335a:	fa22 f303 	lsr.w	r3, r2, r3
 800335e:	4a09      	ldr	r2, [pc, #36]	@ (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 8003360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003362:	4b09      	ldr	r3, [pc, #36]	@ (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff f818 	bl	800239c <HAL_InitTick>

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	40023c00 	.word	0x40023c00
 800337c:	40023800 	.word	0x40023800
 8003380:	08007270 	.word	0x08007270
 8003384:	20000000 	.word	0x20000000
 8003388:	20000004 	.word	0x20000004

0800338c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003390:	4b03      	ldr	r3, [pc, #12]	@ (80033a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003392:	681b      	ldr	r3, [r3, #0]
}
 8003394:	4618      	mov	r0, r3
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	20000000 	.word	0x20000000

080033a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033a8:	f7ff fff0 	bl	800338c <HAL_RCC_GetHCLKFreq>
 80033ac:	4602      	mov	r2, r0
 80033ae:	4b05      	ldr	r3, [pc, #20]	@ (80033c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	0a9b      	lsrs	r3, r3, #10
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	4903      	ldr	r1, [pc, #12]	@ (80033c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ba:	5ccb      	ldrb	r3, [r1, r3]
 80033bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40023800 	.word	0x40023800
 80033c8:	08007280 	.word	0x08007280

080033cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033d0:	f7ff ffdc 	bl	800338c <HAL_RCC_GetHCLKFreq>
 80033d4:	4602      	mov	r2, r0
 80033d6:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	0b5b      	lsrs	r3, r3, #13
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	4903      	ldr	r1, [pc, #12]	@ (80033f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033e2:	5ccb      	ldrb	r3, [r1, r3]
 80033e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40023800 	.word	0x40023800
 80033f0:	08007280 	.word	0x08007280

080033f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08c      	sub	sp, #48	@ 0x30
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003404:	2300      	movs	r3, #0
 8003406:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003410:	2300      	movs	r3, #0
 8003412:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b00      	cmp	r3, #0
 800342a:	d010      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800342c:	4b6f      	ldr	r3, [pc, #444]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800342e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003432:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800343a:	496c      	ldr	r1, [pc, #432]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800343c:	4313      	orrs	r3, r2
 800343e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800344a:	2301      	movs	r3, #1
 800344c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d010      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800345a:	4b64      	ldr	r3, [pc, #400]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800345c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003460:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003468:	4960      	ldr	r1, [pc, #384]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003478:	2301      	movs	r3, #1
 800347a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	2b00      	cmp	r3, #0
 8003486:	d017      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003488:	4b58      	ldr	r3, [pc, #352]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800348a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800348e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003496:	4955      	ldr	r1, [pc, #340]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003498:	4313      	orrs	r3, r2
 800349a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034a6:	d101      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80034a8:	2301      	movs	r3, #1
 80034aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80034b4:	2301      	movs	r3, #1
 80034b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0308 	and.w	r3, r3, #8
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d017      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034c4:	4b49      	ldr	r3, [pc, #292]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034ca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034d2:	4946      	ldr	r1, [pc, #280]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034e2:	d101      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80034e4:	2301      	movs	r3, #1
 80034e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80034f0:	2301      	movs	r3, #1
 80034f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0320 	and.w	r3, r3, #32
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 808a 	beq.w	8003616 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003502:	2300      	movs	r3, #0
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	4b39      	ldr	r3, [pc, #228]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350a:	4a38      	ldr	r2, [pc, #224]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800350c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003510:	6413      	str	r3, [r2, #64]	@ 0x40
 8003512:	4b36      	ldr	r3, [pc, #216]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800351a:	60bb      	str	r3, [r7, #8]
 800351c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800351e:	4b34      	ldr	r3, [pc, #208]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a33      	ldr	r2, [pc, #204]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003524:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003528:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800352a:	f7fe ff7b 	bl	8002424 <HAL_GetTick>
 800352e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003530:	e008      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003532:	f7fe ff77 	bl	8002424 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d901      	bls.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e278      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003544:	4b2a      	ldr	r3, [pc, #168]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800354c:	2b00      	cmp	r3, #0
 800354e:	d0f0      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003550:	4b26      	ldr	r3, [pc, #152]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003554:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003558:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d02f      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003564:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003568:	6a3a      	ldr	r2, [r7, #32]
 800356a:	429a      	cmp	r2, r3
 800356c:	d028      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800356e:	4b1f      	ldr	r3, [pc, #124]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003572:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003576:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003578:	4b1e      	ldr	r3, [pc, #120]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800357a:	2201      	movs	r2, #1
 800357c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800357e:	4b1d      	ldr	r3, [pc, #116]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003584:	4a19      	ldr	r2, [pc, #100]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800358a:	4b18      	ldr	r3, [pc, #96]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800358c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b01      	cmp	r3, #1
 8003594:	d114      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003596:	f7fe ff45 	bl	8002424 <HAL_GetTick>
 800359a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800359c:	e00a      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800359e:	f7fe ff41 	bl	8002424 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e240      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b4:	4b0d      	ldr	r3, [pc, #52]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0ee      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035cc:	d114      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80035ce:	4b07      	ldr	r3, [pc, #28]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035da:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80035de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035e2:	4902      	ldr	r1, [pc, #8]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	608b      	str	r3, [r1, #8]
 80035e8:	e00c      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80035ea:	bf00      	nop
 80035ec:	40023800 	.word	0x40023800
 80035f0:	40007000 	.word	0x40007000
 80035f4:	42470e40 	.word	0x42470e40
 80035f8:	4b4a      	ldr	r3, [pc, #296]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	4a49      	ldr	r2, [pc, #292]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035fe:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003602:	6093      	str	r3, [r2, #8]
 8003604:	4b47      	ldr	r3, [pc, #284]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003606:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003610:	4944      	ldr	r1, [pc, #272]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003612:	4313      	orrs	r3, r2
 8003614:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0310 	and.w	r3, r3, #16
 800361e:	2b00      	cmp	r3, #0
 8003620:	d004      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003628:	4b3f      	ldr	r3, [pc, #252]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800362a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00a      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003638:	4b3a      	ldr	r3, [pc, #232]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800363a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800363e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003646:	4937      	ldr	r1, [pc, #220]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003648:	4313      	orrs	r3, r2
 800364a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00a      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800365a:	4b32      	ldr	r3, [pc, #200]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800365c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003660:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003668:	492e      	ldr	r1, [pc, #184]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800366a:	4313      	orrs	r3, r2
 800366c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003678:	2b00      	cmp	r3, #0
 800367a:	d011      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800367c:	4b29      	ldr	r3, [pc, #164]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800367e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003682:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800368a:	4926      	ldr	r1, [pc, #152]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800368c:	4313      	orrs	r3, r2
 800368e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003696:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800369a:	d101      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800369c:	2301      	movs	r3, #1
 800369e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00a      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80036ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80036ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036b2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ba:	491a      	ldr	r1, [pc, #104]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d011      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80036ce:	4b15      	ldr	r3, [pc, #84]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80036d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036d4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036dc:	4911      	ldr	r1, [pc, #68]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036ec:	d101      	bne.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80036ee:	2301      	movs	r3, #1
 80036f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80036f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d005      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003700:	f040 80ff 	bne.w	8003902 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003704:	4b09      	ldr	r3, [pc, #36]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800370a:	f7fe fe8b 	bl	8002424 <HAL_GetTick>
 800370e:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003710:	e00e      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003712:	f7fe fe87 	bl	8002424 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d907      	bls.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e188      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003724:	40023800 	.word	0x40023800
 8003728:	424711e0 	.word	0x424711e0
 800372c:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003730:	4b7e      	ldr	r3, [pc, #504]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1ea      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800374c:	2b00      	cmp	r3, #0
 800374e:	d009      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003758:	2b00      	cmp	r3, #0
 800375a:	d028      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003760:	2b00      	cmp	r3, #0
 8003762:	d124      	bne.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003764:	4b71      	ldr	r3, [pc, #452]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003766:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800376a:	0c1b      	lsrs	r3, r3, #16
 800376c:	f003 0303 	and.w	r3, r3, #3
 8003770:	3301      	adds	r3, #1
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003776:	4b6d      	ldr	r3, [pc, #436]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003778:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800377c:	0e1b      	lsrs	r3, r3, #24
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	019b      	lsls	r3, r3, #6
 800378e:	431a      	orrs	r2, r3
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	085b      	lsrs	r3, r3, #1
 8003794:	3b01      	subs	r3, #1
 8003796:	041b      	lsls	r3, r3, #16
 8003798:	431a      	orrs	r2, r3
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	061b      	lsls	r3, r3, #24
 800379e:	431a      	orrs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	071b      	lsls	r3, r3, #28
 80037a6:	4961      	ldr	r1, [pc, #388]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0304 	and.w	r3, r3, #4
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d004      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037c2:	d00a      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d035      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037d8:	d130      	bne.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80037da:	4b54      	ldr	r3, [pc, #336]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037e0:	0c1b      	lsrs	r3, r3, #16
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	3301      	adds	r3, #1
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037ec:	4b4f      	ldr	r3, [pc, #316]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037f2:	0f1b      	lsrs	r3, r3, #28
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	019b      	lsls	r3, r3, #6
 8003804:	431a      	orrs	r2, r3
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	085b      	lsrs	r3, r3, #1
 800380a:	3b01      	subs	r3, #1
 800380c:	041b      	lsls	r3, r3, #16
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	061b      	lsls	r3, r3, #24
 8003816:	431a      	orrs	r2, r3
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	071b      	lsls	r3, r3, #28
 800381c:	4943      	ldr	r1, [pc, #268]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800381e:	4313      	orrs	r3, r2
 8003820:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003824:	4b41      	ldr	r3, [pc, #260]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003826:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800382a:	f023 021f 	bic.w	r2, r3, #31
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003832:	3b01      	subs	r3, #1
 8003834:	493d      	ldr	r1, [pc, #244]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003844:	2b00      	cmp	r3, #0
 8003846:	d029      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800384c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003850:	d124      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003852:	4b36      	ldr	r3, [pc, #216]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003854:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003858:	0c1b      	lsrs	r3, r3, #16
 800385a:	f003 0303 	and.w	r3, r3, #3
 800385e:	3301      	adds	r3, #1
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003864:	4b31      	ldr	r3, [pc, #196]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003866:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800386a:	0f1b      	lsrs	r3, r3, #28
 800386c:	f003 0307 	and.w	r3, r3, #7
 8003870:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	019b      	lsls	r3, r3, #6
 800387c:	431a      	orrs	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	085b      	lsrs	r3, r3, #1
 8003884:	3b01      	subs	r3, #1
 8003886:	041b      	lsls	r3, r3, #16
 8003888:	431a      	orrs	r2, r3
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	061b      	lsls	r3, r3, #24
 800388e:	431a      	orrs	r2, r3
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	071b      	lsls	r3, r3, #28
 8003894:	4925      	ldr	r1, [pc, #148]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003896:	4313      	orrs	r3, r2
 8003898:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d016      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	019b      	lsls	r3, r3, #6
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	085b      	lsrs	r3, r3, #1
 80038ba:	3b01      	subs	r3, #1
 80038bc:	041b      	lsls	r3, r3, #16
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	061b      	lsls	r3, r3, #24
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	071b      	lsls	r3, r3, #28
 80038ce:	4917      	ldr	r1, [pc, #92]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80038d6:	4b16      	ldr	r3, [pc, #88]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80038d8:	2201      	movs	r2, #1
 80038da:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038dc:	f7fe fda2 	bl	8002424 <HAL_GetTick>
 80038e0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038e2:	e008      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038e4:	f7fe fd9e 	bl	8002424 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e09f      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038f6:	4b0d      	ldr	r3, [pc, #52]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0f0      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8003902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003904:	2b01      	cmp	r3, #1
 8003906:	f040 8095 	bne.w	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800390a:	4b0a      	ldr	r3, [pc, #40]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003910:	f7fe fd88 	bl	8002424 <HAL_GetTick>
 8003914:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003916:	e00f      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003918:	f7fe fd84 	bl	8002424 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d908      	bls.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e085      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800392a:	bf00      	nop
 800392c:	40023800 	.word	0x40023800
 8003930:	42470068 	.word	0x42470068
 8003934:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003938:	4b41      	ldr	r3, [pc, #260]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003940:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003944:	d0e8      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0304 	and.w	r3, r3, #4
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003956:	2b00      	cmp	r3, #0
 8003958:	d009      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003962:	2b00      	cmp	r3, #0
 8003964:	d02b      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800396a:	2b00      	cmp	r3, #0
 800396c:	d127      	bne.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800396e:	4b34      	ldr	r3, [pc, #208]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003974:	0c1b      	lsrs	r3, r3, #16
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	3301      	adds	r3, #1
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	699a      	ldr	r2, [r3, #24]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	019b      	lsls	r3, r3, #6
 800398a:	431a      	orrs	r2, r3
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	085b      	lsrs	r3, r3, #1
 8003990:	3b01      	subs	r3, #1
 8003992:	041b      	lsls	r3, r3, #16
 8003994:	431a      	orrs	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399a:	061b      	lsls	r3, r3, #24
 800399c:	4928      	ldr	r1, [pc, #160]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80039a4:	4b26      	ldr	r3, [pc, #152]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80039a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039aa:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b2:	3b01      	subs	r3, #1
 80039b4:	021b      	lsls	r3, r3, #8
 80039b6:	4922      	ldr	r1, [pc, #136]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d01d      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039d2:	d118      	bne.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80039d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80039d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039da:	0e1b      	lsrs	r3, r3, #24
 80039dc:	f003 030f 	and.w	r3, r3, #15
 80039e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699a      	ldr	r2, [r3, #24]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	019b      	lsls	r3, r3, #6
 80039ec:	431a      	orrs	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	085b      	lsrs	r3, r3, #1
 80039f4:	3b01      	subs	r3, #1
 80039f6:	041b      	lsls	r3, r3, #16
 80039f8:	431a      	orrs	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	061b      	lsls	r3, r3, #24
 80039fe:	4910      	ldr	r1, [pc, #64]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003a06:	4b0f      	ldr	r3, [pc, #60]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003a08:	2201      	movs	r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a0c:	f7fe fd0a 	bl	8002424 <HAL_GetTick>
 8003a10:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a14:	f7fe fd06 	bl	8002424 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e007      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a26:	4b06      	ldr	r3, [pc, #24]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a32:	d1ef      	bne.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3730      	adds	r7, #48	@ 0x30
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	40023800 	.word	0x40023800
 8003a44:	42470070 	.word	0x42470070

08003a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a4c:	b0ae      	sub	sp, #184	@ 0xb8
 8003a4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a6e:	4bcb      	ldr	r3, [pc, #812]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x354>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 030c 	and.w	r3, r3, #12
 8003a76:	2b0c      	cmp	r3, #12
 8003a78:	f200 8206 	bhi.w	8003e88 <HAL_RCC_GetSysClockFreq+0x440>
 8003a7c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a84 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a82:	bf00      	nop
 8003a84:	08003ab9 	.word	0x08003ab9
 8003a88:	08003e89 	.word	0x08003e89
 8003a8c:	08003e89 	.word	0x08003e89
 8003a90:	08003e89 	.word	0x08003e89
 8003a94:	08003ac1 	.word	0x08003ac1
 8003a98:	08003e89 	.word	0x08003e89
 8003a9c:	08003e89 	.word	0x08003e89
 8003aa0:	08003e89 	.word	0x08003e89
 8003aa4:	08003ac9 	.word	0x08003ac9
 8003aa8:	08003e89 	.word	0x08003e89
 8003aac:	08003e89 	.word	0x08003e89
 8003ab0:	08003e89 	.word	0x08003e89
 8003ab4:	08003cb9 	.word	0x08003cb9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ab8:	4bb9      	ldr	r3, [pc, #740]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003aba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003abe:	e1e7      	b.n	8003e90 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ac0:	4bb8      	ldr	r3, [pc, #736]	@ (8003da4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003ac2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003ac6:	e1e3      	b.n	8003e90 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ac8:	4bb4      	ldr	r3, [pc, #720]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x354>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ad0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ad4:	4bb1      	ldr	r3, [pc, #708]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x354>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d071      	beq.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ae0:	4bae      	ldr	r3, [pc, #696]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x354>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	099b      	lsrs	r3, r3, #6
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003aec:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003af0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003af8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003afc:	2300      	movs	r3, #0
 8003afe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003b02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003b06:	4622      	mov	r2, r4
 8003b08:	462b      	mov	r3, r5
 8003b0a:	f04f 0000 	mov.w	r0, #0
 8003b0e:	f04f 0100 	mov.w	r1, #0
 8003b12:	0159      	lsls	r1, r3, #5
 8003b14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b18:	0150      	lsls	r0, r2, #5
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	4621      	mov	r1, r4
 8003b20:	1a51      	subs	r1, r2, r1
 8003b22:	6439      	str	r1, [r7, #64]	@ 0x40
 8003b24:	4629      	mov	r1, r5
 8003b26:	eb63 0301 	sbc.w	r3, r3, r1
 8003b2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	f04f 0300 	mov.w	r3, #0
 8003b34:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003b38:	4649      	mov	r1, r9
 8003b3a:	018b      	lsls	r3, r1, #6
 8003b3c:	4641      	mov	r1, r8
 8003b3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b42:	4641      	mov	r1, r8
 8003b44:	018a      	lsls	r2, r1, #6
 8003b46:	4641      	mov	r1, r8
 8003b48:	1a51      	subs	r1, r2, r1
 8003b4a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b4c:	4649      	mov	r1, r9
 8003b4e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b54:	f04f 0200 	mov.w	r2, #0
 8003b58:	f04f 0300 	mov.w	r3, #0
 8003b5c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003b60:	4649      	mov	r1, r9
 8003b62:	00cb      	lsls	r3, r1, #3
 8003b64:	4641      	mov	r1, r8
 8003b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b6a:	4641      	mov	r1, r8
 8003b6c:	00ca      	lsls	r2, r1, #3
 8003b6e:	4610      	mov	r0, r2
 8003b70:	4619      	mov	r1, r3
 8003b72:	4603      	mov	r3, r0
 8003b74:	4622      	mov	r2, r4
 8003b76:	189b      	adds	r3, r3, r2
 8003b78:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b7a:	462b      	mov	r3, r5
 8003b7c:	460a      	mov	r2, r1
 8003b7e:	eb42 0303 	adc.w	r3, r2, r3
 8003b82:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	f04f 0300 	mov.w	r3, #0
 8003b8c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b90:	4629      	mov	r1, r5
 8003b92:	024b      	lsls	r3, r1, #9
 8003b94:	4621      	mov	r1, r4
 8003b96:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b9a:	4621      	mov	r1, r4
 8003b9c:	024a      	lsls	r2, r1, #9
 8003b9e:	4610      	mov	r0, r2
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003bac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003bb0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003bb4:	f7fc fff6 	bl	8000ba4 <__aeabi_uldivmod>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	460b      	mov	r3, r1
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bc2:	e067      	b.n	8003c94 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bc4:	4b75      	ldr	r3, [pc, #468]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x354>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	099b      	lsrs	r3, r3, #6
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003bd0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003bd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bdc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003bde:	2300      	movs	r3, #0
 8003be0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003be2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003be6:	4622      	mov	r2, r4
 8003be8:	462b      	mov	r3, r5
 8003bea:	f04f 0000 	mov.w	r0, #0
 8003bee:	f04f 0100 	mov.w	r1, #0
 8003bf2:	0159      	lsls	r1, r3, #5
 8003bf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bf8:	0150      	lsls	r0, r2, #5
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4621      	mov	r1, r4
 8003c00:	1a51      	subs	r1, r2, r1
 8003c02:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003c04:	4629      	mov	r1, r5
 8003c06:	eb63 0301 	sbc.w	r3, r3, r1
 8003c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	f04f 0300 	mov.w	r3, #0
 8003c14:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003c18:	4649      	mov	r1, r9
 8003c1a:	018b      	lsls	r3, r1, #6
 8003c1c:	4641      	mov	r1, r8
 8003c1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c22:	4641      	mov	r1, r8
 8003c24:	018a      	lsls	r2, r1, #6
 8003c26:	4641      	mov	r1, r8
 8003c28:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c2c:	4649      	mov	r1, r9
 8003c2e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c32:	f04f 0200 	mov.w	r2, #0
 8003c36:	f04f 0300 	mov.w	r3, #0
 8003c3a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c3e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c46:	4692      	mov	sl, r2
 8003c48:	469b      	mov	fp, r3
 8003c4a:	4623      	mov	r3, r4
 8003c4c:	eb1a 0303 	adds.w	r3, sl, r3
 8003c50:	623b      	str	r3, [r7, #32]
 8003c52:	462b      	mov	r3, r5
 8003c54:	eb4b 0303 	adc.w	r3, fp, r3
 8003c58:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c5a:	f04f 0200 	mov.w	r2, #0
 8003c5e:	f04f 0300 	mov.w	r3, #0
 8003c62:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003c66:	4629      	mov	r1, r5
 8003c68:	028b      	lsls	r3, r1, #10
 8003c6a:	4621      	mov	r1, r4
 8003c6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c70:	4621      	mov	r1, r4
 8003c72:	028a      	lsls	r2, r1, #10
 8003c74:	4610      	mov	r0, r2
 8003c76:	4619      	mov	r1, r3
 8003c78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c80:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c82:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003c86:	f7fc ff8d 	bl	8000ba4 <__aeabi_uldivmod>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4613      	mov	r3, r2
 8003c90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003c94:	4b41      	ldr	r3, [pc, #260]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	0c1b      	lsrs	r3, r3, #16
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003ca6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003caa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003cb6:	e0eb      	b.n	8003e90 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cb8:	4b38      	ldr	r3, [pc, #224]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x354>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cc4:	4b35      	ldr	r3, [pc, #212]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x354>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d06b      	beq.n	8003da8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cd0:	4b32      	ldr	r3, [pc, #200]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x354>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	099b      	lsrs	r3, r3, #6
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003cda:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003cdc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ce2:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ce8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003cec:	4622      	mov	r2, r4
 8003cee:	462b      	mov	r3, r5
 8003cf0:	f04f 0000 	mov.w	r0, #0
 8003cf4:	f04f 0100 	mov.w	r1, #0
 8003cf8:	0159      	lsls	r1, r3, #5
 8003cfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cfe:	0150      	lsls	r0, r2, #5
 8003d00:	4602      	mov	r2, r0
 8003d02:	460b      	mov	r3, r1
 8003d04:	4621      	mov	r1, r4
 8003d06:	1a51      	subs	r1, r2, r1
 8003d08:	61b9      	str	r1, [r7, #24]
 8003d0a:	4629      	mov	r1, r5
 8003d0c:	eb63 0301 	sbc.w	r3, r3, r1
 8003d10:	61fb      	str	r3, [r7, #28]
 8003d12:	f04f 0200 	mov.w	r2, #0
 8003d16:	f04f 0300 	mov.w	r3, #0
 8003d1a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003d1e:	4659      	mov	r1, fp
 8003d20:	018b      	lsls	r3, r1, #6
 8003d22:	4651      	mov	r1, sl
 8003d24:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d28:	4651      	mov	r1, sl
 8003d2a:	018a      	lsls	r2, r1, #6
 8003d2c:	4651      	mov	r1, sl
 8003d2e:	ebb2 0801 	subs.w	r8, r2, r1
 8003d32:	4659      	mov	r1, fp
 8003d34:	eb63 0901 	sbc.w	r9, r3, r1
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	f04f 0300 	mov.w	r3, #0
 8003d40:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d44:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d48:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d4c:	4690      	mov	r8, r2
 8003d4e:	4699      	mov	r9, r3
 8003d50:	4623      	mov	r3, r4
 8003d52:	eb18 0303 	adds.w	r3, r8, r3
 8003d56:	613b      	str	r3, [r7, #16]
 8003d58:	462b      	mov	r3, r5
 8003d5a:	eb49 0303 	adc.w	r3, r9, r3
 8003d5e:	617b      	str	r3, [r7, #20]
 8003d60:	f04f 0200 	mov.w	r2, #0
 8003d64:	f04f 0300 	mov.w	r3, #0
 8003d68:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003d6c:	4629      	mov	r1, r5
 8003d6e:	024b      	lsls	r3, r1, #9
 8003d70:	4621      	mov	r1, r4
 8003d72:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d76:	4621      	mov	r1, r4
 8003d78:	024a      	lsls	r2, r1, #9
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d82:	2200      	movs	r2, #0
 8003d84:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d86:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003d88:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d8c:	f7fc ff0a 	bl	8000ba4 <__aeabi_uldivmod>
 8003d90:	4602      	mov	r2, r0
 8003d92:	460b      	mov	r3, r1
 8003d94:	4613      	mov	r3, r2
 8003d96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d9a:	e065      	b.n	8003e68 <HAL_RCC_GetSysClockFreq+0x420>
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	00f42400 	.word	0x00f42400
 8003da4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003da8:	4b3d      	ldr	r3, [pc, #244]	@ (8003ea0 <HAL_RCC_GetSysClockFreq+0x458>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	099b      	lsrs	r3, r3, #6
 8003dae:	2200      	movs	r2, #0
 8003db0:	4618      	mov	r0, r3
 8003db2:	4611      	mov	r1, r2
 8003db4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003db8:	653b      	str	r3, [r7, #80]	@ 0x50
 8003dba:	2300      	movs	r3, #0
 8003dbc:	657b      	str	r3, [r7, #84]	@ 0x54
 8003dbe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003dc2:	4642      	mov	r2, r8
 8003dc4:	464b      	mov	r3, r9
 8003dc6:	f04f 0000 	mov.w	r0, #0
 8003dca:	f04f 0100 	mov.w	r1, #0
 8003dce:	0159      	lsls	r1, r3, #5
 8003dd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dd4:	0150      	lsls	r0, r2, #5
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4641      	mov	r1, r8
 8003ddc:	1a51      	subs	r1, r2, r1
 8003dde:	60b9      	str	r1, [r7, #8]
 8003de0:	4649      	mov	r1, r9
 8003de2:	eb63 0301 	sbc.w	r3, r3, r1
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	f04f 0200 	mov.w	r2, #0
 8003dec:	f04f 0300 	mov.w	r3, #0
 8003df0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003df4:	4659      	mov	r1, fp
 8003df6:	018b      	lsls	r3, r1, #6
 8003df8:	4651      	mov	r1, sl
 8003dfa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dfe:	4651      	mov	r1, sl
 8003e00:	018a      	lsls	r2, r1, #6
 8003e02:	4651      	mov	r1, sl
 8003e04:	1a54      	subs	r4, r2, r1
 8003e06:	4659      	mov	r1, fp
 8003e08:	eb63 0501 	sbc.w	r5, r3, r1
 8003e0c:	f04f 0200 	mov.w	r2, #0
 8003e10:	f04f 0300 	mov.w	r3, #0
 8003e14:	00eb      	lsls	r3, r5, #3
 8003e16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e1a:	00e2      	lsls	r2, r4, #3
 8003e1c:	4614      	mov	r4, r2
 8003e1e:	461d      	mov	r5, r3
 8003e20:	4643      	mov	r3, r8
 8003e22:	18e3      	adds	r3, r4, r3
 8003e24:	603b      	str	r3, [r7, #0]
 8003e26:	464b      	mov	r3, r9
 8003e28:	eb45 0303 	adc.w	r3, r5, r3
 8003e2c:	607b      	str	r3, [r7, #4]
 8003e2e:	f04f 0200 	mov.w	r2, #0
 8003e32:	f04f 0300 	mov.w	r3, #0
 8003e36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e3a:	4629      	mov	r1, r5
 8003e3c:	028b      	lsls	r3, r1, #10
 8003e3e:	4621      	mov	r1, r4
 8003e40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e44:	4621      	mov	r1, r4
 8003e46:	028a      	lsls	r2, r1, #10
 8003e48:	4610      	mov	r0, r2
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e50:	2200      	movs	r2, #0
 8003e52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e54:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003e56:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e5a:	f7fc fea3 	bl	8000ba4 <__aeabi_uldivmod>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	460b      	mov	r3, r1
 8003e62:	4613      	mov	r3, r2
 8003e64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003e68:	4b0d      	ldr	r3, [pc, #52]	@ (8003ea0 <HAL_RCC_GetSysClockFreq+0x458>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	0f1b      	lsrs	r3, r3, #28
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003e76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e86:	e003      	b.n	8003e90 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e88:	4b06      	ldr	r3, [pc, #24]	@ (8003ea4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003e8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e8e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	37b8      	adds	r7, #184	@ 0xb8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	00f42400 	.word	0x00f42400

08003ea8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e28d      	b.n	80043d6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 8083 	beq.w	8003fce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003ec8:	4b94      	ldr	r3, [pc, #592]	@ (800411c <HAL_RCC_OscConfig+0x274>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f003 030c 	and.w	r3, r3, #12
 8003ed0:	2b04      	cmp	r3, #4
 8003ed2:	d019      	beq.n	8003f08 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003ed4:	4b91      	ldr	r3, [pc, #580]	@ (800411c <HAL_RCC_OscConfig+0x274>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f003 030c 	and.w	r3, r3, #12
        || \
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d106      	bne.n	8003eee <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003ee0:	4b8e      	ldr	r3, [pc, #568]	@ (800411c <HAL_RCC_OscConfig+0x274>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ee8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003eec:	d00c      	beq.n	8003f08 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eee:	4b8b      	ldr	r3, [pc, #556]	@ (800411c <HAL_RCC_OscConfig+0x274>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003ef6:	2b0c      	cmp	r3, #12
 8003ef8:	d112      	bne.n	8003f20 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003efa:	4b88      	ldr	r3, [pc, #544]	@ (800411c <HAL_RCC_OscConfig+0x274>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f06:	d10b      	bne.n	8003f20 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f08:	4b84      	ldr	r3, [pc, #528]	@ (800411c <HAL_RCC_OscConfig+0x274>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d05b      	beq.n	8003fcc <HAL_RCC_OscConfig+0x124>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d157      	bne.n	8003fcc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e25a      	b.n	80043d6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f28:	d106      	bne.n	8003f38 <HAL_RCC_OscConfig+0x90>
 8003f2a:	4b7c      	ldr	r3, [pc, #496]	@ (800411c <HAL_RCC_OscConfig+0x274>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a7b      	ldr	r2, [pc, #492]	@ (800411c <HAL_RCC_OscConfig+0x274>)
 8003f30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	e01d      	b.n	8003f74 <HAL_RCC_OscConfig+0xcc>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f40:	d10c      	bne.n	8003f5c <HAL_RCC_OscConfig+0xb4>
 8003f42:	4b76      	ldr	r3, [pc, #472]	@ (800411c <HAL_RCC_OscConfig+0x274>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a75      	ldr	r2, [pc, #468]	@ (800411c <HAL_RCC_OscConfig+0x274>)
 8003f48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	4b73      	ldr	r3, [pc, #460]	@ (800411c <HAL_RCC_OscConfig+0x274>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a72      	ldr	r2, [pc, #456]	@ (800411c <HAL_RCC_OscConfig+0x274>)
 8003f54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	e00b      	b.n	8003f74 <HAL_RCC_OscConfig+0xcc>
 8003f5c:	4b6f      	ldr	r3, [pc, #444]	@ (800411c <HAL_RCC_OscConfig+0x274>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a6e      	ldr	r2, [pc, #440]	@ (800411c <HAL_RCC_OscConfig+0x274>)
 8003f62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f66:	6013      	str	r3, [r2, #0]
 8003f68:	4b6c      	ldr	r3, [pc, #432]	@ (800411c <HAL_RCC_OscConfig+0x274>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a6b      	ldr	r2, [pc, #428]	@ (800411c <HAL_RCC_OscConfig+0x274>)
 8003f6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d013      	beq.n	8003fa4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7c:	f7fe fa52 	bl	8002424 <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f84:	f7fe fa4e 	bl	8002424 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b64      	cmp	r3, #100	@ 0x64
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e21f      	b.n	80043d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f96:	4b61      	ldr	r3, [pc, #388]	@ (800411c <HAL_RCC_OscConfig+0x274>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0f0      	beq.n	8003f84 <HAL_RCC_OscConfig+0xdc>
 8003fa2:	e014      	b.n	8003fce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa4:	f7fe fa3e 	bl	8002424 <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fac:	f7fe fa3a 	bl	8002424 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b64      	cmp	r3, #100	@ 0x64
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e20b      	b.n	80043d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fbe:	4b57      	ldr	r3, [pc, #348]	@ (800411c <HAL_RCC_OscConfig+0x274>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1f0      	bne.n	8003fac <HAL_RCC_OscConfig+0x104>
 8003fca:	e000      	b.n	8003fce <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d06f      	beq.n	80040ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003fda:	4b50      	ldr	r3, [pc, #320]	@ (800411c <HAL_RCC_OscConfig+0x274>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f003 030c 	and.w	r3, r3, #12
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d017      	beq.n	8004016 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003fe6:	4b4d      	ldr	r3, [pc, #308]	@ (800411c <HAL_RCC_OscConfig+0x274>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 030c 	and.w	r3, r3, #12
        || \
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d105      	bne.n	8003ffe <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003ff2:	4b4a      	ldr	r3, [pc, #296]	@ (800411c <HAL_RCC_OscConfig+0x274>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00b      	beq.n	8004016 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ffe:	4b47      	ldr	r3, [pc, #284]	@ (800411c <HAL_RCC_OscConfig+0x274>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004006:	2b0c      	cmp	r3, #12
 8004008:	d11c      	bne.n	8004044 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800400a:	4b44      	ldr	r3, [pc, #272]	@ (800411c <HAL_RCC_OscConfig+0x274>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d116      	bne.n	8004044 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004016:	4b41      	ldr	r3, [pc, #260]	@ (800411c <HAL_RCC_OscConfig+0x274>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d005      	beq.n	800402e <HAL_RCC_OscConfig+0x186>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d001      	beq.n	800402e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e1d3      	b.n	80043d6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800402e:	4b3b      	ldr	r3, [pc, #236]	@ (800411c <HAL_RCC_OscConfig+0x274>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	4937      	ldr	r1, [pc, #220]	@ (800411c <HAL_RCC_OscConfig+0x274>)
 800403e:	4313      	orrs	r3, r2
 8004040:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004042:	e03a      	b.n	80040ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d020      	beq.n	800408e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800404c:	4b34      	ldr	r3, [pc, #208]	@ (8004120 <HAL_RCC_OscConfig+0x278>)
 800404e:	2201      	movs	r2, #1
 8004050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004052:	f7fe f9e7 	bl	8002424 <HAL_GetTick>
 8004056:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004058:	e008      	b.n	800406c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800405a:	f7fe f9e3 	bl	8002424 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d901      	bls.n	800406c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e1b4      	b.n	80043d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800406c:	4b2b      	ldr	r3, [pc, #172]	@ (800411c <HAL_RCC_OscConfig+0x274>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d0f0      	beq.n	800405a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004078:	4b28      	ldr	r3, [pc, #160]	@ (800411c <HAL_RCC_OscConfig+0x274>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	4925      	ldr	r1, [pc, #148]	@ (800411c <HAL_RCC_OscConfig+0x274>)
 8004088:	4313      	orrs	r3, r2
 800408a:	600b      	str	r3, [r1, #0]
 800408c:	e015      	b.n	80040ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800408e:	4b24      	ldr	r3, [pc, #144]	@ (8004120 <HAL_RCC_OscConfig+0x278>)
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004094:	f7fe f9c6 	bl	8002424 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800409c:	f7fe f9c2 	bl	8002424 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e193      	b.n	80043d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ae:	4b1b      	ldr	r3, [pc, #108]	@ (800411c <HAL_RCC_OscConfig+0x274>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1f0      	bne.n	800409c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d036      	beq.n	8004134 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d016      	beq.n	80040fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ce:	4b15      	ldr	r3, [pc, #84]	@ (8004124 <HAL_RCC_OscConfig+0x27c>)
 80040d0:	2201      	movs	r2, #1
 80040d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d4:	f7fe f9a6 	bl	8002424 <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040dc:	f7fe f9a2 	bl	8002424 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e173      	b.n	80043d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ee:	4b0b      	ldr	r3, [pc, #44]	@ (800411c <HAL_RCC_OscConfig+0x274>)
 80040f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0f0      	beq.n	80040dc <HAL_RCC_OscConfig+0x234>
 80040fa:	e01b      	b.n	8004134 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040fc:	4b09      	ldr	r3, [pc, #36]	@ (8004124 <HAL_RCC_OscConfig+0x27c>)
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004102:	f7fe f98f 	bl	8002424 <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004108:	e00e      	b.n	8004128 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800410a:	f7fe f98b 	bl	8002424 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d907      	bls.n	8004128 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e15c      	b.n	80043d6 <HAL_RCC_OscConfig+0x52e>
 800411c:	40023800 	.word	0x40023800
 8004120:	42470000 	.word	0x42470000
 8004124:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004128:	4b8a      	ldr	r3, [pc, #552]	@ (8004354 <HAL_RCC_OscConfig+0x4ac>)
 800412a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1ea      	bne.n	800410a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 8097 	beq.w	8004270 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004142:	2300      	movs	r3, #0
 8004144:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004146:	4b83      	ldr	r3, [pc, #524]	@ (8004354 <HAL_RCC_OscConfig+0x4ac>)
 8004148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10f      	bne.n	8004172 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004152:	2300      	movs	r3, #0
 8004154:	60bb      	str	r3, [r7, #8]
 8004156:	4b7f      	ldr	r3, [pc, #508]	@ (8004354 <HAL_RCC_OscConfig+0x4ac>)
 8004158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415a:	4a7e      	ldr	r2, [pc, #504]	@ (8004354 <HAL_RCC_OscConfig+0x4ac>)
 800415c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004160:	6413      	str	r3, [r2, #64]	@ 0x40
 8004162:	4b7c      	ldr	r3, [pc, #496]	@ (8004354 <HAL_RCC_OscConfig+0x4ac>)
 8004164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800416a:	60bb      	str	r3, [r7, #8]
 800416c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800416e:	2301      	movs	r3, #1
 8004170:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004172:	4b79      	ldr	r3, [pc, #484]	@ (8004358 <HAL_RCC_OscConfig+0x4b0>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800417a:	2b00      	cmp	r3, #0
 800417c:	d118      	bne.n	80041b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800417e:	4b76      	ldr	r3, [pc, #472]	@ (8004358 <HAL_RCC_OscConfig+0x4b0>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a75      	ldr	r2, [pc, #468]	@ (8004358 <HAL_RCC_OscConfig+0x4b0>)
 8004184:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004188:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800418a:	f7fe f94b 	bl	8002424 <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004192:	f7fe f947 	bl	8002424 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e118      	b.n	80043d6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a4:	4b6c      	ldr	r3, [pc, #432]	@ (8004358 <HAL_RCC_OscConfig+0x4b0>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0f0      	beq.n	8004192 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d106      	bne.n	80041c6 <HAL_RCC_OscConfig+0x31e>
 80041b8:	4b66      	ldr	r3, [pc, #408]	@ (8004354 <HAL_RCC_OscConfig+0x4ac>)
 80041ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041bc:	4a65      	ldr	r2, [pc, #404]	@ (8004354 <HAL_RCC_OscConfig+0x4ac>)
 80041be:	f043 0301 	orr.w	r3, r3, #1
 80041c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80041c4:	e01c      	b.n	8004200 <HAL_RCC_OscConfig+0x358>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	2b05      	cmp	r3, #5
 80041cc:	d10c      	bne.n	80041e8 <HAL_RCC_OscConfig+0x340>
 80041ce:	4b61      	ldr	r3, [pc, #388]	@ (8004354 <HAL_RCC_OscConfig+0x4ac>)
 80041d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041d2:	4a60      	ldr	r2, [pc, #384]	@ (8004354 <HAL_RCC_OscConfig+0x4ac>)
 80041d4:	f043 0304 	orr.w	r3, r3, #4
 80041d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80041da:	4b5e      	ldr	r3, [pc, #376]	@ (8004354 <HAL_RCC_OscConfig+0x4ac>)
 80041dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041de:	4a5d      	ldr	r2, [pc, #372]	@ (8004354 <HAL_RCC_OscConfig+0x4ac>)
 80041e0:	f043 0301 	orr.w	r3, r3, #1
 80041e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80041e6:	e00b      	b.n	8004200 <HAL_RCC_OscConfig+0x358>
 80041e8:	4b5a      	ldr	r3, [pc, #360]	@ (8004354 <HAL_RCC_OscConfig+0x4ac>)
 80041ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ec:	4a59      	ldr	r2, [pc, #356]	@ (8004354 <HAL_RCC_OscConfig+0x4ac>)
 80041ee:	f023 0301 	bic.w	r3, r3, #1
 80041f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80041f4:	4b57      	ldr	r3, [pc, #348]	@ (8004354 <HAL_RCC_OscConfig+0x4ac>)
 80041f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f8:	4a56      	ldr	r2, [pc, #344]	@ (8004354 <HAL_RCC_OscConfig+0x4ac>)
 80041fa:	f023 0304 	bic.w	r3, r3, #4
 80041fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d015      	beq.n	8004234 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004208:	f7fe f90c 	bl	8002424 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800420e:	e00a      	b.n	8004226 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004210:	f7fe f908 	bl	8002424 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800421e:	4293      	cmp	r3, r2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e0d7      	b.n	80043d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004226:	4b4b      	ldr	r3, [pc, #300]	@ (8004354 <HAL_RCC_OscConfig+0x4ac>)
 8004228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0ee      	beq.n	8004210 <HAL_RCC_OscConfig+0x368>
 8004232:	e014      	b.n	800425e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004234:	f7fe f8f6 	bl	8002424 <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800423a:	e00a      	b.n	8004252 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800423c:	f7fe f8f2 	bl	8002424 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800424a:	4293      	cmp	r3, r2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e0c1      	b.n	80043d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004252:	4b40      	ldr	r3, [pc, #256]	@ (8004354 <HAL_RCC_OscConfig+0x4ac>)
 8004254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1ee      	bne.n	800423c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800425e:	7dfb      	ldrb	r3, [r7, #23]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d105      	bne.n	8004270 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004264:	4b3b      	ldr	r3, [pc, #236]	@ (8004354 <HAL_RCC_OscConfig+0x4ac>)
 8004266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004268:	4a3a      	ldr	r2, [pc, #232]	@ (8004354 <HAL_RCC_OscConfig+0x4ac>)
 800426a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800426e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 80ad 	beq.w	80043d4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800427a:	4b36      	ldr	r3, [pc, #216]	@ (8004354 <HAL_RCC_OscConfig+0x4ac>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 030c 	and.w	r3, r3, #12
 8004282:	2b08      	cmp	r3, #8
 8004284:	d060      	beq.n	8004348 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	2b02      	cmp	r3, #2
 800428c:	d145      	bne.n	800431a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800428e:	4b33      	ldr	r3, [pc, #204]	@ (800435c <HAL_RCC_OscConfig+0x4b4>)
 8004290:	2200      	movs	r2, #0
 8004292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004294:	f7fe f8c6 	bl	8002424 <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800429c:	f7fe f8c2 	bl	8002424 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e093      	b.n	80043d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ae:	4b29      	ldr	r3, [pc, #164]	@ (8004354 <HAL_RCC_OscConfig+0x4ac>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1f0      	bne.n	800429c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	69da      	ldr	r2, [r3, #28]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c8:	019b      	lsls	r3, r3, #6
 80042ca:	431a      	orrs	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d0:	085b      	lsrs	r3, r3, #1
 80042d2:	3b01      	subs	r3, #1
 80042d4:	041b      	lsls	r3, r3, #16
 80042d6:	431a      	orrs	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042dc:	061b      	lsls	r3, r3, #24
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e4:	071b      	lsls	r3, r3, #28
 80042e6:	491b      	ldr	r1, [pc, #108]	@ (8004354 <HAL_RCC_OscConfig+0x4ac>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042ec:	4b1b      	ldr	r3, [pc, #108]	@ (800435c <HAL_RCC_OscConfig+0x4b4>)
 80042ee:	2201      	movs	r2, #1
 80042f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f2:	f7fe f897 	bl	8002424 <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042f8:	e008      	b.n	800430c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042fa:	f7fe f893 	bl	8002424 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d901      	bls.n	800430c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e064      	b.n	80043d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800430c:	4b11      	ldr	r3, [pc, #68]	@ (8004354 <HAL_RCC_OscConfig+0x4ac>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d0f0      	beq.n	80042fa <HAL_RCC_OscConfig+0x452>
 8004318:	e05c      	b.n	80043d4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800431a:	4b10      	ldr	r3, [pc, #64]	@ (800435c <HAL_RCC_OscConfig+0x4b4>)
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004320:	f7fe f880 	bl	8002424 <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004328:	f7fe f87c 	bl	8002424 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e04d      	b.n	80043d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800433a:	4b06      	ldr	r3, [pc, #24]	@ (8004354 <HAL_RCC_OscConfig+0x4ac>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1f0      	bne.n	8004328 <HAL_RCC_OscConfig+0x480>
 8004346:	e045      	b.n	80043d4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d107      	bne.n	8004360 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e040      	b.n	80043d6 <HAL_RCC_OscConfig+0x52e>
 8004354:	40023800 	.word	0x40023800
 8004358:	40007000 	.word	0x40007000
 800435c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004360:	4b1f      	ldr	r3, [pc, #124]	@ (80043e0 <HAL_RCC_OscConfig+0x538>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d030      	beq.n	80043d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004378:	429a      	cmp	r2, r3
 800437a:	d129      	bne.n	80043d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004386:	429a      	cmp	r2, r3
 8004388:	d122      	bne.n	80043d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004390:	4013      	ands	r3, r2
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004396:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004398:	4293      	cmp	r3, r2
 800439a:	d119      	bne.n	80043d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a6:	085b      	lsrs	r3, r3, #1
 80043a8:	3b01      	subs	r3, #1
 80043aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d10f      	bne.n	80043d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043bc:	429a      	cmp	r2, r3
 80043be:	d107      	bne.n	80043d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d001      	beq.n	80043d4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e000      	b.n	80043d6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3718      	adds	r7, #24
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40023800 	.word	0x40023800

080043e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e07b      	b.n	80044ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d108      	bne.n	8004410 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004406:	d009      	beq.n	800441c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	61da      	str	r2, [r3, #28]
 800440e:	e005      	b.n	800441c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d106      	bne.n	800443c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7fd fdea 	bl	8002010 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004452:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004464:	431a      	orrs	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	431a      	orrs	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	431a      	orrs	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800448c:	431a      	orrs	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004496:	431a      	orrs	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044a0:	ea42 0103 	orr.w	r1, r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	0c1b      	lsrs	r3, r3, #16
 80044ba:	f003 0104 	and.w	r1, r3, #4
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c2:	f003 0210 	and.w	r2, r3, #16
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69da      	ldr	r2, [r3, #28]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b088      	sub	sp, #32
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	60f8      	str	r0, [r7, #12]
 80044fe:	60b9      	str	r1, [r7, #8]
 8004500:	603b      	str	r3, [r7, #0]
 8004502:	4613      	mov	r3, r2
 8004504:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004506:	f7fd ff8d 	bl	8002424 <HAL_GetTick>
 800450a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800450c:	88fb      	ldrh	r3, [r7, #6]
 800450e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b01      	cmp	r3, #1
 800451a:	d001      	beq.n	8004520 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800451c:	2302      	movs	r3, #2
 800451e:	e12a      	b.n	8004776 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d002      	beq.n	800452c <HAL_SPI_Transmit+0x36>
 8004526:	88fb      	ldrh	r3, [r7, #6]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e122      	b.n	8004776 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004536:	2b01      	cmp	r3, #1
 8004538:	d101      	bne.n	800453e <HAL_SPI_Transmit+0x48>
 800453a:	2302      	movs	r3, #2
 800453c:	e11b      	b.n	8004776 <HAL_SPI_Transmit+0x280>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2203      	movs	r2, #3
 800454a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	88fa      	ldrh	r2, [r7, #6]
 800455e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	88fa      	ldrh	r2, [r7, #6]
 8004564:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800458c:	d10f      	bne.n	80045ae <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800459c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b8:	2b40      	cmp	r3, #64	@ 0x40
 80045ba:	d007      	beq.n	80045cc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045d4:	d152      	bne.n	800467c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d002      	beq.n	80045e4 <HAL_SPI_Transmit+0xee>
 80045de:	8b7b      	ldrh	r3, [r7, #26]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d145      	bne.n	8004670 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e8:	881a      	ldrh	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f4:	1c9a      	adds	r2, r3, #2
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045fe:	b29b      	uxth	r3, r3
 8004600:	3b01      	subs	r3, #1
 8004602:	b29a      	uxth	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004608:	e032      	b.n	8004670 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b02      	cmp	r3, #2
 8004616:	d112      	bne.n	800463e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800461c:	881a      	ldrh	r2, [r3, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004628:	1c9a      	adds	r2, r3, #2
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004632:	b29b      	uxth	r3, r3
 8004634:	3b01      	subs	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800463c:	e018      	b.n	8004670 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800463e:	f7fd fef1 	bl	8002424 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	429a      	cmp	r2, r3
 800464c:	d803      	bhi.n	8004656 <HAL_SPI_Transmit+0x160>
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004654:	d102      	bne.n	800465c <HAL_SPI_Transmit+0x166>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d109      	bne.n	8004670 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e082      	b.n	8004776 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004674:	b29b      	uxth	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1c7      	bne.n	800460a <HAL_SPI_Transmit+0x114>
 800467a:	e053      	b.n	8004724 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d002      	beq.n	800468a <HAL_SPI_Transmit+0x194>
 8004684:	8b7b      	ldrh	r3, [r7, #26]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d147      	bne.n	800471a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	330c      	adds	r3, #12
 8004694:	7812      	ldrb	r2, [r2, #0]
 8004696:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800469c:	1c5a      	adds	r2, r3, #1
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	3b01      	subs	r3, #1
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80046b0:	e033      	b.n	800471a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d113      	bne.n	80046e8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	330c      	adds	r3, #12
 80046ca:	7812      	ldrb	r2, [r2, #0]
 80046cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046dc:	b29b      	uxth	r3, r3
 80046de:	3b01      	subs	r3, #1
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80046e6:	e018      	b.n	800471a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046e8:	f7fd fe9c 	bl	8002424 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d803      	bhi.n	8004700 <HAL_SPI_Transmit+0x20a>
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fe:	d102      	bne.n	8004706 <HAL_SPI_Transmit+0x210>
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d109      	bne.n	800471a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e02d      	b.n	8004776 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800471e:	b29b      	uxth	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1c6      	bne.n	80046b2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004724:	69fa      	ldr	r2, [r7, #28]
 8004726:	6839      	ldr	r1, [r7, #0]
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 fa59 	bl	8004be0 <SPI_EndRxTxTransaction>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d002      	beq.n	800473a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2220      	movs	r2, #32
 8004738:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10a      	bne.n	8004758 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004742:	2300      	movs	r3, #0
 8004744:	617b      	str	r3, [r7, #20]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	617b      	str	r3, [r7, #20]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	617b      	str	r3, [r7, #20]
 8004756:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e000      	b.n	8004776 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004774:	2300      	movs	r3, #0
  }
}
 8004776:	4618      	mov	r0, r3
 8004778:	3720      	adds	r7, #32
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b08a      	sub	sp, #40	@ 0x28
 8004782:	af00      	add	r7, sp, #0
 8004784:	60f8      	str	r0, [r7, #12]
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	607a      	str	r2, [r7, #4]
 800478a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800478c:	2301      	movs	r3, #1
 800478e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004790:	f7fd fe48 	bl	8002424 <HAL_GetTick>
 8004794:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800479c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80047a4:	887b      	ldrh	r3, [r7, #2]
 80047a6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80047a8:	7ffb      	ldrb	r3, [r7, #31]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d00c      	beq.n	80047c8 <HAL_SPI_TransmitReceive+0x4a>
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047b4:	d106      	bne.n	80047c4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d102      	bne.n	80047c4 <HAL_SPI_TransmitReceive+0x46>
 80047be:	7ffb      	ldrb	r3, [r7, #31]
 80047c0:	2b04      	cmp	r3, #4
 80047c2:	d001      	beq.n	80047c8 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80047c4:	2302      	movs	r3, #2
 80047c6:	e17f      	b.n	8004ac8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d005      	beq.n	80047da <HAL_SPI_TransmitReceive+0x5c>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d002      	beq.n	80047da <HAL_SPI_TransmitReceive+0x5c>
 80047d4:	887b      	ldrh	r3, [r7, #2]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e174      	b.n	8004ac8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d101      	bne.n	80047ec <HAL_SPI_TransmitReceive+0x6e>
 80047e8:	2302      	movs	r3, #2
 80047ea:	e16d      	b.n	8004ac8 <HAL_SPI_TransmitReceive+0x34a>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b04      	cmp	r3, #4
 80047fe:	d003      	beq.n	8004808 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2205      	movs	r2, #5
 8004804:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	887a      	ldrh	r2, [r7, #2]
 8004818:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	887a      	ldrh	r2, [r7, #2]
 800481e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	887a      	ldrh	r2, [r7, #2]
 800482a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	887a      	ldrh	r2, [r7, #2]
 8004830:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004848:	2b40      	cmp	r3, #64	@ 0x40
 800484a:	d007      	beq.n	800485c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800485a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004864:	d17e      	bne.n	8004964 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d002      	beq.n	8004874 <HAL_SPI_TransmitReceive+0xf6>
 800486e:	8afb      	ldrh	r3, [r7, #22]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d16c      	bne.n	800494e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004878:	881a      	ldrh	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004884:	1c9a      	adds	r2, r3, #2
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800488e:	b29b      	uxth	r3, r3
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004898:	e059      	b.n	800494e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d11b      	bne.n	80048e0 <HAL_SPI_TransmitReceive+0x162>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d016      	beq.n	80048e0 <HAL_SPI_TransmitReceive+0x162>
 80048b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d113      	bne.n	80048e0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048bc:	881a      	ldrh	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c8:	1c9a      	adds	r2, r3, #2
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	3b01      	subs	r3, #1
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048dc:	2300      	movs	r3, #0
 80048de:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d119      	bne.n	8004922 <HAL_SPI_TransmitReceive+0x1a4>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d014      	beq.n	8004922 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004902:	b292      	uxth	r2, r2
 8004904:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800490a:	1c9a      	adds	r2, r3, #2
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004914:	b29b      	uxth	r3, r3
 8004916:	3b01      	subs	r3, #1
 8004918:	b29a      	uxth	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800491e:	2301      	movs	r3, #1
 8004920:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004922:	f7fd fd7f 	bl	8002424 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800492e:	429a      	cmp	r2, r3
 8004930:	d80d      	bhi.n	800494e <HAL_SPI_TransmitReceive+0x1d0>
 8004932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004938:	d009      	beq.n	800494e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e0bc      	b.n	8004ac8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004952:	b29b      	uxth	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1a0      	bne.n	800489a <HAL_SPI_TransmitReceive+0x11c>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800495c:	b29b      	uxth	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d19b      	bne.n	800489a <HAL_SPI_TransmitReceive+0x11c>
 8004962:	e082      	b.n	8004a6a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d002      	beq.n	8004972 <HAL_SPI_TransmitReceive+0x1f4>
 800496c:	8afb      	ldrh	r3, [r7, #22]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d171      	bne.n	8004a56 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	330c      	adds	r3, #12
 800497c:	7812      	ldrb	r2, [r2, #0]
 800497e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004984:	1c5a      	adds	r2, r3, #1
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800498e:	b29b      	uxth	r3, r3
 8004990:	3b01      	subs	r3, #1
 8004992:	b29a      	uxth	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004998:	e05d      	b.n	8004a56 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d11c      	bne.n	80049e2 <HAL_SPI_TransmitReceive+0x264>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d017      	beq.n	80049e2 <HAL_SPI_TransmitReceive+0x264>
 80049b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d114      	bne.n	80049e2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	330c      	adds	r3, #12
 80049c2:	7812      	ldrb	r2, [r2, #0]
 80049c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	3b01      	subs	r3, #1
 80049d8:	b29a      	uxth	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049de:	2300      	movs	r3, #0
 80049e0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d119      	bne.n	8004a24 <HAL_SPI_TransmitReceive+0x2a6>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d014      	beq.n	8004a24 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68da      	ldr	r2, [r3, #12]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a04:	b2d2      	uxtb	r2, r2
 8004a06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a0c:	1c5a      	adds	r2, r3, #1
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a20:	2301      	movs	r3, #1
 8004a22:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a24:	f7fd fcfe 	bl	8002424 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	6a3b      	ldr	r3, [r7, #32]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d803      	bhi.n	8004a3c <HAL_SPI_TransmitReceive+0x2be>
 8004a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3a:	d102      	bne.n	8004a42 <HAL_SPI_TransmitReceive+0x2c4>
 8004a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d109      	bne.n	8004a56 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e038      	b.n	8004ac8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d19c      	bne.n	800499a <HAL_SPI_TransmitReceive+0x21c>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d197      	bne.n	800499a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a6a:	6a3a      	ldr	r2, [r7, #32]
 8004a6c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 f8b6 	bl	8004be0 <SPI_EndRxTxTransaction>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d008      	beq.n	8004a8c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e01d      	b.n	8004ac8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10a      	bne.n	8004aaa <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a94:	2300      	movs	r3, #0
 8004a96:	613b      	str	r3, [r7, #16]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	613b      	str	r3, [r7, #16]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	613b      	str	r3, [r7, #16]
 8004aa8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e000      	b.n	8004ac8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
  }
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3728      	adds	r7, #40	@ 0x28
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b088      	sub	sp, #32
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	603b      	str	r3, [r7, #0]
 8004adc:	4613      	mov	r3, r2
 8004ade:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ae0:	f7fd fca0 	bl	8002424 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae8:	1a9b      	subs	r3, r3, r2
 8004aea:	683a      	ldr	r2, [r7, #0]
 8004aec:	4413      	add	r3, r2
 8004aee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004af0:	f7fd fc98 	bl	8002424 <HAL_GetTick>
 8004af4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004af6:	4b39      	ldr	r3, [pc, #228]	@ (8004bdc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	015b      	lsls	r3, r3, #5
 8004afc:	0d1b      	lsrs	r3, r3, #20
 8004afe:	69fa      	ldr	r2, [r7, #28]
 8004b00:	fb02 f303 	mul.w	r3, r2, r3
 8004b04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b06:	e054      	b.n	8004bb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0e:	d050      	beq.n	8004bb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b10:	f7fd fc88 	bl	8002424 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	69fa      	ldr	r2, [r7, #28]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d902      	bls.n	8004b26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d13d      	bne.n	8004ba2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004b34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b3e:	d111      	bne.n	8004b64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b48:	d004      	beq.n	8004b54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b52:	d107      	bne.n	8004b64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b6c:	d10f      	bne.n	8004b8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e017      	b.n	8004bd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d101      	bne.n	8004bac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689a      	ldr	r2, [r3, #8]
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	4013      	ands	r3, r2
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	bf0c      	ite	eq
 8004bc2:	2301      	moveq	r3, #1
 8004bc4:	2300      	movne	r3, #0
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	461a      	mov	r2, r3
 8004bca:	79fb      	ldrb	r3, [r7, #7]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d19b      	bne.n	8004b08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3720      	adds	r7, #32
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	20000000 	.word	0x20000000

08004be0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b088      	sub	sp, #32
 8004be4:	af02      	add	r7, sp, #8
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	2102      	movs	r1, #2
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f7ff ff6a 	bl	8004ad0 <SPI_WaitFlagStateUntilTimeout>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d007      	beq.n	8004c12 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c06:	f043 0220 	orr.w	r2, r3, #32
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e032      	b.n	8004c78 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c12:	4b1b      	ldr	r3, [pc, #108]	@ (8004c80 <SPI_EndRxTxTransaction+0xa0>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a1b      	ldr	r2, [pc, #108]	@ (8004c84 <SPI_EndRxTxTransaction+0xa4>)
 8004c18:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1c:	0d5b      	lsrs	r3, r3, #21
 8004c1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004c22:	fb02 f303 	mul.w	r3, r2, r3
 8004c26:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c30:	d112      	bne.n	8004c58 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	9300      	str	r3, [sp, #0]
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	2180      	movs	r1, #128	@ 0x80
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f7ff ff47 	bl	8004ad0 <SPI_WaitFlagStateUntilTimeout>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d016      	beq.n	8004c76 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c4c:	f043 0220 	orr.w	r2, r3, #32
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e00f      	b.n	8004c78 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00a      	beq.n	8004c74 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	3b01      	subs	r3, #1
 8004c62:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c6e:	2b80      	cmp	r3, #128	@ 0x80
 8004c70:	d0f2      	beq.n	8004c58 <SPI_EndRxTxTransaction+0x78>
 8004c72:	e000      	b.n	8004c76 <SPI_EndRxTxTransaction+0x96>
        break;
 8004c74:	bf00      	nop
  }

  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3718      	adds	r7, #24
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	20000000 	.word	0x20000000
 8004c84:	165e9f81 	.word	0x165e9f81

08004c88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e041      	b.n	8004d1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d106      	bne.n	8004cb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7fd f9f6 	bl	80020a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3304      	adds	r3, #4
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4610      	mov	r0, r2
 8004cc8:	f000 fa80 	bl	80051cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
	...

08004d28 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d001      	beq.n	8004d40 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e046      	b.n	8004dce <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2202      	movs	r2, #2
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a23      	ldr	r2, [pc, #140]	@ (8004ddc <HAL_TIM_Base_Start+0xb4>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d022      	beq.n	8004d98 <HAL_TIM_Base_Start+0x70>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d5a:	d01d      	beq.n	8004d98 <HAL_TIM_Base_Start+0x70>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a1f      	ldr	r2, [pc, #124]	@ (8004de0 <HAL_TIM_Base_Start+0xb8>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d018      	beq.n	8004d98 <HAL_TIM_Base_Start+0x70>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a1e      	ldr	r2, [pc, #120]	@ (8004de4 <HAL_TIM_Base_Start+0xbc>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d013      	beq.n	8004d98 <HAL_TIM_Base_Start+0x70>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a1c      	ldr	r2, [pc, #112]	@ (8004de8 <HAL_TIM_Base_Start+0xc0>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d00e      	beq.n	8004d98 <HAL_TIM_Base_Start+0x70>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a1b      	ldr	r2, [pc, #108]	@ (8004dec <HAL_TIM_Base_Start+0xc4>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d009      	beq.n	8004d98 <HAL_TIM_Base_Start+0x70>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a19      	ldr	r2, [pc, #100]	@ (8004df0 <HAL_TIM_Base_Start+0xc8>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d004      	beq.n	8004d98 <HAL_TIM_Base_Start+0x70>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a18      	ldr	r2, [pc, #96]	@ (8004df4 <HAL_TIM_Base_Start+0xcc>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d111      	bne.n	8004dbc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 0307 	and.w	r3, r3, #7
 8004da2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b06      	cmp	r3, #6
 8004da8:	d010      	beq.n	8004dcc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f042 0201 	orr.w	r2, r2, #1
 8004db8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dba:	e007      	b.n	8004dcc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f042 0201 	orr.w	r2, r2, #1
 8004dca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	40010000 	.word	0x40010000
 8004de0:	40000400 	.word	0x40000400
 8004de4:	40000800 	.word	0x40000800
 8004de8:	40000c00 	.word	0x40000c00
 8004dec:	40010400 	.word	0x40010400
 8004df0:	40014000 	.word	0x40014000
 8004df4:	40001800 	.word	0x40001800

08004df8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d020      	beq.n	8004e5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d01b      	beq.n	8004e5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f06f 0202 	mvn.w	r2, #2
 8004e2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	f003 0303 	and.w	r3, r3, #3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f9a3 	bl	800518e <HAL_TIM_IC_CaptureCallback>
 8004e48:	e005      	b.n	8004e56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f995 	bl	800517a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 f9a6 	bl	80051a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	f003 0304 	and.w	r3, r3, #4
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d020      	beq.n	8004ea8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d01b      	beq.n	8004ea8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f06f 0204 	mvn.w	r2, #4
 8004e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d003      	beq.n	8004e96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f97d 	bl	800518e <HAL_TIM_IC_CaptureCallback>
 8004e94:	e005      	b.n	8004ea2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f96f 	bl	800517a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 f980 	bl	80051a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	f003 0308 	and.w	r3, r3, #8
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d020      	beq.n	8004ef4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f003 0308 	and.w	r3, r3, #8
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d01b      	beq.n	8004ef4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f06f 0208 	mvn.w	r2, #8
 8004ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2204      	movs	r2, #4
 8004eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	f003 0303 	and.w	r3, r3, #3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f957 	bl	800518e <HAL_TIM_IC_CaptureCallback>
 8004ee0:	e005      	b.n	8004eee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f949 	bl	800517a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 f95a 	bl	80051a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	f003 0310 	and.w	r3, r3, #16
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d020      	beq.n	8004f40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f003 0310 	and.w	r3, r3, #16
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d01b      	beq.n	8004f40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f06f 0210 	mvn.w	r2, #16
 8004f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2208      	movs	r2, #8
 8004f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f931 	bl	800518e <HAL_TIM_IC_CaptureCallback>
 8004f2c:	e005      	b.n	8004f3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f923 	bl	800517a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f934 	bl	80051a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00c      	beq.n	8004f64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d007      	beq.n	8004f64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f06f 0201 	mvn.w	r2, #1
 8004f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f901 	bl	8005166 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00c      	beq.n	8004f88 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d007      	beq.n	8004f88 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 faee 	bl	8005564 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00c      	beq.n	8004fac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d007      	beq.n	8004fac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f905 	bl	80051b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	f003 0320 	and.w	r3, r3, #32
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00c      	beq.n	8004fd0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f003 0320 	and.w	r3, r3, #32
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d007      	beq.n	8004fd0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f06f 0220 	mvn.w	r2, #32
 8004fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 fac0 	bl	8005550 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fd0:	bf00      	nop
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d101      	bne.n	8004ff4 <HAL_TIM_ConfigClockSource+0x1c>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	e0b4      	b.n	800515e <HAL_TIM_ConfigClockSource+0x186>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005012:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800501a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800502c:	d03e      	beq.n	80050ac <HAL_TIM_ConfigClockSource+0xd4>
 800502e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005032:	f200 8087 	bhi.w	8005144 <HAL_TIM_ConfigClockSource+0x16c>
 8005036:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800503a:	f000 8086 	beq.w	800514a <HAL_TIM_ConfigClockSource+0x172>
 800503e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005042:	d87f      	bhi.n	8005144 <HAL_TIM_ConfigClockSource+0x16c>
 8005044:	2b70      	cmp	r3, #112	@ 0x70
 8005046:	d01a      	beq.n	800507e <HAL_TIM_ConfigClockSource+0xa6>
 8005048:	2b70      	cmp	r3, #112	@ 0x70
 800504a:	d87b      	bhi.n	8005144 <HAL_TIM_ConfigClockSource+0x16c>
 800504c:	2b60      	cmp	r3, #96	@ 0x60
 800504e:	d050      	beq.n	80050f2 <HAL_TIM_ConfigClockSource+0x11a>
 8005050:	2b60      	cmp	r3, #96	@ 0x60
 8005052:	d877      	bhi.n	8005144 <HAL_TIM_ConfigClockSource+0x16c>
 8005054:	2b50      	cmp	r3, #80	@ 0x50
 8005056:	d03c      	beq.n	80050d2 <HAL_TIM_ConfigClockSource+0xfa>
 8005058:	2b50      	cmp	r3, #80	@ 0x50
 800505a:	d873      	bhi.n	8005144 <HAL_TIM_ConfigClockSource+0x16c>
 800505c:	2b40      	cmp	r3, #64	@ 0x40
 800505e:	d058      	beq.n	8005112 <HAL_TIM_ConfigClockSource+0x13a>
 8005060:	2b40      	cmp	r3, #64	@ 0x40
 8005062:	d86f      	bhi.n	8005144 <HAL_TIM_ConfigClockSource+0x16c>
 8005064:	2b30      	cmp	r3, #48	@ 0x30
 8005066:	d064      	beq.n	8005132 <HAL_TIM_ConfigClockSource+0x15a>
 8005068:	2b30      	cmp	r3, #48	@ 0x30
 800506a:	d86b      	bhi.n	8005144 <HAL_TIM_ConfigClockSource+0x16c>
 800506c:	2b20      	cmp	r3, #32
 800506e:	d060      	beq.n	8005132 <HAL_TIM_ConfigClockSource+0x15a>
 8005070:	2b20      	cmp	r3, #32
 8005072:	d867      	bhi.n	8005144 <HAL_TIM_ConfigClockSource+0x16c>
 8005074:	2b00      	cmp	r3, #0
 8005076:	d05c      	beq.n	8005132 <HAL_TIM_ConfigClockSource+0x15a>
 8005078:	2b10      	cmp	r3, #16
 800507a:	d05a      	beq.n	8005132 <HAL_TIM_ConfigClockSource+0x15a>
 800507c:	e062      	b.n	8005144 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800508e:	f000 f9c3 	bl	8005418 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80050a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	609a      	str	r2, [r3, #8]
      break;
 80050aa:	e04f      	b.n	800514c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050bc:	f000 f9ac 	bl	8005418 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689a      	ldr	r2, [r3, #8]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050ce:	609a      	str	r2, [r3, #8]
      break;
 80050d0:	e03c      	b.n	800514c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050de:	461a      	mov	r2, r3
 80050e0:	f000 f920 	bl	8005324 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2150      	movs	r1, #80	@ 0x50
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 f979 	bl	80053e2 <TIM_ITRx_SetConfig>
      break;
 80050f0:	e02c      	b.n	800514c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050fe:	461a      	mov	r2, r3
 8005100:	f000 f93f 	bl	8005382 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2160      	movs	r1, #96	@ 0x60
 800510a:	4618      	mov	r0, r3
 800510c:	f000 f969 	bl	80053e2 <TIM_ITRx_SetConfig>
      break;
 8005110:	e01c      	b.n	800514c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800511e:	461a      	mov	r2, r3
 8005120:	f000 f900 	bl	8005324 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2140      	movs	r1, #64	@ 0x40
 800512a:	4618      	mov	r0, r3
 800512c:	f000 f959 	bl	80053e2 <TIM_ITRx_SetConfig>
      break;
 8005130:	e00c      	b.n	800514c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4619      	mov	r1, r3
 800513c:	4610      	mov	r0, r2
 800513e:	f000 f950 	bl	80053e2 <TIM_ITRx_SetConfig>
      break;
 8005142:	e003      	b.n	800514c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	73fb      	strb	r3, [r7, #15]
      break;
 8005148:	e000      	b.n	800514c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800514a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800515c:	7bfb      	ldrb	r3, [r7, #15]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005166:	b480      	push	{r7}
 8005168:	b083      	sub	sp, #12
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800516e:	bf00      	nop
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800517a:	b480      	push	{r7}
 800517c:	b083      	sub	sp, #12
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005182:	bf00      	nop
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800518e:	b480      	push	{r7}
 8005190:	b083      	sub	sp, #12
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b083      	sub	sp, #12
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051aa:	bf00      	nop
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b083      	sub	sp, #12
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051be:	bf00      	nop
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
	...

080051cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a46      	ldr	r2, [pc, #280]	@ (80052f8 <TIM_Base_SetConfig+0x12c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d013      	beq.n	800520c <TIM_Base_SetConfig+0x40>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051ea:	d00f      	beq.n	800520c <TIM_Base_SetConfig+0x40>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a43      	ldr	r2, [pc, #268]	@ (80052fc <TIM_Base_SetConfig+0x130>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d00b      	beq.n	800520c <TIM_Base_SetConfig+0x40>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a42      	ldr	r2, [pc, #264]	@ (8005300 <TIM_Base_SetConfig+0x134>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d007      	beq.n	800520c <TIM_Base_SetConfig+0x40>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a41      	ldr	r2, [pc, #260]	@ (8005304 <TIM_Base_SetConfig+0x138>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d003      	beq.n	800520c <TIM_Base_SetConfig+0x40>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a40      	ldr	r2, [pc, #256]	@ (8005308 <TIM_Base_SetConfig+0x13c>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d108      	bne.n	800521e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005212:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	4313      	orrs	r3, r2
 800521c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a35      	ldr	r2, [pc, #212]	@ (80052f8 <TIM_Base_SetConfig+0x12c>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d02b      	beq.n	800527e <TIM_Base_SetConfig+0xb2>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800522c:	d027      	beq.n	800527e <TIM_Base_SetConfig+0xb2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a32      	ldr	r2, [pc, #200]	@ (80052fc <TIM_Base_SetConfig+0x130>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d023      	beq.n	800527e <TIM_Base_SetConfig+0xb2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a31      	ldr	r2, [pc, #196]	@ (8005300 <TIM_Base_SetConfig+0x134>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d01f      	beq.n	800527e <TIM_Base_SetConfig+0xb2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a30      	ldr	r2, [pc, #192]	@ (8005304 <TIM_Base_SetConfig+0x138>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d01b      	beq.n	800527e <TIM_Base_SetConfig+0xb2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a2f      	ldr	r2, [pc, #188]	@ (8005308 <TIM_Base_SetConfig+0x13c>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d017      	beq.n	800527e <TIM_Base_SetConfig+0xb2>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a2e      	ldr	r2, [pc, #184]	@ (800530c <TIM_Base_SetConfig+0x140>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d013      	beq.n	800527e <TIM_Base_SetConfig+0xb2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a2d      	ldr	r2, [pc, #180]	@ (8005310 <TIM_Base_SetConfig+0x144>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d00f      	beq.n	800527e <TIM_Base_SetConfig+0xb2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a2c      	ldr	r2, [pc, #176]	@ (8005314 <TIM_Base_SetConfig+0x148>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d00b      	beq.n	800527e <TIM_Base_SetConfig+0xb2>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a2b      	ldr	r2, [pc, #172]	@ (8005318 <TIM_Base_SetConfig+0x14c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d007      	beq.n	800527e <TIM_Base_SetConfig+0xb2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a2a      	ldr	r2, [pc, #168]	@ (800531c <TIM_Base_SetConfig+0x150>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d003      	beq.n	800527e <TIM_Base_SetConfig+0xb2>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a29      	ldr	r2, [pc, #164]	@ (8005320 <TIM_Base_SetConfig+0x154>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d108      	bne.n	8005290 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005284:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	4313      	orrs	r3, r2
 800528e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	4313      	orrs	r3, r2
 800529c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	689a      	ldr	r2, [r3, #8]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a10      	ldr	r2, [pc, #64]	@ (80052f8 <TIM_Base_SetConfig+0x12c>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d003      	beq.n	80052c4 <TIM_Base_SetConfig+0xf8>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a12      	ldr	r2, [pc, #72]	@ (8005308 <TIM_Base_SetConfig+0x13c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d103      	bne.n	80052cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	691a      	ldr	r2, [r3, #16]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d105      	bne.n	80052ea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f023 0201 	bic.w	r2, r3, #1
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	611a      	str	r2, [r3, #16]
  }
}
 80052ea:	bf00      	nop
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	40010000 	.word	0x40010000
 80052fc:	40000400 	.word	0x40000400
 8005300:	40000800 	.word	0x40000800
 8005304:	40000c00 	.word	0x40000c00
 8005308:	40010400 	.word	0x40010400
 800530c:	40014000 	.word	0x40014000
 8005310:	40014400 	.word	0x40014400
 8005314:	40014800 	.word	0x40014800
 8005318:	40001800 	.word	0x40001800
 800531c:	40001c00 	.word	0x40001c00
 8005320:	40002000 	.word	0x40002000

08005324 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6a1b      	ldr	r3, [r3, #32]
 8005334:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	f023 0201 	bic.w	r2, r3, #1
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800534e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	011b      	lsls	r3, r3, #4
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	4313      	orrs	r3, r2
 8005358:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f023 030a 	bic.w	r3, r3, #10
 8005360:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	4313      	orrs	r3, r2
 8005368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	621a      	str	r2, [r3, #32]
}
 8005376:	bf00      	nop
 8005378:	371c      	adds	r7, #28
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005382:	b480      	push	{r7}
 8005384:	b087      	sub	sp, #28
 8005386:	af00      	add	r7, sp, #0
 8005388:	60f8      	str	r0, [r7, #12]
 800538a:	60b9      	str	r1, [r7, #8]
 800538c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	f023 0210 	bic.w	r2, r3, #16
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80053ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	031b      	lsls	r3, r3, #12
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80053be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	011b      	lsls	r3, r3, #4
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	621a      	str	r2, [r3, #32]
}
 80053d6:	bf00      	nop
 80053d8:	371c      	adds	r7, #28
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b085      	sub	sp, #20
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
 80053ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4313      	orrs	r3, r2
 8005400:	f043 0307 	orr.w	r3, r3, #7
 8005404:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	609a      	str	r2, [r3, #8]
}
 800540c:	bf00      	nop
 800540e:	3714      	adds	r7, #20
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
 8005424:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005432:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	021a      	lsls	r2, r3, #8
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	431a      	orrs	r2, r3
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	4313      	orrs	r3, r2
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	4313      	orrs	r3, r2
 8005444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	609a      	str	r2, [r3, #8]
}
 800544c:	bf00      	nop
 800544e:	371c      	adds	r7, #28
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005468:	2b01      	cmp	r3, #1
 800546a:	d101      	bne.n	8005470 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800546c:	2302      	movs	r3, #2
 800546e:	e05a      	b.n	8005526 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005496:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	4313      	orrs	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a21      	ldr	r2, [pc, #132]	@ (8005534 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d022      	beq.n	80054fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054bc:	d01d      	beq.n	80054fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a1d      	ldr	r2, [pc, #116]	@ (8005538 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d018      	beq.n	80054fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a1b      	ldr	r2, [pc, #108]	@ (800553c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d013      	beq.n	80054fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a1a      	ldr	r2, [pc, #104]	@ (8005540 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d00e      	beq.n	80054fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a18      	ldr	r2, [pc, #96]	@ (8005544 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d009      	beq.n	80054fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a17      	ldr	r2, [pc, #92]	@ (8005548 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d004      	beq.n	80054fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a15      	ldr	r2, [pc, #84]	@ (800554c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d10c      	bne.n	8005514 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005500:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	4313      	orrs	r3, r2
 800550a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	40010000 	.word	0x40010000
 8005538:	40000400 	.word	0x40000400
 800553c:	40000800 	.word	0x40000800
 8005540:	40000c00 	.word	0x40000c00
 8005544:	40010400 	.word	0x40010400
 8005548:	40014000 	.word	0x40014000
 800554c:	40001800 	.word	0x40001800

08005550 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e042      	b.n	8005610 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d106      	bne.n	80055a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7fc fda4 	bl	80020ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2224      	movs	r2, #36	@ 0x24
 80055a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68da      	ldr	r2, [r3, #12]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 f82b 	bl	8005618 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	691a      	ldr	r2, [r3, #16]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	695a      	ldr	r2, [r3, #20]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68da      	ldr	r2, [r3, #12]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2220      	movs	r2, #32
 80055fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2220      	movs	r2, #32
 8005604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800561c:	b0c0      	sub	sp, #256	@ 0x100
 800561e:	af00      	add	r7, sp, #0
 8005620:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005634:	68d9      	ldr	r1, [r3, #12]
 8005636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	ea40 0301 	orr.w	r3, r0, r1
 8005640:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005646:	689a      	ldr	r2, [r3, #8]
 8005648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	431a      	orrs	r2, r3
 8005650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	431a      	orrs	r2, r3
 8005658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	4313      	orrs	r3, r2
 8005660:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005670:	f021 010c 	bic.w	r1, r1, #12
 8005674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800567e:	430b      	orrs	r3, r1
 8005680:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800568e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005692:	6999      	ldr	r1, [r3, #24]
 8005694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	ea40 0301 	orr.w	r3, r0, r1
 800569e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	4b8f      	ldr	r3, [pc, #572]	@ (80058e4 <UART_SetConfig+0x2cc>)
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d005      	beq.n	80056b8 <UART_SetConfig+0xa0>
 80056ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	4b8d      	ldr	r3, [pc, #564]	@ (80058e8 <UART_SetConfig+0x2d0>)
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d104      	bne.n	80056c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056b8:	f7fd fe88 	bl	80033cc <HAL_RCC_GetPCLK2Freq>
 80056bc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80056c0:	e003      	b.n	80056ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056c2:	f7fd fe6f 	bl	80033a4 <HAL_RCC_GetPCLK1Freq>
 80056c6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ce:	69db      	ldr	r3, [r3, #28]
 80056d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056d4:	f040 810c 	bne.w	80058f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056dc:	2200      	movs	r2, #0
 80056de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80056e2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80056e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80056ea:	4622      	mov	r2, r4
 80056ec:	462b      	mov	r3, r5
 80056ee:	1891      	adds	r1, r2, r2
 80056f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80056f2:	415b      	adcs	r3, r3
 80056f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80056fa:	4621      	mov	r1, r4
 80056fc:	eb12 0801 	adds.w	r8, r2, r1
 8005700:	4629      	mov	r1, r5
 8005702:	eb43 0901 	adc.w	r9, r3, r1
 8005706:	f04f 0200 	mov.w	r2, #0
 800570a:	f04f 0300 	mov.w	r3, #0
 800570e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005712:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005716:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800571a:	4690      	mov	r8, r2
 800571c:	4699      	mov	r9, r3
 800571e:	4623      	mov	r3, r4
 8005720:	eb18 0303 	adds.w	r3, r8, r3
 8005724:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005728:	462b      	mov	r3, r5
 800572a:	eb49 0303 	adc.w	r3, r9, r3
 800572e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800573e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005742:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005746:	460b      	mov	r3, r1
 8005748:	18db      	adds	r3, r3, r3
 800574a:	653b      	str	r3, [r7, #80]	@ 0x50
 800574c:	4613      	mov	r3, r2
 800574e:	eb42 0303 	adc.w	r3, r2, r3
 8005752:	657b      	str	r3, [r7, #84]	@ 0x54
 8005754:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005758:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800575c:	f7fb fa22 	bl	8000ba4 <__aeabi_uldivmod>
 8005760:	4602      	mov	r2, r0
 8005762:	460b      	mov	r3, r1
 8005764:	4b61      	ldr	r3, [pc, #388]	@ (80058ec <UART_SetConfig+0x2d4>)
 8005766:	fba3 2302 	umull	r2, r3, r3, r2
 800576a:	095b      	lsrs	r3, r3, #5
 800576c:	011c      	lsls	r4, r3, #4
 800576e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005772:	2200      	movs	r2, #0
 8005774:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005778:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800577c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005780:	4642      	mov	r2, r8
 8005782:	464b      	mov	r3, r9
 8005784:	1891      	adds	r1, r2, r2
 8005786:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005788:	415b      	adcs	r3, r3
 800578a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800578c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005790:	4641      	mov	r1, r8
 8005792:	eb12 0a01 	adds.w	sl, r2, r1
 8005796:	4649      	mov	r1, r9
 8005798:	eb43 0b01 	adc.w	fp, r3, r1
 800579c:	f04f 0200 	mov.w	r2, #0
 80057a0:	f04f 0300 	mov.w	r3, #0
 80057a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80057a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80057ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057b0:	4692      	mov	sl, r2
 80057b2:	469b      	mov	fp, r3
 80057b4:	4643      	mov	r3, r8
 80057b6:	eb1a 0303 	adds.w	r3, sl, r3
 80057ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057be:	464b      	mov	r3, r9
 80057c0:	eb4b 0303 	adc.w	r3, fp, r3
 80057c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80057c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057d4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80057d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80057dc:	460b      	mov	r3, r1
 80057de:	18db      	adds	r3, r3, r3
 80057e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80057e2:	4613      	mov	r3, r2
 80057e4:	eb42 0303 	adc.w	r3, r2, r3
 80057e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80057ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80057ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80057f2:	f7fb f9d7 	bl	8000ba4 <__aeabi_uldivmod>
 80057f6:	4602      	mov	r2, r0
 80057f8:	460b      	mov	r3, r1
 80057fa:	4611      	mov	r1, r2
 80057fc:	4b3b      	ldr	r3, [pc, #236]	@ (80058ec <UART_SetConfig+0x2d4>)
 80057fe:	fba3 2301 	umull	r2, r3, r3, r1
 8005802:	095b      	lsrs	r3, r3, #5
 8005804:	2264      	movs	r2, #100	@ 0x64
 8005806:	fb02 f303 	mul.w	r3, r2, r3
 800580a:	1acb      	subs	r3, r1, r3
 800580c:	00db      	lsls	r3, r3, #3
 800580e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005812:	4b36      	ldr	r3, [pc, #216]	@ (80058ec <UART_SetConfig+0x2d4>)
 8005814:	fba3 2302 	umull	r2, r3, r3, r2
 8005818:	095b      	lsrs	r3, r3, #5
 800581a:	005b      	lsls	r3, r3, #1
 800581c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005820:	441c      	add	r4, r3
 8005822:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005826:	2200      	movs	r2, #0
 8005828:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800582c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005830:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005834:	4642      	mov	r2, r8
 8005836:	464b      	mov	r3, r9
 8005838:	1891      	adds	r1, r2, r2
 800583a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800583c:	415b      	adcs	r3, r3
 800583e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005840:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005844:	4641      	mov	r1, r8
 8005846:	1851      	adds	r1, r2, r1
 8005848:	6339      	str	r1, [r7, #48]	@ 0x30
 800584a:	4649      	mov	r1, r9
 800584c:	414b      	adcs	r3, r1
 800584e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005850:	f04f 0200 	mov.w	r2, #0
 8005854:	f04f 0300 	mov.w	r3, #0
 8005858:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800585c:	4659      	mov	r1, fp
 800585e:	00cb      	lsls	r3, r1, #3
 8005860:	4651      	mov	r1, sl
 8005862:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005866:	4651      	mov	r1, sl
 8005868:	00ca      	lsls	r2, r1, #3
 800586a:	4610      	mov	r0, r2
 800586c:	4619      	mov	r1, r3
 800586e:	4603      	mov	r3, r0
 8005870:	4642      	mov	r2, r8
 8005872:	189b      	adds	r3, r3, r2
 8005874:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005878:	464b      	mov	r3, r9
 800587a:	460a      	mov	r2, r1
 800587c:	eb42 0303 	adc.w	r3, r2, r3
 8005880:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005890:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005894:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005898:	460b      	mov	r3, r1
 800589a:	18db      	adds	r3, r3, r3
 800589c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800589e:	4613      	mov	r3, r2
 80058a0:	eb42 0303 	adc.w	r3, r2, r3
 80058a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80058aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80058ae:	f7fb f979 	bl	8000ba4 <__aeabi_uldivmod>
 80058b2:	4602      	mov	r2, r0
 80058b4:	460b      	mov	r3, r1
 80058b6:	4b0d      	ldr	r3, [pc, #52]	@ (80058ec <UART_SetConfig+0x2d4>)
 80058b8:	fba3 1302 	umull	r1, r3, r3, r2
 80058bc:	095b      	lsrs	r3, r3, #5
 80058be:	2164      	movs	r1, #100	@ 0x64
 80058c0:	fb01 f303 	mul.w	r3, r1, r3
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	00db      	lsls	r3, r3, #3
 80058c8:	3332      	adds	r3, #50	@ 0x32
 80058ca:	4a08      	ldr	r2, [pc, #32]	@ (80058ec <UART_SetConfig+0x2d4>)
 80058cc:	fba2 2303 	umull	r2, r3, r2, r3
 80058d0:	095b      	lsrs	r3, r3, #5
 80058d2:	f003 0207 	and.w	r2, r3, #7
 80058d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4422      	add	r2, r4
 80058de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058e0:	e106      	b.n	8005af0 <UART_SetConfig+0x4d8>
 80058e2:	bf00      	nop
 80058e4:	40011000 	.word	0x40011000
 80058e8:	40011400 	.word	0x40011400
 80058ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058f4:	2200      	movs	r2, #0
 80058f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80058fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80058fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005902:	4642      	mov	r2, r8
 8005904:	464b      	mov	r3, r9
 8005906:	1891      	adds	r1, r2, r2
 8005908:	6239      	str	r1, [r7, #32]
 800590a:	415b      	adcs	r3, r3
 800590c:	627b      	str	r3, [r7, #36]	@ 0x24
 800590e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005912:	4641      	mov	r1, r8
 8005914:	1854      	adds	r4, r2, r1
 8005916:	4649      	mov	r1, r9
 8005918:	eb43 0501 	adc.w	r5, r3, r1
 800591c:	f04f 0200 	mov.w	r2, #0
 8005920:	f04f 0300 	mov.w	r3, #0
 8005924:	00eb      	lsls	r3, r5, #3
 8005926:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800592a:	00e2      	lsls	r2, r4, #3
 800592c:	4614      	mov	r4, r2
 800592e:	461d      	mov	r5, r3
 8005930:	4643      	mov	r3, r8
 8005932:	18e3      	adds	r3, r4, r3
 8005934:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005938:	464b      	mov	r3, r9
 800593a:	eb45 0303 	adc.w	r3, r5, r3
 800593e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800594e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005952:	f04f 0200 	mov.w	r2, #0
 8005956:	f04f 0300 	mov.w	r3, #0
 800595a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800595e:	4629      	mov	r1, r5
 8005960:	008b      	lsls	r3, r1, #2
 8005962:	4621      	mov	r1, r4
 8005964:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005968:	4621      	mov	r1, r4
 800596a:	008a      	lsls	r2, r1, #2
 800596c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005970:	f7fb f918 	bl	8000ba4 <__aeabi_uldivmod>
 8005974:	4602      	mov	r2, r0
 8005976:	460b      	mov	r3, r1
 8005978:	4b60      	ldr	r3, [pc, #384]	@ (8005afc <UART_SetConfig+0x4e4>)
 800597a:	fba3 2302 	umull	r2, r3, r3, r2
 800597e:	095b      	lsrs	r3, r3, #5
 8005980:	011c      	lsls	r4, r3, #4
 8005982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005986:	2200      	movs	r2, #0
 8005988:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800598c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005990:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005994:	4642      	mov	r2, r8
 8005996:	464b      	mov	r3, r9
 8005998:	1891      	adds	r1, r2, r2
 800599a:	61b9      	str	r1, [r7, #24]
 800599c:	415b      	adcs	r3, r3
 800599e:	61fb      	str	r3, [r7, #28]
 80059a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059a4:	4641      	mov	r1, r8
 80059a6:	1851      	adds	r1, r2, r1
 80059a8:	6139      	str	r1, [r7, #16]
 80059aa:	4649      	mov	r1, r9
 80059ac:	414b      	adcs	r3, r1
 80059ae:	617b      	str	r3, [r7, #20]
 80059b0:	f04f 0200 	mov.w	r2, #0
 80059b4:	f04f 0300 	mov.w	r3, #0
 80059b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059bc:	4659      	mov	r1, fp
 80059be:	00cb      	lsls	r3, r1, #3
 80059c0:	4651      	mov	r1, sl
 80059c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059c6:	4651      	mov	r1, sl
 80059c8:	00ca      	lsls	r2, r1, #3
 80059ca:	4610      	mov	r0, r2
 80059cc:	4619      	mov	r1, r3
 80059ce:	4603      	mov	r3, r0
 80059d0:	4642      	mov	r2, r8
 80059d2:	189b      	adds	r3, r3, r2
 80059d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80059d8:	464b      	mov	r3, r9
 80059da:	460a      	mov	r2, r1
 80059dc:	eb42 0303 	adc.w	r3, r2, r3
 80059e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80059e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80059ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80059f0:	f04f 0200 	mov.w	r2, #0
 80059f4:	f04f 0300 	mov.w	r3, #0
 80059f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80059fc:	4649      	mov	r1, r9
 80059fe:	008b      	lsls	r3, r1, #2
 8005a00:	4641      	mov	r1, r8
 8005a02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a06:	4641      	mov	r1, r8
 8005a08:	008a      	lsls	r2, r1, #2
 8005a0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005a0e:	f7fb f8c9 	bl	8000ba4 <__aeabi_uldivmod>
 8005a12:	4602      	mov	r2, r0
 8005a14:	460b      	mov	r3, r1
 8005a16:	4611      	mov	r1, r2
 8005a18:	4b38      	ldr	r3, [pc, #224]	@ (8005afc <UART_SetConfig+0x4e4>)
 8005a1a:	fba3 2301 	umull	r2, r3, r3, r1
 8005a1e:	095b      	lsrs	r3, r3, #5
 8005a20:	2264      	movs	r2, #100	@ 0x64
 8005a22:	fb02 f303 	mul.w	r3, r2, r3
 8005a26:	1acb      	subs	r3, r1, r3
 8005a28:	011b      	lsls	r3, r3, #4
 8005a2a:	3332      	adds	r3, #50	@ 0x32
 8005a2c:	4a33      	ldr	r2, [pc, #204]	@ (8005afc <UART_SetConfig+0x4e4>)
 8005a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a32:	095b      	lsrs	r3, r3, #5
 8005a34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a38:	441c      	add	r4, r3
 8005a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a3e:	2200      	movs	r2, #0
 8005a40:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a42:	677a      	str	r2, [r7, #116]	@ 0x74
 8005a44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005a48:	4642      	mov	r2, r8
 8005a4a:	464b      	mov	r3, r9
 8005a4c:	1891      	adds	r1, r2, r2
 8005a4e:	60b9      	str	r1, [r7, #8]
 8005a50:	415b      	adcs	r3, r3
 8005a52:	60fb      	str	r3, [r7, #12]
 8005a54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a58:	4641      	mov	r1, r8
 8005a5a:	1851      	adds	r1, r2, r1
 8005a5c:	6039      	str	r1, [r7, #0]
 8005a5e:	4649      	mov	r1, r9
 8005a60:	414b      	adcs	r3, r1
 8005a62:	607b      	str	r3, [r7, #4]
 8005a64:	f04f 0200 	mov.w	r2, #0
 8005a68:	f04f 0300 	mov.w	r3, #0
 8005a6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a70:	4659      	mov	r1, fp
 8005a72:	00cb      	lsls	r3, r1, #3
 8005a74:	4651      	mov	r1, sl
 8005a76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a7a:	4651      	mov	r1, sl
 8005a7c:	00ca      	lsls	r2, r1, #3
 8005a7e:	4610      	mov	r0, r2
 8005a80:	4619      	mov	r1, r3
 8005a82:	4603      	mov	r3, r0
 8005a84:	4642      	mov	r2, r8
 8005a86:	189b      	adds	r3, r3, r2
 8005a88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a8a:	464b      	mov	r3, r9
 8005a8c:	460a      	mov	r2, r1
 8005a8e:	eb42 0303 	adc.w	r3, r2, r3
 8005a92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a9e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005aa0:	f04f 0200 	mov.w	r2, #0
 8005aa4:	f04f 0300 	mov.w	r3, #0
 8005aa8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005aac:	4649      	mov	r1, r9
 8005aae:	008b      	lsls	r3, r1, #2
 8005ab0:	4641      	mov	r1, r8
 8005ab2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ab6:	4641      	mov	r1, r8
 8005ab8:	008a      	lsls	r2, r1, #2
 8005aba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005abe:	f7fb f871 	bl	8000ba4 <__aeabi_uldivmod>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8005afc <UART_SetConfig+0x4e4>)
 8005ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8005acc:	095b      	lsrs	r3, r3, #5
 8005ace:	2164      	movs	r1, #100	@ 0x64
 8005ad0:	fb01 f303 	mul.w	r3, r1, r3
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	011b      	lsls	r3, r3, #4
 8005ad8:	3332      	adds	r3, #50	@ 0x32
 8005ada:	4a08      	ldr	r2, [pc, #32]	@ (8005afc <UART_SetConfig+0x4e4>)
 8005adc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae0:	095b      	lsrs	r3, r3, #5
 8005ae2:	f003 020f 	and.w	r2, r3, #15
 8005ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4422      	add	r2, r4
 8005aee:	609a      	str	r2, [r3, #8]
}
 8005af0:	bf00      	nop
 8005af2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005af6:	46bd      	mov	sp, r7
 8005af8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005afc:	51eb851f 	.word	0x51eb851f

08005b00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b00:	b084      	sub	sp, #16
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b084      	sub	sp, #16
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
 8005b0a:	f107 001c 	add.w	r0, r7, #28
 8005b0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b12:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d123      	bne.n	8005b62 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b1e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005b2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b42:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d105      	bne.n	8005b56 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 fa9a 	bl	8006090 <USB_CoreReset>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	73fb      	strb	r3, [r7, #15]
 8005b60:	e01b      	b.n	8005b9a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 fa8e 	bl	8006090 <USB_CoreReset>
 8005b74:	4603      	mov	r3, r0
 8005b76:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b78:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d106      	bne.n	8005b8e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b84:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	639a      	str	r2, [r3, #56]	@ 0x38
 8005b8c:	e005      	b.n	8005b9a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b92:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005b9a:	7fbb      	ldrb	r3, [r7, #30]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d10b      	bne.n	8005bb8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f043 0206 	orr.w	r2, r3, #6
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f043 0220 	orr.w	r2, r3, #32
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bc4:	b004      	add	sp, #16
 8005bc6:	4770      	bx	lr

08005bc8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f023 0201 	bic.w	r2, r3, #1
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b084      	sub	sp, #16
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c06:	78fb      	ldrb	r3, [r7, #3]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d115      	bne.n	8005c38 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005c18:	200a      	movs	r0, #10
 8005c1a:	f7fc fc0f 	bl	800243c <HAL_Delay>
      ms += 10U;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	330a      	adds	r3, #10
 8005c22:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 fa25 	bl	8006074 <USB_GetMode>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d01e      	beq.n	8005c6e <USB_SetCurrentMode+0x84>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2bc7      	cmp	r3, #199	@ 0xc7
 8005c34:	d9f0      	bls.n	8005c18 <USB_SetCurrentMode+0x2e>
 8005c36:	e01a      	b.n	8005c6e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c38:	78fb      	ldrb	r3, [r7, #3]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d115      	bne.n	8005c6a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005c4a:	200a      	movs	r0, #10
 8005c4c:	f7fc fbf6 	bl	800243c <HAL_Delay>
      ms += 10U;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	330a      	adds	r3, #10
 8005c54:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 fa0c 	bl	8006074 <USB_GetMode>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d005      	beq.n	8005c6e <USB_SetCurrentMode+0x84>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2bc7      	cmp	r3, #199	@ 0xc7
 8005c66:	d9f0      	bls.n	8005c4a <USB_SetCurrentMode+0x60>
 8005c68:	e001      	b.n	8005c6e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e005      	b.n	8005c7a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2bc8      	cmp	r3, #200	@ 0xc8
 8005c72:	d101      	bne.n	8005c78 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e000      	b.n	8005c7a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
	...

08005c84 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c84:	b084      	sub	sp, #16
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b086      	sub	sp, #24
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
 8005c8e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005c92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	613b      	str	r3, [r7, #16]
 8005ca2:	e009      	b.n	8005cb8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	3340      	adds	r3, #64	@ 0x40
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4413      	add	r3, r2
 8005cae:	2200      	movs	r2, #0
 8005cb0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	613b      	str	r3, [r7, #16]
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	2b0e      	cmp	r3, #14
 8005cbc:	d9f2      	bls.n	8005ca4 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005cbe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d11c      	bne.n	8005d00 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005cd4:	f043 0302 	orr.w	r3, r3, #2
 8005cd8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cde:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	601a      	str	r2, [r3, #0]
 8005cfe:	e005      	b.n	8005d0c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d04:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005d12:	461a      	mov	r2, r3
 8005d14:	2300      	movs	r3, #0
 8005d16:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d18:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d10d      	bne.n	8005d3c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005d20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d104      	bne.n	8005d32 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005d28:	2100      	movs	r1, #0
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f968 	bl	8006000 <USB_SetDevSpeed>
 8005d30:	e008      	b.n	8005d44 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005d32:	2101      	movs	r1, #1
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 f963 	bl	8006000 <USB_SetDevSpeed>
 8005d3a:	e003      	b.n	8005d44 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d3c:	2103      	movs	r1, #3
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f95e 	bl	8006000 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d44:	2110      	movs	r1, #16
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f8fa 	bl	8005f40 <USB_FlushTxFifo>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f924 	bl	8005fa4 <USB_FlushRxFifo>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d001      	beq.n	8005d66 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	2300      	movs	r3, #0
 8005d70:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d78:	461a      	mov	r2, r3
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d84:	461a      	mov	r2, r3
 8005d86:	2300      	movs	r3, #0
 8005d88:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	613b      	str	r3, [r7, #16]
 8005d8e:	e043      	b.n	8005e18 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	015a      	lsls	r2, r3, #5
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	4413      	add	r3, r2
 8005d98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005da2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005da6:	d118      	bne.n	8005dda <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10a      	bne.n	8005dc4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dba:	461a      	mov	r2, r3
 8005dbc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005dc0:	6013      	str	r3, [r2, #0]
 8005dc2:	e013      	b.n	8005dec <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005dd6:	6013      	str	r3, [r2, #0]
 8005dd8:	e008      	b.n	8005dec <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005de6:	461a      	mov	r2, r3
 8005de8:	2300      	movs	r3, #0
 8005dea:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	015a      	lsls	r2, r3, #5
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	4413      	add	r3, r2
 8005df4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005df8:	461a      	mov	r2, r3
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005e10:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	3301      	adds	r3, #1
 8005e16:	613b      	str	r3, [r7, #16]
 8005e18:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d3b5      	bcc.n	8005d90 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e24:	2300      	movs	r3, #0
 8005e26:	613b      	str	r3, [r7, #16]
 8005e28:	e043      	b.n	8005eb2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	015a      	lsls	r2, r3, #5
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	4413      	add	r3, r2
 8005e32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e40:	d118      	bne.n	8005e74 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d10a      	bne.n	8005e5e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	015a      	lsls	r2, r3, #5
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	4413      	add	r3, r2
 8005e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e54:	461a      	mov	r2, r3
 8005e56:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005e5a:	6013      	str	r3, [r2, #0]
 8005e5c:	e013      	b.n	8005e86 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005e70:	6013      	str	r3, [r2, #0]
 8005e72:	e008      	b.n	8005e86 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e80:	461a      	mov	r2, r3
 8005e82:	2300      	movs	r3, #0
 8005e84:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	015a      	lsls	r2, r3, #5
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e92:	461a      	mov	r2, r3
 8005e94:	2300      	movs	r3, #0
 8005e96:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005eaa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	613b      	str	r3, [r7, #16]
 8005eb2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d3b5      	bcc.n	8005e2a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ecc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ed0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005ede:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ee0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d105      	bne.n	8005ef4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	f043 0210 	orr.w	r2, r3, #16
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	699a      	ldr	r2, [r3, #24]
 8005ef8:	4b10      	ldr	r3, [pc, #64]	@ (8005f3c <USB_DevInit+0x2b8>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005f00:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d005      	beq.n	8005f14 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	f043 0208 	orr.w	r2, r3, #8
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005f14:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d107      	bne.n	8005f2c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f24:	f043 0304 	orr.w	r3, r3, #4
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005f2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3718      	adds	r7, #24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f38:	b004      	add	sp, #16
 8005f3a:	4770      	bx	lr
 8005f3c:	803c3800 	.word	0x803c3800

08005f40 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	3301      	adds	r3, #1
 8005f52:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f5a:	d901      	bls.n	8005f60 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e01b      	b.n	8005f98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	daf2      	bge.n	8005f4e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	019b      	lsls	r3, r3, #6
 8005f70:	f043 0220 	orr.w	r2, r3, #32
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f84:	d901      	bls.n	8005f8a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e006      	b.n	8005f98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	f003 0320 	and.w	r3, r3, #32
 8005f92:	2b20      	cmp	r3, #32
 8005f94:	d0f0      	beq.n	8005f78 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3714      	adds	r7, #20
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fac:	2300      	movs	r3, #0
 8005fae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005fbc:	d901      	bls.n	8005fc2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e018      	b.n	8005ff4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	daf2      	bge.n	8005fb0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2210      	movs	r2, #16
 8005fd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005fe0:	d901      	bls.n	8005fe6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e006      	b.n	8005ff4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	f003 0310 	and.w	r3, r3, #16
 8005fee:	2b10      	cmp	r3, #16
 8005ff0:	d0f0      	beq.n	8005fd4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3714      	adds	r7, #20
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	460b      	mov	r3, r1
 800600a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	78fb      	ldrb	r3, [r7, #3]
 800601a:	68f9      	ldr	r1, [r7, #12]
 800601c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006020:	4313      	orrs	r3, r2
 8006022:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006032:	b480      	push	{r7}
 8006034:	b085      	sub	sp, #20
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800604c:	f023 0303 	bic.w	r3, r3, #3
 8006050:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006060:	f043 0302 	orr.w	r3, r3, #2
 8006064:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	f003 0301 	and.w	r3, r3, #1
}
 8006084:	4618      	mov	r0, r3
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006098:	2300      	movs	r3, #0
 800609a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	3301      	adds	r3, #1
 80060a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060a8:	d901      	bls.n	80060ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e01b      	b.n	80060e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	daf2      	bge.n	800609c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	f043 0201 	orr.w	r2, r3, #1
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	3301      	adds	r3, #1
 80060ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060d2:	d901      	bls.n	80060d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e006      	b.n	80060e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d0f0      	beq.n	80060c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3714      	adds	r7, #20
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <memset>:
 80060f2:	4402      	add	r2, r0
 80060f4:	4603      	mov	r3, r0
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d100      	bne.n	80060fc <memset+0xa>
 80060fa:	4770      	bx	lr
 80060fc:	f803 1b01 	strb.w	r1, [r3], #1
 8006100:	e7f9      	b.n	80060f6 <memset+0x4>
	...

08006104 <__libc_init_array>:
 8006104:	b570      	push	{r4, r5, r6, lr}
 8006106:	4d0d      	ldr	r5, [pc, #52]	@ (800613c <__libc_init_array+0x38>)
 8006108:	4c0d      	ldr	r4, [pc, #52]	@ (8006140 <__libc_init_array+0x3c>)
 800610a:	1b64      	subs	r4, r4, r5
 800610c:	10a4      	asrs	r4, r4, #2
 800610e:	2600      	movs	r6, #0
 8006110:	42a6      	cmp	r6, r4
 8006112:	d109      	bne.n	8006128 <__libc_init_array+0x24>
 8006114:	4d0b      	ldr	r5, [pc, #44]	@ (8006144 <__libc_init_array+0x40>)
 8006116:	4c0c      	ldr	r4, [pc, #48]	@ (8006148 <__libc_init_array+0x44>)
 8006118:	f001 f89e 	bl	8007258 <_init>
 800611c:	1b64      	subs	r4, r4, r5
 800611e:	10a4      	asrs	r4, r4, #2
 8006120:	2600      	movs	r6, #0
 8006122:	42a6      	cmp	r6, r4
 8006124:	d105      	bne.n	8006132 <__libc_init_array+0x2e>
 8006126:	bd70      	pop	{r4, r5, r6, pc}
 8006128:	f855 3b04 	ldr.w	r3, [r5], #4
 800612c:	4798      	blx	r3
 800612e:	3601      	adds	r6, #1
 8006130:	e7ee      	b.n	8006110 <__libc_init_array+0xc>
 8006132:	f855 3b04 	ldr.w	r3, [r5], #4
 8006136:	4798      	blx	r3
 8006138:	3601      	adds	r6, #1
 800613a:	e7f2      	b.n	8006122 <__libc_init_array+0x1e>
 800613c:	08007468 	.word	0x08007468
 8006140:	08007468 	.word	0x08007468
 8006144:	08007468 	.word	0x08007468
 8006148:	0800746c 	.word	0x0800746c
 800614c:	00000000 	.word	0x00000000

08006150 <cos>:
 8006150:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006152:	ec53 2b10 	vmov	r2, r3, d0
 8006156:	4826      	ldr	r0, [pc, #152]	@ (80061f0 <cos+0xa0>)
 8006158:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800615c:	4281      	cmp	r1, r0
 800615e:	d806      	bhi.n	800616e <cos+0x1e>
 8006160:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80061e8 <cos+0x98>
 8006164:	b005      	add	sp, #20
 8006166:	f85d eb04 	ldr.w	lr, [sp], #4
 800616a:	f000 b899 	b.w	80062a0 <__kernel_cos>
 800616e:	4821      	ldr	r0, [pc, #132]	@ (80061f4 <cos+0xa4>)
 8006170:	4281      	cmp	r1, r0
 8006172:	d908      	bls.n	8006186 <cos+0x36>
 8006174:	4610      	mov	r0, r2
 8006176:	4619      	mov	r1, r3
 8006178:	f7fa f84a 	bl	8000210 <__aeabi_dsub>
 800617c:	ec41 0b10 	vmov	d0, r0, r1
 8006180:	b005      	add	sp, #20
 8006182:	f85d fb04 	ldr.w	pc, [sp], #4
 8006186:	4668      	mov	r0, sp
 8006188:	f000 fa0e 	bl	80065a8 <__ieee754_rem_pio2>
 800618c:	f000 0003 	and.w	r0, r0, #3
 8006190:	2801      	cmp	r0, #1
 8006192:	d00b      	beq.n	80061ac <cos+0x5c>
 8006194:	2802      	cmp	r0, #2
 8006196:	d015      	beq.n	80061c4 <cos+0x74>
 8006198:	b9d8      	cbnz	r0, 80061d2 <cos+0x82>
 800619a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800619e:	ed9d 0b00 	vldr	d0, [sp]
 80061a2:	f000 f87d 	bl	80062a0 <__kernel_cos>
 80061a6:	ec51 0b10 	vmov	r0, r1, d0
 80061aa:	e7e7      	b.n	800617c <cos+0x2c>
 80061ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 80061b0:	ed9d 0b00 	vldr	d0, [sp]
 80061b4:	f000 f93c 	bl	8006430 <__kernel_sin>
 80061b8:	ec53 2b10 	vmov	r2, r3, d0
 80061bc:	4610      	mov	r0, r2
 80061be:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80061c2:	e7db      	b.n	800617c <cos+0x2c>
 80061c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80061c8:	ed9d 0b00 	vldr	d0, [sp]
 80061cc:	f000 f868 	bl	80062a0 <__kernel_cos>
 80061d0:	e7f2      	b.n	80061b8 <cos+0x68>
 80061d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80061d6:	ed9d 0b00 	vldr	d0, [sp]
 80061da:	2001      	movs	r0, #1
 80061dc:	f000 f928 	bl	8006430 <__kernel_sin>
 80061e0:	e7e1      	b.n	80061a6 <cos+0x56>
 80061e2:	bf00      	nop
 80061e4:	f3af 8000 	nop.w
	...
 80061f0:	3fe921fb 	.word	0x3fe921fb
 80061f4:	7fefffff 	.word	0x7fefffff

080061f8 <sin>:
 80061f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80061fa:	ec53 2b10 	vmov	r2, r3, d0
 80061fe:	4826      	ldr	r0, [pc, #152]	@ (8006298 <sin+0xa0>)
 8006200:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006204:	4281      	cmp	r1, r0
 8006206:	d807      	bhi.n	8006218 <sin+0x20>
 8006208:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8006290 <sin+0x98>
 800620c:	2000      	movs	r0, #0
 800620e:	b005      	add	sp, #20
 8006210:	f85d eb04 	ldr.w	lr, [sp], #4
 8006214:	f000 b90c 	b.w	8006430 <__kernel_sin>
 8006218:	4820      	ldr	r0, [pc, #128]	@ (800629c <sin+0xa4>)
 800621a:	4281      	cmp	r1, r0
 800621c:	d908      	bls.n	8006230 <sin+0x38>
 800621e:	4610      	mov	r0, r2
 8006220:	4619      	mov	r1, r3
 8006222:	f7f9 fff5 	bl	8000210 <__aeabi_dsub>
 8006226:	ec41 0b10 	vmov	d0, r0, r1
 800622a:	b005      	add	sp, #20
 800622c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006230:	4668      	mov	r0, sp
 8006232:	f000 f9b9 	bl	80065a8 <__ieee754_rem_pio2>
 8006236:	f000 0003 	and.w	r0, r0, #3
 800623a:	2801      	cmp	r0, #1
 800623c:	d00c      	beq.n	8006258 <sin+0x60>
 800623e:	2802      	cmp	r0, #2
 8006240:	d011      	beq.n	8006266 <sin+0x6e>
 8006242:	b9e8      	cbnz	r0, 8006280 <sin+0x88>
 8006244:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006248:	ed9d 0b00 	vldr	d0, [sp]
 800624c:	2001      	movs	r0, #1
 800624e:	f000 f8ef 	bl	8006430 <__kernel_sin>
 8006252:	ec51 0b10 	vmov	r0, r1, d0
 8006256:	e7e6      	b.n	8006226 <sin+0x2e>
 8006258:	ed9d 1b02 	vldr	d1, [sp, #8]
 800625c:	ed9d 0b00 	vldr	d0, [sp]
 8006260:	f000 f81e 	bl	80062a0 <__kernel_cos>
 8006264:	e7f5      	b.n	8006252 <sin+0x5a>
 8006266:	ed9d 1b02 	vldr	d1, [sp, #8]
 800626a:	ed9d 0b00 	vldr	d0, [sp]
 800626e:	2001      	movs	r0, #1
 8006270:	f000 f8de 	bl	8006430 <__kernel_sin>
 8006274:	ec53 2b10 	vmov	r2, r3, d0
 8006278:	4610      	mov	r0, r2
 800627a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800627e:	e7d2      	b.n	8006226 <sin+0x2e>
 8006280:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006284:	ed9d 0b00 	vldr	d0, [sp]
 8006288:	f000 f80a 	bl	80062a0 <__kernel_cos>
 800628c:	e7f2      	b.n	8006274 <sin+0x7c>
 800628e:	bf00      	nop
	...
 8006298:	3fe921fb 	.word	0x3fe921fb
 800629c:	7fefffff 	.word	0x7fefffff

080062a0 <__kernel_cos>:
 80062a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a4:	ec57 6b10 	vmov	r6, r7, d0
 80062a8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80062ac:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80062b0:	ed8d 1b00 	vstr	d1, [sp]
 80062b4:	d206      	bcs.n	80062c4 <__kernel_cos+0x24>
 80062b6:	4630      	mov	r0, r6
 80062b8:	4639      	mov	r1, r7
 80062ba:	f7fa fbfb 	bl	8000ab4 <__aeabi_d2iz>
 80062be:	2800      	cmp	r0, #0
 80062c0:	f000 8088 	beq.w	80063d4 <__kernel_cos+0x134>
 80062c4:	4632      	mov	r2, r6
 80062c6:	463b      	mov	r3, r7
 80062c8:	4630      	mov	r0, r6
 80062ca:	4639      	mov	r1, r7
 80062cc:	f7fa f958 	bl	8000580 <__aeabi_dmul>
 80062d0:	4b51      	ldr	r3, [pc, #324]	@ (8006418 <__kernel_cos+0x178>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	4604      	mov	r4, r0
 80062d6:	460d      	mov	r5, r1
 80062d8:	f7fa f952 	bl	8000580 <__aeabi_dmul>
 80062dc:	a340      	add	r3, pc, #256	@ (adr r3, 80063e0 <__kernel_cos+0x140>)
 80062de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e2:	4682      	mov	sl, r0
 80062e4:	468b      	mov	fp, r1
 80062e6:	4620      	mov	r0, r4
 80062e8:	4629      	mov	r1, r5
 80062ea:	f7fa f949 	bl	8000580 <__aeabi_dmul>
 80062ee:	a33e      	add	r3, pc, #248	@ (adr r3, 80063e8 <__kernel_cos+0x148>)
 80062f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f4:	f7f9 ff8e 	bl	8000214 <__adddf3>
 80062f8:	4622      	mov	r2, r4
 80062fa:	462b      	mov	r3, r5
 80062fc:	f7fa f940 	bl	8000580 <__aeabi_dmul>
 8006300:	a33b      	add	r3, pc, #236	@ (adr r3, 80063f0 <__kernel_cos+0x150>)
 8006302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006306:	f7f9 ff83 	bl	8000210 <__aeabi_dsub>
 800630a:	4622      	mov	r2, r4
 800630c:	462b      	mov	r3, r5
 800630e:	f7fa f937 	bl	8000580 <__aeabi_dmul>
 8006312:	a339      	add	r3, pc, #228	@ (adr r3, 80063f8 <__kernel_cos+0x158>)
 8006314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006318:	f7f9 ff7c 	bl	8000214 <__adddf3>
 800631c:	4622      	mov	r2, r4
 800631e:	462b      	mov	r3, r5
 8006320:	f7fa f92e 	bl	8000580 <__aeabi_dmul>
 8006324:	a336      	add	r3, pc, #216	@ (adr r3, 8006400 <__kernel_cos+0x160>)
 8006326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632a:	f7f9 ff71 	bl	8000210 <__aeabi_dsub>
 800632e:	4622      	mov	r2, r4
 8006330:	462b      	mov	r3, r5
 8006332:	f7fa f925 	bl	8000580 <__aeabi_dmul>
 8006336:	a334      	add	r3, pc, #208	@ (adr r3, 8006408 <__kernel_cos+0x168>)
 8006338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633c:	f7f9 ff6a 	bl	8000214 <__adddf3>
 8006340:	4622      	mov	r2, r4
 8006342:	462b      	mov	r3, r5
 8006344:	f7fa f91c 	bl	8000580 <__aeabi_dmul>
 8006348:	4622      	mov	r2, r4
 800634a:	462b      	mov	r3, r5
 800634c:	f7fa f918 	bl	8000580 <__aeabi_dmul>
 8006350:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006354:	4604      	mov	r4, r0
 8006356:	460d      	mov	r5, r1
 8006358:	4630      	mov	r0, r6
 800635a:	4639      	mov	r1, r7
 800635c:	f7fa f910 	bl	8000580 <__aeabi_dmul>
 8006360:	460b      	mov	r3, r1
 8006362:	4602      	mov	r2, r0
 8006364:	4629      	mov	r1, r5
 8006366:	4620      	mov	r0, r4
 8006368:	f7f9 ff52 	bl	8000210 <__aeabi_dsub>
 800636c:	4b2b      	ldr	r3, [pc, #172]	@ (800641c <__kernel_cos+0x17c>)
 800636e:	4598      	cmp	r8, r3
 8006370:	4606      	mov	r6, r0
 8006372:	460f      	mov	r7, r1
 8006374:	d810      	bhi.n	8006398 <__kernel_cos+0xf8>
 8006376:	4602      	mov	r2, r0
 8006378:	460b      	mov	r3, r1
 800637a:	4650      	mov	r0, sl
 800637c:	4659      	mov	r1, fp
 800637e:	f7f9 ff47 	bl	8000210 <__aeabi_dsub>
 8006382:	460b      	mov	r3, r1
 8006384:	4926      	ldr	r1, [pc, #152]	@ (8006420 <__kernel_cos+0x180>)
 8006386:	4602      	mov	r2, r0
 8006388:	2000      	movs	r0, #0
 800638a:	f7f9 ff41 	bl	8000210 <__aeabi_dsub>
 800638e:	ec41 0b10 	vmov	d0, r0, r1
 8006392:	b003      	add	sp, #12
 8006394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006398:	4b22      	ldr	r3, [pc, #136]	@ (8006424 <__kernel_cos+0x184>)
 800639a:	4921      	ldr	r1, [pc, #132]	@ (8006420 <__kernel_cos+0x180>)
 800639c:	4598      	cmp	r8, r3
 800639e:	bf8c      	ite	hi
 80063a0:	4d21      	ldrhi	r5, [pc, #132]	@ (8006428 <__kernel_cos+0x188>)
 80063a2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80063a6:	2400      	movs	r4, #0
 80063a8:	4622      	mov	r2, r4
 80063aa:	462b      	mov	r3, r5
 80063ac:	2000      	movs	r0, #0
 80063ae:	f7f9 ff2f 	bl	8000210 <__aeabi_dsub>
 80063b2:	4622      	mov	r2, r4
 80063b4:	4680      	mov	r8, r0
 80063b6:	4689      	mov	r9, r1
 80063b8:	462b      	mov	r3, r5
 80063ba:	4650      	mov	r0, sl
 80063bc:	4659      	mov	r1, fp
 80063be:	f7f9 ff27 	bl	8000210 <__aeabi_dsub>
 80063c2:	4632      	mov	r2, r6
 80063c4:	463b      	mov	r3, r7
 80063c6:	f7f9 ff23 	bl	8000210 <__aeabi_dsub>
 80063ca:	4602      	mov	r2, r0
 80063cc:	460b      	mov	r3, r1
 80063ce:	4640      	mov	r0, r8
 80063d0:	4649      	mov	r1, r9
 80063d2:	e7da      	b.n	800638a <__kernel_cos+0xea>
 80063d4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8006410 <__kernel_cos+0x170>
 80063d8:	e7db      	b.n	8006392 <__kernel_cos+0xf2>
 80063da:	bf00      	nop
 80063dc:	f3af 8000 	nop.w
 80063e0:	be8838d4 	.word	0xbe8838d4
 80063e4:	bda8fae9 	.word	0xbda8fae9
 80063e8:	bdb4b1c4 	.word	0xbdb4b1c4
 80063ec:	3e21ee9e 	.word	0x3e21ee9e
 80063f0:	809c52ad 	.word	0x809c52ad
 80063f4:	3e927e4f 	.word	0x3e927e4f
 80063f8:	19cb1590 	.word	0x19cb1590
 80063fc:	3efa01a0 	.word	0x3efa01a0
 8006400:	16c15177 	.word	0x16c15177
 8006404:	3f56c16c 	.word	0x3f56c16c
 8006408:	5555554c 	.word	0x5555554c
 800640c:	3fa55555 	.word	0x3fa55555
 8006410:	00000000 	.word	0x00000000
 8006414:	3ff00000 	.word	0x3ff00000
 8006418:	3fe00000 	.word	0x3fe00000
 800641c:	3fd33332 	.word	0x3fd33332
 8006420:	3ff00000 	.word	0x3ff00000
 8006424:	3fe90000 	.word	0x3fe90000
 8006428:	3fd20000 	.word	0x3fd20000
 800642c:	00000000 	.word	0x00000000

08006430 <__kernel_sin>:
 8006430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006434:	ec55 4b10 	vmov	r4, r5, d0
 8006438:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800643c:	b085      	sub	sp, #20
 800643e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8006442:	ed8d 1b02 	vstr	d1, [sp, #8]
 8006446:	4680      	mov	r8, r0
 8006448:	d205      	bcs.n	8006456 <__kernel_sin+0x26>
 800644a:	4620      	mov	r0, r4
 800644c:	4629      	mov	r1, r5
 800644e:	f7fa fb31 	bl	8000ab4 <__aeabi_d2iz>
 8006452:	2800      	cmp	r0, #0
 8006454:	d052      	beq.n	80064fc <__kernel_sin+0xcc>
 8006456:	4622      	mov	r2, r4
 8006458:	462b      	mov	r3, r5
 800645a:	4620      	mov	r0, r4
 800645c:	4629      	mov	r1, r5
 800645e:	f7fa f88f 	bl	8000580 <__aeabi_dmul>
 8006462:	4682      	mov	sl, r0
 8006464:	468b      	mov	fp, r1
 8006466:	4602      	mov	r2, r0
 8006468:	460b      	mov	r3, r1
 800646a:	4620      	mov	r0, r4
 800646c:	4629      	mov	r1, r5
 800646e:	f7fa f887 	bl	8000580 <__aeabi_dmul>
 8006472:	a342      	add	r3, pc, #264	@ (adr r3, 800657c <__kernel_sin+0x14c>)
 8006474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006478:	e9cd 0100 	strd	r0, r1, [sp]
 800647c:	4650      	mov	r0, sl
 800647e:	4659      	mov	r1, fp
 8006480:	f7fa f87e 	bl	8000580 <__aeabi_dmul>
 8006484:	a33f      	add	r3, pc, #252	@ (adr r3, 8006584 <__kernel_sin+0x154>)
 8006486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648a:	f7f9 fec1 	bl	8000210 <__aeabi_dsub>
 800648e:	4652      	mov	r2, sl
 8006490:	465b      	mov	r3, fp
 8006492:	f7fa f875 	bl	8000580 <__aeabi_dmul>
 8006496:	a33d      	add	r3, pc, #244	@ (adr r3, 800658c <__kernel_sin+0x15c>)
 8006498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649c:	f7f9 feba 	bl	8000214 <__adddf3>
 80064a0:	4652      	mov	r2, sl
 80064a2:	465b      	mov	r3, fp
 80064a4:	f7fa f86c 	bl	8000580 <__aeabi_dmul>
 80064a8:	a33a      	add	r3, pc, #232	@ (adr r3, 8006594 <__kernel_sin+0x164>)
 80064aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ae:	f7f9 feaf 	bl	8000210 <__aeabi_dsub>
 80064b2:	4652      	mov	r2, sl
 80064b4:	465b      	mov	r3, fp
 80064b6:	f7fa f863 	bl	8000580 <__aeabi_dmul>
 80064ba:	a338      	add	r3, pc, #224	@ (adr r3, 800659c <__kernel_sin+0x16c>)
 80064bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c0:	f7f9 fea8 	bl	8000214 <__adddf3>
 80064c4:	4606      	mov	r6, r0
 80064c6:	460f      	mov	r7, r1
 80064c8:	f1b8 0f00 	cmp.w	r8, #0
 80064cc:	d11b      	bne.n	8006506 <__kernel_sin+0xd6>
 80064ce:	4602      	mov	r2, r0
 80064d0:	460b      	mov	r3, r1
 80064d2:	4650      	mov	r0, sl
 80064d4:	4659      	mov	r1, fp
 80064d6:	f7fa f853 	bl	8000580 <__aeabi_dmul>
 80064da:	a325      	add	r3, pc, #148	@ (adr r3, 8006570 <__kernel_sin+0x140>)
 80064dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e0:	f7f9 fe96 	bl	8000210 <__aeabi_dsub>
 80064e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064e8:	f7fa f84a 	bl	8000580 <__aeabi_dmul>
 80064ec:	4602      	mov	r2, r0
 80064ee:	460b      	mov	r3, r1
 80064f0:	4620      	mov	r0, r4
 80064f2:	4629      	mov	r1, r5
 80064f4:	f7f9 fe8e 	bl	8000214 <__adddf3>
 80064f8:	4604      	mov	r4, r0
 80064fa:	460d      	mov	r5, r1
 80064fc:	ec45 4b10 	vmov	d0, r4, r5
 8006500:	b005      	add	sp, #20
 8006502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800650a:	4b1b      	ldr	r3, [pc, #108]	@ (8006578 <__kernel_sin+0x148>)
 800650c:	2200      	movs	r2, #0
 800650e:	f7fa f837 	bl	8000580 <__aeabi_dmul>
 8006512:	4632      	mov	r2, r6
 8006514:	4680      	mov	r8, r0
 8006516:	4689      	mov	r9, r1
 8006518:	463b      	mov	r3, r7
 800651a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800651e:	f7fa f82f 	bl	8000580 <__aeabi_dmul>
 8006522:	4602      	mov	r2, r0
 8006524:	460b      	mov	r3, r1
 8006526:	4640      	mov	r0, r8
 8006528:	4649      	mov	r1, r9
 800652a:	f7f9 fe71 	bl	8000210 <__aeabi_dsub>
 800652e:	4652      	mov	r2, sl
 8006530:	465b      	mov	r3, fp
 8006532:	f7fa f825 	bl	8000580 <__aeabi_dmul>
 8006536:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800653a:	f7f9 fe69 	bl	8000210 <__aeabi_dsub>
 800653e:	a30c      	add	r3, pc, #48	@ (adr r3, 8006570 <__kernel_sin+0x140>)
 8006540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006544:	4606      	mov	r6, r0
 8006546:	460f      	mov	r7, r1
 8006548:	e9dd 0100 	ldrd	r0, r1, [sp]
 800654c:	f7fa f818 	bl	8000580 <__aeabi_dmul>
 8006550:	4602      	mov	r2, r0
 8006552:	460b      	mov	r3, r1
 8006554:	4630      	mov	r0, r6
 8006556:	4639      	mov	r1, r7
 8006558:	f7f9 fe5c 	bl	8000214 <__adddf3>
 800655c:	4602      	mov	r2, r0
 800655e:	460b      	mov	r3, r1
 8006560:	4620      	mov	r0, r4
 8006562:	4629      	mov	r1, r5
 8006564:	f7f9 fe54 	bl	8000210 <__aeabi_dsub>
 8006568:	e7c6      	b.n	80064f8 <__kernel_sin+0xc8>
 800656a:	bf00      	nop
 800656c:	f3af 8000 	nop.w
 8006570:	55555549 	.word	0x55555549
 8006574:	3fc55555 	.word	0x3fc55555
 8006578:	3fe00000 	.word	0x3fe00000
 800657c:	5acfd57c 	.word	0x5acfd57c
 8006580:	3de5d93a 	.word	0x3de5d93a
 8006584:	8a2b9ceb 	.word	0x8a2b9ceb
 8006588:	3e5ae5e6 	.word	0x3e5ae5e6
 800658c:	57b1fe7d 	.word	0x57b1fe7d
 8006590:	3ec71de3 	.word	0x3ec71de3
 8006594:	19c161d5 	.word	0x19c161d5
 8006598:	3f2a01a0 	.word	0x3f2a01a0
 800659c:	1110f8a6 	.word	0x1110f8a6
 80065a0:	3f811111 	.word	0x3f811111
 80065a4:	00000000 	.word	0x00000000

080065a8 <__ieee754_rem_pio2>:
 80065a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ac:	ec57 6b10 	vmov	r6, r7, d0
 80065b0:	4bc5      	ldr	r3, [pc, #788]	@ (80068c8 <__ieee754_rem_pio2+0x320>)
 80065b2:	b08d      	sub	sp, #52	@ 0x34
 80065b4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80065b8:	4598      	cmp	r8, r3
 80065ba:	4604      	mov	r4, r0
 80065bc:	9704      	str	r7, [sp, #16]
 80065be:	d807      	bhi.n	80065d0 <__ieee754_rem_pio2+0x28>
 80065c0:	2200      	movs	r2, #0
 80065c2:	2300      	movs	r3, #0
 80065c4:	ed80 0b00 	vstr	d0, [r0]
 80065c8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80065cc:	2500      	movs	r5, #0
 80065ce:	e028      	b.n	8006622 <__ieee754_rem_pio2+0x7a>
 80065d0:	4bbe      	ldr	r3, [pc, #760]	@ (80068cc <__ieee754_rem_pio2+0x324>)
 80065d2:	4598      	cmp	r8, r3
 80065d4:	d878      	bhi.n	80066c8 <__ieee754_rem_pio2+0x120>
 80065d6:	9b04      	ldr	r3, [sp, #16]
 80065d8:	4dbd      	ldr	r5, [pc, #756]	@ (80068d0 <__ieee754_rem_pio2+0x328>)
 80065da:	2b00      	cmp	r3, #0
 80065dc:	4630      	mov	r0, r6
 80065de:	a3ac      	add	r3, pc, #688	@ (adr r3, 8006890 <__ieee754_rem_pio2+0x2e8>)
 80065e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e4:	4639      	mov	r1, r7
 80065e6:	dd38      	ble.n	800665a <__ieee754_rem_pio2+0xb2>
 80065e8:	f7f9 fe12 	bl	8000210 <__aeabi_dsub>
 80065ec:	45a8      	cmp	r8, r5
 80065ee:	4606      	mov	r6, r0
 80065f0:	460f      	mov	r7, r1
 80065f2:	d01a      	beq.n	800662a <__ieee754_rem_pio2+0x82>
 80065f4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8006898 <__ieee754_rem_pio2+0x2f0>)
 80065f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fa:	f7f9 fe09 	bl	8000210 <__aeabi_dsub>
 80065fe:	4602      	mov	r2, r0
 8006600:	460b      	mov	r3, r1
 8006602:	4680      	mov	r8, r0
 8006604:	4689      	mov	r9, r1
 8006606:	4630      	mov	r0, r6
 8006608:	4639      	mov	r1, r7
 800660a:	f7f9 fe01 	bl	8000210 <__aeabi_dsub>
 800660e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8006898 <__ieee754_rem_pio2+0x2f0>)
 8006610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006614:	f7f9 fdfc 	bl	8000210 <__aeabi_dsub>
 8006618:	e9c4 8900 	strd	r8, r9, [r4]
 800661c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006620:	2501      	movs	r5, #1
 8006622:	4628      	mov	r0, r5
 8006624:	b00d      	add	sp, #52	@ 0x34
 8006626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800662a:	a39d      	add	r3, pc, #628	@ (adr r3, 80068a0 <__ieee754_rem_pio2+0x2f8>)
 800662c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006630:	f7f9 fdee 	bl	8000210 <__aeabi_dsub>
 8006634:	a39c      	add	r3, pc, #624	@ (adr r3, 80068a8 <__ieee754_rem_pio2+0x300>)
 8006636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663a:	4606      	mov	r6, r0
 800663c:	460f      	mov	r7, r1
 800663e:	f7f9 fde7 	bl	8000210 <__aeabi_dsub>
 8006642:	4602      	mov	r2, r0
 8006644:	460b      	mov	r3, r1
 8006646:	4680      	mov	r8, r0
 8006648:	4689      	mov	r9, r1
 800664a:	4630      	mov	r0, r6
 800664c:	4639      	mov	r1, r7
 800664e:	f7f9 fddf 	bl	8000210 <__aeabi_dsub>
 8006652:	a395      	add	r3, pc, #596	@ (adr r3, 80068a8 <__ieee754_rem_pio2+0x300>)
 8006654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006658:	e7dc      	b.n	8006614 <__ieee754_rem_pio2+0x6c>
 800665a:	f7f9 fddb 	bl	8000214 <__adddf3>
 800665e:	45a8      	cmp	r8, r5
 8006660:	4606      	mov	r6, r0
 8006662:	460f      	mov	r7, r1
 8006664:	d018      	beq.n	8006698 <__ieee754_rem_pio2+0xf0>
 8006666:	a38c      	add	r3, pc, #560	@ (adr r3, 8006898 <__ieee754_rem_pio2+0x2f0>)
 8006668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666c:	f7f9 fdd2 	bl	8000214 <__adddf3>
 8006670:	4602      	mov	r2, r0
 8006672:	460b      	mov	r3, r1
 8006674:	4680      	mov	r8, r0
 8006676:	4689      	mov	r9, r1
 8006678:	4630      	mov	r0, r6
 800667a:	4639      	mov	r1, r7
 800667c:	f7f9 fdc8 	bl	8000210 <__aeabi_dsub>
 8006680:	a385      	add	r3, pc, #532	@ (adr r3, 8006898 <__ieee754_rem_pio2+0x2f0>)
 8006682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006686:	f7f9 fdc5 	bl	8000214 <__adddf3>
 800668a:	f04f 35ff 	mov.w	r5, #4294967295
 800668e:	e9c4 8900 	strd	r8, r9, [r4]
 8006692:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006696:	e7c4      	b.n	8006622 <__ieee754_rem_pio2+0x7a>
 8006698:	a381      	add	r3, pc, #516	@ (adr r3, 80068a0 <__ieee754_rem_pio2+0x2f8>)
 800669a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669e:	f7f9 fdb9 	bl	8000214 <__adddf3>
 80066a2:	a381      	add	r3, pc, #516	@ (adr r3, 80068a8 <__ieee754_rem_pio2+0x300>)
 80066a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a8:	4606      	mov	r6, r0
 80066aa:	460f      	mov	r7, r1
 80066ac:	f7f9 fdb2 	bl	8000214 <__adddf3>
 80066b0:	4602      	mov	r2, r0
 80066b2:	460b      	mov	r3, r1
 80066b4:	4680      	mov	r8, r0
 80066b6:	4689      	mov	r9, r1
 80066b8:	4630      	mov	r0, r6
 80066ba:	4639      	mov	r1, r7
 80066bc:	f7f9 fda8 	bl	8000210 <__aeabi_dsub>
 80066c0:	a379      	add	r3, pc, #484	@ (adr r3, 80068a8 <__ieee754_rem_pio2+0x300>)
 80066c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c6:	e7de      	b.n	8006686 <__ieee754_rem_pio2+0xde>
 80066c8:	4b82      	ldr	r3, [pc, #520]	@ (80068d4 <__ieee754_rem_pio2+0x32c>)
 80066ca:	4598      	cmp	r8, r3
 80066cc:	f200 80d1 	bhi.w	8006872 <__ieee754_rem_pio2+0x2ca>
 80066d0:	f000 f966 	bl	80069a0 <fabs>
 80066d4:	ec57 6b10 	vmov	r6, r7, d0
 80066d8:	a375      	add	r3, pc, #468	@ (adr r3, 80068b0 <__ieee754_rem_pio2+0x308>)
 80066da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066de:	4630      	mov	r0, r6
 80066e0:	4639      	mov	r1, r7
 80066e2:	f7f9 ff4d 	bl	8000580 <__aeabi_dmul>
 80066e6:	4b7c      	ldr	r3, [pc, #496]	@ (80068d8 <__ieee754_rem_pio2+0x330>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	f7f9 fd93 	bl	8000214 <__adddf3>
 80066ee:	f7fa f9e1 	bl	8000ab4 <__aeabi_d2iz>
 80066f2:	4605      	mov	r5, r0
 80066f4:	f7f9 feda 	bl	80004ac <__aeabi_i2d>
 80066f8:	4602      	mov	r2, r0
 80066fa:	460b      	mov	r3, r1
 80066fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006700:	a363      	add	r3, pc, #396	@ (adr r3, 8006890 <__ieee754_rem_pio2+0x2e8>)
 8006702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006706:	f7f9 ff3b 	bl	8000580 <__aeabi_dmul>
 800670a:	4602      	mov	r2, r0
 800670c:	460b      	mov	r3, r1
 800670e:	4630      	mov	r0, r6
 8006710:	4639      	mov	r1, r7
 8006712:	f7f9 fd7d 	bl	8000210 <__aeabi_dsub>
 8006716:	a360      	add	r3, pc, #384	@ (adr r3, 8006898 <__ieee754_rem_pio2+0x2f0>)
 8006718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671c:	4682      	mov	sl, r0
 800671e:	468b      	mov	fp, r1
 8006720:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006724:	f7f9 ff2c 	bl	8000580 <__aeabi_dmul>
 8006728:	2d1f      	cmp	r5, #31
 800672a:	4606      	mov	r6, r0
 800672c:	460f      	mov	r7, r1
 800672e:	dc0c      	bgt.n	800674a <__ieee754_rem_pio2+0x1a2>
 8006730:	4b6a      	ldr	r3, [pc, #424]	@ (80068dc <__ieee754_rem_pio2+0x334>)
 8006732:	1e6a      	subs	r2, r5, #1
 8006734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006738:	4543      	cmp	r3, r8
 800673a:	d006      	beq.n	800674a <__ieee754_rem_pio2+0x1a2>
 800673c:	4632      	mov	r2, r6
 800673e:	463b      	mov	r3, r7
 8006740:	4650      	mov	r0, sl
 8006742:	4659      	mov	r1, fp
 8006744:	f7f9 fd64 	bl	8000210 <__aeabi_dsub>
 8006748:	e00e      	b.n	8006768 <__ieee754_rem_pio2+0x1c0>
 800674a:	463b      	mov	r3, r7
 800674c:	4632      	mov	r2, r6
 800674e:	4650      	mov	r0, sl
 8006750:	4659      	mov	r1, fp
 8006752:	f7f9 fd5d 	bl	8000210 <__aeabi_dsub>
 8006756:	ea4f 5328 	mov.w	r3, r8, asr #20
 800675a:	9305      	str	r3, [sp, #20]
 800675c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006760:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8006764:	2b10      	cmp	r3, #16
 8006766:	dc02      	bgt.n	800676e <__ieee754_rem_pio2+0x1c6>
 8006768:	e9c4 0100 	strd	r0, r1, [r4]
 800676c:	e039      	b.n	80067e2 <__ieee754_rem_pio2+0x23a>
 800676e:	a34c      	add	r3, pc, #304	@ (adr r3, 80068a0 <__ieee754_rem_pio2+0x2f8>)
 8006770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006774:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006778:	f7f9 ff02 	bl	8000580 <__aeabi_dmul>
 800677c:	4606      	mov	r6, r0
 800677e:	460f      	mov	r7, r1
 8006780:	4602      	mov	r2, r0
 8006782:	460b      	mov	r3, r1
 8006784:	4650      	mov	r0, sl
 8006786:	4659      	mov	r1, fp
 8006788:	f7f9 fd42 	bl	8000210 <__aeabi_dsub>
 800678c:	4602      	mov	r2, r0
 800678e:	460b      	mov	r3, r1
 8006790:	4680      	mov	r8, r0
 8006792:	4689      	mov	r9, r1
 8006794:	4650      	mov	r0, sl
 8006796:	4659      	mov	r1, fp
 8006798:	f7f9 fd3a 	bl	8000210 <__aeabi_dsub>
 800679c:	4632      	mov	r2, r6
 800679e:	463b      	mov	r3, r7
 80067a0:	f7f9 fd36 	bl	8000210 <__aeabi_dsub>
 80067a4:	a340      	add	r3, pc, #256	@ (adr r3, 80068a8 <__ieee754_rem_pio2+0x300>)
 80067a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067aa:	4606      	mov	r6, r0
 80067ac:	460f      	mov	r7, r1
 80067ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067b2:	f7f9 fee5 	bl	8000580 <__aeabi_dmul>
 80067b6:	4632      	mov	r2, r6
 80067b8:	463b      	mov	r3, r7
 80067ba:	f7f9 fd29 	bl	8000210 <__aeabi_dsub>
 80067be:	4602      	mov	r2, r0
 80067c0:	460b      	mov	r3, r1
 80067c2:	4606      	mov	r6, r0
 80067c4:	460f      	mov	r7, r1
 80067c6:	4640      	mov	r0, r8
 80067c8:	4649      	mov	r1, r9
 80067ca:	f7f9 fd21 	bl	8000210 <__aeabi_dsub>
 80067ce:	9a05      	ldr	r2, [sp, #20]
 80067d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	2b31      	cmp	r3, #49	@ 0x31
 80067d8:	dc20      	bgt.n	800681c <__ieee754_rem_pio2+0x274>
 80067da:	e9c4 0100 	strd	r0, r1, [r4]
 80067de:	46c2      	mov	sl, r8
 80067e0:	46cb      	mov	fp, r9
 80067e2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80067e6:	4650      	mov	r0, sl
 80067e8:	4642      	mov	r2, r8
 80067ea:	464b      	mov	r3, r9
 80067ec:	4659      	mov	r1, fp
 80067ee:	f7f9 fd0f 	bl	8000210 <__aeabi_dsub>
 80067f2:	463b      	mov	r3, r7
 80067f4:	4632      	mov	r2, r6
 80067f6:	f7f9 fd0b 	bl	8000210 <__aeabi_dsub>
 80067fa:	9b04      	ldr	r3, [sp, #16]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006802:	f6bf af0e 	bge.w	8006622 <__ieee754_rem_pio2+0x7a>
 8006806:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800680a:	6063      	str	r3, [r4, #4]
 800680c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006810:	f8c4 8000 	str.w	r8, [r4]
 8006814:	60a0      	str	r0, [r4, #8]
 8006816:	60e3      	str	r3, [r4, #12]
 8006818:	426d      	negs	r5, r5
 800681a:	e702      	b.n	8006622 <__ieee754_rem_pio2+0x7a>
 800681c:	a326      	add	r3, pc, #152	@ (adr r3, 80068b8 <__ieee754_rem_pio2+0x310>)
 800681e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006822:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006826:	f7f9 feab 	bl	8000580 <__aeabi_dmul>
 800682a:	4606      	mov	r6, r0
 800682c:	460f      	mov	r7, r1
 800682e:	4602      	mov	r2, r0
 8006830:	460b      	mov	r3, r1
 8006832:	4640      	mov	r0, r8
 8006834:	4649      	mov	r1, r9
 8006836:	f7f9 fceb 	bl	8000210 <__aeabi_dsub>
 800683a:	4602      	mov	r2, r0
 800683c:	460b      	mov	r3, r1
 800683e:	4682      	mov	sl, r0
 8006840:	468b      	mov	fp, r1
 8006842:	4640      	mov	r0, r8
 8006844:	4649      	mov	r1, r9
 8006846:	f7f9 fce3 	bl	8000210 <__aeabi_dsub>
 800684a:	4632      	mov	r2, r6
 800684c:	463b      	mov	r3, r7
 800684e:	f7f9 fcdf 	bl	8000210 <__aeabi_dsub>
 8006852:	a31b      	add	r3, pc, #108	@ (adr r3, 80068c0 <__ieee754_rem_pio2+0x318>)
 8006854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006858:	4606      	mov	r6, r0
 800685a:	460f      	mov	r7, r1
 800685c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006860:	f7f9 fe8e 	bl	8000580 <__aeabi_dmul>
 8006864:	4632      	mov	r2, r6
 8006866:	463b      	mov	r3, r7
 8006868:	f7f9 fcd2 	bl	8000210 <__aeabi_dsub>
 800686c:	4606      	mov	r6, r0
 800686e:	460f      	mov	r7, r1
 8006870:	e764      	b.n	800673c <__ieee754_rem_pio2+0x194>
 8006872:	4b1b      	ldr	r3, [pc, #108]	@ (80068e0 <__ieee754_rem_pio2+0x338>)
 8006874:	4598      	cmp	r8, r3
 8006876:	d935      	bls.n	80068e4 <__ieee754_rem_pio2+0x33c>
 8006878:	4632      	mov	r2, r6
 800687a:	463b      	mov	r3, r7
 800687c:	4630      	mov	r0, r6
 800687e:	4639      	mov	r1, r7
 8006880:	f7f9 fcc6 	bl	8000210 <__aeabi_dsub>
 8006884:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006888:	e9c4 0100 	strd	r0, r1, [r4]
 800688c:	e69e      	b.n	80065cc <__ieee754_rem_pio2+0x24>
 800688e:	bf00      	nop
 8006890:	54400000 	.word	0x54400000
 8006894:	3ff921fb 	.word	0x3ff921fb
 8006898:	1a626331 	.word	0x1a626331
 800689c:	3dd0b461 	.word	0x3dd0b461
 80068a0:	1a600000 	.word	0x1a600000
 80068a4:	3dd0b461 	.word	0x3dd0b461
 80068a8:	2e037073 	.word	0x2e037073
 80068ac:	3ba3198a 	.word	0x3ba3198a
 80068b0:	6dc9c883 	.word	0x6dc9c883
 80068b4:	3fe45f30 	.word	0x3fe45f30
 80068b8:	2e000000 	.word	0x2e000000
 80068bc:	3ba3198a 	.word	0x3ba3198a
 80068c0:	252049c1 	.word	0x252049c1
 80068c4:	397b839a 	.word	0x397b839a
 80068c8:	3fe921fb 	.word	0x3fe921fb
 80068cc:	4002d97b 	.word	0x4002d97b
 80068d0:	3ff921fb 	.word	0x3ff921fb
 80068d4:	413921fb 	.word	0x413921fb
 80068d8:	3fe00000 	.word	0x3fe00000
 80068dc:	08007288 	.word	0x08007288
 80068e0:	7fefffff 	.word	0x7fefffff
 80068e4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80068e8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80068ec:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80068f0:	4630      	mov	r0, r6
 80068f2:	460f      	mov	r7, r1
 80068f4:	f7fa f8de 	bl	8000ab4 <__aeabi_d2iz>
 80068f8:	f7f9 fdd8 	bl	80004ac <__aeabi_i2d>
 80068fc:	4602      	mov	r2, r0
 80068fe:	460b      	mov	r3, r1
 8006900:	4630      	mov	r0, r6
 8006902:	4639      	mov	r1, r7
 8006904:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006908:	f7f9 fc82 	bl	8000210 <__aeabi_dsub>
 800690c:	4b22      	ldr	r3, [pc, #136]	@ (8006998 <__ieee754_rem_pio2+0x3f0>)
 800690e:	2200      	movs	r2, #0
 8006910:	f7f9 fe36 	bl	8000580 <__aeabi_dmul>
 8006914:	460f      	mov	r7, r1
 8006916:	4606      	mov	r6, r0
 8006918:	f7fa f8cc 	bl	8000ab4 <__aeabi_d2iz>
 800691c:	f7f9 fdc6 	bl	80004ac <__aeabi_i2d>
 8006920:	4602      	mov	r2, r0
 8006922:	460b      	mov	r3, r1
 8006924:	4630      	mov	r0, r6
 8006926:	4639      	mov	r1, r7
 8006928:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800692c:	f7f9 fc70 	bl	8000210 <__aeabi_dsub>
 8006930:	4b19      	ldr	r3, [pc, #100]	@ (8006998 <__ieee754_rem_pio2+0x3f0>)
 8006932:	2200      	movs	r2, #0
 8006934:	f7f9 fe24 	bl	8000580 <__aeabi_dmul>
 8006938:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800693c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8006940:	f04f 0803 	mov.w	r8, #3
 8006944:	2600      	movs	r6, #0
 8006946:	2700      	movs	r7, #0
 8006948:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800694c:	4632      	mov	r2, r6
 800694e:	463b      	mov	r3, r7
 8006950:	46c2      	mov	sl, r8
 8006952:	f108 38ff 	add.w	r8, r8, #4294967295
 8006956:	f7fa f87b 	bl	8000a50 <__aeabi_dcmpeq>
 800695a:	2800      	cmp	r0, #0
 800695c:	d1f4      	bne.n	8006948 <__ieee754_rem_pio2+0x3a0>
 800695e:	4b0f      	ldr	r3, [pc, #60]	@ (800699c <__ieee754_rem_pio2+0x3f4>)
 8006960:	9301      	str	r3, [sp, #4]
 8006962:	2302      	movs	r3, #2
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	462a      	mov	r2, r5
 8006968:	4653      	mov	r3, sl
 800696a:	4621      	mov	r1, r4
 800696c:	a806      	add	r0, sp, #24
 800696e:	f000 f81f 	bl	80069b0 <__kernel_rem_pio2>
 8006972:	9b04      	ldr	r3, [sp, #16]
 8006974:	2b00      	cmp	r3, #0
 8006976:	4605      	mov	r5, r0
 8006978:	f6bf ae53 	bge.w	8006622 <__ieee754_rem_pio2+0x7a>
 800697c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006980:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006984:	e9c4 2300 	strd	r2, r3, [r4]
 8006988:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800698c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006990:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006994:	e740      	b.n	8006818 <__ieee754_rem_pio2+0x270>
 8006996:	bf00      	nop
 8006998:	41700000 	.word	0x41700000
 800699c:	08007308 	.word	0x08007308

080069a0 <fabs>:
 80069a0:	ec51 0b10 	vmov	r0, r1, d0
 80069a4:	4602      	mov	r2, r0
 80069a6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80069aa:	ec43 2b10 	vmov	d0, r2, r3
 80069ae:	4770      	bx	lr

080069b0 <__kernel_rem_pio2>:
 80069b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b4:	ed2d 8b02 	vpush	{d8}
 80069b8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80069bc:	f112 0f14 	cmn.w	r2, #20
 80069c0:	9306      	str	r3, [sp, #24]
 80069c2:	9104      	str	r1, [sp, #16]
 80069c4:	4bbe      	ldr	r3, [pc, #760]	@ (8006cc0 <__kernel_rem_pio2+0x310>)
 80069c6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80069c8:	9008      	str	r0, [sp, #32]
 80069ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	9b06      	ldr	r3, [sp, #24]
 80069d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80069d6:	bfa8      	it	ge
 80069d8:	1ed4      	subge	r4, r2, #3
 80069da:	9305      	str	r3, [sp, #20]
 80069dc:	bfb2      	itee	lt
 80069de:	2400      	movlt	r4, #0
 80069e0:	2318      	movge	r3, #24
 80069e2:	fb94 f4f3 	sdivge	r4, r4, r3
 80069e6:	f06f 0317 	mvn.w	r3, #23
 80069ea:	fb04 3303 	mla	r3, r4, r3, r3
 80069ee:	eb03 0b02 	add.w	fp, r3, r2
 80069f2:	9b00      	ldr	r3, [sp, #0]
 80069f4:	9a05      	ldr	r2, [sp, #20]
 80069f6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8006cb0 <__kernel_rem_pio2+0x300>
 80069fa:	eb03 0802 	add.w	r8, r3, r2
 80069fe:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006a00:	1aa7      	subs	r7, r4, r2
 8006a02:	ae20      	add	r6, sp, #128	@ 0x80
 8006a04:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006a08:	2500      	movs	r5, #0
 8006a0a:	4545      	cmp	r5, r8
 8006a0c:	dd13      	ble.n	8006a36 <__kernel_rem_pio2+0x86>
 8006a0e:	9b06      	ldr	r3, [sp, #24]
 8006a10:	aa20      	add	r2, sp, #128	@ 0x80
 8006a12:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006a16:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8006a1a:	f04f 0800 	mov.w	r8, #0
 8006a1e:	9b00      	ldr	r3, [sp, #0]
 8006a20:	4598      	cmp	r8, r3
 8006a22:	dc31      	bgt.n	8006a88 <__kernel_rem_pio2+0xd8>
 8006a24:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8006cb0 <__kernel_rem_pio2+0x300>
 8006a28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a2c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006a30:	462f      	mov	r7, r5
 8006a32:	2600      	movs	r6, #0
 8006a34:	e01b      	b.n	8006a6e <__kernel_rem_pio2+0xbe>
 8006a36:	42ef      	cmn	r7, r5
 8006a38:	d407      	bmi.n	8006a4a <__kernel_rem_pio2+0x9a>
 8006a3a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006a3e:	f7f9 fd35 	bl	80004ac <__aeabi_i2d>
 8006a42:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006a46:	3501      	adds	r5, #1
 8006a48:	e7df      	b.n	8006a0a <__kernel_rem_pio2+0x5a>
 8006a4a:	ec51 0b18 	vmov	r0, r1, d8
 8006a4e:	e7f8      	b.n	8006a42 <__kernel_rem_pio2+0x92>
 8006a50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a54:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006a58:	f7f9 fd92 	bl	8000580 <__aeabi_dmul>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	460b      	mov	r3, r1
 8006a60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a64:	f7f9 fbd6 	bl	8000214 <__adddf3>
 8006a68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a6c:	3601      	adds	r6, #1
 8006a6e:	9b05      	ldr	r3, [sp, #20]
 8006a70:	429e      	cmp	r6, r3
 8006a72:	f1a7 0708 	sub.w	r7, r7, #8
 8006a76:	ddeb      	ble.n	8006a50 <__kernel_rem_pio2+0xa0>
 8006a78:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a7c:	f108 0801 	add.w	r8, r8, #1
 8006a80:	ecaa 7b02 	vstmia	sl!, {d7}
 8006a84:	3508      	adds	r5, #8
 8006a86:	e7ca      	b.n	8006a1e <__kernel_rem_pio2+0x6e>
 8006a88:	9b00      	ldr	r3, [sp, #0]
 8006a8a:	f8dd 8000 	ldr.w	r8, [sp]
 8006a8e:	aa0c      	add	r2, sp, #48	@ 0x30
 8006a90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006a94:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a96:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006a98:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006a9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a9e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8006aa2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006aa4:	ab98      	add	r3, sp, #608	@ 0x260
 8006aa6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006aaa:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8006aae:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006ab2:	ac0c      	add	r4, sp, #48	@ 0x30
 8006ab4:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006ab6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8006aba:	46a1      	mov	r9, r4
 8006abc:	46c2      	mov	sl, r8
 8006abe:	f1ba 0f00 	cmp.w	sl, #0
 8006ac2:	f1a5 0508 	sub.w	r5, r5, #8
 8006ac6:	dc77      	bgt.n	8006bb8 <__kernel_rem_pio2+0x208>
 8006ac8:	4658      	mov	r0, fp
 8006aca:	ed9d 0b02 	vldr	d0, [sp, #8]
 8006ace:	f000 fac7 	bl	8007060 <scalbn>
 8006ad2:	ec57 6b10 	vmov	r6, r7, d0
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8006adc:	4630      	mov	r0, r6
 8006ade:	4639      	mov	r1, r7
 8006ae0:	f7f9 fd4e 	bl	8000580 <__aeabi_dmul>
 8006ae4:	ec41 0b10 	vmov	d0, r0, r1
 8006ae8:	f000 fb3a 	bl	8007160 <floor>
 8006aec:	4b75      	ldr	r3, [pc, #468]	@ (8006cc4 <__kernel_rem_pio2+0x314>)
 8006aee:	ec51 0b10 	vmov	r0, r1, d0
 8006af2:	2200      	movs	r2, #0
 8006af4:	f7f9 fd44 	bl	8000580 <__aeabi_dmul>
 8006af8:	4602      	mov	r2, r0
 8006afa:	460b      	mov	r3, r1
 8006afc:	4630      	mov	r0, r6
 8006afe:	4639      	mov	r1, r7
 8006b00:	f7f9 fb86 	bl	8000210 <__aeabi_dsub>
 8006b04:	460f      	mov	r7, r1
 8006b06:	4606      	mov	r6, r0
 8006b08:	f7f9 ffd4 	bl	8000ab4 <__aeabi_d2iz>
 8006b0c:	9002      	str	r0, [sp, #8]
 8006b0e:	f7f9 fccd 	bl	80004ac <__aeabi_i2d>
 8006b12:	4602      	mov	r2, r0
 8006b14:	460b      	mov	r3, r1
 8006b16:	4630      	mov	r0, r6
 8006b18:	4639      	mov	r1, r7
 8006b1a:	f7f9 fb79 	bl	8000210 <__aeabi_dsub>
 8006b1e:	f1bb 0f00 	cmp.w	fp, #0
 8006b22:	4606      	mov	r6, r0
 8006b24:	460f      	mov	r7, r1
 8006b26:	dd6c      	ble.n	8006c02 <__kernel_rem_pio2+0x252>
 8006b28:	f108 31ff 	add.w	r1, r8, #4294967295
 8006b2c:	ab0c      	add	r3, sp, #48	@ 0x30
 8006b2e:	9d02      	ldr	r5, [sp, #8]
 8006b30:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b34:	f1cb 0018 	rsb	r0, fp, #24
 8006b38:	fa43 f200 	asr.w	r2, r3, r0
 8006b3c:	4415      	add	r5, r2
 8006b3e:	4082      	lsls	r2, r0
 8006b40:	1a9b      	subs	r3, r3, r2
 8006b42:	aa0c      	add	r2, sp, #48	@ 0x30
 8006b44:	9502      	str	r5, [sp, #8]
 8006b46:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006b4a:	f1cb 0217 	rsb	r2, fp, #23
 8006b4e:	fa43 f902 	asr.w	r9, r3, r2
 8006b52:	f1b9 0f00 	cmp.w	r9, #0
 8006b56:	dd64      	ble.n	8006c22 <__kernel_rem_pio2+0x272>
 8006b58:	9b02      	ldr	r3, [sp, #8]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	9302      	str	r3, [sp, #8]
 8006b60:	4615      	mov	r5, r2
 8006b62:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8006b66:	4590      	cmp	r8, r2
 8006b68:	f300 80b8 	bgt.w	8006cdc <__kernel_rem_pio2+0x32c>
 8006b6c:	f1bb 0f00 	cmp.w	fp, #0
 8006b70:	dd07      	ble.n	8006b82 <__kernel_rem_pio2+0x1d2>
 8006b72:	f1bb 0f01 	cmp.w	fp, #1
 8006b76:	f000 80bf 	beq.w	8006cf8 <__kernel_rem_pio2+0x348>
 8006b7a:	f1bb 0f02 	cmp.w	fp, #2
 8006b7e:	f000 80c6 	beq.w	8006d0e <__kernel_rem_pio2+0x35e>
 8006b82:	f1b9 0f02 	cmp.w	r9, #2
 8006b86:	d14c      	bne.n	8006c22 <__kernel_rem_pio2+0x272>
 8006b88:	4632      	mov	r2, r6
 8006b8a:	463b      	mov	r3, r7
 8006b8c:	494e      	ldr	r1, [pc, #312]	@ (8006cc8 <__kernel_rem_pio2+0x318>)
 8006b8e:	2000      	movs	r0, #0
 8006b90:	f7f9 fb3e 	bl	8000210 <__aeabi_dsub>
 8006b94:	4606      	mov	r6, r0
 8006b96:	460f      	mov	r7, r1
 8006b98:	2d00      	cmp	r5, #0
 8006b9a:	d042      	beq.n	8006c22 <__kernel_rem_pio2+0x272>
 8006b9c:	4658      	mov	r0, fp
 8006b9e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8006cb8 <__kernel_rem_pio2+0x308>
 8006ba2:	f000 fa5d 	bl	8007060 <scalbn>
 8006ba6:	4630      	mov	r0, r6
 8006ba8:	4639      	mov	r1, r7
 8006baa:	ec53 2b10 	vmov	r2, r3, d0
 8006bae:	f7f9 fb2f 	bl	8000210 <__aeabi_dsub>
 8006bb2:	4606      	mov	r6, r0
 8006bb4:	460f      	mov	r7, r1
 8006bb6:	e034      	b.n	8006c22 <__kernel_rem_pio2+0x272>
 8006bb8:	4b44      	ldr	r3, [pc, #272]	@ (8006ccc <__kernel_rem_pio2+0x31c>)
 8006bba:	2200      	movs	r2, #0
 8006bbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bc0:	f7f9 fcde 	bl	8000580 <__aeabi_dmul>
 8006bc4:	f7f9 ff76 	bl	8000ab4 <__aeabi_d2iz>
 8006bc8:	f7f9 fc70 	bl	80004ac <__aeabi_i2d>
 8006bcc:	4b40      	ldr	r3, [pc, #256]	@ (8006cd0 <__kernel_rem_pio2+0x320>)
 8006bce:	2200      	movs	r2, #0
 8006bd0:	4606      	mov	r6, r0
 8006bd2:	460f      	mov	r7, r1
 8006bd4:	f7f9 fcd4 	bl	8000580 <__aeabi_dmul>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	460b      	mov	r3, r1
 8006bdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006be0:	f7f9 fb16 	bl	8000210 <__aeabi_dsub>
 8006be4:	f7f9 ff66 	bl	8000ab4 <__aeabi_d2iz>
 8006be8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006bec:	f849 0b04 	str.w	r0, [r9], #4
 8006bf0:	4639      	mov	r1, r7
 8006bf2:	4630      	mov	r0, r6
 8006bf4:	f7f9 fb0e 	bl	8000214 <__adddf3>
 8006bf8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006bfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c00:	e75d      	b.n	8006abe <__kernel_rem_pio2+0x10e>
 8006c02:	d107      	bne.n	8006c14 <__kernel_rem_pio2+0x264>
 8006c04:	f108 33ff 	add.w	r3, r8, #4294967295
 8006c08:	aa0c      	add	r2, sp, #48	@ 0x30
 8006c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c0e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8006c12:	e79e      	b.n	8006b52 <__kernel_rem_pio2+0x1a2>
 8006c14:	4b2f      	ldr	r3, [pc, #188]	@ (8006cd4 <__kernel_rem_pio2+0x324>)
 8006c16:	2200      	movs	r2, #0
 8006c18:	f7f9 ff38 	bl	8000a8c <__aeabi_dcmpge>
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	d143      	bne.n	8006ca8 <__kernel_rem_pio2+0x2f8>
 8006c20:	4681      	mov	r9, r0
 8006c22:	2200      	movs	r2, #0
 8006c24:	2300      	movs	r3, #0
 8006c26:	4630      	mov	r0, r6
 8006c28:	4639      	mov	r1, r7
 8006c2a:	f7f9 ff11 	bl	8000a50 <__aeabi_dcmpeq>
 8006c2e:	2800      	cmp	r0, #0
 8006c30:	f000 80bf 	beq.w	8006db2 <__kernel_rem_pio2+0x402>
 8006c34:	f108 33ff 	add.w	r3, r8, #4294967295
 8006c38:	2200      	movs	r2, #0
 8006c3a:	9900      	ldr	r1, [sp, #0]
 8006c3c:	428b      	cmp	r3, r1
 8006c3e:	da6e      	bge.n	8006d1e <__kernel_rem_pio2+0x36e>
 8006c40:	2a00      	cmp	r2, #0
 8006c42:	f000 8089 	beq.w	8006d58 <__kernel_rem_pio2+0x3a8>
 8006c46:	f108 38ff 	add.w	r8, r8, #4294967295
 8006c4a:	ab0c      	add	r3, sp, #48	@ 0x30
 8006c4c:	f1ab 0b18 	sub.w	fp, fp, #24
 8006c50:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d0f6      	beq.n	8006c46 <__kernel_rem_pio2+0x296>
 8006c58:	4658      	mov	r0, fp
 8006c5a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8006cb8 <__kernel_rem_pio2+0x308>
 8006c5e:	f000 f9ff 	bl	8007060 <scalbn>
 8006c62:	f108 0301 	add.w	r3, r8, #1
 8006c66:	00da      	lsls	r2, r3, #3
 8006c68:	9205      	str	r2, [sp, #20]
 8006c6a:	ec55 4b10 	vmov	r4, r5, d0
 8006c6e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8006c70:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8006ccc <__kernel_rem_pio2+0x31c>
 8006c74:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8006c78:	4646      	mov	r6, r8
 8006c7a:	f04f 0a00 	mov.w	sl, #0
 8006c7e:	2e00      	cmp	r6, #0
 8006c80:	f280 80cf 	bge.w	8006e22 <__kernel_rem_pio2+0x472>
 8006c84:	4644      	mov	r4, r8
 8006c86:	2c00      	cmp	r4, #0
 8006c88:	f2c0 80fd 	blt.w	8006e86 <__kernel_rem_pio2+0x4d6>
 8006c8c:	4b12      	ldr	r3, [pc, #72]	@ (8006cd8 <__kernel_rem_pio2+0x328>)
 8006c8e:	461f      	mov	r7, r3
 8006c90:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006c92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006c96:	9306      	str	r3, [sp, #24]
 8006c98:	f04f 0a00 	mov.w	sl, #0
 8006c9c:	f04f 0b00 	mov.w	fp, #0
 8006ca0:	2600      	movs	r6, #0
 8006ca2:	eba8 0504 	sub.w	r5, r8, r4
 8006ca6:	e0e2      	b.n	8006e6e <__kernel_rem_pio2+0x4be>
 8006ca8:	f04f 0902 	mov.w	r9, #2
 8006cac:	e754      	b.n	8006b58 <__kernel_rem_pio2+0x1a8>
 8006cae:	bf00      	nop
	...
 8006cbc:	3ff00000 	.word	0x3ff00000
 8006cc0:	08007450 	.word	0x08007450
 8006cc4:	40200000 	.word	0x40200000
 8006cc8:	3ff00000 	.word	0x3ff00000
 8006ccc:	3e700000 	.word	0x3e700000
 8006cd0:	41700000 	.word	0x41700000
 8006cd4:	3fe00000 	.word	0x3fe00000
 8006cd8:	08007410 	.word	0x08007410
 8006cdc:	f854 3b04 	ldr.w	r3, [r4], #4
 8006ce0:	b945      	cbnz	r5, 8006cf4 <__kernel_rem_pio2+0x344>
 8006ce2:	b123      	cbz	r3, 8006cee <__kernel_rem_pio2+0x33e>
 8006ce4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8006ce8:	f844 3c04 	str.w	r3, [r4, #-4]
 8006cec:	2301      	movs	r3, #1
 8006cee:	3201      	adds	r2, #1
 8006cf0:	461d      	mov	r5, r3
 8006cf2:	e738      	b.n	8006b66 <__kernel_rem_pio2+0x1b6>
 8006cf4:	1acb      	subs	r3, r1, r3
 8006cf6:	e7f7      	b.n	8006ce8 <__kernel_rem_pio2+0x338>
 8006cf8:	f108 32ff 	add.w	r2, r8, #4294967295
 8006cfc:	ab0c      	add	r3, sp, #48	@ 0x30
 8006cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d02:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006d06:	a90c      	add	r1, sp, #48	@ 0x30
 8006d08:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006d0c:	e739      	b.n	8006b82 <__kernel_rem_pio2+0x1d2>
 8006d0e:	f108 32ff 	add.w	r2, r8, #4294967295
 8006d12:	ab0c      	add	r3, sp, #48	@ 0x30
 8006d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d18:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006d1c:	e7f3      	b.n	8006d06 <__kernel_rem_pio2+0x356>
 8006d1e:	a90c      	add	r1, sp, #48	@ 0x30
 8006d20:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006d24:	3b01      	subs	r3, #1
 8006d26:	430a      	orrs	r2, r1
 8006d28:	e787      	b.n	8006c3a <__kernel_rem_pio2+0x28a>
 8006d2a:	3401      	adds	r4, #1
 8006d2c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006d30:	2a00      	cmp	r2, #0
 8006d32:	d0fa      	beq.n	8006d2a <__kernel_rem_pio2+0x37a>
 8006d34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d36:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006d3a:	eb0d 0503 	add.w	r5, sp, r3
 8006d3e:	9b06      	ldr	r3, [sp, #24]
 8006d40:	aa20      	add	r2, sp, #128	@ 0x80
 8006d42:	4443      	add	r3, r8
 8006d44:	f108 0701 	add.w	r7, r8, #1
 8006d48:	3d98      	subs	r5, #152	@ 0x98
 8006d4a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8006d4e:	4444      	add	r4, r8
 8006d50:	42bc      	cmp	r4, r7
 8006d52:	da04      	bge.n	8006d5e <__kernel_rem_pio2+0x3ae>
 8006d54:	46a0      	mov	r8, r4
 8006d56:	e6a2      	b.n	8006a9e <__kernel_rem_pio2+0xee>
 8006d58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d5a:	2401      	movs	r4, #1
 8006d5c:	e7e6      	b.n	8006d2c <__kernel_rem_pio2+0x37c>
 8006d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d60:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8006d64:	f7f9 fba2 	bl	80004ac <__aeabi_i2d>
 8006d68:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8007030 <__kernel_rem_pio2+0x680>
 8006d6c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006d70:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006d74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d78:	46b2      	mov	sl, r6
 8006d7a:	f04f 0800 	mov.w	r8, #0
 8006d7e:	9b05      	ldr	r3, [sp, #20]
 8006d80:	4598      	cmp	r8, r3
 8006d82:	dd05      	ble.n	8006d90 <__kernel_rem_pio2+0x3e0>
 8006d84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006d88:	3701      	adds	r7, #1
 8006d8a:	eca5 7b02 	vstmia	r5!, {d7}
 8006d8e:	e7df      	b.n	8006d50 <__kernel_rem_pio2+0x3a0>
 8006d90:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8006d94:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006d98:	f7f9 fbf2 	bl	8000580 <__aeabi_dmul>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	460b      	mov	r3, r1
 8006da0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006da4:	f7f9 fa36 	bl	8000214 <__adddf3>
 8006da8:	f108 0801 	add.w	r8, r8, #1
 8006dac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006db0:	e7e5      	b.n	8006d7e <__kernel_rem_pio2+0x3ce>
 8006db2:	f1cb 0000 	rsb	r0, fp, #0
 8006db6:	ec47 6b10 	vmov	d0, r6, r7
 8006dba:	f000 f951 	bl	8007060 <scalbn>
 8006dbe:	ec55 4b10 	vmov	r4, r5, d0
 8006dc2:	4b9d      	ldr	r3, [pc, #628]	@ (8007038 <__kernel_rem_pio2+0x688>)
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	4629      	mov	r1, r5
 8006dca:	f7f9 fe5f 	bl	8000a8c <__aeabi_dcmpge>
 8006dce:	b300      	cbz	r0, 8006e12 <__kernel_rem_pio2+0x462>
 8006dd0:	4b9a      	ldr	r3, [pc, #616]	@ (800703c <__kernel_rem_pio2+0x68c>)
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	4629      	mov	r1, r5
 8006dd8:	f7f9 fbd2 	bl	8000580 <__aeabi_dmul>
 8006ddc:	f7f9 fe6a 	bl	8000ab4 <__aeabi_d2iz>
 8006de0:	4606      	mov	r6, r0
 8006de2:	f7f9 fb63 	bl	80004ac <__aeabi_i2d>
 8006de6:	4b94      	ldr	r3, [pc, #592]	@ (8007038 <__kernel_rem_pio2+0x688>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	f7f9 fbc9 	bl	8000580 <__aeabi_dmul>
 8006dee:	460b      	mov	r3, r1
 8006df0:	4602      	mov	r2, r0
 8006df2:	4629      	mov	r1, r5
 8006df4:	4620      	mov	r0, r4
 8006df6:	f7f9 fa0b 	bl	8000210 <__aeabi_dsub>
 8006dfa:	f7f9 fe5b 	bl	8000ab4 <__aeabi_d2iz>
 8006dfe:	ab0c      	add	r3, sp, #48	@ 0x30
 8006e00:	f10b 0b18 	add.w	fp, fp, #24
 8006e04:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006e08:	f108 0801 	add.w	r8, r8, #1
 8006e0c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8006e10:	e722      	b.n	8006c58 <__kernel_rem_pio2+0x2a8>
 8006e12:	4620      	mov	r0, r4
 8006e14:	4629      	mov	r1, r5
 8006e16:	f7f9 fe4d 	bl	8000ab4 <__aeabi_d2iz>
 8006e1a:	ab0c      	add	r3, sp, #48	@ 0x30
 8006e1c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006e20:	e71a      	b.n	8006c58 <__kernel_rem_pio2+0x2a8>
 8006e22:	ab0c      	add	r3, sp, #48	@ 0x30
 8006e24:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006e28:	f7f9 fb40 	bl	80004ac <__aeabi_i2d>
 8006e2c:	4622      	mov	r2, r4
 8006e2e:	462b      	mov	r3, r5
 8006e30:	f7f9 fba6 	bl	8000580 <__aeabi_dmul>
 8006e34:	4652      	mov	r2, sl
 8006e36:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8006e3a:	465b      	mov	r3, fp
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	4629      	mov	r1, r5
 8006e40:	f7f9 fb9e 	bl	8000580 <__aeabi_dmul>
 8006e44:	3e01      	subs	r6, #1
 8006e46:	4604      	mov	r4, r0
 8006e48:	460d      	mov	r5, r1
 8006e4a:	e718      	b.n	8006c7e <__kernel_rem_pio2+0x2ce>
 8006e4c:	9906      	ldr	r1, [sp, #24]
 8006e4e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8006e52:	9106      	str	r1, [sp, #24]
 8006e54:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8006e58:	f7f9 fb92 	bl	8000580 <__aeabi_dmul>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	460b      	mov	r3, r1
 8006e60:	4650      	mov	r0, sl
 8006e62:	4659      	mov	r1, fp
 8006e64:	f7f9 f9d6 	bl	8000214 <__adddf3>
 8006e68:	3601      	adds	r6, #1
 8006e6a:	4682      	mov	sl, r0
 8006e6c:	468b      	mov	fp, r1
 8006e6e:	9b00      	ldr	r3, [sp, #0]
 8006e70:	429e      	cmp	r6, r3
 8006e72:	dc01      	bgt.n	8006e78 <__kernel_rem_pio2+0x4c8>
 8006e74:	42b5      	cmp	r5, r6
 8006e76:	dae9      	bge.n	8006e4c <__kernel_rem_pio2+0x49c>
 8006e78:	ab48      	add	r3, sp, #288	@ 0x120
 8006e7a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006e7e:	e9c5 ab00 	strd	sl, fp, [r5]
 8006e82:	3c01      	subs	r4, #1
 8006e84:	e6ff      	b.n	8006c86 <__kernel_rem_pio2+0x2d6>
 8006e86:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	dc0b      	bgt.n	8006ea4 <__kernel_rem_pio2+0x4f4>
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	dc39      	bgt.n	8006f04 <__kernel_rem_pio2+0x554>
 8006e90:	d05d      	beq.n	8006f4e <__kernel_rem_pio2+0x59e>
 8006e92:	9b02      	ldr	r3, [sp, #8]
 8006e94:	f003 0007 	and.w	r0, r3, #7
 8006e98:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8006e9c:	ecbd 8b02 	vpop	{d8}
 8006ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006ea6:	2b03      	cmp	r3, #3
 8006ea8:	d1f3      	bne.n	8006e92 <__kernel_rem_pio2+0x4e2>
 8006eaa:	9b05      	ldr	r3, [sp, #20]
 8006eac:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006eb0:	eb0d 0403 	add.w	r4, sp, r3
 8006eb4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8006eb8:	4625      	mov	r5, r4
 8006eba:	46c2      	mov	sl, r8
 8006ebc:	f1ba 0f00 	cmp.w	sl, #0
 8006ec0:	f1a5 0508 	sub.w	r5, r5, #8
 8006ec4:	dc6b      	bgt.n	8006f9e <__kernel_rem_pio2+0x5ee>
 8006ec6:	4645      	mov	r5, r8
 8006ec8:	2d01      	cmp	r5, #1
 8006eca:	f1a4 0408 	sub.w	r4, r4, #8
 8006ece:	f300 8087 	bgt.w	8006fe0 <__kernel_rem_pio2+0x630>
 8006ed2:	9c05      	ldr	r4, [sp, #20]
 8006ed4:	ab48      	add	r3, sp, #288	@ 0x120
 8006ed6:	441c      	add	r4, r3
 8006ed8:	2000      	movs	r0, #0
 8006eda:	2100      	movs	r1, #0
 8006edc:	f1b8 0f01 	cmp.w	r8, #1
 8006ee0:	f300 809c 	bgt.w	800701c <__kernel_rem_pio2+0x66c>
 8006ee4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8006ee8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8006eec:	f1b9 0f00 	cmp.w	r9, #0
 8006ef0:	f040 80a6 	bne.w	8007040 <__kernel_rem_pio2+0x690>
 8006ef4:	9b04      	ldr	r3, [sp, #16]
 8006ef6:	e9c3 7800 	strd	r7, r8, [r3]
 8006efa:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006efe:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006f02:	e7c6      	b.n	8006e92 <__kernel_rem_pio2+0x4e2>
 8006f04:	9d05      	ldr	r5, [sp, #20]
 8006f06:	ab48      	add	r3, sp, #288	@ 0x120
 8006f08:	441d      	add	r5, r3
 8006f0a:	4644      	mov	r4, r8
 8006f0c:	2000      	movs	r0, #0
 8006f0e:	2100      	movs	r1, #0
 8006f10:	2c00      	cmp	r4, #0
 8006f12:	da35      	bge.n	8006f80 <__kernel_rem_pio2+0x5d0>
 8006f14:	f1b9 0f00 	cmp.w	r9, #0
 8006f18:	d038      	beq.n	8006f8c <__kernel_rem_pio2+0x5dc>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006f20:	9c04      	ldr	r4, [sp, #16]
 8006f22:	e9c4 2300 	strd	r2, r3, [r4]
 8006f26:	4602      	mov	r2, r0
 8006f28:	460b      	mov	r3, r1
 8006f2a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8006f2e:	f7f9 f96f 	bl	8000210 <__aeabi_dsub>
 8006f32:	ad4a      	add	r5, sp, #296	@ 0x128
 8006f34:	2401      	movs	r4, #1
 8006f36:	45a0      	cmp	r8, r4
 8006f38:	da2b      	bge.n	8006f92 <__kernel_rem_pio2+0x5e2>
 8006f3a:	f1b9 0f00 	cmp.w	r9, #0
 8006f3e:	d002      	beq.n	8006f46 <__kernel_rem_pio2+0x596>
 8006f40:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006f44:	4619      	mov	r1, r3
 8006f46:	9b04      	ldr	r3, [sp, #16]
 8006f48:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006f4c:	e7a1      	b.n	8006e92 <__kernel_rem_pio2+0x4e2>
 8006f4e:	9c05      	ldr	r4, [sp, #20]
 8006f50:	ab48      	add	r3, sp, #288	@ 0x120
 8006f52:	441c      	add	r4, r3
 8006f54:	2000      	movs	r0, #0
 8006f56:	2100      	movs	r1, #0
 8006f58:	f1b8 0f00 	cmp.w	r8, #0
 8006f5c:	da09      	bge.n	8006f72 <__kernel_rem_pio2+0x5c2>
 8006f5e:	f1b9 0f00 	cmp.w	r9, #0
 8006f62:	d002      	beq.n	8006f6a <__kernel_rem_pio2+0x5ba>
 8006f64:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006f68:	4619      	mov	r1, r3
 8006f6a:	9b04      	ldr	r3, [sp, #16]
 8006f6c:	e9c3 0100 	strd	r0, r1, [r3]
 8006f70:	e78f      	b.n	8006e92 <__kernel_rem_pio2+0x4e2>
 8006f72:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006f76:	f7f9 f94d 	bl	8000214 <__adddf3>
 8006f7a:	f108 38ff 	add.w	r8, r8, #4294967295
 8006f7e:	e7eb      	b.n	8006f58 <__kernel_rem_pio2+0x5a8>
 8006f80:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8006f84:	f7f9 f946 	bl	8000214 <__adddf3>
 8006f88:	3c01      	subs	r4, #1
 8006f8a:	e7c1      	b.n	8006f10 <__kernel_rem_pio2+0x560>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	e7c6      	b.n	8006f20 <__kernel_rem_pio2+0x570>
 8006f92:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8006f96:	f7f9 f93d 	bl	8000214 <__adddf3>
 8006f9a:	3401      	adds	r4, #1
 8006f9c:	e7cb      	b.n	8006f36 <__kernel_rem_pio2+0x586>
 8006f9e:	ed95 7b00 	vldr	d7, [r5]
 8006fa2:	ed8d 7b00 	vstr	d7, [sp]
 8006fa6:	ed95 7b02 	vldr	d7, [r5, #8]
 8006faa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fae:	ec53 2b17 	vmov	r2, r3, d7
 8006fb2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006fb6:	f7f9 f92d 	bl	8000214 <__adddf3>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	4606      	mov	r6, r0
 8006fc0:	460f      	mov	r7, r1
 8006fc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fc6:	f7f9 f923 	bl	8000210 <__aeabi_dsub>
 8006fca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006fce:	f7f9 f921 	bl	8000214 <__adddf3>
 8006fd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006fd6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8006fda:	e9c5 6700 	strd	r6, r7, [r5]
 8006fde:	e76d      	b.n	8006ebc <__kernel_rem_pio2+0x50c>
 8006fe0:	ed94 7b00 	vldr	d7, [r4]
 8006fe4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8006fe8:	ec51 0b17 	vmov	r0, r1, d7
 8006fec:	4652      	mov	r2, sl
 8006fee:	465b      	mov	r3, fp
 8006ff0:	ed8d 7b00 	vstr	d7, [sp]
 8006ff4:	f7f9 f90e 	bl	8000214 <__adddf3>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	4606      	mov	r6, r0
 8006ffe:	460f      	mov	r7, r1
 8007000:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007004:	f7f9 f904 	bl	8000210 <__aeabi_dsub>
 8007008:	4652      	mov	r2, sl
 800700a:	465b      	mov	r3, fp
 800700c:	f7f9 f902 	bl	8000214 <__adddf3>
 8007010:	3d01      	subs	r5, #1
 8007012:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007016:	e9c4 6700 	strd	r6, r7, [r4]
 800701a:	e755      	b.n	8006ec8 <__kernel_rem_pio2+0x518>
 800701c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007020:	f7f9 f8f8 	bl	8000214 <__adddf3>
 8007024:	f108 38ff 	add.w	r8, r8, #4294967295
 8007028:	e758      	b.n	8006edc <__kernel_rem_pio2+0x52c>
 800702a:	bf00      	nop
 800702c:	f3af 8000 	nop.w
	...
 8007038:	41700000 	.word	0x41700000
 800703c:	3e700000 	.word	0x3e700000
 8007040:	9b04      	ldr	r3, [sp, #16]
 8007042:	9a04      	ldr	r2, [sp, #16]
 8007044:	601f      	str	r7, [r3, #0]
 8007046:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800704a:	605c      	str	r4, [r3, #4]
 800704c:	609d      	str	r5, [r3, #8]
 800704e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007052:	60d3      	str	r3, [r2, #12]
 8007054:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007058:	6110      	str	r0, [r2, #16]
 800705a:	6153      	str	r3, [r2, #20]
 800705c:	e719      	b.n	8006e92 <__kernel_rem_pio2+0x4e2>
 800705e:	bf00      	nop

08007060 <scalbn>:
 8007060:	b570      	push	{r4, r5, r6, lr}
 8007062:	ec55 4b10 	vmov	r4, r5, d0
 8007066:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800706a:	4606      	mov	r6, r0
 800706c:	462b      	mov	r3, r5
 800706e:	b991      	cbnz	r1, 8007096 <scalbn+0x36>
 8007070:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007074:	4323      	orrs	r3, r4
 8007076:	d03d      	beq.n	80070f4 <scalbn+0x94>
 8007078:	4b35      	ldr	r3, [pc, #212]	@ (8007150 <scalbn+0xf0>)
 800707a:	4620      	mov	r0, r4
 800707c:	4629      	mov	r1, r5
 800707e:	2200      	movs	r2, #0
 8007080:	f7f9 fa7e 	bl	8000580 <__aeabi_dmul>
 8007084:	4b33      	ldr	r3, [pc, #204]	@ (8007154 <scalbn+0xf4>)
 8007086:	429e      	cmp	r6, r3
 8007088:	4604      	mov	r4, r0
 800708a:	460d      	mov	r5, r1
 800708c:	da0f      	bge.n	80070ae <scalbn+0x4e>
 800708e:	a328      	add	r3, pc, #160	@ (adr r3, 8007130 <scalbn+0xd0>)
 8007090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007094:	e01e      	b.n	80070d4 <scalbn+0x74>
 8007096:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800709a:	4291      	cmp	r1, r2
 800709c:	d10b      	bne.n	80070b6 <scalbn+0x56>
 800709e:	4622      	mov	r2, r4
 80070a0:	4620      	mov	r0, r4
 80070a2:	4629      	mov	r1, r5
 80070a4:	f7f9 f8b6 	bl	8000214 <__adddf3>
 80070a8:	4604      	mov	r4, r0
 80070aa:	460d      	mov	r5, r1
 80070ac:	e022      	b.n	80070f4 <scalbn+0x94>
 80070ae:	460b      	mov	r3, r1
 80070b0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80070b4:	3936      	subs	r1, #54	@ 0x36
 80070b6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80070ba:	4296      	cmp	r6, r2
 80070bc:	dd0d      	ble.n	80070da <scalbn+0x7a>
 80070be:	2d00      	cmp	r5, #0
 80070c0:	a11d      	add	r1, pc, #116	@ (adr r1, 8007138 <scalbn+0xd8>)
 80070c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070c6:	da02      	bge.n	80070ce <scalbn+0x6e>
 80070c8:	a11d      	add	r1, pc, #116	@ (adr r1, 8007140 <scalbn+0xe0>)
 80070ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070ce:	a31a      	add	r3, pc, #104	@ (adr r3, 8007138 <scalbn+0xd8>)
 80070d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d4:	f7f9 fa54 	bl	8000580 <__aeabi_dmul>
 80070d8:	e7e6      	b.n	80070a8 <scalbn+0x48>
 80070da:	1872      	adds	r2, r6, r1
 80070dc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80070e0:	428a      	cmp	r2, r1
 80070e2:	dcec      	bgt.n	80070be <scalbn+0x5e>
 80070e4:	2a00      	cmp	r2, #0
 80070e6:	dd08      	ble.n	80070fa <scalbn+0x9a>
 80070e8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80070ec:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80070f0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80070f4:	ec45 4b10 	vmov	d0, r4, r5
 80070f8:	bd70      	pop	{r4, r5, r6, pc}
 80070fa:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80070fe:	da08      	bge.n	8007112 <scalbn+0xb2>
 8007100:	2d00      	cmp	r5, #0
 8007102:	a10b      	add	r1, pc, #44	@ (adr r1, 8007130 <scalbn+0xd0>)
 8007104:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007108:	dac1      	bge.n	800708e <scalbn+0x2e>
 800710a:	a10f      	add	r1, pc, #60	@ (adr r1, 8007148 <scalbn+0xe8>)
 800710c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007110:	e7bd      	b.n	800708e <scalbn+0x2e>
 8007112:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007116:	3236      	adds	r2, #54	@ 0x36
 8007118:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800711c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007120:	4620      	mov	r0, r4
 8007122:	4b0d      	ldr	r3, [pc, #52]	@ (8007158 <scalbn+0xf8>)
 8007124:	4629      	mov	r1, r5
 8007126:	2200      	movs	r2, #0
 8007128:	e7d4      	b.n	80070d4 <scalbn+0x74>
 800712a:	bf00      	nop
 800712c:	f3af 8000 	nop.w
 8007130:	c2f8f359 	.word	0xc2f8f359
 8007134:	01a56e1f 	.word	0x01a56e1f
 8007138:	8800759c 	.word	0x8800759c
 800713c:	7e37e43c 	.word	0x7e37e43c
 8007140:	8800759c 	.word	0x8800759c
 8007144:	fe37e43c 	.word	0xfe37e43c
 8007148:	c2f8f359 	.word	0xc2f8f359
 800714c:	81a56e1f 	.word	0x81a56e1f
 8007150:	43500000 	.word	0x43500000
 8007154:	ffff3cb0 	.word	0xffff3cb0
 8007158:	3c900000 	.word	0x3c900000
 800715c:	00000000 	.word	0x00000000

08007160 <floor>:
 8007160:	ec51 0b10 	vmov	r0, r1, d0
 8007164:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800716c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8007170:	2e13      	cmp	r6, #19
 8007172:	460c      	mov	r4, r1
 8007174:	4605      	mov	r5, r0
 8007176:	4680      	mov	r8, r0
 8007178:	dc34      	bgt.n	80071e4 <floor+0x84>
 800717a:	2e00      	cmp	r6, #0
 800717c:	da17      	bge.n	80071ae <floor+0x4e>
 800717e:	a332      	add	r3, pc, #200	@ (adr r3, 8007248 <floor+0xe8>)
 8007180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007184:	f7f9 f846 	bl	8000214 <__adddf3>
 8007188:	2200      	movs	r2, #0
 800718a:	2300      	movs	r3, #0
 800718c:	f7f9 fc88 	bl	8000aa0 <__aeabi_dcmpgt>
 8007190:	b150      	cbz	r0, 80071a8 <floor+0x48>
 8007192:	2c00      	cmp	r4, #0
 8007194:	da55      	bge.n	8007242 <floor+0xe2>
 8007196:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800719a:	432c      	orrs	r4, r5
 800719c:	2500      	movs	r5, #0
 800719e:	42ac      	cmp	r4, r5
 80071a0:	4c2b      	ldr	r4, [pc, #172]	@ (8007250 <floor+0xf0>)
 80071a2:	bf08      	it	eq
 80071a4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80071a8:	4621      	mov	r1, r4
 80071aa:	4628      	mov	r0, r5
 80071ac:	e023      	b.n	80071f6 <floor+0x96>
 80071ae:	4f29      	ldr	r7, [pc, #164]	@ (8007254 <floor+0xf4>)
 80071b0:	4137      	asrs	r7, r6
 80071b2:	ea01 0307 	and.w	r3, r1, r7
 80071b6:	4303      	orrs	r3, r0
 80071b8:	d01d      	beq.n	80071f6 <floor+0x96>
 80071ba:	a323      	add	r3, pc, #140	@ (adr r3, 8007248 <floor+0xe8>)
 80071bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c0:	f7f9 f828 	bl	8000214 <__adddf3>
 80071c4:	2200      	movs	r2, #0
 80071c6:	2300      	movs	r3, #0
 80071c8:	f7f9 fc6a 	bl	8000aa0 <__aeabi_dcmpgt>
 80071cc:	2800      	cmp	r0, #0
 80071ce:	d0eb      	beq.n	80071a8 <floor+0x48>
 80071d0:	2c00      	cmp	r4, #0
 80071d2:	bfbe      	ittt	lt
 80071d4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80071d8:	4133      	asrlt	r3, r6
 80071da:	18e4      	addlt	r4, r4, r3
 80071dc:	ea24 0407 	bic.w	r4, r4, r7
 80071e0:	2500      	movs	r5, #0
 80071e2:	e7e1      	b.n	80071a8 <floor+0x48>
 80071e4:	2e33      	cmp	r6, #51	@ 0x33
 80071e6:	dd0a      	ble.n	80071fe <floor+0x9e>
 80071e8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80071ec:	d103      	bne.n	80071f6 <floor+0x96>
 80071ee:	4602      	mov	r2, r0
 80071f0:	460b      	mov	r3, r1
 80071f2:	f7f9 f80f 	bl	8000214 <__adddf3>
 80071f6:	ec41 0b10 	vmov	d0, r0, r1
 80071fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071fe:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8007202:	f04f 37ff 	mov.w	r7, #4294967295
 8007206:	40df      	lsrs	r7, r3
 8007208:	4207      	tst	r7, r0
 800720a:	d0f4      	beq.n	80071f6 <floor+0x96>
 800720c:	a30e      	add	r3, pc, #56	@ (adr r3, 8007248 <floor+0xe8>)
 800720e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007212:	f7f8 ffff 	bl	8000214 <__adddf3>
 8007216:	2200      	movs	r2, #0
 8007218:	2300      	movs	r3, #0
 800721a:	f7f9 fc41 	bl	8000aa0 <__aeabi_dcmpgt>
 800721e:	2800      	cmp	r0, #0
 8007220:	d0c2      	beq.n	80071a8 <floor+0x48>
 8007222:	2c00      	cmp	r4, #0
 8007224:	da0a      	bge.n	800723c <floor+0xdc>
 8007226:	2e14      	cmp	r6, #20
 8007228:	d101      	bne.n	800722e <floor+0xce>
 800722a:	3401      	adds	r4, #1
 800722c:	e006      	b.n	800723c <floor+0xdc>
 800722e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8007232:	2301      	movs	r3, #1
 8007234:	40b3      	lsls	r3, r6
 8007236:	441d      	add	r5, r3
 8007238:	4545      	cmp	r5, r8
 800723a:	d3f6      	bcc.n	800722a <floor+0xca>
 800723c:	ea25 0507 	bic.w	r5, r5, r7
 8007240:	e7b2      	b.n	80071a8 <floor+0x48>
 8007242:	2500      	movs	r5, #0
 8007244:	462c      	mov	r4, r5
 8007246:	e7af      	b.n	80071a8 <floor+0x48>
 8007248:	8800759c 	.word	0x8800759c
 800724c:	7e37e43c 	.word	0x7e37e43c
 8007250:	bff00000 	.word	0xbff00000
 8007254:	000fffff 	.word	0x000fffff

08007258 <_init>:
 8007258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800725a:	bf00      	nop
 800725c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800725e:	bc08      	pop	{r3}
 8007260:	469e      	mov	lr, r3
 8007262:	4770      	bx	lr

08007264 <_fini>:
 8007264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007266:	bf00      	nop
 8007268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800726a:	bc08      	pop	{r3}
 800726c:	469e      	mov	lr, r3
 800726e:	4770      	bx	lr
