
lcr-meter-stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003efc  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080040c0  080040c0  000050c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040d8  080040d8  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080040d8  080040d8  000050d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040e0  080040e0  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040e0  080040e0  000050e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080040e4  080040e4  000050e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080040e8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ec  2000000c  080040f4  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f8  080040f4  000065f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f8e8  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000246c  00000000  00000000  00015924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  00017d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a1a  00000000  00000000  00018ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022940  00000000  00000000  000194ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010be7  00000000  00000000  0003be0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5791  00000000  00000000  0004c9f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00122182  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003700  00000000  00000000  001221c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  001258c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080040a8 	.word	0x080040a8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080040a8 	.word	0x080040a8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <AD9833_write>:

// MaKE SURE THIS IS DEFINED IN THE main.c FILE
extern SPI_HandleTypeDef hspi1; // SPI handle (Assuming SPI1 is used)


void AD9833_write(uint8_t data_high, uint8_t data_low) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	460a      	mov	r2, r1
 80004fe:	71fb      	strb	r3, [r7, #7]
 8000500:	4613      	mov	r3, r2
 8000502:	71bb      	strb	r3, [r7, #6]
    uint8_t data_out[2] = {data_high, data_low};
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	733b      	strb	r3, [r7, #12]
 8000508:	79bb      	ldrb	r3, [r7, #6]
 800050a:	737b      	strb	r3, [r7, #13]
    

    // This doesn't cause it to change for some reason.
    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;  // CPOL = 1 (Clock idle high)
 800050c:	4b10      	ldr	r3, [pc, #64]	@ (8000550 <AD9833_write+0x5c>)
 800050e:	2202      	movs	r2, #2
 8000510:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;       // CPHA = 0 (Sample on the falling edge)
 8000512:	4b0f      	ldr	r3, [pc, #60]	@ (8000550 <AD9833_write+0x5c>)
 8000514:	2200      	movs	r2, #0
 8000516:	615a      	str	r2, [r3, #20]
    HAL_SPI_Init(&hspi1); // Restart the SPI module
 8000518:	480d      	ldr	r0, [pc, #52]	@ (8000550 <AD9833_write+0x5c>)
 800051a:	f002 fd31 	bl	8002f80 <HAL_SPI_Init>

    HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000524:	480b      	ldr	r0, [pc, #44]	@ (8000554 <AD9833_write+0x60>)
 8000526:	f001 fa93 	bl	8001a50 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data_out, 2, HAL_MAX_DELAY);
 800052a:	f107 010c 	add.w	r1, r7, #12
 800052e:	f04f 33ff 	mov.w	r3, #4294967295
 8000532:	2202      	movs	r2, #2
 8000534:	4806      	ldr	r0, [pc, #24]	@ (8000550 <AD9833_write+0x5c>)
 8000536:	f002 fdac 	bl	8003092 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_SET);
 800053a:	2201      	movs	r2, #1
 800053c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000540:	4804      	ldr	r0, [pc, #16]	@ (8000554 <AD9833_write+0x60>)
 8000542:	f001 fa85 	bl	8001a50 <HAL_GPIO_WritePin>
}
 8000546:	bf00      	nop
 8000548:	3710      	adds	r7, #16
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000070 	.word	0x20000070
 8000554:	40020c00 	.word	0x40020c00

08000558 <AD9833_write4>:

void AD9833_write4(uint8_t data_l_high, uint8_t data_l_low, uint8_t data_h_high, uint8_t data_h_low) {
 8000558:	b590      	push	{r4, r7, lr}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	4604      	mov	r4, r0
 8000560:	4608      	mov	r0, r1
 8000562:	4611      	mov	r1, r2
 8000564:	461a      	mov	r2, r3
 8000566:	4623      	mov	r3, r4
 8000568:	71fb      	strb	r3, [r7, #7]
 800056a:	4603      	mov	r3, r0
 800056c:	71bb      	strb	r3, [r7, #6]
 800056e:	460b      	mov	r3, r1
 8000570:	717b      	strb	r3, [r7, #5]
 8000572:	4613      	mov	r3, r2
 8000574:	713b      	strb	r3, [r7, #4]
    uint8_t data_out[4] = {data_l_high, data_l_low, data_h_high, data_h_low};
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	733b      	strb	r3, [r7, #12]
 800057a:	79bb      	ldrb	r3, [r7, #6]
 800057c:	737b      	strb	r3, [r7, #13]
 800057e:	797b      	ldrb	r3, [r7, #5]
 8000580:	73bb      	strb	r3, [r7, #14]
 8000582:	793b      	ldrb	r3, [r7, #4]
 8000584:	73fb      	strb	r3, [r7, #15]

    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;  // CPOL = 1 (Clock idle high)
 8000586:	4b10      	ldr	r3, [pc, #64]	@ (80005c8 <AD9833_write4+0x70>)
 8000588:	2202      	movs	r2, #2
 800058a:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;       // CPHA = 0 (Sample on the falling edge)
 800058c:	4b0e      	ldr	r3, [pc, #56]	@ (80005c8 <AD9833_write4+0x70>)
 800058e:	2200      	movs	r2, #0
 8000590:	615a      	str	r2, [r3, #20]
    HAL_SPI_Init(&hspi1); // Restart the SPI module
 8000592:	480d      	ldr	r0, [pc, #52]	@ (80005c8 <AD9833_write4+0x70>)
 8000594:	f002 fcf4 	bl	8002f80 <HAL_SPI_Init>

    HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800059e:	480b      	ldr	r0, [pc, #44]	@ (80005cc <AD9833_write4+0x74>)
 80005a0:	f001 fa56 	bl	8001a50 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data_out, 4, HAL_MAX_DELAY);
 80005a4:	f107 010c 	add.w	r1, r7, #12
 80005a8:	f04f 33ff 	mov.w	r3, #4294967295
 80005ac:	2204      	movs	r2, #4
 80005ae:	4806      	ldr	r0, [pc, #24]	@ (80005c8 <AD9833_write4+0x70>)
 80005b0:	f002 fd6f 	bl	8003092 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005ba:	4804      	ldr	r0, [pc, #16]	@ (80005cc <AD9833_write4+0x74>)
 80005bc:	f001 fa48 	bl	8001a50 <HAL_GPIO_WritePin>
}
 80005c0:	bf00      	nop
 80005c2:	3714      	adds	r7, #20
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd90      	pop	{r4, r7, pc}
 80005c8:	20000070 	.word	0x20000070
 80005cc:	40020c00 	.word	0x40020c00

080005d0 <AD9833_set_freq>:

void AD9833_set_freq(uint64_t f) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	e9c7 0100 	strd	r0, r1, [r7]
    AD9833_write(0b00100000, 0b10000000); // Control reg, start reset
 80005da:	2180      	movs	r1, #128	@ 0x80
 80005dc:	2020      	movs	r0, #32
 80005de:	f7ff ff89 	bl	80004f4 <AD9833_write>

    uint64_t FRQREG = (uint64_t)((f * (1 << 28)) / MASTER_CLK);
 80005e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80005e6:	f04f 0000 	mov.w	r0, #0
 80005ea:	f04f 0100 	mov.w	r1, #0
 80005ee:	0719      	lsls	r1, r3, #28
 80005f0:	ea41 1112 	orr.w	r1, r1, r2, lsr #4
 80005f4:	0710      	lsls	r0, r2, #28
 80005f6:	4a21      	ldr	r2, [pc, #132]	@ (800067c <AD9833_set_freq+0xac>)
 80005f8:	f04f 0300 	mov.w	r3, #0
 80005fc:	f7ff fe02 	bl	8000204 <__aeabi_uldivmod>
 8000600:	4602      	mov	r2, r0
 8000602:	460b      	mov	r3, r1
 8000604:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // Lower bytes
    uint16_t FL = FRQREG & 0x3FFF;
 8000608:	8a3b      	ldrh	r3, [r7, #16]
 800060a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800060e:	81fb      	strh	r3, [r7, #14]
    uint8_t Llb = FL & 0xFF;
 8000610:	89fb      	ldrh	r3, [r7, #14]
 8000612:	737b      	strb	r3, [r7, #13]
    uint8_t Lhb = ((FL >> 8) & 0x3F) | 0b01000000;
 8000614:	89fb      	ldrh	r3, [r7, #14]
 8000616:	0a1b      	lsrs	r3, r3, #8
 8000618:	b29b      	uxth	r3, r3
 800061a:	b25b      	sxtb	r3, r3
 800061c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000620:	b25b      	sxtb	r3, r3
 8000622:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000626:	b25b      	sxtb	r3, r3
 8000628:	733b      	strb	r3, [r7, #12]

    // Higher bytes
    uint16_t FH = (FRQREG >> 14) & 0x3FFF;
 800062a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800062e:	f04f 0200 	mov.w	r2, #0
 8000632:	f04f 0300 	mov.w	r3, #0
 8000636:	0b82      	lsrs	r2, r0, #14
 8000638:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 800063c:	0b8b      	lsrs	r3, r1, #14
 800063e:	b293      	uxth	r3, r2
 8000640:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000644:	817b      	strh	r3, [r7, #10]
    uint8_t Hlb = FH & 0xFF;
 8000646:	897b      	ldrh	r3, [r7, #10]
 8000648:	727b      	strb	r3, [r7, #9]
    uint8_t Hhb = ((FH >> 8) & 0x3F) | 0b01000000;
 800064a:	897b      	ldrh	r3, [r7, #10]
 800064c:	0a1b      	lsrs	r3, r3, #8
 800064e:	b29b      	uxth	r3, r3
 8000650:	b25b      	sxtb	r3, r3
 8000652:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000656:	b25b      	sxtb	r3, r3
 8000658:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800065c:	b25b      	sxtb	r3, r3
 800065e:	723b      	strb	r3, [r7, #8]

    AD9833_write4(Lhb, Llb, Hhb, Hlb);
 8000660:	7a7b      	ldrb	r3, [r7, #9]
 8000662:	7a3a      	ldrb	r2, [r7, #8]
 8000664:	7b79      	ldrb	r1, [r7, #13]
 8000666:	7b38      	ldrb	r0, [r7, #12]
 8000668:	f7ff ff76 	bl	8000558 <AD9833_write4>

    AD9833_write(0b00100000, 0b00000000); // Control reg, finish reset and configure IC
 800066c:	2100      	movs	r1, #0
 800066e:	2020      	movs	r0, #32
 8000670:	f7ff ff40 	bl	80004f4 <AD9833_write>
}
 8000674:	bf00      	nop
 8000676:	3718      	adds	r7, #24
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	000f4240 	.word	0x000f4240

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b5b0      	push	{r4, r5, r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000686:	f000 fc35 	bl	8000ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068a:	f000 f825 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068e:	f000 f96f 	bl	8000970 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000692:	f000 f915 	bl	80008c0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000696:	f000 f93d 	bl	8000914 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 800069a:	f000 f889 	bl	80007b0 <MX_ADC1_Init>
  MX_SPI1_Init();
 800069e:	f000 f8d9 	bl	8000854 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  int target = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	607b      	str	r3, [r7, #4]
//	  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_SET);
//	  HAL_Delay(1000);
//	  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
//	  HAL_Delay(1000);

	  HAL_Delay(5000);
 80006a6:	f241 3088 	movw	r0, #5000	@ 0x1388
 80006aa:	f000 fc95 	bl	8000fd8 <HAL_Delay>
	  AD9833_set_freq(target);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	17da      	asrs	r2, r3, #31
 80006b2:	461c      	mov	r4, r3
 80006b4:	4615      	mov	r5, r2
 80006b6:	4620      	mov	r0, r4
 80006b8:	4629      	mov	r1, r5
 80006ba:	f7ff ff89 	bl	80005d0 <AD9833_set_freq>
	  target += 1000;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80006c4:	607b      	str	r3, [r7, #4]
	  if (target > 10000) {
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f242 7210 	movw	r2, #10000	@ 0x2710
 80006cc:	4293      	cmp	r3, r2
 80006ce:	ddea      	ble.n	80006a6 <main+0x26>
		  target = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	607b      	str	r3, [r7, #4]
	  HAL_Delay(5000);
 80006d4:	e7e7      	b.n	80006a6 <main+0x26>
	...

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	@ 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	2234      	movs	r2, #52	@ 0x34
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f003 fcb1 	bl	800404e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	4b29      	ldr	r3, [pc, #164]	@ (80007a8 <SystemClock_Config+0xd0>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000704:	4a28      	ldr	r2, [pc, #160]	@ (80007a8 <SystemClock_Config+0xd0>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	@ 0x40
 800070c:	4b26      	ldr	r3, [pc, #152]	@ (80007a8 <SystemClock_Config+0xd0>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000718:	2300      	movs	r3, #0
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	4b23      	ldr	r3, [pc, #140]	@ (80007ac <SystemClock_Config+0xd4>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a22      	ldr	r2, [pc, #136]	@ (80007ac <SystemClock_Config+0xd4>)
 8000722:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	4b20      	ldr	r3, [pc, #128]	@ (80007ac <SystemClock_Config+0xd4>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000734:	2301      	movs	r3, #1
 8000736:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000738:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800073c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073e:	2302      	movs	r3, #2
 8000740:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000742:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000746:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000748:	2304      	movs	r3, #4
 800074a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800074c:	23a8      	movs	r3, #168	@ 0xa8
 800074e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000754:	2307      	movs	r3, #7
 8000756:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000758:	2302      	movs	r3, #2
 800075a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 031c 	add.w	r3, r7, #28
 8000760:	4618      	mov	r0, r3
 8000762:	f002 f96f 	bl	8002a44 <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800076c:	f000 f9dc 	bl	8000b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000770:	230f      	movs	r3, #15
 8000772:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000774:	2302      	movs	r3, #2
 8000776:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800077c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000780:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000782:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000786:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000788:	f107 0308 	add.w	r3, r7, #8
 800078c:	2105      	movs	r1, #5
 800078e:	4618      	mov	r0, r3
 8000790:	f001 fae4 	bl	8001d5c <HAL_RCC_ClockConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800079a:	f000 f9c5 	bl	8000b28 <Error_Handler>
  }
}
 800079e:	bf00      	nop
 80007a0:	3750      	adds	r7, #80	@ 0x50
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40007000 	.word	0x40007000

080007b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007b6:	463b      	mov	r3, r7
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007c2:	4b21      	ldr	r3, [pc, #132]	@ (8000848 <MX_ADC1_Init+0x98>)
 80007c4:	4a21      	ldr	r2, [pc, #132]	@ (800084c <MX_ADC1_Init+0x9c>)
 80007c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000848 <MX_ADC1_Init+0x98>)
 80007ca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80007ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000848 <MX_ADC1_Init+0x98>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000848 <MX_ADC1_Init+0x98>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000848 <MX_ADC1_Init+0x98>)
 80007de:	2200      	movs	r2, #0
 80007e0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007e2:	4b19      	ldr	r3, [pc, #100]	@ (8000848 <MX_ADC1_Init+0x98>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ea:	4b17      	ldr	r3, [pc, #92]	@ (8000848 <MX_ADC1_Init+0x98>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f0:	4b15      	ldr	r3, [pc, #84]	@ (8000848 <MX_ADC1_Init+0x98>)
 80007f2:	4a17      	ldr	r2, [pc, #92]	@ (8000850 <MX_ADC1_Init+0xa0>)
 80007f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007f6:	4b14      	ldr	r3, [pc, #80]	@ (8000848 <MX_ADC1_Init+0x98>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007fc:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <MX_ADC1_Init+0x98>)
 80007fe:	2201      	movs	r2, #1
 8000800:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000802:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <MX_ADC1_Init+0x98>)
 8000804:	2200      	movs	r2, #0
 8000806:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800080a:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <MX_ADC1_Init+0x98>)
 800080c:	2201      	movs	r2, #1
 800080e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000810:	480d      	ldr	r0, [pc, #52]	@ (8000848 <MX_ADC1_Init+0x98>)
 8000812:	f000 fc05 	bl	8001020 <HAL_ADC_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800081c:	f000 f984 	bl	8000b28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000820:	2309      	movs	r3, #9
 8000822:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000824:	2301      	movs	r3, #1
 8000826:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000828:	2300      	movs	r3, #0
 800082a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082c:	463b      	mov	r3, r7
 800082e:	4619      	mov	r1, r3
 8000830:	4805      	ldr	r0, [pc, #20]	@ (8000848 <MX_ADC1_Init+0x98>)
 8000832:	f000 fc39 	bl	80010a8 <HAL_ADC_ConfigChannel>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800083c:	f000 f974 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000028 	.word	0x20000028
 800084c:	40012000 	.word	0x40012000
 8000850:	0f000001 	.word	0x0f000001

08000854 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000858:	4b17      	ldr	r3, [pc, #92]	@ (80008b8 <MX_SPI1_Init+0x64>)
 800085a:	4a18      	ldr	r2, [pc, #96]	@ (80008bc <MX_SPI1_Init+0x68>)
 800085c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800085e:	4b16      	ldr	r3, [pc, #88]	@ (80008b8 <MX_SPI1_Init+0x64>)
 8000860:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000864:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000866:	4b14      	ldr	r3, [pc, #80]	@ (80008b8 <MX_SPI1_Init+0x64>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800086c:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <MX_SPI1_Init+0x64>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000872:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <MX_SPI1_Init+0x64>)
 8000874:	2202      	movs	r2, #2
 8000876:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000878:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <MX_SPI1_Init+0x64>)
 800087a:	2200      	movs	r2, #0
 800087c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800087e:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <MX_SPI1_Init+0x64>)
 8000880:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000884:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000886:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <MX_SPI1_Init+0x64>)
 8000888:	2230      	movs	r2, #48	@ 0x30
 800088a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800088c:	4b0a      	ldr	r3, [pc, #40]	@ (80008b8 <MX_SPI1_Init+0x64>)
 800088e:	2200      	movs	r2, #0
 8000890:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000892:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <MX_SPI1_Init+0x64>)
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000898:	4b07      	ldr	r3, [pc, #28]	@ (80008b8 <MX_SPI1_Init+0x64>)
 800089a:	2200      	movs	r2, #0
 800089c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800089e:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <MX_SPI1_Init+0x64>)
 80008a0:	220a      	movs	r2, #10
 80008a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008a4:	4804      	ldr	r0, [pc, #16]	@ (80008b8 <MX_SPI1_Init+0x64>)
 80008a6:	f002 fb6b 	bl	8002f80 <HAL_SPI_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008b0:	f000 f93a 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000070 	.word	0x20000070
 80008bc:	40013000 	.word	0x40013000

080008c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008c4:	4b11      	ldr	r3, [pc, #68]	@ (800090c <MX_USART3_UART_Init+0x4c>)
 80008c6:	4a12      	ldr	r2, [pc, #72]	@ (8000910 <MX_USART3_UART_Init+0x50>)
 80008c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ca:	4b10      	ldr	r3, [pc, #64]	@ (800090c <MX_USART3_UART_Init+0x4c>)
 80008cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	@ (800090c <MX_USART3_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <MX_USART3_UART_Init+0x4c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008de:	4b0b      	ldr	r3, [pc, #44]	@ (800090c <MX_USART3_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008e4:	4b09      	ldr	r3, [pc, #36]	@ (800090c <MX_USART3_UART_Init+0x4c>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ea:	4b08      	ldr	r3, [pc, #32]	@ (800090c <MX_USART3_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f0:	4b06      	ldr	r3, [pc, #24]	@ (800090c <MX_USART3_UART_Init+0x4c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008f6:	4805      	ldr	r0, [pc, #20]	@ (800090c <MX_USART3_UART_Init+0x4c>)
 80008f8:	f002 fdec 	bl	80034d4 <HAL_UART_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000902:	f000 f911 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200000c8 	.word	0x200000c8
 8000910:	40004800 	.word	0x40004800

08000914 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000918:	4b14      	ldr	r3, [pc, #80]	@ (800096c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800091e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000920:	4b12      	ldr	r3, [pc, #72]	@ (800096c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000922:	2206      	movs	r2, #6
 8000924:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000926:	4b11      	ldr	r3, [pc, #68]	@ (800096c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000928:	2202      	movs	r2, #2
 800092a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800092c:	4b0f      	ldr	r3, [pc, #60]	@ (800096c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092e:	2200      	movs	r2, #0
 8000930:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000932:	4b0e      	ldr	r3, [pc, #56]	@ (800096c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000934:	2202      	movs	r2, #2
 8000936:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000938:	4b0c      	ldr	r3, [pc, #48]	@ (800096c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093a:	2201      	movs	r2, #1
 800093c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800093e:	4b0b      	ldr	r3, [pc, #44]	@ (800096c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000944:	4b09      	ldr	r3, [pc, #36]	@ (800096c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000946:	2200      	movs	r2, #0
 8000948:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800094a:	4b08      	ldr	r3, [pc, #32]	@ (800096c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094c:	2201      	movs	r2, #1
 800094e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000950:	4b06      	ldr	r3, [pc, #24]	@ (800096c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000956:	4805      	ldr	r0, [pc, #20]	@ (800096c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000958:	f001 f8c6 	bl	8001ae8 <HAL_PCD_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000962:	f000 f8e1 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000110 	.word	0x20000110

08000970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08c      	sub	sp, #48	@ 0x30
 8000974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	61bb      	str	r3, [r7, #24]
 800098a:	4b5a      	ldr	r3, [pc, #360]	@ (8000af4 <MX_GPIO_Init+0x184>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4a59      	ldr	r2, [pc, #356]	@ (8000af4 <MX_GPIO_Init+0x184>)
 8000990:	f043 0304 	orr.w	r3, r3, #4
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
 8000996:	4b57      	ldr	r3, [pc, #348]	@ (8000af4 <MX_GPIO_Init+0x184>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	f003 0304 	and.w	r3, r3, #4
 800099e:	61bb      	str	r3, [r7, #24]
 80009a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
 80009a6:	4b53      	ldr	r3, [pc, #332]	@ (8000af4 <MX_GPIO_Init+0x184>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a52      	ldr	r2, [pc, #328]	@ (8000af4 <MX_GPIO_Init+0x184>)
 80009ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b50      	ldr	r3, [pc, #320]	@ (8000af4 <MX_GPIO_Init+0x184>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	4b4c      	ldr	r3, [pc, #304]	@ (8000af4 <MX_GPIO_Init+0x184>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	4a4b      	ldr	r2, [pc, #300]	@ (8000af4 <MX_GPIO_Init+0x184>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ce:	4b49      	ldr	r3, [pc, #292]	@ (8000af4 <MX_GPIO_Init+0x184>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	4b45      	ldr	r3, [pc, #276]	@ (8000af4 <MX_GPIO_Init+0x184>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	4a44      	ldr	r2, [pc, #272]	@ (8000af4 <MX_GPIO_Init+0x184>)
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ea:	4b42      	ldr	r3, [pc, #264]	@ (8000af4 <MX_GPIO_Init+0x184>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	4b3e      	ldr	r3, [pc, #248]	@ (8000af4 <MX_GPIO_Init+0x184>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	4a3d      	ldr	r2, [pc, #244]	@ (8000af4 <MX_GPIO_Init+0x184>)
 8000a00:	f043 0308 	orr.w	r3, r3, #8
 8000a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a06:	4b3b      	ldr	r3, [pc, #236]	@ (8000af4 <MX_GPIO_Init+0x184>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	f003 0308 	and.w	r3, r3, #8
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	4b37      	ldr	r3, [pc, #220]	@ (8000af4 <MX_GPIO_Init+0x184>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	4a36      	ldr	r2, [pc, #216]	@ (8000af4 <MX_GPIO_Init+0x184>)
 8000a1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a22:	4b34      	ldr	r3, [pc, #208]	@ (8000af4 <MX_GPIO_Init+0x184>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000a34:	4830      	ldr	r0, [pc, #192]	@ (8000af8 <MX_GPIO_Init+0x188>)
 8000a36:	f001 f80b 	bl	8001a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a40:	482e      	ldr	r0, [pc, #184]	@ (8000afc <MX_GPIO_Init+0x18c>)
 8000a42:	f001 f805 	bl	8001a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2140      	movs	r1, #64	@ 0x40
 8000a4a:	482d      	ldr	r0, [pc, #180]	@ (8000b00 <MX_GPIO_Init+0x190>)
 8000a4c:	f001 f800 	bl	8001a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a56:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	4619      	mov	r1, r3
 8000a66:	4827      	ldr	r0, [pc, #156]	@ (8000b04 <MX_GPIO_Init+0x194>)
 8000a68:	f000 fe5e 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a6c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	481c      	ldr	r0, [pc, #112]	@ (8000af8 <MX_GPIO_Init+0x188>)
 8000a86:	f000 fe4f 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pin : AD9833_NCS_Pin */
  GPIO_InitStruct.Pin = AD9833_NCS_Pin;
 8000a8a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AD9833_NCS_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4816      	ldr	r0, [pc, #88]	@ (8000afc <MX_GPIO_Init+0x18c>)
 8000aa4:	f000 fe40 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000aa8:	2340      	movs	r3, #64	@ 0x40
 8000aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	4810      	ldr	r0, [pc, #64]	@ (8000b00 <MX_GPIO_Init+0x190>)
 8000ac0:	f000 fe32 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ac4:	2380      	movs	r3, #128	@ 0x80
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	480a      	ldr	r0, [pc, #40]	@ (8000b00 <MX_GPIO_Init+0x190>)
 8000ad8:	f000 fe26 	bl	8001728 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2028      	movs	r0, #40	@ 0x28
 8000ae2:	f000 fdea 	bl	80016ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ae6:	2028      	movs	r0, #40	@ 0x28
 8000ae8:	f000 fe03 	bl	80016f2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aec:	bf00      	nop
 8000aee:	3730      	adds	r7, #48	@ 0x30
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40020400 	.word	0x40020400
 8000afc:	40020c00 	.word	0x40020c00
 8000b00:	40021800 	.word	0x40021800
 8000b04:	40020800 	.word	0x40020800

08000b08 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin);
 8000b12:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000b16:	4803      	ldr	r0, [pc, #12]	@ (8000b24 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000b18:	f000 ffb3 	bl	8001a82 <HAL_GPIO_TogglePin>
}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40020400 	.word	0x40020400

08000b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
}
 8000b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <Error_Handler+0x8>

08000b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	4b10      	ldr	r3, [pc, #64]	@ (8000b80 <HAL_MspInit+0x4c>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b42:	4a0f      	ldr	r2, [pc, #60]	@ (8000b80 <HAL_MspInit+0x4c>)
 8000b44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b80 <HAL_MspInit+0x4c>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	603b      	str	r3, [r7, #0]
 8000b5a:	4b09      	ldr	r3, [pc, #36]	@ (8000b80 <HAL_MspInit+0x4c>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5e:	4a08      	ldr	r2, [pc, #32]	@ (8000b80 <HAL_MspInit+0x4c>)
 8000b60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b66:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <HAL_MspInit+0x4c>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800

08000b84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	@ 0x28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a17      	ldr	r2, [pc, #92]	@ (8000c00 <HAL_ADC_MspInit+0x7c>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d127      	bne.n	8000bf6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	4b16      	ldr	r3, [pc, #88]	@ (8000c04 <HAL_ADC_MspInit+0x80>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bae:	4a15      	ldr	r2, [pc, #84]	@ (8000c04 <HAL_ADC_MspInit+0x80>)
 8000bb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bb6:	4b13      	ldr	r3, [pc, #76]	@ (8000c04 <HAL_ADC_MspInit+0x80>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8000c04 <HAL_ADC_MspInit+0x80>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	4a0e      	ldr	r2, [pc, #56]	@ (8000c04 <HAL_ADC_MspInit+0x80>)
 8000bcc:	f043 0302 	orr.w	r3, r3, #2
 8000bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c04 <HAL_ADC_MspInit+0x80>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bde:	2302      	movs	r3, #2
 8000be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000be2:	2303      	movs	r3, #3
 8000be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4805      	ldr	r0, [pc, #20]	@ (8000c08 <HAL_ADC_MspInit+0x84>)
 8000bf2:	f000 fd99 	bl	8001728 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000bf6:	bf00      	nop
 8000bf8:	3728      	adds	r7, #40	@ 0x28
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40012000 	.word	0x40012000
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020400 	.word	0x40020400

08000c0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08a      	sub	sp, #40	@ 0x28
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a19      	ldr	r2, [pc, #100]	@ (8000c90 <HAL_SPI_MspInit+0x84>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d12b      	bne.n	8000c86 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	4b18      	ldr	r3, [pc, #96]	@ (8000c94 <HAL_SPI_MspInit+0x88>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c36:	4a17      	ldr	r2, [pc, #92]	@ (8000c94 <HAL_SPI_MspInit+0x88>)
 8000c38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c3e:	4b15      	ldr	r3, [pc, #84]	@ (8000c94 <HAL_SPI_MspInit+0x88>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <HAL_SPI_MspInit+0x88>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	4a10      	ldr	r2, [pc, #64]	@ (8000c94 <HAL_SPI_MspInit+0x88>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c94 <HAL_SPI_MspInit+0x88>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c66:	23e0      	movs	r3, #224	@ 0xe0
 8000c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c76:	2305      	movs	r3, #5
 8000c78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4805      	ldr	r0, [pc, #20]	@ (8000c98 <HAL_SPI_MspInit+0x8c>)
 8000c82:	f000 fd51 	bl	8001728 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000c86:	bf00      	nop
 8000c88:	3728      	adds	r7, #40	@ 0x28
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40013000 	.word	0x40013000
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020000 	.word	0x40020000

08000c9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	@ 0x28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a19      	ldr	r2, [pc, #100]	@ (8000d20 <HAL_UART_MspInit+0x84>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d12c      	bne.n	8000d18 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	4b18      	ldr	r3, [pc, #96]	@ (8000d24 <HAL_UART_MspInit+0x88>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc6:	4a17      	ldr	r2, [pc, #92]	@ (8000d24 <HAL_UART_MspInit+0x88>)
 8000cc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ccc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cce:	4b15      	ldr	r3, [pc, #84]	@ (8000d24 <HAL_UART_MspInit+0x88>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	4b11      	ldr	r3, [pc, #68]	@ (8000d24 <HAL_UART_MspInit+0x88>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	4a10      	ldr	r2, [pc, #64]	@ (8000d24 <HAL_UART_MspInit+0x88>)
 8000ce4:	f043 0308 	orr.w	r3, r3, #8
 8000ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cea:	4b0e      	ldr	r3, [pc, #56]	@ (8000d24 <HAL_UART_MspInit+0x88>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	f003 0308 	and.w	r3, r3, #8
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cf6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d04:	2303      	movs	r3, #3
 8000d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d08:	2307      	movs	r3, #7
 8000d0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4619      	mov	r1, r3
 8000d12:	4805      	ldr	r0, [pc, #20]	@ (8000d28 <HAL_UART_MspInit+0x8c>)
 8000d14:	f000 fd08 	bl	8001728 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000d18:	bf00      	nop
 8000d1a:	3728      	adds	r7, #40	@ 0x28
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40004800 	.word	0x40004800
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40020c00 	.word	0x40020c00

08000d2c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b0a0      	sub	sp, #128	@ 0x80
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d44:	f107 0310 	add.w	r3, r7, #16
 8000d48:	225c      	movs	r2, #92	@ 0x5c
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f003 f97e 	bl	800404e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d5a:	d14e      	bne.n	8000dfa <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000d5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d60:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000d62:	2300      	movs	r3, #0
 8000d64:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d66:	f107 0310 	add.w	r3, r7, #16
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f001 f910 	bl	8001f90 <HAL_RCCEx_PeriphCLKConfig>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000d76:	f7ff fed7 	bl	8000b28 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	4b21      	ldr	r3, [pc, #132]	@ (8000e04 <HAL_PCD_MspInit+0xd8>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	4a20      	ldr	r2, [pc, #128]	@ (8000e04 <HAL_PCD_MspInit+0xd8>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000e04 <HAL_PCD_MspInit+0xd8>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d96:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000d9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000da8:	230a      	movs	r3, #10
 8000daa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000db0:	4619      	mov	r1, r3
 8000db2:	4815      	ldr	r0, [pc, #84]	@ (8000e08 <HAL_PCD_MspInit+0xdc>)
 8000db4:	f000 fcb8 	bl	8001728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000db8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000dc6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000dca:	4619      	mov	r1, r3
 8000dcc:	480e      	ldr	r0, [pc, #56]	@ (8000e08 <HAL_PCD_MspInit+0xdc>)
 8000dce:	f000 fcab 	bl	8001728 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e04 <HAL_PCD_MspInit+0xd8>)
 8000dd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dd6:	4a0b      	ldr	r2, [pc, #44]	@ (8000e04 <HAL_PCD_MspInit+0xd8>)
 8000dd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ddc:	6353      	str	r3, [r2, #52]	@ 0x34
 8000dde:	2300      	movs	r3, #0
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <HAL_PCD_MspInit+0xd8>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de6:	4a07      	ldr	r2, [pc, #28]	@ (8000e04 <HAL_PCD_MspInit+0xd8>)
 8000de8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dee:	4b05      	ldr	r3, [pc, #20]	@ (8000e04 <HAL_PCD_MspInit+0xd8>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000dfa:	bf00      	nop
 8000dfc:	3780      	adds	r7, #128	@ 0x80
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40020000 	.word	0x40020000

08000e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <NMI_Handler+0x4>

08000e14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <HardFault_Handler+0x4>

08000e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <MemManage_Handler+0x4>

08000e24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <BusFault_Handler+0x4>

08000e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <UsageFault_Handler+0x4>

08000e34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e62:	f000 f899 	bl	8000f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000e6e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000e72:	f000 fe21 	bl	8001ab8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e80:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <SystemInit+0x20>)
 8000e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e86:	4a05      	ldr	r2, [pc, #20]	@ (8000e9c <SystemInit+0x20>)
 8000e88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ea0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ed8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ea4:	f7ff ffea 	bl	8000e7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ea8:	480c      	ldr	r0, [pc, #48]	@ (8000edc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eaa:	490d      	ldr	r1, [pc, #52]	@ (8000ee0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000eac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb0:	e002      	b.n	8000eb8 <LoopCopyDataInit>

08000eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb6:	3304      	adds	r3, #4

08000eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ebc:	d3f9      	bcc.n	8000eb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ec0:	4c0a      	ldr	r4, [pc, #40]	@ (8000eec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec4:	e001      	b.n	8000eca <LoopFillZerobss>

08000ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec8:	3204      	adds	r2, #4

08000eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ecc:	d3fb      	bcc.n	8000ec6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ece:	f003 f8c7 	bl	8004060 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ed2:	f7ff fbd5 	bl	8000680 <main>
  bx  lr    
 8000ed6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ed8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ee4:	080040e8 	.word	0x080040e8
  ldr r2, =_sbss
 8000ee8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000eec:	200005f8 	.word	0x200005f8

08000ef0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef0:	e7fe      	b.n	8000ef0 <ADC_IRQHandler>
	...

08000ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f34 <HAL_Init+0x40>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0d      	ldr	r2, [pc, #52]	@ (8000f34 <HAL_Init+0x40>)
 8000efe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f04:	4b0b      	ldr	r3, [pc, #44]	@ (8000f34 <HAL_Init+0x40>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0a      	ldr	r2, [pc, #40]	@ (8000f34 <HAL_Init+0x40>)
 8000f0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f10:	4b08      	ldr	r3, [pc, #32]	@ (8000f34 <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a07      	ldr	r2, [pc, #28]	@ (8000f34 <HAL_Init+0x40>)
 8000f16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	f000 fbc1 	bl	80016a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f22:	2000      	movs	r0, #0
 8000f24:	f000 f808 	bl	8000f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f28:	f7ff fe04 	bl	8000b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40023c00 	.word	0x40023c00

08000f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f40:	4b12      	ldr	r3, [pc, #72]	@ (8000f8c <HAL_InitTick+0x54>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <HAL_InitTick+0x58>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 fbd9 	bl	800170e <HAL_SYSTICK_Config>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e00e      	b.n	8000f84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b0f      	cmp	r3, #15
 8000f6a:	d80a      	bhi.n	8000f82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	f04f 30ff 	mov.w	r0, #4294967295
 8000f74:	f000 fba1 	bl	80016ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f78:	4a06      	ldr	r2, [pc, #24]	@ (8000f94 <HAL_InitTick+0x5c>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e000      	b.n	8000f84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	20000008 	.word	0x20000008
 8000f94:	20000004 	.word	0x20000004

08000f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <HAL_IncTick+0x20>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <HAL_IncTick+0x24>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	4a04      	ldr	r2, [pc, #16]	@ (8000fbc <HAL_IncTick+0x24>)
 8000faa:	6013      	str	r3, [r2, #0]
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000008 	.word	0x20000008
 8000fbc:	200005f4 	.word	0x200005f4

08000fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc4:	4b03      	ldr	r3, [pc, #12]	@ (8000fd4 <HAL_GetTick+0x14>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	200005f4 	.word	0x200005f4

08000fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe0:	f7ff ffee 	bl	8000fc0 <HAL_GetTick>
 8000fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff0:	d005      	beq.n	8000ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800101c <HAL_Delay+0x44>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ffe:	bf00      	nop
 8001000:	f7ff ffde 	bl	8000fc0 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	429a      	cmp	r2, r3
 800100e:	d8f7      	bhi.n	8001000 <HAL_Delay+0x28>
  {
  }
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000008 	.word	0x20000008

08001020 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001028:	2300      	movs	r3, #0
 800102a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e033      	b.n	800109e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103a:	2b00      	cmp	r3, #0
 800103c:	d109      	bne.n	8001052 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff fda0 	bl	8000b84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001056:	f003 0310 	and.w	r3, r3, #16
 800105a:	2b00      	cmp	r3, #0
 800105c:	d118      	bne.n	8001090 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001062:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001066:	f023 0302 	bic.w	r3, r3, #2
 800106a:	f043 0202 	orr.w	r2, r3, #2
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 f94a 	bl	800130c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001082:	f023 0303 	bic.w	r3, r3, #3
 8001086:	f043 0201 	orr.w	r2, r3, #1
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	641a      	str	r2, [r3, #64]	@ 0x40
 800108e:	e001      	b.n	8001094 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800109c:	7bfb      	ldrb	r3, [r7, #15]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d101      	bne.n	80010c4 <HAL_ADC_ConfigChannel+0x1c>
 80010c0:	2302      	movs	r3, #2
 80010c2:	e113      	b.n	80012ec <HAL_ADC_ConfigChannel+0x244>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2201      	movs	r2, #1
 80010c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b09      	cmp	r3, #9
 80010d2:	d925      	bls.n	8001120 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	68d9      	ldr	r1, [r3, #12]
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	461a      	mov	r2, r3
 80010e2:	4613      	mov	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4413      	add	r3, r2
 80010e8:	3b1e      	subs	r3, #30
 80010ea:	2207      	movs	r2, #7
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43da      	mvns	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	400a      	ands	r2, r1
 80010f8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	68d9      	ldr	r1, [r3, #12]
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	b29b      	uxth	r3, r3
 800110a:	4618      	mov	r0, r3
 800110c:	4603      	mov	r3, r0
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4403      	add	r3, r0
 8001112:	3b1e      	subs	r3, #30
 8001114:	409a      	lsls	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	430a      	orrs	r2, r1
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	e022      	b.n	8001166 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6919      	ldr	r1, [r3, #16]
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	b29b      	uxth	r3, r3
 800112c:	461a      	mov	r2, r3
 800112e:	4613      	mov	r3, r2
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	4413      	add	r3, r2
 8001134:	2207      	movs	r2, #7
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43da      	mvns	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	400a      	ands	r2, r1
 8001142:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	6919      	ldr	r1, [r3, #16]
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	b29b      	uxth	r3, r3
 8001154:	4618      	mov	r0, r3
 8001156:	4603      	mov	r3, r0
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	4403      	add	r3, r0
 800115c:	409a      	lsls	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	430a      	orrs	r2, r1
 8001164:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2b06      	cmp	r3, #6
 800116c:	d824      	bhi.n	80011b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	4613      	mov	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	3b05      	subs	r3, #5
 8001180:	221f      	movs	r2, #31
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43da      	mvns	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	400a      	ands	r2, r1
 800118e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	b29b      	uxth	r3, r3
 800119c:	4618      	mov	r0, r3
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	4613      	mov	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	3b05      	subs	r3, #5
 80011aa:	fa00 f203 	lsl.w	r2, r0, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	430a      	orrs	r2, r1
 80011b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80011b6:	e04c      	b.n	8001252 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b0c      	cmp	r3, #12
 80011be:	d824      	bhi.n	800120a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	4613      	mov	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	3b23      	subs	r3, #35	@ 0x23
 80011d2:	221f      	movs	r2, #31
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43da      	mvns	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	400a      	ands	r2, r1
 80011e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	4618      	mov	r0, r3
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	4613      	mov	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	3b23      	subs	r3, #35	@ 0x23
 80011fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	430a      	orrs	r2, r1
 8001206:	631a      	str	r2, [r3, #48]	@ 0x30
 8001208:	e023      	b.n	8001252 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685a      	ldr	r2, [r3, #4]
 8001214:	4613      	mov	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	3b41      	subs	r3, #65	@ 0x41
 800121c:	221f      	movs	r2, #31
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43da      	mvns	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	400a      	ands	r2, r1
 800122a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	b29b      	uxth	r3, r3
 8001238:	4618      	mov	r0, r3
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	4613      	mov	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	3b41      	subs	r3, #65	@ 0x41
 8001246:	fa00 f203 	lsl.w	r2, r0, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	430a      	orrs	r2, r1
 8001250:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001252:	4b29      	ldr	r3, [pc, #164]	@ (80012f8 <HAL_ADC_ConfigChannel+0x250>)
 8001254:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a28      	ldr	r2, [pc, #160]	@ (80012fc <HAL_ADC_ConfigChannel+0x254>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d10f      	bne.n	8001280 <HAL_ADC_ConfigChannel+0x1d8>
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b12      	cmp	r3, #18
 8001266:	d10b      	bne.n	8001280 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a1d      	ldr	r2, [pc, #116]	@ (80012fc <HAL_ADC_ConfigChannel+0x254>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d12b      	bne.n	80012e2 <HAL_ADC_ConfigChannel+0x23a>
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a1c      	ldr	r2, [pc, #112]	@ (8001300 <HAL_ADC_ConfigChannel+0x258>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d003      	beq.n	800129c <HAL_ADC_ConfigChannel+0x1f4>
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b11      	cmp	r3, #17
 800129a:	d122      	bne.n	80012e2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a11      	ldr	r2, [pc, #68]	@ (8001300 <HAL_ADC_ConfigChannel+0x258>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d111      	bne.n	80012e2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012be:	4b11      	ldr	r3, [pc, #68]	@ (8001304 <HAL_ADC_ConfigChannel+0x25c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a11      	ldr	r2, [pc, #68]	@ (8001308 <HAL_ADC_ConfigChannel+0x260>)
 80012c4:	fba2 2303 	umull	r2, r3, r2, r3
 80012c8:	0c9a      	lsrs	r2, r3, #18
 80012ca:	4613      	mov	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80012d4:	e002      	b.n	80012dc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	3b01      	subs	r3, #1
 80012da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f9      	bne.n	80012d6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	40012300 	.word	0x40012300
 80012fc:	40012000 	.word	0x40012000
 8001300:	10000012 	.word	0x10000012
 8001304:	20000000 	.word	0x20000000
 8001308:	431bde83 	.word	0x431bde83

0800130c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001314:	4b79      	ldr	r3, [pc, #484]	@ (80014fc <ADC_Init+0x1f0>)
 8001316:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	431a      	orrs	r2, r3
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001340:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6859      	ldr	r1, [r3, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	691b      	ldr	r3, [r3, #16]
 800134c:	021a      	lsls	r2, r3, #8
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001364:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6859      	ldr	r1, [r3, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	430a      	orrs	r2, r1
 8001376:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001386:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6899      	ldr	r1, [r3, #8]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68da      	ldr	r2, [r3, #12]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	430a      	orrs	r2, r1
 8001398:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800139e:	4a58      	ldr	r2, [pc, #352]	@ (8001500 <ADC_Init+0x1f4>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d022      	beq.n	80013ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	689a      	ldr	r2, [r3, #8]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80013b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6899      	ldr	r1, [r3, #8]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	430a      	orrs	r2, r1
 80013c4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80013d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6899      	ldr	r1, [r3, #8]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	e00f      	b.n	800140a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80013f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001408:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f022 0202 	bic.w	r2, r2, #2
 8001418:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6899      	ldr	r1, [r3, #8]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	7e1b      	ldrb	r3, [r3, #24]
 8001424:	005a      	lsls	r2, r3, #1
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d01b      	beq.n	8001470 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001446:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001456:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6859      	ldr	r1, [r3, #4]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001462:	3b01      	subs	r3, #1
 8001464:	035a      	lsls	r2, r3, #13
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	e007      	b.n	8001480 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800147e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800148e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	3b01      	subs	r3, #1
 800149c:	051a      	lsls	r2, r3, #20
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80014b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6899      	ldr	r1, [r3, #8]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80014c2:	025a      	lsls	r2, r3, #9
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	430a      	orrs	r2, r1
 80014ca:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80014da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6899      	ldr	r1, [r3, #8]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	029a      	lsls	r2, r3, #10
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	609a      	str	r2, [r3, #8]
}
 80014f0:	bf00      	nop
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	40012300 	.word	0x40012300
 8001500:	0f000001 	.word	0x0f000001

08001504 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001514:	4b0c      	ldr	r3, [pc, #48]	@ (8001548 <__NVIC_SetPriorityGrouping+0x44>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001520:	4013      	ands	r3, r2
 8001522:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800152c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001530:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001536:	4a04      	ldr	r2, [pc, #16]	@ (8001548 <__NVIC_SetPriorityGrouping+0x44>)
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	60d3      	str	r3, [r2, #12]
}
 800153c:	bf00      	nop
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001550:	4b04      	ldr	r3, [pc, #16]	@ (8001564 <__NVIC_GetPriorityGrouping+0x18>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	0a1b      	lsrs	r3, r3, #8
 8001556:	f003 0307 	and.w	r3, r3, #7
}
 800155a:	4618      	mov	r0, r3
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	2b00      	cmp	r3, #0
 8001578:	db0b      	blt.n	8001592 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	f003 021f 	and.w	r2, r3, #31
 8001580:	4907      	ldr	r1, [pc, #28]	@ (80015a0 <__NVIC_EnableIRQ+0x38>)
 8001582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001586:	095b      	lsrs	r3, r3, #5
 8001588:	2001      	movs	r0, #1
 800158a:	fa00 f202 	lsl.w	r2, r0, r2
 800158e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	e000e100 	.word	0xe000e100

080015a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	6039      	str	r1, [r7, #0]
 80015ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	db0a      	blt.n	80015ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	b2da      	uxtb	r2, r3
 80015bc:	490c      	ldr	r1, [pc, #48]	@ (80015f0 <__NVIC_SetPriority+0x4c>)
 80015be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c2:	0112      	lsls	r2, r2, #4
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	440b      	add	r3, r1
 80015c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015cc:	e00a      	b.n	80015e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	4908      	ldr	r1, [pc, #32]	@ (80015f4 <__NVIC_SetPriority+0x50>)
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	f003 030f 	and.w	r3, r3, #15
 80015da:	3b04      	subs	r3, #4
 80015dc:	0112      	lsls	r2, r2, #4
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	440b      	add	r3, r1
 80015e2:	761a      	strb	r2, [r3, #24]
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	e000e100 	.word	0xe000e100
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b089      	sub	sp, #36	@ 0x24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	f1c3 0307 	rsb	r3, r3, #7
 8001612:	2b04      	cmp	r3, #4
 8001614:	bf28      	it	cs
 8001616:	2304      	movcs	r3, #4
 8001618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	3304      	adds	r3, #4
 800161e:	2b06      	cmp	r3, #6
 8001620:	d902      	bls.n	8001628 <NVIC_EncodePriority+0x30>
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	3b03      	subs	r3, #3
 8001626:	e000      	b.n	800162a <NVIC_EncodePriority+0x32>
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800162c:	f04f 32ff 	mov.w	r2, #4294967295
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43da      	mvns	r2, r3
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	401a      	ands	r2, r3
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001640:	f04f 31ff 	mov.w	r1, #4294967295
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	fa01 f303 	lsl.w	r3, r1, r3
 800164a:	43d9      	mvns	r1, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001650:	4313      	orrs	r3, r2
         );
}
 8001652:	4618      	mov	r0, r3
 8001654:	3724      	adds	r7, #36	@ 0x24
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
	...

08001660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3b01      	subs	r3, #1
 800166c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001670:	d301      	bcc.n	8001676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001672:	2301      	movs	r3, #1
 8001674:	e00f      	b.n	8001696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001676:	4a0a      	ldr	r2, [pc, #40]	@ (80016a0 <SysTick_Config+0x40>)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3b01      	subs	r3, #1
 800167c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800167e:	210f      	movs	r1, #15
 8001680:	f04f 30ff 	mov.w	r0, #4294967295
 8001684:	f7ff ff8e 	bl	80015a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001688:	4b05      	ldr	r3, [pc, #20]	@ (80016a0 <SysTick_Config+0x40>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800168e:	4b04      	ldr	r3, [pc, #16]	@ (80016a0 <SysTick_Config+0x40>)
 8001690:	2207      	movs	r2, #7
 8001692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	e000e010 	.word	0xe000e010

080016a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff ff29 	bl	8001504 <__NVIC_SetPriorityGrouping>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b086      	sub	sp, #24
 80016be:	af00      	add	r7, sp, #0
 80016c0:	4603      	mov	r3, r0
 80016c2:	60b9      	str	r1, [r7, #8]
 80016c4:	607a      	str	r2, [r7, #4]
 80016c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016cc:	f7ff ff3e 	bl	800154c <__NVIC_GetPriorityGrouping>
 80016d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	68b9      	ldr	r1, [r7, #8]
 80016d6:	6978      	ldr	r0, [r7, #20]
 80016d8:	f7ff ff8e 	bl	80015f8 <NVIC_EncodePriority>
 80016dc:	4602      	mov	r2, r0
 80016de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e2:	4611      	mov	r1, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff5d 	bl	80015a4 <__NVIC_SetPriority>
}
 80016ea:	bf00      	nop
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	4603      	mov	r3, r0
 80016fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff31 	bl	8001568 <__NVIC_EnableIRQ>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff ffa2 	bl	8001660 <SysTick_Config>
 800171c:	4603      	mov	r3, r0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001728:	b480      	push	{r7}
 800172a:	b089      	sub	sp, #36	@ 0x24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800173a:	2300      	movs	r3, #0
 800173c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
 8001742:	e165      	b.n	8001a10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001744:	2201      	movs	r2, #1
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	4013      	ands	r3, r2
 8001756:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	429a      	cmp	r2, r3
 800175e:	f040 8154 	bne.w	8001a0a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	2b01      	cmp	r3, #1
 800176c:	d005      	beq.n	800177a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001776:	2b02      	cmp	r3, #2
 8001778:	d130      	bne.n	80017dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	2203      	movs	r2, #3
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43db      	mvns	r3, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4013      	ands	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	68da      	ldr	r2, [r3, #12]
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017b0:	2201      	movs	r2, #1
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	091b      	lsrs	r3, r3, #4
 80017c6:	f003 0201 	and.w	r2, r3, #1
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	2b03      	cmp	r3, #3
 80017e6:	d017      	beq.n	8001818 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	2203      	movs	r2, #3
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d123      	bne.n	800186c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	08da      	lsrs	r2, r3, #3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3208      	adds	r2, #8
 800182c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001830:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	220f      	movs	r2, #15
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	691a      	ldr	r2, [r3, #16]
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	08da      	lsrs	r2, r3, #3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	3208      	adds	r2, #8
 8001866:	69b9      	ldr	r1, [r7, #24]
 8001868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	2203      	movs	r2, #3
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 0203 	and.w	r2, r3, #3
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 80ae 	beq.w	8001a0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	4b5d      	ldr	r3, [pc, #372]	@ (8001a28 <HAL_GPIO_Init+0x300>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b6:	4a5c      	ldr	r2, [pc, #368]	@ (8001a28 <HAL_GPIO_Init+0x300>)
 80018b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80018be:	4b5a      	ldr	r3, [pc, #360]	@ (8001a28 <HAL_GPIO_Init+0x300>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ca:	4a58      	ldr	r2, [pc, #352]	@ (8001a2c <HAL_GPIO_Init+0x304>)
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	089b      	lsrs	r3, r3, #2
 80018d0:	3302      	adds	r3, #2
 80018d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f003 0303 	and.w	r3, r3, #3
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	220f      	movs	r2, #15
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4013      	ands	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a4f      	ldr	r2, [pc, #316]	@ (8001a30 <HAL_GPIO_Init+0x308>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d025      	beq.n	8001942 <HAL_GPIO_Init+0x21a>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a4e      	ldr	r2, [pc, #312]	@ (8001a34 <HAL_GPIO_Init+0x30c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d01f      	beq.n	800193e <HAL_GPIO_Init+0x216>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a4d      	ldr	r2, [pc, #308]	@ (8001a38 <HAL_GPIO_Init+0x310>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d019      	beq.n	800193a <HAL_GPIO_Init+0x212>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a4c      	ldr	r2, [pc, #304]	@ (8001a3c <HAL_GPIO_Init+0x314>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d013      	beq.n	8001936 <HAL_GPIO_Init+0x20e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a4b      	ldr	r2, [pc, #300]	@ (8001a40 <HAL_GPIO_Init+0x318>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d00d      	beq.n	8001932 <HAL_GPIO_Init+0x20a>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a4a      	ldr	r2, [pc, #296]	@ (8001a44 <HAL_GPIO_Init+0x31c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d007      	beq.n	800192e <HAL_GPIO_Init+0x206>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a49      	ldr	r2, [pc, #292]	@ (8001a48 <HAL_GPIO_Init+0x320>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d101      	bne.n	800192a <HAL_GPIO_Init+0x202>
 8001926:	2306      	movs	r3, #6
 8001928:	e00c      	b.n	8001944 <HAL_GPIO_Init+0x21c>
 800192a:	2307      	movs	r3, #7
 800192c:	e00a      	b.n	8001944 <HAL_GPIO_Init+0x21c>
 800192e:	2305      	movs	r3, #5
 8001930:	e008      	b.n	8001944 <HAL_GPIO_Init+0x21c>
 8001932:	2304      	movs	r3, #4
 8001934:	e006      	b.n	8001944 <HAL_GPIO_Init+0x21c>
 8001936:	2303      	movs	r3, #3
 8001938:	e004      	b.n	8001944 <HAL_GPIO_Init+0x21c>
 800193a:	2302      	movs	r3, #2
 800193c:	e002      	b.n	8001944 <HAL_GPIO_Init+0x21c>
 800193e:	2301      	movs	r3, #1
 8001940:	e000      	b.n	8001944 <HAL_GPIO_Init+0x21c>
 8001942:	2300      	movs	r3, #0
 8001944:	69fa      	ldr	r2, [r7, #28]
 8001946:	f002 0203 	and.w	r2, r2, #3
 800194a:	0092      	lsls	r2, r2, #2
 800194c:	4093      	lsls	r3, r2
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4313      	orrs	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001954:	4935      	ldr	r1, [pc, #212]	@ (8001a2c <HAL_GPIO_Init+0x304>)
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	089b      	lsrs	r3, r3, #2
 800195a:	3302      	adds	r3, #2
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001962:	4b3a      	ldr	r3, [pc, #232]	@ (8001a4c <HAL_GPIO_Init+0x324>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	43db      	mvns	r3, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4013      	ands	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	4313      	orrs	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001986:	4a31      	ldr	r2, [pc, #196]	@ (8001a4c <HAL_GPIO_Init+0x324>)
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800198c:	4b2f      	ldr	r3, [pc, #188]	@ (8001a4c <HAL_GPIO_Init+0x324>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019b0:	4a26      	ldr	r2, [pc, #152]	@ (8001a4c <HAL_GPIO_Init+0x324>)
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019b6:	4b25      	ldr	r3, [pc, #148]	@ (8001a4c <HAL_GPIO_Init+0x324>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	43db      	mvns	r3, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4013      	ands	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019da:	4a1c      	ldr	r2, [pc, #112]	@ (8001a4c <HAL_GPIO_Init+0x324>)
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019e0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a4c <HAL_GPIO_Init+0x324>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a04:	4a11      	ldr	r2, [pc, #68]	@ (8001a4c <HAL_GPIO_Init+0x324>)
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	61fb      	str	r3, [r7, #28]
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	2b0f      	cmp	r3, #15
 8001a14:	f67f ae96 	bls.w	8001744 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a18:	bf00      	nop
 8001a1a:	bf00      	nop
 8001a1c:	3724      	adds	r7, #36	@ 0x24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40013800 	.word	0x40013800
 8001a30:	40020000 	.word	0x40020000
 8001a34:	40020400 	.word	0x40020400
 8001a38:	40020800 	.word	0x40020800
 8001a3c:	40020c00 	.word	0x40020c00
 8001a40:	40021000 	.word	0x40021000
 8001a44:	40021400 	.word	0x40021400
 8001a48:	40021800 	.word	0x40021800
 8001a4c:	40013c00 	.word	0x40013c00

08001a50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	807b      	strh	r3, [r7, #2]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a60:	787b      	ldrb	r3, [r7, #1]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a66:	887a      	ldrh	r2, [r7, #2]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a6c:	e003      	b.n	8001a76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a6e:	887b      	ldrh	r3, [r7, #2]
 8001a70:	041a      	lsls	r2, r3, #16
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	619a      	str	r2, [r3, #24]
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b085      	sub	sp, #20
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a94:	887a      	ldrh	r2, [r7, #2]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	041a      	lsls	r2, r3, #16
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	43d9      	mvns	r1, r3
 8001aa0:	887b      	ldrh	r3, [r7, #2]
 8001aa2:	400b      	ands	r3, r1
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	619a      	str	r2, [r3, #24]
}
 8001aaa:	bf00      	nop
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
	...

08001ab8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ac2:	4b08      	ldr	r3, [pc, #32]	@ (8001ae4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ac4:	695a      	ldr	r2, [r3, #20]
 8001ac6:	88fb      	ldrh	r3, [r7, #6]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d006      	beq.n	8001adc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ace:	4a05      	ldr	r2, [pc, #20]	@ (8001ae4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ad0:	88fb      	ldrh	r3, [r7, #6]
 8001ad2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff f816 	bl	8000b08 <HAL_GPIO_EXTI_Callback>
  }
}
 8001adc:	bf00      	nop
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40013c00 	.word	0x40013c00

08001ae8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af02      	add	r7, sp, #8
 8001aee:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e108      	b.n	8001d0c <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d106      	bne.n	8001b1a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7ff f909 	bl	8000d2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2203      	movs	r2, #3
 8001b1e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b28:	d102      	bne.n	8001b30 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f001 fff5 	bl	8003b24 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	7c1a      	ldrb	r2, [r3, #16]
 8001b42:	f88d 2000 	strb.w	r2, [sp]
 8001b46:	3304      	adds	r3, #4
 8001b48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b4a:	f001 ff87 	bl	8003a5c <USB_CoreInit>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d005      	beq.n	8001b60 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2202      	movs	r2, #2
 8001b58:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e0d5      	b.n	8001d0c <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2100      	movs	r1, #0
 8001b66:	4618      	mov	r0, r3
 8001b68:	f001 ffed 	bl	8003b46 <USB_SetCurrentMode>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d005      	beq.n	8001b7e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2202      	movs	r2, #2
 8001b76:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e0c6      	b.n	8001d0c <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b7e:	2300      	movs	r3, #0
 8001b80:	73fb      	strb	r3, [r7, #15]
 8001b82:	e04a      	b.n	8001c1a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b84:	7bfa      	ldrb	r2, [r7, #15]
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	4413      	add	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	440b      	add	r3, r1
 8001b92:	3315      	adds	r3, #21
 8001b94:	2201      	movs	r2, #1
 8001b96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b98:	7bfa      	ldrb	r2, [r7, #15]
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	3314      	adds	r3, #20
 8001ba8:	7bfa      	ldrb	r2, [r7, #15]
 8001baa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bac:	7bfa      	ldrb	r2, [r7, #15]
 8001bae:	7bfb      	ldrb	r3, [r7, #15]
 8001bb0:	b298      	uxth	r0, r3
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	4413      	add	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	332e      	adds	r3, #46	@ 0x2e
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bc4:	7bfa      	ldrb	r2, [r7, #15]
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4413      	add	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	3318      	adds	r3, #24
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bd8:	7bfa      	ldrb	r2, [r7, #15]
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	331c      	adds	r3, #28
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bec:	7bfa      	ldrb	r2, [r7, #15]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	3320      	adds	r3, #32
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c00:	7bfa      	ldrb	r2, [r7, #15]
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	4613      	mov	r3, r2
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	4413      	add	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	3324      	adds	r3, #36	@ 0x24
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
 8001c16:	3301      	adds	r3, #1
 8001c18:	73fb      	strb	r3, [r7, #15]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	791b      	ldrb	r3, [r3, #4]
 8001c1e:	7bfa      	ldrb	r2, [r7, #15]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d3af      	bcc.n	8001b84 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c24:	2300      	movs	r3, #0
 8001c26:	73fb      	strb	r3, [r7, #15]
 8001c28:	e044      	b.n	8001cb4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c2a:	7bfa      	ldrb	r2, [r7, #15]
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	4413      	add	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	440b      	add	r3, r1
 8001c38:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c40:	7bfa      	ldrb	r2, [r7, #15]
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4613      	mov	r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	4413      	add	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001c52:	7bfa      	ldrb	r2, [r7, #15]
 8001c54:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c56:	7bfa      	ldrb	r2, [r7, #15]
 8001c58:	6879      	ldr	r1, [r7, #4]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	4413      	add	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	440b      	add	r3, r1
 8001c64:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c6c:	7bfa      	ldrb	r2, [r7, #15]
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	4613      	mov	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	4413      	add	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	440b      	add	r3, r1
 8001c7a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c82:	7bfa      	ldrb	r2, [r7, #15]
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	4613      	mov	r3, r2
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	4413      	add	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	440b      	add	r3, r1
 8001c90:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c98:	7bfa      	ldrb	r2, [r7, #15]
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	73fb      	strb	r3, [r7, #15]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	791b      	ldrb	r3, [r3, #4]
 8001cb8:	7bfa      	ldrb	r2, [r7, #15]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d3b5      	bcc.n	8001c2a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6818      	ldr	r0, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	7c1a      	ldrb	r2, [r3, #16]
 8001cc6:	f88d 2000 	strb.w	r2, [sp]
 8001cca:	3304      	adds	r3, #4
 8001ccc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cce:	f001 ff87 	bl	8003be0 <USB_DevInit>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d005      	beq.n	8001ce4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2202      	movs	r2, #2
 8001cdc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e013      	b.n	8001d0c <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	7b1b      	ldrb	r3, [r3, #12]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d102      	bne.n	8001d00 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f80a 	bl	8001d14 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f002 f942 	bl	8003f8e <USB_DevDisconnect>

  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d46:	f043 0303 	orr.w	r3, r3, #3
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e0cc      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d70:	4b68      	ldr	r3, [pc, #416]	@ (8001f14 <HAL_RCC_ClockConfig+0x1b8>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 030f 	and.w	r3, r3, #15
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d90c      	bls.n	8001d98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7e:	4b65      	ldr	r3, [pc, #404]	@ (8001f14 <HAL_RCC_ClockConfig+0x1b8>)
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d86:	4b63      	ldr	r3, [pc, #396]	@ (8001f14 <HAL_RCC_ClockConfig+0x1b8>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d001      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0b8      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d020      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d005      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001db0:	4b59      	ldr	r3, [pc, #356]	@ (8001f18 <HAL_RCC_ClockConfig+0x1bc>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	4a58      	ldr	r2, [pc, #352]	@ (8001f18 <HAL_RCC_ClockConfig+0x1bc>)
 8001db6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001dba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d005      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dc8:	4b53      	ldr	r3, [pc, #332]	@ (8001f18 <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	4a52      	ldr	r2, [pc, #328]	@ (8001f18 <HAL_RCC_ClockConfig+0x1bc>)
 8001dce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001dd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd4:	4b50      	ldr	r3, [pc, #320]	@ (8001f18 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	494d      	ldr	r1, [pc, #308]	@ (8001f18 <HAL_RCC_ClockConfig+0x1bc>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d044      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d107      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfa:	4b47      	ldr	r3, [pc, #284]	@ (8001f18 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d119      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e07f      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d003      	beq.n	8001e1a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e16:	2b03      	cmp	r3, #3
 8001e18:	d107      	bne.n	8001e2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e1a:	4b3f      	ldr	r3, [pc, #252]	@ (8001f18 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d109      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e06f      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f18 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e067      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e3a:	4b37      	ldr	r3, [pc, #220]	@ (8001f18 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f023 0203 	bic.w	r2, r3, #3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	4934      	ldr	r1, [pc, #208]	@ (8001f18 <HAL_RCC_ClockConfig+0x1bc>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e4c:	f7ff f8b8 	bl	8000fc0 <HAL_GetTick>
 8001e50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e52:	e00a      	b.n	8001e6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e54:	f7ff f8b4 	bl	8000fc0 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e04f      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6a:	4b2b      	ldr	r3, [pc, #172]	@ (8001f18 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 020c 	and.w	r2, r3, #12
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d1eb      	bne.n	8001e54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e7c:	4b25      	ldr	r3, [pc, #148]	@ (8001f14 <HAL_RCC_ClockConfig+0x1b8>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 030f 	and.w	r3, r3, #15
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d20c      	bcs.n	8001ea4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8a:	4b22      	ldr	r3, [pc, #136]	@ (8001f14 <HAL_RCC_ClockConfig+0x1b8>)
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e92:	4b20      	ldr	r3, [pc, #128]	@ (8001f14 <HAL_RCC_ClockConfig+0x1b8>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d001      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e032      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d008      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eb0:	4b19      	ldr	r3, [pc, #100]	@ (8001f18 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	4916      	ldr	r1, [pc, #88]	@ (8001f18 <HAL_RCC_ClockConfig+0x1bc>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0308 	and.w	r3, r3, #8
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d009      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ece:	4b12      	ldr	r3, [pc, #72]	@ (8001f18 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	490e      	ldr	r1, [pc, #56]	@ (8001f18 <HAL_RCC_ClockConfig+0x1bc>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ee2:	f000 fb7f 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f18 <HAL_RCC_ClockConfig+0x1bc>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	091b      	lsrs	r3, r3, #4
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	490a      	ldr	r1, [pc, #40]	@ (8001f1c <HAL_RCC_ClockConfig+0x1c0>)
 8001ef4:	5ccb      	ldrb	r3, [r1, r3]
 8001ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8001efa:	4a09      	ldr	r2, [pc, #36]	@ (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001efc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001efe:	4b09      	ldr	r3, [pc, #36]	@ (8001f24 <HAL_RCC_ClockConfig+0x1c8>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff f818 	bl	8000f38 <HAL_InitTick>

  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40023c00 	.word	0x40023c00
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	080040c0 	.word	0x080040c0
 8001f20:	20000000 	.word	0x20000000
 8001f24:	20000004 	.word	0x20000004

08001f28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f2c:	4b03      	ldr	r3, [pc, #12]	@ (8001f3c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	20000000 	.word	0x20000000

08001f40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f44:	f7ff fff0 	bl	8001f28 <HAL_RCC_GetHCLKFreq>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	4b05      	ldr	r3, [pc, #20]	@ (8001f60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	0a9b      	lsrs	r3, r3, #10
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	4903      	ldr	r1, [pc, #12]	@ (8001f64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f56:	5ccb      	ldrb	r3, [r1, r3]
 8001f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40023800 	.word	0x40023800
 8001f64:	080040d0 	.word	0x080040d0

08001f68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f6c:	f7ff ffdc 	bl	8001f28 <HAL_RCC_GetHCLKFreq>
 8001f70:	4602      	mov	r2, r0
 8001f72:	4b05      	ldr	r3, [pc, #20]	@ (8001f88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	0b5b      	lsrs	r3, r3, #13
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	4903      	ldr	r1, [pc, #12]	@ (8001f8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f7e:	5ccb      	ldrb	r3, [r1, r3]
 8001f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	080040d0 	.word	0x080040d0

08001f90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08c      	sub	sp, #48	@ 0x30
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001fac:	2300      	movs	r3, #0
 8001fae:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d010      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001fc8:	4b6f      	ldr	r3, [pc, #444]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fce:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fd6:	496c      	ldr	r1, [pc, #432]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d010      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001ff6:	4b64      	ldr	r3, [pc, #400]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ffc:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002004:	4960      	ldr	r1, [pc, #384]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002006:	4313      	orrs	r3, r2
 8002008:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002014:	2301      	movs	r3, #1
 8002016:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	d017      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002024:	4b58      	ldr	r3, [pc, #352]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002026:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800202a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002032:	4955      	ldr	r1, [pc, #340]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002034:	4313      	orrs	r3, r2
 8002036:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002042:	d101      	bne.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002044:	2301      	movs	r3, #1
 8002046:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002050:	2301      	movs	r3, #1
 8002052:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0308 	and.w	r3, r3, #8
 800205c:	2b00      	cmp	r3, #0
 800205e:	d017      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002060:	4b49      	ldr	r3, [pc, #292]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002062:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002066:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800206e:	4946      	ldr	r1, [pc, #280]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002070:	4313      	orrs	r3, r2
 8002072:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800207a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800207e:	d101      	bne.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002080:	2301      	movs	r3, #1
 8002082:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800208c:	2301      	movs	r3, #1
 800208e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0320 	and.w	r3, r3, #32
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 808a 	beq.w	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	4b39      	ldr	r3, [pc, #228]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a6:	4a38      	ldr	r2, [pc, #224]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ae:	4b36      	ldr	r3, [pc, #216]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020b6:	60bb      	str	r3, [r7, #8]
 80020b8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80020ba:	4b34      	ldr	r3, [pc, #208]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a33      	ldr	r2, [pc, #204]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80020c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80020c6:	f7fe ff7b 	bl	8000fc0 <HAL_GetTick>
 80020ca:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80020cc:	e008      	b.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ce:	f7fe ff77 	bl	8000fc0 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d901      	bls.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e278      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80020e0:	4b2a      	ldr	r3, [pc, #168]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0f0      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020ec:	4b26      	ldr	r3, [pc, #152]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020f4:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020f6:	6a3b      	ldr	r3, [r7, #32]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d02f      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002100:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002104:	6a3a      	ldr	r2, [r7, #32]
 8002106:	429a      	cmp	r2, r3
 8002108:	d028      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800210a:	4b1f      	ldr	r3, [pc, #124]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800210c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800210e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002112:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002114:	4b1e      	ldr	r3, [pc, #120]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002116:	2201      	movs	r2, #1
 8002118:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800211a:	4b1d      	ldr	r3, [pc, #116]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002120:	4a19      	ldr	r2, [pc, #100]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002126:	4b18      	ldr	r3, [pc, #96]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b01      	cmp	r3, #1
 8002130:	d114      	bne.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002132:	f7fe ff45 	bl	8000fc0 <HAL_GetTick>
 8002136:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002138:	e00a      	b.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800213a:	f7fe ff41 	bl	8000fc0 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002148:	4293      	cmp	r3, r2
 800214a:	d901      	bls.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e240      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002150:	4b0d      	ldr	r3, [pc, #52]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002152:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0ee      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002160:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002164:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002168:	d114      	bne.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800216a:	4b07      	ldr	r3, [pc, #28]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002176:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800217a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800217e:	4902      	ldr	r1, [pc, #8]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002180:	4313      	orrs	r3, r2
 8002182:	608b      	str	r3, [r1, #8]
 8002184:	e00c      	b.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002186:	bf00      	nop
 8002188:	40023800 	.word	0x40023800
 800218c:	40007000 	.word	0x40007000
 8002190:	42470e40 	.word	0x42470e40
 8002194:	4b4a      	ldr	r3, [pc, #296]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	4a49      	ldr	r2, [pc, #292]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800219a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800219e:	6093      	str	r3, [r2, #8]
 80021a0:	4b47      	ldr	r3, [pc, #284]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80021a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ac:	4944      	ldr	r1, [pc, #272]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0310 	and.w	r3, r3, #16
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d004      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80021c4:	4b3f      	ldr	r3, [pc, #252]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80021c6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00a      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80021d4:	4b3a      	ldr	r3, [pc, #232]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80021d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e2:	4937      	ldr	r1, [pc, #220]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00a      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80021f6:	4b32      	ldr	r3, [pc, #200]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80021f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021fc:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002204:	492e      	ldr	r1, [pc, #184]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002206:	4313      	orrs	r3, r2
 8002208:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002214:	2b00      	cmp	r3, #0
 8002216:	d011      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002218:	4b29      	ldr	r3, [pc, #164]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800221a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800221e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002226:	4926      	ldr	r1, [pc, #152]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002228:	4313      	orrs	r3, r2
 800222a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002232:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002236:	d101      	bne.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002238:	2301      	movs	r3, #1
 800223a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00a      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002248:	4b1d      	ldr	r3, [pc, #116]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800224a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800224e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002256:	491a      	ldr	r1, [pc, #104]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002258:	4313      	orrs	r3, r2
 800225a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002266:	2b00      	cmp	r3, #0
 8002268:	d011      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800226a:	4b15      	ldr	r3, [pc, #84]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800226c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002270:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002278:	4911      	ldr	r1, [pc, #68]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800227a:	4313      	orrs	r3, r2
 800227c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002284:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002288:	d101      	bne.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800228a:	2301      	movs	r3, #1
 800228c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800228e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002290:	2b01      	cmp	r3, #1
 8002292:	d005      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800229c:	f040 80ff 	bne.w	800249e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80022a0:	4b09      	ldr	r3, [pc, #36]	@ (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80022a6:	f7fe fe8b 	bl	8000fc0 <HAL_GetTick>
 80022aa:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022ac:	e00e      	b.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80022ae:	f7fe fe87 	bl	8000fc0 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d907      	bls.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e188      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80022c0:	40023800 	.word	0x40023800
 80022c4:	424711e0 	.word	0x424711e0
 80022c8:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022cc:	4b7e      	ldr	r3, [pc, #504]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1ea      	bne.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d009      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d028      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d124      	bne.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002300:	4b71      	ldr	r3, [pc, #452]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002302:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002306:	0c1b      	lsrs	r3, r3, #16
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	3301      	adds	r3, #1
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002312:	4b6d      	ldr	r3, [pc, #436]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002314:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002318:	0e1b      	lsrs	r3, r3, #24
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	019b      	lsls	r3, r3, #6
 800232a:	431a      	orrs	r2, r3
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	085b      	lsrs	r3, r3, #1
 8002330:	3b01      	subs	r3, #1
 8002332:	041b      	lsls	r3, r3, #16
 8002334:	431a      	orrs	r2, r3
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	061b      	lsls	r3, r3, #24
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	071b      	lsls	r3, r3, #28
 8002342:	4961      	ldr	r1, [pc, #388]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002344:	4313      	orrs	r3, r2
 8002346:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	2b00      	cmp	r3, #0
 8002354:	d004      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800235e:	d00a      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002368:	2b00      	cmp	r3, #0
 800236a:	d035      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002370:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002374:	d130      	bne.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002376:	4b54      	ldr	r3, [pc, #336]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002378:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800237c:	0c1b      	lsrs	r3, r3, #16
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	3301      	adds	r3, #1
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002388:	4b4f      	ldr	r3, [pc, #316]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800238a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800238e:	0f1b      	lsrs	r3, r3, #28
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	019b      	lsls	r3, r3, #6
 80023a0:	431a      	orrs	r2, r3
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	085b      	lsrs	r3, r3, #1
 80023a6:	3b01      	subs	r3, #1
 80023a8:	041b      	lsls	r3, r3, #16
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	061b      	lsls	r3, r3, #24
 80023b2:	431a      	orrs	r2, r3
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	071b      	lsls	r3, r3, #28
 80023b8:	4943      	ldr	r1, [pc, #268]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80023c0:	4b41      	ldr	r3, [pc, #260]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80023c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023c6:	f023 021f 	bic.w	r2, r3, #31
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ce:	3b01      	subs	r3, #1
 80023d0:	493d      	ldr	r1, [pc, #244]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d029      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023ec:	d124      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80023ee:	4b36      	ldr	r3, [pc, #216]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80023f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023f4:	0c1b      	lsrs	r3, r3, #16
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	3301      	adds	r3, #1
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002400:	4b31      	ldr	r3, [pc, #196]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002402:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002406:	0f1b      	lsrs	r3, r3, #28
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	019b      	lsls	r3, r3, #6
 8002418:	431a      	orrs	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	085b      	lsrs	r3, r3, #1
 8002420:	3b01      	subs	r3, #1
 8002422:	041b      	lsls	r3, r3, #16
 8002424:	431a      	orrs	r2, r3
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	061b      	lsls	r3, r3, #24
 800242a:	431a      	orrs	r2, r3
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	071b      	lsls	r3, r3, #28
 8002430:	4925      	ldr	r1, [pc, #148]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002432:	4313      	orrs	r3, r2
 8002434:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002440:	2b00      	cmp	r3, #0
 8002442:	d016      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	019b      	lsls	r3, r3, #6
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	085b      	lsrs	r3, r3, #1
 8002456:	3b01      	subs	r3, #1
 8002458:	041b      	lsls	r3, r3, #16
 800245a:	431a      	orrs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	061b      	lsls	r3, r3, #24
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	071b      	lsls	r3, r3, #28
 800246a:	4917      	ldr	r1, [pc, #92]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800246c:	4313      	orrs	r3, r2
 800246e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002472:	4b16      	ldr	r3, [pc, #88]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002474:	2201      	movs	r2, #1
 8002476:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002478:	f7fe fda2 	bl	8000fc0 <HAL_GetTick>
 800247c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002480:	f7fe fd9e 	bl	8000fc0 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e09f      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002492:	4b0d      	ldr	r3, [pc, #52]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f0      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 800249e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	f040 8095 	bne.w	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80024a6:	4b0a      	ldr	r3, [pc, #40]	@ (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80024ac:	f7fe fd88 	bl	8000fc0 <HAL_GetTick>
 80024b0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80024b2:	e00f      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80024b4:	f7fe fd84 	bl	8000fc0 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d908      	bls.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e085      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80024c6:	bf00      	nop
 80024c8:	40023800 	.word	0x40023800
 80024cc:	42470068 	.word	0x42470068
 80024d0:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80024d4:	4b41      	ldr	r3, [pc, #260]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80024dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024e0:	d0e8      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0304 	and.w	r3, r3, #4
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d009      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d02b      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002506:	2b00      	cmp	r3, #0
 8002508:	d127      	bne.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800250a:	4b34      	ldr	r3, [pc, #208]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800250c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002510:	0c1b      	lsrs	r3, r3, #16
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	3301      	adds	r3, #1
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	699a      	ldr	r2, [r3, #24]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	019b      	lsls	r3, r3, #6
 8002526:	431a      	orrs	r2, r3
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	085b      	lsrs	r3, r3, #1
 800252c:	3b01      	subs	r3, #1
 800252e:	041b      	lsls	r3, r3, #16
 8002530:	431a      	orrs	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002536:	061b      	lsls	r3, r3, #24
 8002538:	4928      	ldr	r1, [pc, #160]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800253a:	4313      	orrs	r3, r2
 800253c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002540:	4b26      	ldr	r3, [pc, #152]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002542:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002546:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800254e:	3b01      	subs	r3, #1
 8002550:	021b      	lsls	r3, r3, #8
 8002552:	4922      	ldr	r1, [pc, #136]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002554:	4313      	orrs	r3, r2
 8002556:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002562:	2b00      	cmp	r3, #0
 8002564:	d01d      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800256a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800256e:	d118      	bne.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002570:	4b1a      	ldr	r3, [pc, #104]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002576:	0e1b      	lsrs	r3, r3, #24
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	699a      	ldr	r2, [r3, #24]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	019b      	lsls	r3, r3, #6
 8002588:	431a      	orrs	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	085b      	lsrs	r3, r3, #1
 8002590:	3b01      	subs	r3, #1
 8002592:	041b      	lsls	r3, r3, #16
 8002594:	431a      	orrs	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	061b      	lsls	r3, r3, #24
 800259a:	4910      	ldr	r1, [pc, #64]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800259c:	4313      	orrs	r3, r2
 800259e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80025a2:	4b0f      	ldr	r3, [pc, #60]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80025a8:	f7fe fd0a 	bl	8000fc0 <HAL_GetTick>
 80025ac:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80025b0:	f7fe fd06 	bl	8000fc0 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e007      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025c2:	4b06      	ldr	r3, [pc, #24]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025ce:	d1ef      	bne.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3730      	adds	r7, #48	@ 0x30
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40023800 	.word	0x40023800
 80025e0:	42470070 	.word	0x42470070

080025e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025e8:	b0ae      	sub	sp, #184	@ 0xb8
 80025ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80025fe:	2300      	movs	r3, #0
 8002600:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800260a:	4bcb      	ldr	r3, [pc, #812]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x354>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	2b0c      	cmp	r3, #12
 8002614:	f200 8206 	bhi.w	8002a24 <HAL_RCC_GetSysClockFreq+0x440>
 8002618:	a201      	add	r2, pc, #4	@ (adr r2, 8002620 <HAL_RCC_GetSysClockFreq+0x3c>)
 800261a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800261e:	bf00      	nop
 8002620:	08002655 	.word	0x08002655
 8002624:	08002a25 	.word	0x08002a25
 8002628:	08002a25 	.word	0x08002a25
 800262c:	08002a25 	.word	0x08002a25
 8002630:	0800265d 	.word	0x0800265d
 8002634:	08002a25 	.word	0x08002a25
 8002638:	08002a25 	.word	0x08002a25
 800263c:	08002a25 	.word	0x08002a25
 8002640:	08002665 	.word	0x08002665
 8002644:	08002a25 	.word	0x08002a25
 8002648:	08002a25 	.word	0x08002a25
 800264c:	08002a25 	.word	0x08002a25
 8002650:	08002855 	.word	0x08002855
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002654:	4bb9      	ldr	r3, [pc, #740]	@ (800293c <HAL_RCC_GetSysClockFreq+0x358>)
 8002656:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800265a:	e1e7      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800265c:	4bb8      	ldr	r3, [pc, #736]	@ (8002940 <HAL_RCC_GetSysClockFreq+0x35c>)
 800265e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002662:	e1e3      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002664:	4bb4      	ldr	r3, [pc, #720]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x354>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800266c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002670:	4bb1      	ldr	r3, [pc, #708]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x354>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d071      	beq.n	8002760 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800267c:	4bae      	ldr	r3, [pc, #696]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x354>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	099b      	lsrs	r3, r3, #6
 8002682:	2200      	movs	r2, #0
 8002684:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002688:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800268c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002694:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002698:	2300      	movs	r3, #0
 800269a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800269e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80026a2:	4622      	mov	r2, r4
 80026a4:	462b      	mov	r3, r5
 80026a6:	f04f 0000 	mov.w	r0, #0
 80026aa:	f04f 0100 	mov.w	r1, #0
 80026ae:	0159      	lsls	r1, r3, #5
 80026b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026b4:	0150      	lsls	r0, r2, #5
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	4621      	mov	r1, r4
 80026bc:	1a51      	subs	r1, r2, r1
 80026be:	6439      	str	r1, [r7, #64]	@ 0x40
 80026c0:	4629      	mov	r1, r5
 80026c2:	eb63 0301 	sbc.w	r3, r3, r1
 80026c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	f04f 0300 	mov.w	r3, #0
 80026d0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80026d4:	4649      	mov	r1, r9
 80026d6:	018b      	lsls	r3, r1, #6
 80026d8:	4641      	mov	r1, r8
 80026da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026de:	4641      	mov	r1, r8
 80026e0:	018a      	lsls	r2, r1, #6
 80026e2:	4641      	mov	r1, r8
 80026e4:	1a51      	subs	r1, r2, r1
 80026e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80026e8:	4649      	mov	r1, r9
 80026ea:	eb63 0301 	sbc.w	r3, r3, r1
 80026ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80026fc:	4649      	mov	r1, r9
 80026fe:	00cb      	lsls	r3, r1, #3
 8002700:	4641      	mov	r1, r8
 8002702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002706:	4641      	mov	r1, r8
 8002708:	00ca      	lsls	r2, r1, #3
 800270a:	4610      	mov	r0, r2
 800270c:	4619      	mov	r1, r3
 800270e:	4603      	mov	r3, r0
 8002710:	4622      	mov	r2, r4
 8002712:	189b      	adds	r3, r3, r2
 8002714:	633b      	str	r3, [r7, #48]	@ 0x30
 8002716:	462b      	mov	r3, r5
 8002718:	460a      	mov	r2, r1
 800271a:	eb42 0303 	adc.w	r3, r2, r3
 800271e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	f04f 0300 	mov.w	r3, #0
 8002728:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800272c:	4629      	mov	r1, r5
 800272e:	024b      	lsls	r3, r1, #9
 8002730:	4621      	mov	r1, r4
 8002732:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002736:	4621      	mov	r1, r4
 8002738:	024a      	lsls	r2, r1, #9
 800273a:	4610      	mov	r0, r2
 800273c:	4619      	mov	r1, r3
 800273e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002742:	2200      	movs	r2, #0
 8002744:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002748:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800274c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002750:	f7fd fd58 	bl	8000204 <__aeabi_uldivmod>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4613      	mov	r3, r2
 800275a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800275e:	e067      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002760:	4b75      	ldr	r3, [pc, #468]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x354>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	099b      	lsrs	r3, r3, #6
 8002766:	2200      	movs	r2, #0
 8002768:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800276c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002770:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002778:	67bb      	str	r3, [r7, #120]	@ 0x78
 800277a:	2300      	movs	r3, #0
 800277c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800277e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002782:	4622      	mov	r2, r4
 8002784:	462b      	mov	r3, r5
 8002786:	f04f 0000 	mov.w	r0, #0
 800278a:	f04f 0100 	mov.w	r1, #0
 800278e:	0159      	lsls	r1, r3, #5
 8002790:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002794:	0150      	lsls	r0, r2, #5
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	4621      	mov	r1, r4
 800279c:	1a51      	subs	r1, r2, r1
 800279e:	62b9      	str	r1, [r7, #40]	@ 0x28
 80027a0:	4629      	mov	r1, r5
 80027a2:	eb63 0301 	sbc.w	r3, r3, r1
 80027a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f04f 0300 	mov.w	r3, #0
 80027b0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80027b4:	4649      	mov	r1, r9
 80027b6:	018b      	lsls	r3, r1, #6
 80027b8:	4641      	mov	r1, r8
 80027ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027be:	4641      	mov	r1, r8
 80027c0:	018a      	lsls	r2, r1, #6
 80027c2:	4641      	mov	r1, r8
 80027c4:	ebb2 0a01 	subs.w	sl, r2, r1
 80027c8:	4649      	mov	r1, r9
 80027ca:	eb63 0b01 	sbc.w	fp, r3, r1
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	f04f 0300 	mov.w	r3, #0
 80027d6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80027da:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80027de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027e2:	4692      	mov	sl, r2
 80027e4:	469b      	mov	fp, r3
 80027e6:	4623      	mov	r3, r4
 80027e8:	eb1a 0303 	adds.w	r3, sl, r3
 80027ec:	623b      	str	r3, [r7, #32]
 80027ee:	462b      	mov	r3, r5
 80027f0:	eb4b 0303 	adc.w	r3, fp, r3
 80027f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80027f6:	f04f 0200 	mov.w	r2, #0
 80027fa:	f04f 0300 	mov.w	r3, #0
 80027fe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002802:	4629      	mov	r1, r5
 8002804:	028b      	lsls	r3, r1, #10
 8002806:	4621      	mov	r1, r4
 8002808:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800280c:	4621      	mov	r1, r4
 800280e:	028a      	lsls	r2, r1, #10
 8002810:	4610      	mov	r0, r2
 8002812:	4619      	mov	r1, r3
 8002814:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002818:	2200      	movs	r2, #0
 800281a:	673b      	str	r3, [r7, #112]	@ 0x70
 800281c:	677a      	str	r2, [r7, #116]	@ 0x74
 800281e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002822:	f7fd fcef 	bl	8000204 <__aeabi_uldivmod>
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	4613      	mov	r3, r2
 800282c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002830:	4b41      	ldr	r3, [pc, #260]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x354>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	0c1b      	lsrs	r3, r3, #16
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	3301      	adds	r3, #1
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002842:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002846:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800284a:	fbb2 f3f3 	udiv	r3, r2, r3
 800284e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002852:	e0eb      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002854:	4b38      	ldr	r3, [pc, #224]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x354>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800285c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002860:	4b35      	ldr	r3, [pc, #212]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x354>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d06b      	beq.n	8002944 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800286c:	4b32      	ldr	r3, [pc, #200]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x354>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	099b      	lsrs	r3, r3, #6
 8002872:	2200      	movs	r2, #0
 8002874:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002876:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002878:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800287a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800287e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002880:	2300      	movs	r3, #0
 8002882:	667b      	str	r3, [r7, #100]	@ 0x64
 8002884:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002888:	4622      	mov	r2, r4
 800288a:	462b      	mov	r3, r5
 800288c:	f04f 0000 	mov.w	r0, #0
 8002890:	f04f 0100 	mov.w	r1, #0
 8002894:	0159      	lsls	r1, r3, #5
 8002896:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800289a:	0150      	lsls	r0, r2, #5
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4621      	mov	r1, r4
 80028a2:	1a51      	subs	r1, r2, r1
 80028a4:	61b9      	str	r1, [r7, #24]
 80028a6:	4629      	mov	r1, r5
 80028a8:	eb63 0301 	sbc.w	r3, r3, r1
 80028ac:	61fb      	str	r3, [r7, #28]
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	f04f 0300 	mov.w	r3, #0
 80028b6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80028ba:	4659      	mov	r1, fp
 80028bc:	018b      	lsls	r3, r1, #6
 80028be:	4651      	mov	r1, sl
 80028c0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028c4:	4651      	mov	r1, sl
 80028c6:	018a      	lsls	r2, r1, #6
 80028c8:	4651      	mov	r1, sl
 80028ca:	ebb2 0801 	subs.w	r8, r2, r1
 80028ce:	4659      	mov	r1, fp
 80028d0:	eb63 0901 	sbc.w	r9, r3, r1
 80028d4:	f04f 0200 	mov.w	r2, #0
 80028d8:	f04f 0300 	mov.w	r3, #0
 80028dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028e8:	4690      	mov	r8, r2
 80028ea:	4699      	mov	r9, r3
 80028ec:	4623      	mov	r3, r4
 80028ee:	eb18 0303 	adds.w	r3, r8, r3
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	462b      	mov	r3, r5
 80028f6:	eb49 0303 	adc.w	r3, r9, r3
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002908:	4629      	mov	r1, r5
 800290a:	024b      	lsls	r3, r1, #9
 800290c:	4621      	mov	r1, r4
 800290e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002912:	4621      	mov	r1, r4
 8002914:	024a      	lsls	r2, r1, #9
 8002916:	4610      	mov	r0, r2
 8002918:	4619      	mov	r1, r3
 800291a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800291e:	2200      	movs	r2, #0
 8002920:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002922:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002924:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002928:	f7fd fc6c 	bl	8000204 <__aeabi_uldivmod>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	4613      	mov	r3, r2
 8002932:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002936:	e065      	b.n	8002a04 <HAL_RCC_GetSysClockFreq+0x420>
 8002938:	40023800 	.word	0x40023800
 800293c:	00f42400 	.word	0x00f42400
 8002940:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002944:	4b3d      	ldr	r3, [pc, #244]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x458>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	099b      	lsrs	r3, r3, #6
 800294a:	2200      	movs	r2, #0
 800294c:	4618      	mov	r0, r3
 800294e:	4611      	mov	r1, r2
 8002950:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002954:	653b      	str	r3, [r7, #80]	@ 0x50
 8002956:	2300      	movs	r3, #0
 8002958:	657b      	str	r3, [r7, #84]	@ 0x54
 800295a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800295e:	4642      	mov	r2, r8
 8002960:	464b      	mov	r3, r9
 8002962:	f04f 0000 	mov.w	r0, #0
 8002966:	f04f 0100 	mov.w	r1, #0
 800296a:	0159      	lsls	r1, r3, #5
 800296c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002970:	0150      	lsls	r0, r2, #5
 8002972:	4602      	mov	r2, r0
 8002974:	460b      	mov	r3, r1
 8002976:	4641      	mov	r1, r8
 8002978:	1a51      	subs	r1, r2, r1
 800297a:	60b9      	str	r1, [r7, #8]
 800297c:	4649      	mov	r1, r9
 800297e:	eb63 0301 	sbc.w	r3, r3, r1
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	f04f 0200 	mov.w	r2, #0
 8002988:	f04f 0300 	mov.w	r3, #0
 800298c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002990:	4659      	mov	r1, fp
 8002992:	018b      	lsls	r3, r1, #6
 8002994:	4651      	mov	r1, sl
 8002996:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800299a:	4651      	mov	r1, sl
 800299c:	018a      	lsls	r2, r1, #6
 800299e:	4651      	mov	r1, sl
 80029a0:	1a54      	subs	r4, r2, r1
 80029a2:	4659      	mov	r1, fp
 80029a4:	eb63 0501 	sbc.w	r5, r3, r1
 80029a8:	f04f 0200 	mov.w	r2, #0
 80029ac:	f04f 0300 	mov.w	r3, #0
 80029b0:	00eb      	lsls	r3, r5, #3
 80029b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029b6:	00e2      	lsls	r2, r4, #3
 80029b8:	4614      	mov	r4, r2
 80029ba:	461d      	mov	r5, r3
 80029bc:	4643      	mov	r3, r8
 80029be:	18e3      	adds	r3, r4, r3
 80029c0:	603b      	str	r3, [r7, #0]
 80029c2:	464b      	mov	r3, r9
 80029c4:	eb45 0303 	adc.w	r3, r5, r3
 80029c8:	607b      	str	r3, [r7, #4]
 80029ca:	f04f 0200 	mov.w	r2, #0
 80029ce:	f04f 0300 	mov.w	r3, #0
 80029d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029d6:	4629      	mov	r1, r5
 80029d8:	028b      	lsls	r3, r1, #10
 80029da:	4621      	mov	r1, r4
 80029dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029e0:	4621      	mov	r1, r4
 80029e2:	028a      	lsls	r2, r1, #10
 80029e4:	4610      	mov	r0, r2
 80029e6:	4619      	mov	r1, r3
 80029e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029ec:	2200      	movs	r2, #0
 80029ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029f0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80029f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80029f6:	f7fd fc05 	bl	8000204 <__aeabi_uldivmod>
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4613      	mov	r3, r2
 8002a00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002a04:	4b0d      	ldr	r3, [pc, #52]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x458>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	0f1b      	lsrs	r3, r3, #28
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002a12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a22:	e003      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a24:	4b06      	ldr	r3, [pc, #24]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002a26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	37b8      	adds	r7, #184	@ 0xb8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	00f42400 	.word	0x00f42400

08002a44 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e28d      	b.n	8002f72 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 8083 	beq.w	8002b6a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a64:	4b94      	ldr	r3, [pc, #592]	@ (8002cb8 <HAL_RCC_OscConfig+0x274>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 030c 	and.w	r3, r3, #12
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d019      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a70:	4b91      	ldr	r3, [pc, #580]	@ (8002cb8 <HAL_RCC_OscConfig+0x274>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 030c 	and.w	r3, r3, #12
        || \
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d106      	bne.n	8002a8a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a7c:	4b8e      	ldr	r3, [pc, #568]	@ (8002cb8 <HAL_RCC_OscConfig+0x274>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a88:	d00c      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a8a:	4b8b      	ldr	r3, [pc, #556]	@ (8002cb8 <HAL_RCC_OscConfig+0x274>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a92:	2b0c      	cmp	r3, #12
 8002a94:	d112      	bne.n	8002abc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a96:	4b88      	ldr	r3, [pc, #544]	@ (8002cb8 <HAL_RCC_OscConfig+0x274>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002aa2:	d10b      	bne.n	8002abc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa4:	4b84      	ldr	r3, [pc, #528]	@ (8002cb8 <HAL_RCC_OscConfig+0x274>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d05b      	beq.n	8002b68 <HAL_RCC_OscConfig+0x124>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d157      	bne.n	8002b68 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e25a      	b.n	8002f72 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ac4:	d106      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x90>
 8002ac6:	4b7c      	ldr	r3, [pc, #496]	@ (8002cb8 <HAL_RCC_OscConfig+0x274>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a7b      	ldr	r2, [pc, #492]	@ (8002cb8 <HAL_RCC_OscConfig+0x274>)
 8002acc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	e01d      	b.n	8002b10 <HAL_RCC_OscConfig+0xcc>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002adc:	d10c      	bne.n	8002af8 <HAL_RCC_OscConfig+0xb4>
 8002ade:	4b76      	ldr	r3, [pc, #472]	@ (8002cb8 <HAL_RCC_OscConfig+0x274>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a75      	ldr	r2, [pc, #468]	@ (8002cb8 <HAL_RCC_OscConfig+0x274>)
 8002ae4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	4b73      	ldr	r3, [pc, #460]	@ (8002cb8 <HAL_RCC_OscConfig+0x274>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a72      	ldr	r2, [pc, #456]	@ (8002cb8 <HAL_RCC_OscConfig+0x274>)
 8002af0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	e00b      	b.n	8002b10 <HAL_RCC_OscConfig+0xcc>
 8002af8:	4b6f      	ldr	r3, [pc, #444]	@ (8002cb8 <HAL_RCC_OscConfig+0x274>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a6e      	ldr	r2, [pc, #440]	@ (8002cb8 <HAL_RCC_OscConfig+0x274>)
 8002afe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b02:	6013      	str	r3, [r2, #0]
 8002b04:	4b6c      	ldr	r3, [pc, #432]	@ (8002cb8 <HAL_RCC_OscConfig+0x274>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a6b      	ldr	r2, [pc, #428]	@ (8002cb8 <HAL_RCC_OscConfig+0x274>)
 8002b0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d013      	beq.n	8002b40 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b18:	f7fe fa52 	bl	8000fc0 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b20:	f7fe fa4e 	bl	8000fc0 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b64      	cmp	r3, #100	@ 0x64
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e21f      	b.n	8002f72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b32:	4b61      	ldr	r3, [pc, #388]	@ (8002cb8 <HAL_RCC_OscConfig+0x274>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f0      	beq.n	8002b20 <HAL_RCC_OscConfig+0xdc>
 8002b3e:	e014      	b.n	8002b6a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b40:	f7fe fa3e 	bl	8000fc0 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b48:	f7fe fa3a 	bl	8000fc0 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b64      	cmp	r3, #100	@ 0x64
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e20b      	b.n	8002f72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b5a:	4b57      	ldr	r3, [pc, #348]	@ (8002cb8 <HAL_RCC_OscConfig+0x274>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f0      	bne.n	8002b48 <HAL_RCC_OscConfig+0x104>
 8002b66:	e000      	b.n	8002b6a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d06f      	beq.n	8002c56 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002b76:	4b50      	ldr	r3, [pc, #320]	@ (8002cb8 <HAL_RCC_OscConfig+0x274>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 030c 	and.w	r3, r3, #12
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d017      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b82:	4b4d      	ldr	r3, [pc, #308]	@ (8002cb8 <HAL_RCC_OscConfig+0x274>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 030c 	and.w	r3, r3, #12
        || \
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d105      	bne.n	8002b9a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b8e:	4b4a      	ldr	r3, [pc, #296]	@ (8002cb8 <HAL_RCC_OscConfig+0x274>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00b      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b9a:	4b47      	ldr	r3, [pc, #284]	@ (8002cb8 <HAL_RCC_OscConfig+0x274>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002ba2:	2b0c      	cmp	r3, #12
 8002ba4:	d11c      	bne.n	8002be0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ba6:	4b44      	ldr	r3, [pc, #272]	@ (8002cb8 <HAL_RCC_OscConfig+0x274>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d116      	bne.n	8002be0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb2:	4b41      	ldr	r3, [pc, #260]	@ (8002cb8 <HAL_RCC_OscConfig+0x274>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d005      	beq.n	8002bca <HAL_RCC_OscConfig+0x186>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d001      	beq.n	8002bca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e1d3      	b.n	8002f72 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bca:	4b3b      	ldr	r3, [pc, #236]	@ (8002cb8 <HAL_RCC_OscConfig+0x274>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4937      	ldr	r1, [pc, #220]	@ (8002cb8 <HAL_RCC_OscConfig+0x274>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bde:	e03a      	b.n	8002c56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d020      	beq.n	8002c2a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002be8:	4b34      	ldr	r3, [pc, #208]	@ (8002cbc <HAL_RCC_OscConfig+0x278>)
 8002bea:	2201      	movs	r2, #1
 8002bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bee:	f7fe f9e7 	bl	8000fc0 <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf6:	f7fe f9e3 	bl	8000fc0 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e1b4      	b.n	8002f72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c08:	4b2b      	ldr	r3, [pc, #172]	@ (8002cb8 <HAL_RCC_OscConfig+0x274>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d0f0      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c14:	4b28      	ldr	r3, [pc, #160]	@ (8002cb8 <HAL_RCC_OscConfig+0x274>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	4925      	ldr	r1, [pc, #148]	@ (8002cb8 <HAL_RCC_OscConfig+0x274>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	600b      	str	r3, [r1, #0]
 8002c28:	e015      	b.n	8002c56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c2a:	4b24      	ldr	r3, [pc, #144]	@ (8002cbc <HAL_RCC_OscConfig+0x278>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c30:	f7fe f9c6 	bl	8000fc0 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c38:	f7fe f9c2 	bl	8000fc0 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e193      	b.n	8002f72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb8 <HAL_RCC_OscConfig+0x274>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f0      	bne.n	8002c38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d036      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d016      	beq.n	8002c98 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c6a:	4b15      	ldr	r3, [pc, #84]	@ (8002cc0 <HAL_RCC_OscConfig+0x27c>)
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c70:	f7fe f9a6 	bl	8000fc0 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c78:	f7fe f9a2 	bl	8000fc0 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e173      	b.n	8002f72 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb8 <HAL_RCC_OscConfig+0x274>)
 8002c8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0f0      	beq.n	8002c78 <HAL_RCC_OscConfig+0x234>
 8002c96:	e01b      	b.n	8002cd0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c98:	4b09      	ldr	r3, [pc, #36]	@ (8002cc0 <HAL_RCC_OscConfig+0x27c>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9e:	f7fe f98f 	bl	8000fc0 <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca4:	e00e      	b.n	8002cc4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ca6:	f7fe f98b 	bl	8000fc0 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d907      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e15c      	b.n	8002f72 <HAL_RCC_OscConfig+0x52e>
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	42470000 	.word	0x42470000
 8002cc0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc4:	4b8a      	ldr	r3, [pc, #552]	@ (8002ef0 <HAL_RCC_OscConfig+0x4ac>)
 8002cc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1ea      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 8097 	beq.w	8002e0c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ce2:	4b83      	ldr	r3, [pc, #524]	@ (8002ef0 <HAL_RCC_OscConfig+0x4ac>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10f      	bne.n	8002d0e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ef0 <HAL_RCC_OscConfig+0x4ac>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf6:	4a7e      	ldr	r2, [pc, #504]	@ (8002ef0 <HAL_RCC_OscConfig+0x4ac>)
 8002cf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cfe:	4b7c      	ldr	r3, [pc, #496]	@ (8002ef0 <HAL_RCC_OscConfig+0x4ac>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d06:	60bb      	str	r3, [r7, #8]
 8002d08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d0e:	4b79      	ldr	r3, [pc, #484]	@ (8002ef4 <HAL_RCC_OscConfig+0x4b0>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d118      	bne.n	8002d4c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d1a:	4b76      	ldr	r3, [pc, #472]	@ (8002ef4 <HAL_RCC_OscConfig+0x4b0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a75      	ldr	r2, [pc, #468]	@ (8002ef4 <HAL_RCC_OscConfig+0x4b0>)
 8002d20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d26:	f7fe f94b 	bl	8000fc0 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d2e:	f7fe f947 	bl	8000fc0 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e118      	b.n	8002f72 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d40:	4b6c      	ldr	r3, [pc, #432]	@ (8002ef4 <HAL_RCC_OscConfig+0x4b0>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0f0      	beq.n	8002d2e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d106      	bne.n	8002d62 <HAL_RCC_OscConfig+0x31e>
 8002d54:	4b66      	ldr	r3, [pc, #408]	@ (8002ef0 <HAL_RCC_OscConfig+0x4ac>)
 8002d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d58:	4a65      	ldr	r2, [pc, #404]	@ (8002ef0 <HAL_RCC_OscConfig+0x4ac>)
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d60:	e01c      	b.n	8002d9c <HAL_RCC_OscConfig+0x358>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	2b05      	cmp	r3, #5
 8002d68:	d10c      	bne.n	8002d84 <HAL_RCC_OscConfig+0x340>
 8002d6a:	4b61      	ldr	r3, [pc, #388]	@ (8002ef0 <HAL_RCC_OscConfig+0x4ac>)
 8002d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d6e:	4a60      	ldr	r2, [pc, #384]	@ (8002ef0 <HAL_RCC_OscConfig+0x4ac>)
 8002d70:	f043 0304 	orr.w	r3, r3, #4
 8002d74:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d76:	4b5e      	ldr	r3, [pc, #376]	@ (8002ef0 <HAL_RCC_OscConfig+0x4ac>)
 8002d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d7a:	4a5d      	ldr	r2, [pc, #372]	@ (8002ef0 <HAL_RCC_OscConfig+0x4ac>)
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d82:	e00b      	b.n	8002d9c <HAL_RCC_OscConfig+0x358>
 8002d84:	4b5a      	ldr	r3, [pc, #360]	@ (8002ef0 <HAL_RCC_OscConfig+0x4ac>)
 8002d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d88:	4a59      	ldr	r2, [pc, #356]	@ (8002ef0 <HAL_RCC_OscConfig+0x4ac>)
 8002d8a:	f023 0301 	bic.w	r3, r3, #1
 8002d8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d90:	4b57      	ldr	r3, [pc, #348]	@ (8002ef0 <HAL_RCC_OscConfig+0x4ac>)
 8002d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d94:	4a56      	ldr	r2, [pc, #344]	@ (8002ef0 <HAL_RCC_OscConfig+0x4ac>)
 8002d96:	f023 0304 	bic.w	r3, r3, #4
 8002d9a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d015      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da4:	f7fe f90c 	bl	8000fc0 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002daa:	e00a      	b.n	8002dc2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dac:	f7fe f908 	bl	8000fc0 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e0d7      	b.n	8002f72 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc2:	4b4b      	ldr	r3, [pc, #300]	@ (8002ef0 <HAL_RCC_OscConfig+0x4ac>)
 8002dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0ee      	beq.n	8002dac <HAL_RCC_OscConfig+0x368>
 8002dce:	e014      	b.n	8002dfa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd0:	f7fe f8f6 	bl	8000fc0 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd6:	e00a      	b.n	8002dee <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd8:	f7fe f8f2 	bl	8000fc0 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e0c1      	b.n	8002f72 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dee:	4b40      	ldr	r3, [pc, #256]	@ (8002ef0 <HAL_RCC_OscConfig+0x4ac>)
 8002df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1ee      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dfa:	7dfb      	ldrb	r3, [r7, #23]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d105      	bne.n	8002e0c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e00:	4b3b      	ldr	r3, [pc, #236]	@ (8002ef0 <HAL_RCC_OscConfig+0x4ac>)
 8002e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e04:	4a3a      	ldr	r2, [pc, #232]	@ (8002ef0 <HAL_RCC_OscConfig+0x4ac>)
 8002e06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e0a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 80ad 	beq.w	8002f70 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e16:	4b36      	ldr	r3, [pc, #216]	@ (8002ef0 <HAL_RCC_OscConfig+0x4ac>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 030c 	and.w	r3, r3, #12
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	d060      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d145      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e2a:	4b33      	ldr	r3, [pc, #204]	@ (8002ef8 <HAL_RCC_OscConfig+0x4b4>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e30:	f7fe f8c6 	bl	8000fc0 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e38:	f7fe f8c2 	bl	8000fc0 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e093      	b.n	8002f72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4a:	4b29      	ldr	r3, [pc, #164]	@ (8002ef0 <HAL_RCC_OscConfig+0x4ac>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f0      	bne.n	8002e38 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69da      	ldr	r2, [r3, #28]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e64:	019b      	lsls	r3, r3, #6
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e6c:	085b      	lsrs	r3, r3, #1
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	041b      	lsls	r3, r3, #16
 8002e72:	431a      	orrs	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e78:	061b      	lsls	r3, r3, #24
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e80:	071b      	lsls	r3, r3, #28
 8002e82:	491b      	ldr	r1, [pc, #108]	@ (8002ef0 <HAL_RCC_OscConfig+0x4ac>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e88:	4b1b      	ldr	r3, [pc, #108]	@ (8002ef8 <HAL_RCC_OscConfig+0x4b4>)
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8e:	f7fe f897 	bl	8000fc0 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e96:	f7fe f893 	bl	8000fc0 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e064      	b.n	8002f72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ea8:	4b11      	ldr	r3, [pc, #68]	@ (8002ef0 <HAL_RCC_OscConfig+0x4ac>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0f0      	beq.n	8002e96 <HAL_RCC_OscConfig+0x452>
 8002eb4:	e05c      	b.n	8002f70 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb6:	4b10      	ldr	r3, [pc, #64]	@ (8002ef8 <HAL_RCC_OscConfig+0x4b4>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebc:	f7fe f880 	bl	8000fc0 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec4:	f7fe f87c 	bl	8000fc0 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e04d      	b.n	8002f72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed6:	4b06      	ldr	r3, [pc, #24]	@ (8002ef0 <HAL_RCC_OscConfig+0x4ac>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f0      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x480>
 8002ee2:	e045      	b.n	8002f70 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d107      	bne.n	8002efc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e040      	b.n	8002f72 <HAL_RCC_OscConfig+0x52e>
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	40007000 	.word	0x40007000
 8002ef8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002efc:	4b1f      	ldr	r3, [pc, #124]	@ (8002f7c <HAL_RCC_OscConfig+0x538>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d030      	beq.n	8002f6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d129      	bne.n	8002f6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d122      	bne.n	8002f6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d119      	bne.n	8002f6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f42:	085b      	lsrs	r3, r3, #1
 8002f44:	3b01      	subs	r3, #1
 8002f46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d10f      	bne.n	8002f6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d107      	bne.n	8002f6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f66:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d001      	beq.n	8002f70 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e000      	b.n	8002f72 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40023800 	.word	0x40023800

08002f80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e07b      	b.n	800308a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d108      	bne.n	8002fac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fa2:	d009      	beq.n	8002fb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	61da      	str	r2, [r3, #28]
 8002faa:	e005      	b.n	8002fb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d106      	bne.n	8002fd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7fd fe1a 	bl	8000c0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003000:	431a      	orrs	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	431a      	orrs	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003028:	431a      	orrs	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800303c:	ea42 0103 	orr.w	r1, r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003044:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	0c1b      	lsrs	r3, r3, #16
 8003056:	f003 0104 	and.w	r1, r3, #4
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305e:	f003 0210 	and.w	r2, r3, #16
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	69da      	ldr	r2, [r3, #28]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003078:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b088      	sub	sp, #32
 8003096:	af00      	add	r7, sp, #0
 8003098:	60f8      	str	r0, [r7, #12]
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	603b      	str	r3, [r7, #0]
 800309e:	4613      	mov	r3, r2
 80030a0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030a2:	f7fd ff8d 	bl	8000fc0 <HAL_GetTick>
 80030a6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80030a8:	88fb      	ldrh	r3, [r7, #6]
 80030aa:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d001      	beq.n	80030bc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80030b8:	2302      	movs	r3, #2
 80030ba:	e12a      	b.n	8003312 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d002      	beq.n	80030c8 <HAL_SPI_Transmit+0x36>
 80030c2:	88fb      	ldrh	r3, [r7, #6]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e122      	b.n	8003312 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d101      	bne.n	80030da <HAL_SPI_Transmit+0x48>
 80030d6:	2302      	movs	r3, #2
 80030d8:	e11b      	b.n	8003312 <HAL_SPI_Transmit+0x280>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2203      	movs	r2, #3
 80030e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	88fa      	ldrh	r2, [r7, #6]
 80030fa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	88fa      	ldrh	r2, [r7, #6]
 8003100:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003128:	d10f      	bne.n	800314a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003138:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003148:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003154:	2b40      	cmp	r3, #64	@ 0x40
 8003156:	d007      	beq.n	8003168 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003166:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003170:	d152      	bne.n	8003218 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d002      	beq.n	8003180 <HAL_SPI_Transmit+0xee>
 800317a:	8b7b      	ldrh	r3, [r7, #26]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d145      	bne.n	800320c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003184:	881a      	ldrh	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003190:	1c9a      	adds	r2, r3, #2
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800319a:	b29b      	uxth	r3, r3
 800319c:	3b01      	subs	r3, #1
 800319e:	b29a      	uxth	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80031a4:	e032      	b.n	800320c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d112      	bne.n	80031da <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b8:	881a      	ldrh	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c4:	1c9a      	adds	r2, r3, #2
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	3b01      	subs	r3, #1
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80031d8:	e018      	b.n	800320c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031da:	f7fd fef1 	bl	8000fc0 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d803      	bhi.n	80031f2 <HAL_SPI_Transmit+0x160>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f0:	d102      	bne.n	80031f8 <HAL_SPI_Transmit+0x166>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d109      	bne.n	800320c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e082      	b.n	8003312 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003210:	b29b      	uxth	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1c7      	bne.n	80031a6 <HAL_SPI_Transmit+0x114>
 8003216:	e053      	b.n	80032c0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d002      	beq.n	8003226 <HAL_SPI_Transmit+0x194>
 8003220:	8b7b      	ldrh	r3, [r7, #26]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d147      	bne.n	80032b6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	330c      	adds	r3, #12
 8003230:	7812      	ldrb	r2, [r2, #0]
 8003232:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003238:	1c5a      	adds	r2, r3, #1
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003242:	b29b      	uxth	r3, r3
 8003244:	3b01      	subs	r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800324c:	e033      	b.n	80032b6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b02      	cmp	r3, #2
 800325a:	d113      	bne.n	8003284 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	330c      	adds	r3, #12
 8003266:	7812      	ldrb	r2, [r2, #0]
 8003268:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326e:	1c5a      	adds	r2, r3, #1
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003278:	b29b      	uxth	r3, r3
 800327a:	3b01      	subs	r3, #1
 800327c:	b29a      	uxth	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003282:	e018      	b.n	80032b6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003284:	f7fd fe9c 	bl	8000fc0 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	d803      	bhi.n	800329c <HAL_SPI_Transmit+0x20a>
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800329a:	d102      	bne.n	80032a2 <HAL_SPI_Transmit+0x210>
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e02d      	b.n	8003312 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1c6      	bne.n	800324e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032c0:	69fa      	ldr	r2, [r7, #28]
 80032c2:	6839      	ldr	r1, [r7, #0]
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 f8b1 	bl	800342c <SPI_EndRxTxTransaction>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d002      	beq.n	80032d6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2220      	movs	r2, #32
 80032d4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10a      	bne.n	80032f4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032de:	2300      	movs	r3, #0
 80032e0:	617b      	str	r3, [r7, #20]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	617b      	str	r3, [r7, #20]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	617b      	str	r3, [r7, #20]
 80032f2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e000      	b.n	8003312 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003310:	2300      	movs	r3, #0
  }
}
 8003312:	4618      	mov	r0, r3
 8003314:	3720      	adds	r7, #32
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
	...

0800331c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b088      	sub	sp, #32
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	603b      	str	r3, [r7, #0]
 8003328:	4613      	mov	r3, r2
 800332a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800332c:	f7fd fe48 	bl	8000fc0 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003334:	1a9b      	subs	r3, r3, r2
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	4413      	add	r3, r2
 800333a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800333c:	f7fd fe40 	bl	8000fc0 <HAL_GetTick>
 8003340:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003342:	4b39      	ldr	r3, [pc, #228]	@ (8003428 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	015b      	lsls	r3, r3, #5
 8003348:	0d1b      	lsrs	r3, r3, #20
 800334a:	69fa      	ldr	r2, [r7, #28]
 800334c:	fb02 f303 	mul.w	r3, r2, r3
 8003350:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003352:	e054      	b.n	80033fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335a:	d050      	beq.n	80033fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800335c:	f7fd fe30 	bl	8000fc0 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	69fa      	ldr	r2, [r7, #28]
 8003368:	429a      	cmp	r2, r3
 800336a:	d902      	bls.n	8003372 <SPI_WaitFlagStateUntilTimeout+0x56>
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d13d      	bne.n	80033ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003380:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800338a:	d111      	bne.n	80033b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003394:	d004      	beq.n	80033a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800339e:	d107      	bne.n	80033b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033b8:	d10f      	bne.n	80033da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e017      	b.n	800341e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	3b01      	subs	r3, #1
 80033fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	4013      	ands	r3, r2
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	429a      	cmp	r2, r3
 800340c:	bf0c      	ite	eq
 800340e:	2301      	moveq	r3, #1
 8003410:	2300      	movne	r3, #0
 8003412:	b2db      	uxtb	r3, r3
 8003414:	461a      	mov	r2, r3
 8003416:	79fb      	ldrb	r3, [r7, #7]
 8003418:	429a      	cmp	r2, r3
 800341a:	d19b      	bne.n	8003354 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3720      	adds	r7, #32
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	20000000 	.word	0x20000000

0800342c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b088      	sub	sp, #32
 8003430:	af02      	add	r7, sp, #8
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2201      	movs	r2, #1
 8003440:	2102      	movs	r1, #2
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f7ff ff6a 	bl	800331c <SPI_WaitFlagStateUntilTimeout>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d007      	beq.n	800345e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003452:	f043 0220 	orr.w	r2, r3, #32
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e032      	b.n	80034c4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800345e:	4b1b      	ldr	r3, [pc, #108]	@ (80034cc <SPI_EndRxTxTransaction+0xa0>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a1b      	ldr	r2, [pc, #108]	@ (80034d0 <SPI_EndRxTxTransaction+0xa4>)
 8003464:	fba2 2303 	umull	r2, r3, r2, r3
 8003468:	0d5b      	lsrs	r3, r3, #21
 800346a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800346e:	fb02 f303 	mul.w	r3, r2, r3
 8003472:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800347c:	d112      	bne.n	80034a4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	2200      	movs	r2, #0
 8003486:	2180      	movs	r1, #128	@ 0x80
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f7ff ff47 	bl	800331c <SPI_WaitFlagStateUntilTimeout>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d016      	beq.n	80034c2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003498:	f043 0220 	orr.w	r2, r3, #32
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e00f      	b.n	80034c4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	3b01      	subs	r3, #1
 80034ae:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ba:	2b80      	cmp	r3, #128	@ 0x80
 80034bc:	d0f2      	beq.n	80034a4 <SPI_EndRxTxTransaction+0x78>
 80034be:	e000      	b.n	80034c2 <SPI_EndRxTxTransaction+0x96>
        break;
 80034c0:	bf00      	nop
  }

  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	20000000 	.word	0x20000000
 80034d0:	165e9f81 	.word	0x165e9f81

080034d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e042      	b.n	800356c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d106      	bne.n	8003500 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7fd fbce 	bl	8000c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2224      	movs	r2, #36	@ 0x24
 8003504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003516:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 f82b 	bl	8003574 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	691a      	ldr	r2, [r3, #16]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800352c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	695a      	ldr	r2, [r3, #20]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800353c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800354c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2220      	movs	r2, #32
 8003558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003578:	b0c0      	sub	sp, #256	@ 0x100
 800357a:	af00      	add	r7, sp, #0
 800357c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800358c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003590:	68d9      	ldr	r1, [r3, #12]
 8003592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	ea40 0301 	orr.w	r3, r0, r1
 800359c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800359e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	431a      	orrs	r2, r3
 80035ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	431a      	orrs	r2, r3
 80035b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80035c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80035cc:	f021 010c 	bic.w	r1, r1, #12
 80035d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80035da:	430b      	orrs	r3, r1
 80035dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80035ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035ee:	6999      	ldr	r1, [r3, #24]
 80035f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	ea40 0301 	orr.w	r3, r0, r1
 80035fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	4b8f      	ldr	r3, [pc, #572]	@ (8003840 <UART_SetConfig+0x2cc>)
 8003604:	429a      	cmp	r2, r3
 8003606:	d005      	beq.n	8003614 <UART_SetConfig+0xa0>
 8003608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	4b8d      	ldr	r3, [pc, #564]	@ (8003844 <UART_SetConfig+0x2d0>)
 8003610:	429a      	cmp	r2, r3
 8003612:	d104      	bne.n	800361e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003614:	f7fe fca8 	bl	8001f68 <HAL_RCC_GetPCLK2Freq>
 8003618:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800361c:	e003      	b.n	8003626 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800361e:	f7fe fc8f 	bl	8001f40 <HAL_RCC_GetPCLK1Freq>
 8003622:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003630:	f040 810c 	bne.w	800384c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003634:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003638:	2200      	movs	r2, #0
 800363a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800363e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003642:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003646:	4622      	mov	r2, r4
 8003648:	462b      	mov	r3, r5
 800364a:	1891      	adds	r1, r2, r2
 800364c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800364e:	415b      	adcs	r3, r3
 8003650:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003652:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003656:	4621      	mov	r1, r4
 8003658:	eb12 0801 	adds.w	r8, r2, r1
 800365c:	4629      	mov	r1, r5
 800365e:	eb43 0901 	adc.w	r9, r3, r1
 8003662:	f04f 0200 	mov.w	r2, #0
 8003666:	f04f 0300 	mov.w	r3, #0
 800366a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800366e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003672:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003676:	4690      	mov	r8, r2
 8003678:	4699      	mov	r9, r3
 800367a:	4623      	mov	r3, r4
 800367c:	eb18 0303 	adds.w	r3, r8, r3
 8003680:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003684:	462b      	mov	r3, r5
 8003686:	eb49 0303 	adc.w	r3, r9, r3
 800368a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800368e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800369a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800369e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80036a2:	460b      	mov	r3, r1
 80036a4:	18db      	adds	r3, r3, r3
 80036a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80036a8:	4613      	mov	r3, r2
 80036aa:	eb42 0303 	adc.w	r3, r2, r3
 80036ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80036b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80036b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80036b8:	f7fc fda4 	bl	8000204 <__aeabi_uldivmod>
 80036bc:	4602      	mov	r2, r0
 80036be:	460b      	mov	r3, r1
 80036c0:	4b61      	ldr	r3, [pc, #388]	@ (8003848 <UART_SetConfig+0x2d4>)
 80036c2:	fba3 2302 	umull	r2, r3, r3, r2
 80036c6:	095b      	lsrs	r3, r3, #5
 80036c8:	011c      	lsls	r4, r3, #4
 80036ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036ce:	2200      	movs	r2, #0
 80036d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80036d4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80036d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80036dc:	4642      	mov	r2, r8
 80036de:	464b      	mov	r3, r9
 80036e0:	1891      	adds	r1, r2, r2
 80036e2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80036e4:	415b      	adcs	r3, r3
 80036e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80036ec:	4641      	mov	r1, r8
 80036ee:	eb12 0a01 	adds.w	sl, r2, r1
 80036f2:	4649      	mov	r1, r9
 80036f4:	eb43 0b01 	adc.w	fp, r3, r1
 80036f8:	f04f 0200 	mov.w	r2, #0
 80036fc:	f04f 0300 	mov.w	r3, #0
 8003700:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003704:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003708:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800370c:	4692      	mov	sl, r2
 800370e:	469b      	mov	fp, r3
 8003710:	4643      	mov	r3, r8
 8003712:	eb1a 0303 	adds.w	r3, sl, r3
 8003716:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800371a:	464b      	mov	r3, r9
 800371c:	eb4b 0303 	adc.w	r3, fp, r3
 8003720:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003730:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003734:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003738:	460b      	mov	r3, r1
 800373a:	18db      	adds	r3, r3, r3
 800373c:	643b      	str	r3, [r7, #64]	@ 0x40
 800373e:	4613      	mov	r3, r2
 8003740:	eb42 0303 	adc.w	r3, r2, r3
 8003744:	647b      	str	r3, [r7, #68]	@ 0x44
 8003746:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800374a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800374e:	f7fc fd59 	bl	8000204 <__aeabi_uldivmod>
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	4611      	mov	r1, r2
 8003758:	4b3b      	ldr	r3, [pc, #236]	@ (8003848 <UART_SetConfig+0x2d4>)
 800375a:	fba3 2301 	umull	r2, r3, r3, r1
 800375e:	095b      	lsrs	r3, r3, #5
 8003760:	2264      	movs	r2, #100	@ 0x64
 8003762:	fb02 f303 	mul.w	r3, r2, r3
 8003766:	1acb      	subs	r3, r1, r3
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800376e:	4b36      	ldr	r3, [pc, #216]	@ (8003848 <UART_SetConfig+0x2d4>)
 8003770:	fba3 2302 	umull	r2, r3, r3, r2
 8003774:	095b      	lsrs	r3, r3, #5
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800377c:	441c      	add	r4, r3
 800377e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003782:	2200      	movs	r2, #0
 8003784:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003788:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800378c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003790:	4642      	mov	r2, r8
 8003792:	464b      	mov	r3, r9
 8003794:	1891      	adds	r1, r2, r2
 8003796:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003798:	415b      	adcs	r3, r3
 800379a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800379c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80037a0:	4641      	mov	r1, r8
 80037a2:	1851      	adds	r1, r2, r1
 80037a4:	6339      	str	r1, [r7, #48]	@ 0x30
 80037a6:	4649      	mov	r1, r9
 80037a8:	414b      	adcs	r3, r1
 80037aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80037ac:	f04f 0200 	mov.w	r2, #0
 80037b0:	f04f 0300 	mov.w	r3, #0
 80037b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80037b8:	4659      	mov	r1, fp
 80037ba:	00cb      	lsls	r3, r1, #3
 80037bc:	4651      	mov	r1, sl
 80037be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037c2:	4651      	mov	r1, sl
 80037c4:	00ca      	lsls	r2, r1, #3
 80037c6:	4610      	mov	r0, r2
 80037c8:	4619      	mov	r1, r3
 80037ca:	4603      	mov	r3, r0
 80037cc:	4642      	mov	r2, r8
 80037ce:	189b      	adds	r3, r3, r2
 80037d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80037d4:	464b      	mov	r3, r9
 80037d6:	460a      	mov	r2, r1
 80037d8:	eb42 0303 	adc.w	r3, r2, r3
 80037dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80037e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80037ec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80037f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80037f4:	460b      	mov	r3, r1
 80037f6:	18db      	adds	r3, r3, r3
 80037f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037fa:	4613      	mov	r3, r2
 80037fc:	eb42 0303 	adc.w	r3, r2, r3
 8003800:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003802:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003806:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800380a:	f7fc fcfb 	bl	8000204 <__aeabi_uldivmod>
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	4b0d      	ldr	r3, [pc, #52]	@ (8003848 <UART_SetConfig+0x2d4>)
 8003814:	fba3 1302 	umull	r1, r3, r3, r2
 8003818:	095b      	lsrs	r3, r3, #5
 800381a:	2164      	movs	r1, #100	@ 0x64
 800381c:	fb01 f303 	mul.w	r3, r1, r3
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	3332      	adds	r3, #50	@ 0x32
 8003826:	4a08      	ldr	r2, [pc, #32]	@ (8003848 <UART_SetConfig+0x2d4>)
 8003828:	fba2 2303 	umull	r2, r3, r2, r3
 800382c:	095b      	lsrs	r3, r3, #5
 800382e:	f003 0207 	and.w	r2, r3, #7
 8003832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4422      	add	r2, r4
 800383a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800383c:	e106      	b.n	8003a4c <UART_SetConfig+0x4d8>
 800383e:	bf00      	nop
 8003840:	40011000 	.word	0x40011000
 8003844:	40011400 	.word	0x40011400
 8003848:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800384c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003850:	2200      	movs	r2, #0
 8003852:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003856:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800385a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800385e:	4642      	mov	r2, r8
 8003860:	464b      	mov	r3, r9
 8003862:	1891      	adds	r1, r2, r2
 8003864:	6239      	str	r1, [r7, #32]
 8003866:	415b      	adcs	r3, r3
 8003868:	627b      	str	r3, [r7, #36]	@ 0x24
 800386a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800386e:	4641      	mov	r1, r8
 8003870:	1854      	adds	r4, r2, r1
 8003872:	4649      	mov	r1, r9
 8003874:	eb43 0501 	adc.w	r5, r3, r1
 8003878:	f04f 0200 	mov.w	r2, #0
 800387c:	f04f 0300 	mov.w	r3, #0
 8003880:	00eb      	lsls	r3, r5, #3
 8003882:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003886:	00e2      	lsls	r2, r4, #3
 8003888:	4614      	mov	r4, r2
 800388a:	461d      	mov	r5, r3
 800388c:	4643      	mov	r3, r8
 800388e:	18e3      	adds	r3, r4, r3
 8003890:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003894:	464b      	mov	r3, r9
 8003896:	eb45 0303 	adc.w	r3, r5, r3
 800389a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800389e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80038aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	f04f 0300 	mov.w	r3, #0
 80038b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80038ba:	4629      	mov	r1, r5
 80038bc:	008b      	lsls	r3, r1, #2
 80038be:	4621      	mov	r1, r4
 80038c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038c4:	4621      	mov	r1, r4
 80038c6:	008a      	lsls	r2, r1, #2
 80038c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80038cc:	f7fc fc9a 	bl	8000204 <__aeabi_uldivmod>
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	4b60      	ldr	r3, [pc, #384]	@ (8003a58 <UART_SetConfig+0x4e4>)
 80038d6:	fba3 2302 	umull	r2, r3, r3, r2
 80038da:	095b      	lsrs	r3, r3, #5
 80038dc:	011c      	lsls	r4, r3, #4
 80038de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038e2:	2200      	movs	r2, #0
 80038e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80038e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80038ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80038f0:	4642      	mov	r2, r8
 80038f2:	464b      	mov	r3, r9
 80038f4:	1891      	adds	r1, r2, r2
 80038f6:	61b9      	str	r1, [r7, #24]
 80038f8:	415b      	adcs	r3, r3
 80038fa:	61fb      	str	r3, [r7, #28]
 80038fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003900:	4641      	mov	r1, r8
 8003902:	1851      	adds	r1, r2, r1
 8003904:	6139      	str	r1, [r7, #16]
 8003906:	4649      	mov	r1, r9
 8003908:	414b      	adcs	r3, r1
 800390a:	617b      	str	r3, [r7, #20]
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	f04f 0300 	mov.w	r3, #0
 8003914:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003918:	4659      	mov	r1, fp
 800391a:	00cb      	lsls	r3, r1, #3
 800391c:	4651      	mov	r1, sl
 800391e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003922:	4651      	mov	r1, sl
 8003924:	00ca      	lsls	r2, r1, #3
 8003926:	4610      	mov	r0, r2
 8003928:	4619      	mov	r1, r3
 800392a:	4603      	mov	r3, r0
 800392c:	4642      	mov	r2, r8
 800392e:	189b      	adds	r3, r3, r2
 8003930:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003934:	464b      	mov	r3, r9
 8003936:	460a      	mov	r2, r1
 8003938:	eb42 0303 	adc.w	r3, r2, r3
 800393c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	67bb      	str	r3, [r7, #120]	@ 0x78
 800394a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	f04f 0300 	mov.w	r3, #0
 8003954:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003958:	4649      	mov	r1, r9
 800395a:	008b      	lsls	r3, r1, #2
 800395c:	4641      	mov	r1, r8
 800395e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003962:	4641      	mov	r1, r8
 8003964:	008a      	lsls	r2, r1, #2
 8003966:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800396a:	f7fc fc4b 	bl	8000204 <__aeabi_uldivmod>
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	4611      	mov	r1, r2
 8003974:	4b38      	ldr	r3, [pc, #224]	@ (8003a58 <UART_SetConfig+0x4e4>)
 8003976:	fba3 2301 	umull	r2, r3, r3, r1
 800397a:	095b      	lsrs	r3, r3, #5
 800397c:	2264      	movs	r2, #100	@ 0x64
 800397e:	fb02 f303 	mul.w	r3, r2, r3
 8003982:	1acb      	subs	r3, r1, r3
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	3332      	adds	r3, #50	@ 0x32
 8003988:	4a33      	ldr	r2, [pc, #204]	@ (8003a58 <UART_SetConfig+0x4e4>)
 800398a:	fba2 2303 	umull	r2, r3, r2, r3
 800398e:	095b      	lsrs	r3, r3, #5
 8003990:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003994:	441c      	add	r4, r3
 8003996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800399a:	2200      	movs	r2, #0
 800399c:	673b      	str	r3, [r7, #112]	@ 0x70
 800399e:	677a      	str	r2, [r7, #116]	@ 0x74
 80039a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80039a4:	4642      	mov	r2, r8
 80039a6:	464b      	mov	r3, r9
 80039a8:	1891      	adds	r1, r2, r2
 80039aa:	60b9      	str	r1, [r7, #8]
 80039ac:	415b      	adcs	r3, r3
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039b4:	4641      	mov	r1, r8
 80039b6:	1851      	adds	r1, r2, r1
 80039b8:	6039      	str	r1, [r7, #0]
 80039ba:	4649      	mov	r1, r9
 80039bc:	414b      	adcs	r3, r1
 80039be:	607b      	str	r3, [r7, #4]
 80039c0:	f04f 0200 	mov.w	r2, #0
 80039c4:	f04f 0300 	mov.w	r3, #0
 80039c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80039cc:	4659      	mov	r1, fp
 80039ce:	00cb      	lsls	r3, r1, #3
 80039d0:	4651      	mov	r1, sl
 80039d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039d6:	4651      	mov	r1, sl
 80039d8:	00ca      	lsls	r2, r1, #3
 80039da:	4610      	mov	r0, r2
 80039dc:	4619      	mov	r1, r3
 80039de:	4603      	mov	r3, r0
 80039e0:	4642      	mov	r2, r8
 80039e2:	189b      	adds	r3, r3, r2
 80039e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039e6:	464b      	mov	r3, r9
 80039e8:	460a      	mov	r2, r1
 80039ea:	eb42 0303 	adc.w	r3, r2, r3
 80039ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80039fa:	667a      	str	r2, [r7, #100]	@ 0x64
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	f04f 0300 	mov.w	r3, #0
 8003a04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003a08:	4649      	mov	r1, r9
 8003a0a:	008b      	lsls	r3, r1, #2
 8003a0c:	4641      	mov	r1, r8
 8003a0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a12:	4641      	mov	r1, r8
 8003a14:	008a      	lsls	r2, r1, #2
 8003a16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003a1a:	f7fc fbf3 	bl	8000204 <__aeabi_uldivmod>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	460b      	mov	r3, r1
 8003a22:	4b0d      	ldr	r3, [pc, #52]	@ (8003a58 <UART_SetConfig+0x4e4>)
 8003a24:	fba3 1302 	umull	r1, r3, r3, r2
 8003a28:	095b      	lsrs	r3, r3, #5
 8003a2a:	2164      	movs	r1, #100	@ 0x64
 8003a2c:	fb01 f303 	mul.w	r3, r1, r3
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	3332      	adds	r3, #50	@ 0x32
 8003a36:	4a08      	ldr	r2, [pc, #32]	@ (8003a58 <UART_SetConfig+0x4e4>)
 8003a38:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3c:	095b      	lsrs	r3, r3, #5
 8003a3e:	f003 020f 	and.w	r2, r3, #15
 8003a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4422      	add	r2, r4
 8003a4a:	609a      	str	r2, [r3, #8]
}
 8003a4c:	bf00      	nop
 8003a4e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003a52:	46bd      	mov	sp, r7
 8003a54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a58:	51eb851f 	.word	0x51eb851f

08003a5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a5c:	b084      	sub	sp, #16
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b084      	sub	sp, #16
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
 8003a66:	f107 001c 	add.w	r0, r7, #28
 8003a6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a6e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d123      	bne.n	8003abe <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a7a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003a8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003a9e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d105      	bne.n	8003ab2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fa9a 	bl	8003fec <USB_CoreReset>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	73fb      	strb	r3, [r7, #15]
 8003abc:	e01b      	b.n	8003af6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 fa8e 	bl	8003fec <USB_CoreReset>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003ad4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d106      	bne.n	8003aea <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	639a      	str	r2, [r3, #56]	@ 0x38
 8003ae8:	e005      	b.n	8003af6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003af6:	7fbb      	ldrb	r3, [r7, #30]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d10b      	bne.n	8003b14 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f043 0206 	orr.w	r2, r3, #6
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f043 0220 	orr.w	r2, r3, #32
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b20:	b004      	add	sp, #16
 8003b22:	4770      	bx	lr

08003b24 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f023 0201 	bic.w	r2, r3, #1
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b084      	sub	sp, #16
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
 8003b4e:	460b      	mov	r3, r1
 8003b50:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003b62:	78fb      	ldrb	r3, [r7, #3]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d115      	bne.n	8003b94 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003b74:	200a      	movs	r0, #10
 8003b76:	f7fd fa2f 	bl	8000fd8 <HAL_Delay>
      ms += 10U;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	330a      	adds	r3, #10
 8003b7e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 fa25 	bl	8003fd0 <USB_GetMode>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d01e      	beq.n	8003bca <USB_SetCurrentMode+0x84>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003b90:	d9f0      	bls.n	8003b74 <USB_SetCurrentMode+0x2e>
 8003b92:	e01a      	b.n	8003bca <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003b94:	78fb      	ldrb	r3, [r7, #3]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d115      	bne.n	8003bc6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003ba6:	200a      	movs	r0, #10
 8003ba8:	f7fd fa16 	bl	8000fd8 <HAL_Delay>
      ms += 10U;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	330a      	adds	r3, #10
 8003bb0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 fa0c 	bl	8003fd0 <USB_GetMode>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d005      	beq.n	8003bca <USB_SetCurrentMode+0x84>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2bc7      	cmp	r3, #199	@ 0xc7
 8003bc2:	d9f0      	bls.n	8003ba6 <USB_SetCurrentMode+0x60>
 8003bc4:	e001      	b.n	8003bca <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e005      	b.n	8003bd6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2bc8      	cmp	r3, #200	@ 0xc8
 8003bce:	d101      	bne.n	8003bd4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e000      	b.n	8003bd6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
	...

08003be0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003be0:	b084      	sub	sp, #16
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b086      	sub	sp, #24
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
 8003bea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003bee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	613b      	str	r3, [r7, #16]
 8003bfe:	e009      	b.n	8003c14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	3340      	adds	r3, #64	@ 0x40
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4413      	add	r3, r2
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	3301      	adds	r3, #1
 8003c12:	613b      	str	r3, [r7, #16]
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	2b0e      	cmp	r3, #14
 8003c18:	d9f2      	bls.n	8003c00 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003c1a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d11c      	bne.n	8003c5c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c30:	f043 0302 	orr.w	r3, r3, #2
 8003c34:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c3a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	e005      	b.n	8003c68 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c60:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003c6e:	461a      	mov	r2, r3
 8003c70:	2300      	movs	r3, #0
 8003c72:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c74:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d10d      	bne.n	8003c98 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003c7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d104      	bne.n	8003c8e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003c84:	2100      	movs	r1, #0
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f968 	bl	8003f5c <USB_SetDevSpeed>
 8003c8c:	e008      	b.n	8003ca0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003c8e:	2101      	movs	r1, #1
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f963 	bl	8003f5c <USB_SetDevSpeed>
 8003c96:	e003      	b.n	8003ca0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003c98:	2103      	movs	r1, #3
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f95e 	bl	8003f5c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003ca0:	2110      	movs	r1, #16
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f8fa 	bl	8003e9c <USB_FlushTxFifo>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f924 	bl	8003f00 <USB_FlushRxFifo>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cc8:	461a      	mov	r2, r3
 8003cca:	2300      	movs	r3, #0
 8003ccc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	613b      	str	r3, [r7, #16]
 8003cea:	e043      	b.n	8003d74 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	015a      	lsls	r2, r3, #5
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003cfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d02:	d118      	bne.n	8003d36 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10a      	bne.n	8003d20 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	015a      	lsls	r2, r3, #5
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	4413      	add	r3, r2
 8003d12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d16:	461a      	mov	r2, r3
 8003d18:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003d1c:	6013      	str	r3, [r2, #0]
 8003d1e:	e013      	b.n	8003d48 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	015a      	lsls	r2, r3, #5
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	4413      	add	r3, r2
 8003d28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003d32:	6013      	str	r3, [r2, #0]
 8003d34:	e008      	b.n	8003d48 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	015a      	lsls	r2, r3, #5
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d42:	461a      	mov	r2, r3
 8003d44:	2300      	movs	r3, #0
 8003d46:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	015a      	lsls	r2, r3, #5
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	4413      	add	r3, r2
 8003d50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d54:	461a      	mov	r2, r3
 8003d56:	2300      	movs	r3, #0
 8003d58:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	015a      	lsls	r2, r3, #5
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4413      	add	r3, r2
 8003d62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d66:	461a      	mov	r2, r3
 8003d68:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003d6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	3301      	adds	r3, #1
 8003d72:	613b      	str	r3, [r7, #16]
 8003d74:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003d78:	461a      	mov	r2, r3
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d3b5      	bcc.n	8003cec <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d80:	2300      	movs	r3, #0
 8003d82:	613b      	str	r3, [r7, #16]
 8003d84:	e043      	b.n	8003e0e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	015a      	lsls	r2, r3, #5
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d9c:	d118      	bne.n	8003dd0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10a      	bne.n	8003dba <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003db0:	461a      	mov	r2, r3
 8003db2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003db6:	6013      	str	r3, [r2, #0]
 8003db8:	e013      	b.n	8003de2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	015a      	lsls	r2, r3, #5
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003dcc:	6013      	str	r3, [r2, #0]
 8003dce:	e008      	b.n	8003de2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	015a      	lsls	r2, r3, #5
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ddc:	461a      	mov	r2, r3
 8003dde:	2300      	movs	r3, #0
 8003de0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	015a      	lsls	r2, r3, #5
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	4413      	add	r3, r2
 8003dea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dee:	461a      	mov	r2, r3
 8003df0:	2300      	movs	r3, #0
 8003df2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e00:	461a      	mov	r2, r3
 8003e02:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003e06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	613b      	str	r3, [r7, #16]
 8003e0e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003e12:	461a      	mov	r2, r3
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d3b5      	bcc.n	8003d86 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e2c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003e3a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003e3c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d105      	bne.n	8003e50 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	f043 0210 	orr.w	r2, r3, #16
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	699a      	ldr	r2, [r3, #24]
 8003e54:	4b10      	ldr	r3, [pc, #64]	@ (8003e98 <USB_DevInit+0x2b8>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003e5c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d005      	beq.n	8003e70 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	f043 0208 	orr.w	r2, r3, #8
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003e70:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d107      	bne.n	8003e88 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e80:	f043 0304 	orr.w	r3, r3, #4
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e94:	b004      	add	sp, #16
 8003e96:	4770      	bx	lr
 8003e98:	803c3800 	.word	0x803c3800

08003e9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	3301      	adds	r3, #1
 8003eae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003eb6:	d901      	bls.n	8003ebc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e01b      	b.n	8003ef4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	daf2      	bge.n	8003eaa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	019b      	lsls	r3, r3, #6
 8003ecc:	f043 0220 	orr.w	r2, r3, #32
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003ee0:	d901      	bls.n	8003ee6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e006      	b.n	8003ef4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	f003 0320 	and.w	r3, r3, #32
 8003eee:	2b20      	cmp	r3, #32
 8003ef0:	d0f0      	beq.n	8003ed4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003f18:	d901      	bls.n	8003f1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e018      	b.n	8003f50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	daf2      	bge.n	8003f0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2210      	movs	r2, #16
 8003f2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	3301      	adds	r3, #1
 8003f34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003f3c:	d901      	bls.n	8003f42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e006      	b.n	8003f50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	f003 0310 	and.w	r3, r3, #16
 8003f4a:	2b10      	cmp	r3, #16
 8003f4c:	d0f0      	beq.n	8003f30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3714      	adds	r7, #20
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	460b      	mov	r3, r1
 8003f66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	78fb      	ldrb	r3, [r7, #3]
 8003f76:	68f9      	ldr	r1, [r7, #12]
 8003f78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b085      	sub	sp, #20
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003fa8:	f023 0303 	bic.w	r3, r3, #3
 8003fac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fbc:	f043 0302 	orr.w	r3, r3, #2
 8003fc0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	f003 0301 	and.w	r3, r3, #1
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004004:	d901      	bls.n	800400a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e01b      	b.n	8004042 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	2b00      	cmp	r3, #0
 8004010:	daf2      	bge.n	8003ff8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004012:	2300      	movs	r3, #0
 8004014:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	f043 0201 	orr.w	r2, r3, #1
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	3301      	adds	r3, #1
 8004026:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800402e:	d901      	bls.n	8004034 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e006      	b.n	8004042 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b01      	cmp	r3, #1
 800403e:	d0f0      	beq.n	8004022 <USB_CoreReset+0x36>

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <memset>:
 800404e:	4402      	add	r2, r0
 8004050:	4603      	mov	r3, r0
 8004052:	4293      	cmp	r3, r2
 8004054:	d100      	bne.n	8004058 <memset+0xa>
 8004056:	4770      	bx	lr
 8004058:	f803 1b01 	strb.w	r1, [r3], #1
 800405c:	e7f9      	b.n	8004052 <memset+0x4>
	...

08004060 <__libc_init_array>:
 8004060:	b570      	push	{r4, r5, r6, lr}
 8004062:	4d0d      	ldr	r5, [pc, #52]	@ (8004098 <__libc_init_array+0x38>)
 8004064:	4c0d      	ldr	r4, [pc, #52]	@ (800409c <__libc_init_array+0x3c>)
 8004066:	1b64      	subs	r4, r4, r5
 8004068:	10a4      	asrs	r4, r4, #2
 800406a:	2600      	movs	r6, #0
 800406c:	42a6      	cmp	r6, r4
 800406e:	d109      	bne.n	8004084 <__libc_init_array+0x24>
 8004070:	4d0b      	ldr	r5, [pc, #44]	@ (80040a0 <__libc_init_array+0x40>)
 8004072:	4c0c      	ldr	r4, [pc, #48]	@ (80040a4 <__libc_init_array+0x44>)
 8004074:	f000 f818 	bl	80040a8 <_init>
 8004078:	1b64      	subs	r4, r4, r5
 800407a:	10a4      	asrs	r4, r4, #2
 800407c:	2600      	movs	r6, #0
 800407e:	42a6      	cmp	r6, r4
 8004080:	d105      	bne.n	800408e <__libc_init_array+0x2e>
 8004082:	bd70      	pop	{r4, r5, r6, pc}
 8004084:	f855 3b04 	ldr.w	r3, [r5], #4
 8004088:	4798      	blx	r3
 800408a:	3601      	adds	r6, #1
 800408c:	e7ee      	b.n	800406c <__libc_init_array+0xc>
 800408e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004092:	4798      	blx	r3
 8004094:	3601      	adds	r6, #1
 8004096:	e7f2      	b.n	800407e <__libc_init_array+0x1e>
 8004098:	080040e0 	.word	0x080040e0
 800409c:	080040e0 	.word	0x080040e0
 80040a0:	080040e0 	.word	0x080040e0
 80040a4:	080040e4 	.word	0x080040e4

080040a8 <_init>:
 80040a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040aa:	bf00      	nop
 80040ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ae:	bc08      	pop	{r3}
 80040b0:	469e      	mov	lr, r3
 80040b2:	4770      	bx	lr

080040b4 <_fini>:
 80040b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b6:	bf00      	nop
 80040b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ba:	bc08      	pop	{r3}
 80040bc:	469e      	mov	lr, r3
 80040be:	4770      	bx	lr
