
lcr-meter-stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fd8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800519c  0800519c  0000619c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051b4  080051b4  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  080051b4  080051b4  000061b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051bc  080051bc  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051bc  080051bc  000061bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051c0  080051c0  000061c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080051c4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000634  2000000c  080051d0  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000640  080051d0  00007640  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000150d7  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c9d  00000000  00000000  0001c113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  0001edb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e94  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a8c  00000000  00000000  00020eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016be6  00000000  00000000  00044978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddff3  00000000  00000000  0005b55e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00139551  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005010  00000000  00000000  00139594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0013e5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005184 	.word	0x08005184

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08005184 	.word	0x08005184

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <AD9833_write>:

// MaKE SURE THIS IS DEFINED IN THE main.c FILE
extern SPI_HandleTypeDef hspi1; // SPI handle (Assuming SPI1 is used)


void AD9833_write(uint8_t data_high, uint8_t data_low) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	460a      	mov	r2, r1
 80004fe:	71fb      	strb	r3, [r7, #7]
 8000500:	4613      	mov	r3, r2
 8000502:	71bb      	strb	r3, [r7, #6]
    uint8_t data_out[2] = {data_high, data_low};
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	733b      	strb	r3, [r7, #12]
 8000508:	79bb      	ldrb	r3, [r7, #6]
 800050a:	737b      	strb	r3, [r7, #13]
    

    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;  // CPOL = 1 (Clock idle high)
 800050c:	4b10      	ldr	r3, [pc, #64]	@ (8000550 <AD9833_write+0x5c>)
 800050e:	2202      	movs	r2, #2
 8000510:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;       // CPHA = 0 (Sample on the falling edge)
 8000512:	4b0f      	ldr	r3, [pc, #60]	@ (8000550 <AD9833_write+0x5c>)
 8000514:	2200      	movs	r2, #0
 8000516:	615a      	str	r2, [r3, #20]
    HAL_SPI_Init(&hspi1); // Restart the SPI module
 8000518:	480d      	ldr	r0, [pc, #52]	@ (8000550 <AD9833_write+0x5c>)
 800051a:	f002 ff7f 	bl	800341c <HAL_SPI_Init>

    HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000524:	480b      	ldr	r0, [pc, #44]	@ (8000554 <AD9833_write+0x60>)
 8000526:	f001 fce1 	bl	8001eec <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data_out, 2, HAL_MAX_DELAY);
 800052a:	f107 010c 	add.w	r1, r7, #12
 800052e:	f04f 33ff 	mov.w	r3, #4294967295
 8000532:	2202      	movs	r2, #2
 8000534:	4806      	ldr	r0, [pc, #24]	@ (8000550 <AD9833_write+0x5c>)
 8000536:	f002 fffa 	bl	800352e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_SET);
 800053a:	2201      	movs	r2, #1
 800053c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000540:	4804      	ldr	r0, [pc, #16]	@ (8000554 <AD9833_write+0x60>)
 8000542:	f001 fcd3 	bl	8001eec <HAL_GPIO_WritePin>
}
 8000546:	bf00      	nop
 8000548:	3710      	adds	r7, #16
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000070 	.word	0x20000070
 8000554:	40020c00 	.word	0x40020c00

08000558 <AD9833_write4>:

void AD9833_write4(uint8_t data_l_high, uint8_t data_l_low, uint8_t data_h_high, uint8_t data_h_low) {
 8000558:	b590      	push	{r4, r7, lr}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	4604      	mov	r4, r0
 8000560:	4608      	mov	r0, r1
 8000562:	4611      	mov	r1, r2
 8000564:	461a      	mov	r2, r3
 8000566:	4623      	mov	r3, r4
 8000568:	71fb      	strb	r3, [r7, #7]
 800056a:	4603      	mov	r3, r0
 800056c:	71bb      	strb	r3, [r7, #6]
 800056e:	460b      	mov	r3, r1
 8000570:	717b      	strb	r3, [r7, #5]
 8000572:	4613      	mov	r3, r2
 8000574:	713b      	strb	r3, [r7, #4]
    uint8_t data_out[4] = {data_l_high, data_l_low, data_h_high, data_h_low};
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	733b      	strb	r3, [r7, #12]
 800057a:	79bb      	ldrb	r3, [r7, #6]
 800057c:	737b      	strb	r3, [r7, #13]
 800057e:	797b      	ldrb	r3, [r7, #5]
 8000580:	73bb      	strb	r3, [r7, #14]
 8000582:	793b      	ldrb	r3, [r7, #4]
 8000584:	73fb      	strb	r3, [r7, #15]

    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;  // CPOL = 1 (Clock idle high)
 8000586:	4b10      	ldr	r3, [pc, #64]	@ (80005c8 <AD9833_write4+0x70>)
 8000588:	2202      	movs	r2, #2
 800058a:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;       // CPHA = 0 (Sample on the falling edge)
 800058c:	4b0e      	ldr	r3, [pc, #56]	@ (80005c8 <AD9833_write4+0x70>)
 800058e:	2200      	movs	r2, #0
 8000590:	615a      	str	r2, [r3, #20]
    HAL_SPI_Init(&hspi1); // Restart the SPI module
 8000592:	480d      	ldr	r0, [pc, #52]	@ (80005c8 <AD9833_write4+0x70>)
 8000594:	f002 ff42 	bl	800341c <HAL_SPI_Init>

    HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800059e:	480b      	ldr	r0, [pc, #44]	@ (80005cc <AD9833_write4+0x74>)
 80005a0:	f001 fca4 	bl	8001eec <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data_out, 4, HAL_MAX_DELAY);
 80005a4:	f107 010c 	add.w	r1, r7, #12
 80005a8:	f04f 33ff 	mov.w	r3, #4294967295
 80005ac:	2204      	movs	r2, #4
 80005ae:	4806      	ldr	r0, [pc, #24]	@ (80005c8 <AD9833_write4+0x70>)
 80005b0:	f002 ffbd 	bl	800352e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005ba:	4804      	ldr	r0, [pc, #16]	@ (80005cc <AD9833_write4+0x74>)
 80005bc:	f001 fc96 	bl	8001eec <HAL_GPIO_WritePin>
}
 80005c0:	bf00      	nop
 80005c2:	3714      	adds	r7, #20
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd90      	pop	{r4, r7, pc}
 80005c8:	20000070 	.word	0x20000070
 80005cc:	40020c00 	.word	0x40020c00

080005d0 <AD9833_set_freq>:

void AD9833_set_freq(uint64_t f) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	e9c7 0100 	strd	r0, r1, [r7]
    AD9833_write(0b00100000, 0b10000000); // Control reg, start reset
 80005da:	2180      	movs	r1, #128	@ 0x80
 80005dc:	2020      	movs	r0, #32
 80005de:	f7ff ff89 	bl	80004f4 <AD9833_write>

    uint64_t FRQREG = (uint64_t)((f * (1 << 28)) / MASTER_CLK);
 80005e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80005e6:	f04f 0000 	mov.w	r0, #0
 80005ea:	f04f 0100 	mov.w	r1, #0
 80005ee:	0719      	lsls	r1, r3, #28
 80005f0:	ea41 1112 	orr.w	r1, r1, r2, lsr #4
 80005f4:	0710      	lsls	r0, r2, #28
 80005f6:	4a21      	ldr	r2, [pc, #132]	@ (800067c <AD9833_set_freq+0xac>)
 80005f8:	f04f 0300 	mov.w	r3, #0
 80005fc:	f7ff fe02 	bl	8000204 <__aeabi_uldivmod>
 8000600:	4602      	mov	r2, r0
 8000602:	460b      	mov	r3, r1
 8000604:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // Lower bytes
    uint16_t FL = FRQREG & 0x3FFF;
 8000608:	8a3b      	ldrh	r3, [r7, #16]
 800060a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800060e:	81fb      	strh	r3, [r7, #14]
    uint8_t Llb = FL & 0xFF;
 8000610:	89fb      	ldrh	r3, [r7, #14]
 8000612:	737b      	strb	r3, [r7, #13]
    uint8_t Lhb = ((FL >> 8) & 0x3F) | 0b01000000;
 8000614:	89fb      	ldrh	r3, [r7, #14]
 8000616:	0a1b      	lsrs	r3, r3, #8
 8000618:	b29b      	uxth	r3, r3
 800061a:	b25b      	sxtb	r3, r3
 800061c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000620:	b25b      	sxtb	r3, r3
 8000622:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000626:	b25b      	sxtb	r3, r3
 8000628:	733b      	strb	r3, [r7, #12]

    // Higher bytes
    uint16_t FH = (FRQREG >> 14) & 0x3FFF;
 800062a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800062e:	f04f 0200 	mov.w	r2, #0
 8000632:	f04f 0300 	mov.w	r3, #0
 8000636:	0b82      	lsrs	r2, r0, #14
 8000638:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 800063c:	0b8b      	lsrs	r3, r1, #14
 800063e:	b293      	uxth	r3, r2
 8000640:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000644:	817b      	strh	r3, [r7, #10]
    uint8_t Hlb = FH & 0xFF;
 8000646:	897b      	ldrh	r3, [r7, #10]
 8000648:	727b      	strb	r3, [r7, #9]
    uint8_t Hhb = ((FH >> 8) & 0x3F) | 0b01000000;
 800064a:	897b      	ldrh	r3, [r7, #10]
 800064c:	0a1b      	lsrs	r3, r3, #8
 800064e:	b29b      	uxth	r3, r3
 8000650:	b25b      	sxtb	r3, r3
 8000652:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000656:	b25b      	sxtb	r3, r3
 8000658:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800065c:	b25b      	sxtb	r3, r3
 800065e:	723b      	strb	r3, [r7, #8]

    AD9833_write4(Lhb, Llb, Hhb, Hlb);
 8000660:	7a7b      	ldrb	r3, [r7, #9]
 8000662:	7a3a      	ldrb	r2, [r7, #8]
 8000664:	7b79      	ldrb	r1, [r7, #13]
 8000666:	7b38      	ldrb	r0, [r7, #12]
 8000668:	f7ff ff76 	bl	8000558 <AD9833_write4>

    AD9833_write(0b00100000, 0b00000000); // Control reg, finish reset and configure IC
 800066c:	2100      	movs	r1, #0
 800066e:	2020      	movs	r0, #32
 8000670:	f7ff ff40 	bl	80004f4 <AD9833_write>
}
 8000674:	bf00      	nop
 8000676:	3718      	adds	r7, #24
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	000f4240 	.word	0x000f4240

08000680 <ADC_Channel0>:

// MaKE SURE THIS IS DEFINED IN THE main.c FILE
extern SPI_HandleTypeDef hspi1; // SPI handle (Assuming SPI1 is used)

// Function to read from ADC Channel 0 (CH0)
float ADC_Channel0(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af02      	add	r7, sp, #8
    uint8_t data_out[2] = { MCP3202_CH0, 0x00 };
 8000686:	23d0      	movs	r3, #208	@ 0xd0
 8000688:	80bb      	strh	r3, [r7, #4]
    uint8_t data_in[2] = { 0x00, 0x00 };
 800068a:	2300      	movs	r3, #0
 800068c:	803b      	strh	r3, [r7, #0]


    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;   // CPOL = 0 (Clock idle Low)
 800068e:	4b20      	ldr	r3, [pc, #128]	@ (8000710 <ADC_Channel0+0x90>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;       // CPHA = 0 (Sample on the falling edge)
 8000694:	4b1e      	ldr	r3, [pc, #120]	@ (8000710 <ADC_Channel0+0x90>)
 8000696:	2200      	movs	r2, #0
 8000698:	615a      	str	r2, [r3, #20]
    HAL_SPI_Init(&hspi1); // Restart the SPI module
 800069a:	481d      	ldr	r0, [pc, #116]	@ (8000710 <ADC_Channel0+0x90>)
 800069c:	f002 febe 	bl	800341c <HAL_SPI_Init>

    // Transmit and receive data via SPI
    HAL_GPIO_WritePin(MCP3202_NCS_GPIO_Port, MCP3202_NCS_Pin, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006a6:	481b      	ldr	r0, [pc, #108]	@ (8000714 <ADC_Channel0+0x94>)
 80006a8:	f001 fc20 	bl	8001eec <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, data_out, data_in, 2, HAL_MAX_DELAY);
 80006ac:	463a      	mov	r2, r7
 80006ae:	1d39      	adds	r1, r7, #4
 80006b0:	f04f 33ff 	mov.w	r3, #4294967295
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2302      	movs	r3, #2
 80006b8:	4815      	ldr	r0, [pc, #84]	@ (8000710 <ADC_Channel0+0x90>)
 80006ba:	f003 f87c 	bl	80037b6 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(MCP3202_NCS_GPIO_Port, MCP3202_NCS_Pin, GPIO_PIN_SET);
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006c4:	4813      	ldr	r0, [pc, #76]	@ (8000714 <ADC_Channel0+0x94>)
 80006c6:	f001 fc11 	bl	8001eec <HAL_GPIO_WritePin>

    // Combine the received bytes to form the 12-bit ADC value
    uint16_t adc_value = ((data_in[0] & 0x0F) << 8) | data_in[1];
 80006ca:	783b      	ldrb	r3, [r7, #0]
 80006cc:	021b      	lsls	r3, r3, #8
 80006ce:	b21b      	sxth	r3, r3
 80006d0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80006d4:	b21a      	sxth	r2, r3
 80006d6:	787b      	ldrb	r3, [r7, #1]
 80006d8:	b21b      	sxth	r3, r3
 80006da:	4313      	orrs	r3, r2
 80006dc:	b21b      	sxth	r3, r3
 80006de:	81fb      	strh	r3, [r7, #14]

    // Calculate the voltage based on the 3.3V reference and 12-bit ADC resolution
    float voltage = 3.3f * adc_value / (float)(1 << 12); // 12-bit resolution (2^12)
 80006e0:	89fb      	ldrh	r3, [r7, #14]
 80006e2:	ee07 3a90 	vmov	s15, r3
 80006e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006ea:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8000718 <ADC_Channel0+0x98>
 80006ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80006f2:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800071c <ADC_Channel0+0x9c>
 80006f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006fa:	edc7 7a02 	vstr	s15, [r7, #8]

    return voltage;
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	ee07 3a90 	vmov	s15, r3
}
 8000704:	eeb0 0a67 	vmov.f32	s0, s15
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000070 	.word	0x20000070
 8000714:	40020c00 	.word	0x40020c00
 8000718:	40533333 	.word	0x40533333
 800071c:	45800000 	.word	0x45800000

08000720 <ADC_Channel1>:

// Function to read from ADC Channel 1 (CH1)
float ADC_Channel1(void) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af02      	add	r7, sp, #8
    uint8_t data_out[2] = { MCP3202_CH1, 0x00 };
 8000726:	23f0      	movs	r3, #240	@ 0xf0
 8000728:	80bb      	strh	r3, [r7, #4]
    uint8_t data_in[2] = { 0x00, 0x00 };
 800072a:	2300      	movs	r3, #0
 800072c:	803b      	strh	r3, [r7, #0]


    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;   // CPOL = 0 (Clock idle Low)
 800072e:	4b20      	ldr	r3, [pc, #128]	@ (80007b0 <ADC_Channel1+0x90>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;       // CPHA = 0 (Sample on the falling edge)
 8000734:	4b1e      	ldr	r3, [pc, #120]	@ (80007b0 <ADC_Channel1+0x90>)
 8000736:	2200      	movs	r2, #0
 8000738:	615a      	str	r2, [r3, #20]
    HAL_SPI_Init(&hspi1); // Restart the SPI module
 800073a:	481d      	ldr	r0, [pc, #116]	@ (80007b0 <ADC_Channel1+0x90>)
 800073c:	f002 fe6e 	bl	800341c <HAL_SPI_Init>

    // Transmit and receive data via SPI
    HAL_GPIO_WritePin(MCP3202_NCS_GPIO_Port, MCP3202_NCS_Pin, GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000746:	481b      	ldr	r0, [pc, #108]	@ (80007b4 <ADC_Channel1+0x94>)
 8000748:	f001 fbd0 	bl	8001eec <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, data_out, data_in, 2, HAL_MAX_DELAY);
 800074c:	463a      	mov	r2, r7
 800074e:	1d39      	adds	r1, r7, #4
 8000750:	f04f 33ff 	mov.w	r3, #4294967295
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	2302      	movs	r3, #2
 8000758:	4815      	ldr	r0, [pc, #84]	@ (80007b0 <ADC_Channel1+0x90>)
 800075a:	f003 f82c 	bl	80037b6 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(MCP3202_NCS_GPIO_Port, MCP3202_NCS_Pin, GPIO_PIN_SET);
 800075e:	2201      	movs	r2, #1
 8000760:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000764:	4813      	ldr	r0, [pc, #76]	@ (80007b4 <ADC_Channel1+0x94>)
 8000766:	f001 fbc1 	bl	8001eec <HAL_GPIO_WritePin>

    // Combine the received bytes to form the 12-bit ADC value
    uint16_t adc_value = ((data_in[0] & 0x0F) << 8) | data_in[1];
 800076a:	783b      	ldrb	r3, [r7, #0]
 800076c:	021b      	lsls	r3, r3, #8
 800076e:	b21b      	sxth	r3, r3
 8000770:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000774:	b21a      	sxth	r2, r3
 8000776:	787b      	ldrb	r3, [r7, #1]
 8000778:	b21b      	sxth	r3, r3
 800077a:	4313      	orrs	r3, r2
 800077c:	b21b      	sxth	r3, r3
 800077e:	81fb      	strh	r3, [r7, #14]

    // Calculate the voltage based on the 3.3V reference and 12-bit ADC resolution
    float voltage = 3.3f * adc_value / (float)(1 << 12); // 12-bit resolution (2^12)
 8000780:	89fb      	ldrh	r3, [r7, #14]
 8000782:	ee07 3a90 	vmov	s15, r3
 8000786:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800078a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80007b8 <ADC_Channel1+0x98>
 800078e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000792:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80007bc <ADC_Channel1+0x9c>
 8000796:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800079a:	edc7 7a02 	vstr	s15, [r7, #8]

    return voltage;
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	ee07 3a90 	vmov	s15, r3
}
 80007a4:	eeb0 0a67 	vmov.f32	s0, s15
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000070 	.word	0x20000070
 80007b4:	40020c00 	.word	0x40020c00
 80007b8:	40533333 	.word	0x40533333
 80007bc:	45800000 	.word	0x45800000

080007c0 <Get_Time_us.0>:


  __HAL_TIM_SET_COUNTER(&htim2, 0);
  HAL_TIM_Base_Start(&htim2);

  uint32_t Get_Time_us(void) {
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	f8c7 c004 	str.w	ip, [r7, #4]
	    return __HAL_TIM_GET_COUNTER(&htim2); // Read timer
 80007ca:	4b04      	ldr	r3, [pc, #16]	@ (80007dc <Get_Time_us.0+0x1c>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  }
 80007d0:	4618      	mov	r0, r3
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	200000c8 	.word	0x200000c8

080007e0 <main>:
{
 80007e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80007e4:	b098      	sub	sp, #96	@ 0x60
 80007e6:	af00      	add	r7, sp, #0
int main(void)
 80007e8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80007ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_Init();
 80007ee:	f000 fdcf 	bl	8001390 <HAL_Init>
  SystemClock_Config();
 80007f2:	f000 f93d 	bl	8000a70 <SystemClock_Config>
  MX_GPIO_Init();
 80007f6:	f000 fad3 	bl	8000da0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007fa:	f000 fa79 	bl	8000cf0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007fe:	f000 faa1 	bl	8000d44 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000802:	f000 f9a1 	bl	8000b48 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000806:	f000 f9f1 	bl	8000bec <MX_SPI1_Init>
  MX_TIM2_Init();
 800080a:	f000 fa25 	bl	8000c58 <MX_TIM2_Init>
  AD9833_set_freq(1000);
 800080e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000812:	f04f 0100 	mov.w	r1, #0
 8000816:	f7ff fedb 	bl	80005d0 <AD9833_set_freq>
  int n_points = 5000;
 800081a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800081e:	657b      	str	r3, [r7, #84]	@ 0x54
  int sample_delay = 1;
 8000820:	2301      	movs	r3, #1
 8000822:	653b      	str	r3, [r7, #80]	@ 0x50
  int i = 0; // Array index counter
 8000824:	2300      	movs	r3, #0
 8000826:	65bb      	str	r3, [r7, #88]	@ 0x58
  float ch0_data[n_points];
 8000828:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800082a:	1e4b      	subs	r3, r1, #1
 800082c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800082e:	460a      	mov	r2, r1
 8000830:	2300      	movs	r3, #0
 8000832:	4614      	mov	r4, r2
 8000834:	461d      	mov	r5, r3
 8000836:	f04f 0200 	mov.w	r2, #0
 800083a:	f04f 0300 	mov.w	r3, #0
 800083e:	016b      	lsls	r3, r5, #5
 8000840:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000844:	0162      	lsls	r2, r4, #5
 8000846:	460a      	mov	r2, r1
 8000848:	2300      	movs	r3, #0
 800084a:	4690      	mov	r8, r2
 800084c:	4699      	mov	r9, r3
 800084e:	f04f 0200 	mov.w	r2, #0
 8000852:	f04f 0300 	mov.w	r3, #0
 8000856:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800085a:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800085e:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000862:	460b      	mov	r3, r1
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	3307      	adds	r3, #7
 8000868:	08db      	lsrs	r3, r3, #3
 800086a:	00db      	lsls	r3, r3, #3
 800086c:	ebad 0d03 	sub.w	sp, sp, r3
 8000870:	466b      	mov	r3, sp
 8000872:	3303      	adds	r3, #3
 8000874:	089b      	lsrs	r3, r3, #2
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	64bb      	str	r3, [r7, #72]	@ 0x48
  int ch0_time[n_points];
 800087a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800087c:	1e4b      	subs	r3, r1, #1
 800087e:	647b      	str	r3, [r7, #68]	@ 0x44
 8000880:	460a      	mov	r2, r1
 8000882:	2300      	movs	r3, #0
 8000884:	4692      	mov	sl, r2
 8000886:	469b      	mov	fp, r3
 8000888:	f04f 0200 	mov.w	r2, #0
 800088c:	f04f 0300 	mov.w	r3, #0
 8000890:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8000894:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8000898:	ea4f 124a 	mov.w	r2, sl, lsl #5
 800089c:	460a      	mov	r2, r1
 800089e:	2300      	movs	r3, #0
 80008a0:	623a      	str	r2, [r7, #32]
 80008a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80008a4:	f04f 0200 	mov.w	r2, #0
 80008a8:	f04f 0300 	mov.w	r3, #0
 80008ac:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80008b0:	4628      	mov	r0, r5
 80008b2:	0143      	lsls	r3, r0, #5
 80008b4:	4620      	mov	r0, r4
 80008b6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80008ba:	4620      	mov	r0, r4
 80008bc:	0142      	lsls	r2, r0, #5
 80008be:	460b      	mov	r3, r1
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	3307      	adds	r3, #7
 80008c4:	08db      	lsrs	r3, r3, #3
 80008c6:	00db      	lsls	r3, r3, #3
 80008c8:	ebad 0d03 	sub.w	sp, sp, r3
 80008cc:	466b      	mov	r3, sp
 80008ce:	3303      	adds	r3, #3
 80008d0:	089b      	lsrs	r3, r3, #2
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	643b      	str	r3, [r7, #64]	@ 0x40
  memset(ch0_data, 0, n_points);  // Set all bytes in the array to 0
 80008d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80008d8:	461a      	mov	r2, r3
 80008da:	2100      	movs	r1, #0
 80008dc:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80008de:	f004 fc24 	bl	800512a <memset>
  memset(ch0_time, 0, n_points);  // Set all bytes in the array to 0\
 80008e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80008e4:	461a      	mov	r2, r3
 80008e6:	2100      	movs	r1, #0
 80008e8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80008ea:	f004 fc1e 	bl	800512a <memset>
  float ch1_data[n_points];
 80008ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80008f0:	1e4b      	subs	r3, r1, #1
 80008f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80008f4:	460a      	mov	r2, r1
 80008f6:	2300      	movs	r3, #0
 80008f8:	61ba      	str	r2, [r7, #24]
 80008fa:	61fb      	str	r3, [r7, #28]
 80008fc:	f04f 0200 	mov.w	r2, #0
 8000900:	f04f 0300 	mov.w	r3, #0
 8000904:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8000908:	4628      	mov	r0, r5
 800090a:	0143      	lsls	r3, r0, #5
 800090c:	4620      	mov	r0, r4
 800090e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000912:	4620      	mov	r0, r4
 8000914:	0142      	lsls	r2, r0, #5
 8000916:	460a      	mov	r2, r1
 8000918:	2300      	movs	r3, #0
 800091a:	613a      	str	r2, [r7, #16]
 800091c:	617b      	str	r3, [r7, #20]
 800091e:	f04f 0200 	mov.w	r2, #0
 8000922:	f04f 0300 	mov.w	r3, #0
 8000926:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800092a:	4628      	mov	r0, r5
 800092c:	0143      	lsls	r3, r0, #5
 800092e:	4620      	mov	r0, r4
 8000930:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000934:	4620      	mov	r0, r4
 8000936:	0142      	lsls	r2, r0, #5
 8000938:	460b      	mov	r3, r1
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	3307      	adds	r3, #7
 800093e:	08db      	lsrs	r3, r3, #3
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	ebad 0d03 	sub.w	sp, sp, r3
 8000946:	466b      	mov	r3, sp
 8000948:	3303      	adds	r3, #3
 800094a:	089b      	lsrs	r3, r3, #2
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	63bb      	str	r3, [r7, #56]	@ 0x38
  int ch1_time[n_points];
 8000950:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8000952:	1e4b      	subs	r3, r1, #1
 8000954:	637b      	str	r3, [r7, #52]	@ 0x34
 8000956:	460a      	mov	r2, r1
 8000958:	2300      	movs	r3, #0
 800095a:	60ba      	str	r2, [r7, #8]
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	f04f 0200 	mov.w	r2, #0
 8000962:	f04f 0300 	mov.w	r3, #0
 8000966:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800096a:	4628      	mov	r0, r5
 800096c:	0143      	lsls	r3, r0, #5
 800096e:	4620      	mov	r0, r4
 8000970:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000974:	4620      	mov	r0, r4
 8000976:	0142      	lsls	r2, r0, #5
 8000978:	460a      	mov	r2, r1
 800097a:	2300      	movs	r3, #0
 800097c:	603a      	str	r2, [r7, #0]
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	f04f 0200 	mov.w	r2, #0
 8000984:	f04f 0300 	mov.w	r3, #0
 8000988:	e9d7 4500 	ldrd	r4, r5, [r7]
 800098c:	4628      	mov	r0, r5
 800098e:	0143      	lsls	r3, r0, #5
 8000990:	4620      	mov	r0, r4
 8000992:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000996:	4620      	mov	r0, r4
 8000998:	0142      	lsls	r2, r0, #5
 800099a:	460b      	mov	r3, r1
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	3307      	adds	r3, #7
 80009a0:	08db      	lsrs	r3, r3, #3
 80009a2:	00db      	lsls	r3, r3, #3
 80009a4:	ebad 0d03 	sub.w	sp, sp, r3
 80009a8:	466b      	mov	r3, sp
 80009aa:	3303      	adds	r3, #3
 80009ac:	089b      	lsrs	r3, r3, #2
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	633b      	str	r3, [r7, #48]	@ 0x30
  memset(ch1_time, 0, n_points);  // Set all bytes in the array to 0
 80009b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80009b4:	461a      	mov	r2, r3
 80009b6:	2100      	movs	r1, #0
 80009b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80009ba:	f004 fbb6 	bl	800512a <memset>
  memset(ch1_data, 0, n_points);  // Set all bytes in the array to 0
 80009be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80009c0:	461a      	mov	r2, r3
 80009c2:	2100      	movs	r1, #0
 80009c4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80009c6:	f004 fbb0 	bl	800512a <memset>
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80009ca:	4b28      	ldr	r3, [pc, #160]	@ (8000a6c <main+0x28c>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2200      	movs	r2, #0
 80009d0:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start(&htim2);
 80009d2:	4826      	ldr	r0, [pc, #152]	@ (8000a6c <main+0x28c>)
 80009d4:	f003 f9c4 	bl	8003d60 <HAL_TIM_Base_Start>

  start_time = Get_Time_us();
 80009d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009dc:	469c      	mov	ip, r3
 80009de:	f7ff feef 	bl	80007c0 <Get_Time_us.0>
 80009e2:	65f8      	str	r0, [r7, #92]	@ 0x5c
//	  HAL_Delay(1000);
//	  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
//	  HAL_Delay(1000);

//	  HAL_Delay(sample_delay);
	  ch0_data[i] = ADC_Channel0();
 80009e4:	f7ff fe4c 	bl	8000680 <ADC_Channel0>
 80009e8:	eef0 7a40 	vmov.f32	s15, s0
 80009ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80009ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	4413      	add	r3, r2
 80009f4:	edc3 7a00 	vstr	s15, [r3]
	  ch0_time[i] = Get_Time_us() - start_time;
 80009f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009fc:	469c      	mov	ip, r3
 80009fe:	f7ff fedf 	bl	80007c0 <Get_Time_us.0>
 8000a02:	4602      	mov	r2, r0
 8000a04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a06:	1ad3      	subs	r3, r2, r3
 8000a08:	4619      	mov	r1, r3
 8000a0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000a0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
//	  HAL_Delay(sample_delay);
	  ch1_data[i] = ADC_Channel1();
 8000a12:	f7ff fe85 	bl	8000720 <ADC_Channel1>
 8000a16:	eef0 7a40 	vmov.f32	s15, s0
 8000a1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000a1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	4413      	add	r3, r2
 8000a22:	edc3 7a00 	vstr	s15, [r3]
	  ch1_time[i] = Get_Time_us() - start_time;
 8000a26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a2a:	469c      	mov	ip, r3
 8000a2c:	f7ff fec8 	bl	80007c0 <Get_Time_us.0>
 8000a30:	4602      	mov	r2, r0
 8000a32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	4619      	mov	r1, r3
 8000a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a3a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  i++;
 8000a40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000a42:	3301      	adds	r3, #1
 8000a44:	65bb      	str	r3, [r7, #88]	@ 0x58
	  if (i >= n_points - 1 ) {
 8000a46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a48:	3b01      	subs	r3, #1
 8000a4a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	dbc9      	blt.n	80009e4 <main+0x204>
		  i = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	65bb      	str	r3, [r7, #88]	@ 0x58
		  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000a54:	4b05      	ldr	r3, [pc, #20]	@ (8000a6c <main+0x28c>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	625a      	str	r2, [r3, #36]	@ 0x24
		  start_time = Get_Time_us();
 8000a5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a60:	469c      	mov	ip, r3
 8000a62:	f7ff fead 	bl	80007c0 <Get_Time_us.0>
 8000a66:	65f8      	str	r0, [r7, #92]	@ 0x5c
	  ch0_data[i] = ADC_Channel0();
 8000a68:	e7bc      	b.n	80009e4 <main+0x204>
 8000a6a:	bf00      	nop
 8000a6c:	200000c8 	.word	0x200000c8

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b094      	sub	sp, #80	@ 0x50
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	2234      	movs	r2, #52	@ 0x34
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f004 fb53 	bl	800512a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	f107 0308 	add.w	r3, r7, #8
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a94:	2300      	movs	r3, #0
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	4b29      	ldr	r3, [pc, #164]	@ (8000b40 <SystemClock_Config+0xd0>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9c:	4a28      	ldr	r2, [pc, #160]	@ (8000b40 <SystemClock_Config+0xd0>)
 8000a9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa4:	4b26      	ldr	r3, [pc, #152]	@ (8000b40 <SystemClock_Config+0xd0>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	4b23      	ldr	r3, [pc, #140]	@ (8000b44 <SystemClock_Config+0xd4>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a22      	ldr	r2, [pc, #136]	@ (8000b44 <SystemClock_Config+0xd4>)
 8000aba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	4b20      	ldr	r3, [pc, #128]	@ (8000b44 <SystemClock_Config+0xd4>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000acc:	2301      	movs	r3, #1
 8000ace:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ad0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000ad4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ada:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ade:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ae4:	23a8      	movs	r3, #168	@ 0xa8
 8000ae6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000aec:	2307      	movs	r3, #7
 8000aee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000af0:	2302      	movs	r3, #2
 8000af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	4618      	mov	r0, r3
 8000afa:	f002 f9f1 	bl	8002ee0 <HAL_RCC_OscConfig>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b04:	f000 fa2e 	bl	8000f64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b08:	230f      	movs	r3, #15
 8000b0a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b14:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b1e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b20:	f107 0308 	add.w	r3, r7, #8
 8000b24:	2105      	movs	r1, #5
 8000b26:	4618      	mov	r0, r3
 8000b28:	f001 fb66 	bl	80021f8 <HAL_RCC_ClockConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b32:	f000 fa17 	bl	8000f64 <Error_Handler>
  }
}
 8000b36:	bf00      	nop
 8000b38:	3750      	adds	r7, #80	@ 0x50
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40007000 	.word	0x40007000

08000b48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b4e:	463b      	mov	r3, r7
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b5a:	4b21      	ldr	r3, [pc, #132]	@ (8000be0 <MX_ADC1_Init+0x98>)
 8000b5c:	4a21      	ldr	r2, [pc, #132]	@ (8000be4 <MX_ADC1_Init+0x9c>)
 8000b5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b60:	4b1f      	ldr	r3, [pc, #124]	@ (8000be0 <MX_ADC1_Init+0x98>)
 8000b62:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b66:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b68:	4b1d      	ldr	r3, [pc, #116]	@ (8000be0 <MX_ADC1_Init+0x98>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000be0 <MX_ADC1_Init+0x98>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b74:	4b1a      	ldr	r3, [pc, #104]	@ (8000be0 <MX_ADC1_Init+0x98>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b7a:	4b19      	ldr	r3, [pc, #100]	@ (8000be0 <MX_ADC1_Init+0x98>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b82:	4b17      	ldr	r3, [pc, #92]	@ (8000be0 <MX_ADC1_Init+0x98>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b88:	4b15      	ldr	r3, [pc, #84]	@ (8000be0 <MX_ADC1_Init+0x98>)
 8000b8a:	4a17      	ldr	r2, [pc, #92]	@ (8000be8 <MX_ADC1_Init+0xa0>)
 8000b8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b8e:	4b14      	ldr	r3, [pc, #80]	@ (8000be0 <MX_ADC1_Init+0x98>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b94:	4b12      	ldr	r3, [pc, #72]	@ (8000be0 <MX_ADC1_Init+0x98>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b9a:	4b11      	ldr	r3, [pc, #68]	@ (8000be0 <MX_ADC1_Init+0x98>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8000be0 <MX_ADC1_Init+0x98>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ba8:	480d      	ldr	r0, [pc, #52]	@ (8000be0 <MX_ADC1_Init+0x98>)
 8000baa:	f000 fc87 	bl	80014bc <HAL_ADC_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000bb4:	f000 f9d6 	bl	8000f64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000bb8:	2309      	movs	r3, #9
 8000bba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4805      	ldr	r0, [pc, #20]	@ (8000be0 <MX_ADC1_Init+0x98>)
 8000bca:	f000 fcbb 	bl	8001544 <HAL_ADC_ConfigChannel>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000bd4:	f000 f9c6 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bd8:	bf00      	nop
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000028 	.word	0x20000028
 8000be4:	40012000 	.word	0x40012000
 8000be8:	0f000001 	.word	0x0f000001

08000bec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bf0:	4b17      	ldr	r3, [pc, #92]	@ (8000c50 <MX_SPI1_Init+0x64>)
 8000bf2:	4a18      	ldr	r2, [pc, #96]	@ (8000c54 <MX_SPI1_Init+0x68>)
 8000bf4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bf6:	4b16      	ldr	r3, [pc, #88]	@ (8000c50 <MX_SPI1_Init+0x64>)
 8000bf8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000bfc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bfe:	4b14      	ldr	r3, [pc, #80]	@ (8000c50 <MX_SPI1_Init+0x64>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c04:	4b12      	ldr	r3, [pc, #72]	@ (8000c50 <MX_SPI1_Init+0x64>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c0a:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <MX_SPI1_Init+0x64>)
 8000c0c:	2202      	movs	r2, #2
 8000c0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c10:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <MX_SPI1_Init+0x64>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	@ (8000c50 <MX_SPI1_Init+0x64>)
 8000c18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <MX_SPI1_Init+0x64>)
 8000c20:	2230      	movs	r2, #48	@ 0x30
 8000c22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c24:	4b0a      	ldr	r3, [pc, #40]	@ (8000c50 <MX_SPI1_Init+0x64>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c2a:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <MX_SPI1_Init+0x64>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c30:	4b07      	ldr	r3, [pc, #28]	@ (8000c50 <MX_SPI1_Init+0x64>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c36:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <MX_SPI1_Init+0x64>)
 8000c38:	220a      	movs	r2, #10
 8000c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c3c:	4804      	ldr	r0, [pc, #16]	@ (8000c50 <MX_SPI1_Init+0x64>)
 8000c3e:	f002 fbed 	bl	800341c <HAL_SPI_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c48:	f000 f98c 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000070 	.word	0x20000070
 8000c54:	40013000 	.word	0x40013000

08000c58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5e:	f107 0308 	add.w	r3, r7, #8
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6c:	463b      	mov	r3, r7
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c74:	4b1d      	ldr	r3, [pc, #116]	@ (8000cec <MX_TIM2_Init+0x94>)
 8000c76:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cec <MX_TIM2_Init+0x94>)
 8000c7e:	22a7      	movs	r2, #167	@ 0xa7
 8000c80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c82:	4b1a      	ldr	r3, [pc, #104]	@ (8000cec <MX_TIM2_Init+0x94>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c88:	4b18      	ldr	r3, [pc, #96]	@ (8000cec <MX_TIM2_Init+0x94>)
 8000c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c90:	4b16      	ldr	r3, [pc, #88]	@ (8000cec <MX_TIM2_Init+0x94>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c96:	4b15      	ldr	r3, [pc, #84]	@ (8000cec <MX_TIM2_Init+0x94>)
 8000c98:	2280      	movs	r2, #128	@ 0x80
 8000c9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c9c:	4813      	ldr	r0, [pc, #76]	@ (8000cec <MX_TIM2_Init+0x94>)
 8000c9e:	f003 f80f 	bl	8003cc0 <HAL_TIM_Base_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ca8:	f000 f95c 	bl	8000f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cb2:	f107 0308 	add.w	r3, r7, #8
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	480c      	ldr	r0, [pc, #48]	@ (8000cec <MX_TIM2_Init+0x94>)
 8000cba:	f003 f9a9 	bl	8004010 <HAL_TIM_ConfigClockSource>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000cc4:	f000 f94e 	bl	8000f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cd0:	463b      	mov	r3, r7
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4805      	ldr	r0, [pc, #20]	@ (8000cec <MX_TIM2_Init+0x94>)
 8000cd6:	f003 fbdb 	bl	8004490 <HAL_TIMEx_MasterConfigSynchronization>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ce0:	f000 f940 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	3718      	adds	r7, #24
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	200000c8 	.word	0x200000c8

08000cf0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <MX_USART3_UART_Init+0x4c>)
 8000cf6:	4a12      	ldr	r2, [pc, #72]	@ (8000d40 <MX_USART3_UART_Init+0x50>)
 8000cf8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cfa:	4b10      	ldr	r3, [pc, #64]	@ (8000d3c <MX_USART3_UART_Init+0x4c>)
 8000cfc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <MX_USART3_UART_Init+0x4c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <MX_USART3_UART_Init+0x4c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <MX_USART3_UART_Init+0x4c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d14:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <MX_USART3_UART_Init+0x4c>)
 8000d16:	220c      	movs	r2, #12
 8000d18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1a:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <MX_USART3_UART_Init+0x4c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d20:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <MX_USART3_UART_Init+0x4c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d26:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <MX_USART3_UART_Init+0x4c>)
 8000d28:	f003 fc42 	bl	80045b0 <HAL_UART_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d32:	f000 f917 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000110 	.word	0x20000110
 8000d40:	40004800 	.word	0x40004800

08000d44 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d48:	4b14      	ldr	r3, [pc, #80]	@ (8000d9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d4a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000d4e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d50:	4b12      	ldr	r3, [pc, #72]	@ (8000d9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d52:	2206      	movs	r2, #6
 8000d54:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d56:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d58:	2202      	movs	r2, #2
 8000d5a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d64:	2202      	movs	r2, #2
 8000d66:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d74:	4b09      	ldr	r3, [pc, #36]	@ (8000d9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d80:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	@ (8000d9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d88:	f001 f8fc 	bl	8001f84 <HAL_PCD_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000d92:	f000 f8e7 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000158 	.word	0x20000158

08000da0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08c      	sub	sp, #48	@ 0x30
 8000da4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
 8000db4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	61bb      	str	r3, [r7, #24]
 8000dba:	4b5d      	ldr	r3, [pc, #372]	@ (8000f30 <MX_GPIO_Init+0x190>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	4a5c      	ldr	r2, [pc, #368]	@ (8000f30 <MX_GPIO_Init+0x190>)
 8000dc0:	f043 0304 	orr.w	r3, r3, #4
 8000dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc6:	4b5a      	ldr	r3, [pc, #360]	@ (8000f30 <MX_GPIO_Init+0x190>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	f003 0304 	and.w	r3, r3, #4
 8000dce:	61bb      	str	r3, [r7, #24]
 8000dd0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
 8000dd6:	4b56      	ldr	r3, [pc, #344]	@ (8000f30 <MX_GPIO_Init+0x190>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	4a55      	ldr	r2, [pc, #340]	@ (8000f30 <MX_GPIO_Init+0x190>)
 8000ddc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de2:	4b53      	ldr	r3, [pc, #332]	@ (8000f30 <MX_GPIO_Init+0x190>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	4b4f      	ldr	r3, [pc, #316]	@ (8000f30 <MX_GPIO_Init+0x190>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	4a4e      	ldr	r2, [pc, #312]	@ (8000f30 <MX_GPIO_Init+0x190>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfe:	4b4c      	ldr	r3, [pc, #304]	@ (8000f30 <MX_GPIO_Init+0x190>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	4b48      	ldr	r3, [pc, #288]	@ (8000f30 <MX_GPIO_Init+0x190>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	4a47      	ldr	r2, [pc, #284]	@ (8000f30 <MX_GPIO_Init+0x190>)
 8000e14:	f043 0302 	orr.w	r3, r3, #2
 8000e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1a:	4b45      	ldr	r3, [pc, #276]	@ (8000f30 <MX_GPIO_Init+0x190>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	4b41      	ldr	r3, [pc, #260]	@ (8000f30 <MX_GPIO_Init+0x190>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	4a40      	ldr	r2, [pc, #256]	@ (8000f30 <MX_GPIO_Init+0x190>)
 8000e30:	f043 0308 	orr.w	r3, r3, #8
 8000e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e36:	4b3e      	ldr	r3, [pc, #248]	@ (8000f30 <MX_GPIO_Init+0x190>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	f003 0308 	and.w	r3, r3, #8
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	4b3a      	ldr	r3, [pc, #232]	@ (8000f30 <MX_GPIO_Init+0x190>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	4a39      	ldr	r2, [pc, #228]	@ (8000f30 <MX_GPIO_Init+0x190>)
 8000e4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e52:	4b37      	ldr	r3, [pc, #220]	@ (8000f30 <MX_GPIO_Init+0x190>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000e64:	4833      	ldr	r0, [pc, #204]	@ (8000f34 <MX_GPIO_Init+0x194>)
 8000e66:	f001 f841 	bl	8001eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e70:	4831      	ldr	r0, [pc, #196]	@ (8000f38 <MX_GPIO_Init+0x198>)
 8000e72:	f001 f83b 	bl	8001eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCP3202_NCS_GPIO_Port, MCP3202_NCS_Pin, GPIO_PIN_SET);
 8000e76:	2201      	movs	r2, #1
 8000e78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e7c:	482e      	ldr	r0, [pc, #184]	@ (8000f38 <MX_GPIO_Init+0x198>)
 8000e7e:	f001 f835 	bl	8001eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2140      	movs	r1, #64	@ 0x40
 8000e86:	482d      	ldr	r0, [pc, #180]	@ (8000f3c <MX_GPIO_Init+0x19c>)
 8000e88:	f001 f830 	bl	8001eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e92:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 031c 	add.w	r3, r7, #28
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4827      	ldr	r0, [pc, #156]	@ (8000f40 <MX_GPIO_Init+0x1a0>)
 8000ea4:	f000 fe8e 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ea8:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000eac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eba:	f107 031c 	add.w	r3, r7, #28
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	481c      	ldr	r0, [pc, #112]	@ (8000f34 <MX_GPIO_Init+0x194>)
 8000ec2:	f000 fe7f 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD9833_NCS_Pin MCP3202_NCS_Pin */
  GPIO_InitStruct.Pin = AD9833_NCS_Pin|MCP3202_NCS_Pin;
 8000ec6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000eca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed8:	f107 031c 	add.w	r3, r7, #28
 8000edc:	4619      	mov	r1, r3
 8000ede:	4816      	ldr	r0, [pc, #88]	@ (8000f38 <MX_GPIO_Init+0x198>)
 8000ee0:	f000 fe70 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ee4:	2340      	movs	r3, #64	@ 0x40
 8000ee6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ef4:	f107 031c 	add.w	r3, r7, #28
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4810      	ldr	r0, [pc, #64]	@ (8000f3c <MX_GPIO_Init+0x19c>)
 8000efc:	f000 fe62 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f00:	2380      	movs	r3, #128	@ 0x80
 8000f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f04:	2300      	movs	r3, #0
 8000f06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	4619      	mov	r1, r3
 8000f12:	480a      	ldr	r0, [pc, #40]	@ (8000f3c <MX_GPIO_Init+0x19c>)
 8000f14:	f000 fe56 	bl	8001bc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	2028      	movs	r0, #40	@ 0x28
 8000f1e:	f000 fe1a 	bl	8001b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f22:	2028      	movs	r0, #40	@ 0x28
 8000f24:	f000 fe33 	bl	8001b8e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f28:	bf00      	nop
 8000f2a:	3730      	adds	r7, #48	@ 0x30
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40020400 	.word	0x40020400
 8000f38:	40020c00 	.word	0x40020c00
 8000f3c:	40021800 	.word	0x40021800
 8000f40:	40020800 	.word	0x40020800

08000f44 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin);
 8000f4e:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000f52:	4803      	ldr	r0, [pc, #12]	@ (8000f60 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000f54:	f000 ffe3 	bl	8001f1e <HAL_GPIO_TogglePin>
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40020400 	.word	0x40020400

08000f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f68:	b672      	cpsid	i
}
 8000f6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <Error_Handler+0x8>

08000f70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <HAL_MspInit+0x4c>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000fbc <HAL_MspInit+0x4c>)
 8000f80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f86:	4b0d      	ldr	r3, [pc, #52]	@ (8000fbc <HAL_MspInit+0x4c>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	603b      	str	r3, [r7, #0]
 8000f96:	4b09      	ldr	r3, [pc, #36]	@ (8000fbc <HAL_MspInit+0x4c>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9a:	4a08      	ldr	r2, [pc, #32]	@ (8000fbc <HAL_MspInit+0x4c>)
 8000f9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fa2:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <HAL_MspInit+0x4c>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000faa:	603b      	str	r3, [r7, #0]
 8000fac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	40023800 	.word	0x40023800

08000fc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	@ 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a17      	ldr	r2, [pc, #92]	@ (800103c <HAL_ADC_MspInit+0x7c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d127      	bne.n	8001032 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	4b16      	ldr	r3, [pc, #88]	@ (8001040 <HAL_ADC_MspInit+0x80>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fea:	4a15      	ldr	r2, [pc, #84]	@ (8001040 <HAL_ADC_MspInit+0x80>)
 8000fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ff0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ff2:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <HAL_ADC_MspInit+0x80>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	4b0f      	ldr	r3, [pc, #60]	@ (8001040 <HAL_ADC_MspInit+0x80>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	4a0e      	ldr	r2, [pc, #56]	@ (8001040 <HAL_ADC_MspInit+0x80>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	6313      	str	r3, [r2, #48]	@ 0x30
 800100e:	4b0c      	ldr	r3, [pc, #48]	@ (8001040 <HAL_ADC_MspInit+0x80>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800101a:	2302      	movs	r3, #2
 800101c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800101e:	2303      	movs	r3, #3
 8001020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	4805      	ldr	r0, [pc, #20]	@ (8001044 <HAL_ADC_MspInit+0x84>)
 800102e:	f000 fdc9 	bl	8001bc4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001032:	bf00      	nop
 8001034:	3728      	adds	r7, #40	@ 0x28
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40012000 	.word	0x40012000
 8001040:	40023800 	.word	0x40023800
 8001044:	40020400 	.word	0x40020400

08001048 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	@ 0x28
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a19      	ldr	r2, [pc, #100]	@ (80010cc <HAL_SPI_MspInit+0x84>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d12b      	bne.n	80010c2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	4b18      	ldr	r3, [pc, #96]	@ (80010d0 <HAL_SPI_MspInit+0x88>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001072:	4a17      	ldr	r2, [pc, #92]	@ (80010d0 <HAL_SPI_MspInit+0x88>)
 8001074:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001078:	6453      	str	r3, [r2, #68]	@ 0x44
 800107a:	4b15      	ldr	r3, [pc, #84]	@ (80010d0 <HAL_SPI_MspInit+0x88>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4b11      	ldr	r3, [pc, #68]	@ (80010d0 <HAL_SPI_MspInit+0x88>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	4a10      	ldr	r2, [pc, #64]	@ (80010d0 <HAL_SPI_MspInit+0x88>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6313      	str	r3, [r2, #48]	@ 0x30
 8001096:	4b0e      	ldr	r3, [pc, #56]	@ (80010d0 <HAL_SPI_MspInit+0x88>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80010a2:	23e0      	movs	r3, #224	@ 0xe0
 80010a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	2302      	movs	r3, #2
 80010a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ae:	2303      	movs	r3, #3
 80010b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010b2:	2305      	movs	r3, #5
 80010b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	4619      	mov	r1, r3
 80010bc:	4805      	ldr	r0, [pc, #20]	@ (80010d4 <HAL_SPI_MspInit+0x8c>)
 80010be:	f000 fd81 	bl	8001bc4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80010c2:	bf00      	nop
 80010c4:	3728      	adds	r7, #40	@ 0x28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40013000 	.word	0x40013000
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40020000 	.word	0x40020000

080010d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010e8:	d115      	bne.n	8001116 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <HAL_TIM_Base_MspInit+0x48>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f2:	4a0b      	ldr	r2, [pc, #44]	@ (8001120 <HAL_TIM_Base_MspInit+0x48>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010fa:	4b09      	ldr	r3, [pc, #36]	@ (8001120 <HAL_TIM_Base_MspInit+0x48>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	2100      	movs	r1, #0
 800110a:	201c      	movs	r0, #28
 800110c:	f000 fd23 	bl	8001b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001110:	201c      	movs	r0, #28
 8001112:	f000 fd3c 	bl	8001b8e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40023800 	.word	0x40023800

08001124 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	@ 0x28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a19      	ldr	r2, [pc, #100]	@ (80011a8 <HAL_UART_MspInit+0x84>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d12c      	bne.n	80011a0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	4b18      	ldr	r3, [pc, #96]	@ (80011ac <HAL_UART_MspInit+0x88>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114e:	4a17      	ldr	r2, [pc, #92]	@ (80011ac <HAL_UART_MspInit+0x88>)
 8001150:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001154:	6413      	str	r3, [r2, #64]	@ 0x40
 8001156:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <HAL_UART_MspInit+0x88>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <HAL_UART_MspInit+0x88>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	4a10      	ldr	r2, [pc, #64]	@ (80011ac <HAL_UART_MspInit+0x88>)
 800116c:	f043 0308 	orr.w	r3, r3, #8
 8001170:	6313      	str	r3, [r2, #48]	@ 0x30
 8001172:	4b0e      	ldr	r3, [pc, #56]	@ (80011ac <HAL_UART_MspInit+0x88>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	f003 0308 	and.w	r3, r3, #8
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800117e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118c:	2303      	movs	r3, #3
 800118e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001190:	2307      	movs	r3, #7
 8001192:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	4805      	ldr	r0, [pc, #20]	@ (80011b0 <HAL_UART_MspInit+0x8c>)
 800119c:	f000 fd12 	bl	8001bc4 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80011a0:	bf00      	nop
 80011a2:	3728      	adds	r7, #40	@ 0x28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40004800 	.word	0x40004800
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40020c00 	.word	0x40020c00

080011b4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b0a0      	sub	sp, #128	@ 0x80
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	225c      	movs	r2, #92	@ 0x5c
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f003 ffa8 	bl	800512a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011e2:	d14e      	bne.n	8001282 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80011e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011e8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80011ea:	2300      	movs	r3, #0
 80011ec:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ee:	f107 0310 	add.w	r3, r7, #16
 80011f2:	4618      	mov	r0, r3
 80011f4:	f001 f91a 	bl	800242c <HAL_RCCEx_PeriphCLKConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80011fe:	f7ff feb1 	bl	8000f64 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	4b21      	ldr	r3, [pc, #132]	@ (800128c <HAL_PCD_MspInit+0xd8>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	4a20      	ldr	r2, [pc, #128]	@ (800128c <HAL_PCD_MspInit+0xd8>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6313      	str	r3, [r2, #48]	@ 0x30
 8001212:	4b1e      	ldr	r3, [pc, #120]	@ (800128c <HAL_PCD_MspInit+0xd8>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800121e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001222:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001224:	2302      	movs	r3, #2
 8001226:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122c:	2303      	movs	r3, #3
 800122e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001230:	230a      	movs	r3, #10
 8001232:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001234:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001238:	4619      	mov	r1, r3
 800123a:	4815      	ldr	r0, [pc, #84]	@ (8001290 <HAL_PCD_MspInit+0xdc>)
 800123c:	f000 fcc2 	bl	8001bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001240:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001244:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001246:	2300      	movs	r3, #0
 8001248:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800124e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001252:	4619      	mov	r1, r3
 8001254:	480e      	ldr	r0, [pc, #56]	@ (8001290 <HAL_PCD_MspInit+0xdc>)
 8001256:	f000 fcb5 	bl	8001bc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800125a:	4b0c      	ldr	r3, [pc, #48]	@ (800128c <HAL_PCD_MspInit+0xd8>)
 800125c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800125e:	4a0b      	ldr	r2, [pc, #44]	@ (800128c <HAL_PCD_MspInit+0xd8>)
 8001260:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001264:	6353      	str	r3, [r2, #52]	@ 0x34
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	4b08      	ldr	r3, [pc, #32]	@ (800128c <HAL_PCD_MspInit+0xd8>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126e:	4a07      	ldr	r2, [pc, #28]	@ (800128c <HAL_PCD_MspInit+0xd8>)
 8001270:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001274:	6453      	str	r3, [r2, #68]	@ 0x44
 8001276:	4b05      	ldr	r3, [pc, #20]	@ (800128c <HAL_PCD_MspInit+0xd8>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001282:	bf00      	nop
 8001284:	3780      	adds	r7, #128	@ 0x80
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40023800 	.word	0x40023800
 8001290:	40020000 	.word	0x40020000

08001294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <NMI_Handler+0x4>

0800129c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <HardFault_Handler+0x4>

080012a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a8:	bf00      	nop
 80012aa:	e7fd      	b.n	80012a8 <MemManage_Handler+0x4>

080012ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <BusFault_Handler+0x4>

080012b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <UsageFault_Handler+0x4>

080012bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ea:	f000 f8a3 	bl	8001434 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012f8:	4802      	ldr	r0, [pc, #8]	@ (8001304 <TIM2_IRQHandler+0x10>)
 80012fa:	f002 fd99 	bl	8003e30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200000c8 	.word	0x200000c8

08001308 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 800130c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001310:	f000 fe20 	bl	8001f54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}

08001318 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800131c:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <SystemInit+0x20>)
 800131e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001322:	4a05      	ldr	r2, [pc, #20]	@ (8001338 <SystemInit+0x20>)
 8001324:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001328:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800133c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001374 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001340:	f7ff ffea 	bl	8001318 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001344:	480c      	ldr	r0, [pc, #48]	@ (8001378 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001346:	490d      	ldr	r1, [pc, #52]	@ (800137c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001348:	4a0d      	ldr	r2, [pc, #52]	@ (8001380 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800134c:	e002      	b.n	8001354 <LoopCopyDataInit>

0800134e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800134e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001352:	3304      	adds	r3, #4

08001354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001358:	d3f9      	bcc.n	800134e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800135a:	4a0a      	ldr	r2, [pc, #40]	@ (8001384 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800135c:	4c0a      	ldr	r4, [pc, #40]	@ (8001388 <LoopFillZerobss+0x22>)
  movs r3, #0
 800135e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001360:	e001      	b.n	8001366 <LoopFillZerobss>

08001362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001364:	3204      	adds	r2, #4

08001366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001368:	d3fb      	bcc.n	8001362 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800136a:	f003 fee7 	bl	800513c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800136e:	f7ff fa37 	bl	80007e0 <main>
  bx  lr    
 8001372:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001374:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800137c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001380:	080051c4 	.word	0x080051c4
  ldr r2, =_sbss
 8001384:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001388:	20000640 	.word	0x20000640

0800138c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800138c:	e7fe      	b.n	800138c <ADC_IRQHandler>
	...

08001390 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001394:	4b0e      	ldr	r3, [pc, #56]	@ (80013d0 <HAL_Init+0x40>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0d      	ldr	r2, [pc, #52]	@ (80013d0 <HAL_Init+0x40>)
 800139a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800139e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013a0:	4b0b      	ldr	r3, [pc, #44]	@ (80013d0 <HAL_Init+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a0a      	ldr	r2, [pc, #40]	@ (80013d0 <HAL_Init+0x40>)
 80013a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ac:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <HAL_Init+0x40>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a07      	ldr	r2, [pc, #28]	@ (80013d0 <HAL_Init+0x40>)
 80013b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b8:	2003      	movs	r0, #3
 80013ba:	f000 fbc1 	bl	8001b40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013be:	2000      	movs	r0, #0
 80013c0:	f000 f808 	bl	80013d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c4:	f7ff fdd4 	bl	8000f70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40023c00 	.word	0x40023c00

080013d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013dc:	4b12      	ldr	r3, [pc, #72]	@ (8001428 <HAL_InitTick+0x54>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b12      	ldr	r3, [pc, #72]	@ (800142c <HAL_InitTick+0x58>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4619      	mov	r1, r3
 80013e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 fbd9 	bl	8001baa <HAL_SYSTICK_Config>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e00e      	b.n	8001420 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b0f      	cmp	r3, #15
 8001406:	d80a      	bhi.n	800141e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001408:	2200      	movs	r2, #0
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	f04f 30ff 	mov.w	r0, #4294967295
 8001410:	f000 fba1 	bl	8001b56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001414:	4a06      	ldr	r2, [pc, #24]	@ (8001430 <HAL_InitTick+0x5c>)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800141a:	2300      	movs	r3, #0
 800141c:	e000      	b.n	8001420 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000000 	.word	0x20000000
 800142c:	20000008 	.word	0x20000008
 8001430:	20000004 	.word	0x20000004

08001434 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001438:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <HAL_IncTick+0x20>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <HAL_IncTick+0x24>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4413      	add	r3, r2
 8001444:	4a04      	ldr	r2, [pc, #16]	@ (8001458 <HAL_IncTick+0x24>)
 8001446:	6013      	str	r3, [r2, #0]
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	20000008 	.word	0x20000008
 8001458:	2000063c 	.word	0x2000063c

0800145c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return uwTick;
 8001460:	4b03      	ldr	r3, [pc, #12]	@ (8001470 <HAL_GetTick+0x14>)
 8001462:	681b      	ldr	r3, [r3, #0]
}
 8001464:	4618      	mov	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	2000063c 	.word	0x2000063c

08001474 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800147c:	f7ff ffee 	bl	800145c <HAL_GetTick>
 8001480:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800148c:	d005      	beq.n	800149a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800148e:	4b0a      	ldr	r3, [pc, #40]	@ (80014b8 <HAL_Delay+0x44>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	461a      	mov	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4413      	add	r3, r2
 8001498:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800149a:	bf00      	nop
 800149c:	f7ff ffde 	bl	800145c <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d8f7      	bhi.n	800149c <HAL_Delay+0x28>
  {
  }
}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000008 	.word	0x20000008

080014bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014c4:	2300      	movs	r3, #0
 80014c6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e033      	b.n	800153a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d109      	bne.n	80014ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff fd70 	bl	8000fc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f2:	f003 0310 	and.w	r3, r3, #16
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d118      	bne.n	800152c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001502:	f023 0302 	bic.w	r3, r3, #2
 8001506:	f043 0202 	orr.w	r2, r3, #2
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 f94a 	bl	80017a8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151e:	f023 0303 	bic.w	r3, r3, #3
 8001522:	f043 0201 	orr.w	r2, r3, #1
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	641a      	str	r2, [r3, #64]	@ 0x40
 800152a:	e001      	b.n	8001530 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001538:	7bfb      	ldrb	r3, [r7, #15]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800154e:	2300      	movs	r3, #0
 8001550:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001558:	2b01      	cmp	r3, #1
 800155a:	d101      	bne.n	8001560 <HAL_ADC_ConfigChannel+0x1c>
 800155c:	2302      	movs	r3, #2
 800155e:	e113      	b.n	8001788 <HAL_ADC_ConfigChannel+0x244>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2201      	movs	r2, #1
 8001564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b09      	cmp	r3, #9
 800156e:	d925      	bls.n	80015bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	68d9      	ldr	r1, [r3, #12]
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	b29b      	uxth	r3, r3
 800157c:	461a      	mov	r2, r3
 800157e:	4613      	mov	r3, r2
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	4413      	add	r3, r2
 8001584:	3b1e      	subs	r3, #30
 8001586:	2207      	movs	r2, #7
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43da      	mvns	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	400a      	ands	r2, r1
 8001594:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68d9      	ldr	r1, [r3, #12]
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	4603      	mov	r3, r0
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	4403      	add	r3, r0
 80015ae:	3b1e      	subs	r3, #30
 80015b0:	409a      	lsls	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	430a      	orrs	r2, r1
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	e022      	b.n	8001602 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6919      	ldr	r1, [r3, #16]
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	461a      	mov	r2, r3
 80015ca:	4613      	mov	r3, r2
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	4413      	add	r3, r2
 80015d0:	2207      	movs	r2, #7
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43da      	mvns	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	400a      	ands	r2, r1
 80015de:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6919      	ldr	r1, [r3, #16]
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	689a      	ldr	r2, [r3, #8]
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	4618      	mov	r0, r3
 80015f2:	4603      	mov	r3, r0
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	4403      	add	r3, r0
 80015f8:	409a      	lsls	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	430a      	orrs	r2, r1
 8001600:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b06      	cmp	r3, #6
 8001608:	d824      	bhi.n	8001654 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	4613      	mov	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	3b05      	subs	r3, #5
 800161c:	221f      	movs	r2, #31
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43da      	mvns	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	400a      	ands	r2, r1
 800162a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	b29b      	uxth	r3, r3
 8001638:	4618      	mov	r0, r3
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	4613      	mov	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	3b05      	subs	r3, #5
 8001646:	fa00 f203 	lsl.w	r2, r0, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	430a      	orrs	r2, r1
 8001650:	635a      	str	r2, [r3, #52]	@ 0x34
 8001652:	e04c      	b.n	80016ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b0c      	cmp	r3, #12
 800165a:	d824      	bhi.n	80016a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	4613      	mov	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	3b23      	subs	r3, #35	@ 0x23
 800166e:	221f      	movs	r2, #31
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43da      	mvns	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	400a      	ands	r2, r1
 800167c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	b29b      	uxth	r3, r3
 800168a:	4618      	mov	r0, r3
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	3b23      	subs	r3, #35	@ 0x23
 8001698:	fa00 f203 	lsl.w	r2, r0, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	430a      	orrs	r2, r1
 80016a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80016a4:	e023      	b.n	80016ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685a      	ldr	r2, [r3, #4]
 80016b0:	4613      	mov	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	3b41      	subs	r3, #65	@ 0x41
 80016b8:	221f      	movs	r2, #31
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43da      	mvns	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	400a      	ands	r2, r1
 80016c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	4618      	mov	r0, r3
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	3b41      	subs	r3, #65	@ 0x41
 80016e2:	fa00 f203 	lsl.w	r2, r0, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016ee:	4b29      	ldr	r3, [pc, #164]	@ (8001794 <HAL_ADC_ConfigChannel+0x250>)
 80016f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a28      	ldr	r2, [pc, #160]	@ (8001798 <HAL_ADC_ConfigChannel+0x254>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d10f      	bne.n	800171c <HAL_ADC_ConfigChannel+0x1d8>
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b12      	cmp	r3, #18
 8001702:	d10b      	bne.n	800171c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a1d      	ldr	r2, [pc, #116]	@ (8001798 <HAL_ADC_ConfigChannel+0x254>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d12b      	bne.n	800177e <HAL_ADC_ConfigChannel+0x23a>
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a1c      	ldr	r2, [pc, #112]	@ (800179c <HAL_ADC_ConfigChannel+0x258>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d003      	beq.n	8001738 <HAL_ADC_ConfigChannel+0x1f4>
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b11      	cmp	r3, #17
 8001736:	d122      	bne.n	800177e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a11      	ldr	r2, [pc, #68]	@ (800179c <HAL_ADC_ConfigChannel+0x258>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d111      	bne.n	800177e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800175a:	4b11      	ldr	r3, [pc, #68]	@ (80017a0 <HAL_ADC_ConfigChannel+0x25c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a11      	ldr	r2, [pc, #68]	@ (80017a4 <HAL_ADC_ConfigChannel+0x260>)
 8001760:	fba2 2303 	umull	r2, r3, r2, r3
 8001764:	0c9a      	lsrs	r2, r3, #18
 8001766:	4613      	mov	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001770:	e002      	b.n	8001778 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	3b01      	subs	r3, #1
 8001776:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f9      	bne.n	8001772 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	40012300 	.word	0x40012300
 8001798:	40012000 	.word	0x40012000
 800179c:	10000012 	.word	0x10000012
 80017a0:	20000000 	.word	0x20000000
 80017a4:	431bde83 	.word	0x431bde83

080017a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017b0:	4b79      	ldr	r3, [pc, #484]	@ (8001998 <ADC_Init+0x1f0>)
 80017b2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	431a      	orrs	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6859      	ldr	r1, [r3, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	021a      	lsls	r2, r3, #8
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	430a      	orrs	r2, r1
 80017f0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001800:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6859      	ldr	r1, [r3, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001822:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6899      	ldr	r1, [r3, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68da      	ldr	r2, [r3, #12]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	430a      	orrs	r2, r1
 8001834:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800183a:	4a58      	ldr	r2, [pc, #352]	@ (800199c <ADC_Init+0x1f4>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d022      	beq.n	8001886 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800184e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6899      	ldr	r1, [r3, #8]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	430a      	orrs	r2, r1
 8001860:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001870:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6899      	ldr	r1, [r3, #8]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	430a      	orrs	r2, r1
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	e00f      	b.n	80018a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001894:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80018a4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 0202 	bic.w	r2, r2, #2
 80018b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6899      	ldr	r1, [r3, #8]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	7e1b      	ldrb	r3, [r3, #24]
 80018c0:	005a      	lsls	r2, r3, #1
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d01b      	beq.n	800190c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80018e2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80018f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6859      	ldr	r1, [r3, #4]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fe:	3b01      	subs	r3, #1
 8001900:	035a      	lsls	r2, r3, #13
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	e007      	b.n	800191c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800191a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800192a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	3b01      	subs	r3, #1
 8001938:	051a      	lsls	r2, r3, #20
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	430a      	orrs	r2, r1
 8001940:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001950:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6899      	ldr	r1, [r3, #8]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800195e:	025a      	lsls	r2, r3, #9
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	430a      	orrs	r2, r1
 8001966:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001976:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6899      	ldr	r1, [r3, #8]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	029a      	lsls	r2, r3, #10
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	609a      	str	r2, [r3, #8]
}
 800198c:	bf00      	nop
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	40012300 	.word	0x40012300
 800199c:	0f000001 	.word	0x0f000001

080019a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b0:	4b0c      	ldr	r3, [pc, #48]	@ (80019e4 <__NVIC_SetPriorityGrouping+0x44>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019bc:	4013      	ands	r3, r2
 80019be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019d2:	4a04      	ldr	r2, [pc, #16]	@ (80019e4 <__NVIC_SetPriorityGrouping+0x44>)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	60d3      	str	r3, [r2, #12]
}
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019ec:	4b04      	ldr	r3, [pc, #16]	@ (8001a00 <__NVIC_GetPriorityGrouping+0x18>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	0a1b      	lsrs	r3, r3, #8
 80019f2:	f003 0307 	and.w	r3, r3, #7
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	db0b      	blt.n	8001a2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	f003 021f 	and.w	r2, r3, #31
 8001a1c:	4907      	ldr	r1, [pc, #28]	@ (8001a3c <__NVIC_EnableIRQ+0x38>)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	095b      	lsrs	r3, r3, #5
 8001a24:	2001      	movs	r0, #1
 8001a26:	fa00 f202 	lsl.w	r2, r0, r2
 8001a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	e000e100 	.word	0xe000e100

08001a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	6039      	str	r1, [r7, #0]
 8001a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	db0a      	blt.n	8001a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	490c      	ldr	r1, [pc, #48]	@ (8001a8c <__NVIC_SetPriority+0x4c>)
 8001a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5e:	0112      	lsls	r2, r2, #4
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	440b      	add	r3, r1
 8001a64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a68:	e00a      	b.n	8001a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	4908      	ldr	r1, [pc, #32]	@ (8001a90 <__NVIC_SetPriority+0x50>)
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	3b04      	subs	r3, #4
 8001a78:	0112      	lsls	r2, r2, #4
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	761a      	strb	r2, [r3, #24]
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	e000e100 	.word	0xe000e100
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b089      	sub	sp, #36	@ 0x24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f1c3 0307 	rsb	r3, r3, #7
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	bf28      	it	cs
 8001ab2:	2304      	movcs	r3, #4
 8001ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3304      	adds	r3, #4
 8001aba:	2b06      	cmp	r3, #6
 8001abc:	d902      	bls.n	8001ac4 <NVIC_EncodePriority+0x30>
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3b03      	subs	r3, #3
 8001ac2:	e000      	b.n	8001ac6 <NVIC_EncodePriority+0x32>
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43da      	mvns	r2, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001adc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae6:	43d9      	mvns	r1, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aec:	4313      	orrs	r3, r2
         );
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3724      	adds	r7, #36	@ 0x24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b0c:	d301      	bcc.n	8001b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e00f      	b.n	8001b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b12:	4a0a      	ldr	r2, [pc, #40]	@ (8001b3c <SysTick_Config+0x40>)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b1a:	210f      	movs	r1, #15
 8001b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b20:	f7ff ff8e 	bl	8001a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b24:	4b05      	ldr	r3, [pc, #20]	@ (8001b3c <SysTick_Config+0x40>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b2a:	4b04      	ldr	r3, [pc, #16]	@ (8001b3c <SysTick_Config+0x40>)
 8001b2c:	2207      	movs	r2, #7
 8001b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	e000e010 	.word	0xe000e010

08001b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff ff29 	bl	80019a0 <__NVIC_SetPriorityGrouping>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b086      	sub	sp, #24
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	60b9      	str	r1, [r7, #8]
 8001b60:	607a      	str	r2, [r7, #4]
 8001b62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b68:	f7ff ff3e 	bl	80019e8 <__NVIC_GetPriorityGrouping>
 8001b6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	68b9      	ldr	r1, [r7, #8]
 8001b72:	6978      	ldr	r0, [r7, #20]
 8001b74:	f7ff ff8e 	bl	8001a94 <NVIC_EncodePriority>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b7e:	4611      	mov	r1, r2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff5d 	bl	8001a40 <__NVIC_SetPriority>
}
 8001b86:	bf00      	nop
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	4603      	mov	r3, r0
 8001b96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ff31 	bl	8001a04 <__NVIC_EnableIRQ>
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff ffa2 	bl	8001afc <SysTick_Config>
 8001bb8:	4603      	mov	r3, r0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b089      	sub	sp, #36	@ 0x24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61fb      	str	r3, [r7, #28]
 8001bde:	e165      	b.n	8001eac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001be0:	2201      	movs	r2, #1
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	f040 8154 	bne.w	8001ea6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d005      	beq.n	8001c16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d130      	bne.n	8001c78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	2203      	movs	r2, #3
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	68da      	ldr	r2, [r3, #12]
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	091b      	lsrs	r3, r3, #4
 8001c62:	f003 0201 	and.w	r2, r3, #1
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 0303 	and.w	r3, r3, #3
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	d017      	beq.n	8001cb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	2203      	movs	r2, #3
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 0303 	and.w	r3, r3, #3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d123      	bne.n	8001d08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	08da      	lsrs	r2, r3, #3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3208      	adds	r2, #8
 8001cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	220f      	movs	r2, #15
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	691a      	ldr	r2, [r3, #16]
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	08da      	lsrs	r2, r3, #3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3208      	adds	r2, #8
 8001d02:	69b9      	ldr	r1, [r7, #24]
 8001d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	2203      	movs	r2, #3
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 0203 	and.w	r2, r3, #3
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 80ae 	beq.w	8001ea6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ec4 <HAL_GPIO_Init+0x300>)
 8001d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d52:	4a5c      	ldr	r2, [pc, #368]	@ (8001ec4 <HAL_GPIO_Init+0x300>)
 8001d54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d5a:	4b5a      	ldr	r3, [pc, #360]	@ (8001ec4 <HAL_GPIO_Init+0x300>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d66:	4a58      	ldr	r2, [pc, #352]	@ (8001ec8 <HAL_GPIO_Init+0x304>)
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	089b      	lsrs	r3, r3, #2
 8001d6c:	3302      	adds	r3, #2
 8001d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	220f      	movs	r2, #15
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a4f      	ldr	r2, [pc, #316]	@ (8001ecc <HAL_GPIO_Init+0x308>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d025      	beq.n	8001dde <HAL_GPIO_Init+0x21a>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a4e      	ldr	r2, [pc, #312]	@ (8001ed0 <HAL_GPIO_Init+0x30c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d01f      	beq.n	8001dda <HAL_GPIO_Init+0x216>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a4d      	ldr	r2, [pc, #308]	@ (8001ed4 <HAL_GPIO_Init+0x310>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d019      	beq.n	8001dd6 <HAL_GPIO_Init+0x212>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a4c      	ldr	r2, [pc, #304]	@ (8001ed8 <HAL_GPIO_Init+0x314>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d013      	beq.n	8001dd2 <HAL_GPIO_Init+0x20e>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a4b      	ldr	r2, [pc, #300]	@ (8001edc <HAL_GPIO_Init+0x318>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d00d      	beq.n	8001dce <HAL_GPIO_Init+0x20a>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a4a      	ldr	r2, [pc, #296]	@ (8001ee0 <HAL_GPIO_Init+0x31c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d007      	beq.n	8001dca <HAL_GPIO_Init+0x206>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a49      	ldr	r2, [pc, #292]	@ (8001ee4 <HAL_GPIO_Init+0x320>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d101      	bne.n	8001dc6 <HAL_GPIO_Init+0x202>
 8001dc2:	2306      	movs	r3, #6
 8001dc4:	e00c      	b.n	8001de0 <HAL_GPIO_Init+0x21c>
 8001dc6:	2307      	movs	r3, #7
 8001dc8:	e00a      	b.n	8001de0 <HAL_GPIO_Init+0x21c>
 8001dca:	2305      	movs	r3, #5
 8001dcc:	e008      	b.n	8001de0 <HAL_GPIO_Init+0x21c>
 8001dce:	2304      	movs	r3, #4
 8001dd0:	e006      	b.n	8001de0 <HAL_GPIO_Init+0x21c>
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e004      	b.n	8001de0 <HAL_GPIO_Init+0x21c>
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	e002      	b.n	8001de0 <HAL_GPIO_Init+0x21c>
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <HAL_GPIO_Init+0x21c>
 8001dde:	2300      	movs	r3, #0
 8001de0:	69fa      	ldr	r2, [r7, #28]
 8001de2:	f002 0203 	and.w	r2, r2, #3
 8001de6:	0092      	lsls	r2, r2, #2
 8001de8:	4093      	lsls	r3, r2
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001df0:	4935      	ldr	r1, [pc, #212]	@ (8001ec8 <HAL_GPIO_Init+0x304>)
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	089b      	lsrs	r3, r3, #2
 8001df6:	3302      	adds	r3, #2
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dfe:	4b3a      	ldr	r3, [pc, #232]	@ (8001ee8 <HAL_GPIO_Init+0x324>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	43db      	mvns	r3, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e22:	4a31      	ldr	r2, [pc, #196]	@ (8001ee8 <HAL_GPIO_Init+0x324>)
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e28:	4b2f      	ldr	r3, [pc, #188]	@ (8001ee8 <HAL_GPIO_Init+0x324>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	43db      	mvns	r3, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4013      	ands	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e4c:	4a26      	ldr	r2, [pc, #152]	@ (8001ee8 <HAL_GPIO_Init+0x324>)
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e52:	4b25      	ldr	r3, [pc, #148]	@ (8001ee8 <HAL_GPIO_Init+0x324>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e76:	4a1c      	ldr	r2, [pc, #112]	@ (8001ee8 <HAL_GPIO_Init+0x324>)
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee8 <HAL_GPIO_Init+0x324>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ea0:	4a11      	ldr	r2, [pc, #68]	@ (8001ee8 <HAL_GPIO_Init+0x324>)
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	61fb      	str	r3, [r7, #28]
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	2b0f      	cmp	r3, #15
 8001eb0:	f67f ae96 	bls.w	8001be0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001eb4:	bf00      	nop
 8001eb6:	bf00      	nop
 8001eb8:	3724      	adds	r7, #36	@ 0x24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40013800 	.word	0x40013800
 8001ecc:	40020000 	.word	0x40020000
 8001ed0:	40020400 	.word	0x40020400
 8001ed4:	40020800 	.word	0x40020800
 8001ed8:	40020c00 	.word	0x40020c00
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40021400 	.word	0x40021400
 8001ee4:	40021800 	.word	0x40021800
 8001ee8:	40013c00 	.word	0x40013c00

08001eec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	807b      	strh	r3, [r7, #2]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001efc:	787b      	ldrb	r3, [r7, #1]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f02:	887a      	ldrh	r2, [r7, #2]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f08:	e003      	b.n	8001f12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f0a:	887b      	ldrh	r3, [r7, #2]
 8001f0c:	041a      	lsls	r2, r3, #16
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	619a      	str	r2, [r3, #24]
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b085      	sub	sp, #20
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	460b      	mov	r3, r1
 8001f28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f30:	887a      	ldrh	r2, [r7, #2]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	4013      	ands	r3, r2
 8001f36:	041a      	lsls	r2, r3, #16
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	43d9      	mvns	r1, r3
 8001f3c:	887b      	ldrh	r3, [r7, #2]
 8001f3e:	400b      	ands	r3, r1
 8001f40:	431a      	orrs	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	619a      	str	r2, [r3, #24]
}
 8001f46:	bf00      	nop
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
	...

08001f54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f5e:	4b08      	ldr	r3, [pc, #32]	@ (8001f80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f60:	695a      	ldr	r2, [r3, #20]
 8001f62:	88fb      	ldrh	r3, [r7, #6]
 8001f64:	4013      	ands	r3, r2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d006      	beq.n	8001f78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f6a:	4a05      	ldr	r2, [pc, #20]	@ (8001f80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f6c:	88fb      	ldrh	r3, [r7, #6]
 8001f6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f70:	88fb      	ldrh	r3, [r7, #6]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe ffe6 	bl	8000f44 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f78:	bf00      	nop
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40013c00 	.word	0x40013c00

08001f84 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af02      	add	r7, sp, #8
 8001f8a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e108      	b.n	80021a8 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d106      	bne.n	8001fb6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f7ff f8ff 	bl	80011b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2203      	movs	r2, #3
 8001fba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fc4:	d102      	bne.n	8001fcc <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f002 fe15 	bl	8004c00 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6818      	ldr	r0, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	7c1a      	ldrb	r2, [r3, #16]
 8001fde:	f88d 2000 	strb.w	r2, [sp]
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fe6:	f002 fda7 	bl	8004b38 <USB_CoreInit>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d005      	beq.n	8001ffc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e0d5      	b.n	80021a8 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2100      	movs	r1, #0
 8002002:	4618      	mov	r0, r3
 8002004:	f002 fe0d 	bl	8004c22 <USB_SetCurrentMode>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d005      	beq.n	800201a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2202      	movs	r2, #2
 8002012:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e0c6      	b.n	80021a8 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800201a:	2300      	movs	r3, #0
 800201c:	73fb      	strb	r3, [r7, #15]
 800201e:	e04a      	b.n	80020b6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002020:	7bfa      	ldrb	r2, [r7, #15]
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	4413      	add	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	3315      	adds	r3, #21
 8002030:	2201      	movs	r2, #1
 8002032:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002034:	7bfa      	ldrb	r2, [r7, #15]
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4413      	add	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	3314      	adds	r3, #20
 8002044:	7bfa      	ldrb	r2, [r7, #15]
 8002046:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002048:	7bfa      	ldrb	r2, [r7, #15]
 800204a:	7bfb      	ldrb	r3, [r7, #15]
 800204c:	b298      	uxth	r0, r3
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	4613      	mov	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	4413      	add	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	440b      	add	r3, r1
 800205a:	332e      	adds	r3, #46	@ 0x2e
 800205c:	4602      	mov	r2, r0
 800205e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002060:	7bfa      	ldrb	r2, [r7, #15]
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	4613      	mov	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	4413      	add	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	3318      	adds	r3, #24
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002074:	7bfa      	ldrb	r2, [r7, #15]
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	4613      	mov	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4413      	add	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	331c      	adds	r3, #28
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002088:	7bfa      	ldrb	r2, [r7, #15]
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	4413      	add	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	3320      	adds	r3, #32
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800209c:	7bfa      	ldrb	r2, [r7, #15]
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4413      	add	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	3324      	adds	r3, #36	@ 0x24
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
 80020b2:	3301      	adds	r3, #1
 80020b4:	73fb      	strb	r3, [r7, #15]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	791b      	ldrb	r3, [r3, #4]
 80020ba:	7bfa      	ldrb	r2, [r7, #15]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d3af      	bcc.n	8002020 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020c0:	2300      	movs	r3, #0
 80020c2:	73fb      	strb	r3, [r7, #15]
 80020c4:	e044      	b.n	8002150 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020c6:	7bfa      	ldrb	r2, [r7, #15]
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	4413      	add	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	440b      	add	r3, r1
 80020d4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80020d8:	2200      	movs	r2, #0
 80020da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020dc:	7bfa      	ldrb	r2, [r7, #15]
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	4613      	mov	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	4413      	add	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	440b      	add	r3, r1
 80020ea:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80020ee:	7bfa      	ldrb	r2, [r7, #15]
 80020f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020f2:	7bfa      	ldrb	r2, [r7, #15]
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	4413      	add	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002104:	2200      	movs	r2, #0
 8002106:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002108:	7bfa      	ldrb	r2, [r7, #15]
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	4413      	add	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800211e:	7bfa      	ldrb	r2, [r7, #15]
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	4413      	add	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	440b      	add	r3, r1
 800212c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002134:	7bfa      	ldrb	r2, [r7, #15]
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	4613      	mov	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	4413      	add	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	440b      	add	r3, r1
 8002142:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800214a:	7bfb      	ldrb	r3, [r7, #15]
 800214c:	3301      	adds	r3, #1
 800214e:	73fb      	strb	r3, [r7, #15]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	791b      	ldrb	r3, [r3, #4]
 8002154:	7bfa      	ldrb	r2, [r7, #15]
 8002156:	429a      	cmp	r2, r3
 8002158:	d3b5      	bcc.n	80020c6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6818      	ldr	r0, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	7c1a      	ldrb	r2, [r3, #16]
 8002162:	f88d 2000 	strb.w	r2, [sp]
 8002166:	3304      	adds	r3, #4
 8002168:	cb0e      	ldmia	r3, {r1, r2, r3}
 800216a:	f002 fda7 	bl	8004cbc <USB_DevInit>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d005      	beq.n	8002180 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2202      	movs	r2, #2
 8002178:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e013      	b.n	80021a8 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	7b1b      	ldrb	r3, [r3, #12]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d102      	bne.n	800219c <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f80a 	bl	80021b0 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f002 ff62 	bl	800506a <USB_DevDisconnect>

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021e2:	f043 0303 	orr.w	r3, r3, #3
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e0cc      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800220c:	4b68      	ldr	r3, [pc, #416]	@ (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 030f 	and.w	r3, r3, #15
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d90c      	bls.n	8002234 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b65      	ldr	r3, [pc, #404]	@ (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002222:	4b63      	ldr	r3, [pc, #396]	@ (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d001      	beq.n	8002234 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e0b8      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d020      	beq.n	8002282 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800224c:	4b59      	ldr	r3, [pc, #356]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	4a58      	ldr	r2, [pc, #352]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002252:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002256:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0308 	and.w	r3, r3, #8
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002264:	4b53      	ldr	r3, [pc, #332]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	4a52      	ldr	r2, [pc, #328]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800226e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002270:	4b50      	ldr	r3, [pc, #320]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	494d      	ldr	r1, [pc, #308]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800227e:	4313      	orrs	r3, r2
 8002280:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d044      	beq.n	8002318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d107      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002296:	4b47      	ldr	r3, [pc, #284]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d119      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e07f      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d003      	beq.n	80022b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	d107      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b6:	4b3f      	ldr	r3, [pc, #252]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d109      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e06f      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c6:	4b3b      	ldr	r3, [pc, #236]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e067      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022d6:	4b37      	ldr	r3, [pc, #220]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f023 0203 	bic.w	r2, r3, #3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4934      	ldr	r1, [pc, #208]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022e8:	f7ff f8b8 	bl	800145c <HAL_GetTick>
 80022ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ee:	e00a      	b.n	8002306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f0:	f7ff f8b4 	bl	800145c <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022fe:	4293      	cmp	r3, r2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e04f      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002306:	4b2b      	ldr	r3, [pc, #172]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 020c 	and.w	r2, r3, #12
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	429a      	cmp	r2, r3
 8002316:	d1eb      	bne.n	80022f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002318:	4b25      	ldr	r3, [pc, #148]	@ (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 030f 	and.w	r3, r3, #15
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d20c      	bcs.n	8002340 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002326:	4b22      	ldr	r3, [pc, #136]	@ (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800232e:	4b20      	ldr	r3, [pc, #128]	@ (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d001      	beq.n	8002340 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e032      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b00      	cmp	r3, #0
 800234a:	d008      	beq.n	800235e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800234c:	4b19      	ldr	r3, [pc, #100]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	4916      	ldr	r1, [pc, #88]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	4313      	orrs	r3, r2
 800235c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	2b00      	cmp	r3, #0
 8002368:	d009      	beq.n	800237e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800236a:	4b12      	ldr	r3, [pc, #72]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	490e      	ldr	r1, [pc, #56]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	4313      	orrs	r3, r2
 800237c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800237e:	f000 fb7f 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 8002382:	4602      	mov	r2, r0
 8002384:	4b0b      	ldr	r3, [pc, #44]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	091b      	lsrs	r3, r3, #4
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	490a      	ldr	r1, [pc, #40]	@ (80023b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002390:	5ccb      	ldrb	r3, [r1, r3]
 8002392:	fa22 f303 	lsr.w	r3, r2, r3
 8002396:	4a09      	ldr	r2, [pc, #36]	@ (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 8002398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800239a:	4b09      	ldr	r3, [pc, #36]	@ (80023c0 <HAL_RCC_ClockConfig+0x1c8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff f818 	bl	80013d4 <HAL_InitTick>

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40023c00 	.word	0x40023c00
 80023b4:	40023800 	.word	0x40023800
 80023b8:	0800519c 	.word	0x0800519c
 80023bc:	20000000 	.word	0x20000000
 80023c0:	20000004 	.word	0x20000004

080023c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023c8:	4b03      	ldr	r3, [pc, #12]	@ (80023d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80023ca:	681b      	ldr	r3, [r3, #0]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	20000000 	.word	0x20000000

080023dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023e0:	f7ff fff0 	bl	80023c4 <HAL_RCC_GetHCLKFreq>
 80023e4:	4602      	mov	r2, r0
 80023e6:	4b05      	ldr	r3, [pc, #20]	@ (80023fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	0a9b      	lsrs	r3, r3, #10
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	4903      	ldr	r1, [pc, #12]	@ (8002400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023f2:	5ccb      	ldrb	r3, [r1, r3]
 80023f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40023800 	.word	0x40023800
 8002400:	080051ac 	.word	0x080051ac

08002404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002408:	f7ff ffdc 	bl	80023c4 <HAL_RCC_GetHCLKFreq>
 800240c:	4602      	mov	r2, r0
 800240e:	4b05      	ldr	r3, [pc, #20]	@ (8002424 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	0b5b      	lsrs	r3, r3, #13
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	4903      	ldr	r1, [pc, #12]	@ (8002428 <HAL_RCC_GetPCLK2Freq+0x24>)
 800241a:	5ccb      	ldrb	r3, [r1, r3]
 800241c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002420:	4618      	mov	r0, r3
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40023800 	.word	0x40023800
 8002428:	080051ac 	.word	0x080051ac

0800242c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b08c      	sub	sp, #48	@ 0x30
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002440:	2300      	movs	r3, #0
 8002442:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002450:	2300      	movs	r3, #0
 8002452:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b00      	cmp	r3, #0
 8002462:	d010      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002464:	4b6f      	ldr	r3, [pc, #444]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002466:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800246a:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002472:	496c      	ldr	r1, [pc, #432]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002474:	4313      	orrs	r3, r2
 8002476:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002482:	2301      	movs	r3, #1
 8002484:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d010      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002492:	4b64      	ldr	r3, [pc, #400]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002494:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002498:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024a0:	4960      	ldr	r1, [pc, #384]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80024b0:	2301      	movs	r3, #1
 80024b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d017      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024c0:	4b58      	ldr	r3, [pc, #352]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ce:	4955      	ldr	r1, [pc, #340]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80024de:	d101      	bne.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80024e0:	2301      	movs	r3, #1
 80024e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80024ec:	2301      	movs	r3, #1
 80024ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d017      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024fc:	4b49      	ldr	r3, [pc, #292]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002502:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800250a:	4946      	ldr	r1, [pc, #280]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800250c:	4313      	orrs	r3, r2
 800250e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002516:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800251a:	d101      	bne.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800251c:	2301      	movs	r3, #1
 800251e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002528:	2301      	movs	r3, #1
 800252a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0320 	and.w	r3, r3, #32
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 808a 	beq.w	800264e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	60bb      	str	r3, [r7, #8]
 800253e:	4b39      	ldr	r3, [pc, #228]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002542:	4a38      	ldr	r2, [pc, #224]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002544:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002548:	6413      	str	r3, [r2, #64]	@ 0x40
 800254a:	4b36      	ldr	r3, [pc, #216]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002556:	4b34      	ldr	r3, [pc, #208]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a33      	ldr	r2, [pc, #204]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800255c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002560:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002562:	f7fe ff7b 	bl	800145c <HAL_GetTick>
 8002566:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002568:	e008      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800256a:	f7fe ff77 	bl	800145c <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e278      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800257c:	4b2a      	ldr	r3, [pc, #168]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0f0      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002588:	4b26      	ldr	r3, [pc, #152]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800258a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800258c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002590:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002592:	6a3b      	ldr	r3, [r7, #32]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d02f      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025a0:	6a3a      	ldr	r2, [r7, #32]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d028      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025ae:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025b0:	4b1e      	ldr	r3, [pc, #120]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025b6:	4b1d      	ldr	r3, [pc, #116]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80025bc:	4a19      	ldr	r2, [pc, #100]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025be:	6a3b      	ldr	r3, [r7, #32]
 80025c0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80025c2:	4b18      	ldr	r3, [pc, #96]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d114      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80025ce:	f7fe ff45 	bl	800145c <HAL_GetTick>
 80025d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d4:	e00a      	b.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d6:	f7fe ff41 	bl	800145c <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d901      	bls.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e240      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0ee      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002600:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002604:	d114      	bne.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002606:	4b07      	ldr	r3, [pc, #28]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002612:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002616:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800261a:	4902      	ldr	r1, [pc, #8]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800261c:	4313      	orrs	r3, r2
 800261e:	608b      	str	r3, [r1, #8]
 8002620:	e00c      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002622:	bf00      	nop
 8002624:	40023800 	.word	0x40023800
 8002628:	40007000 	.word	0x40007000
 800262c:	42470e40 	.word	0x42470e40
 8002630:	4b4a      	ldr	r3, [pc, #296]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	4a49      	ldr	r2, [pc, #292]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002636:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800263a:	6093      	str	r3, [r2, #8]
 800263c:	4b47      	ldr	r3, [pc, #284]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800263e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002648:	4944      	ldr	r1, [pc, #272]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800264a:	4313      	orrs	r3, r2
 800264c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0310 	and.w	r3, r3, #16
 8002656:	2b00      	cmp	r3, #0
 8002658:	d004      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8002660:	4b3f      	ldr	r3, [pc, #252]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002662:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00a      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002670:	4b3a      	ldr	r3, [pc, #232]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002672:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002676:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800267e:	4937      	ldr	r1, [pc, #220]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002680:	4313      	orrs	r3, r2
 8002682:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00a      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002692:	4b32      	ldr	r3, [pc, #200]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002694:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002698:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026a0:	492e      	ldr	r1, [pc, #184]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d011      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80026b4:	4b29      	ldr	r3, [pc, #164]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026ba:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c2:	4926      	ldr	r1, [pc, #152]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026d2:	d101      	bne.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80026d4:	2301      	movs	r3, #1
 80026d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00a      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80026e4:	4b1d      	ldr	r3, [pc, #116]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026ea:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f2:	491a      	ldr	r1, [pc, #104]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002702:	2b00      	cmp	r3, #0
 8002704:	d011      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002706:	4b15      	ldr	r3, [pc, #84]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002708:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800270c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002714:	4911      	ldr	r1, [pc, #68]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002716:	4313      	orrs	r3, r2
 8002718:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002720:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002724:	d101      	bne.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002726:	2301      	movs	r3, #1
 8002728:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800272a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800272c:	2b01      	cmp	r3, #1
 800272e:	d005      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002738:	f040 80ff 	bne.w	800293a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800273c:	4b09      	ldr	r3, [pc, #36]	@ (8002764 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002742:	f7fe fe8b 	bl	800145c <HAL_GetTick>
 8002746:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002748:	e00e      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800274a:	f7fe fe87 	bl	800145c <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d907      	bls.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e188      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800275c:	40023800 	.word	0x40023800
 8002760:	424711e0 	.word	0x424711e0
 8002764:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002768:	4b7e      	ldr	r3, [pc, #504]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1ea      	bne.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	d003      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002784:	2b00      	cmp	r3, #0
 8002786:	d009      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002790:	2b00      	cmp	r3, #0
 8002792:	d028      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002798:	2b00      	cmp	r3, #0
 800279a:	d124      	bne.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800279c:	4b71      	ldr	r3, [pc, #452]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800279e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027a2:	0c1b      	lsrs	r3, r3, #16
 80027a4:	f003 0303 	and.w	r3, r3, #3
 80027a8:	3301      	adds	r3, #1
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80027ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80027b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027b4:	0e1b      	lsrs	r3, r3, #24
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	019b      	lsls	r3, r3, #6
 80027c6:	431a      	orrs	r2, r3
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	085b      	lsrs	r3, r3, #1
 80027cc:	3b01      	subs	r3, #1
 80027ce:	041b      	lsls	r3, r3, #16
 80027d0:	431a      	orrs	r2, r3
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	061b      	lsls	r3, r3, #24
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	071b      	lsls	r3, r3, #28
 80027de:	4961      	ldr	r1, [pc, #388]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0304 	and.w	r3, r3, #4
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d004      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80027fa:	d00a      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002804:	2b00      	cmp	r3, #0
 8002806:	d035      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800280c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002810:	d130      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002812:	4b54      	ldr	r3, [pc, #336]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002814:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002818:	0c1b      	lsrs	r3, r3, #16
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	3301      	adds	r3, #1
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002824:	4b4f      	ldr	r3, [pc, #316]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002826:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800282a:	0f1b      	lsrs	r3, r3, #28
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	019b      	lsls	r3, r3, #6
 800283c:	431a      	orrs	r2, r3
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	085b      	lsrs	r3, r3, #1
 8002842:	3b01      	subs	r3, #1
 8002844:	041b      	lsls	r3, r3, #16
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	061b      	lsls	r3, r3, #24
 800284e:	431a      	orrs	r2, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	071b      	lsls	r3, r3, #28
 8002854:	4943      	ldr	r1, [pc, #268]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002856:	4313      	orrs	r3, r2
 8002858:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800285c:	4b41      	ldr	r3, [pc, #260]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800285e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002862:	f023 021f 	bic.w	r2, r3, #31
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800286a:	3b01      	subs	r3, #1
 800286c:	493d      	ldr	r1, [pc, #244]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800286e:	4313      	orrs	r3, r2
 8002870:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800287c:	2b00      	cmp	r3, #0
 800287e:	d029      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002884:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002888:	d124      	bne.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800288a:	4b36      	ldr	r3, [pc, #216]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800288c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002890:	0c1b      	lsrs	r3, r3, #16
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	3301      	adds	r3, #1
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800289c:	4b31      	ldr	r3, [pc, #196]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800289e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028a2:	0f1b      	lsrs	r3, r3, #28
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	019b      	lsls	r3, r3, #6
 80028b4:	431a      	orrs	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	085b      	lsrs	r3, r3, #1
 80028bc:	3b01      	subs	r3, #1
 80028be:	041b      	lsls	r3, r3, #16
 80028c0:	431a      	orrs	r2, r3
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	061b      	lsls	r3, r3, #24
 80028c6:	431a      	orrs	r2, r3
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	071b      	lsls	r3, r3, #28
 80028cc:	4925      	ldr	r1, [pc, #148]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d016      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	019b      	lsls	r3, r3, #6
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	085b      	lsrs	r3, r3, #1
 80028f2:	3b01      	subs	r3, #1
 80028f4:	041b      	lsls	r3, r3, #16
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	061b      	lsls	r3, r3, #24
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	071b      	lsls	r3, r3, #28
 8002906:	4917      	ldr	r1, [pc, #92]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800290e:	4b16      	ldr	r3, [pc, #88]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002910:	2201      	movs	r2, #1
 8002912:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002914:	f7fe fda2 	bl	800145c <HAL_GetTick>
 8002918:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800291a:	e008      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800291c:	f7fe fd9e 	bl	800145c <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e09f      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800292e:	4b0d      	ldr	r3, [pc, #52]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 800293a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800293c:	2b01      	cmp	r3, #1
 800293e:	f040 8095 	bne.w	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002942:	4b0a      	ldr	r3, [pc, #40]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002948:	f7fe fd88 	bl	800145c <HAL_GetTick>
 800294c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800294e:	e00f      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002950:	f7fe fd84 	bl	800145c <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d908      	bls.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e085      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002962:	bf00      	nop
 8002964:	40023800 	.word	0x40023800
 8002968:	42470068 	.word	0x42470068
 800296c:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002970:	4b41      	ldr	r3, [pc, #260]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002978:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800297c:	d0e8      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298e:	2b00      	cmp	r3, #0
 8002990:	d009      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800299a:	2b00      	cmp	r3, #0
 800299c:	d02b      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d127      	bne.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80029a6:	4b34      	ldr	r3, [pc, #208]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80029a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ac:	0c1b      	lsrs	r3, r3, #16
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	3301      	adds	r3, #1
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	699a      	ldr	r2, [r3, #24]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	019b      	lsls	r3, r3, #6
 80029c2:	431a      	orrs	r2, r3
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	085b      	lsrs	r3, r3, #1
 80029c8:	3b01      	subs	r3, #1
 80029ca:	041b      	lsls	r3, r3, #16
 80029cc:	431a      	orrs	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d2:	061b      	lsls	r3, r3, #24
 80029d4:	4928      	ldr	r1, [pc, #160]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80029dc:	4b26      	ldr	r3, [pc, #152]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80029de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029e2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ea:	3b01      	subs	r3, #1
 80029ec:	021b      	lsls	r3, r3, #8
 80029ee:	4922      	ldr	r1, [pc, #136]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d01d      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a0a:	d118      	bne.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a12:	0e1b      	lsrs	r3, r3, #24
 8002a14:	f003 030f 	and.w	r3, r3, #15
 8002a18:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699a      	ldr	r2, [r3, #24]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	019b      	lsls	r3, r3, #6
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	085b      	lsrs	r3, r3, #1
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	041b      	lsls	r3, r3, #16
 8002a30:	431a      	orrs	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	061b      	lsls	r3, r3, #24
 8002a36:	4910      	ldr	r1, [pc, #64]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002a40:	2201      	movs	r2, #1
 8002a42:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a44:	f7fe fd0a 	bl	800145c <HAL_GetTick>
 8002a48:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a4c:	f7fe fd06 	bl	800145c <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e007      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a5e:	4b06      	ldr	r3, [pc, #24]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a6a:	d1ef      	bne.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3730      	adds	r7, #48	@ 0x30
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	42470070 	.word	0x42470070

08002a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a84:	b0ae      	sub	sp, #184	@ 0xb8
 8002a86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aa6:	4bcb      	ldr	r3, [pc, #812]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 030c 	and.w	r3, r3, #12
 8002aae:	2b0c      	cmp	r3, #12
 8002ab0:	f200 8206 	bhi.w	8002ec0 <HAL_RCC_GetSysClockFreq+0x440>
 8002ab4:	a201      	add	r2, pc, #4	@ (adr r2, 8002abc <HAL_RCC_GetSysClockFreq+0x3c>)
 8002ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aba:	bf00      	nop
 8002abc:	08002af1 	.word	0x08002af1
 8002ac0:	08002ec1 	.word	0x08002ec1
 8002ac4:	08002ec1 	.word	0x08002ec1
 8002ac8:	08002ec1 	.word	0x08002ec1
 8002acc:	08002af9 	.word	0x08002af9
 8002ad0:	08002ec1 	.word	0x08002ec1
 8002ad4:	08002ec1 	.word	0x08002ec1
 8002ad8:	08002ec1 	.word	0x08002ec1
 8002adc:	08002b01 	.word	0x08002b01
 8002ae0:	08002ec1 	.word	0x08002ec1
 8002ae4:	08002ec1 	.word	0x08002ec1
 8002ae8:	08002ec1 	.word	0x08002ec1
 8002aec:	08002cf1 	.word	0x08002cf1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002af0:	4bb9      	ldr	r3, [pc, #740]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002af2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002af6:	e1e7      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002af8:	4bb8      	ldr	r3, [pc, #736]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x35c>)
 8002afa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002afe:	e1e3      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b00:	4bb4      	ldr	r3, [pc, #720]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b0c:	4bb1      	ldr	r3, [pc, #708]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d071      	beq.n	8002bfc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b18:	4bae      	ldr	r3, [pc, #696]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	099b      	lsrs	r3, r3, #6
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b24:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002b28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002b34:	2300      	movs	r3, #0
 8002b36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002b3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002b3e:	4622      	mov	r2, r4
 8002b40:	462b      	mov	r3, r5
 8002b42:	f04f 0000 	mov.w	r0, #0
 8002b46:	f04f 0100 	mov.w	r1, #0
 8002b4a:	0159      	lsls	r1, r3, #5
 8002b4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b50:	0150      	lsls	r0, r2, #5
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4621      	mov	r1, r4
 8002b58:	1a51      	subs	r1, r2, r1
 8002b5a:	6439      	str	r1, [r7, #64]	@ 0x40
 8002b5c:	4629      	mov	r1, r5
 8002b5e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b62:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	f04f 0300 	mov.w	r3, #0
 8002b6c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002b70:	4649      	mov	r1, r9
 8002b72:	018b      	lsls	r3, r1, #6
 8002b74:	4641      	mov	r1, r8
 8002b76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b7a:	4641      	mov	r1, r8
 8002b7c:	018a      	lsls	r2, r1, #6
 8002b7e:	4641      	mov	r1, r8
 8002b80:	1a51      	subs	r1, r2, r1
 8002b82:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b84:	4649      	mov	r1, r9
 8002b86:	eb63 0301 	sbc.w	r3, r3, r1
 8002b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002b98:	4649      	mov	r1, r9
 8002b9a:	00cb      	lsls	r3, r1, #3
 8002b9c:	4641      	mov	r1, r8
 8002b9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ba2:	4641      	mov	r1, r8
 8002ba4:	00ca      	lsls	r2, r1, #3
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4603      	mov	r3, r0
 8002bac:	4622      	mov	r2, r4
 8002bae:	189b      	adds	r3, r3, r2
 8002bb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bb2:	462b      	mov	r3, r5
 8002bb4:	460a      	mov	r2, r1
 8002bb6:	eb42 0303 	adc.w	r3, r2, r3
 8002bba:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	f04f 0300 	mov.w	r3, #0
 8002bc4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002bc8:	4629      	mov	r1, r5
 8002bca:	024b      	lsls	r3, r1, #9
 8002bcc:	4621      	mov	r1, r4
 8002bce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bd2:	4621      	mov	r1, r4
 8002bd4:	024a      	lsls	r2, r1, #9
 8002bd6:	4610      	mov	r0, r2
 8002bd8:	4619      	mov	r1, r3
 8002bda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bde:	2200      	movs	r2, #0
 8002be0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002be4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002be8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002bec:	f7fd fb0a 	bl	8000204 <__aeabi_uldivmod>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002bfa:	e067      	b.n	8002ccc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bfc:	4b75      	ldr	r3, [pc, #468]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	099b      	lsrs	r3, r3, #6
 8002c02:	2200      	movs	r2, #0
 8002c04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c08:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002c0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c16:	2300      	movs	r3, #0
 8002c18:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002c1a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002c1e:	4622      	mov	r2, r4
 8002c20:	462b      	mov	r3, r5
 8002c22:	f04f 0000 	mov.w	r0, #0
 8002c26:	f04f 0100 	mov.w	r1, #0
 8002c2a:	0159      	lsls	r1, r3, #5
 8002c2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c30:	0150      	lsls	r0, r2, #5
 8002c32:	4602      	mov	r2, r0
 8002c34:	460b      	mov	r3, r1
 8002c36:	4621      	mov	r1, r4
 8002c38:	1a51      	subs	r1, r2, r1
 8002c3a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002c3c:	4629      	mov	r1, r5
 8002c3e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002c50:	4649      	mov	r1, r9
 8002c52:	018b      	lsls	r3, r1, #6
 8002c54:	4641      	mov	r1, r8
 8002c56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c5a:	4641      	mov	r1, r8
 8002c5c:	018a      	lsls	r2, r1, #6
 8002c5e:	4641      	mov	r1, r8
 8002c60:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c64:	4649      	mov	r1, r9
 8002c66:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	f04f 0300 	mov.w	r3, #0
 8002c72:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c76:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c7e:	4692      	mov	sl, r2
 8002c80:	469b      	mov	fp, r3
 8002c82:	4623      	mov	r3, r4
 8002c84:	eb1a 0303 	adds.w	r3, sl, r3
 8002c88:	623b      	str	r3, [r7, #32]
 8002c8a:	462b      	mov	r3, r5
 8002c8c:	eb4b 0303 	adc.w	r3, fp, r3
 8002c90:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	f04f 0300 	mov.w	r3, #0
 8002c9a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002c9e:	4629      	mov	r1, r5
 8002ca0:	028b      	lsls	r3, r1, #10
 8002ca2:	4621      	mov	r1, r4
 8002ca4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ca8:	4621      	mov	r1, r4
 8002caa:	028a      	lsls	r2, r1, #10
 8002cac:	4610      	mov	r0, r2
 8002cae:	4619      	mov	r1, r3
 8002cb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	673b      	str	r3, [r7, #112]	@ 0x70
 8002cb8:	677a      	str	r2, [r7, #116]	@ 0x74
 8002cba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002cbe:	f7fd faa1 	bl	8000204 <__aeabi_uldivmod>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ccc:	4b41      	ldr	r3, [pc, #260]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	0c1b      	lsrs	r3, r3, #16
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002cde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002ce2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002cee:	e0eb      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cf0:	4b38      	ldr	r3, [pc, #224]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cf8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cfc:	4b35      	ldr	r3, [pc, #212]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d06b      	beq.n	8002de0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d08:	4b32      	ldr	r3, [pc, #200]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	099b      	lsrs	r3, r3, #6
 8002d0e:	2200      	movs	r2, #0
 8002d10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002d14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d1a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002d20:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002d24:	4622      	mov	r2, r4
 8002d26:	462b      	mov	r3, r5
 8002d28:	f04f 0000 	mov.w	r0, #0
 8002d2c:	f04f 0100 	mov.w	r1, #0
 8002d30:	0159      	lsls	r1, r3, #5
 8002d32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d36:	0150      	lsls	r0, r2, #5
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4621      	mov	r1, r4
 8002d3e:	1a51      	subs	r1, r2, r1
 8002d40:	61b9      	str	r1, [r7, #24]
 8002d42:	4629      	mov	r1, r5
 8002d44:	eb63 0301 	sbc.w	r3, r3, r1
 8002d48:	61fb      	str	r3, [r7, #28]
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	f04f 0300 	mov.w	r3, #0
 8002d52:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002d56:	4659      	mov	r1, fp
 8002d58:	018b      	lsls	r3, r1, #6
 8002d5a:	4651      	mov	r1, sl
 8002d5c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d60:	4651      	mov	r1, sl
 8002d62:	018a      	lsls	r2, r1, #6
 8002d64:	4651      	mov	r1, sl
 8002d66:	ebb2 0801 	subs.w	r8, r2, r1
 8002d6a:	4659      	mov	r1, fp
 8002d6c:	eb63 0901 	sbc.w	r9, r3, r1
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d7c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d80:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d84:	4690      	mov	r8, r2
 8002d86:	4699      	mov	r9, r3
 8002d88:	4623      	mov	r3, r4
 8002d8a:	eb18 0303 	adds.w	r3, r8, r3
 8002d8e:	613b      	str	r3, [r7, #16]
 8002d90:	462b      	mov	r3, r5
 8002d92:	eb49 0303 	adc.w	r3, r9, r3
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	f04f 0300 	mov.w	r3, #0
 8002da0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002da4:	4629      	mov	r1, r5
 8002da6:	024b      	lsls	r3, r1, #9
 8002da8:	4621      	mov	r1, r4
 8002daa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dae:	4621      	mov	r1, r4
 8002db0:	024a      	lsls	r2, r1, #9
 8002db2:	4610      	mov	r0, r2
 8002db4:	4619      	mov	r1, r3
 8002db6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002dba:	2200      	movs	r2, #0
 8002dbc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002dbe:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002dc0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002dc4:	f7fd fa1e 	bl	8000204 <__aeabi_uldivmod>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4613      	mov	r3, r2
 8002dce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002dd2:	e065      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x420>
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	00f42400 	.word	0x00f42400
 8002ddc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de0:	4b3d      	ldr	r3, [pc, #244]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	099b      	lsrs	r3, r3, #6
 8002de6:	2200      	movs	r2, #0
 8002de8:	4618      	mov	r0, r3
 8002dea:	4611      	mov	r1, r2
 8002dec:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002df0:	653b      	str	r3, [r7, #80]	@ 0x50
 8002df2:	2300      	movs	r3, #0
 8002df4:	657b      	str	r3, [r7, #84]	@ 0x54
 8002df6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002dfa:	4642      	mov	r2, r8
 8002dfc:	464b      	mov	r3, r9
 8002dfe:	f04f 0000 	mov.w	r0, #0
 8002e02:	f04f 0100 	mov.w	r1, #0
 8002e06:	0159      	lsls	r1, r3, #5
 8002e08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e0c:	0150      	lsls	r0, r2, #5
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4641      	mov	r1, r8
 8002e14:	1a51      	subs	r1, r2, r1
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	4649      	mov	r1, r9
 8002e1a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002e2c:	4659      	mov	r1, fp
 8002e2e:	018b      	lsls	r3, r1, #6
 8002e30:	4651      	mov	r1, sl
 8002e32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e36:	4651      	mov	r1, sl
 8002e38:	018a      	lsls	r2, r1, #6
 8002e3a:	4651      	mov	r1, sl
 8002e3c:	1a54      	subs	r4, r2, r1
 8002e3e:	4659      	mov	r1, fp
 8002e40:	eb63 0501 	sbc.w	r5, r3, r1
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	f04f 0300 	mov.w	r3, #0
 8002e4c:	00eb      	lsls	r3, r5, #3
 8002e4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e52:	00e2      	lsls	r2, r4, #3
 8002e54:	4614      	mov	r4, r2
 8002e56:	461d      	mov	r5, r3
 8002e58:	4643      	mov	r3, r8
 8002e5a:	18e3      	adds	r3, r4, r3
 8002e5c:	603b      	str	r3, [r7, #0]
 8002e5e:	464b      	mov	r3, r9
 8002e60:	eb45 0303 	adc.w	r3, r5, r3
 8002e64:	607b      	str	r3, [r7, #4]
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	f04f 0300 	mov.w	r3, #0
 8002e6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e72:	4629      	mov	r1, r5
 8002e74:	028b      	lsls	r3, r1, #10
 8002e76:	4621      	mov	r1, r4
 8002e78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e7c:	4621      	mov	r1, r4
 8002e7e:	028a      	lsls	r2, r1, #10
 8002e80:	4610      	mov	r0, r2
 8002e82:	4619      	mov	r1, r3
 8002e84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e88:	2200      	movs	r2, #0
 8002e8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e8c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002e8e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002e92:	f7fd f9b7 	bl	8000204 <__aeabi_uldivmod>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002ea0:	4b0d      	ldr	r3, [pc, #52]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	0f1b      	lsrs	r3, r3, #28
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002eae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002eb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002ebe:	e003      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ec0:	4b06      	ldr	r3, [pc, #24]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x45c>)
 8002ec2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002ec6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ec8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	37b8      	adds	r7, #184	@ 0xb8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	00f42400 	.word	0x00f42400

08002ee0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e28d      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 8083 	beq.w	8003006 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002f00:	4b94      	ldr	r3, [pc, #592]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 030c 	and.w	r3, r3, #12
 8002f08:	2b04      	cmp	r3, #4
 8002f0a:	d019      	beq.n	8002f40 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002f0c:	4b91      	ldr	r3, [pc, #580]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 030c 	and.w	r3, r3, #12
        || \
 8002f14:	2b08      	cmp	r3, #8
 8002f16:	d106      	bne.n	8002f26 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002f18:	4b8e      	ldr	r3, [pc, #568]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f24:	d00c      	beq.n	8002f40 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f26:	4b8b      	ldr	r3, [pc, #556]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002f2e:	2b0c      	cmp	r3, #12
 8002f30:	d112      	bne.n	8002f58 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f32:	4b88      	ldr	r3, [pc, #544]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f3e:	d10b      	bne.n	8002f58 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f40:	4b84      	ldr	r3, [pc, #528]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d05b      	beq.n	8003004 <HAL_RCC_OscConfig+0x124>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d157      	bne.n	8003004 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e25a      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f60:	d106      	bne.n	8002f70 <HAL_RCC_OscConfig+0x90>
 8002f62:	4b7c      	ldr	r3, [pc, #496]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a7b      	ldr	r2, [pc, #492]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	e01d      	b.n	8002fac <HAL_RCC_OscConfig+0xcc>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f78:	d10c      	bne.n	8002f94 <HAL_RCC_OscConfig+0xb4>
 8002f7a:	4b76      	ldr	r3, [pc, #472]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a75      	ldr	r2, [pc, #468]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	4b73      	ldr	r3, [pc, #460]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a72      	ldr	r2, [pc, #456]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	e00b      	b.n	8002fac <HAL_RCC_OscConfig+0xcc>
 8002f94:	4b6f      	ldr	r3, [pc, #444]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a6e      	ldr	r2, [pc, #440]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	4b6c      	ldr	r3, [pc, #432]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a6b      	ldr	r2, [pc, #428]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8002fa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002faa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d013      	beq.n	8002fdc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb4:	f7fe fa52 	bl	800145c <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fbc:	f7fe fa4e 	bl	800145c <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b64      	cmp	r3, #100	@ 0x64
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e21f      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fce:	4b61      	ldr	r3, [pc, #388]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCC_OscConfig+0xdc>
 8002fda:	e014      	b.n	8003006 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7fe fa3e 	bl	800145c <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe4:	f7fe fa3a 	bl	800145c <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b64      	cmp	r3, #100	@ 0x64
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e20b      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ff6:	4b57      	ldr	r3, [pc, #348]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x104>
 8003002:	e000      	b.n	8003006 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d06f      	beq.n	80030f2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003012:	4b50      	ldr	r3, [pc, #320]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	2b00      	cmp	r3, #0
 800301c:	d017      	beq.n	800304e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800301e:	4b4d      	ldr	r3, [pc, #308]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
        || \
 8003026:	2b08      	cmp	r3, #8
 8003028:	d105      	bne.n	8003036 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800302a:	4b4a      	ldr	r3, [pc, #296]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00b      	beq.n	800304e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003036:	4b47      	ldr	r3, [pc, #284]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800303e:	2b0c      	cmp	r3, #12
 8003040:	d11c      	bne.n	800307c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003042:	4b44      	ldr	r3, [pc, #272]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d116      	bne.n	800307c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304e:	4b41      	ldr	r3, [pc, #260]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d005      	beq.n	8003066 <HAL_RCC_OscConfig+0x186>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d001      	beq.n	8003066 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e1d3      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003066:	4b3b      	ldr	r3, [pc, #236]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4937      	ldr	r1, [pc, #220]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8003076:	4313      	orrs	r3, r2
 8003078:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800307a:	e03a      	b.n	80030f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d020      	beq.n	80030c6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003084:	4b34      	ldr	r3, [pc, #208]	@ (8003158 <HAL_RCC_OscConfig+0x278>)
 8003086:	2201      	movs	r2, #1
 8003088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308a:	f7fe f9e7 	bl	800145c <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003090:	e008      	b.n	80030a4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003092:	f7fe f9e3 	bl	800145c <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e1b4      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a4:	4b2b      	ldr	r3, [pc, #172]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0f0      	beq.n	8003092 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b0:	4b28      	ldr	r3, [pc, #160]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	4925      	ldr	r1, [pc, #148]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	600b      	str	r3, [r1, #0]
 80030c4:	e015      	b.n	80030f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030c6:	4b24      	ldr	r3, [pc, #144]	@ (8003158 <HAL_RCC_OscConfig+0x278>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030cc:	f7fe f9c6 	bl	800145c <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030d4:	f7fe f9c2 	bl	800145c <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e193      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f0      	bne.n	80030d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d036      	beq.n	800316c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d016      	beq.n	8003134 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003106:	4b15      	ldr	r3, [pc, #84]	@ (800315c <HAL_RCC_OscConfig+0x27c>)
 8003108:	2201      	movs	r2, #1
 800310a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310c:	f7fe f9a6 	bl	800145c <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003114:	f7fe f9a2 	bl	800145c <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e173      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003126:	4b0b      	ldr	r3, [pc, #44]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8003128:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0f0      	beq.n	8003114 <HAL_RCC_OscConfig+0x234>
 8003132:	e01b      	b.n	800316c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003134:	4b09      	ldr	r3, [pc, #36]	@ (800315c <HAL_RCC_OscConfig+0x27c>)
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313a:	f7fe f98f 	bl	800145c <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003140:	e00e      	b.n	8003160 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003142:	f7fe f98b 	bl	800145c <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d907      	bls.n	8003160 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e15c      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
 8003154:	40023800 	.word	0x40023800
 8003158:	42470000 	.word	0x42470000
 800315c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003160:	4b8a      	ldr	r3, [pc, #552]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003162:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1ea      	bne.n	8003142 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 8097 	beq.w	80032a8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800317a:	2300      	movs	r3, #0
 800317c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800317e:	4b83      	ldr	r3, [pc, #524]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003182:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10f      	bne.n	80031aa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800318a:	2300      	movs	r3, #0
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	4b7f      	ldr	r3, [pc, #508]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003192:	4a7e      	ldr	r2, [pc, #504]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003198:	6413      	str	r3, [r2, #64]	@ 0x40
 800319a:	4b7c      	ldr	r3, [pc, #496]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 800319c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031a2:	60bb      	str	r3, [r7, #8]
 80031a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031a6:	2301      	movs	r3, #1
 80031a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031aa:	4b79      	ldr	r3, [pc, #484]	@ (8003390 <HAL_RCC_OscConfig+0x4b0>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d118      	bne.n	80031e8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031b6:	4b76      	ldr	r3, [pc, #472]	@ (8003390 <HAL_RCC_OscConfig+0x4b0>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a75      	ldr	r2, [pc, #468]	@ (8003390 <HAL_RCC_OscConfig+0x4b0>)
 80031bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031c2:	f7fe f94b 	bl	800145c <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ca:	f7fe f947 	bl	800145c <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e118      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031dc:	4b6c      	ldr	r3, [pc, #432]	@ (8003390 <HAL_RCC_OscConfig+0x4b0>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0f0      	beq.n	80031ca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d106      	bne.n	80031fe <HAL_RCC_OscConfig+0x31e>
 80031f0:	4b66      	ldr	r3, [pc, #408]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 80031f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f4:	4a65      	ldr	r2, [pc, #404]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80031fc:	e01c      	b.n	8003238 <HAL_RCC_OscConfig+0x358>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	2b05      	cmp	r3, #5
 8003204:	d10c      	bne.n	8003220 <HAL_RCC_OscConfig+0x340>
 8003206:	4b61      	ldr	r3, [pc, #388]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800320a:	4a60      	ldr	r2, [pc, #384]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 800320c:	f043 0304 	orr.w	r3, r3, #4
 8003210:	6713      	str	r3, [r2, #112]	@ 0x70
 8003212:	4b5e      	ldr	r3, [pc, #376]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003216:	4a5d      	ldr	r2, [pc, #372]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003218:	f043 0301 	orr.w	r3, r3, #1
 800321c:	6713      	str	r3, [r2, #112]	@ 0x70
 800321e:	e00b      	b.n	8003238 <HAL_RCC_OscConfig+0x358>
 8003220:	4b5a      	ldr	r3, [pc, #360]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003224:	4a59      	ldr	r2, [pc, #356]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003226:	f023 0301 	bic.w	r3, r3, #1
 800322a:	6713      	str	r3, [r2, #112]	@ 0x70
 800322c:	4b57      	ldr	r3, [pc, #348]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 800322e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003230:	4a56      	ldr	r2, [pc, #344]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003232:	f023 0304 	bic.w	r3, r3, #4
 8003236:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d015      	beq.n	800326c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003240:	f7fe f90c 	bl	800145c <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003246:	e00a      	b.n	800325e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003248:	f7fe f908 	bl	800145c <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003256:	4293      	cmp	r3, r2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e0d7      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800325e:	4b4b      	ldr	r3, [pc, #300]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0ee      	beq.n	8003248 <HAL_RCC_OscConfig+0x368>
 800326a:	e014      	b.n	8003296 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326c:	f7fe f8f6 	bl	800145c <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003272:	e00a      	b.n	800328a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003274:	f7fe f8f2 	bl	800145c <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003282:	4293      	cmp	r3, r2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e0c1      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800328a:	4b40      	ldr	r3, [pc, #256]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 800328c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1ee      	bne.n	8003274 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003296:	7dfb      	ldrb	r3, [r7, #23]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d105      	bne.n	80032a8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800329c:	4b3b      	ldr	r3, [pc, #236]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 800329e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a0:	4a3a      	ldr	r2, [pc, #232]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 80032a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 80ad 	beq.w	800340c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032b2:	4b36      	ldr	r3, [pc, #216]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 030c 	and.w	r3, r3, #12
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d060      	beq.n	8003380 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d145      	bne.n	8003352 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c6:	4b33      	ldr	r3, [pc, #204]	@ (8003394 <HAL_RCC_OscConfig+0x4b4>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032cc:	f7fe f8c6 	bl	800145c <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d4:	f7fe f8c2 	bl	800145c <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e093      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e6:	4b29      	ldr	r3, [pc, #164]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f0      	bne.n	80032d4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69da      	ldr	r2, [r3, #28]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003300:	019b      	lsls	r3, r3, #6
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003308:	085b      	lsrs	r3, r3, #1
 800330a:	3b01      	subs	r3, #1
 800330c:	041b      	lsls	r3, r3, #16
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003314:	061b      	lsls	r3, r3, #24
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331c:	071b      	lsls	r3, r3, #28
 800331e:	491b      	ldr	r1, [pc, #108]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003320:	4313      	orrs	r3, r2
 8003322:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003324:	4b1b      	ldr	r3, [pc, #108]	@ (8003394 <HAL_RCC_OscConfig+0x4b4>)
 8003326:	2201      	movs	r2, #1
 8003328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332a:	f7fe f897 	bl	800145c <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003332:	f7fe f893 	bl	800145c <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e064      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003344:	4b11      	ldr	r3, [pc, #68]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0f0      	beq.n	8003332 <HAL_RCC_OscConfig+0x452>
 8003350:	e05c      	b.n	800340c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003352:	4b10      	ldr	r3, [pc, #64]	@ (8003394 <HAL_RCC_OscConfig+0x4b4>)
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003358:	f7fe f880 	bl	800145c <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003360:	f7fe f87c 	bl	800145c <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e04d      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003372:	4b06      	ldr	r3, [pc, #24]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f0      	bne.n	8003360 <HAL_RCC_OscConfig+0x480>
 800337e:	e045      	b.n	800340c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d107      	bne.n	8003398 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e040      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
 800338c:	40023800 	.word	0x40023800
 8003390:	40007000 	.word	0x40007000
 8003394:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003398:	4b1f      	ldr	r3, [pc, #124]	@ (8003418 <HAL_RCC_OscConfig+0x538>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d030      	beq.n	8003408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d129      	bne.n	8003408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033be:	429a      	cmp	r2, r3
 80033c0:	d122      	bne.n	8003408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80033c8:	4013      	ands	r3, r2
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d119      	bne.n	8003408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033de:	085b      	lsrs	r3, r3, #1
 80033e0:	3b01      	subs	r3, #1
 80033e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d10f      	bne.n	8003408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d107      	bne.n	8003408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003402:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003404:	429a      	cmp	r2, r3
 8003406:	d001      	beq.n	800340c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e000      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40023800 	.word	0x40023800

0800341c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e07b      	b.n	8003526 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003432:	2b00      	cmp	r3, #0
 8003434:	d108      	bne.n	8003448 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800343e:	d009      	beq.n	8003454 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	61da      	str	r2, [r3, #28]
 8003446:	e005      	b.n	8003454 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d106      	bne.n	8003474 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7fd fdea 	bl	8001048 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800348a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800349c:	431a      	orrs	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	431a      	orrs	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034c4:	431a      	orrs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034d8:	ea42 0103 	orr.w	r1, r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	0c1b      	lsrs	r3, r3, #16
 80034f2:	f003 0104 	and.w	r1, r3, #4
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fa:	f003 0210 	and.w	r2, r3, #16
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	69da      	ldr	r2, [r3, #28]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003514:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b088      	sub	sp, #32
 8003532:	af00      	add	r7, sp, #0
 8003534:	60f8      	str	r0, [r7, #12]
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	603b      	str	r3, [r7, #0]
 800353a:	4613      	mov	r3, r2
 800353c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800353e:	f7fd ff8d 	bl	800145c <HAL_GetTick>
 8003542:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003544:	88fb      	ldrh	r3, [r7, #6]
 8003546:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b01      	cmp	r3, #1
 8003552:	d001      	beq.n	8003558 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003554:	2302      	movs	r3, #2
 8003556:	e12a      	b.n	80037ae <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d002      	beq.n	8003564 <HAL_SPI_Transmit+0x36>
 800355e:	88fb      	ldrh	r3, [r7, #6]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e122      	b.n	80037ae <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800356e:	2b01      	cmp	r3, #1
 8003570:	d101      	bne.n	8003576 <HAL_SPI_Transmit+0x48>
 8003572:	2302      	movs	r3, #2
 8003574:	e11b      	b.n	80037ae <HAL_SPI_Transmit+0x280>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2203      	movs	r2, #3
 8003582:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	88fa      	ldrh	r2, [r7, #6]
 8003596:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	88fa      	ldrh	r2, [r7, #6]
 800359c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035c4:	d10f      	bne.n	80035e6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035f0:	2b40      	cmp	r3, #64	@ 0x40
 80035f2:	d007      	beq.n	8003604 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003602:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800360c:	d152      	bne.n	80036b4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <HAL_SPI_Transmit+0xee>
 8003616:	8b7b      	ldrh	r3, [r7, #26]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d145      	bne.n	80036a8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003620:	881a      	ldrh	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362c:	1c9a      	adds	r2, r3, #2
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003636:	b29b      	uxth	r3, r3
 8003638:	3b01      	subs	r3, #1
 800363a:	b29a      	uxth	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003640:	e032      	b.n	80036a8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b02      	cmp	r3, #2
 800364e:	d112      	bne.n	8003676 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003654:	881a      	ldrh	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003660:	1c9a      	adds	r2, r3, #2
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800366a:	b29b      	uxth	r3, r3
 800366c:	3b01      	subs	r3, #1
 800366e:	b29a      	uxth	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003674:	e018      	b.n	80036a8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003676:	f7fd fef1 	bl	800145c <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	429a      	cmp	r2, r3
 8003684:	d803      	bhi.n	800368e <HAL_SPI_Transmit+0x160>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368c:	d102      	bne.n	8003694 <HAL_SPI_Transmit+0x166>
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d109      	bne.n	80036a8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e082      	b.n	80037ae <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1c7      	bne.n	8003642 <HAL_SPI_Transmit+0x114>
 80036b2:	e053      	b.n	800375c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d002      	beq.n	80036c2 <HAL_SPI_Transmit+0x194>
 80036bc:	8b7b      	ldrh	r3, [r7, #26]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d147      	bne.n	8003752 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	330c      	adds	r3, #12
 80036cc:	7812      	ldrb	r2, [r2, #0]
 80036ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80036e8:	e033      	b.n	8003752 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d113      	bne.n	8003720 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	330c      	adds	r3, #12
 8003702:	7812      	ldrb	r2, [r2, #0]
 8003704:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003714:	b29b      	uxth	r3, r3
 8003716:	3b01      	subs	r3, #1
 8003718:	b29a      	uxth	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800371e:	e018      	b.n	8003752 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003720:	f7fd fe9c 	bl	800145c <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	429a      	cmp	r2, r3
 800372e:	d803      	bhi.n	8003738 <HAL_SPI_Transmit+0x20a>
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003736:	d102      	bne.n	800373e <HAL_SPI_Transmit+0x210>
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d109      	bne.n	8003752 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e02d      	b.n	80037ae <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003756:	b29b      	uxth	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1c6      	bne.n	80036ea <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800375c:	69fa      	ldr	r2, [r7, #28]
 800375e:	6839      	ldr	r1, [r7, #0]
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 fa59 	bl	8003c18 <SPI_EndRxTxTransaction>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2220      	movs	r2, #32
 8003770:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10a      	bne.n	8003790 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800377a:	2300      	movs	r3, #0
 800377c:	617b      	str	r3, [r7, #20]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	617b      	str	r3, [r7, #20]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	617b      	str	r3, [r7, #20]
 800378e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e000      	b.n	80037ae <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80037ac:	2300      	movs	r3, #0
  }
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3720      	adds	r7, #32
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b08a      	sub	sp, #40	@ 0x28
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	60f8      	str	r0, [r7, #12]
 80037be:	60b9      	str	r1, [r7, #8]
 80037c0:	607a      	str	r2, [r7, #4]
 80037c2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80037c4:	2301      	movs	r3, #1
 80037c6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037c8:	f7fd fe48 	bl	800145c <HAL_GetTick>
 80037cc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80037d4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80037dc:	887b      	ldrh	r3, [r7, #2]
 80037de:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037e0:	7ffb      	ldrb	r3, [r7, #31]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d00c      	beq.n	8003800 <HAL_SPI_TransmitReceive+0x4a>
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037ec:	d106      	bne.n	80037fc <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d102      	bne.n	80037fc <HAL_SPI_TransmitReceive+0x46>
 80037f6:	7ffb      	ldrb	r3, [r7, #31]
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d001      	beq.n	8003800 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80037fc:	2302      	movs	r3, #2
 80037fe:	e17f      	b.n	8003b00 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d005      	beq.n	8003812 <HAL_SPI_TransmitReceive+0x5c>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d002      	beq.n	8003812 <HAL_SPI_TransmitReceive+0x5c>
 800380c:	887b      	ldrh	r3, [r7, #2]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e174      	b.n	8003b00 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800381c:	2b01      	cmp	r3, #1
 800381e:	d101      	bne.n	8003824 <HAL_SPI_TransmitReceive+0x6e>
 8003820:	2302      	movs	r3, #2
 8003822:	e16d      	b.n	8003b00 <HAL_SPI_TransmitReceive+0x34a>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b04      	cmp	r3, #4
 8003836:	d003      	beq.n	8003840 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2205      	movs	r2, #5
 800383c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	887a      	ldrh	r2, [r7, #2]
 8003850:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	887a      	ldrh	r2, [r7, #2]
 8003856:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	887a      	ldrh	r2, [r7, #2]
 8003862:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	887a      	ldrh	r2, [r7, #2]
 8003868:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003880:	2b40      	cmp	r3, #64	@ 0x40
 8003882:	d007      	beq.n	8003894 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003892:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800389c:	d17e      	bne.n	800399c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d002      	beq.n	80038ac <HAL_SPI_TransmitReceive+0xf6>
 80038a6:	8afb      	ldrh	r3, [r7, #22]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d16c      	bne.n	8003986 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b0:	881a      	ldrh	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038bc:	1c9a      	adds	r2, r3, #2
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	3b01      	subs	r3, #1
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038d0:	e059      	b.n	8003986 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d11b      	bne.n	8003918 <HAL_SPI_TransmitReceive+0x162>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d016      	beq.n	8003918 <HAL_SPI_TransmitReceive+0x162>
 80038ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d113      	bne.n	8003918 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f4:	881a      	ldrh	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003900:	1c9a      	adds	r2, r3, #2
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003914:	2300      	movs	r3, #0
 8003916:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b01      	cmp	r3, #1
 8003924:	d119      	bne.n	800395a <HAL_SPI_TransmitReceive+0x1a4>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800392a:	b29b      	uxth	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d014      	beq.n	800395a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800393a:	b292      	uxth	r2, r2
 800393c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003942:	1c9a      	adds	r2, r3, #2
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800394c:	b29b      	uxth	r3, r3
 800394e:	3b01      	subs	r3, #1
 8003950:	b29a      	uxth	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003956:	2301      	movs	r3, #1
 8003958:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800395a:	f7fd fd7f 	bl	800145c <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003966:	429a      	cmp	r2, r3
 8003968:	d80d      	bhi.n	8003986 <HAL_SPI_TransmitReceive+0x1d0>
 800396a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800396c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003970:	d009      	beq.n	8003986 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e0bc      	b.n	8003b00 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800398a:	b29b      	uxth	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1a0      	bne.n	80038d2 <HAL_SPI_TransmitReceive+0x11c>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003994:	b29b      	uxth	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d19b      	bne.n	80038d2 <HAL_SPI_TransmitReceive+0x11c>
 800399a:	e082      	b.n	8003aa2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d002      	beq.n	80039aa <HAL_SPI_TransmitReceive+0x1f4>
 80039a4:	8afb      	ldrh	r3, [r7, #22]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d171      	bne.n	8003a8e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	330c      	adds	r3, #12
 80039b4:	7812      	ldrb	r2, [r2, #0]
 80039b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039bc:	1c5a      	adds	r2, r3, #1
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039d0:	e05d      	b.n	8003a8e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d11c      	bne.n	8003a1a <HAL_SPI_TransmitReceive+0x264>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d017      	beq.n	8003a1a <HAL_SPI_TransmitReceive+0x264>
 80039ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d114      	bne.n	8003a1a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	330c      	adds	r3, #12
 80039fa:	7812      	ldrb	r2, [r2, #0]
 80039fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d119      	bne.n	8003a5c <HAL_SPI_TransmitReceive+0x2a6>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d014      	beq.n	8003a5c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68da      	ldr	r2, [r3, #12]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a3c:	b2d2      	uxtb	r2, r2
 8003a3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a44:	1c5a      	adds	r2, r3, #1
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a5c:	f7fd fcfe 	bl	800145c <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d803      	bhi.n	8003a74 <HAL_SPI_TransmitReceive+0x2be>
 8003a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a72:	d102      	bne.n	8003a7a <HAL_SPI_TransmitReceive+0x2c4>
 8003a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d109      	bne.n	8003a8e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e038      	b.n	8003b00 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d19c      	bne.n	80039d2 <HAL_SPI_TransmitReceive+0x21c>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d197      	bne.n	80039d2 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003aa2:	6a3a      	ldr	r2, [r7, #32]
 8003aa4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 f8b6 	bl	8003c18 <SPI_EndRxTxTransaction>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d008      	beq.n	8003ac4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e01d      	b.n	8003b00 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10a      	bne.n	8003ae2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003acc:	2300      	movs	r3, #0
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	613b      	str	r3, [r7, #16]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	613b      	str	r3, [r7, #16]
 8003ae0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e000      	b.n	8003b00 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003afe:	2300      	movs	r3, #0
  }
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3728      	adds	r7, #40	@ 0x28
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	603b      	str	r3, [r7, #0]
 8003b14:	4613      	mov	r3, r2
 8003b16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b18:	f7fd fca0 	bl	800145c <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b20:	1a9b      	subs	r3, r3, r2
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	4413      	add	r3, r2
 8003b26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b28:	f7fd fc98 	bl	800145c <HAL_GetTick>
 8003b2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b2e:	4b39      	ldr	r3, [pc, #228]	@ (8003c14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	015b      	lsls	r3, r3, #5
 8003b34:	0d1b      	lsrs	r3, r3, #20
 8003b36:	69fa      	ldr	r2, [r7, #28]
 8003b38:	fb02 f303 	mul.w	r3, r2, r3
 8003b3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b3e:	e054      	b.n	8003bea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b46:	d050      	beq.n	8003bea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b48:	f7fd fc88 	bl	800145c <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	69fa      	ldr	r2, [r7, #28]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d902      	bls.n	8003b5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d13d      	bne.n	8003bda <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003b6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b76:	d111      	bne.n	8003b9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b80:	d004      	beq.n	8003b8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b8a:	d107      	bne.n	8003b9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ba4:	d10f      	bne.n	8003bc6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003bc4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e017      	b.n	8003c0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	3b01      	subs	r3, #1
 8003be8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	bf0c      	ite	eq
 8003bfa:	2301      	moveq	r3, #1
 8003bfc:	2300      	movne	r3, #0
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	461a      	mov	r2, r3
 8003c02:	79fb      	ldrb	r3, [r7, #7]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d19b      	bne.n	8003b40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3720      	adds	r7, #32
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20000000 	.word	0x20000000

08003c18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b088      	sub	sp, #32
 8003c1c:	af02      	add	r7, sp, #8
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	2102      	movs	r1, #2
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f7ff ff6a 	bl	8003b08 <SPI_WaitFlagStateUntilTimeout>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d007      	beq.n	8003c4a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c3e:	f043 0220 	orr.w	r2, r3, #32
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e032      	b.n	8003cb0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8003cb8 <SPI_EndRxTxTransaction+0xa0>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a1b      	ldr	r2, [pc, #108]	@ (8003cbc <SPI_EndRxTxTransaction+0xa4>)
 8003c50:	fba2 2303 	umull	r2, r3, r2, r3
 8003c54:	0d5b      	lsrs	r3, r3, #21
 8003c56:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003c5a:	fb02 f303 	mul.w	r3, r2, r3
 8003c5e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c68:	d112      	bne.n	8003c90 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	2200      	movs	r2, #0
 8003c72:	2180      	movs	r1, #128	@ 0x80
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f7ff ff47 	bl	8003b08 <SPI_WaitFlagStateUntilTimeout>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d016      	beq.n	8003cae <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c84:	f043 0220 	orr.w	r2, r3, #32
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e00f      	b.n	8003cb0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00a      	beq.n	8003cac <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ca6:	2b80      	cmp	r3, #128	@ 0x80
 8003ca8:	d0f2      	beq.n	8003c90 <SPI_EndRxTxTransaction+0x78>
 8003caa:	e000      	b.n	8003cae <SPI_EndRxTxTransaction+0x96>
        break;
 8003cac:	bf00      	nop
  }

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3718      	adds	r7, #24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	20000000 	.word	0x20000000
 8003cbc:	165e9f81 	.word	0x165e9f81

08003cc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e041      	b.n	8003d56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d106      	bne.n	8003cec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7fd f9f6 	bl	80010d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	4610      	mov	r0, r2
 8003d00:	f000 fa80 	bl	8004204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
	...

08003d60 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d001      	beq.n	8003d78 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e046      	b.n	8003e06 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a23      	ldr	r2, [pc, #140]	@ (8003e14 <HAL_TIM_Base_Start+0xb4>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d022      	beq.n	8003dd0 <HAL_TIM_Base_Start+0x70>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d92:	d01d      	beq.n	8003dd0 <HAL_TIM_Base_Start+0x70>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a1f      	ldr	r2, [pc, #124]	@ (8003e18 <HAL_TIM_Base_Start+0xb8>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d018      	beq.n	8003dd0 <HAL_TIM_Base_Start+0x70>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a1e      	ldr	r2, [pc, #120]	@ (8003e1c <HAL_TIM_Base_Start+0xbc>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d013      	beq.n	8003dd0 <HAL_TIM_Base_Start+0x70>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a1c      	ldr	r2, [pc, #112]	@ (8003e20 <HAL_TIM_Base_Start+0xc0>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d00e      	beq.n	8003dd0 <HAL_TIM_Base_Start+0x70>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a1b      	ldr	r2, [pc, #108]	@ (8003e24 <HAL_TIM_Base_Start+0xc4>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d009      	beq.n	8003dd0 <HAL_TIM_Base_Start+0x70>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a19      	ldr	r2, [pc, #100]	@ (8003e28 <HAL_TIM_Base_Start+0xc8>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d004      	beq.n	8003dd0 <HAL_TIM_Base_Start+0x70>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a18      	ldr	r2, [pc, #96]	@ (8003e2c <HAL_TIM_Base_Start+0xcc>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d111      	bne.n	8003df4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2b06      	cmp	r3, #6
 8003de0:	d010      	beq.n	8003e04 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f042 0201 	orr.w	r2, r2, #1
 8003df0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df2:	e007      	b.n	8003e04 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0201 	orr.w	r2, r2, #1
 8003e02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	40010000 	.word	0x40010000
 8003e18:	40000400 	.word	0x40000400
 8003e1c:	40000800 	.word	0x40000800
 8003e20:	40000c00 	.word	0x40000c00
 8003e24:	40010400 	.word	0x40010400
 8003e28:	40014000 	.word	0x40014000
 8003e2c:	40001800 	.word	0x40001800

08003e30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d020      	beq.n	8003e94 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d01b      	beq.n	8003e94 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f06f 0202 	mvn.w	r2, #2
 8003e64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f9a3 	bl	80041c6 <HAL_TIM_IC_CaptureCallback>
 8003e80:	e005      	b.n	8003e8e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f995 	bl	80041b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f9a6 	bl	80041da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	f003 0304 	and.w	r3, r3, #4
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d020      	beq.n	8003ee0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d01b      	beq.n	8003ee0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f06f 0204 	mvn.w	r2, #4
 8003eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f97d 	bl	80041c6 <HAL_TIM_IC_CaptureCallback>
 8003ecc:	e005      	b.n	8003eda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f96f 	bl	80041b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 f980 	bl	80041da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d020      	beq.n	8003f2c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f003 0308 	and.w	r3, r3, #8
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d01b      	beq.n	8003f2c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f06f 0208 	mvn.w	r2, #8
 8003efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2204      	movs	r2, #4
 8003f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	f003 0303 	and.w	r3, r3, #3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f957 	bl	80041c6 <HAL_TIM_IC_CaptureCallback>
 8003f18:	e005      	b.n	8003f26 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f949 	bl	80041b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f95a 	bl	80041da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f003 0310 	and.w	r3, r3, #16
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d020      	beq.n	8003f78 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f003 0310 	and.w	r3, r3, #16
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d01b      	beq.n	8003f78 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f06f 0210 	mvn.w	r2, #16
 8003f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2208      	movs	r2, #8
 8003f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f931 	bl	80041c6 <HAL_TIM_IC_CaptureCallback>
 8003f64:	e005      	b.n	8003f72 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f923 	bl	80041b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f934 	bl	80041da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00c      	beq.n	8003f9c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d007      	beq.n	8003f9c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f06f 0201 	mvn.w	r2, #1
 8003f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f901 	bl	800419e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00c      	beq.n	8003fc0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d007      	beq.n	8003fc0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 faee 	bl	800459c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00c      	beq.n	8003fe4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d007      	beq.n	8003fe4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f905 	bl	80041ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f003 0320 	and.w	r3, r3, #32
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00c      	beq.n	8004008 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f003 0320 	and.w	r3, r3, #32
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d007      	beq.n	8004008 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f06f 0220 	mvn.w	r2, #32
 8004000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 fac0 	bl	8004588 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004008:	bf00      	nop
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800401a:	2300      	movs	r3, #0
 800401c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004024:	2b01      	cmp	r3, #1
 8004026:	d101      	bne.n	800402c <HAL_TIM_ConfigClockSource+0x1c>
 8004028:	2302      	movs	r3, #2
 800402a:	e0b4      	b.n	8004196 <HAL_TIM_ConfigClockSource+0x186>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2202      	movs	r2, #2
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800404a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004052:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68ba      	ldr	r2, [r7, #8]
 800405a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004064:	d03e      	beq.n	80040e4 <HAL_TIM_ConfigClockSource+0xd4>
 8004066:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800406a:	f200 8087 	bhi.w	800417c <HAL_TIM_ConfigClockSource+0x16c>
 800406e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004072:	f000 8086 	beq.w	8004182 <HAL_TIM_ConfigClockSource+0x172>
 8004076:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800407a:	d87f      	bhi.n	800417c <HAL_TIM_ConfigClockSource+0x16c>
 800407c:	2b70      	cmp	r3, #112	@ 0x70
 800407e:	d01a      	beq.n	80040b6 <HAL_TIM_ConfigClockSource+0xa6>
 8004080:	2b70      	cmp	r3, #112	@ 0x70
 8004082:	d87b      	bhi.n	800417c <HAL_TIM_ConfigClockSource+0x16c>
 8004084:	2b60      	cmp	r3, #96	@ 0x60
 8004086:	d050      	beq.n	800412a <HAL_TIM_ConfigClockSource+0x11a>
 8004088:	2b60      	cmp	r3, #96	@ 0x60
 800408a:	d877      	bhi.n	800417c <HAL_TIM_ConfigClockSource+0x16c>
 800408c:	2b50      	cmp	r3, #80	@ 0x50
 800408e:	d03c      	beq.n	800410a <HAL_TIM_ConfigClockSource+0xfa>
 8004090:	2b50      	cmp	r3, #80	@ 0x50
 8004092:	d873      	bhi.n	800417c <HAL_TIM_ConfigClockSource+0x16c>
 8004094:	2b40      	cmp	r3, #64	@ 0x40
 8004096:	d058      	beq.n	800414a <HAL_TIM_ConfigClockSource+0x13a>
 8004098:	2b40      	cmp	r3, #64	@ 0x40
 800409a:	d86f      	bhi.n	800417c <HAL_TIM_ConfigClockSource+0x16c>
 800409c:	2b30      	cmp	r3, #48	@ 0x30
 800409e:	d064      	beq.n	800416a <HAL_TIM_ConfigClockSource+0x15a>
 80040a0:	2b30      	cmp	r3, #48	@ 0x30
 80040a2:	d86b      	bhi.n	800417c <HAL_TIM_ConfigClockSource+0x16c>
 80040a4:	2b20      	cmp	r3, #32
 80040a6:	d060      	beq.n	800416a <HAL_TIM_ConfigClockSource+0x15a>
 80040a8:	2b20      	cmp	r3, #32
 80040aa:	d867      	bhi.n	800417c <HAL_TIM_ConfigClockSource+0x16c>
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d05c      	beq.n	800416a <HAL_TIM_ConfigClockSource+0x15a>
 80040b0:	2b10      	cmp	r3, #16
 80040b2:	d05a      	beq.n	800416a <HAL_TIM_ConfigClockSource+0x15a>
 80040b4:	e062      	b.n	800417c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040c6:	f000 f9c3 	bl	8004450 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80040d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	609a      	str	r2, [r3, #8]
      break;
 80040e2:	e04f      	b.n	8004184 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040f4:	f000 f9ac 	bl	8004450 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689a      	ldr	r2, [r3, #8]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004106:	609a      	str	r2, [r3, #8]
      break;
 8004108:	e03c      	b.n	8004184 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004116:	461a      	mov	r2, r3
 8004118:	f000 f920 	bl	800435c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2150      	movs	r1, #80	@ 0x50
 8004122:	4618      	mov	r0, r3
 8004124:	f000 f979 	bl	800441a <TIM_ITRx_SetConfig>
      break;
 8004128:	e02c      	b.n	8004184 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004136:	461a      	mov	r2, r3
 8004138:	f000 f93f 	bl	80043ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2160      	movs	r1, #96	@ 0x60
 8004142:	4618      	mov	r0, r3
 8004144:	f000 f969 	bl	800441a <TIM_ITRx_SetConfig>
      break;
 8004148:	e01c      	b.n	8004184 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004156:	461a      	mov	r2, r3
 8004158:	f000 f900 	bl	800435c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2140      	movs	r1, #64	@ 0x40
 8004162:	4618      	mov	r0, r3
 8004164:	f000 f959 	bl	800441a <TIM_ITRx_SetConfig>
      break;
 8004168:	e00c      	b.n	8004184 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4619      	mov	r1, r3
 8004174:	4610      	mov	r0, r2
 8004176:	f000 f950 	bl	800441a <TIM_ITRx_SetConfig>
      break;
 800417a:	e003      	b.n	8004184 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	73fb      	strb	r3, [r7, #15]
      break;
 8004180:	e000      	b.n	8004184 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004182:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004194:	7bfb      	ldrb	r3, [r7, #15]
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b083      	sub	sp, #12
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041da:	b480      	push	{r7}
 80041dc:	b083      	sub	sp, #12
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041e2:	bf00      	nop
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
	...

08004204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a46      	ldr	r2, [pc, #280]	@ (8004330 <TIM_Base_SetConfig+0x12c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d013      	beq.n	8004244 <TIM_Base_SetConfig+0x40>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004222:	d00f      	beq.n	8004244 <TIM_Base_SetConfig+0x40>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a43      	ldr	r2, [pc, #268]	@ (8004334 <TIM_Base_SetConfig+0x130>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00b      	beq.n	8004244 <TIM_Base_SetConfig+0x40>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a42      	ldr	r2, [pc, #264]	@ (8004338 <TIM_Base_SetConfig+0x134>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d007      	beq.n	8004244 <TIM_Base_SetConfig+0x40>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a41      	ldr	r2, [pc, #260]	@ (800433c <TIM_Base_SetConfig+0x138>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d003      	beq.n	8004244 <TIM_Base_SetConfig+0x40>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a40      	ldr	r2, [pc, #256]	@ (8004340 <TIM_Base_SetConfig+0x13c>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d108      	bne.n	8004256 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800424a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	4313      	orrs	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a35      	ldr	r2, [pc, #212]	@ (8004330 <TIM_Base_SetConfig+0x12c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d02b      	beq.n	80042b6 <TIM_Base_SetConfig+0xb2>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004264:	d027      	beq.n	80042b6 <TIM_Base_SetConfig+0xb2>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a32      	ldr	r2, [pc, #200]	@ (8004334 <TIM_Base_SetConfig+0x130>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d023      	beq.n	80042b6 <TIM_Base_SetConfig+0xb2>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a31      	ldr	r2, [pc, #196]	@ (8004338 <TIM_Base_SetConfig+0x134>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d01f      	beq.n	80042b6 <TIM_Base_SetConfig+0xb2>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a30      	ldr	r2, [pc, #192]	@ (800433c <TIM_Base_SetConfig+0x138>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d01b      	beq.n	80042b6 <TIM_Base_SetConfig+0xb2>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a2f      	ldr	r2, [pc, #188]	@ (8004340 <TIM_Base_SetConfig+0x13c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d017      	beq.n	80042b6 <TIM_Base_SetConfig+0xb2>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a2e      	ldr	r2, [pc, #184]	@ (8004344 <TIM_Base_SetConfig+0x140>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d013      	beq.n	80042b6 <TIM_Base_SetConfig+0xb2>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a2d      	ldr	r2, [pc, #180]	@ (8004348 <TIM_Base_SetConfig+0x144>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d00f      	beq.n	80042b6 <TIM_Base_SetConfig+0xb2>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a2c      	ldr	r2, [pc, #176]	@ (800434c <TIM_Base_SetConfig+0x148>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d00b      	beq.n	80042b6 <TIM_Base_SetConfig+0xb2>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a2b      	ldr	r2, [pc, #172]	@ (8004350 <TIM_Base_SetConfig+0x14c>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d007      	beq.n	80042b6 <TIM_Base_SetConfig+0xb2>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a2a      	ldr	r2, [pc, #168]	@ (8004354 <TIM_Base_SetConfig+0x150>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d003      	beq.n	80042b6 <TIM_Base_SetConfig+0xb2>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a29      	ldr	r2, [pc, #164]	@ (8004358 <TIM_Base_SetConfig+0x154>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d108      	bne.n	80042c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a10      	ldr	r2, [pc, #64]	@ (8004330 <TIM_Base_SetConfig+0x12c>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d003      	beq.n	80042fc <TIM_Base_SetConfig+0xf8>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a12      	ldr	r2, [pc, #72]	@ (8004340 <TIM_Base_SetConfig+0x13c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d103      	bne.n	8004304 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b01      	cmp	r3, #1
 8004314:	d105      	bne.n	8004322 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	f023 0201 	bic.w	r2, r3, #1
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	611a      	str	r2, [r3, #16]
  }
}
 8004322:	bf00      	nop
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	40010000 	.word	0x40010000
 8004334:	40000400 	.word	0x40000400
 8004338:	40000800 	.word	0x40000800
 800433c:	40000c00 	.word	0x40000c00
 8004340:	40010400 	.word	0x40010400
 8004344:	40014000 	.word	0x40014000
 8004348:	40014400 	.word	0x40014400
 800434c:	40014800 	.word	0x40014800
 8004350:	40001800 	.word	0x40001800
 8004354:	40001c00 	.word	0x40001c00
 8004358:	40002000 	.word	0x40002000

0800435c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800435c:	b480      	push	{r7}
 800435e:	b087      	sub	sp, #28
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	f023 0201 	bic.w	r2, r3, #1
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004386:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	011b      	lsls	r3, r3, #4
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	4313      	orrs	r3, r2
 8004390:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f023 030a 	bic.w	r3, r3, #10
 8004398:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	4313      	orrs	r3, r2
 80043a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	621a      	str	r2, [r3, #32]
}
 80043ae:	bf00      	nop
 80043b0:	371c      	adds	r7, #28
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b087      	sub	sp, #28
 80043be:	af00      	add	r7, sp, #0
 80043c0:	60f8      	str	r0, [r7, #12]
 80043c2:	60b9      	str	r1, [r7, #8]
 80043c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	f023 0210 	bic.w	r2, r3, #16
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	031b      	lsls	r3, r3, #12
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	011b      	lsls	r3, r3, #4
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	4313      	orrs	r3, r2
 8004400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	621a      	str	r2, [r3, #32]
}
 800440e:	bf00      	nop
 8004410:	371c      	adds	r7, #28
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800441a:	b480      	push	{r7}
 800441c:	b085      	sub	sp, #20
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
 8004422:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004430:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4313      	orrs	r3, r2
 8004438:	f043 0307 	orr.w	r3, r3, #7
 800443c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	609a      	str	r2, [r3, #8]
}
 8004444:	bf00      	nop
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004450:	b480      	push	{r7}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
 800445c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800446a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	021a      	lsls	r2, r3, #8
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	431a      	orrs	r2, r3
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	4313      	orrs	r3, r2
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	4313      	orrs	r3, r2
 800447c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	609a      	str	r2, [r3, #8]
}
 8004484:	bf00      	nop
 8004486:	371c      	adds	r7, #28
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d101      	bne.n	80044a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044a4:	2302      	movs	r3, #2
 80044a6:	e05a      	b.n	800455e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2202      	movs	r2, #2
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a21      	ldr	r2, [pc, #132]	@ (800456c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d022      	beq.n	8004532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044f4:	d01d      	beq.n	8004532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a1d      	ldr	r2, [pc, #116]	@ (8004570 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d018      	beq.n	8004532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a1b      	ldr	r2, [pc, #108]	@ (8004574 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d013      	beq.n	8004532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a1a      	ldr	r2, [pc, #104]	@ (8004578 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d00e      	beq.n	8004532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a18      	ldr	r2, [pc, #96]	@ (800457c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d009      	beq.n	8004532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a17      	ldr	r2, [pc, #92]	@ (8004580 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d004      	beq.n	8004532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a15      	ldr	r2, [pc, #84]	@ (8004584 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d10c      	bne.n	800454c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004538:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	4313      	orrs	r3, r2
 8004542:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	40010000 	.word	0x40010000
 8004570:	40000400 	.word	0x40000400
 8004574:	40000800 	.word	0x40000800
 8004578:	40000c00 	.word	0x40000c00
 800457c:	40010400 	.word	0x40010400
 8004580:	40014000 	.word	0x40014000
 8004584:	40001800 	.word	0x40001800

08004588 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e042      	b.n	8004648 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d106      	bne.n	80045dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7fc fda4 	bl	8001124 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2224      	movs	r2, #36	@ 0x24
 80045e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68da      	ldr	r2, [r3, #12]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80045f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f82b 	bl	8004650 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	691a      	ldr	r2, [r3, #16]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004608:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	695a      	ldr	r2, [r3, #20]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004618:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004628:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2220      	movs	r2, #32
 8004634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2220      	movs	r2, #32
 800463c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3708      	adds	r7, #8
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004654:	b0c0      	sub	sp, #256	@ 0x100
 8004656:	af00      	add	r7, sp, #0
 8004658:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800465c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800466c:	68d9      	ldr	r1, [r3, #12]
 800466e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	ea40 0301 	orr.w	r3, r0, r1
 8004678:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800467a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	431a      	orrs	r2, r3
 8004688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	431a      	orrs	r2, r3
 8004690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	4313      	orrs	r3, r2
 8004698:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800469c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80046a8:	f021 010c 	bic.w	r1, r1, #12
 80046ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80046b6:	430b      	orrs	r3, r1
 80046b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80046c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ca:	6999      	ldr	r1, [r3, #24]
 80046cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	ea40 0301 	orr.w	r3, r0, r1
 80046d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	4b8f      	ldr	r3, [pc, #572]	@ (800491c <UART_SetConfig+0x2cc>)
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d005      	beq.n	80046f0 <UART_SetConfig+0xa0>
 80046e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	4b8d      	ldr	r3, [pc, #564]	@ (8004920 <UART_SetConfig+0x2d0>)
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d104      	bne.n	80046fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046f0:	f7fd fe88 	bl	8002404 <HAL_RCC_GetPCLK2Freq>
 80046f4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80046f8:	e003      	b.n	8004702 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046fa:	f7fd fe6f 	bl	80023dc <HAL_RCC_GetPCLK1Freq>
 80046fe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004706:	69db      	ldr	r3, [r3, #28]
 8004708:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800470c:	f040 810c 	bne.w	8004928 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004710:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004714:	2200      	movs	r2, #0
 8004716:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800471a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800471e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004722:	4622      	mov	r2, r4
 8004724:	462b      	mov	r3, r5
 8004726:	1891      	adds	r1, r2, r2
 8004728:	65b9      	str	r1, [r7, #88]	@ 0x58
 800472a:	415b      	adcs	r3, r3
 800472c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800472e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004732:	4621      	mov	r1, r4
 8004734:	eb12 0801 	adds.w	r8, r2, r1
 8004738:	4629      	mov	r1, r5
 800473a:	eb43 0901 	adc.w	r9, r3, r1
 800473e:	f04f 0200 	mov.w	r2, #0
 8004742:	f04f 0300 	mov.w	r3, #0
 8004746:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800474a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800474e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004752:	4690      	mov	r8, r2
 8004754:	4699      	mov	r9, r3
 8004756:	4623      	mov	r3, r4
 8004758:	eb18 0303 	adds.w	r3, r8, r3
 800475c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004760:	462b      	mov	r3, r5
 8004762:	eb49 0303 	adc.w	r3, r9, r3
 8004766:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800476a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004776:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800477a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800477e:	460b      	mov	r3, r1
 8004780:	18db      	adds	r3, r3, r3
 8004782:	653b      	str	r3, [r7, #80]	@ 0x50
 8004784:	4613      	mov	r3, r2
 8004786:	eb42 0303 	adc.w	r3, r2, r3
 800478a:	657b      	str	r3, [r7, #84]	@ 0x54
 800478c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004790:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004794:	f7fb fd36 	bl	8000204 <__aeabi_uldivmod>
 8004798:	4602      	mov	r2, r0
 800479a:	460b      	mov	r3, r1
 800479c:	4b61      	ldr	r3, [pc, #388]	@ (8004924 <UART_SetConfig+0x2d4>)
 800479e:	fba3 2302 	umull	r2, r3, r3, r2
 80047a2:	095b      	lsrs	r3, r3, #5
 80047a4:	011c      	lsls	r4, r3, #4
 80047a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047aa:	2200      	movs	r2, #0
 80047ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80047b0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80047b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80047b8:	4642      	mov	r2, r8
 80047ba:	464b      	mov	r3, r9
 80047bc:	1891      	adds	r1, r2, r2
 80047be:	64b9      	str	r1, [r7, #72]	@ 0x48
 80047c0:	415b      	adcs	r3, r3
 80047c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80047c8:	4641      	mov	r1, r8
 80047ca:	eb12 0a01 	adds.w	sl, r2, r1
 80047ce:	4649      	mov	r1, r9
 80047d0:	eb43 0b01 	adc.w	fp, r3, r1
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	f04f 0300 	mov.w	r3, #0
 80047dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80047e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80047e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047e8:	4692      	mov	sl, r2
 80047ea:	469b      	mov	fp, r3
 80047ec:	4643      	mov	r3, r8
 80047ee:	eb1a 0303 	adds.w	r3, sl, r3
 80047f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80047f6:	464b      	mov	r3, r9
 80047f8:	eb4b 0303 	adc.w	r3, fp, r3
 80047fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800480c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004810:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004814:	460b      	mov	r3, r1
 8004816:	18db      	adds	r3, r3, r3
 8004818:	643b      	str	r3, [r7, #64]	@ 0x40
 800481a:	4613      	mov	r3, r2
 800481c:	eb42 0303 	adc.w	r3, r2, r3
 8004820:	647b      	str	r3, [r7, #68]	@ 0x44
 8004822:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004826:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800482a:	f7fb fceb 	bl	8000204 <__aeabi_uldivmod>
 800482e:	4602      	mov	r2, r0
 8004830:	460b      	mov	r3, r1
 8004832:	4611      	mov	r1, r2
 8004834:	4b3b      	ldr	r3, [pc, #236]	@ (8004924 <UART_SetConfig+0x2d4>)
 8004836:	fba3 2301 	umull	r2, r3, r3, r1
 800483a:	095b      	lsrs	r3, r3, #5
 800483c:	2264      	movs	r2, #100	@ 0x64
 800483e:	fb02 f303 	mul.w	r3, r2, r3
 8004842:	1acb      	subs	r3, r1, r3
 8004844:	00db      	lsls	r3, r3, #3
 8004846:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800484a:	4b36      	ldr	r3, [pc, #216]	@ (8004924 <UART_SetConfig+0x2d4>)
 800484c:	fba3 2302 	umull	r2, r3, r3, r2
 8004850:	095b      	lsrs	r3, r3, #5
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004858:	441c      	add	r4, r3
 800485a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800485e:	2200      	movs	r2, #0
 8004860:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004864:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004868:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800486c:	4642      	mov	r2, r8
 800486e:	464b      	mov	r3, r9
 8004870:	1891      	adds	r1, r2, r2
 8004872:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004874:	415b      	adcs	r3, r3
 8004876:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004878:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800487c:	4641      	mov	r1, r8
 800487e:	1851      	adds	r1, r2, r1
 8004880:	6339      	str	r1, [r7, #48]	@ 0x30
 8004882:	4649      	mov	r1, r9
 8004884:	414b      	adcs	r3, r1
 8004886:	637b      	str	r3, [r7, #52]	@ 0x34
 8004888:	f04f 0200 	mov.w	r2, #0
 800488c:	f04f 0300 	mov.w	r3, #0
 8004890:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004894:	4659      	mov	r1, fp
 8004896:	00cb      	lsls	r3, r1, #3
 8004898:	4651      	mov	r1, sl
 800489a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800489e:	4651      	mov	r1, sl
 80048a0:	00ca      	lsls	r2, r1, #3
 80048a2:	4610      	mov	r0, r2
 80048a4:	4619      	mov	r1, r3
 80048a6:	4603      	mov	r3, r0
 80048a8:	4642      	mov	r2, r8
 80048aa:	189b      	adds	r3, r3, r2
 80048ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80048b0:	464b      	mov	r3, r9
 80048b2:	460a      	mov	r2, r1
 80048b4:	eb42 0303 	adc.w	r3, r2, r3
 80048b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80048c8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80048cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80048d0:	460b      	mov	r3, r1
 80048d2:	18db      	adds	r3, r3, r3
 80048d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048d6:	4613      	mov	r3, r2
 80048d8:	eb42 0303 	adc.w	r3, r2, r3
 80048dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80048e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80048e6:	f7fb fc8d 	bl	8000204 <__aeabi_uldivmod>
 80048ea:	4602      	mov	r2, r0
 80048ec:	460b      	mov	r3, r1
 80048ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004924 <UART_SetConfig+0x2d4>)
 80048f0:	fba3 1302 	umull	r1, r3, r3, r2
 80048f4:	095b      	lsrs	r3, r3, #5
 80048f6:	2164      	movs	r1, #100	@ 0x64
 80048f8:	fb01 f303 	mul.w	r3, r1, r3
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	00db      	lsls	r3, r3, #3
 8004900:	3332      	adds	r3, #50	@ 0x32
 8004902:	4a08      	ldr	r2, [pc, #32]	@ (8004924 <UART_SetConfig+0x2d4>)
 8004904:	fba2 2303 	umull	r2, r3, r2, r3
 8004908:	095b      	lsrs	r3, r3, #5
 800490a:	f003 0207 	and.w	r2, r3, #7
 800490e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4422      	add	r2, r4
 8004916:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004918:	e106      	b.n	8004b28 <UART_SetConfig+0x4d8>
 800491a:	bf00      	nop
 800491c:	40011000 	.word	0x40011000
 8004920:	40011400 	.word	0x40011400
 8004924:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004928:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800492c:	2200      	movs	r2, #0
 800492e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004932:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004936:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800493a:	4642      	mov	r2, r8
 800493c:	464b      	mov	r3, r9
 800493e:	1891      	adds	r1, r2, r2
 8004940:	6239      	str	r1, [r7, #32]
 8004942:	415b      	adcs	r3, r3
 8004944:	627b      	str	r3, [r7, #36]	@ 0x24
 8004946:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800494a:	4641      	mov	r1, r8
 800494c:	1854      	adds	r4, r2, r1
 800494e:	4649      	mov	r1, r9
 8004950:	eb43 0501 	adc.w	r5, r3, r1
 8004954:	f04f 0200 	mov.w	r2, #0
 8004958:	f04f 0300 	mov.w	r3, #0
 800495c:	00eb      	lsls	r3, r5, #3
 800495e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004962:	00e2      	lsls	r2, r4, #3
 8004964:	4614      	mov	r4, r2
 8004966:	461d      	mov	r5, r3
 8004968:	4643      	mov	r3, r8
 800496a:	18e3      	adds	r3, r4, r3
 800496c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004970:	464b      	mov	r3, r9
 8004972:	eb45 0303 	adc.w	r3, r5, r3
 8004976:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800497a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004986:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800498a:	f04f 0200 	mov.w	r2, #0
 800498e:	f04f 0300 	mov.w	r3, #0
 8004992:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004996:	4629      	mov	r1, r5
 8004998:	008b      	lsls	r3, r1, #2
 800499a:	4621      	mov	r1, r4
 800499c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049a0:	4621      	mov	r1, r4
 80049a2:	008a      	lsls	r2, r1, #2
 80049a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80049a8:	f7fb fc2c 	bl	8000204 <__aeabi_uldivmod>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	4b60      	ldr	r3, [pc, #384]	@ (8004b34 <UART_SetConfig+0x4e4>)
 80049b2:	fba3 2302 	umull	r2, r3, r3, r2
 80049b6:	095b      	lsrs	r3, r3, #5
 80049b8:	011c      	lsls	r4, r3, #4
 80049ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049be:	2200      	movs	r2, #0
 80049c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80049c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80049c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80049cc:	4642      	mov	r2, r8
 80049ce:	464b      	mov	r3, r9
 80049d0:	1891      	adds	r1, r2, r2
 80049d2:	61b9      	str	r1, [r7, #24]
 80049d4:	415b      	adcs	r3, r3
 80049d6:	61fb      	str	r3, [r7, #28]
 80049d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049dc:	4641      	mov	r1, r8
 80049de:	1851      	adds	r1, r2, r1
 80049e0:	6139      	str	r1, [r7, #16]
 80049e2:	4649      	mov	r1, r9
 80049e4:	414b      	adcs	r3, r1
 80049e6:	617b      	str	r3, [r7, #20]
 80049e8:	f04f 0200 	mov.w	r2, #0
 80049ec:	f04f 0300 	mov.w	r3, #0
 80049f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049f4:	4659      	mov	r1, fp
 80049f6:	00cb      	lsls	r3, r1, #3
 80049f8:	4651      	mov	r1, sl
 80049fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049fe:	4651      	mov	r1, sl
 8004a00:	00ca      	lsls	r2, r1, #3
 8004a02:	4610      	mov	r0, r2
 8004a04:	4619      	mov	r1, r3
 8004a06:	4603      	mov	r3, r0
 8004a08:	4642      	mov	r2, r8
 8004a0a:	189b      	adds	r3, r3, r2
 8004a0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a10:	464b      	mov	r3, r9
 8004a12:	460a      	mov	r2, r1
 8004a14:	eb42 0303 	adc.w	r3, r2, r3
 8004a18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a26:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004a28:	f04f 0200 	mov.w	r2, #0
 8004a2c:	f04f 0300 	mov.w	r3, #0
 8004a30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004a34:	4649      	mov	r1, r9
 8004a36:	008b      	lsls	r3, r1, #2
 8004a38:	4641      	mov	r1, r8
 8004a3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a3e:	4641      	mov	r1, r8
 8004a40:	008a      	lsls	r2, r1, #2
 8004a42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004a46:	f7fb fbdd 	bl	8000204 <__aeabi_uldivmod>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	4611      	mov	r1, r2
 8004a50:	4b38      	ldr	r3, [pc, #224]	@ (8004b34 <UART_SetConfig+0x4e4>)
 8004a52:	fba3 2301 	umull	r2, r3, r3, r1
 8004a56:	095b      	lsrs	r3, r3, #5
 8004a58:	2264      	movs	r2, #100	@ 0x64
 8004a5a:	fb02 f303 	mul.w	r3, r2, r3
 8004a5e:	1acb      	subs	r3, r1, r3
 8004a60:	011b      	lsls	r3, r3, #4
 8004a62:	3332      	adds	r3, #50	@ 0x32
 8004a64:	4a33      	ldr	r2, [pc, #204]	@ (8004b34 <UART_SetConfig+0x4e4>)
 8004a66:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6a:	095b      	lsrs	r3, r3, #5
 8004a6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a70:	441c      	add	r4, r3
 8004a72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a76:	2200      	movs	r2, #0
 8004a78:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a7a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004a7c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004a80:	4642      	mov	r2, r8
 8004a82:	464b      	mov	r3, r9
 8004a84:	1891      	adds	r1, r2, r2
 8004a86:	60b9      	str	r1, [r7, #8]
 8004a88:	415b      	adcs	r3, r3
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a90:	4641      	mov	r1, r8
 8004a92:	1851      	adds	r1, r2, r1
 8004a94:	6039      	str	r1, [r7, #0]
 8004a96:	4649      	mov	r1, r9
 8004a98:	414b      	adcs	r3, r1
 8004a9a:	607b      	str	r3, [r7, #4]
 8004a9c:	f04f 0200 	mov.w	r2, #0
 8004aa0:	f04f 0300 	mov.w	r3, #0
 8004aa4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004aa8:	4659      	mov	r1, fp
 8004aaa:	00cb      	lsls	r3, r1, #3
 8004aac:	4651      	mov	r1, sl
 8004aae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ab2:	4651      	mov	r1, sl
 8004ab4:	00ca      	lsls	r2, r1, #3
 8004ab6:	4610      	mov	r0, r2
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4603      	mov	r3, r0
 8004abc:	4642      	mov	r2, r8
 8004abe:	189b      	adds	r3, r3, r2
 8004ac0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ac2:	464b      	mov	r3, r9
 8004ac4:	460a      	mov	r2, r1
 8004ac6:	eb42 0303 	adc.w	r3, r2, r3
 8004aca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ad6:	667a      	str	r2, [r7, #100]	@ 0x64
 8004ad8:	f04f 0200 	mov.w	r2, #0
 8004adc:	f04f 0300 	mov.w	r3, #0
 8004ae0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004ae4:	4649      	mov	r1, r9
 8004ae6:	008b      	lsls	r3, r1, #2
 8004ae8:	4641      	mov	r1, r8
 8004aea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004aee:	4641      	mov	r1, r8
 8004af0:	008a      	lsls	r2, r1, #2
 8004af2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004af6:	f7fb fb85 	bl	8000204 <__aeabi_uldivmod>
 8004afa:	4602      	mov	r2, r0
 8004afc:	460b      	mov	r3, r1
 8004afe:	4b0d      	ldr	r3, [pc, #52]	@ (8004b34 <UART_SetConfig+0x4e4>)
 8004b00:	fba3 1302 	umull	r1, r3, r3, r2
 8004b04:	095b      	lsrs	r3, r3, #5
 8004b06:	2164      	movs	r1, #100	@ 0x64
 8004b08:	fb01 f303 	mul.w	r3, r1, r3
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	011b      	lsls	r3, r3, #4
 8004b10:	3332      	adds	r3, #50	@ 0x32
 8004b12:	4a08      	ldr	r2, [pc, #32]	@ (8004b34 <UART_SetConfig+0x4e4>)
 8004b14:	fba2 2303 	umull	r2, r3, r2, r3
 8004b18:	095b      	lsrs	r3, r3, #5
 8004b1a:	f003 020f 	and.w	r2, r3, #15
 8004b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4422      	add	r2, r4
 8004b26:	609a      	str	r2, [r3, #8]
}
 8004b28:	bf00      	nop
 8004b2a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b34:	51eb851f 	.word	0x51eb851f

08004b38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b38:	b084      	sub	sp, #16
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b084      	sub	sp, #16
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
 8004b42:	f107 001c 	add.w	r0, r7, #28
 8004b46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b4a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d123      	bne.n	8004b9a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b56:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004b66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004b7a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d105      	bne.n	8004b8e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 fa9a 	bl	80050c8 <USB_CoreReset>
 8004b94:	4603      	mov	r3, r0
 8004b96:	73fb      	strb	r3, [r7, #15]
 8004b98:	e01b      	b.n	8004bd2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 fa8e 	bl	80050c8 <USB_CoreReset>
 8004bac:	4603      	mov	r3, r0
 8004bae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004bb0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d106      	bne.n	8004bc6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bbc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	639a      	str	r2, [r3, #56]	@ 0x38
 8004bc4:	e005      	b.n	8004bd2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004bd2:	7fbb      	ldrb	r3, [r7, #30]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d10b      	bne.n	8004bf0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f043 0206 	orr.w	r2, r3, #6
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f043 0220 	orr.w	r2, r3, #32
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bfc:	b004      	add	sp, #16
 8004bfe:	4770      	bx	lr

08004c00 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f023 0201 	bic.w	r2, r3, #1
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b084      	sub	sp, #16
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c3e:	78fb      	ldrb	r3, [r7, #3]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d115      	bne.n	8004c70 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004c50:	200a      	movs	r0, #10
 8004c52:	f7fc fc0f 	bl	8001474 <HAL_Delay>
      ms += 10U;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	330a      	adds	r3, #10
 8004c5a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 fa25 	bl	80050ac <USB_GetMode>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d01e      	beq.n	8004ca6 <USB_SetCurrentMode+0x84>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2bc7      	cmp	r3, #199	@ 0xc7
 8004c6c:	d9f0      	bls.n	8004c50 <USB_SetCurrentMode+0x2e>
 8004c6e:	e01a      	b.n	8004ca6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c70:	78fb      	ldrb	r3, [r7, #3]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d115      	bne.n	8004ca2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004c82:	200a      	movs	r0, #10
 8004c84:	f7fc fbf6 	bl	8001474 <HAL_Delay>
      ms += 10U;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	330a      	adds	r3, #10
 8004c8c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 fa0c 	bl	80050ac <USB_GetMode>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d005      	beq.n	8004ca6 <USB_SetCurrentMode+0x84>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2bc7      	cmp	r3, #199	@ 0xc7
 8004c9e:	d9f0      	bls.n	8004c82 <USB_SetCurrentMode+0x60>
 8004ca0:	e001      	b.n	8004ca6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e005      	b.n	8004cb2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2bc8      	cmp	r3, #200	@ 0xc8
 8004caa:	d101      	bne.n	8004cb0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e000      	b.n	8004cb2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
	...

08004cbc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cbc:	b084      	sub	sp, #16
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b086      	sub	sp, #24
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
 8004cc6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004cca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	613b      	str	r3, [r7, #16]
 8004cda:	e009      	b.n	8004cf0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	3340      	adds	r3, #64	@ 0x40
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	3301      	adds	r3, #1
 8004cee:	613b      	str	r3, [r7, #16]
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	2b0e      	cmp	r3, #14
 8004cf4:	d9f2      	bls.n	8004cdc <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004cf6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d11c      	bne.n	8004d38 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d0c:	f043 0302 	orr.w	r3, r3, #2
 8004d10:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d16:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	e005      	b.n	8004d44 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d3c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d50:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d10d      	bne.n	8004d74 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004d58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d104      	bne.n	8004d6a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004d60:	2100      	movs	r1, #0
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f968 	bl	8005038 <USB_SetDevSpeed>
 8004d68:	e008      	b.n	8004d7c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f963 	bl	8005038 <USB_SetDevSpeed>
 8004d72:	e003      	b.n	8004d7c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d74:	2103      	movs	r1, #3
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f95e 	bl	8005038 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d7c:	2110      	movs	r1, #16
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f8fa 	bl	8004f78 <USB_FlushTxFifo>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f924 	bl	8004fdc <USB_FlushRxFifo>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004da4:	461a      	mov	r2, r3
 8004da6:	2300      	movs	r3, #0
 8004da8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004db0:	461a      	mov	r2, r3
 8004db2:	2300      	movs	r3, #0
 8004db4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	613b      	str	r3, [r7, #16]
 8004dc6:	e043      	b.n	8004e50 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004dde:	d118      	bne.n	8004e12 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10a      	bne.n	8004dfc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	015a      	lsls	r2, r3, #5
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004df2:	461a      	mov	r2, r3
 8004df4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004df8:	6013      	str	r3, [r2, #0]
 8004dfa:	e013      	b.n	8004e24 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	015a      	lsls	r2, r3, #5
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e08:	461a      	mov	r2, r3
 8004e0a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004e0e:	6013      	str	r3, [r2, #0]
 8004e10:	e008      	b.n	8004e24 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	015a      	lsls	r2, r3, #5
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e1e:	461a      	mov	r2, r3
 8004e20:	2300      	movs	r3, #0
 8004e22:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e30:	461a      	mov	r2, r3
 8004e32:	2300      	movs	r3, #0
 8004e34:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	015a      	lsls	r2, r3, #5
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e42:	461a      	mov	r2, r3
 8004e44:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004e48:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	613b      	str	r3, [r7, #16]
 8004e50:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004e54:	461a      	mov	r2, r3
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d3b5      	bcc.n	8004dc8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	613b      	str	r3, [r7, #16]
 8004e60:	e043      	b.n	8004eea <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	015a      	lsls	r2, r3, #5
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	4413      	add	r3, r2
 8004e6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e78:	d118      	bne.n	8004eac <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10a      	bne.n	8004e96 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004e92:	6013      	str	r3, [r2, #0]
 8004e94:	e013      	b.n	8004ebe <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004ea8:	6013      	str	r3, [r2, #0]
 8004eaa:	e008      	b.n	8004ebe <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	015a      	lsls	r2, r3, #5
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eb8:	461a      	mov	r2, r3
 8004eba:	2300      	movs	r3, #0
 8004ebc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eca:	461a      	mov	r2, r3
 8004ecc:	2300      	movs	r3, #0
 8004ece:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004edc:	461a      	mov	r2, r3
 8004ede:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004ee2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	613b      	str	r3, [r7, #16]
 8004eea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004eee:	461a      	mov	r2, r3
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d3b5      	bcc.n	8004e62 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f08:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004f16:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f18:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d105      	bne.n	8004f2c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	f043 0210 	orr.w	r2, r3, #16
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	699a      	ldr	r2, [r3, #24]
 8004f30:	4b10      	ldr	r3, [pc, #64]	@ (8004f74 <USB_DevInit+0x2b8>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004f38:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d005      	beq.n	8004f4c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	f043 0208 	orr.w	r2, r3, #8
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004f4c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d107      	bne.n	8004f64 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f5c:	f043 0304 	orr.w	r3, r3, #4
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3718      	adds	r7, #24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f70:	b004      	add	sp, #16
 8004f72:	4770      	bx	lr
 8004f74:	803c3800 	.word	0x803c3800

08004f78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f82:	2300      	movs	r3, #0
 8004f84:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f92:	d901      	bls.n	8004f98 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e01b      	b.n	8004fd0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	daf2      	bge.n	8004f86 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	019b      	lsls	r3, r3, #6
 8004fa8:	f043 0220 	orr.w	r2, r3, #32
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004fbc:	d901      	bls.n	8004fc2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e006      	b.n	8004fd0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f003 0320 	and.w	r3, r3, #32
 8004fca:	2b20      	cmp	r3, #32
 8004fcc:	d0f0      	beq.n	8004fb0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3714      	adds	r7, #20
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	3301      	adds	r3, #1
 8004fec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ff4:	d901      	bls.n	8004ffa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e018      	b.n	800502c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	daf2      	bge.n	8004fe8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005002:	2300      	movs	r3, #0
 8005004:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2210      	movs	r2, #16
 800500a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	3301      	adds	r3, #1
 8005010:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005018:	d901      	bls.n	800501e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e006      	b.n	800502c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	f003 0310 	and.w	r3, r3, #16
 8005026:	2b10      	cmp	r3, #16
 8005028:	d0f0      	beq.n	800500c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3714      	adds	r7, #20
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	460b      	mov	r3, r1
 8005042:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	78fb      	ldrb	r3, [r7, #3]
 8005052:	68f9      	ldr	r1, [r7, #12]
 8005054:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005058:	4313      	orrs	r3, r2
 800505a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3714      	adds	r7, #20
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800506a:	b480      	push	{r7}
 800506c:	b085      	sub	sp, #20
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005084:	f023 0303 	bic.w	r3, r3, #3
 8005088:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005098:	f043 0302 	orr.w	r3, r3, #2
 800509c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3714      	adds	r7, #20
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	f003 0301 	and.w	r3, r3, #1
}
 80050bc:	4618      	mov	r0, r3
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	3301      	adds	r3, #1
 80050d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050e0:	d901      	bls.n	80050e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e01b      	b.n	800511e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	daf2      	bge.n	80050d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	f043 0201 	orr.w	r2, r3, #1
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	3301      	adds	r3, #1
 8005102:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800510a:	d901      	bls.n	8005110 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e006      	b.n	800511e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	2b01      	cmp	r3, #1
 800511a:	d0f0      	beq.n	80050fe <USB_CoreReset+0x36>

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <memset>:
 800512a:	4402      	add	r2, r0
 800512c:	4603      	mov	r3, r0
 800512e:	4293      	cmp	r3, r2
 8005130:	d100      	bne.n	8005134 <memset+0xa>
 8005132:	4770      	bx	lr
 8005134:	f803 1b01 	strb.w	r1, [r3], #1
 8005138:	e7f9      	b.n	800512e <memset+0x4>
	...

0800513c <__libc_init_array>:
 800513c:	b570      	push	{r4, r5, r6, lr}
 800513e:	4d0d      	ldr	r5, [pc, #52]	@ (8005174 <__libc_init_array+0x38>)
 8005140:	4c0d      	ldr	r4, [pc, #52]	@ (8005178 <__libc_init_array+0x3c>)
 8005142:	1b64      	subs	r4, r4, r5
 8005144:	10a4      	asrs	r4, r4, #2
 8005146:	2600      	movs	r6, #0
 8005148:	42a6      	cmp	r6, r4
 800514a:	d109      	bne.n	8005160 <__libc_init_array+0x24>
 800514c:	4d0b      	ldr	r5, [pc, #44]	@ (800517c <__libc_init_array+0x40>)
 800514e:	4c0c      	ldr	r4, [pc, #48]	@ (8005180 <__libc_init_array+0x44>)
 8005150:	f000 f818 	bl	8005184 <_init>
 8005154:	1b64      	subs	r4, r4, r5
 8005156:	10a4      	asrs	r4, r4, #2
 8005158:	2600      	movs	r6, #0
 800515a:	42a6      	cmp	r6, r4
 800515c:	d105      	bne.n	800516a <__libc_init_array+0x2e>
 800515e:	bd70      	pop	{r4, r5, r6, pc}
 8005160:	f855 3b04 	ldr.w	r3, [r5], #4
 8005164:	4798      	blx	r3
 8005166:	3601      	adds	r6, #1
 8005168:	e7ee      	b.n	8005148 <__libc_init_array+0xc>
 800516a:	f855 3b04 	ldr.w	r3, [r5], #4
 800516e:	4798      	blx	r3
 8005170:	3601      	adds	r6, #1
 8005172:	e7f2      	b.n	800515a <__libc_init_array+0x1e>
 8005174:	080051bc 	.word	0x080051bc
 8005178:	080051bc 	.word	0x080051bc
 800517c:	080051bc 	.word	0x080051bc
 8005180:	080051c0 	.word	0x080051c0

08005184 <_init>:
 8005184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005186:	bf00      	nop
 8005188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800518a:	bc08      	pop	{r3}
 800518c:	469e      	mov	lr, r3
 800518e:	4770      	bx	lr

08005190 <_fini>:
 8005190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005192:	bf00      	nop
 8005194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005196:	bc08      	pop	{r3}
 8005198:	469e      	mov	lr, r3
 800519a:	4770      	bx	lr
