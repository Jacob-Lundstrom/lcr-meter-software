
lcr-meter-stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfb8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000850  0800c188  0800c188  0000d188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9d8  0800c9d8  0000e1f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c9d8  0800c9d8  0000d9d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c9e0  0800c9e0  0000e1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9e0  0800c9e0  0000d9e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c9e4  0800c9e4  0000d9e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800c9e8  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007dc  200001f0  0800cbd8  0000e1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009cc  0800cbd8  0000e9cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a81  00000000  00000000  0000e220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000354d  00000000  00000000  00025ca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b0  00000000  00000000  000291f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001013  00000000  00000000  0002a6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000260eb  00000000  00000000  0002b6b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ec4  00000000  00000000  0005179e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4fb1  00000000  00000000  0006b662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00150613  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e28  00000000  00000000  00150658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00157480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c170 	.word	0x0800c170

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	0800c170 	.word	0x0800c170

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b98a 	b.w	8000fb4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f826 	bl	8000cf8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_f2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	f7ff fc65 	bl	8000588 <__aeabi_f2d>
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf0 <__aeabi_f2ulz+0x38>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	4606      	mov	r6, r0
 8000cc4:	460f      	mov	r7, r1
 8000cc6:	f7ff fcb7 	bl	8000638 <__aeabi_dmul>
 8000cca:	f000 f975 	bl	8000fb8 <__aeabi_d2uiz>
 8000cce:	4604      	mov	r4, r0
 8000cd0:	f7ff fc38 	bl	8000544 <__aeabi_ui2d>
 8000cd4:	4b07      	ldr	r3, [pc, #28]	@ (8000cf4 <__aeabi_f2ulz+0x3c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f7ff fcae 	bl	8000638 <__aeabi_dmul>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	460b      	mov	r3, r1
 8000ce0:	4630      	mov	r0, r6
 8000ce2:	4639      	mov	r1, r7
 8000ce4:	f7ff faf0 	bl	80002c8 <__aeabi_dsub>
 8000ce8:	f000 f966 	bl	8000fb8 <__aeabi_d2uiz>
 8000cec:	4621      	mov	r1, r4
 8000cee:	bdd0      	pop	{r4, r6, r7, pc}
 8000cf0:	3df00000 	.word	0x3df00000
 8000cf4:	41f00000 	.word	0x41f00000

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	460c      	mov	r4, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14e      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d04:	4694      	mov	ip, r2
 8000d06:	458c      	cmp	ip, r1
 8000d08:	4686      	mov	lr, r0
 8000d0a:	fab2 f282 	clz	r2, r2
 8000d0e:	d962      	bls.n	8000dd6 <__udivmoddi4+0xde>
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0320 	rsb	r3, r2, #32
 8000d16:	4091      	lsls	r1, r2
 8000d18:	fa20 f303 	lsr.w	r3, r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	4319      	orrs	r1, r3
 8000d22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2a:	fa1f f68c 	uxth.w	r6, ip
 8000d2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb07 1114 	mls	r1, r7, r4, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb04 f106 	mul.w	r1, r4, r6
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d4e:	f080 8112 	bcs.w	8000f76 <__udivmoddi4+0x27e>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 810f 	bls.w	8000f76 <__udivmoddi4+0x27e>
 8000d58:	3c02      	subs	r4, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a59      	subs	r1, r3, r1
 8000d5e:	fa1f f38e 	uxth.w	r3, lr
 8000d62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d66:	fb07 1110 	mls	r1, r7, r0, r1
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb00 f606 	mul.w	r6, r0, r6
 8000d72:	429e      	cmp	r6, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x94>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d7e:	f080 80fc 	bcs.w	8000f7a <__udivmoddi4+0x282>
 8000d82:	429e      	cmp	r6, r3
 8000d84:	f240 80f9 	bls.w	8000f7a <__udivmoddi4+0x282>
 8000d88:	4463      	add	r3, ip
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d92:	2100      	movs	r1, #0
 8000d94:	b11d      	cbz	r5, 8000d9e <__udivmoddi4+0xa6>
 8000d96:	40d3      	lsrs	r3, r2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d905      	bls.n	8000db2 <__udivmoddi4+0xba>
 8000da6:	b10d      	cbz	r5, 8000dac <__udivmoddi4+0xb4>
 8000da8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	4608      	mov	r0, r1
 8000db0:	e7f5      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000db2:	fab3 f183 	clz	r1, r3
 8000db6:	2900      	cmp	r1, #0
 8000db8:	d146      	bne.n	8000e48 <__udivmoddi4+0x150>
 8000dba:	42a3      	cmp	r3, r4
 8000dbc:	d302      	bcc.n	8000dc4 <__udivmoddi4+0xcc>
 8000dbe:	4290      	cmp	r0, r2
 8000dc0:	f0c0 80f0 	bcc.w	8000fa4 <__udivmoddi4+0x2ac>
 8000dc4:	1a86      	subs	r6, r0, r2
 8000dc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dca:	2001      	movs	r0, #1
 8000dcc:	2d00      	cmp	r5, #0
 8000dce:	d0e6      	beq.n	8000d9e <__udivmoddi4+0xa6>
 8000dd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dd4:	e7e3      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	f040 8090 	bne.w	8000efc <__udivmoddi4+0x204>
 8000ddc:	eba1 040c 	sub.w	r4, r1, ip
 8000de0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de4:	fa1f f78c 	uxth.w	r7, ip
 8000de8:	2101      	movs	r1, #1
 8000dea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000df2:	fb08 4416 	mls	r4, r8, r6, r4
 8000df6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dfa:	fb07 f006 	mul.w	r0, r7, r6
 8000dfe:	4298      	cmp	r0, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x11c>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x11a>
 8000e0c:	4298      	cmp	r0, r3
 8000e0e:	f200 80cd 	bhi.w	8000fac <__udivmoddi4+0x2b4>
 8000e12:	4626      	mov	r6, r4
 8000e14:	1a1c      	subs	r4, r3, r0
 8000e16:	fa1f f38e 	uxth.w	r3, lr
 8000e1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb00 f707 	mul.w	r7, r0, r7
 8000e2a:	429f      	cmp	r7, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x148>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x146>
 8000e38:	429f      	cmp	r7, r3
 8000e3a:	f200 80b0 	bhi.w	8000f9e <__udivmoddi4+0x2a6>
 8000e3e:	4620      	mov	r0, r4
 8000e40:	1bdb      	subs	r3, r3, r7
 8000e42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e46:	e7a5      	b.n	8000d94 <__udivmoddi4+0x9c>
 8000e48:	f1c1 0620 	rsb	r6, r1, #32
 8000e4c:	408b      	lsls	r3, r1
 8000e4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e52:	431f      	orrs	r7, r3
 8000e54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e58:	fa04 f301 	lsl.w	r3, r4, r1
 8000e5c:	ea43 030c 	orr.w	r3, r3, ip
 8000e60:	40f4      	lsrs	r4, r6
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	0c38      	lsrs	r0, r7, #16
 8000e68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e70:	fa1f fc87 	uxth.w	ip, r7
 8000e74:	fb00 441e 	mls	r4, r0, lr, r4
 8000e78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e80:	45a1      	cmp	r9, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	d90a      	bls.n	8000e9e <__udivmoddi4+0x1a6>
 8000e88:	193c      	adds	r4, r7, r4
 8000e8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e8e:	f080 8084 	bcs.w	8000f9a <__udivmoddi4+0x2a2>
 8000e92:	45a1      	cmp	r9, r4
 8000e94:	f240 8081 	bls.w	8000f9a <__udivmoddi4+0x2a2>
 8000e98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	eba4 0409 	sub.w	r4, r4, r9
 8000ea2:	fa1f f983 	uxth.w	r9, r3
 8000ea6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eaa:	fb00 4413 	mls	r4, r0, r3, r4
 8000eae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb6:	45a4      	cmp	ip, r4
 8000eb8:	d907      	bls.n	8000eca <__udivmoddi4+0x1d2>
 8000eba:	193c      	adds	r4, r7, r4
 8000ebc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ec0:	d267      	bcs.n	8000f92 <__udivmoddi4+0x29a>
 8000ec2:	45a4      	cmp	ip, r4
 8000ec4:	d965      	bls.n	8000f92 <__udivmoddi4+0x29a>
 8000ec6:	3b02      	subs	r3, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ece:	fba0 9302 	umull	r9, r3, r0, r2
 8000ed2:	eba4 040c 	sub.w	r4, r4, ip
 8000ed6:	429c      	cmp	r4, r3
 8000ed8:	46ce      	mov	lr, r9
 8000eda:	469c      	mov	ip, r3
 8000edc:	d351      	bcc.n	8000f82 <__udivmoddi4+0x28a>
 8000ede:	d04e      	beq.n	8000f7e <__udivmoddi4+0x286>
 8000ee0:	b155      	cbz	r5, 8000ef8 <__udivmoddi4+0x200>
 8000ee2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ee6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eea:	fa04 f606 	lsl.w	r6, r4, r6
 8000eee:	40cb      	lsrs	r3, r1
 8000ef0:	431e      	orrs	r6, r3
 8000ef2:	40cc      	lsrs	r4, r1
 8000ef4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef8:	2100      	movs	r1, #0
 8000efa:	e750      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000efc:	f1c2 0320 	rsb	r3, r2, #32
 8000f00:	fa20 f103 	lsr.w	r1, r0, r3
 8000f04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f08:	fa24 f303 	lsr.w	r3, r4, r3
 8000f0c:	4094      	lsls	r4, r2
 8000f0e:	430c      	orrs	r4, r1
 8000f10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f18:	fa1f f78c 	uxth.w	r7, ip
 8000f1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f20:	fb08 3110 	mls	r1, r8, r0, r3
 8000f24:	0c23      	lsrs	r3, r4, #16
 8000f26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f2a:	fb00 f107 	mul.w	r1, r0, r7
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x24c>
 8000f32:	eb1c 0303 	adds.w	r3, ip, r3
 8000f36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f3a:	d22c      	bcs.n	8000f96 <__udivmoddi4+0x29e>
 8000f3c:	4299      	cmp	r1, r3
 8000f3e:	d92a      	bls.n	8000f96 <__udivmoddi4+0x29e>
 8000f40:	3802      	subs	r0, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	1a5b      	subs	r3, r3, r1
 8000f46:	b2a4      	uxth	r4, r4
 8000f48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f54:	fb01 f307 	mul.w	r3, r1, r7
 8000f58:	42a3      	cmp	r3, r4
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x276>
 8000f5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f64:	d213      	bcs.n	8000f8e <__udivmoddi4+0x296>
 8000f66:	42a3      	cmp	r3, r4
 8000f68:	d911      	bls.n	8000f8e <__udivmoddi4+0x296>
 8000f6a:	3902      	subs	r1, #2
 8000f6c:	4464      	add	r4, ip
 8000f6e:	1ae4      	subs	r4, r4, r3
 8000f70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f74:	e739      	b.n	8000dea <__udivmoddi4+0xf2>
 8000f76:	4604      	mov	r4, r0
 8000f78:	e6f0      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e706      	b.n	8000d8c <__udivmoddi4+0x94>
 8000f7e:	45c8      	cmp	r8, r9
 8000f80:	d2ae      	bcs.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f8a:	3801      	subs	r0, #1
 8000f8c:	e7a8      	b.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f8e:	4631      	mov	r1, r6
 8000f90:	e7ed      	b.n	8000f6e <__udivmoddi4+0x276>
 8000f92:	4603      	mov	r3, r0
 8000f94:	e799      	b.n	8000eca <__udivmoddi4+0x1d2>
 8000f96:	4630      	mov	r0, r6
 8000f98:	e7d4      	b.n	8000f44 <__udivmoddi4+0x24c>
 8000f9a:	46d6      	mov	lr, sl
 8000f9c:	e77f      	b.n	8000e9e <__udivmoddi4+0x1a6>
 8000f9e:	4463      	add	r3, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e74d      	b.n	8000e40 <__udivmoddi4+0x148>
 8000fa4:	4606      	mov	r6, r0
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e70f      	b.n	8000dcc <__udivmoddi4+0xd4>
 8000fac:	3e02      	subs	r6, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	e730      	b.n	8000e14 <__udivmoddi4+0x11c>
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <__aeabi_d2uiz>:
 8000fb8:	004a      	lsls	r2, r1, #1
 8000fba:	d211      	bcs.n	8000fe0 <__aeabi_d2uiz+0x28>
 8000fbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000fc0:	d211      	bcs.n	8000fe6 <__aeabi_d2uiz+0x2e>
 8000fc2:	d50d      	bpl.n	8000fe0 <__aeabi_d2uiz+0x28>
 8000fc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000fc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fcc:	d40e      	bmi.n	8000fec <__aeabi_d2uiz+0x34>
 8000fce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fda:	fa23 f002 	lsr.w	r0, r3, r2
 8000fde:	4770      	bx	lr
 8000fe0:	f04f 0000 	mov.w	r0, #0
 8000fe4:	4770      	bx	lr
 8000fe6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000fea:	d102      	bne.n	8000ff2 <__aeabi_d2uiz+0x3a>
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff0:	4770      	bx	lr
 8000ff2:	f04f 0000 	mov.w	r0, #0
 8000ff6:	4770      	bx	lr

08000ff8 <AD9833_write>:

// MaKE SURE THIS IS DEFINED IN THE main.c FILE
extern SPI_HandleTypeDef hspi1; // SPI handle (Assuming SPI1 is used)


void AD9833_write(uint8_t data_high, uint8_t data_low) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	460a      	mov	r2, r1
 8001002:	71fb      	strb	r3, [r7, #7]
 8001004:	4613      	mov	r3, r2
 8001006:	71bb      	strb	r3, [r7, #6]
    uint8_t data_out[2] = {data_high, data_low};
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	733b      	strb	r3, [r7, #12]
 800100c:	79bb      	ldrb	r3, [r7, #6]
 800100e:	737b      	strb	r3, [r7, #13]
    

    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;  // CPOL = 1 (Clock idle high)
 8001010:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <AD9833_write+0x5c>)
 8001012:	2202      	movs	r2, #2
 8001014:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;       // CPHA = 0 (Sample on the falling edge)
 8001016:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <AD9833_write+0x5c>)
 8001018:	2200      	movs	r2, #0
 800101a:	615a      	str	r2, [r3, #20]
    HAL_SPI_Init(&hspi1); // Restart the SPI module
 800101c:	480d      	ldr	r0, [pc, #52]	@ (8001054 <AD9833_write+0x5c>)
 800101e:	f004 fc6b 	bl	80058f8 <HAL_SPI_Init>

    HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001028:	480b      	ldr	r0, [pc, #44]	@ (8001058 <AD9833_write+0x60>)
 800102a:	f003 f9e7 	bl	80043fc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data_out, 2, HAL_MAX_DELAY);
 800102e:	f107 010c 	add.w	r1, r7, #12
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
 8001036:	2202      	movs	r2, #2
 8001038:	4806      	ldr	r0, [pc, #24]	@ (8001054 <AD9833_write+0x5c>)
 800103a:	f004 fce6 	bl	8005a0a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_SET);
 800103e:	2201      	movs	r2, #1
 8001040:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001044:	4804      	ldr	r0, [pc, #16]	@ (8001058 <AD9833_write+0x60>)
 8001046:	f003 f9d9 	bl	80043fc <HAL_GPIO_WritePin>
}
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000254 	.word	0x20000254
 8001058:	40020c00 	.word	0x40020c00

0800105c <AD9833_write4>:

void AD9833_write4(uint8_t data_l_high, uint8_t data_l_low, uint8_t data_h_high, uint8_t data_h_low) {
 800105c:	b590      	push	{r4, r7, lr}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	4604      	mov	r4, r0
 8001064:	4608      	mov	r0, r1
 8001066:	4611      	mov	r1, r2
 8001068:	461a      	mov	r2, r3
 800106a:	4623      	mov	r3, r4
 800106c:	71fb      	strb	r3, [r7, #7]
 800106e:	4603      	mov	r3, r0
 8001070:	71bb      	strb	r3, [r7, #6]
 8001072:	460b      	mov	r3, r1
 8001074:	717b      	strb	r3, [r7, #5]
 8001076:	4613      	mov	r3, r2
 8001078:	713b      	strb	r3, [r7, #4]
    uint8_t data_out[4] = {data_l_high, data_l_low, data_h_high, data_h_low};
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	733b      	strb	r3, [r7, #12]
 800107e:	79bb      	ldrb	r3, [r7, #6]
 8001080:	737b      	strb	r3, [r7, #13]
 8001082:	797b      	ldrb	r3, [r7, #5]
 8001084:	73bb      	strb	r3, [r7, #14]
 8001086:	793b      	ldrb	r3, [r7, #4]
 8001088:	73fb      	strb	r3, [r7, #15]

    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;  // CPOL = 1 (Clock idle high)
 800108a:	4b10      	ldr	r3, [pc, #64]	@ (80010cc <AD9833_write4+0x70>)
 800108c:	2202      	movs	r2, #2
 800108e:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;       // CPHA = 0 (Sample on the falling edge)
 8001090:	4b0e      	ldr	r3, [pc, #56]	@ (80010cc <AD9833_write4+0x70>)
 8001092:	2200      	movs	r2, #0
 8001094:	615a      	str	r2, [r3, #20]
    HAL_SPI_Init(&hspi1); // Restart the SPI module
 8001096:	480d      	ldr	r0, [pc, #52]	@ (80010cc <AD9833_write4+0x70>)
 8001098:	f004 fc2e 	bl	80058f8 <HAL_SPI_Init>

    HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010a2:	480b      	ldr	r0, [pc, #44]	@ (80010d0 <AD9833_write4+0x74>)
 80010a4:	f003 f9aa 	bl	80043fc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data_out, 4, HAL_MAX_DELAY);
 80010a8:	f107 010c 	add.w	r1, r7, #12
 80010ac:	f04f 33ff 	mov.w	r3, #4294967295
 80010b0:	2204      	movs	r2, #4
 80010b2:	4806      	ldr	r0, [pc, #24]	@ (80010cc <AD9833_write4+0x70>)
 80010b4:	f004 fca9 	bl	8005a0a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_SET);
 80010b8:	2201      	movs	r2, #1
 80010ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010be:	4804      	ldr	r0, [pc, #16]	@ (80010d0 <AD9833_write4+0x74>)
 80010c0:	f003 f99c 	bl	80043fc <HAL_GPIO_WritePin>
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd90      	pop	{r4, r7, pc}
 80010cc:	20000254 	.word	0x20000254
 80010d0:	40020c00 	.word	0x40020c00

080010d4 <AD9833_set_freq>:

void AD9833_set_freq(float f) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	ed87 0a01 	vstr	s0, [r7, #4]
    AD9833_write(0b00100000, 0b10000000); // Control reg, start reset
 80010de:	2180      	movs	r1, #128	@ 0x80
 80010e0:	2020      	movs	r0, #32
 80010e2:	f7ff ff89 	bl	8000ff8 <AD9833_write>

    uint64_t FRQREG = (uint64_t)((f * (1 << 28)) / MASTER_CLK);
 80010e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ea:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001184 <AD9833_set_freq+0xb0>
 80010ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010f2:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001188 <AD9833_set_freq+0xb4>
 80010f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80010fa:	ee16 0a90 	vmov	r0, s13
 80010fe:	f7ff fddb 	bl	8000cb8 <__aeabi_f2ulz>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // Lower bytes
    uint16_t FL = FRQREG & 0x3FFF;
 800110a:	8a3b      	ldrh	r3, [r7, #16]
 800110c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001110:	81fb      	strh	r3, [r7, #14]
    uint8_t Llb = FL & 0xFF;
 8001112:	89fb      	ldrh	r3, [r7, #14]
 8001114:	737b      	strb	r3, [r7, #13]
    uint8_t Lhb = ((FL >> 8) & 0x3F) | 0b01000000;
 8001116:	89fb      	ldrh	r3, [r7, #14]
 8001118:	0a1b      	lsrs	r3, r3, #8
 800111a:	b29b      	uxth	r3, r3
 800111c:	b25b      	sxtb	r3, r3
 800111e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001122:	b25b      	sxtb	r3, r3
 8001124:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001128:	b25b      	sxtb	r3, r3
 800112a:	733b      	strb	r3, [r7, #12]

    // Higher bytes
    uint16_t FH = (FRQREG >> 14) & 0x3FFF;
 800112c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	f04f 0300 	mov.w	r3, #0
 8001138:	0b82      	lsrs	r2, r0, #14
 800113a:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 800113e:	0b8b      	lsrs	r3, r1, #14
 8001140:	b293      	uxth	r3, r2
 8001142:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001146:	817b      	strh	r3, [r7, #10]
    uint8_t Hlb = FH & 0xFF;
 8001148:	897b      	ldrh	r3, [r7, #10]
 800114a:	727b      	strb	r3, [r7, #9]
    uint8_t Hhb = ((FH >> 8) & 0x3F) | 0b01000000;
 800114c:	897b      	ldrh	r3, [r7, #10]
 800114e:	0a1b      	lsrs	r3, r3, #8
 8001150:	b29b      	uxth	r3, r3
 8001152:	b25b      	sxtb	r3, r3
 8001154:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001158:	b25b      	sxtb	r3, r3
 800115a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800115e:	b25b      	sxtb	r3, r3
 8001160:	723b      	strb	r3, [r7, #8]

    AD9833_write4(Lhb, Llb, Hhb, Hlb);
 8001162:	7a7b      	ldrb	r3, [r7, #9]
 8001164:	7a3a      	ldrb	r2, [r7, #8]
 8001166:	7b79      	ldrb	r1, [r7, #13]
 8001168:	7b38      	ldrb	r0, [r7, #12]
 800116a:	f7ff ff77 	bl	800105c <AD9833_write4>

    AD9833_write(0b00100000, 0b00000000); // Control reg, finish reset and configure IC
 800116e:	2100      	movs	r1, #0
 8001170:	2020      	movs	r0, #32
 8001172:	f7ff ff41 	bl	8000ff8 <AD9833_write>
    HAL_Delay(1);
 8001176:	2001      	movs	r0, #1
 8001178:	f002 fc04 	bl	8003984 <HAL_Delay>
}
 800117c:	bf00      	nop
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	4d800000 	.word	0x4d800000
 8001188:	4bbebc20 	.word	0x4bbebc20

0800118c <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b089      	sub	sp, #36	@ 0x24
 8001190:	af02      	add	r7, sp, #8
 8001192:	4604      	mov	r4, r0
 8001194:	4608      	mov	r0, r1
 8001196:	4611      	mov	r1, r2
 8001198:	461a      	mov	r2, r3
 800119a:	4623      	mov	r3, r4
 800119c:	71fb      	strb	r3, [r7, #7]
 800119e:	4603      	mov	r3, r0
 80011a0:	71bb      	strb	r3, [r7, #6]
 80011a2:	460b      	mov	r3, r1
 80011a4:	717b      	strb	r3, [r7, #5]
 80011a6:	4613      	mov	r3, r2
 80011a8:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 80011ae:	7dfb      	ldrb	r3, [r7, #23]
 80011b0:	2b1f      	cmp	r3, #31
 80011b2:	d802      	bhi.n	80011ba <ILI9341_Draw_Char+0x2e>
        Character = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	71fb      	strb	r3, [r7, #7]
 80011b8:	e002      	b.n	80011c0 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 80011ba:	7dfb      	ldrb	r3, [r7, #23]
 80011bc:	3b20      	subs	r3, #32
 80011be:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80011c0:	2300      	movs	r3, #0
 80011c2:	753b      	strb	r3, [r7, #20]
 80011c4:	e012      	b.n	80011ec <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 80011c6:	7dfa      	ldrb	r2, [r7, #23]
 80011c8:	7d38      	ldrb	r0, [r7, #20]
 80011ca:	7d39      	ldrb	r1, [r7, #20]
 80011cc:	4c3b      	ldr	r4, [pc, #236]	@ (80012bc <ILI9341_Draw_Char+0x130>)
 80011ce:	4613      	mov	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	4413      	add	r3, r2
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	4423      	add	r3, r4
 80011d8:	4403      	add	r3, r0
 80011da:	781a      	ldrb	r2, [r3, #0]
 80011dc:	f101 0318 	add.w	r3, r1, #24
 80011e0:	443b      	add	r3, r7
 80011e2:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80011e6:	7d3b      	ldrb	r3, [r7, #20]
 80011e8:	3301      	adds	r3, #1
 80011ea:	753b      	strb	r3, [r7, #20]
 80011ec:	7d3b      	ldrb	r3, [r7, #20]
 80011ee:	2b05      	cmp	r3, #5
 80011f0:	d9e9      	bls.n	80011c6 <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 80011f2:	79bb      	ldrb	r3, [r7, #6]
 80011f4:	b298      	uxth	r0, r3
 80011f6:	797b      	ldrb	r3, [r7, #5]
 80011f8:	b299      	uxth	r1, r3
 80011fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80011fc:	461a      	mov	r2, r3
 80011fe:	0052      	lsls	r2, r2, #1
 8001200:	4413      	add	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	b29a      	uxth	r2, r3
 8001206:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	b29c      	uxth	r4, r3
 800120c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	4623      	mov	r3, r4
 8001212:	f000 fc65 	bl	8001ae0 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8001216:	2300      	movs	r3, #0
 8001218:	757b      	strb	r3, [r7, #21]
 800121a:	e047      	b.n	80012ac <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 800121c:	2300      	movs	r3, #0
 800121e:	75bb      	strb	r3, [r7, #22]
 8001220:	e03e      	b.n	80012a0 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 8001222:	7d7b      	ldrb	r3, [r7, #21]
 8001224:	3318      	adds	r3, #24
 8001226:	443b      	add	r3, r7
 8001228:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800122c:	461a      	mov	r2, r3
 800122e:	7dbb      	ldrb	r3, [r7, #22]
 8001230:	fa42 f303 	asr.w	r3, r2, r3
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	2b00      	cmp	r3, #0
 800123a:	d02e      	beq.n	800129a <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 800123c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800123e:	2b01      	cmp	r3, #1
 8001240:	d110      	bne.n	8001264 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8001242:	79bb      	ldrb	r3, [r7, #6]
 8001244:	b29a      	uxth	r2, r3
 8001246:	7d7b      	ldrb	r3, [r7, #21]
 8001248:	b29b      	uxth	r3, r3
 800124a:	4413      	add	r3, r2
 800124c:	b298      	uxth	r0, r3
 800124e:	797b      	ldrb	r3, [r7, #5]
 8001250:	b29a      	uxth	r2, r3
 8001252:	7dbb      	ldrb	r3, [r7, #22]
 8001254:	b29b      	uxth	r3, r3
 8001256:	4413      	add	r3, r2
 8001258:	b29b      	uxth	r3, r3
 800125a:	887a      	ldrh	r2, [r7, #2]
 800125c:	4619      	mov	r1, r3
 800125e:	f000 fb63 	bl	8001928 <ILI9341_Draw_Pixel>
 8001262:	e01a      	b.n	800129a <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8001264:	79bb      	ldrb	r3, [r7, #6]
 8001266:	b29a      	uxth	r2, r3
 8001268:	7d7b      	ldrb	r3, [r7, #21]
 800126a:	b29b      	uxth	r3, r3
 800126c:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 800126e:	fb11 f303 	smulbb	r3, r1, r3
 8001272:	b29b      	uxth	r3, r3
 8001274:	4413      	add	r3, r2
 8001276:	b298      	uxth	r0, r3
 8001278:	797b      	ldrb	r3, [r7, #5]
 800127a:	b29a      	uxth	r2, r3
 800127c:	7dbb      	ldrb	r3, [r7, #22]
 800127e:	b29b      	uxth	r3, r3
 8001280:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8001282:	fb11 f303 	smulbb	r3, r1, r3
 8001286:	b29b      	uxth	r3, r3
 8001288:	4413      	add	r3, r2
 800128a:	b299      	uxth	r1, r3
 800128c:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 800128e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001290:	887b      	ldrh	r3, [r7, #2]
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	4623      	mov	r3, r4
 8001296:	f000 fc23 	bl	8001ae0 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 800129a:	7dbb      	ldrb	r3, [r7, #22]
 800129c:	3301      	adds	r3, #1
 800129e:	75bb      	strb	r3, [r7, #22]
 80012a0:	7dbb      	ldrb	r3, [r7, #22]
 80012a2:	2b07      	cmp	r3, #7
 80012a4:	d9bd      	bls.n	8001222 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 80012a6:	7d7b      	ldrb	r3, [r7, #21]
 80012a8:	3301      	adds	r3, #1
 80012aa:	757b      	strb	r3, [r7, #21]
 80012ac:	7d7b      	ldrb	r3, [r7, #21]
 80012ae:	2b05      	cmp	r3, #5
 80012b0:	d9b4      	bls.n	800121c <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 80012b2:	bf00      	nop
 80012b4:	bf00      	nop
 80012b6:	371c      	adds	r7, #28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd90      	pop	{r4, r7, pc}
 80012bc:	0800c204 	.word	0x0800c204

080012c0 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af02      	add	r7, sp, #8
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	4608      	mov	r0, r1
 80012ca:	4611      	mov	r1, r2
 80012cc:	461a      	mov	r2, r3
 80012ce:	4603      	mov	r3, r0
 80012d0:	70fb      	strb	r3, [r7, #3]
 80012d2:	460b      	mov	r3, r1
 80012d4:	70bb      	strb	r3, [r7, #2]
 80012d6:	4613      	mov	r3, r2
 80012d8:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 80012da:	e017      	b.n	800130c <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	1c5a      	adds	r2, r3, #1
 80012e0:	607a      	str	r2, [r7, #4]
 80012e2:	7818      	ldrb	r0, [r3, #0]
 80012e4:	883c      	ldrh	r4, [r7, #0]
 80012e6:	78ba      	ldrb	r2, [r7, #2]
 80012e8:	78f9      	ldrb	r1, [r7, #3]
 80012ea:	8bbb      	ldrh	r3, [r7, #28]
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	8b3b      	ldrh	r3, [r7, #24]
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	4623      	mov	r3, r4
 80012f4:	f7ff ff4a 	bl	800118c <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 80012f8:	8b3b      	ldrh	r3, [r7, #24]
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	461a      	mov	r2, r3
 80012fe:	0052      	lsls	r2, r2, #1
 8001300:	4413      	add	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	b2da      	uxtb	r2, r3
 8001306:	78fb      	ldrb	r3, [r7, #3]
 8001308:	4413      	add	r3, r2
 800130a:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1e3      	bne.n	80012dc <ILI9341_Draw_Text+0x1c>
    }
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	bd90      	pop	{r4, r7, pc}
	...

08001320 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
//MX_SPI3_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8001324:	2200      	movs	r2, #0
 8001326:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800132a:	4802      	ldr	r0, [pc, #8]	@ (8001334 <ILI9341_SPI_Init+0x14>)
 800132c:	f003 f866 	bl	80043fc <HAL_GPIO_WritePin>
}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40021800 	.word	0x40021800

08001338 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8001342:	1df9      	adds	r1, r7, #7
 8001344:	2301      	movs	r3, #1
 8001346:	2201      	movs	r2, #1
 8001348:	4803      	ldr	r0, [pc, #12]	@ (8001358 <ILI9341_SPI_Send+0x20>)
 800134a:	f004 fb5e 	bl	8005a0a <HAL_SPI_Transmit>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200002ac 	.word	0x200002ac

0800135c <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800136c:	480b      	ldr	r0, [pc, #44]	@ (800139c <ILI9341_Write_Command+0x40>)
 800136e:	f003 f845 	bl	80043fc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001372:	2200      	movs	r2, #0
 8001374:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001378:	4809      	ldr	r0, [pc, #36]	@ (80013a0 <ILI9341_Write_Command+0x44>)
 800137a:	f003 f83f 	bl	80043fc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ffd9 	bl	8001338 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001386:	2201      	movs	r2, #1
 8001388:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800138c:	4803      	ldr	r0, [pc, #12]	@ (800139c <ILI9341_Write_Command+0x40>)
 800138e:	f003 f835 	bl	80043fc <HAL_GPIO_WritePin>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40021800 	.word	0x40021800
 80013a0:	40021400 	.word	0x40021400

080013a4 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80013ae:	2201      	movs	r2, #1
 80013b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013b4:	480b      	ldr	r0, [pc, #44]	@ (80013e4 <ILI9341_Write_Data+0x40>)
 80013b6:	f003 f821 	bl	80043fc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013c0:	4809      	ldr	r0, [pc, #36]	@ (80013e8 <ILI9341_Write_Data+0x44>)
 80013c2:	f003 f81b 	bl	80043fc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ffb5 	bl	8001338 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80013ce:	2201      	movs	r2, #1
 80013d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013d4:	4804      	ldr	r0, [pc, #16]	@ (80013e8 <ILI9341_Write_Data+0x44>)
 80013d6:	f003 f811 	bl	80043fc <HAL_GPIO_WritePin>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40021400 	.word	0x40021400
 80013e8:	40021800 	.word	0x40021800

080013ec <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80013ec:	b590      	push	{r4, r7, lr}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4604      	mov	r4, r0
 80013f4:	4608      	mov	r0, r1
 80013f6:	4611      	mov	r1, r2
 80013f8:	461a      	mov	r2, r3
 80013fa:	4623      	mov	r3, r4
 80013fc:	80fb      	strh	r3, [r7, #6]
 80013fe:	4603      	mov	r3, r0
 8001400:	80bb      	strh	r3, [r7, #4]
 8001402:	460b      	mov	r3, r1
 8001404:	807b      	strh	r3, [r7, #2]
 8001406:	4613      	mov	r3, r2
 8001408:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 800140a:	202a      	movs	r0, #42	@ 0x2a
 800140c:	f7ff ffa6 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	0a1b      	lsrs	r3, r3, #8
 8001414:	b29b      	uxth	r3, r3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ffc3 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff ffbe 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8001428:	887b      	ldrh	r3, [r7, #2]
 800142a:	0a1b      	lsrs	r3, r3, #8
 800142c:	b29b      	uxth	r3, r3
 800142e:	b2db      	uxtb	r3, r3
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ffb7 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8001436:	887b      	ldrh	r3, [r7, #2]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff ffb2 	bl	80013a4 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8001440:	202b      	movs	r0, #43	@ 0x2b
 8001442:	f7ff ff8b 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8001446:	88bb      	ldrh	r3, [r7, #4]
 8001448:	0a1b      	lsrs	r3, r3, #8
 800144a:	b29b      	uxth	r3, r3
 800144c:	b2db      	uxtb	r3, r3
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff ffa8 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8001454:	88bb      	ldrh	r3, [r7, #4]
 8001456:	b2db      	uxtb	r3, r3
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ffa3 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 800145e:	883b      	ldrh	r3, [r7, #0]
 8001460:	0a1b      	lsrs	r3, r3, #8
 8001462:	b29b      	uxth	r3, r3
 8001464:	b2db      	uxtb	r3, r3
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff ff9c 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 800146c:	883b      	ldrh	r3, [r7, #0]
 800146e:	b2db      	uxtb	r3, r3
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff97 	bl	80013a4 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8001476:	202c      	movs	r0, #44	@ 0x2c
 8001478:	f7ff ff70 	bl	800135c <ILI9341_Write_Command>
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	bd90      	pop	{r4, r7, pc}

08001484 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8001488:	2200      	movs	r2, #0
 800148a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800148e:	480b      	ldr	r0, [pc, #44]	@ (80014bc <ILI9341_Reset+0x38>)
 8001490:	f002 ffb4 	bl	80043fc <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001494:	20c8      	movs	r0, #200	@ 0xc8
 8001496:	f002 fa75 	bl	8003984 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
 800149c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014a0:	4806      	ldr	r0, [pc, #24]	@ (80014bc <ILI9341_Reset+0x38>)
 80014a2:	f002 ffab 	bl	80043fc <HAL_GPIO_WritePin>
HAL_Delay(200);
 80014a6:	20c8      	movs	r0, #200	@ 0xc8
 80014a8:	f002 fa6c 	bl	8003984 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80014ac:	2201      	movs	r2, #1
 80014ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80014b2:	4802      	ldr	r0, [pc, #8]	@ (80014bc <ILI9341_Reset+0x38>)
 80014b4:	f002 ffa2 	bl	80043fc <HAL_GPIO_WritePin>
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40021800 	.word	0x40021800

080014c0 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80014ce:	2036      	movs	r0, #54	@ 0x36
 80014d0:	f7ff ff44 	bl	800135c <ILI9341_Write_Command>
HAL_Delay(1);
 80014d4:	2001      	movs	r0, #1
 80014d6:	f002 fa55 	bl	8003984 <HAL_Delay>
	
switch(screen_rotation) 
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	2b03      	cmp	r3, #3
 80014de:	d837      	bhi.n	8001550 <ILI9341_Set_Rotation+0x90>
 80014e0:	a201      	add	r2, pc, #4	@ (adr r2, 80014e8 <ILI9341_Set_Rotation+0x28>)
 80014e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e6:	bf00      	nop
 80014e8:	080014f9 	.word	0x080014f9
 80014ec:	0800150f 	.word	0x0800150f
 80014f0:	08001525 	.word	0x08001525
 80014f4:	0800153b 	.word	0x0800153b
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80014f8:	2048      	movs	r0, #72	@ 0x48
 80014fa:	f7ff ff53 	bl	80013a4 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 80014fe:	4b17      	ldr	r3, [pc, #92]	@ (800155c <ILI9341_Set_Rotation+0x9c>)
 8001500:	22f0      	movs	r2, #240	@ 0xf0
 8001502:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001504:	4b16      	ldr	r3, [pc, #88]	@ (8001560 <ILI9341_Set_Rotation+0xa0>)
 8001506:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800150a:	801a      	strh	r2, [r3, #0]
			break;
 800150c:	e021      	b.n	8001552 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 800150e:	2028      	movs	r0, #40	@ 0x28
 8001510:	f7ff ff48 	bl	80013a4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001514:	4b11      	ldr	r3, [pc, #68]	@ (800155c <ILI9341_Set_Rotation+0x9c>)
 8001516:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800151a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800151c:	4b10      	ldr	r3, [pc, #64]	@ (8001560 <ILI9341_Set_Rotation+0xa0>)
 800151e:	22f0      	movs	r2, #240	@ 0xf0
 8001520:	801a      	strh	r2, [r3, #0]
			break;
 8001522:	e016      	b.n	8001552 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8001524:	2088      	movs	r0, #136	@ 0x88
 8001526:	f7ff ff3d 	bl	80013a4 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 800152a:	4b0c      	ldr	r3, [pc, #48]	@ (800155c <ILI9341_Set_Rotation+0x9c>)
 800152c:	22f0      	movs	r2, #240	@ 0xf0
 800152e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001530:	4b0b      	ldr	r3, [pc, #44]	@ (8001560 <ILI9341_Set_Rotation+0xa0>)
 8001532:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001536:	801a      	strh	r2, [r3, #0]
			break;
 8001538:	e00b      	b.n	8001552 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 800153a:	20e8      	movs	r0, #232	@ 0xe8
 800153c:	f7ff ff32 	bl	80013a4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001540:	4b06      	ldr	r3, [pc, #24]	@ (800155c <ILI9341_Set_Rotation+0x9c>)
 8001542:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001546:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001548:	4b05      	ldr	r3, [pc, #20]	@ (8001560 <ILI9341_Set_Rotation+0xa0>)
 800154a:	22f0      	movs	r2, #240	@ 0xf0
 800154c:	801a      	strh	r2, [r3, #0]
			break;
 800154e:	e000      	b.n	8001552 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8001550:	bf00      	nop
	}
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000002 	.word	0x20000002
 8001560:	20000000 	.word	0x20000000

08001564 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8001568:	2201      	movs	r2, #1
 800156a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800156e:	4802      	ldr	r0, [pc, #8]	@ (8001578 <ILI9341_Enable+0x14>)
 8001570:	f002 ff44 	bl	80043fc <HAL_GPIO_WritePin>
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40021800 	.word	0x40021800

0800157c <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8001580:	f7ff fff0 	bl	8001564 <ILI9341_Enable>
ILI9341_SPI_Init();
 8001584:	f7ff fecc 	bl	8001320 <ILI9341_SPI_Init>
ILI9341_Reset();
 8001588:	f7ff ff7c 	bl	8001484 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 800158c:	2001      	movs	r0, #1
 800158e:	f7ff fee5 	bl	800135c <ILI9341_Write_Command>
HAL_Delay(1000);
 8001592:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001596:	f002 f9f5 	bl	8003984 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 800159a:	20cb      	movs	r0, #203	@ 0xcb
 800159c:	f7ff fede 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80015a0:	2039      	movs	r0, #57	@ 0x39
 80015a2:	f7ff feff 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80015a6:	202c      	movs	r0, #44	@ 0x2c
 80015a8:	f7ff fefc 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80015ac:	2000      	movs	r0, #0
 80015ae:	f7ff fef9 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80015b2:	2034      	movs	r0, #52	@ 0x34
 80015b4:	f7ff fef6 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80015b8:	2002      	movs	r0, #2
 80015ba:	f7ff fef3 	bl	80013a4 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80015be:	20cf      	movs	r0, #207	@ 0xcf
 80015c0:	f7ff fecc 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80015c4:	2000      	movs	r0, #0
 80015c6:	f7ff feed 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80015ca:	20c1      	movs	r0, #193	@ 0xc1
 80015cc:	f7ff feea 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80015d0:	2030      	movs	r0, #48	@ 0x30
 80015d2:	f7ff fee7 	bl	80013a4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80015d6:	20e8      	movs	r0, #232	@ 0xe8
 80015d8:	f7ff fec0 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80015dc:	2085      	movs	r0, #133	@ 0x85
 80015de:	f7ff fee1 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80015e2:	2000      	movs	r0, #0
 80015e4:	f7ff fede 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80015e8:	2078      	movs	r0, #120	@ 0x78
 80015ea:	f7ff fedb 	bl	80013a4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80015ee:	20ea      	movs	r0, #234	@ 0xea
 80015f0:	f7ff feb4 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80015f4:	2000      	movs	r0, #0
 80015f6:	f7ff fed5 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80015fa:	2000      	movs	r0, #0
 80015fc:	f7ff fed2 	bl	80013a4 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8001600:	20ed      	movs	r0, #237	@ 0xed
 8001602:	f7ff feab 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8001606:	2064      	movs	r0, #100	@ 0x64
 8001608:	f7ff fecc 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800160c:	2003      	movs	r0, #3
 800160e:	f7ff fec9 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8001612:	2012      	movs	r0, #18
 8001614:	f7ff fec6 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8001618:	2081      	movs	r0, #129	@ 0x81
 800161a:	f7ff fec3 	bl	80013a4 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 800161e:	20f7      	movs	r0, #247	@ 0xf7
 8001620:	f7ff fe9c 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8001624:	2020      	movs	r0, #32
 8001626:	f7ff febd 	bl	80013a4 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 800162a:	20c0      	movs	r0, #192	@ 0xc0
 800162c:	f7ff fe96 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8001630:	2023      	movs	r0, #35	@ 0x23
 8001632:	f7ff feb7 	bl	80013a4 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8001636:	20c1      	movs	r0, #193	@ 0xc1
 8001638:	f7ff fe90 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 800163c:	2010      	movs	r0, #16
 800163e:	f7ff feb1 	bl	80013a4 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8001642:	20c5      	movs	r0, #197	@ 0xc5
 8001644:	f7ff fe8a 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8001648:	203e      	movs	r0, #62	@ 0x3e
 800164a:	f7ff feab 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 800164e:	2028      	movs	r0, #40	@ 0x28
 8001650:	f7ff fea8 	bl	80013a4 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8001654:	20c7      	movs	r0, #199	@ 0xc7
 8001656:	f7ff fe81 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 800165a:	2086      	movs	r0, #134	@ 0x86
 800165c:	f7ff fea2 	bl	80013a4 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8001660:	2036      	movs	r0, #54	@ 0x36
 8001662:	f7ff fe7b 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8001666:	2048      	movs	r0, #72	@ 0x48
 8001668:	f7ff fe9c 	bl	80013a4 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 800166c:	203a      	movs	r0, #58	@ 0x3a
 800166e:	f7ff fe75 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8001672:	2055      	movs	r0, #85	@ 0x55
 8001674:	f7ff fe96 	bl	80013a4 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8001678:	20b1      	movs	r0, #177	@ 0xb1
 800167a:	f7ff fe6f 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800167e:	2000      	movs	r0, #0
 8001680:	f7ff fe90 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8001684:	2018      	movs	r0, #24
 8001686:	f7ff fe8d 	bl	80013a4 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 800168a:	20b6      	movs	r0, #182	@ 0xb6
 800168c:	f7ff fe66 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8001690:	2008      	movs	r0, #8
 8001692:	f7ff fe87 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8001696:	2082      	movs	r0, #130	@ 0x82
 8001698:	f7ff fe84 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 800169c:	2027      	movs	r0, #39	@ 0x27
 800169e:	f7ff fe81 	bl	80013a4 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80016a2:	20f2      	movs	r0, #242	@ 0xf2
 80016a4:	f7ff fe5a 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80016a8:	2000      	movs	r0, #0
 80016aa:	f7ff fe7b 	bl	80013a4 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80016ae:	2026      	movs	r0, #38	@ 0x26
 80016b0:	f7ff fe54 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80016b4:	2001      	movs	r0, #1
 80016b6:	f7ff fe75 	bl	80013a4 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 80016ba:	20e0      	movs	r0, #224	@ 0xe0
 80016bc:	f7ff fe4e 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80016c0:	200f      	movs	r0, #15
 80016c2:	f7ff fe6f 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80016c6:	2031      	movs	r0, #49	@ 0x31
 80016c8:	f7ff fe6c 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80016cc:	202b      	movs	r0, #43	@ 0x2b
 80016ce:	f7ff fe69 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80016d2:	200c      	movs	r0, #12
 80016d4:	f7ff fe66 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80016d8:	200e      	movs	r0, #14
 80016da:	f7ff fe63 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80016de:	2008      	movs	r0, #8
 80016e0:	f7ff fe60 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80016e4:	204e      	movs	r0, #78	@ 0x4e
 80016e6:	f7ff fe5d 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80016ea:	20f1      	movs	r0, #241	@ 0xf1
 80016ec:	f7ff fe5a 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80016f0:	2037      	movs	r0, #55	@ 0x37
 80016f2:	f7ff fe57 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80016f6:	2007      	movs	r0, #7
 80016f8:	f7ff fe54 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 80016fc:	2010      	movs	r0, #16
 80016fe:	f7ff fe51 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001702:	2003      	movs	r0, #3
 8001704:	f7ff fe4e 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001708:	200e      	movs	r0, #14
 800170a:	f7ff fe4b 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 800170e:	2009      	movs	r0, #9
 8001710:	f7ff fe48 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001714:	2000      	movs	r0, #0
 8001716:	f7ff fe45 	bl	80013a4 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 800171a:	20e1      	movs	r0, #225	@ 0xe1
 800171c:	f7ff fe1e 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001720:	2000      	movs	r0, #0
 8001722:	f7ff fe3f 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001726:	200e      	movs	r0, #14
 8001728:	f7ff fe3c 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 800172c:	2014      	movs	r0, #20
 800172e:	f7ff fe39 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001732:	2003      	movs	r0, #3
 8001734:	f7ff fe36 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8001738:	2011      	movs	r0, #17
 800173a:	f7ff fe33 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800173e:	2007      	movs	r0, #7
 8001740:	f7ff fe30 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001744:	2031      	movs	r0, #49	@ 0x31
 8001746:	f7ff fe2d 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800174a:	20c1      	movs	r0, #193	@ 0xc1
 800174c:	f7ff fe2a 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8001750:	2048      	movs	r0, #72	@ 0x48
 8001752:	f7ff fe27 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001756:	2008      	movs	r0, #8
 8001758:	f7ff fe24 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 800175c:	200f      	movs	r0, #15
 800175e:	f7ff fe21 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001762:	200c      	movs	r0, #12
 8001764:	f7ff fe1e 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001768:	2031      	movs	r0, #49	@ 0x31
 800176a:	f7ff fe1b 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 800176e:	2036      	movs	r0, #54	@ 0x36
 8001770:	f7ff fe18 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001774:	200f      	movs	r0, #15
 8001776:	f7ff fe15 	bl	80013a4 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 800177a:	2011      	movs	r0, #17
 800177c:	f7ff fdee 	bl	800135c <ILI9341_Write_Command>
HAL_Delay(120);
 8001780:	2078      	movs	r0, #120	@ 0x78
 8001782:	f002 f8ff 	bl	8003984 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8001786:	2029      	movs	r0, #41	@ 0x29
 8001788:	f7ff fde8 	bl	800135c <ILI9341_Write_Command>


//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800178c:	2000      	movs	r0, #0
 800178e:	f7ff fe97 	bl	80014c0 <ILI9341_Set_Rotation>

ILI9341_Fill_Screen(BLACK);
 8001792:	2000      	movs	r0, #0
 8001794:	f000 f8a2 	bl	80018dc <ILI9341_Fill_Screen>
}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}

0800179c <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 800179c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017a0:	b08d      	sub	sp, #52	@ 0x34
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	4603      	mov	r3, r0
 80017a6:	6039      	str	r1, [r7, #0]
 80017a8:	80fb      	strh	r3, [r7, #6]
 80017aa:	466b      	mov	r3, sp
 80017ac:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
if((Size*2) < BURST_MAX_SIZE)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80017ba:	d202      	bcs.n	80017c2 <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017c0:	e002      	b.n	80017c8 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 80017c2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80017c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80017c8:	2201      	movs	r2, #1
 80017ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017ce:	4840      	ldr	r0, [pc, #256]	@ (80018d0 <ILI9341_Draw_Colour_Burst+0x134>)
 80017d0:	f002 fe14 	bl	80043fc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80017d4:	2200      	movs	r2, #0
 80017d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017da:	483e      	ldr	r0, [pc, #248]	@ (80018d4 <ILI9341_Draw_Colour_Burst+0x138>)
 80017dc:	f002 fe0e 	bl	80043fc <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 80017e0:	88fb      	ldrh	r3, [r7, #6]
 80017e2:	0a1b      	lsrs	r3, r3, #8
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
unsigned char burst_buffer[Buffer_Size];
 80017ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80017ec:	460b      	mov	r3, r1
 80017ee:	3b01      	subs	r3, #1
 80017f0:	61fb      	str	r3, [r7, #28]
 80017f2:	2300      	movs	r3, #0
 80017f4:	4688      	mov	r8, r1
 80017f6:	4699      	mov	r9, r3
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	f04f 0300 	mov.w	r3, #0
 8001800:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001804:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001808:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800180c:	2300      	movs	r3, #0
 800180e:	460c      	mov	r4, r1
 8001810:	461d      	mov	r5, r3
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	f04f 0300 	mov.w	r3, #0
 800181a:	00eb      	lsls	r3, r5, #3
 800181c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001820:	00e2      	lsls	r2, r4, #3
 8001822:	1dcb      	adds	r3, r1, #7
 8001824:	08db      	lsrs	r3, r3, #3
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	ebad 0d03 	sub.w	sp, sp, r3
 800182c:	466b      	mov	r3, sp
 800182e:	3300      	adds	r3, #0
 8001830:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001832:	2300      	movs	r3, #0
 8001834:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001836:	e00e      	b.n	8001856 <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800183c:	4413      	add	r3, r2
 800183e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001842:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8001844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001846:	3301      	adds	r3, #1
 8001848:	88fa      	ldrh	r2, [r7, #6]
 800184a:	b2d1      	uxtb	r1, r2
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001852:	3302      	adds	r3, #2
 8001854:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001856:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800185a:	429a      	cmp	r2, r3
 800185c:	d3ec      	bcc.n	8001838 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001868:	fbb2 f3f3 	udiv	r3, r2, r3
 800186c:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001872:	fbb3 f2f2 	udiv	r2, r3, r2
 8001876:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001878:	fb01 f202 	mul.w	r2, r1, r2
 800187c:	1a9b      	subs	r3, r3, r2
 800187e:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d010      	beq.n	80018a8 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001886:	2300      	movs	r3, #0
 8001888:	627b      	str	r3, [r7, #36]	@ 0x24
 800188a:	e009      	b.n	80018a0 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 800188c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800188e:	b29a      	uxth	r2, r3
 8001890:	230a      	movs	r3, #10
 8001892:	69b9      	ldr	r1, [r7, #24]
 8001894:	4810      	ldr	r0, [pc, #64]	@ (80018d8 <ILI9341_Draw_Colour_Burst+0x13c>)
 8001896:	f004 f8b8 	bl	8005a0a <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800189a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189c:	3301      	adds	r3, #1
 800189e:	627b      	str	r3, [r7, #36]	@ 0x24
 80018a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d3f1      	bcc.n	800188c <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	230a      	movs	r3, #10
 80018ae:	69b9      	ldr	r1, [r7, #24]
 80018b0:	4809      	ldr	r0, [pc, #36]	@ (80018d8 <ILI9341_Draw_Colour_Burst+0x13c>)
 80018b2:	f004 f8aa 	bl	8005a0a <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80018b6:	2201      	movs	r2, #1
 80018b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018bc:	4805      	ldr	r0, [pc, #20]	@ (80018d4 <ILI9341_Draw_Colour_Burst+0x138>)
 80018be:	f002 fd9d 	bl	80043fc <HAL_GPIO_WritePin>
 80018c2:	46b5      	mov	sp, r6
}
 80018c4:	bf00      	nop
 80018c6:	3734      	adds	r7, #52	@ 0x34
 80018c8:	46bd      	mov	sp, r7
 80018ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018ce:	bf00      	nop
 80018d0:	40021400 	.word	0x40021400
 80018d4:	40021800 	.word	0x40021800
 80018d8:	200002ac 	.word	0x200002ac

080018dc <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 80018e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001920 <ILI9341_Fill_Screen+0x44>)
 80018e8:	881b      	ldrh	r3, [r3, #0]
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001924 <ILI9341_Fill_Screen+0x48>)
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	2100      	movs	r1, #0
 80018f4:	2000      	movs	r0, #0
 80018f6:	f7ff fd79 	bl	80013ec <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 80018fa:	4b09      	ldr	r3, [pc, #36]	@ (8001920 <ILI9341_Fill_Screen+0x44>)
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	b29b      	uxth	r3, r3
 8001900:	461a      	mov	r2, r3
 8001902:	4b08      	ldr	r3, [pc, #32]	@ (8001924 <ILI9341_Fill_Screen+0x48>)
 8001904:	881b      	ldrh	r3, [r3, #0]
 8001906:	b29b      	uxth	r3, r3
 8001908:	fb02 f303 	mul.w	r3, r2, r3
 800190c:	461a      	mov	r2, r3
 800190e:	88fb      	ldrh	r3, [r7, #6]
 8001910:	4611      	mov	r1, r2
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff ff42 	bl	800179c <ILI9341_Draw_Colour_Burst>
}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000002 	.word	0x20000002
 8001924:	20000000 	.word	0x20000000

08001928 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	80fb      	strh	r3, [r7, #6]
 8001932:	460b      	mov	r3, r1
 8001934:	80bb      	strh	r3, [r7, #4]
 8001936:	4613      	mov	r3, r2
 8001938:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800193a:	4b64      	ldr	r3, [pc, #400]	@ (8001acc <ILI9341_Draw_Pixel+0x1a4>)
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	b29b      	uxth	r3, r3
 8001940:	88fa      	ldrh	r2, [r7, #6]
 8001942:	429a      	cmp	r2, r3
 8001944:	f080 80be 	bcs.w	8001ac4 <ILI9341_Draw_Pixel+0x19c>
 8001948:	4b61      	ldr	r3, [pc, #388]	@ (8001ad0 <ILI9341_Draw_Pixel+0x1a8>)
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	b29b      	uxth	r3, r3
 800194e:	88ba      	ldrh	r2, [r7, #4]
 8001950:	429a      	cmp	r2, r3
 8001952:	f080 80b7 	bcs.w	8001ac4 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001956:	2200      	movs	r2, #0
 8001958:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800195c:	485d      	ldr	r0, [pc, #372]	@ (8001ad4 <ILI9341_Draw_Pixel+0x1ac>)
 800195e:	f002 fd4d 	bl	80043fc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001962:	2200      	movs	r2, #0
 8001964:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001968:	485b      	ldr	r0, [pc, #364]	@ (8001ad8 <ILI9341_Draw_Pixel+0x1b0>)
 800196a:	f002 fd47 	bl	80043fc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 800196e:	202a      	movs	r0, #42	@ 0x2a
 8001970:	f7ff fce2 	bl	8001338 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001974:	2201      	movs	r2, #1
 8001976:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800197a:	4856      	ldr	r0, [pc, #344]	@ (8001ad4 <ILI9341_Draw_Pixel+0x1ac>)
 800197c:	f002 fd3e 	bl	80043fc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001980:	2201      	movs	r2, #1
 8001982:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001986:	4854      	ldr	r0, [pc, #336]	@ (8001ad8 <ILI9341_Draw_Pixel+0x1b0>)
 8001988:	f002 fd38 	bl	80043fc <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800198c:	2200      	movs	r2, #0
 800198e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001992:	4851      	ldr	r0, [pc, #324]	@ (8001ad8 <ILI9341_Draw_Pixel+0x1b0>)
 8001994:	f002 fd32 	bl	80043fc <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8001998:	88fb      	ldrh	r3, [r7, #6]
 800199a:	0a1b      	lsrs	r3, r3, #8
 800199c:	b29b      	uxth	r3, r3
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	753b      	strb	r3, [r7, #20]
 80019a2:	88fb      	ldrh	r3, [r7, #6]
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	757b      	strb	r3, [r7, #21]
 80019a8:	88fb      	ldrh	r3, [r7, #6]
 80019aa:	3301      	adds	r3, #1
 80019ac:	121b      	asrs	r3, r3, #8
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	75bb      	strb	r3, [r7, #22]
 80019b2:	88fb      	ldrh	r3, [r7, #6]
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	3301      	adds	r3, #1
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 80019bc:	f107 0114 	add.w	r1, r7, #20
 80019c0:	2301      	movs	r3, #1
 80019c2:	2204      	movs	r2, #4
 80019c4:	4845      	ldr	r0, [pc, #276]	@ (8001adc <ILI9341_Draw_Pixel+0x1b4>)
 80019c6:	f004 f820 	bl	8005a0a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80019ca:	2201      	movs	r2, #1
 80019cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019d0:	4841      	ldr	r0, [pc, #260]	@ (8001ad8 <ILI9341_Draw_Pixel+0x1b0>)
 80019d2:	f002 fd13 	bl	80043fc <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80019d6:	2200      	movs	r2, #0
 80019d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019dc:	483d      	ldr	r0, [pc, #244]	@ (8001ad4 <ILI9341_Draw_Pixel+0x1ac>)
 80019de:	f002 fd0d 	bl	80043fc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80019e2:	2200      	movs	r2, #0
 80019e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019e8:	483b      	ldr	r0, [pc, #236]	@ (8001ad8 <ILI9341_Draw_Pixel+0x1b0>)
 80019ea:	f002 fd07 	bl	80043fc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 80019ee:	202b      	movs	r0, #43	@ 0x2b
 80019f0:	f7ff fca2 	bl	8001338 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80019f4:	2201      	movs	r2, #1
 80019f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019fa:	4836      	ldr	r0, [pc, #216]	@ (8001ad4 <ILI9341_Draw_Pixel+0x1ac>)
 80019fc:	f002 fcfe 	bl	80043fc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001a00:	2201      	movs	r2, #1
 8001a02:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a06:	4834      	ldr	r0, [pc, #208]	@ (8001ad8 <ILI9341_Draw_Pixel+0x1b0>)
 8001a08:	f002 fcf8 	bl	80043fc <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a12:	4831      	ldr	r0, [pc, #196]	@ (8001ad8 <ILI9341_Draw_Pixel+0x1b0>)
 8001a14:	f002 fcf2 	bl	80043fc <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8001a18:	88bb      	ldrh	r3, [r7, #4]
 8001a1a:	0a1b      	lsrs	r3, r3, #8
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	743b      	strb	r3, [r7, #16]
 8001a22:	88bb      	ldrh	r3, [r7, #4]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	747b      	strb	r3, [r7, #17]
 8001a28:	88bb      	ldrh	r3, [r7, #4]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	121b      	asrs	r3, r3, #8
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	74bb      	strb	r3, [r7, #18]
 8001a32:	88bb      	ldrh	r3, [r7, #4]
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	3301      	adds	r3, #1
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8001a3c:	f107 0110 	add.w	r1, r7, #16
 8001a40:	2301      	movs	r3, #1
 8001a42:	2204      	movs	r2, #4
 8001a44:	4825      	ldr	r0, [pc, #148]	@ (8001adc <ILI9341_Draw_Pixel+0x1b4>)
 8001a46:	f003 ffe0 	bl	8005a0a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a50:	4821      	ldr	r0, [pc, #132]	@ (8001ad8 <ILI9341_Draw_Pixel+0x1b0>)
 8001a52:	f002 fcd3 	bl	80043fc <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001a56:	2200      	movs	r2, #0
 8001a58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a5c:	481d      	ldr	r0, [pc, #116]	@ (8001ad4 <ILI9341_Draw_Pixel+0x1ac>)
 8001a5e:	f002 fccd 	bl	80043fc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001a62:	2200      	movs	r2, #0
 8001a64:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a68:	481b      	ldr	r0, [pc, #108]	@ (8001ad8 <ILI9341_Draw_Pixel+0x1b0>)
 8001a6a:	f002 fcc7 	bl	80043fc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8001a6e:	202c      	movs	r0, #44	@ 0x2c
 8001a70:	f7ff fc62 	bl	8001338 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8001a74:	2201      	movs	r2, #1
 8001a76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a7a:	4816      	ldr	r0, [pc, #88]	@ (8001ad4 <ILI9341_Draw_Pixel+0x1ac>)
 8001a7c:	f002 fcbe 	bl	80043fc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001a80:	2201      	movs	r2, #1
 8001a82:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a86:	4814      	ldr	r0, [pc, #80]	@ (8001ad8 <ILI9341_Draw_Pixel+0x1b0>)
 8001a88:	f002 fcb8 	bl	80043fc <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a92:	4811      	ldr	r0, [pc, #68]	@ (8001ad8 <ILI9341_Draw_Pixel+0x1b0>)
 8001a94:	f002 fcb2 	bl	80043fc <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8001a98:	887b      	ldrh	r3, [r7, #2]
 8001a9a:	0a1b      	lsrs	r3, r3, #8
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	733b      	strb	r3, [r7, #12]
 8001aa2:	887b      	ldrh	r3, [r7, #2]
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8001aa8:	f107 010c 	add.w	r1, r7, #12
 8001aac:	2301      	movs	r3, #1
 8001aae:	2202      	movs	r2, #2
 8001ab0:	480a      	ldr	r0, [pc, #40]	@ (8001adc <ILI9341_Draw_Pixel+0x1b4>)
 8001ab2:	f003 ffaa 	bl	8005a0a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001abc:	4806      	ldr	r0, [pc, #24]	@ (8001ad8 <ILI9341_Draw_Pixel+0x1b0>)
 8001abe:	f002 fc9d 	bl	80043fc <HAL_GPIO_WritePin>
 8001ac2:	e000      	b.n	8001ac6 <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001ac4:	bf00      	nop
	
}
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20000002 	.word	0x20000002
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	40021400 	.word	0x40021400
 8001ad8:	40021800 	.word	0x40021800
 8001adc:	200002ac 	.word	0x200002ac

08001ae0 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8001ae0:	b590      	push	{r4, r7, lr}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4604      	mov	r4, r0
 8001ae8:	4608      	mov	r0, r1
 8001aea:	4611      	mov	r1, r2
 8001aec:	461a      	mov	r2, r3
 8001aee:	4623      	mov	r3, r4
 8001af0:	80fb      	strh	r3, [r7, #6]
 8001af2:	4603      	mov	r3, r0
 8001af4:	80bb      	strh	r3, [r7, #4]
 8001af6:	460b      	mov	r3, r1
 8001af8:	807b      	strh	r3, [r7, #2]
 8001afa:	4613      	mov	r3, r2
 8001afc:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001afe:	4b24      	ldr	r3, [pc, #144]	@ (8001b90 <ILI9341_Draw_Rectangle+0xb0>)
 8001b00:	881b      	ldrh	r3, [r3, #0]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	88fa      	ldrh	r2, [r7, #6]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d23d      	bcs.n	8001b86 <ILI9341_Draw_Rectangle+0xa6>
 8001b0a:	4b22      	ldr	r3, [pc, #136]	@ (8001b94 <ILI9341_Draw_Rectangle+0xb4>)
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	88ba      	ldrh	r2, [r7, #4]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d237      	bcs.n	8001b86 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8001b16:	88fa      	ldrh	r2, [r7, #6]
 8001b18:	887b      	ldrh	r3, [r7, #2]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	4a1c      	ldr	r2, [pc, #112]	@ (8001b90 <ILI9341_Draw_Rectangle+0xb0>)
 8001b1e:	8812      	ldrh	r2, [r2, #0]
 8001b20:	b292      	uxth	r2, r2
 8001b22:	4293      	cmp	r3, r2
 8001b24:	dd05      	ble.n	8001b32 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8001b26:	4b1a      	ldr	r3, [pc, #104]	@ (8001b90 <ILI9341_Draw_Rectangle+0xb0>)
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	88fb      	ldrh	r3, [r7, #6]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8001b32:	88ba      	ldrh	r2, [r7, #4]
 8001b34:	883b      	ldrh	r3, [r7, #0]
 8001b36:	4413      	add	r3, r2
 8001b38:	4a16      	ldr	r2, [pc, #88]	@ (8001b94 <ILI9341_Draw_Rectangle+0xb4>)
 8001b3a:	8812      	ldrh	r2, [r2, #0]
 8001b3c:	b292      	uxth	r2, r2
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	dd05      	ble.n	8001b4e <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8001b42:	4b14      	ldr	r3, [pc, #80]	@ (8001b94 <ILI9341_Draw_Rectangle+0xb4>)
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	88bb      	ldrh	r3, [r7, #4]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8001b4e:	88fa      	ldrh	r2, [r7, #6]
 8001b50:	887b      	ldrh	r3, [r7, #2]
 8001b52:	4413      	add	r3, r2
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	3b01      	subs	r3, #1
 8001b58:	b29c      	uxth	r4, r3
 8001b5a:	88ba      	ldrh	r2, [r7, #4]
 8001b5c:	883b      	ldrh	r3, [r7, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	3b01      	subs	r3, #1
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	88b9      	ldrh	r1, [r7, #4]
 8001b68:	88f8      	ldrh	r0, [r7, #6]
 8001b6a:	4622      	mov	r2, r4
 8001b6c:	f7ff fc3e 	bl	80013ec <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8001b70:	883b      	ldrh	r3, [r7, #0]
 8001b72:	887a      	ldrh	r2, [r7, #2]
 8001b74:	fb02 f303 	mul.w	r3, r2, r3
 8001b78:	461a      	mov	r2, r3
 8001b7a:	8b3b      	ldrh	r3, [r7, #24]
 8001b7c:	4611      	mov	r1, r2
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff fe0c 	bl	800179c <ILI9341_Draw_Colour_Burst>
 8001b84:	e000      	b.n	8001b88 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001b86:	bf00      	nop
}
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd90      	pop	{r4, r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000002 	.word	0x20000002
 8001b94:	20000000 	.word	0x20000000

08001b98 <ADC_Channel0>:

// MaKE SURE THIS IS DEFINED IN THE main.c FILE
extern SPI_HandleTypeDef hspi1; // SPI handle (Assuming SPI1 is used)

// Function to read from ADC Channel 0 (CH0)
float ADC_Channel0(void) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af02      	add	r7, sp, #8
    uint8_t data_out[2] = { MCP3202_CH0, 0x00 };
 8001b9e:	23d0      	movs	r3, #208	@ 0xd0
 8001ba0:	80bb      	strh	r3, [r7, #4]
    uint8_t data_in[2] = { 0x00, 0x00 };
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	803b      	strh	r3, [r7, #0]


    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;   // CPOL = 0 (Clock idle Low)
 8001ba6:	4b20      	ldr	r3, [pc, #128]	@ (8001c28 <ADC_Channel0+0x90>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;       // CPHA = 0 (Sample on the falling edge)
 8001bac:	4b1e      	ldr	r3, [pc, #120]	@ (8001c28 <ADC_Channel0+0x90>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	615a      	str	r2, [r3, #20]
    HAL_SPI_Init(&hspi1); // Restart the SPI module
 8001bb2:	481d      	ldr	r0, [pc, #116]	@ (8001c28 <ADC_Channel0+0x90>)
 8001bb4:	f003 fea0 	bl	80058f8 <HAL_SPI_Init>

    // Transmit and receive data via SPI
    HAL_GPIO_WritePin(MCP3202_NCS_GPIO_Port, MCP3202_NCS_Pin, GPIO_PIN_RESET);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bbe:	481b      	ldr	r0, [pc, #108]	@ (8001c2c <ADC_Channel0+0x94>)
 8001bc0:	f002 fc1c 	bl	80043fc <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, data_out, data_in, 2, HAL_MAX_DELAY);
 8001bc4:	463a      	mov	r2, r7
 8001bc6:	1d39      	adds	r1, r7, #4
 8001bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	2302      	movs	r3, #2
 8001bd0:	4815      	ldr	r0, [pc, #84]	@ (8001c28 <ADC_Channel0+0x90>)
 8001bd2:	f004 f85e 	bl	8005c92 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(MCP3202_NCS_GPIO_Port, MCP3202_NCS_Pin, GPIO_PIN_SET);
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bdc:	4813      	ldr	r0, [pc, #76]	@ (8001c2c <ADC_Channel0+0x94>)
 8001bde:	f002 fc0d 	bl	80043fc <HAL_GPIO_WritePin>

    // Combine the received bytes to form the 12-bit ADC value
    uint16_t adc_value = ((data_in[0] & 0x0F) << 8) | data_in[1];
 8001be2:	783b      	ldrb	r3, [r7, #0]
 8001be4:	021b      	lsls	r3, r3, #8
 8001be6:	b21b      	sxth	r3, r3
 8001be8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001bec:	b21a      	sxth	r2, r3
 8001bee:	787b      	ldrb	r3, [r7, #1]
 8001bf0:	b21b      	sxth	r3, r3
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	b21b      	sxth	r3, r3
 8001bf6:	81fb      	strh	r3, [r7, #14]

    // Calculate the voltage based on the 3.3V reference and 12-bit ADC resolution
    float voltage = 3.3f * adc_value / (float)(1 << 11); // 12-bit resolution (2^12)
 8001bf8:	89fb      	ldrh	r3, [r7, #14]
 8001bfa:	ee07 3a90 	vmov	s15, r3
 8001bfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c02:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001c30 <ADC_Channel0+0x98>
 8001c06:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c0a:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8001c34 <ADC_Channel0+0x9c>
 8001c0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c12:	edc7 7a02 	vstr	s15, [r7, #8]

    return voltage;
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	ee07 3a90 	vmov	s15, r3
}
 8001c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000254 	.word	0x20000254
 8001c2c:	40020c00 	.word	0x40020c00
 8001c30:	40533333 	.word	0x40533333
 8001c34:	45000000 	.word	0x45000000

08001c38 <ADC_Channel1>:

// Function to read from ADC Channel 1 (CH1)
float ADC_Channel1(void) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af02      	add	r7, sp, #8
    uint8_t data_out[2] = { MCP3202_CH1, 0x00 };
 8001c3e:	23f0      	movs	r3, #240	@ 0xf0
 8001c40:	80bb      	strh	r3, [r7, #4]
    uint8_t data_in[2] = { 0x00, 0x00 };
 8001c42:	2300      	movs	r3, #0
 8001c44:	803b      	strh	r3, [r7, #0]


    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;   // CPOL = 0 (Clock idle Low)
 8001c46:	4b20      	ldr	r3, [pc, #128]	@ (8001cc8 <ADC_Channel1+0x90>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;       // CPHA = 0 (Sample on the falling edge)
 8001c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc8 <ADC_Channel1+0x90>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	615a      	str	r2, [r3, #20]
    HAL_SPI_Init(&hspi1); // Restart the SPI module
 8001c52:	481d      	ldr	r0, [pc, #116]	@ (8001cc8 <ADC_Channel1+0x90>)
 8001c54:	f003 fe50 	bl	80058f8 <HAL_SPI_Init>

    // Transmit and receive data via SPI
    HAL_GPIO_WritePin(MCP3202_NCS_GPIO_Port, MCP3202_NCS_Pin, GPIO_PIN_RESET);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c5e:	481b      	ldr	r0, [pc, #108]	@ (8001ccc <ADC_Channel1+0x94>)
 8001c60:	f002 fbcc 	bl	80043fc <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, data_out, data_in, 2, HAL_MAX_DELAY);
 8001c64:	463a      	mov	r2, r7
 8001c66:	1d39      	adds	r1, r7, #4
 8001c68:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	2302      	movs	r3, #2
 8001c70:	4815      	ldr	r0, [pc, #84]	@ (8001cc8 <ADC_Channel1+0x90>)
 8001c72:	f004 f80e 	bl	8005c92 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(MCP3202_NCS_GPIO_Port, MCP3202_NCS_Pin, GPIO_PIN_SET);
 8001c76:	2201      	movs	r2, #1
 8001c78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c7c:	4813      	ldr	r0, [pc, #76]	@ (8001ccc <ADC_Channel1+0x94>)
 8001c7e:	f002 fbbd 	bl	80043fc <HAL_GPIO_WritePin>

    // Combine the received bytes to form the 12-bit ADC value
    uint16_t adc_value = ((data_in[0] & 0x0F) << 8) | data_in[1];
 8001c82:	783b      	ldrb	r3, [r7, #0]
 8001c84:	021b      	lsls	r3, r3, #8
 8001c86:	b21b      	sxth	r3, r3
 8001c88:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001c8c:	b21a      	sxth	r2, r3
 8001c8e:	787b      	ldrb	r3, [r7, #1]
 8001c90:	b21b      	sxth	r3, r3
 8001c92:	4313      	orrs	r3, r2
 8001c94:	b21b      	sxth	r3, r3
 8001c96:	81fb      	strh	r3, [r7, #14]

    // Calculate the voltage based on the 3.3V reference and 12-bit ADC resolution
    float voltage = 3.3f * adc_value / (float)(1 << 11); // 12-bit resolution (2^12)
 8001c98:	89fb      	ldrh	r3, [r7, #14]
 8001c9a:	ee07 3a90 	vmov	s15, r3
 8001c9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ca2:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001cd0 <ADC_Channel1+0x98>
 8001ca6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001caa:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8001cd4 <ADC_Channel1+0x9c>
 8001cae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cb2:	edc7 7a02 	vstr	s15, [r7, #8]

    return voltage;
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	ee07 3a90 	vmov	s15, r3
}
 8001cbc:	eeb0 0a67 	vmov.f32	s0, s15
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000254 	.word	0x20000254
 8001ccc:	40020c00 	.word	0x40020c00
 8001cd0:	40533333 	.word	0x40533333
 8001cd4:	45000000 	.word	0x45000000

08001cd8 <Show_Stats>:
/* USER CODE BEGIN 0 */

uint32_t frequency = 1000;
int FREQ_UPDATE_NEEDED = 1; // Flag to tell the system that it needs to update the test frequency.

void Show_Stats(float reactance, float resistance, float frequency){
 8001cd8:	b5b0      	push	{r4, r5, r7, lr}
 8001cda:	b0a8      	sub	sp, #160	@ 0xa0
 8001cdc:	af04      	add	r7, sp, #16
 8001cde:	ed87 0a03 	vstr	s0, [r7, #12]
 8001ce2:	edc7 0a02 	vstr	s1, [r7, #8]
 8001ce6:	ed87 1a01 	vstr	s2, [r7, #4]
//	ILI9341_Fill_Screen(BLACK);
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001cea:	2003      	movs	r0, #3
 8001cec:	f7ff fbe8 	bl	80014c0 <ILI9341_Set_Rotation>

	double X = (double) reactance;
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f7fe fc49 	bl	8000588 <__aeabi_f2d>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
	double R = (double) resistance;
 8001cfe:	68b8      	ldr	r0, [r7, #8]
 8001d00:	f7fe fc42 	bl	8000588 <__aeabi_f2d>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

	// Make sure in project properties to add the linker flag -u _printf_float

    char buffer[50]; // Buffer to hold the formatted string
	if (X < 0){
 8001d0c:	f04f 0200 	mov.w	r2, #0
 8001d10:	f04f 0300 	mov.w	r3, #0
 8001d14:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8001d18:	f7fe ff00 	bl	8000b1c <__aeabi_dcmplt>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d06c      	beq.n	8001dfc <Show_Stats+0x124>
		float capacitance = -1e9 / (2 * M_PI * frequency * X);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7fe fc30 	bl	8000588 <__aeabi_f2d>
 8001d28:	a393      	add	r3, pc, #588	@ (adr r3, 8001f78 <Show_Stats+0x2a0>)
 8001d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2e:	f7fe fc83 	bl	8000638 <__aeabi_dmul>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	4610      	mov	r0, r2
 8001d38:	4619      	mov	r1, r3
 8001d3a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001d3e:	f7fe fc7b 	bl	8000638 <__aeabi_dmul>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	a196      	add	r1, pc, #600	@ (adr r1, 8001fa0 <Show_Stats+0x2c8>)
 8001d48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d4c:	f7fe fd9e 	bl	800088c <__aeabi_ddiv>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	4610      	mov	r0, r2
 8001d56:	4619      	mov	r1, r3
 8001d58:	f7fe ff46 	bl	8000be8 <__aeabi_d2f>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	67bb      	str	r3, [r7, #120]	@ 0x78
		ILI9341_Draw_Text("                        ", 10, 48, WHITE, 2, BLACK);
 8001d60:	2300      	movs	r3, #0
 8001d62:	9301      	str	r3, [sp, #4]
 8001d64:	2302      	movs	r3, #2
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d6c:	2230      	movs	r2, #48	@ 0x30
 8001d6e:	210a      	movs	r1, #10
 8001d70:	4883      	ldr	r0, [pc, #524]	@ (8001f80 <Show_Stats+0x2a8>)
 8001d72:	f7ff faa5 	bl	80012c0 <ILI9341_Draw_Text>
		snprintf(buffer, sizeof(buffer), "Cs: %.2f nF", capacitance);
 8001d76:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8001d78:	f7fe fc06 	bl	8000588 <__aeabi_f2d>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001d84:	e9cd 2300 	strd	r2, r3, [sp]
 8001d88:	4a7e      	ldr	r2, [pc, #504]	@ (8001f84 <Show_Stats+0x2ac>)
 8001d8a:	2132      	movs	r1, #50	@ 0x32
 8001d8c:	f006 f954 	bl	8008038 <sniprintf>
		ILI9341_Draw_Text(buffer, 10, 48, WHITE, 2, BLACK);
 8001d90:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001d94:	2300      	movs	r3, #0
 8001d96:	9301      	str	r3, [sp, #4]
 8001d98:	2302      	movs	r3, #2
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001da0:	2230      	movs	r2, #48	@ 0x30
 8001da2:	210a      	movs	r1, #10
 8001da4:	f7ff fa8c 	bl	80012c0 <ILI9341_Draw_Text>


        char impedance[50];
        snprintf(impedance, sizeof(impedance), "Z: %.2f - j %.2f", R, -X);
 8001da8:	f8d7 4088 	ldr.w	r4, [r7, #136]	@ 0x88
 8001dac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001db0:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001db4:	f107 0010 	add.w	r0, r7, #16
 8001db8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001dbc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001dc0:	e9cd 2300 	strd	r2, r3, [sp]
 8001dc4:	4a70      	ldr	r2, [pc, #448]	@ (8001f88 <Show_Stats+0x2b0>)
 8001dc6:	2132      	movs	r1, #50	@ 0x32
 8001dc8:	f006 f936 	bl	8008038 <sniprintf>

		ILI9341_Draw_Text("                        ", 10, 144, WHITE, 2, BLACK);
 8001dcc:	2300      	movs	r3, #0
 8001dce:	9301      	str	r3, [sp, #4]
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001dd8:	2290      	movs	r2, #144	@ 0x90
 8001dda:	210a      	movs	r1, #10
 8001ddc:	4868      	ldr	r0, [pc, #416]	@ (8001f80 <Show_Stats+0x2a8>)
 8001dde:	f7ff fa6f 	bl	80012c0 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(impedance, 10, 144, WHITE, 2, BLACK);
 8001de2:	f107 0010 	add.w	r0, r7, #16
 8001de6:	2300      	movs	r3, #0
 8001de8:	9301      	str	r3, [sp, #4]
 8001dea:	2302      	movs	r3, #2
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001df2:	2290      	movs	r2, #144	@ 0x90
 8001df4:	210a      	movs	r1, #10
 8001df6:	f7ff fa63 	bl	80012c0 <ILI9341_Draw_Text>
 8001dfa:	e069      	b.n	8001ed0 <Show_Stats+0x1f8>

	} else {
        float inductance = X * 1e6 / (2 * M_PI * frequency);
 8001dfc:	a35c      	add	r3, pc, #368	@ (adr r3, 8001f70 <Show_Stats+0x298>)
 8001dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e02:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8001e06:	f7fe fc17 	bl	8000638 <__aeabi_dmul>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4614      	mov	r4, r2
 8001e10:	461d      	mov	r5, r3
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7fe fbb8 	bl	8000588 <__aeabi_f2d>
 8001e18:	a357      	add	r3, pc, #348	@ (adr r3, 8001f78 <Show_Stats+0x2a0>)
 8001e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1e:	f7fe fc0b 	bl	8000638 <__aeabi_dmul>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	4620      	mov	r0, r4
 8001e28:	4629      	mov	r1, r5
 8001e2a:	f7fe fd2f 	bl	800088c <__aeabi_ddiv>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4610      	mov	r0, r2
 8001e34:	4619      	mov	r1, r3
 8001e36:	f7fe fed7 	bl	8000be8 <__aeabi_d2f>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
		ILI9341_Draw_Text("                        ", 10, 48, WHITE, 2, BLACK);
 8001e3e:	2300      	movs	r3, #0
 8001e40:	9301      	str	r3, [sp, #4]
 8001e42:	2302      	movs	r3, #2
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e4a:	2230      	movs	r2, #48	@ 0x30
 8001e4c:	210a      	movs	r1, #10
 8001e4e:	484c      	ldr	r0, [pc, #304]	@ (8001f80 <Show_Stats+0x2a8>)
 8001e50:	f7ff fa36 	bl	80012c0 <ILI9341_Draw_Text>
        snprintf(buffer, sizeof(buffer), "Ls: %.2f uH", inductance);
 8001e54:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8001e56:	f7fe fb97 	bl	8000588 <__aeabi_f2d>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001e62:	e9cd 2300 	strd	r2, r3, [sp]
 8001e66:	4a49      	ldr	r2, [pc, #292]	@ (8001f8c <Show_Stats+0x2b4>)
 8001e68:	2132      	movs	r1, #50	@ 0x32
 8001e6a:	f006 f8e5 	bl	8008038 <sniprintf>
        ILI9341_Draw_Text(buffer, 10, 48, WHITE, 2, BLACK);
 8001e6e:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001e72:	2300      	movs	r3, #0
 8001e74:	9301      	str	r3, [sp, #4]
 8001e76:	2302      	movs	r3, #2
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e7e:	2230      	movs	r2, #48	@ 0x30
 8001e80:	210a      	movs	r1, #10
 8001e82:	f7ff fa1d 	bl	80012c0 <ILI9341_Draw_Text>

        char impedance[50];
        snprintf(impedance, sizeof(impedance), "Z: %.2f + j %.2f", R, X);
 8001e86:	f107 0010 	add.w	r0, r7, #16
 8001e8a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001e8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001e92:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001e96:	e9cd 2300 	strd	r2, r3, [sp]
 8001e9a:	4a3d      	ldr	r2, [pc, #244]	@ (8001f90 <Show_Stats+0x2b8>)
 8001e9c:	2132      	movs	r1, #50	@ 0x32
 8001e9e:	f006 f8cb 	bl	8008038 <sniprintf>

		ILI9341_Draw_Text("                        ", 10, 144, WHITE, 2, BLACK);
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	9301      	str	r3, [sp, #4]
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001eae:	2290      	movs	r2, #144	@ 0x90
 8001eb0:	210a      	movs	r1, #10
 8001eb2:	4833      	ldr	r0, [pc, #204]	@ (8001f80 <Show_Stats+0x2a8>)
 8001eb4:	f7ff fa04 	bl	80012c0 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(impedance, 10, 144, WHITE, 2, BLACK);
 8001eb8:	f107 0010 	add.w	r0, r7, #16
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	9301      	str	r3, [sp, #4]
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ec8:	2290      	movs	r2, #144	@ 0x90
 8001eca:	210a      	movs	r1, #10
 8001ecc:	f7ff f9f8 	bl	80012c0 <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text("                        ", 10, 96, WHITE, 2, BLACK);
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	9301      	str	r3, [sp, #4]
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001edc:	2260      	movs	r2, #96	@ 0x60
 8001ede:	210a      	movs	r1, #10
 8001ee0:	4827      	ldr	r0, [pc, #156]	@ (8001f80 <Show_Stats+0x2a8>)
 8001ee2:	f7ff f9ed 	bl	80012c0 <ILI9341_Draw_Text>
	snprintf(buffer, sizeof(buffer), "ESR: %.2f Ohms", R);
 8001ee6:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001eea:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001eee:	e9cd 2300 	strd	r2, r3, [sp]
 8001ef2:	4a28      	ldr	r2, [pc, #160]	@ (8001f94 <Show_Stats+0x2bc>)
 8001ef4:	2132      	movs	r1, #50	@ 0x32
 8001ef6:	f006 f89f 	bl	8008038 <sniprintf>
	ILI9341_Draw_Text(buffer, 10, 96, WHITE, 2, BLACK);
 8001efa:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001efe:	2300      	movs	r3, #0
 8001f00:	9301      	str	r3, [sp, #4]
 8001f02:	2302      	movs	r3, #2
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f0a:	2260      	movs	r2, #96	@ 0x60
 8001f0c:	210a      	movs	r1, #10
 8001f0e:	f7ff f9d7 	bl	80012c0 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("                        ", 10, 192, WHITE, 2, BLACK);
 8001f12:	2300      	movs	r3, #0
 8001f14:	9301      	str	r3, [sp, #4]
 8001f16:	2302      	movs	r3, #2
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f1e:	22c0      	movs	r2, #192	@ 0xc0
 8001f20:	210a      	movs	r1, #10
 8001f22:	4817      	ldr	r0, [pc, #92]	@ (8001f80 <Show_Stats+0x2a8>)
 8001f24:	f7ff f9cc 	bl	80012c0 <ILI9341_Draw_Text>
	snprintf(buffer, sizeof(buffer), "Freq: %.2f kHz", frequency / 1000);
 8001f28:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f2c:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001f98 <Show_Stats+0x2c0>
 8001f30:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001f34:	ee16 0a90 	vmov	r0, s13
 8001f38:	f7fe fb26 	bl	8000588 <__aeabi_f2d>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001f44:	e9cd 2300 	strd	r2, r3, [sp]
 8001f48:	4a14      	ldr	r2, [pc, #80]	@ (8001f9c <Show_Stats+0x2c4>)
 8001f4a:	2132      	movs	r1, #50	@ 0x32
 8001f4c:	f006 f874 	bl	8008038 <sniprintf>
	ILI9341_Draw_Text(buffer, 10, 192, WHITE, 2, BLACK);
 8001f50:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001f54:	2300      	movs	r3, #0
 8001f56:	9301      	str	r3, [sp, #4]
 8001f58:	2302      	movs	r3, #2
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f60:	22c0      	movs	r2, #192	@ 0xc0
 8001f62:	210a      	movs	r1, #10
 8001f64:	f7ff f9ac 	bl	80012c0 <ILI9341_Draw_Text>
}
 8001f68:	bf00      	nop
 8001f6a:	3790      	adds	r7, #144	@ 0x90
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f70:	00000000 	.word	0x00000000
 8001f74:	412e8480 	.word	0x412e8480
 8001f78:	54442d18 	.word	0x54442d18
 8001f7c:	401921fb 	.word	0x401921fb
 8001f80:	0800c188 	.word	0x0800c188
 8001f84:	0800c1a4 	.word	0x0800c1a4
 8001f88:	0800c1b0 	.word	0x0800c1b0
 8001f8c:	0800c1c4 	.word	0x0800c1c4
 8001f90:	0800c1d0 	.word	0x0800c1d0
 8001f94:	0800c1e4 	.word	0x0800c1e4
 8001f98:	447a0000 	.word	0x447a0000
 8001f9c:	0800c1f4 	.word	0x0800c1f4
 8001fa0:	00000000 	.word	0x00000000
 8001fa4:	c1cdcd65 	.word	0xc1cdcd65

08001fa8 <Get_Time_us>:

uint32_t Get_Time_us(void) {
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim2); // Read timer
 8001fac:	4b03      	ldr	r3, [pc, #12]	@ (8001fbc <Get_Time_us+0x14>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	20000304 	.word	0x20000304

08001fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fc4:	b0aa      	sub	sp, #168	@ 0xa8
 8001fc6:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fc8:	f001 fc6a 	bl	80038a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fcc:	f000 fab6 	bl	800253c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fd0:	f000 fc82 	bl	80028d8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001fd4:	f000 fc28 	bl	8002828 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001fd8:	f000 fc50 	bl	800287c <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8001fdc:	f000 fb1a 	bl	8002614 <MX_ADC1_Init>
  MX_SPI1_Init();
 8001fe0:	f000 fb6a 	bl	80026b8 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001fe4:	f000 fbd4 	bl	8002790 <MX_TIM2_Init>
  MX_SPI3_Init();
 8001fe8:	f000 fb9c 	bl	8002724 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */


  int n_points = 1000;
 8001fec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ff0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  int sample_delay = 1;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

  uint32_t start_time;

  int i = 0; // Array index counter
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	67fb      	str	r3, [r7, #124]	@ 0x7c

  // All the data must be floating point, as the nucleo board I'm using doesn't have enough memory for double.
  float ch0_data[n_points];
 8001ffe:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002002:	1e4b      	subs	r3, r1, #1
 8002004:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002006:	460a      	mov	r2, r1
 8002008:	2300      	movs	r3, #0
 800200a:	4614      	mov	r4, r2
 800200c:	461d      	mov	r5, r3
 800200e:	f04f 0200 	mov.w	r2, #0
 8002012:	f04f 0300 	mov.w	r3, #0
 8002016:	016b      	lsls	r3, r5, #5
 8002018:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800201c:	0162      	lsls	r2, r4, #5
 800201e:	460a      	mov	r2, r1
 8002020:	2300      	movs	r3, #0
 8002022:	4690      	mov	r8, r2
 8002024:	4699      	mov	r9, r3
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	f04f 0300 	mov.w	r3, #0
 800202e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8002032:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8002036:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800203a:	460b      	mov	r3, r1
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	3307      	adds	r3, #7
 8002040:	08db      	lsrs	r3, r3, #3
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	ebad 0d03 	sub.w	sp, sp, r3
 8002048:	ab02      	add	r3, sp, #8
 800204a:	3303      	adds	r3, #3
 800204c:	089b      	lsrs	r3, r3, #2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	677b      	str	r3, [r7, #116]	@ 0x74
  float ch0_time[n_points];
 8002052:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002056:	1e4b      	subs	r3, r1, #1
 8002058:	673b      	str	r3, [r7, #112]	@ 0x70
 800205a:	460a      	mov	r2, r1
 800205c:	2300      	movs	r3, #0
 800205e:	4692      	mov	sl, r2
 8002060:	469b      	mov	fp, r3
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	f04f 0300 	mov.w	r3, #0
 800206a:	ea4f 134b 	mov.w	r3, fp, lsl #5
 800206e:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8002072:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8002076:	460a      	mov	r2, r1
 8002078:	2300      	movs	r3, #0
 800207a:	623a      	str	r2, [r7, #32]
 800207c:	627b      	str	r3, [r7, #36]	@ 0x24
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800208a:	4628      	mov	r0, r5
 800208c:	0143      	lsls	r3, r0, #5
 800208e:	4620      	mov	r0, r4
 8002090:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002094:	4620      	mov	r0, r4
 8002096:	0142      	lsls	r2, r0, #5
 8002098:	460b      	mov	r3, r1
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	3307      	adds	r3, #7
 800209e:	08db      	lsrs	r3, r3, #3
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	ebad 0d03 	sub.w	sp, sp, r3
 80020a6:	ab02      	add	r3, sp, #8
 80020a8:	3303      	adds	r3, #3
 80020aa:	089b      	lsrs	r3, r3, #2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
  memset(ch0_data, 0, n_points);  // Set all bytes in the array to 0
 80020b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80020b4:	461a      	mov	r2, r3
 80020b6:	2100      	movs	r1, #0
 80020b8:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80020ba:	f006 f834 	bl	8008126 <memset>
  memset(ch0_time, 0, n_points);  // Set all bytes in the array to 0
 80020be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80020c2:	461a      	mov	r2, r3
 80020c4:	2100      	movs	r1, #0
 80020c6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80020c8:	f006 f82d 	bl	8008126 <memset>

  float ch1_data[n_points];
 80020cc:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80020d0:	1e4b      	subs	r3, r1, #1
 80020d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80020d4:	460a      	mov	r2, r1
 80020d6:	2300      	movs	r3, #0
 80020d8:	61ba      	str	r2, [r7, #24]
 80020da:	61fb      	str	r3, [r7, #28]
 80020dc:	f04f 0200 	mov.w	r2, #0
 80020e0:	f04f 0300 	mov.w	r3, #0
 80020e4:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80020e8:	4628      	mov	r0, r5
 80020ea:	0143      	lsls	r3, r0, #5
 80020ec:	4620      	mov	r0, r4
 80020ee:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80020f2:	4620      	mov	r0, r4
 80020f4:	0142      	lsls	r2, r0, #5
 80020f6:	460a      	mov	r2, r1
 80020f8:	2300      	movs	r3, #0
 80020fa:	613a      	str	r2, [r7, #16]
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	f04f 0300 	mov.w	r3, #0
 8002106:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800210a:	4628      	mov	r0, r5
 800210c:	0143      	lsls	r3, r0, #5
 800210e:	4620      	mov	r0, r4
 8002110:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002114:	4620      	mov	r0, r4
 8002116:	0142      	lsls	r2, r0, #5
 8002118:	460b      	mov	r3, r1
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	3307      	adds	r3, #7
 800211e:	08db      	lsrs	r3, r3, #3
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	ebad 0d03 	sub.w	sp, sp, r3
 8002126:	ab02      	add	r3, sp, #8
 8002128:	3303      	adds	r3, #3
 800212a:	089b      	lsrs	r3, r3, #2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	667b      	str	r3, [r7, #100]	@ 0x64
  float ch1_time[n_points];
 8002130:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002134:	1e4b      	subs	r3, r1, #1
 8002136:	663b      	str	r3, [r7, #96]	@ 0x60
 8002138:	460a      	mov	r2, r1
 800213a:	2300      	movs	r3, #0
 800213c:	60ba      	str	r2, [r7, #8]
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	f04f 0300 	mov.w	r3, #0
 8002148:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800214c:	4628      	mov	r0, r5
 800214e:	0143      	lsls	r3, r0, #5
 8002150:	4620      	mov	r0, r4
 8002152:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002156:	4620      	mov	r0, r4
 8002158:	0142      	lsls	r2, r0, #5
 800215a:	460a      	mov	r2, r1
 800215c:	2300      	movs	r3, #0
 800215e:	603a      	str	r2, [r7, #0]
 8002160:	607b      	str	r3, [r7, #4]
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	f04f 0300 	mov.w	r3, #0
 800216a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800216e:	4628      	mov	r0, r5
 8002170:	0143      	lsls	r3, r0, #5
 8002172:	4620      	mov	r0, r4
 8002174:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002178:	4620      	mov	r0, r4
 800217a:	0142      	lsls	r2, r0, #5
 800217c:	460b      	mov	r3, r1
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	3307      	adds	r3, #7
 8002182:	08db      	lsrs	r3, r3, #3
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	ebad 0d03 	sub.w	sp, sp, r3
 800218a:	ab02      	add	r3, sp, #8
 800218c:	3303      	adds	r3, #3
 800218e:	089b      	lsrs	r3, r3, #2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	65fb      	str	r3, [r7, #92]	@ 0x5c
  memset(ch1_time, 0, n_points);  // Set all bytes in the array to 0
 8002194:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002198:	461a      	mov	r2, r3
 800219a:	2100      	movs	r1, #0
 800219c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800219e:	f005 ffc2 	bl	8008126 <memset>
  memset(ch1_data, 0, n_points);  // Set all bytes in the array to 0
 80021a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021a6:	461a      	mov	r2, r3
 80021a8:	2100      	movs	r1, #0
 80021aa:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80021ac:	f005 ffbb 	bl	8008126 <memset>


  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80021b0:	4b27      	ldr	r3, [pc, #156]	@ (8002250 <main+0x290>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2200      	movs	r2, #0
 80021b6:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start(&htim2);
 80021b8:	4825      	ldr	r0, [pc, #148]	@ (8002250 <main+0x290>)
 80021ba:	f004 f83f 	bl	800623c <HAL_TIM_Base_Start>


  start_time = Get_Time_us();
 80021be:	f7ff fef3 	bl	8001fa8 <Get_Time_us>
 80021c2:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

  float load_amplitude = 0;
 80021c6:	f04f 0300 	mov.w	r3, #0
 80021ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float load_phase = 0;
 80021cc:	f04f 0300 	mov.w	r3, #0
 80021d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  float load_offset = 0;
 80021d2:	f04f 0300 	mov.w	r3, #0
 80021d6:	637b      	str	r3, [r7, #52]	@ 0x34

  float shunt_amplitude = 0;
 80021d8:	f04f 0300 	mov.w	r3, #0
 80021dc:	633b      	str	r3, [r7, #48]	@ 0x30
  float shunt_phase = 0;
 80021de:	f04f 0300 	mov.w	r3, #0
 80021e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  float shunt_offset = 0;
 80021e4:	f04f 0300 	mov.w	r3, #0
 80021e8:	62bb      	str	r3, [r7, #40]	@ 0x28


  ILI9341_Init(); // This messses with somthing, which causxes the signal generation to be incorrect
 80021ea:	f7ff f9c7 	bl	800157c <ILI9341_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if (FREQ_UPDATE_NEEDED > 0) {
 80021ee:	4b19      	ldr	r3, [pc, #100]	@ (8002254 <main+0x294>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	dd16      	ble.n	8002224 <main+0x264>
		  AD9833_set_freq(frequency);
 80021f6:	4b18      	ldr	r3, [pc, #96]	@ (8002258 <main+0x298>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	ee07 3a90 	vmov	s15, r3
 80021fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002202:	eeb0 0a67 	vmov.f32	s0, s15
 8002206:	f7fe ff65 	bl	80010d4 <AD9833_set_freq>
		  AD9833_set_freq(frequency);
 800220a:	4b13      	ldr	r3, [pc, #76]	@ (8002258 <main+0x298>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	ee07 3a90 	vmov	s15, r3
 8002212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002216:	eeb0 0a67 	vmov.f32	s0, s15
 800221a:	f7fe ff5b 	bl	80010d4 <AD9833_set_freq>
		  // for some reason can't be changed by just reconfiguring the SPI bus (as I am doing in the
		  // AD9833 driver) but rather actually requires an spi transfer to initiate the correct
		  // Polarity clock for the start of the next transfer. This is required because the AD9833
		  // Requires the clock to idle HIGH before the CS/FSYNC pin goes low. I'm too lazy to figure
		  // out how to fix this easily. This works, so I'm keeping it.
		  FREQ_UPDATE_NEEDED = 0; // clear flag
 800221e:	4b0d      	ldr	r3, [pc, #52]	@ (8002254 <main+0x294>)
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
	  }

	  float sampleF = frequency; // samples and hold the frequency to ensure it won't change while in the middle of gathering smaples
 8002224:	4b0c      	ldr	r3, [pc, #48]	@ (8002258 <main+0x298>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	ee07 3a90 	vmov	s15, r3
 800222c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002230:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
	  float avgX = 0;
 8002234:	f04f 0300 	mov.w	r3, #0
 8002238:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	  float avgR = 0;
 800223c:	f04f 0300 	mov.w	r3, #0
 8002240:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	  int cycles = 10;
 8002244:	230a      	movs	r3, #10
 8002246:	657b      	str	r3, [r7, #84]	@ 0x54
	  for (int i = 0; i < cycles; i++) {
 8002248:	2300      	movs	r3, #0
 800224a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800224e:	e13d      	b.n	80024cc <main+0x50c>
 8002250:	20000304 	.word	0x20000304
 8002254:	20000008 	.word	0x20000008
 8002258:	20000004 	.word	0x20000004
		  int samples = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		  uint32_t s = Get_Time_us();
 8002262:	f7ff fea1 	bl	8001fa8 <Get_Time_us>
 8002266:	6538      	str	r0, [r7, #80]	@ 0x50
		  do { // Ensures that sample time is no longer than one period of a sine wave
			  //	  HAL_Delay(sample_delay);

			  ch0_data[samples] = ADC_Channel0();
 8002268:	f7ff fc96 	bl	8001b98 <ADC_Channel0>
 800226c:	eef0 7a40 	vmov.f32	s15, s0
 8002270:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002272:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	edc3 7a00 	vstr	s15, [r3]
			  ch0_time[samples] = ((double)(Get_Time_us() - start_time)) / 1e6;
 800227e:	f7ff fe93 	bl	8001fa8 <Get_Time_us>
 8002282:	4602      	mov	r2, r0
 8002284:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe f95a 	bl	8000544 <__aeabi_ui2d>
 8002290:	a3a1      	add	r3, pc, #644	@ (adr r3, 8002518 <main+0x558>)
 8002292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002296:	f7fe faf9 	bl	800088c <__aeabi_ddiv>
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	4610      	mov	r0, r2
 80022a0:	4619      	mov	r1, r3
 80022a2:	f7fe fca1 	bl	8000be8 <__aeabi_d2f>
 80022a6:	4601      	mov	r1, r0
 80022a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80022aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	6019      	str	r1, [r3, #0]
		//	  HAL_Delay(sample_delay);
			  ch1_data[samples] = ADC_Channel1();
 80022b4:	f7ff fcc0 	bl	8001c38 <ADC_Channel1>
 80022b8:	eef0 7a40 	vmov.f32	s15, s0
 80022bc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80022be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	edc3 7a00 	vstr	s15, [r3]
			  ch1_time[samples] = ((double)(Get_Time_us() - start_time)) / 1e6;
 80022ca:	f7ff fe6d 	bl	8001fa8 <Get_Time_us>
 80022ce:	4602      	mov	r2, r0
 80022d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe f934 	bl	8000544 <__aeabi_ui2d>
 80022dc:	a38e      	add	r3, pc, #568	@ (adr r3, 8002518 <main+0x558>)
 80022de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e2:	f7fe fad3 	bl	800088c <__aeabi_ddiv>
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	4610      	mov	r0, r2
 80022ec:	4619      	mov	r1, r3
 80022ee:	f7fe fc7b 	bl	8000be8 <__aeabi_d2f>
 80022f2:	4601      	mov	r1, r0
 80022f4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80022f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	6019      	str	r1, [r3, #0]

			  samples++;
 8002300:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002304:	3301      	adds	r3, #1
 8002306:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		  } while((float)(Get_Time_us() - s) < 1 * 1e6 / frequency);
 800230a:	f7ff fe4d 	bl	8001fa8 <Get_Time_us>
 800230e:	4602      	mov	r2, r0
 8002310:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	ee07 3a90 	vmov	s15, r3
 8002318:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800231c:	ee17 0a90 	vmov	r0, s15
 8002320:	f7fe f932 	bl	8000588 <__aeabi_f2d>
 8002324:	4604      	mov	r4, r0
 8002326:	460d      	mov	r5, r1
 8002328:	4b81      	ldr	r3, [pc, #516]	@ (8002530 <main+0x570>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f7fe f909 	bl	8000544 <__aeabi_ui2d>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	a178      	add	r1, pc, #480	@ (adr r1, 8002518 <main+0x558>)
 8002338:	e9d1 0100 	ldrd	r0, r1, [r1]
 800233c:	f7fe faa6 	bl	800088c <__aeabi_ddiv>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4620      	mov	r0, r4
 8002346:	4629      	mov	r1, r5
 8002348:	f7fe fbe8 	bl	8000b1c <__aeabi_dcmplt>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d18a      	bne.n	8002268 <main+0x2a8>

		  fitSineWave(ch0_data, ch0_time, samples, sampleF, &load_amplitude, &load_phase, &load_offset);
 8002352:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8002356:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800235a:	9301      	str	r3, [sp, #4]
 800235c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	4613      	mov	r3, r2
 8002364:	ed97 0a16 	vldr	s0, [r7, #88]	@ 0x58
 8002368:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800236c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800236e:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002370:	f000 fd2a 	bl	8002dc8 <fitSineWave>
		  fitSineWave(ch1_data, ch1_time, samples, sampleF, &shunt_amplitude, &shunt_phase, &shunt_offset);
 8002374:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8002378:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800237c:	9301      	str	r3, [sp, #4]
 800237e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	4613      	mov	r3, r2
 8002386:	ed97 0a16 	vldr	s0, [r7, #88]	@ 0x58
 800238a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800238e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002390:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8002392:	f000 fd19 	bl	8002dc8 <fitSineWave>

		  float shunt_resistance = 994.5;
 8002396:	4b67      	ldr	r3, [pc, #412]	@ (8002534 <main+0x574>)
 8002398:	64fb      	str	r3, [r7, #76]	@ 0x4c
		  float impedance_magnitude = (load_amplitude / (shunt_amplitude / shunt_resistance));
 800239a:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 800239e:	ed97 6a0c 	vldr	s12, [r7, #48]	@ 0x30
 80023a2:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80023a6:	ee86 7a27 	vdiv.f32	s14, s12, s15
 80023aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023ae:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
		  float impedance_angle = (load_phase - shunt_phase);
 80023b2:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80023b6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80023ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023be:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
		  if (impedance_angle > M_PI) {
 80023c2:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80023c6:	f7fe f8df 	bl	8000588 <__aeabi_f2d>
 80023ca:	a355      	add	r3, pc, #340	@ (adr r3, 8002520 <main+0x560>)
 80023cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d0:	f7fe fbc2 	bl	8000b58 <__aeabi_dcmpgt>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d011      	beq.n	80023fe <main+0x43e>
			  impedance_angle -= 2 * M_PI;
 80023da:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80023de:	f7fe f8d3 	bl	8000588 <__aeabi_f2d>
 80023e2:	a351      	add	r3, pc, #324	@ (adr r3, 8002528 <main+0x568>)
 80023e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e8:	f7fd ff6e 	bl	80002c8 <__aeabi_dsub>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	4610      	mov	r0, r2
 80023f2:	4619      	mov	r1, r3
 80023f4:	f7fe fbf8 	bl	8000be8 <__aeabi_d2f>
 80023f8:	4603      	mov	r3, r0
 80023fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		  }
		  float resistance = impedance_magnitude * cos(impedance_angle) - shunt_resistance;
 80023fe:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002400:	f7fe f8c2 	bl	8000588 <__aeabi_f2d>
 8002404:	4604      	mov	r4, r0
 8002406:	460d      	mov	r5, r1
 8002408:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800240c:	f7fe f8bc 	bl	8000588 <__aeabi_f2d>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	ec43 2b10 	vmov	d0, r2, r3
 8002418:	f007 ffbe 	bl	800a398 <cos>
 800241c:	ec53 2b10 	vmov	r2, r3, d0
 8002420:	4620      	mov	r0, r4
 8002422:	4629      	mov	r1, r5
 8002424:	f7fe f908 	bl	8000638 <__aeabi_dmul>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4614      	mov	r4, r2
 800242e:	461d      	mov	r5, r3
 8002430:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002432:	f7fe f8a9 	bl	8000588 <__aeabi_f2d>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	4620      	mov	r0, r4
 800243c:	4629      	mov	r1, r5
 800243e:	f7fd ff43 	bl	80002c8 <__aeabi_dsub>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	4610      	mov	r0, r2
 8002448:	4619      	mov	r1, r3
 800244a:	f7fe fbcd 	bl	8000be8 <__aeabi_d2f>
 800244e:	4603      	mov	r3, r0
 8002450:	647b      	str	r3, [r7, #68]	@ 0x44
		  float reactance = impedance_magnitude * sin(impedance_angle);
 8002452:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002454:	f7fe f898 	bl	8000588 <__aeabi_f2d>
 8002458:	4604      	mov	r4, r0
 800245a:	460d      	mov	r5, r1
 800245c:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8002460:	f7fe f892 	bl	8000588 <__aeabi_f2d>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	ec43 2b10 	vmov	d0, r2, r3
 800246c:	f007 fff0 	bl	800a450 <sin>
 8002470:	ec53 2b10 	vmov	r2, r3, d0
 8002474:	4620      	mov	r0, r4
 8002476:	4629      	mov	r1, r5
 8002478:	f7fe f8de 	bl	8000638 <__aeabi_dmul>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	f7fe fbb0 	bl	8000be8 <__aeabi_d2f>
 8002488:	4603      	mov	r3, r0
 800248a:	643b      	str	r3, [r7, #64]	@ 0x40

		  samples = 0;
 800248c:	2300      	movs	r3, #0
 800248e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8002492:	4b29      	ldr	r3, [pc, #164]	@ (8002538 <main+0x578>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2200      	movs	r2, #0
 8002498:	625a      	str	r2, [r3, #36]	@ 0x24
		  start_time = Get_Time_us();
 800249a:	f7ff fd85 	bl	8001fa8 <Get_Time_us>
 800249e:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
		  avgX += reactance;
 80024a2:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 80024a6:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80024aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ae:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
		  avgR += resistance;
 80024b2:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 80024b6:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80024ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024be:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
	  for (int i = 0; i < cycles; i++) {
 80024c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80024c6:	3301      	adds	r3, #1
 80024c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80024cc:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80024d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024d2:	429a      	cmp	r2, r3
 80024d4:	f6ff aec2 	blt.w	800225c <main+0x29c>
	  }
	  avgX = avgX / cycles;
 80024d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024da:	ee07 3a90 	vmov	s15, r3
 80024de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024e2:	edd7 6a26 	vldr	s13, [r7, #152]	@ 0x98
 80024e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024ea:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
	  avgR = avgR / cycles;
 80024ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024f0:	ee07 3a90 	vmov	s15, r3
 80024f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024f8:	edd7 6a25 	vldr	s13, [r7, #148]	@ 0x94
 80024fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002500:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94

	  Show_Stats(avgX, avgR, sampleF);
 8002504:	ed97 1a16 	vldr	s2, [r7, #88]	@ 0x58
 8002508:	edd7 0a25 	vldr	s1, [r7, #148]	@ 0x94
 800250c:	ed97 0a26 	vldr	s0, [r7, #152]	@ 0x98
 8002510:	f7ff fbe2 	bl	8001cd8 <Show_Stats>
  {
 8002514:	e66b      	b.n	80021ee <main+0x22e>
 8002516:	bf00      	nop
 8002518:	00000000 	.word	0x00000000
 800251c:	412e8480 	.word	0x412e8480
 8002520:	54442d18 	.word	0x54442d18
 8002524:	400921fb 	.word	0x400921fb
 8002528:	54442d18 	.word	0x54442d18
 800252c:	401921fb 	.word	0x401921fb
 8002530:	20000004 	.word	0x20000004
 8002534:	4478a000 	.word	0x4478a000
 8002538:	20000304 	.word	0x20000304

0800253c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b094      	sub	sp, #80	@ 0x50
 8002540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002542:	f107 031c 	add.w	r3, r7, #28
 8002546:	2234      	movs	r2, #52	@ 0x34
 8002548:	2100      	movs	r1, #0
 800254a:	4618      	mov	r0, r3
 800254c:	f005 fdeb 	bl	8008126 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002550:	f107 0308 	add.w	r3, r7, #8
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	605a      	str	r2, [r3, #4]
 800255a:	609a      	str	r2, [r3, #8]
 800255c:	60da      	str	r2, [r3, #12]
 800255e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002560:	2300      	movs	r3, #0
 8002562:	607b      	str	r3, [r7, #4]
 8002564:	4b29      	ldr	r3, [pc, #164]	@ (800260c <SystemClock_Config+0xd0>)
 8002566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002568:	4a28      	ldr	r2, [pc, #160]	@ (800260c <SystemClock_Config+0xd0>)
 800256a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800256e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002570:	4b26      	ldr	r3, [pc, #152]	@ (800260c <SystemClock_Config+0xd0>)
 8002572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002574:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002578:	607b      	str	r3, [r7, #4]
 800257a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800257c:	2300      	movs	r3, #0
 800257e:	603b      	str	r3, [r7, #0]
 8002580:	4b23      	ldr	r3, [pc, #140]	@ (8002610 <SystemClock_Config+0xd4>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a22      	ldr	r2, [pc, #136]	@ (8002610 <SystemClock_Config+0xd4>)
 8002586:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800258a:	6013      	str	r3, [r2, #0]
 800258c:	4b20      	ldr	r3, [pc, #128]	@ (8002610 <SystemClock_Config+0xd4>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002594:	603b      	str	r3, [r7, #0]
 8002596:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002598:	2301      	movs	r3, #1
 800259a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800259c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80025a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025a2:	2302      	movs	r3, #2
 80025a4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80025aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80025ac:	2304      	movs	r3, #4
 80025ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80025b0:	23a8      	movs	r3, #168	@ 0xa8
 80025b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025b4:	2302      	movs	r3, #2
 80025b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80025b8:	2307      	movs	r3, #7
 80025ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80025bc:	2302      	movs	r3, #2
 80025be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025c0:	f107 031c 	add.w	r3, r7, #28
 80025c4:	4618      	mov	r0, r3
 80025c6:	f002 fef9 	bl	80053bc <HAL_RCC_OscConfig>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80025d0:	f000 fac0 	bl	8002b54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025d4:	230f      	movs	r3, #15
 80025d6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025d8:	2302      	movs	r3, #2
 80025da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025dc:	2300      	movs	r3, #0
 80025de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80025e0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80025e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80025e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025ea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80025ec:	f107 0308 	add.w	r3, r7, #8
 80025f0:	2105      	movs	r1, #5
 80025f2:	4618      	mov	r0, r3
 80025f4:	f002 f86e 	bl	80046d4 <HAL_RCC_ClockConfig>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80025fe:	f000 faa9 	bl	8002b54 <Error_Handler>
  }
}
 8002602:	bf00      	nop
 8002604:	3750      	adds	r7, #80	@ 0x50
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40023800 	.word	0x40023800
 8002610:	40007000 	.word	0x40007000

08002614 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800261a:	463b      	mov	r3, r7
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002626:	4b21      	ldr	r3, [pc, #132]	@ (80026ac <MX_ADC1_Init+0x98>)
 8002628:	4a21      	ldr	r2, [pc, #132]	@ (80026b0 <MX_ADC1_Init+0x9c>)
 800262a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800262c:	4b1f      	ldr	r3, [pc, #124]	@ (80026ac <MX_ADC1_Init+0x98>)
 800262e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002632:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002634:	4b1d      	ldr	r3, [pc, #116]	@ (80026ac <MX_ADC1_Init+0x98>)
 8002636:	2200      	movs	r2, #0
 8002638:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800263a:	4b1c      	ldr	r3, [pc, #112]	@ (80026ac <MX_ADC1_Init+0x98>)
 800263c:	2200      	movs	r2, #0
 800263e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002640:	4b1a      	ldr	r3, [pc, #104]	@ (80026ac <MX_ADC1_Init+0x98>)
 8002642:	2200      	movs	r2, #0
 8002644:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002646:	4b19      	ldr	r3, [pc, #100]	@ (80026ac <MX_ADC1_Init+0x98>)
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800264e:	4b17      	ldr	r3, [pc, #92]	@ (80026ac <MX_ADC1_Init+0x98>)
 8002650:	2200      	movs	r2, #0
 8002652:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002654:	4b15      	ldr	r3, [pc, #84]	@ (80026ac <MX_ADC1_Init+0x98>)
 8002656:	4a17      	ldr	r2, [pc, #92]	@ (80026b4 <MX_ADC1_Init+0xa0>)
 8002658:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800265a:	4b14      	ldr	r3, [pc, #80]	@ (80026ac <MX_ADC1_Init+0x98>)
 800265c:	2200      	movs	r2, #0
 800265e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002660:	4b12      	ldr	r3, [pc, #72]	@ (80026ac <MX_ADC1_Init+0x98>)
 8002662:	2201      	movs	r2, #1
 8002664:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002666:	4b11      	ldr	r3, [pc, #68]	@ (80026ac <MX_ADC1_Init+0x98>)
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800266e:	4b0f      	ldr	r3, [pc, #60]	@ (80026ac <MX_ADC1_Init+0x98>)
 8002670:	2201      	movs	r2, #1
 8002672:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002674:	480d      	ldr	r0, [pc, #52]	@ (80026ac <MX_ADC1_Init+0x98>)
 8002676:	f001 f9a9 	bl	80039cc <HAL_ADC_Init>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002680:	f000 fa68 	bl	8002b54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002684:	2309      	movs	r3, #9
 8002686:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002688:	2301      	movs	r3, #1
 800268a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800268c:	2300      	movs	r3, #0
 800268e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002690:	463b      	mov	r3, r7
 8002692:	4619      	mov	r1, r3
 8002694:	4805      	ldr	r0, [pc, #20]	@ (80026ac <MX_ADC1_Init+0x98>)
 8002696:	f001 f9dd 	bl	8003a54 <HAL_ADC_ConfigChannel>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80026a0:	f000 fa58 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80026a4:	bf00      	nop
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	2000020c 	.word	0x2000020c
 80026b0:	40012000 	.word	0x40012000
 80026b4:	0f000001 	.word	0x0f000001

080026b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80026bc:	4b17      	ldr	r3, [pc, #92]	@ (800271c <MX_SPI1_Init+0x64>)
 80026be:	4a18      	ldr	r2, [pc, #96]	@ (8002720 <MX_SPI1_Init+0x68>)
 80026c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80026c2:	4b16      	ldr	r3, [pc, #88]	@ (800271c <MX_SPI1_Init+0x64>)
 80026c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80026c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80026ca:	4b14      	ldr	r3, [pc, #80]	@ (800271c <MX_SPI1_Init+0x64>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80026d0:	4b12      	ldr	r3, [pc, #72]	@ (800271c <MX_SPI1_Init+0x64>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80026d6:	4b11      	ldr	r3, [pc, #68]	@ (800271c <MX_SPI1_Init+0x64>)
 80026d8:	2202      	movs	r2, #2
 80026da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026dc:	4b0f      	ldr	r3, [pc, #60]	@ (800271c <MX_SPI1_Init+0x64>)
 80026de:	2200      	movs	r2, #0
 80026e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80026e2:	4b0e      	ldr	r3, [pc, #56]	@ (800271c <MX_SPI1_Init+0x64>)
 80026e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80026ea:	4b0c      	ldr	r3, [pc, #48]	@ (800271c <MX_SPI1_Init+0x64>)
 80026ec:	2228      	movs	r2, #40	@ 0x28
 80026ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026f0:	4b0a      	ldr	r3, [pc, #40]	@ (800271c <MX_SPI1_Init+0x64>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80026f6:	4b09      	ldr	r3, [pc, #36]	@ (800271c <MX_SPI1_Init+0x64>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026fc:	4b07      	ldr	r3, [pc, #28]	@ (800271c <MX_SPI1_Init+0x64>)
 80026fe:	2200      	movs	r2, #0
 8002700:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002702:	4b06      	ldr	r3, [pc, #24]	@ (800271c <MX_SPI1_Init+0x64>)
 8002704:	220a      	movs	r2, #10
 8002706:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002708:	4804      	ldr	r0, [pc, #16]	@ (800271c <MX_SPI1_Init+0x64>)
 800270a:	f003 f8f5 	bl	80058f8 <HAL_SPI_Init>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002714:	f000 fa1e 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002718:	bf00      	nop
 800271a:	bd80      	pop	{r7, pc}
 800271c:	20000254 	.word	0x20000254
 8002720:	40013000 	.word	0x40013000

08002724 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002728:	4b17      	ldr	r3, [pc, #92]	@ (8002788 <MX_SPI3_Init+0x64>)
 800272a:	4a18      	ldr	r2, [pc, #96]	@ (800278c <MX_SPI3_Init+0x68>)
 800272c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800272e:	4b16      	ldr	r3, [pc, #88]	@ (8002788 <MX_SPI3_Init+0x64>)
 8002730:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002734:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002736:	4b14      	ldr	r3, [pc, #80]	@ (8002788 <MX_SPI3_Init+0x64>)
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800273c:	4b12      	ldr	r3, [pc, #72]	@ (8002788 <MX_SPI3_Init+0x64>)
 800273e:	2200      	movs	r2, #0
 8002740:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002742:	4b11      	ldr	r3, [pc, #68]	@ (8002788 <MX_SPI3_Init+0x64>)
 8002744:	2200      	movs	r2, #0
 8002746:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002748:	4b0f      	ldr	r3, [pc, #60]	@ (8002788 <MX_SPI3_Init+0x64>)
 800274a:	2200      	movs	r2, #0
 800274c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800274e:	4b0e      	ldr	r3, [pc, #56]	@ (8002788 <MX_SPI3_Init+0x64>)
 8002750:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002754:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002756:	4b0c      	ldr	r3, [pc, #48]	@ (8002788 <MX_SPI3_Init+0x64>)
 8002758:	2200      	movs	r2, #0
 800275a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800275c:	4b0a      	ldr	r3, [pc, #40]	@ (8002788 <MX_SPI3_Init+0x64>)
 800275e:	2200      	movs	r2, #0
 8002760:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002762:	4b09      	ldr	r3, [pc, #36]	@ (8002788 <MX_SPI3_Init+0x64>)
 8002764:	2200      	movs	r2, #0
 8002766:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002768:	4b07      	ldr	r3, [pc, #28]	@ (8002788 <MX_SPI3_Init+0x64>)
 800276a:	2200      	movs	r2, #0
 800276c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800276e:	4b06      	ldr	r3, [pc, #24]	@ (8002788 <MX_SPI3_Init+0x64>)
 8002770:	220a      	movs	r2, #10
 8002772:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002774:	4804      	ldr	r0, [pc, #16]	@ (8002788 <MX_SPI3_Init+0x64>)
 8002776:	f003 f8bf 	bl	80058f8 <HAL_SPI_Init>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002780:	f000 f9e8 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002784:	bf00      	nop
 8002786:	bd80      	pop	{r7, pc}
 8002788:	200002ac 	.word	0x200002ac
 800278c:	40003c00 	.word	0x40003c00

08002790 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002796:	f107 0308 	add.w	r3, r7, #8
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	605a      	str	r2, [r3, #4]
 80027a0:	609a      	str	r2, [r3, #8]
 80027a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027a4:	463b      	mov	r3, r7
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002824 <MX_TIM2_Init+0x94>)
 80027ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80027b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80027b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002824 <MX_TIM2_Init+0x94>)
 80027b6:	2253      	movs	r2, #83	@ 0x53
 80027b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002824 <MX_TIM2_Init+0x94>)
 80027bc:	2200      	movs	r2, #0
 80027be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80027c0:	4b18      	ldr	r3, [pc, #96]	@ (8002824 <MX_TIM2_Init+0x94>)
 80027c2:	f04f 32ff 	mov.w	r2, #4294967295
 80027c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027c8:	4b16      	ldr	r3, [pc, #88]	@ (8002824 <MX_TIM2_Init+0x94>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027ce:	4b15      	ldr	r3, [pc, #84]	@ (8002824 <MX_TIM2_Init+0x94>)
 80027d0:	2280      	movs	r2, #128	@ 0x80
 80027d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027d4:	4813      	ldr	r0, [pc, #76]	@ (8002824 <MX_TIM2_Init+0x94>)
 80027d6:	f003 fce1 	bl	800619c <HAL_TIM_Base_Init>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80027e0:	f000 f9b8 	bl	8002b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027ea:	f107 0308 	add.w	r3, r7, #8
 80027ee:	4619      	mov	r1, r3
 80027f0:	480c      	ldr	r0, [pc, #48]	@ (8002824 <MX_TIM2_Init+0x94>)
 80027f2:	f003 fe7b 	bl	80064ec <HAL_TIM_ConfigClockSource>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80027fc:	f000 f9aa 	bl	8002b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002800:	2300      	movs	r3, #0
 8002802:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002804:	2300      	movs	r3, #0
 8002806:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002808:	463b      	mov	r3, r7
 800280a:	4619      	mov	r1, r3
 800280c:	4805      	ldr	r0, [pc, #20]	@ (8002824 <MX_TIM2_Init+0x94>)
 800280e:	f004 f8ad 	bl	800696c <HAL_TIMEx_MasterConfigSynchronization>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002818:	f000 f99c 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800281c:	bf00      	nop
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20000304 	.word	0x20000304

08002828 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800282c:	4b11      	ldr	r3, [pc, #68]	@ (8002874 <MX_USART3_UART_Init+0x4c>)
 800282e:	4a12      	ldr	r2, [pc, #72]	@ (8002878 <MX_USART3_UART_Init+0x50>)
 8002830:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002832:	4b10      	ldr	r3, [pc, #64]	@ (8002874 <MX_USART3_UART_Init+0x4c>)
 8002834:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002838:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800283a:	4b0e      	ldr	r3, [pc, #56]	@ (8002874 <MX_USART3_UART_Init+0x4c>)
 800283c:	2200      	movs	r2, #0
 800283e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002840:	4b0c      	ldr	r3, [pc, #48]	@ (8002874 <MX_USART3_UART_Init+0x4c>)
 8002842:	2200      	movs	r2, #0
 8002844:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002846:	4b0b      	ldr	r3, [pc, #44]	@ (8002874 <MX_USART3_UART_Init+0x4c>)
 8002848:	2200      	movs	r2, #0
 800284a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800284c:	4b09      	ldr	r3, [pc, #36]	@ (8002874 <MX_USART3_UART_Init+0x4c>)
 800284e:	220c      	movs	r2, #12
 8002850:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002852:	4b08      	ldr	r3, [pc, #32]	@ (8002874 <MX_USART3_UART_Init+0x4c>)
 8002854:	2200      	movs	r2, #0
 8002856:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002858:	4b06      	ldr	r3, [pc, #24]	@ (8002874 <MX_USART3_UART_Init+0x4c>)
 800285a:	2200      	movs	r2, #0
 800285c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800285e:	4805      	ldr	r0, [pc, #20]	@ (8002874 <MX_USART3_UART_Init+0x4c>)
 8002860:	f004 f914 	bl	8006a8c <HAL_UART_Init>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800286a:	f000 f973 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	2000034c 	.word	0x2000034c
 8002878:	40004800 	.word	0x40004800

0800287c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002880:	4b14      	ldr	r3, [pc, #80]	@ (80028d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002882:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002886:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002888:	4b12      	ldr	r3, [pc, #72]	@ (80028d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800288a:	2206      	movs	r2, #6
 800288c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800288e:	4b11      	ldr	r3, [pc, #68]	@ (80028d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002890:	2202      	movs	r2, #2
 8002892:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002894:	4b0f      	ldr	r3, [pc, #60]	@ (80028d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002896:	2200      	movs	r2, #0
 8002898:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800289a:	4b0e      	ldr	r3, [pc, #56]	@ (80028d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800289c:	2202      	movs	r2, #2
 800289e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80028a0:	4b0c      	ldr	r3, [pc, #48]	@ (80028d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80028a6:	4b0b      	ldr	r3, [pc, #44]	@ (80028d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80028ac:	4b09      	ldr	r3, [pc, #36]	@ (80028d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80028b2:	4b08      	ldr	r3, [pc, #32]	@ (80028d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028b4:	2201      	movs	r2, #1
 80028b6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80028b8:	4b06      	ldr	r3, [pc, #24]	@ (80028d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80028be:	4805      	ldr	r0, [pc, #20]	@ (80028d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028c0:	f001 fdce 	bl	8004460 <HAL_PCD_Init>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80028ca:	f000 f943 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20000394 	.word	0x20000394

080028d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08c      	sub	sp, #48	@ 0x30
 80028dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028de:	f107 031c 	add.w	r3, r7, #28
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	605a      	str	r2, [r3, #4]
 80028e8:	609a      	str	r2, [r3, #8]
 80028ea:	60da      	str	r2, [r3, #12]
 80028ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	61bb      	str	r3, [r7, #24]
 80028f2:	4b81      	ldr	r3, [pc, #516]	@ (8002af8 <MX_GPIO_Init+0x220>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	4a80      	ldr	r2, [pc, #512]	@ (8002af8 <MX_GPIO_Init+0x220>)
 80028f8:	f043 0304 	orr.w	r3, r3, #4
 80028fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028fe:	4b7e      	ldr	r3, [pc, #504]	@ (8002af8 <MX_GPIO_Init+0x220>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002902:	f003 0304 	and.w	r3, r3, #4
 8002906:	61bb      	str	r3, [r7, #24]
 8002908:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	617b      	str	r3, [r7, #20]
 800290e:	4b7a      	ldr	r3, [pc, #488]	@ (8002af8 <MX_GPIO_Init+0x220>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002912:	4a79      	ldr	r2, [pc, #484]	@ (8002af8 <MX_GPIO_Init+0x220>)
 8002914:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002918:	6313      	str	r3, [r2, #48]	@ 0x30
 800291a:	4b77      	ldr	r3, [pc, #476]	@ (8002af8 <MX_GPIO_Init+0x220>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002922:	617b      	str	r3, [r7, #20]
 8002924:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	613b      	str	r3, [r7, #16]
 800292a:	4b73      	ldr	r3, [pc, #460]	@ (8002af8 <MX_GPIO_Init+0x220>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292e:	4a72      	ldr	r2, [pc, #456]	@ (8002af8 <MX_GPIO_Init+0x220>)
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	6313      	str	r3, [r2, #48]	@ 0x30
 8002936:	4b70      	ldr	r3, [pc, #448]	@ (8002af8 <MX_GPIO_Init+0x220>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	613b      	str	r3, [r7, #16]
 8002940:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	4b6c      	ldr	r3, [pc, #432]	@ (8002af8 <MX_GPIO_Init+0x220>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294a:	4a6b      	ldr	r2, [pc, #428]	@ (8002af8 <MX_GPIO_Init+0x220>)
 800294c:	f043 0302 	orr.w	r3, r3, #2
 8002950:	6313      	str	r3, [r2, #48]	@ 0x30
 8002952:	4b69      	ldr	r3, [pc, #420]	@ (8002af8 <MX_GPIO_Init+0x220>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	4b65      	ldr	r3, [pc, #404]	@ (8002af8 <MX_GPIO_Init+0x220>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002966:	4a64      	ldr	r2, [pc, #400]	@ (8002af8 <MX_GPIO_Init+0x220>)
 8002968:	f043 0320 	orr.w	r3, r3, #32
 800296c:	6313      	str	r3, [r2, #48]	@ 0x30
 800296e:	4b62      	ldr	r3, [pc, #392]	@ (8002af8 <MX_GPIO_Init+0x220>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002972:	f003 0320 	and.w	r3, r3, #32
 8002976:	60bb      	str	r3, [r7, #8]
 8002978:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	607b      	str	r3, [r7, #4]
 800297e:	4b5e      	ldr	r3, [pc, #376]	@ (8002af8 <MX_GPIO_Init+0x220>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002982:	4a5d      	ldr	r2, [pc, #372]	@ (8002af8 <MX_GPIO_Init+0x220>)
 8002984:	f043 0308 	orr.w	r3, r3, #8
 8002988:	6313      	str	r3, [r2, #48]	@ 0x30
 800298a:	4b5b      	ldr	r3, [pc, #364]	@ (8002af8 <MX_GPIO_Init+0x220>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	607b      	str	r3, [r7, #4]
 8002994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	603b      	str	r3, [r7, #0]
 800299a:	4b57      	ldr	r3, [pc, #348]	@ (8002af8 <MX_GPIO_Init+0x220>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299e:	4a56      	ldr	r2, [pc, #344]	@ (8002af8 <MX_GPIO_Init+0x220>)
 80029a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029a6:	4b54      	ldr	r3, [pc, #336]	@ (8002af8 <MX_GPIO_Init+0x220>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ae:	603b      	str	r3, [r7, #0]
 80029b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80029b2:	2200      	movs	r2, #0
 80029b4:	f244 0181 	movw	r1, #16513	@ 0x4081
 80029b8:	4850      	ldr	r0, [pc, #320]	@ (8002afc <MX_GPIO_Init+0x224>)
 80029ba:	f001 fd1f 	bl	80043fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80029be:	2201      	movs	r2, #1
 80029c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029c4:	484e      	ldr	r0, [pc, #312]	@ (8002b00 <MX_GPIO_Init+0x228>)
 80029c6:	f001 fd19 	bl	80043fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, AD9833_NCS_Pin|MCP3202_NCS_Pin, GPIO_PIN_SET);
 80029ca:	2201      	movs	r2, #1
 80029cc:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80029d0:	484c      	ldr	r0, [pc, #304]	@ (8002b04 <MX_GPIO_Init+0x22c>)
 80029d2:	f001 fd13 	bl	80043fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80029d6:	2200      	movs	r2, #0
 80029d8:	2140      	movs	r1, #64	@ 0x40
 80029da:	484b      	ldr	r0, [pc, #300]	@ (8002b08 <MX_GPIO_Init+0x230>)
 80029dc:	f001 fd0e 	bl	80043fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80029e0:	2201      	movs	r2, #1
 80029e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80029e6:	4849      	ldr	r0, [pc, #292]	@ (8002b0c <MX_GPIO_Init+0x234>)
 80029e8:	f001 fd08 	bl	80043fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_NCS_Pin|LCD_RST_Pin, GPIO_PIN_SET);
 80029ec:	2201      	movs	r2, #1
 80029ee:	f44f 4184 	mov.w	r1, #16896	@ 0x4200
 80029f2:	4845      	ldr	r0, [pc, #276]	@ (8002b08 <MX_GPIO_Init+0x230>)
 80029f4:	f001 fd02 	bl	80043fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80029f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029fe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002a08:	f107 031c 	add.w	r3, r7, #28
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	483f      	ldr	r0, [pc, #252]	@ (8002b0c <MX_GPIO_Init+0x234>)
 8002a10:	f001 fb60 	bl	80040d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002a14:	f244 0381 	movw	r3, #16513	@ 0x4081
 8002a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a22:	2300      	movs	r3, #0
 8002a24:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a26:	f107 031c 	add.w	r3, r7, #28
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4833      	ldr	r0, [pc, #204]	@ (8002afc <MX_GPIO_Init+0x224>)
 8002a2e:	f001 fb51 	bl	80040d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8002a32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a40:	2303      	movs	r3, #3
 8002a42:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8002a44:	f107 031c 	add.w	r3, r7, #28
 8002a48:	4619      	mov	r1, r3
 8002a4a:	482d      	ldr	r0, [pc, #180]	@ (8002b00 <MX_GPIO_Init+0x228>)
 8002a4c:	f001 fb42 	bl	80040d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD9833_NCS_Pin MCP3202_NCS_Pin */
  GPIO_InitStruct.Pin = AD9833_NCS_Pin|MCP3202_NCS_Pin;
 8002a50:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a56:	2301      	movs	r3, #1
 8002a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a62:	f107 031c 	add.w	r3, r7, #28
 8002a66:	4619      	mov	r1, r3
 8002a68:	4826      	ldr	r0, [pc, #152]	@ (8002b04 <MX_GPIO_Init+0x22c>)
 8002a6a:	f001 fb33 	bl	80040d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002a6e:	2340      	movs	r3, #64	@ 0x40
 8002a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a72:	2301      	movs	r3, #1
 8002a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002a7e:	f107 031c 	add.w	r3, r7, #28
 8002a82:	4619      	mov	r1, r3
 8002a84:	4820      	ldr	r0, [pc, #128]	@ (8002b08 <MX_GPIO_Init+0x230>)
 8002a86:	f001 fb25 	bl	80040d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002a8a:	2380      	movs	r3, #128	@ 0x80
 8002a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002a96:	f107 031c 	add.w	r3, r7, #28
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	481a      	ldr	r0, [pc, #104]	@ (8002b08 <MX_GPIO_Init+0x230>)
 8002a9e:	f001 fb19 	bl	80040d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002aa2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ab4:	f107 031c 	add.w	r3, r7, #28
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4814      	ldr	r0, [pc, #80]	@ (8002b0c <MX_GPIO_Init+0x234>)
 8002abc:	f001 fb0a 	bl	80040d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_NCS_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_NCS_Pin|LCD_RST_Pin;
 8002ac0:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8002ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ad2:	f107 031c 	add.w	r3, r7, #28
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	480b      	ldr	r0, [pc, #44]	@ (8002b08 <MX_GPIO_Init+0x230>)
 8002ada:	f001 fafb 	bl	80040d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002ade:	2200      	movs	r2, #0
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	2028      	movs	r0, #40	@ 0x28
 8002ae4:	f001 fabf 	bl	8004066 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002ae8:	2028      	movs	r0, #40	@ 0x28
 8002aea:	f001 fad8 	bl	800409e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002aee:	bf00      	nop
 8002af0:	3730      	adds	r7, #48	@ 0x30
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40020400 	.word	0x40020400
 8002b00:	40021400 	.word	0x40021400
 8002b04:	40020c00 	.word	0x40020c00
 8002b08:	40021800 	.word	0x40021800
 8002b0c:	40020800 	.word	0x40020800

08002b10 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	80fb      	strh	r3, [r7, #6]
//	HAL_GPIO_TogglePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin);
//	int frequency = 0;
	frequency = frequency + 1000;
 8002b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b4c <HAL_GPIO_EXTI_Callback+0x3c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002b22:	4a0a      	ldr	r2, [pc, #40]	@ (8002b4c <HAL_GPIO_EXTI_Callback+0x3c>)
 8002b24:	6013      	str	r3, [r2, #0]
	if (frequency > 5000) {
 8002b26:	4b09      	ldr	r3, [pc, #36]	@ (8002b4c <HAL_GPIO_EXTI_Callback+0x3c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d903      	bls.n	8002b3a <HAL_GPIO_EXTI_Callback+0x2a>
		frequency = 1000;
 8002b32:	4b06      	ldr	r3, [pc, #24]	@ (8002b4c <HAL_GPIO_EXTI_Callback+0x3c>)
 8002b34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002b38:	601a      	str	r2, [r3, #0]
	}
	FREQ_UPDATE_NEEDED = 1;
 8002b3a:	4b05      	ldr	r3, [pc, #20]	@ (8002b50 <HAL_GPIO_EXTI_Callback+0x40>)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	20000004 	.word	0x20000004
 8002b50:	20000008 	.word	0x20000008

08002b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b58:	b672      	cpsid	i
}
 8002b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b5c:	bf00      	nop
 8002b5e:	e7fd      	b.n	8002b5c <Error_Handler+0x8>

08002b60 <calculateError>:
#include <float.h>
#include <stdbool.h>

// Function to calculate the error between the input data and a sine wave
float calculateError(const float data[], const float timestamps[], int dataLength,
                      float amplitude, float phase, float offset, float frequency) {
 8002b60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b64:	b08e      	sub	sp, #56	@ 0x38
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	61f8      	str	r0, [r7, #28]
 8002b6a:	61b9      	str	r1, [r7, #24]
 8002b6c:	617a      	str	r2, [r7, #20]
 8002b6e:	ed87 0a04 	vstr	s0, [r7, #16]
 8002b72:	edc7 0a03 	vstr	s1, [r7, #12]
 8002b76:	ed87 1a02 	vstr	s2, [r7, #8]
 8002b7a:	edc7 1a01 	vstr	s3, [r7, #4]
    double error = 0.0;
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	f04f 0300 	mov.w	r3, #0
 8002b86:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    for (int i = 0; i < dataLength; i++) {
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b8e:	e071      	b.n	8002c74 <calculateError+0x114>
        float sineValue = amplitude * sin(2 * M_PI * frequency * timestamps[i] + phase) + offset;
 8002b90:	6938      	ldr	r0, [r7, #16]
 8002b92:	f7fd fcf9 	bl	8000588 <__aeabi_f2d>
 8002b96:	4604      	mov	r4, r0
 8002b98:	460d      	mov	r5, r1
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7fd fcf4 	bl	8000588 <__aeabi_f2d>
 8002ba0:	a33d      	add	r3, pc, #244	@ (adr r3, 8002c98 <calculateError+0x138>)
 8002ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba6:	f7fd fd47 	bl	8000638 <__aeabi_dmul>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4690      	mov	r8, r2
 8002bb0:	4699      	mov	r9, r3
 8002bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4413      	add	r3, r2
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7fd fce3 	bl	8000588 <__aeabi_f2d>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	4640      	mov	r0, r8
 8002bc8:	4649      	mov	r1, r9
 8002bca:	f7fd fd35 	bl	8000638 <__aeabi_dmul>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	4690      	mov	r8, r2
 8002bd4:	4699      	mov	r9, r3
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f7fd fcd6 	bl	8000588 <__aeabi_f2d>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	460b      	mov	r3, r1
 8002be0:	4640      	mov	r0, r8
 8002be2:	4649      	mov	r1, r9
 8002be4:	f7fd fb72 	bl	80002cc <__adddf3>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	ec43 2b17 	vmov	d7, r2, r3
 8002bf0:	eeb0 0a47 	vmov.f32	s0, s14
 8002bf4:	eef0 0a67 	vmov.f32	s1, s15
 8002bf8:	f007 fc2a 	bl	800a450 <sin>
 8002bfc:	ec53 2b10 	vmov	r2, r3, d0
 8002c00:	4620      	mov	r0, r4
 8002c02:	4629      	mov	r1, r5
 8002c04:	f7fd fd18 	bl	8000638 <__aeabi_dmul>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4614      	mov	r4, r2
 8002c0e:	461d      	mov	r5, r3
 8002c10:	68b8      	ldr	r0, [r7, #8]
 8002c12:	f7fd fcb9 	bl	8000588 <__aeabi_f2d>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	4629      	mov	r1, r5
 8002c1e:	f7fd fb55 	bl	80002cc <__adddf3>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	4610      	mov	r0, r2
 8002c28:	4619      	mov	r1, r3
 8002c2a:	f7fd ffdd 	bl	8000be8 <__aeabi_d2f>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	62bb      	str	r3, [r7, #40]	@ 0x28
        float difference = sineValue - data[i];
 8002c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	69fa      	ldr	r2, [r7, #28]
 8002c38:	4413      	add	r3, r2
 8002c3a:	edd3 7a00 	vldr	s15, [r3]
 8002c3e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002c42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c46:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        error += difference * difference; // Squared error
 8002c4a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002c4e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002c52:	ee17 0a90 	vmov	r0, s15
 8002c56:	f7fd fc97 	bl	8000588 <__aeabi_f2d>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002c62:	f7fd fb33 	bl	80002cc <__adddf3>
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    for (int i = 0; i < dataLength; i++) {
 8002c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c70:	3301      	adds	r3, #1
 8002c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	db89      	blt.n	8002b90 <calculateError+0x30>
    }
    return error;
 8002c7c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002c80:	f7fd ffb2 	bl	8000be8 <__aeabi_d2f>
 8002c84:	4603      	mov	r3, r0
 8002c86:	ee07 3a90 	vmov	s15, r3
}
 8002c8a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c8e:	3738      	adds	r7, #56	@ 0x38
 8002c90:	46bd      	mov	sp, r7
 8002c92:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c96:	bf00      	nop
 8002c98:	54442d18 	.word	0x54442d18
 8002c9c:	401921fb 	.word	0x401921fb

08002ca0 <max>:


float max(float data[], int dataLength) {
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
	float max = 0.0f;
 8002caa:	f04f 0300 	mov.w	r3, #0
 8002cae:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < dataLength; i++) {
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	60bb      	str	r3, [r7, #8]
 8002cb4:	e015      	b.n	8002ce2 <max+0x42>
		if (data[i] > max) {
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	edd3 7a00 	vldr	s15, [r3]
 8002cc2:	ed97 7a03 	vldr	s14, [r7, #12]
 8002cc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cce:	d505      	bpl.n	8002cdc <max+0x3c>
			max = data[i];
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < dataLength; i++) {
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	dbe5      	blt.n	8002cb6 <max+0x16>
		}
	}
	return max;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	ee07 3a90 	vmov	s15, r3
}
 8002cf0:	eeb0 0a67 	vmov.f32	s0, s15
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <min>:


float min(float data[], int dataLength) {
 8002cfe:	b480      	push	{r7}
 8002d00:	b085      	sub	sp, #20
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
 8002d06:	6039      	str	r1, [r7, #0]
	float min = data[0];
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < dataLength; i++) {
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	e015      	b.n	8002d40 <min+0x42>
		if (data[i] < min) {
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	edd3 7a00 	vldr	s15, [r3]
 8002d20:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d2c:	dd05      	ble.n	8002d3a <min+0x3c>
			min = data[i];
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	4413      	add	r3, r2
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < dataLength; i++) {
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	60bb      	str	r3, [r7, #8]
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	dbe5      	blt.n	8002d14 <min+0x16>
		}
	}
	return min;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	ee07 3a90 	vmov	s15, r3
}
 8002d4e:	eeb0 0a67 	vmov.f32	s0, s15
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <find_offset>:
			}
		}
	}
}

float find_offset(float data[], int dataLength) {
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
	float total = 0;
 8002d66:	f04f 0300 	mov.w	r3, #0
 8002d6a:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < dataLength; i++) {
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	e00e      	b.n	8002d90 <find_offset+0x34>
		total += data[i];
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	4413      	add	r3, r2
 8002d7a:	edd3 7a00 	vldr	s15, [r3]
 8002d7e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d86:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i = 0; i < dataLength; i++) {
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	60bb      	str	r3, [r7, #8]
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	dbec      	blt.n	8002d72 <find_offset+0x16>
	}
	total = total / dataLength;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	ee07 3a90 	vmov	s15, r3
 8002d9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002da2:	edd7 6a03 	vldr	s13, [r7, #12]
 8002da6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002daa:	edc7 7a03 	vstr	s15, [r7, #12]
	return total;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	ee07 3a90 	vmov	s15, r3
}
 8002db4:	eeb0 0a67 	vmov.f32	s0, s15
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	0000      	movs	r0, r0
 8002dc4:	0000      	movs	r0, r0
	...

08002dc8 <fitSineWave>:

// Function to fit sine wave to the data by sweeping amplitude, phase, and offset
void fitSineWave(const float data[], const float timestamps[], int dataLength, float frequency,
				float* bestAmplitude, float* bestPhase, float* bestOffset) {
 8002dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dcc:	ed2d 8b02 	vpush	{d8}
 8002dd0:	b09e      	sub	sp, #120	@ 0x78
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6178      	str	r0, [r7, #20]
 8002dd6:	6139      	str	r1, [r7, #16]
 8002dd8:	60fa      	str	r2, [r7, #12]
 8002dda:	ed87 0a02 	vstr	s0, [r7, #8]
 8002dde:	607b      	str	r3, [r7, #4]

    float amplitudeMin = 0.01, amplitudeMax = 1.0, amplitudeStepLarge = 0.01;
 8002de0:	4bc9      	ldr	r3, [pc, #804]	@ (8003108 <fitSineWave+0x340>)
 8002de2:	657b      	str	r3, [r7, #84]	@ 0x54
 8002de4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002de8:	653b      	str	r3, [r7, #80]	@ 0x50
 8002dea:	4bc7      	ldr	r3, [pc, #796]	@ (8003108 <fitSineWave+0x340>)
 8002dec:	64fb      	str	r3, [r7, #76]	@ 0x4c
    float phaseMin = - M_PI, phaseMax = M_PI, phaseStepLarge = 1;
 8002dee:	4bc7      	ldr	r3, [pc, #796]	@ (800310c <fitSineWave+0x344>)
 8002df0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002df2:	4bc7      	ldr	r3, [pc, #796]	@ (8003110 <fitSineWave+0x348>)
 8002df4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002df6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002dfa:	643b      	str	r3, [r7, #64]	@ 0x40
    float offsetMin = 0.5, offsetMax = 2.0, offsetStep = 0.01;
 8002dfc:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8002e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e02:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002e06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e08:	4bbf      	ldr	r3, [pc, #764]	@ (8003108 <fitSineWave+0x340>)
 8002e0a:	637b      	str	r3, [r7, #52]	@ 0x34

    int cycleSteps = 5;
 8002e0c:	2305      	movs	r3, #5
 8002e0e:	633b      	str	r3, [r7, #48]	@ 0x30
    // SImplest (worst) method for sine fitting.
    // Bad guesses for amplitude and offset, then recursively find the phase angle.
    float A = (max(data, dataLength) - min(data, dataLength)) / 2;
 8002e10:	68f9      	ldr	r1, [r7, #12]
 8002e12:	6978      	ldr	r0, [r7, #20]
 8002e14:	f7ff ff44 	bl	8002ca0 <max>
 8002e18:	eeb0 8a40 	vmov.f32	s16, s0
 8002e1c:	68f9      	ldr	r1, [r7, #12]
 8002e1e:	6978      	ldr	r0, [r7, #20]
 8002e20:	f7ff ff6d 	bl	8002cfe <min>
 8002e24:	eef0 7a40 	vmov.f32	s15, s0
 8002e28:	ee38 7a67 	vsub.f32	s14, s16, s15
 8002e2c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002e30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e34:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
//    float O = (max(data, dataLength) + min(data, dataLength)) / 2;
    float O = find_offset(data, dataLength);
 8002e38:	68f9      	ldr	r1, [r7, #12]
 8002e3a:	6978      	ldr	r0, [r7, #20]
 8002e3c:	f7ff ff8e 	bl	8002d5c <find_offset>
 8002e40:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    *bestOffset = O;
 8002e44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002e48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e4a:	601a      	str	r2, [r3, #0]



    float minError = FLT_MAX; // Initialize with the largest possible number
 8002e4c:	4bb1      	ldr	r3, [pc, #708]	@ (8003114 <fitSineWave+0x34c>)
 8002e4e:	677b      	str	r3, [r7, #116]	@ 0x74

    // Start by finding a quick estimate
    for (float phase = phaseMin; phase <= phaseMax; phase += phaseStepLarge) {
 8002e50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e52:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e54:	e025      	b.n	8002ea2 <fitSineWave+0xda>
		// Calculate the error for the current combination of parameters
		float error = calculateError(data, timestamps, dataLength, A, phase, O, frequency);
 8002e56:	edd7 1a02 	vldr	s3, [r7, #8]
 8002e5a:	ed97 1a0a 	vldr	s2, [r7, #40]	@ 0x28
 8002e5e:	edd7 0a1c 	vldr	s1, [r7, #112]	@ 0x70
 8002e62:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	6939      	ldr	r1, [r7, #16]
 8002e6a:	6978      	ldr	r0, [r7, #20]
 8002e6c:	f7ff fe78 	bl	8002b60 <calculateError>
 8002e70:	ed87 0a06 	vstr	s0, [r7, #24]

		// If this combination gives a smaller error, update the best parameters
		if (error < minError) {
 8002e74:	ed97 7a06 	vldr	s14, [r7, #24]
 8002e78:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8002e7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e84:	d505      	bpl.n	8002e92 <fitSineWave+0xca>
			minError = error;
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	677b      	str	r3, [r7, #116]	@ 0x74
			*bestPhase = phase;
 8002e8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e8e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002e90:	601a      	str	r2, [r3, #0]
    for (float phase = phaseMin; phase <= phaseMax; phase += phaseStepLarge) {
 8002e92:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8002e96:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002e9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e9e:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
 8002ea2:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8002ea6:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002eaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb2:	d9d0      	bls.n	8002e56 <fitSineWave+0x8e>
		}
	}

    // from here on out, recursively sweep to find a more and more ideal phase estimation.
    for(int i = 1; i < cycleSteps; i++ ) {
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002eb8:	e0ae      	b.n	8003018 <fitSineWave+0x250>
		// At this point it should be an alright value of the phase. Get closer to the real one.
		for (float phase = *bestPhase - phaseStepLarge / pow(10, i-1);
 8002eba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fd fb61 	bl	8000588 <__aeabi_f2d>
 8002ec6:	4604      	mov	r4, r0
 8002ec8:	460d      	mov	r5, r1
 8002eca:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002ecc:	f7fd fb5c 	bl	8000588 <__aeabi_f2d>
 8002ed0:	4680      	mov	r8, r0
 8002ed2:	4689      	mov	r9, r1
 8002ed4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fd fb43 	bl	8000564 <__aeabi_i2d>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	ec43 2b11 	vmov	d1, r2, r3
 8002ee6:	ed9f 0b86 	vldr	d0, [pc, #536]	@ 8003100 <fitSineWave+0x338>
 8002eea:	f007 f9e5 	bl	800a2b8 <pow>
 8002eee:	ec53 2b10 	vmov	r2, r3, d0
 8002ef2:	4640      	mov	r0, r8
 8002ef4:	4649      	mov	r1, r9
 8002ef6:	f7fd fcc9 	bl	800088c <__aeabi_ddiv>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4620      	mov	r0, r4
 8002f00:	4629      	mov	r1, r5
 8002f02:	f7fd f9e1 	bl	80002c8 <__aeabi_dsub>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	4610      	mov	r0, r2
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	f7fd fe6b 	bl	8000be8 <__aeabi_d2f>
 8002f12:	4603      	mov	r3, r0
 8002f14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f16:	e048      	b.n	8002faa <fitSineWave+0x1e2>
				phase <= *bestPhase + phaseStepLarge / pow(10, i-1);
				phase += phaseStepLarge / pow(10, i)) {
			// Calculate the error for the current combination of parameters
			float error = calculateError(data, timestamps, dataLength, A, phase, O, frequency);
 8002f18:	edd7 1a02 	vldr	s3, [r7, #8]
 8002f1c:	ed97 1a0a 	vldr	s2, [r7, #40]	@ 0x28
 8002f20:	edd7 0a1a 	vldr	s1, [r7, #104]	@ 0x68
 8002f24:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	6939      	ldr	r1, [r7, #16]
 8002f2c:	6978      	ldr	r0, [r7, #20]
 8002f2e:	f7ff fe17 	bl	8002b60 <calculateError>
 8002f32:	ed87 0a07 	vstr	s0, [r7, #28]

			// If this combination gives a smaller error, update the best parameters
			if (error < minError) {
 8002f36:	ed97 7a07 	vldr	s14, [r7, #28]
 8002f3a:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8002f3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f46:	d505      	bpl.n	8002f54 <fitSineWave+0x18c>
				minError = error;
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	677b      	str	r3, [r7, #116]	@ 0x74
				*bestPhase = phase;
 8002f4c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f50:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002f52:	601a      	str	r2, [r3, #0]
				phase += phaseStepLarge / pow(10, i)) {
 8002f54:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002f56:	f7fd fb17 	bl	8000588 <__aeabi_f2d>
 8002f5a:	4604      	mov	r4, r0
 8002f5c:	460d      	mov	r5, r1
 8002f5e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002f60:	f7fd fb00 	bl	8000564 <__aeabi_i2d>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	ec43 2b11 	vmov	d1, r2, r3
 8002f6c:	ed9f 0b64 	vldr	d0, [pc, #400]	@ 8003100 <fitSineWave+0x338>
 8002f70:	f007 f9a2 	bl	800a2b8 <pow>
 8002f74:	ec53 2b10 	vmov	r2, r3, d0
 8002f78:	4620      	mov	r0, r4
 8002f7a:	4629      	mov	r1, r5
 8002f7c:	f7fd fc86 	bl	800088c <__aeabi_ddiv>
 8002f80:	4602      	mov	r2, r0
 8002f82:	460b      	mov	r3, r1
 8002f84:	4614      	mov	r4, r2
 8002f86:	461d      	mov	r5, r3
 8002f88:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002f8a:	f7fd fafd 	bl	8000588 <__aeabi_f2d>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	4620      	mov	r0, r4
 8002f94:	4629      	mov	r1, r5
 8002f96:	f7fd f999 	bl	80002cc <__adddf3>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	f7fd fe21 	bl	8000be8 <__aeabi_d2f>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	66bb      	str	r3, [r7, #104]	@ 0x68
				phase <= *bestPhase + phaseStepLarge / pow(10, i-1);
 8002faa:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002fac:	f7fd faec 	bl	8000588 <__aeabi_f2d>
 8002fb0:	4604      	mov	r4, r0
 8002fb2:	460d      	mov	r5, r1
 8002fb4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fd fae4 	bl	8000588 <__aeabi_f2d>
 8002fc0:	4680      	mov	r8, r0
 8002fc2:	4689      	mov	r9, r1
 8002fc4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002fc6:	f7fd fadf 	bl	8000588 <__aeabi_f2d>
 8002fca:	4682      	mov	sl, r0
 8002fcc:	468b      	mov	fp, r1
 8002fce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fd fac6 	bl	8000564 <__aeabi_i2d>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	ec43 2b11 	vmov	d1, r2, r3
 8002fe0:	ed9f 0b47 	vldr	d0, [pc, #284]	@ 8003100 <fitSineWave+0x338>
 8002fe4:	f007 f968 	bl	800a2b8 <pow>
 8002fe8:	ec53 2b10 	vmov	r2, r3, d0
 8002fec:	4650      	mov	r0, sl
 8002fee:	4659      	mov	r1, fp
 8002ff0:	f7fd fc4c 	bl	800088c <__aeabi_ddiv>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4640      	mov	r0, r8
 8002ffa:	4649      	mov	r1, r9
 8002ffc:	f7fd f966 	bl	80002cc <__adddf3>
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	4620      	mov	r0, r4
 8003006:	4629      	mov	r1, r5
 8003008:	f7fd fd92 	bl	8000b30 <__aeabi_dcmple>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d182      	bne.n	8002f18 <fitSineWave+0x150>
    for(int i = 1; i < cycleSteps; i++ ) {
 8003012:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003014:	3301      	adds	r3, #1
 8003016:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003018:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800301a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800301c:	429a      	cmp	r2, r3
 800301e:	f6ff af4c 	blt.w	8002eba <fitSineWave+0xf2>
			}
		}
    }

    float ampError = FLT_MAX;
 8003022:	4b3c      	ldr	r3, [pc, #240]	@ (8003114 <fitSineWave+0x34c>)
 8003024:	667b      	str	r3, [r7, #100]	@ 0x64
    for (float amplitude = amplitudeMin; amplitude <= amplitudeMax; amplitude += amplitudeStepLarge) {
 8003026:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003028:	663b      	str	r3, [r7, #96]	@ 0x60
 800302a:	e02c      	b.n	8003086 <fitSineWave+0x2be>
		// Calculate the error for the current combination of parameters
		float error = calculateError(data, timestamps, dataLength, amplitude, *bestPhase, *bestOffset, frequency);
 800302c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003030:	edd3 7a00 	vldr	s15, [r3]
 8003034:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003038:	ed93 7a00 	vldr	s14, [r3]
 800303c:	edd7 1a02 	vldr	s3, [r7, #8]
 8003040:	eeb0 1a47 	vmov.f32	s2, s14
 8003044:	eef0 0a67 	vmov.f32	s1, s15
 8003048:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	6939      	ldr	r1, [r7, #16]
 8003050:	6978      	ldr	r0, [r7, #20]
 8003052:	f7ff fd85 	bl	8002b60 <calculateError>
 8003056:	ed87 0a08 	vstr	s0, [r7, #32]

		// If this combination gives a smaller error, update the best parameters
		if (error < ampError) {
 800305a:	ed97 7a08 	vldr	s14, [r7, #32]
 800305e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8003062:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800306a:	d504      	bpl.n	8003076 <fitSineWave+0x2ae>
			ampError = error;
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	667b      	str	r3, [r7, #100]	@ 0x64
			*bestAmplitude = amplitude;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003074:	601a      	str	r2, [r3, #0]
    for (float amplitude = amplitudeMin; amplitude <= amplitudeMax; amplitude += amplitudeStepLarge) {
 8003076:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800307a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800307e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003082:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
 8003086:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800308a:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800308e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003096:	d9c9      	bls.n	800302c <fitSineWave+0x264>
		}
	}

	// from here on out, recursively sweep to find a more and more ideal phase estimation.
	for(int i = 1; i < cycleSteps; i++ ) {
 8003098:	2301      	movs	r3, #1
 800309a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800309c:	e0c3      	b.n	8003226 <fitSineWave+0x45e>
		// At this point it should be an alright value of the phase. Get closer to the real one.
		for (float amplitude = *bestAmplitude - amplitudeStepLarge / pow(10, i-1);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fd fa70 	bl	8000588 <__aeabi_f2d>
 80030a8:	4604      	mov	r4, r0
 80030aa:	460d      	mov	r5, r1
 80030ac:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80030ae:	f7fd fa6b 	bl	8000588 <__aeabi_f2d>
 80030b2:	4680      	mov	r8, r0
 80030b4:	4689      	mov	r9, r1
 80030b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030b8:	3b01      	subs	r3, #1
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fd fa52 	bl	8000564 <__aeabi_i2d>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	ec43 2b11 	vmov	d1, r2, r3
 80030c8:	ed9f 0b0d 	vldr	d0, [pc, #52]	@ 8003100 <fitSineWave+0x338>
 80030cc:	f007 f8f4 	bl	800a2b8 <pow>
 80030d0:	ec53 2b10 	vmov	r2, r3, d0
 80030d4:	4640      	mov	r0, r8
 80030d6:	4649      	mov	r1, r9
 80030d8:	f7fd fbd8 	bl	800088c <__aeabi_ddiv>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4620      	mov	r0, r4
 80030e2:	4629      	mov	r1, r5
 80030e4:	f7fd f8f0 	bl	80002c8 <__aeabi_dsub>
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	4610      	mov	r0, r2
 80030ee:	4619      	mov	r1, r3
 80030f0:	f7fd fd7a 	bl	8000be8 <__aeabi_d2f>
 80030f4:	4603      	mov	r3, r0
 80030f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80030f8:	e05e      	b.n	80031b8 <fitSineWave+0x3f0>
 80030fa:	bf00      	nop
 80030fc:	f3af 8000 	nop.w
 8003100:	00000000 	.word	0x00000000
 8003104:	40240000 	.word	0x40240000
 8003108:	3c23d70a 	.word	0x3c23d70a
 800310c:	c0490fdb 	.word	0xc0490fdb
 8003110:	40490fdb 	.word	0x40490fdb
 8003114:	7f7fffff 	.word	0x7f7fffff
				amplitude <= *bestAmplitude + amplitudeStepLarge / pow(10, i-1);
				amplitude += amplitudeStepLarge / pow(10, i)) {
			// Calculate the error for the current combination of parameters
			float error = calculateError(data, timestamps, dataLength, amplitude, *bestPhase, *bestOffset, frequency);
 8003118:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800311c:	edd3 7a00 	vldr	s15, [r3]
 8003120:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003124:	ed93 7a00 	vldr	s14, [r3]
 8003128:	edd7 1a02 	vldr	s3, [r7, #8]
 800312c:	eeb0 1a47 	vmov.f32	s2, s14
 8003130:	eef0 0a67 	vmov.f32	s1, s15
 8003134:	ed97 0a16 	vldr	s0, [r7, #88]	@ 0x58
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	6939      	ldr	r1, [r7, #16]
 800313c:	6978      	ldr	r0, [r7, #20]
 800313e:	f7ff fd0f 	bl	8002b60 <calculateError>
 8003142:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

			// If this combination gives a smaller error, update the best parameters
			if (error < ampError) {
 8003146:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800314a:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800314e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003156:	d504      	bpl.n	8003162 <fitSineWave+0x39a>
				ampError = error;
 8003158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315a:	667b      	str	r3, [r7, #100]	@ 0x64
				*bestAmplitude = amplitude;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003160:	601a      	str	r2, [r3, #0]
				amplitude += amplitudeStepLarge / pow(10, i)) {
 8003162:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003164:	f7fd fa10 	bl	8000588 <__aeabi_f2d>
 8003168:	4604      	mov	r4, r0
 800316a:	460d      	mov	r5, r1
 800316c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800316e:	f7fd f9f9 	bl	8000564 <__aeabi_i2d>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	ec43 2b11 	vmov	d1, r2, r3
 800317a:	ed9f 0b31 	vldr	d0, [pc, #196]	@ 8003240 <fitSineWave+0x478>
 800317e:	f007 f89b 	bl	800a2b8 <pow>
 8003182:	ec53 2b10 	vmov	r2, r3, d0
 8003186:	4620      	mov	r0, r4
 8003188:	4629      	mov	r1, r5
 800318a:	f7fd fb7f 	bl	800088c <__aeabi_ddiv>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	4614      	mov	r4, r2
 8003194:	461d      	mov	r5, r3
 8003196:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003198:	f7fd f9f6 	bl	8000588 <__aeabi_f2d>
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	4620      	mov	r0, r4
 80031a2:	4629      	mov	r1, r5
 80031a4:	f7fd f892 	bl	80002cc <__adddf3>
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	4610      	mov	r0, r2
 80031ae:	4619      	mov	r1, r3
 80031b0:	f7fd fd1a 	bl	8000be8 <__aeabi_d2f>
 80031b4:	4603      	mov	r3, r0
 80031b6:	65bb      	str	r3, [r7, #88]	@ 0x58
				amplitude <= *bestAmplitude + amplitudeStepLarge / pow(10, i-1);
 80031b8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80031ba:	f7fd f9e5 	bl	8000588 <__aeabi_f2d>
 80031be:	4604      	mov	r4, r0
 80031c0:	460d      	mov	r5, r1
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fd f9de 	bl	8000588 <__aeabi_f2d>
 80031cc:	4680      	mov	r8, r0
 80031ce:	4689      	mov	r9, r1
 80031d0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80031d2:	f7fd f9d9 	bl	8000588 <__aeabi_f2d>
 80031d6:	4682      	mov	sl, r0
 80031d8:	468b      	mov	fp, r1
 80031da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031dc:	3b01      	subs	r3, #1
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fd f9c0 	bl	8000564 <__aeabi_i2d>
 80031e4:	4602      	mov	r2, r0
 80031e6:	460b      	mov	r3, r1
 80031e8:	ec43 2b11 	vmov	d1, r2, r3
 80031ec:	ed9f 0b14 	vldr	d0, [pc, #80]	@ 8003240 <fitSineWave+0x478>
 80031f0:	f007 f862 	bl	800a2b8 <pow>
 80031f4:	ec53 2b10 	vmov	r2, r3, d0
 80031f8:	4650      	mov	r0, sl
 80031fa:	4659      	mov	r1, fp
 80031fc:	f7fd fb46 	bl	800088c <__aeabi_ddiv>
 8003200:	4602      	mov	r2, r0
 8003202:	460b      	mov	r3, r1
 8003204:	4640      	mov	r0, r8
 8003206:	4649      	mov	r1, r9
 8003208:	f7fd f860 	bl	80002cc <__adddf3>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4620      	mov	r0, r4
 8003212:	4629      	mov	r1, r5
 8003214:	f7fd fc8c 	bl	8000b30 <__aeabi_dcmple>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	f47f af7c 	bne.w	8003118 <fitSineWave+0x350>
	for(int i = 1; i < cycleSteps; i++ ) {
 8003220:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003222:	3301      	adds	r3, #1
 8003224:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003226:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800322a:	429a      	cmp	r2, r3
 800322c:	f6ff af37 	blt.w	800309e <fitSineWave+0x2d6>
			}
		}
	}
}
 8003230:	bf00      	nop
 8003232:	bf00      	nop
 8003234:	3778      	adds	r7, #120	@ 0x78
 8003236:	46bd      	mov	sp, r7
 8003238:	ecbd 8b02 	vpop	{d8}
 800323c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003240:	00000000 	.word	0x00000000
 8003244:	40240000 	.word	0x40240000

08003248 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	607b      	str	r3, [r7, #4]
 8003252:	4b10      	ldr	r3, [pc, #64]	@ (8003294 <HAL_MspInit+0x4c>)
 8003254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003256:	4a0f      	ldr	r2, [pc, #60]	@ (8003294 <HAL_MspInit+0x4c>)
 8003258:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800325c:	6453      	str	r3, [r2, #68]	@ 0x44
 800325e:	4b0d      	ldr	r3, [pc, #52]	@ (8003294 <HAL_MspInit+0x4c>)
 8003260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003262:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003266:	607b      	str	r3, [r7, #4]
 8003268:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	603b      	str	r3, [r7, #0]
 800326e:	4b09      	ldr	r3, [pc, #36]	@ (8003294 <HAL_MspInit+0x4c>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003272:	4a08      	ldr	r2, [pc, #32]	@ (8003294 <HAL_MspInit+0x4c>)
 8003274:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003278:	6413      	str	r3, [r2, #64]	@ 0x40
 800327a:	4b06      	ldr	r3, [pc, #24]	@ (8003294 <HAL_MspInit+0x4c>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003282:	603b      	str	r3, [r7, #0]
 8003284:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	40023800 	.word	0x40023800

08003298 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b08a      	sub	sp, #40	@ 0x28
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a0:	f107 0314 	add.w	r3, r7, #20
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	605a      	str	r2, [r3, #4]
 80032aa:	609a      	str	r2, [r3, #8]
 80032ac:	60da      	str	r2, [r3, #12]
 80032ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a17      	ldr	r2, [pc, #92]	@ (8003314 <HAL_ADC_MspInit+0x7c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d127      	bne.n	800330a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	613b      	str	r3, [r7, #16]
 80032be:	4b16      	ldr	r3, [pc, #88]	@ (8003318 <HAL_ADC_MspInit+0x80>)
 80032c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c2:	4a15      	ldr	r2, [pc, #84]	@ (8003318 <HAL_ADC_MspInit+0x80>)
 80032c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80032ca:	4b13      	ldr	r3, [pc, #76]	@ (8003318 <HAL_ADC_MspInit+0x80>)
 80032cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032d2:	613b      	str	r3, [r7, #16]
 80032d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032d6:	2300      	movs	r3, #0
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	4b0f      	ldr	r3, [pc, #60]	@ (8003318 <HAL_ADC_MspInit+0x80>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032de:	4a0e      	ldr	r2, [pc, #56]	@ (8003318 <HAL_ADC_MspInit+0x80>)
 80032e0:	f043 0302 	orr.w	r3, r3, #2
 80032e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80032e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003318 <HAL_ADC_MspInit+0x80>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80032f2:	2302      	movs	r3, #2
 80032f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032f6:	2303      	movs	r3, #3
 80032f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fa:	2300      	movs	r3, #0
 80032fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032fe:	f107 0314 	add.w	r3, r7, #20
 8003302:	4619      	mov	r1, r3
 8003304:	4805      	ldr	r0, [pc, #20]	@ (800331c <HAL_ADC_MspInit+0x84>)
 8003306:	f000 fee5 	bl	80040d4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800330a:	bf00      	nop
 800330c:	3728      	adds	r7, #40	@ 0x28
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40012000 	.word	0x40012000
 8003318:	40023800 	.word	0x40023800
 800331c:	40020400 	.word	0x40020400

08003320 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b08c      	sub	sp, #48	@ 0x30
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003328:	f107 031c 	add.w	r3, r7, #28
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	609a      	str	r2, [r3, #8]
 8003334:	60da      	str	r2, [r3, #12]
 8003336:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a41      	ldr	r2, [pc, #260]	@ (8003444 <HAL_SPI_MspInit+0x124>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d12c      	bne.n	800339c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003342:	2300      	movs	r3, #0
 8003344:	61bb      	str	r3, [r7, #24]
 8003346:	4b40      	ldr	r3, [pc, #256]	@ (8003448 <HAL_SPI_MspInit+0x128>)
 8003348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800334a:	4a3f      	ldr	r2, [pc, #252]	@ (8003448 <HAL_SPI_MspInit+0x128>)
 800334c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003350:	6453      	str	r3, [r2, #68]	@ 0x44
 8003352:	4b3d      	ldr	r3, [pc, #244]	@ (8003448 <HAL_SPI_MspInit+0x128>)
 8003354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003356:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800335a:	61bb      	str	r3, [r7, #24]
 800335c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800335e:	2300      	movs	r3, #0
 8003360:	617b      	str	r3, [r7, #20]
 8003362:	4b39      	ldr	r3, [pc, #228]	@ (8003448 <HAL_SPI_MspInit+0x128>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003366:	4a38      	ldr	r2, [pc, #224]	@ (8003448 <HAL_SPI_MspInit+0x128>)
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	6313      	str	r3, [r2, #48]	@ 0x30
 800336e:	4b36      	ldr	r3, [pc, #216]	@ (8003448 <HAL_SPI_MspInit+0x128>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	617b      	str	r3, [r7, #20]
 8003378:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800337a:	23e0      	movs	r3, #224	@ 0xe0
 800337c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337e:	2302      	movs	r3, #2
 8003380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003382:	2300      	movs	r3, #0
 8003384:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003386:	2303      	movs	r3, #3
 8003388:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800338a:	2305      	movs	r3, #5
 800338c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800338e:	f107 031c 	add.w	r3, r7, #28
 8003392:	4619      	mov	r1, r3
 8003394:	482d      	ldr	r0, [pc, #180]	@ (800344c <HAL_SPI_MspInit+0x12c>)
 8003396:	f000 fe9d 	bl	80040d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800339a:	e04f      	b.n	800343c <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI3)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a2b      	ldr	r2, [pc, #172]	@ (8003450 <HAL_SPI_MspInit+0x130>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d14a      	bne.n	800343c <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80033a6:	2300      	movs	r3, #0
 80033a8:	613b      	str	r3, [r7, #16]
 80033aa:	4b27      	ldr	r3, [pc, #156]	@ (8003448 <HAL_SPI_MspInit+0x128>)
 80033ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ae:	4a26      	ldr	r2, [pc, #152]	@ (8003448 <HAL_SPI_MspInit+0x128>)
 80033b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80033b6:	4b24      	ldr	r3, [pc, #144]	@ (8003448 <HAL_SPI_MspInit+0x128>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033be:	613b      	str	r3, [r7, #16]
 80033c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	4b20      	ldr	r3, [pc, #128]	@ (8003448 <HAL_SPI_MspInit+0x128>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ca:	4a1f      	ldr	r2, [pc, #124]	@ (8003448 <HAL_SPI_MspInit+0x128>)
 80033cc:	f043 0302 	orr.w	r3, r3, #2
 80033d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80033d2:	4b1d      	ldr	r3, [pc, #116]	@ (8003448 <HAL_SPI_MspInit+0x128>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033de:	2300      	movs	r3, #0
 80033e0:	60bb      	str	r3, [r7, #8]
 80033e2:	4b19      	ldr	r3, [pc, #100]	@ (8003448 <HAL_SPI_MspInit+0x128>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e6:	4a18      	ldr	r2, [pc, #96]	@ (8003448 <HAL_SPI_MspInit+0x128>)
 80033e8:	f043 0304 	orr.w	r3, r3, #4
 80033ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ee:	4b16      	ldr	r3, [pc, #88]	@ (8003448 <HAL_SPI_MspInit+0x128>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	60bb      	str	r3, [r7, #8]
 80033f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80033fa:	2304      	movs	r3, #4
 80033fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fe:	2302      	movs	r3, #2
 8003400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003402:	2300      	movs	r3, #0
 8003404:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003406:	2303      	movs	r3, #3
 8003408:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800340a:	2307      	movs	r3, #7
 800340c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800340e:	f107 031c 	add.w	r3, r7, #28
 8003412:	4619      	mov	r1, r3
 8003414:	480f      	ldr	r0, [pc, #60]	@ (8003454 <HAL_SPI_MspInit+0x134>)
 8003416:	f000 fe5d 	bl	80040d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800341a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800341e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003420:	2302      	movs	r3, #2
 8003422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003424:	2300      	movs	r3, #0
 8003426:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003428:	2303      	movs	r3, #3
 800342a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800342c:	2306      	movs	r3, #6
 800342e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003430:	f107 031c 	add.w	r3, r7, #28
 8003434:	4619      	mov	r1, r3
 8003436:	4808      	ldr	r0, [pc, #32]	@ (8003458 <HAL_SPI_MspInit+0x138>)
 8003438:	f000 fe4c 	bl	80040d4 <HAL_GPIO_Init>
}
 800343c:	bf00      	nop
 800343e:	3730      	adds	r7, #48	@ 0x30
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40013000 	.word	0x40013000
 8003448:	40023800 	.word	0x40023800
 800344c:	40020000 	.word	0x40020000
 8003450:	40003c00 	.word	0x40003c00
 8003454:	40020400 	.word	0x40020400
 8003458:	40020800 	.word	0x40020800

0800345c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800346c:	d115      	bne.n	800349a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800346e:	2300      	movs	r3, #0
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	4b0c      	ldr	r3, [pc, #48]	@ (80034a4 <HAL_TIM_Base_MspInit+0x48>)
 8003474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003476:	4a0b      	ldr	r2, [pc, #44]	@ (80034a4 <HAL_TIM_Base_MspInit+0x48>)
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	6413      	str	r3, [r2, #64]	@ 0x40
 800347e:	4b09      	ldr	r3, [pc, #36]	@ (80034a4 <HAL_TIM_Base_MspInit+0x48>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800348a:	2200      	movs	r2, #0
 800348c:	2100      	movs	r1, #0
 800348e:	201c      	movs	r0, #28
 8003490:	f000 fde9 	bl	8004066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003494:	201c      	movs	r0, #28
 8003496:	f000 fe02 	bl	800409e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800349a:	bf00      	nop
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	40023800 	.word	0x40023800

080034a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08a      	sub	sp, #40	@ 0x28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b0:	f107 0314 	add.w	r3, r7, #20
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	605a      	str	r2, [r3, #4]
 80034ba:	609a      	str	r2, [r3, #8]
 80034bc:	60da      	str	r2, [r3, #12]
 80034be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a19      	ldr	r2, [pc, #100]	@ (800352c <HAL_UART_MspInit+0x84>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d12c      	bne.n	8003524 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	4b18      	ldr	r3, [pc, #96]	@ (8003530 <HAL_UART_MspInit+0x88>)
 80034d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d2:	4a17      	ldr	r2, [pc, #92]	@ (8003530 <HAL_UART_MspInit+0x88>)
 80034d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80034da:	4b15      	ldr	r3, [pc, #84]	@ (8003530 <HAL_UART_MspInit+0x88>)
 80034dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034e2:	613b      	str	r3, [r7, #16]
 80034e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	4b11      	ldr	r3, [pc, #68]	@ (8003530 <HAL_UART_MspInit+0x88>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ee:	4a10      	ldr	r2, [pc, #64]	@ (8003530 <HAL_UART_MspInit+0x88>)
 80034f0:	f043 0308 	orr.w	r3, r3, #8
 80034f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003530 <HAL_UART_MspInit+0x88>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003502:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003508:	2302      	movs	r3, #2
 800350a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350c:	2300      	movs	r3, #0
 800350e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003510:	2303      	movs	r3, #3
 8003512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003514:	2307      	movs	r3, #7
 8003516:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003518:	f107 0314 	add.w	r3, r7, #20
 800351c:	4619      	mov	r1, r3
 800351e:	4805      	ldr	r0, [pc, #20]	@ (8003534 <HAL_UART_MspInit+0x8c>)
 8003520:	f000 fdd8 	bl	80040d4 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8003524:	bf00      	nop
 8003526:	3728      	adds	r7, #40	@ 0x28
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40004800 	.word	0x40004800
 8003530:	40023800 	.word	0x40023800
 8003534:	40020c00 	.word	0x40020c00

08003538 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b0a0      	sub	sp, #128	@ 0x80
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003540:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	605a      	str	r2, [r3, #4]
 800354a:	609a      	str	r2, [r3, #8]
 800354c:	60da      	str	r2, [r3, #12]
 800354e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003550:	f107 0310 	add.w	r3, r7, #16
 8003554:	225c      	movs	r2, #92	@ 0x5c
 8003556:	2100      	movs	r1, #0
 8003558:	4618      	mov	r0, r3
 800355a:	f004 fde4 	bl	8008126 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003566:	d14e      	bne.n	8003606 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003568:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800356c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800356e:	2300      	movs	r3, #0
 8003570:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003572:	f107 0310 	add.w	r3, r7, #16
 8003576:	4618      	mov	r0, r3
 8003578:	f001 f9c6 	bl	8004908 <HAL_RCCEx_PeriphCLKConfig>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8003582:	f7ff fae7 	bl	8002b54 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003586:	2300      	movs	r3, #0
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	4b21      	ldr	r3, [pc, #132]	@ (8003610 <HAL_PCD_MspInit+0xd8>)
 800358c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358e:	4a20      	ldr	r2, [pc, #128]	@ (8003610 <HAL_PCD_MspInit+0xd8>)
 8003590:	f043 0301 	orr.w	r3, r3, #1
 8003594:	6313      	str	r3, [r2, #48]	@ 0x30
 8003596:	4b1e      	ldr	r3, [pc, #120]	@ (8003610 <HAL_PCD_MspInit+0xd8>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80035a2:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80035a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a8:	2302      	movs	r3, #2
 80035aa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ac:	2300      	movs	r3, #0
 80035ae:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035b0:	2303      	movs	r3, #3
 80035b2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80035b4:	230a      	movs	r3, #10
 80035b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035b8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80035bc:	4619      	mov	r1, r3
 80035be:	4815      	ldr	r0, [pc, #84]	@ (8003614 <HAL_PCD_MspInit+0xdc>)
 80035c0:	f000 fd88 	bl	80040d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80035c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80035c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035ca:	2300      	movs	r3, #0
 80035cc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80035d2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80035d6:	4619      	mov	r1, r3
 80035d8:	480e      	ldr	r0, [pc, #56]	@ (8003614 <HAL_PCD_MspInit+0xdc>)
 80035da:	f000 fd7b 	bl	80040d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80035de:	4b0c      	ldr	r3, [pc, #48]	@ (8003610 <HAL_PCD_MspInit+0xd8>)
 80035e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035e2:	4a0b      	ldr	r2, [pc, #44]	@ (8003610 <HAL_PCD_MspInit+0xd8>)
 80035e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035e8:	6353      	str	r3, [r2, #52]	@ 0x34
 80035ea:	2300      	movs	r3, #0
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	4b08      	ldr	r3, [pc, #32]	@ (8003610 <HAL_PCD_MspInit+0xd8>)
 80035f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f2:	4a07      	ldr	r2, [pc, #28]	@ (8003610 <HAL_PCD_MspInit+0xd8>)
 80035f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80035fa:	4b05      	ldr	r3, [pc, #20]	@ (8003610 <HAL_PCD_MspInit+0xd8>)
 80035fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003602:	60bb      	str	r3, [r7, #8]
 8003604:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8003606:	bf00      	nop
 8003608:	3780      	adds	r7, #128	@ 0x80
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	40023800 	.word	0x40023800
 8003614:	40020000 	.word	0x40020000

08003618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800361c:	bf00      	nop
 800361e:	e7fd      	b.n	800361c <NMI_Handler+0x4>

08003620 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003624:	bf00      	nop
 8003626:	e7fd      	b.n	8003624 <HardFault_Handler+0x4>

08003628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800362c:	bf00      	nop
 800362e:	e7fd      	b.n	800362c <MemManage_Handler+0x4>

08003630 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003634:	bf00      	nop
 8003636:	e7fd      	b.n	8003634 <BusFault_Handler+0x4>

08003638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800363c:	bf00      	nop
 800363e:	e7fd      	b.n	800363c <UsageFault_Handler+0x4>

08003640 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003644:	bf00      	nop
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800364e:	b480      	push	{r7}
 8003650:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003652:	bf00      	nop
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003660:	bf00      	nop
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800366e:	f000 f969 	bl	8003944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003672:	bf00      	nop
 8003674:	bd80      	pop	{r7, pc}
	...

08003678 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800367c:	4802      	ldr	r0, [pc, #8]	@ (8003688 <TIM2_IRQHandler+0x10>)
 800367e:	f002 fe45 	bl	800630c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003682:	bf00      	nop
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	20000304 	.word	0x20000304

0800368c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8003690:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003694:	f000 fecc 	bl	8004430 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003698:	bf00      	nop
 800369a:	bd80      	pop	{r7, pc}

0800369c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  return 1;
 80036a0:	2301      	movs	r3, #1
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <_kill>:

int _kill(int pid, int sig)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80036b6:	f004 fd89 	bl	80081cc <__errno>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2216      	movs	r2, #22
 80036be:	601a      	str	r2, [r3, #0]
  return -1;
 80036c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <_exit>:

void _exit (int status)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80036d4:	f04f 31ff 	mov.w	r1, #4294967295
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f7ff ffe7 	bl	80036ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80036de:	bf00      	nop
 80036e0:	e7fd      	b.n	80036de <_exit+0x12>

080036e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b086      	sub	sp, #24
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	60f8      	str	r0, [r7, #12]
 80036ea:	60b9      	str	r1, [r7, #8]
 80036ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	e00a      	b.n	800370a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80036f4:	f3af 8000 	nop.w
 80036f8:	4601      	mov	r1, r0
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	1c5a      	adds	r2, r3, #1
 80036fe:	60ba      	str	r2, [r7, #8]
 8003700:	b2ca      	uxtb	r2, r1
 8003702:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	3301      	adds	r3, #1
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	429a      	cmp	r2, r3
 8003710:	dbf0      	blt.n	80036f4 <_read+0x12>
  }

  return len;
 8003712:	687b      	ldr	r3, [r7, #4]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003728:	2300      	movs	r3, #0
 800372a:	617b      	str	r3, [r7, #20]
 800372c:	e009      	b.n	8003742 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	60ba      	str	r2, [r7, #8]
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	3301      	adds	r3, #1
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	429a      	cmp	r2, r3
 8003748:	dbf1      	blt.n	800372e <_write+0x12>
  }
  return len;
 800374a:	687b      	ldr	r3, [r7, #4]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3718      	adds	r7, #24
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <_close>:

int _close(int file)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800375c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003760:	4618      	mov	r0, r3
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800377c:	605a      	str	r2, [r3, #4]
  return 0;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <_isatty>:

int _isatty(int file)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003794:	2301      	movs	r3, #1
}
 8003796:	4618      	mov	r0, r3
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b085      	sub	sp, #20
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	60f8      	str	r0, [r7, #12]
 80037aa:	60b9      	str	r1, [r7, #8]
 80037ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037c4:	4a14      	ldr	r2, [pc, #80]	@ (8003818 <_sbrk+0x5c>)
 80037c6:	4b15      	ldr	r3, [pc, #84]	@ (800381c <_sbrk+0x60>)
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037d0:	4b13      	ldr	r3, [pc, #76]	@ (8003820 <_sbrk+0x64>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d102      	bne.n	80037de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037d8:	4b11      	ldr	r3, [pc, #68]	@ (8003820 <_sbrk+0x64>)
 80037da:	4a12      	ldr	r2, [pc, #72]	@ (8003824 <_sbrk+0x68>)
 80037dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037de:	4b10      	ldr	r3, [pc, #64]	@ (8003820 <_sbrk+0x64>)
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4413      	add	r3, r2
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d207      	bcs.n	80037fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037ec:	f004 fcee 	bl	80081cc <__errno>
 80037f0:	4603      	mov	r3, r0
 80037f2:	220c      	movs	r2, #12
 80037f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037f6:	f04f 33ff 	mov.w	r3, #4294967295
 80037fa:	e009      	b.n	8003810 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037fc:	4b08      	ldr	r3, [pc, #32]	@ (8003820 <_sbrk+0x64>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003802:	4b07      	ldr	r3, [pc, #28]	@ (8003820 <_sbrk+0x64>)
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4413      	add	r3, r2
 800380a:	4a05      	ldr	r2, [pc, #20]	@ (8003820 <_sbrk+0x64>)
 800380c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800380e:	68fb      	ldr	r3, [r7, #12]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3718      	adds	r7, #24
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	20020000 	.word	0x20020000
 800381c:	00000400 	.word	0x00000400
 8003820:	20000878 	.word	0x20000878
 8003824:	200009d0 	.word	0x200009d0

08003828 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800382c:	4b06      	ldr	r3, [pc, #24]	@ (8003848 <SystemInit+0x20>)
 800382e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003832:	4a05      	ldr	r2, [pc, #20]	@ (8003848 <SystemInit+0x20>)
 8003834:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003838:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800383c:	bf00      	nop
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	e000ed00 	.word	0xe000ed00

0800384c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800384c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003884 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003850:	f7ff ffea 	bl	8003828 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003854:	480c      	ldr	r0, [pc, #48]	@ (8003888 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003856:	490d      	ldr	r1, [pc, #52]	@ (800388c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003858:	4a0d      	ldr	r2, [pc, #52]	@ (8003890 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800385a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800385c:	e002      	b.n	8003864 <LoopCopyDataInit>

0800385e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800385e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003862:	3304      	adds	r3, #4

08003864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003868:	d3f9      	bcc.n	800385e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800386a:	4a0a      	ldr	r2, [pc, #40]	@ (8003894 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800386c:	4c0a      	ldr	r4, [pc, #40]	@ (8003898 <LoopFillZerobss+0x22>)
  movs r3, #0
 800386e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003870:	e001      	b.n	8003876 <LoopFillZerobss>

08003872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003874:	3204      	adds	r2, #4

08003876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003878:	d3fb      	bcc.n	8003872 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800387a:	f004 fcad 	bl	80081d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800387e:	f7fe fb9f 	bl	8001fc0 <main>
  bx  lr    
 8003882:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003884:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800388c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003890:	0800c9e8 	.word	0x0800c9e8
  ldr r2, =_sbss
 8003894:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003898:	200009cc 	.word	0x200009cc

0800389c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800389c:	e7fe      	b.n	800389c <ADC_IRQHandler>
	...

080038a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038a4:	4b0e      	ldr	r3, [pc, #56]	@ (80038e0 <HAL_Init+0x40>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a0d      	ldr	r2, [pc, #52]	@ (80038e0 <HAL_Init+0x40>)
 80038aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038b0:	4b0b      	ldr	r3, [pc, #44]	@ (80038e0 <HAL_Init+0x40>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a0a      	ldr	r2, [pc, #40]	@ (80038e0 <HAL_Init+0x40>)
 80038b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038bc:	4b08      	ldr	r3, [pc, #32]	@ (80038e0 <HAL_Init+0x40>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a07      	ldr	r2, [pc, #28]	@ (80038e0 <HAL_Init+0x40>)
 80038c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038c8:	2003      	movs	r0, #3
 80038ca:	f000 fbc1 	bl	8004050 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038ce:	2000      	movs	r0, #0
 80038d0:	f000 f808 	bl	80038e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038d4:	f7ff fcb8 	bl	8003248 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40023c00 	.word	0x40023c00

080038e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038ec:	4b12      	ldr	r3, [pc, #72]	@ (8003938 <HAL_InitTick+0x54>)
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	4b12      	ldr	r3, [pc, #72]	@ (800393c <HAL_InitTick+0x58>)
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	4619      	mov	r1, r3
 80038f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80038fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80038fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003902:	4618      	mov	r0, r3
 8003904:	f000 fbd9 	bl	80040ba <HAL_SYSTICK_Config>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e00e      	b.n	8003930 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b0f      	cmp	r3, #15
 8003916:	d80a      	bhi.n	800392e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003918:	2200      	movs	r2, #0
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	f04f 30ff 	mov.w	r0, #4294967295
 8003920:	f000 fba1 	bl	8004066 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003924:	4a06      	ldr	r2, [pc, #24]	@ (8003940 <HAL_InitTick+0x5c>)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800392a:	2300      	movs	r3, #0
 800392c:	e000      	b.n	8003930 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
}
 8003930:	4618      	mov	r0, r3
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	2000000c 	.word	0x2000000c
 800393c:	20000014 	.word	0x20000014
 8003940:	20000010 	.word	0x20000010

08003944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003948:	4b06      	ldr	r3, [pc, #24]	@ (8003964 <HAL_IncTick+0x20>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	461a      	mov	r2, r3
 800394e:	4b06      	ldr	r3, [pc, #24]	@ (8003968 <HAL_IncTick+0x24>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4413      	add	r3, r2
 8003954:	4a04      	ldr	r2, [pc, #16]	@ (8003968 <HAL_IncTick+0x24>)
 8003956:	6013      	str	r3, [r2, #0]
}
 8003958:	bf00      	nop
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	20000014 	.word	0x20000014
 8003968:	2000087c 	.word	0x2000087c

0800396c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  return uwTick;
 8003970:	4b03      	ldr	r3, [pc, #12]	@ (8003980 <HAL_GetTick+0x14>)
 8003972:	681b      	ldr	r3, [r3, #0]
}
 8003974:	4618      	mov	r0, r3
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	2000087c 	.word	0x2000087c

08003984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800398c:	f7ff ffee 	bl	800396c <HAL_GetTick>
 8003990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800399c:	d005      	beq.n	80039aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800399e:	4b0a      	ldr	r3, [pc, #40]	@ (80039c8 <HAL_Delay+0x44>)
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	461a      	mov	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4413      	add	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039aa:	bf00      	nop
 80039ac:	f7ff ffde 	bl	800396c <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d8f7      	bhi.n	80039ac <HAL_Delay+0x28>
  {
  }
}
 80039bc:	bf00      	nop
 80039be:	bf00      	nop
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	20000014 	.word	0x20000014

080039cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039d4:	2300      	movs	r3, #0
 80039d6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e033      	b.n	8003a4a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d109      	bne.n	80039fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7ff fc54 	bl	8003298 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a02:	f003 0310 	and.w	r3, r3, #16
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d118      	bne.n	8003a3c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003a12:	f023 0302 	bic.w	r3, r3, #2
 8003a16:	f043 0202 	orr.w	r2, r3, #2
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f94a 	bl	8003cb8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2e:	f023 0303 	bic.w	r3, r3, #3
 8003a32:	f043 0201 	orr.w	r2, r3, #1
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	641a      	str	r2, [r3, #64]	@ 0x40
 8003a3a:	e001      	b.n	8003a40 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
	...

08003a54 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <HAL_ADC_ConfigChannel+0x1c>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e113      	b.n	8003c98 <HAL_ADC_ConfigChannel+0x244>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b09      	cmp	r3, #9
 8003a7e:	d925      	bls.n	8003acc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68d9      	ldr	r1, [r3, #12]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	4613      	mov	r3, r2
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	4413      	add	r3, r2
 8003a94:	3b1e      	subs	r3, #30
 8003a96:	2207      	movs	r2, #7
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	43da      	mvns	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	400a      	ands	r2, r1
 8003aa4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68d9      	ldr	r1, [r3, #12]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	4603      	mov	r3, r0
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	4403      	add	r3, r0
 8003abe:	3b1e      	subs	r3, #30
 8003ac0:	409a      	lsls	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	60da      	str	r2, [r3, #12]
 8003aca:	e022      	b.n	8003b12 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6919      	ldr	r1, [r3, #16]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	461a      	mov	r2, r3
 8003ada:	4613      	mov	r3, r2
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	4413      	add	r3, r2
 8003ae0:	2207      	movs	r2, #7
 8003ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae6:	43da      	mvns	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	400a      	ands	r2, r1
 8003aee:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6919      	ldr	r1, [r3, #16]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	689a      	ldr	r2, [r3, #8]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	4618      	mov	r0, r3
 8003b02:	4603      	mov	r3, r0
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	4403      	add	r3, r0
 8003b08:	409a      	lsls	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b06      	cmp	r3, #6
 8003b18:	d824      	bhi.n	8003b64 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	4613      	mov	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4413      	add	r3, r2
 8003b2a:	3b05      	subs	r3, #5
 8003b2c:	221f      	movs	r2, #31
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	43da      	mvns	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	400a      	ands	r2, r1
 8003b3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	4618      	mov	r0, r3
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	3b05      	subs	r3, #5
 8003b56:	fa00 f203 	lsl.w	r2, r0, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	635a      	str	r2, [r3, #52]	@ 0x34
 8003b62:	e04c      	b.n	8003bfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	2b0c      	cmp	r3, #12
 8003b6a:	d824      	bhi.n	8003bb6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	4613      	mov	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4413      	add	r3, r2
 8003b7c:	3b23      	subs	r3, #35	@ 0x23
 8003b7e:	221f      	movs	r2, #31
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	43da      	mvns	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	400a      	ands	r2, r1
 8003b8c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	3b23      	subs	r3, #35	@ 0x23
 8003ba8:	fa00 f203 	lsl.w	r2, r0, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	631a      	str	r2, [r3, #48]	@ 0x30
 8003bb4:	e023      	b.n	8003bfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4413      	add	r3, r2
 8003bc6:	3b41      	subs	r3, #65	@ 0x41
 8003bc8:	221f      	movs	r2, #31
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	43da      	mvns	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	400a      	ands	r2, r1
 8003bd6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	4618      	mov	r0, r3
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	4613      	mov	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	3b41      	subs	r3, #65	@ 0x41
 8003bf2:	fa00 f203 	lsl.w	r2, r0, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bfe:	4b29      	ldr	r3, [pc, #164]	@ (8003ca4 <HAL_ADC_ConfigChannel+0x250>)
 8003c00:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a28      	ldr	r2, [pc, #160]	@ (8003ca8 <HAL_ADC_ConfigChannel+0x254>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d10f      	bne.n	8003c2c <HAL_ADC_ConfigChannel+0x1d8>
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b12      	cmp	r3, #18
 8003c12:	d10b      	bne.n	8003c2c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a1d      	ldr	r2, [pc, #116]	@ (8003ca8 <HAL_ADC_ConfigChannel+0x254>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d12b      	bne.n	8003c8e <HAL_ADC_ConfigChannel+0x23a>
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a1c      	ldr	r2, [pc, #112]	@ (8003cac <HAL_ADC_ConfigChannel+0x258>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d003      	beq.n	8003c48 <HAL_ADC_ConfigChannel+0x1f4>
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2b11      	cmp	r3, #17
 8003c46:	d122      	bne.n	8003c8e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a11      	ldr	r2, [pc, #68]	@ (8003cac <HAL_ADC_ConfigChannel+0x258>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d111      	bne.n	8003c8e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c6a:	4b11      	ldr	r3, [pc, #68]	@ (8003cb0 <HAL_ADC_ConfigChannel+0x25c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a11      	ldr	r2, [pc, #68]	@ (8003cb4 <HAL_ADC_ConfigChannel+0x260>)
 8003c70:	fba2 2303 	umull	r2, r3, r2, r3
 8003c74:	0c9a      	lsrs	r2, r3, #18
 8003c76:	4613      	mov	r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4413      	add	r3, r2
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003c80:	e002      	b.n	8003c88 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	3b01      	subs	r3, #1
 8003c86:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f9      	bne.n	8003c82 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3714      	adds	r7, #20
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	40012300 	.word	0x40012300
 8003ca8:	40012000 	.word	0x40012000
 8003cac:	10000012 	.word	0x10000012
 8003cb0:	2000000c 	.word	0x2000000c
 8003cb4:	431bde83 	.word	0x431bde83

08003cb8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003cc0:	4b79      	ldr	r3, [pc, #484]	@ (8003ea8 <ADC_Init+0x1f0>)
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003cec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6859      	ldr	r1, [r3, #4]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	021a      	lsls	r2, r3, #8
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003d10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6859      	ldr	r1, [r3, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689a      	ldr	r2, [r3, #8]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6899      	ldr	r1, [r3, #8]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68da      	ldr	r2, [r3, #12]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d4a:	4a58      	ldr	r2, [pc, #352]	@ (8003eac <ADC_Init+0x1f4>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d022      	beq.n	8003d96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003d5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6899      	ldr	r1, [r3, #8]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003d80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6899      	ldr	r1, [r3, #8]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	609a      	str	r2, [r3, #8]
 8003d94:	e00f      	b.n	8003db6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003da4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003db4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689a      	ldr	r2, [r3, #8]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 0202 	bic.w	r2, r2, #2
 8003dc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6899      	ldr	r1, [r3, #8]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	7e1b      	ldrb	r3, [r3, #24]
 8003dd0:	005a      	lsls	r2, r3, #1
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d01b      	beq.n	8003e1c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003df2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003e02:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6859      	ldr	r1, [r3, #4]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	035a      	lsls	r2, r3, #13
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	605a      	str	r2, [r3, #4]
 8003e1a:	e007      	b.n	8003e2c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e2a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003e3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	051a      	lsls	r2, r3, #20
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003e60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6899      	ldr	r1, [r3, #8]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003e6e:	025a      	lsls	r2, r3, #9
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6899      	ldr	r1, [r3, #8]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	029a      	lsls	r2, r3, #10
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	609a      	str	r2, [r3, #8]
}
 8003e9c:	bf00      	nop
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	40012300 	.word	0x40012300
 8003eac:	0f000001 	.word	0x0f000001

08003eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f003 0307 	and.w	r3, r3, #7
 8003ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ecc:	4013      	ands	r3, r2
 8003ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ed8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003edc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ee2:	4a04      	ldr	r2, [pc, #16]	@ (8003ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	60d3      	str	r3, [r2, #12]
}
 8003ee8:	bf00      	nop
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	e000ed00 	.word	0xe000ed00

08003ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003efc:	4b04      	ldr	r3, [pc, #16]	@ (8003f10 <__NVIC_GetPriorityGrouping+0x18>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	0a1b      	lsrs	r3, r3, #8
 8003f02:	f003 0307 	and.w	r3, r3, #7
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	e000ed00 	.word	0xe000ed00

08003f14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	db0b      	blt.n	8003f3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f26:	79fb      	ldrb	r3, [r7, #7]
 8003f28:	f003 021f 	and.w	r2, r3, #31
 8003f2c:	4907      	ldr	r1, [pc, #28]	@ (8003f4c <__NVIC_EnableIRQ+0x38>)
 8003f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f32:	095b      	lsrs	r3, r3, #5
 8003f34:	2001      	movs	r0, #1
 8003f36:	fa00 f202 	lsl.w	r2, r0, r2
 8003f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f3e:	bf00      	nop
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	e000e100 	.word	0xe000e100

08003f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	4603      	mov	r3, r0
 8003f58:	6039      	str	r1, [r7, #0]
 8003f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	db0a      	blt.n	8003f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	490c      	ldr	r1, [pc, #48]	@ (8003f9c <__NVIC_SetPriority+0x4c>)
 8003f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f6e:	0112      	lsls	r2, r2, #4
 8003f70:	b2d2      	uxtb	r2, r2
 8003f72:	440b      	add	r3, r1
 8003f74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f78:	e00a      	b.n	8003f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	4908      	ldr	r1, [pc, #32]	@ (8003fa0 <__NVIC_SetPriority+0x50>)
 8003f80:	79fb      	ldrb	r3, [r7, #7]
 8003f82:	f003 030f 	and.w	r3, r3, #15
 8003f86:	3b04      	subs	r3, #4
 8003f88:	0112      	lsls	r2, r2, #4
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	440b      	add	r3, r1
 8003f8e:	761a      	strb	r2, [r3, #24]
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	e000e100 	.word	0xe000e100
 8003fa0:	e000ed00 	.word	0xe000ed00

08003fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b089      	sub	sp, #36	@ 0x24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f003 0307 	and.w	r3, r3, #7
 8003fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f1c3 0307 	rsb	r3, r3, #7
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	bf28      	it	cs
 8003fc2:	2304      	movcs	r3, #4
 8003fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	3304      	adds	r3, #4
 8003fca:	2b06      	cmp	r3, #6
 8003fcc:	d902      	bls.n	8003fd4 <NVIC_EncodePriority+0x30>
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	3b03      	subs	r3, #3
 8003fd2:	e000      	b.n	8003fd6 <NVIC_EncodePriority+0x32>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe2:	43da      	mvns	r2, r3
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	401a      	ands	r2, r3
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fec:	f04f 31ff 	mov.w	r1, #4294967295
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff6:	43d9      	mvns	r1, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ffc:	4313      	orrs	r3, r2
         );
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3724      	adds	r7, #36	@ 0x24
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
	...

0800400c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3b01      	subs	r3, #1
 8004018:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800401c:	d301      	bcc.n	8004022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800401e:	2301      	movs	r3, #1
 8004020:	e00f      	b.n	8004042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004022:	4a0a      	ldr	r2, [pc, #40]	@ (800404c <SysTick_Config+0x40>)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	3b01      	subs	r3, #1
 8004028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800402a:	210f      	movs	r1, #15
 800402c:	f04f 30ff 	mov.w	r0, #4294967295
 8004030:	f7ff ff8e 	bl	8003f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004034:	4b05      	ldr	r3, [pc, #20]	@ (800404c <SysTick_Config+0x40>)
 8004036:	2200      	movs	r2, #0
 8004038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800403a:	4b04      	ldr	r3, [pc, #16]	@ (800404c <SysTick_Config+0x40>)
 800403c:	2207      	movs	r2, #7
 800403e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	e000e010 	.word	0xe000e010

08004050 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f7ff ff29 	bl	8003eb0 <__NVIC_SetPriorityGrouping>
}
 800405e:	bf00      	nop
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004066:	b580      	push	{r7, lr}
 8004068:	b086      	sub	sp, #24
 800406a:	af00      	add	r7, sp, #0
 800406c:	4603      	mov	r3, r0
 800406e:	60b9      	str	r1, [r7, #8]
 8004070:	607a      	str	r2, [r7, #4]
 8004072:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004074:	2300      	movs	r3, #0
 8004076:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004078:	f7ff ff3e 	bl	8003ef8 <__NVIC_GetPriorityGrouping>
 800407c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	68b9      	ldr	r1, [r7, #8]
 8004082:	6978      	ldr	r0, [r7, #20]
 8004084:	f7ff ff8e 	bl	8003fa4 <NVIC_EncodePriority>
 8004088:	4602      	mov	r2, r0
 800408a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800408e:	4611      	mov	r1, r2
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff ff5d 	bl	8003f50 <__NVIC_SetPriority>
}
 8004096:	bf00      	nop
 8004098:	3718      	adds	r7, #24
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b082      	sub	sp, #8
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	4603      	mov	r3, r0
 80040a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7ff ff31 	bl	8003f14 <__NVIC_EnableIRQ>
}
 80040b2:	bf00      	nop
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b082      	sub	sp, #8
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7ff ffa2 	bl	800400c <SysTick_Config>
 80040c8:	4603      	mov	r3, r0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3708      	adds	r7, #8
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
	...

080040d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b089      	sub	sp, #36	@ 0x24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040de:	2300      	movs	r3, #0
 80040e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040e2:	2300      	movs	r3, #0
 80040e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040ea:	2300      	movs	r3, #0
 80040ec:	61fb      	str	r3, [r7, #28]
 80040ee:	e165      	b.n	80043bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040f0:	2201      	movs	r2, #1
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	4013      	ands	r3, r2
 8004102:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	429a      	cmp	r2, r3
 800410a:	f040 8154 	bne.w	80043b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	2b01      	cmp	r3, #1
 8004118:	d005      	beq.n	8004126 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004122:	2b02      	cmp	r3, #2
 8004124:	d130      	bne.n	8004188 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	2203      	movs	r2, #3
 8004132:	fa02 f303 	lsl.w	r3, r2, r3
 8004136:	43db      	mvns	r3, r3
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	4013      	ands	r3, r2
 800413c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	68da      	ldr	r2, [r3, #12]
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	fa02 f303 	lsl.w	r3, r2, r3
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	4313      	orrs	r3, r2
 800414e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800415c:	2201      	movs	r2, #1
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	fa02 f303 	lsl.w	r3, r2, r3
 8004164:	43db      	mvns	r3, r3
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	4013      	ands	r3, r2
 800416a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	091b      	lsrs	r3, r3, #4
 8004172:	f003 0201 	and.w	r2, r3, #1
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	fa02 f303 	lsl.w	r3, r2, r3
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	4313      	orrs	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f003 0303 	and.w	r3, r3, #3
 8004190:	2b03      	cmp	r3, #3
 8004192:	d017      	beq.n	80041c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	2203      	movs	r2, #3
 80041a0:	fa02 f303 	lsl.w	r3, r2, r3
 80041a4:	43db      	mvns	r3, r3
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	4013      	ands	r3, r2
 80041aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	fa02 f303 	lsl.w	r3, r2, r3
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f003 0303 	and.w	r3, r3, #3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d123      	bne.n	8004218 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	08da      	lsrs	r2, r3, #3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3208      	adds	r2, #8
 80041d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	f003 0307 	and.w	r3, r3, #7
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	220f      	movs	r2, #15
 80041e8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ec:	43db      	mvns	r3, r3
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	4013      	ands	r3, r2
 80041f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	691a      	ldr	r2, [r3, #16]
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	4313      	orrs	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	08da      	lsrs	r2, r3, #3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	3208      	adds	r2, #8
 8004212:	69b9      	ldr	r1, [r7, #24]
 8004214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	2203      	movs	r2, #3
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	43db      	mvns	r3, r3
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	4013      	ands	r3, r2
 800422e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f003 0203 	and.w	r2, r3, #3
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	4313      	orrs	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 80ae 	beq.w	80043b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800425a:	2300      	movs	r3, #0
 800425c:	60fb      	str	r3, [r7, #12]
 800425e:	4b5d      	ldr	r3, [pc, #372]	@ (80043d4 <HAL_GPIO_Init+0x300>)
 8004260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004262:	4a5c      	ldr	r2, [pc, #368]	@ (80043d4 <HAL_GPIO_Init+0x300>)
 8004264:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004268:	6453      	str	r3, [r2, #68]	@ 0x44
 800426a:	4b5a      	ldr	r3, [pc, #360]	@ (80043d4 <HAL_GPIO_Init+0x300>)
 800426c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800426e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004276:	4a58      	ldr	r2, [pc, #352]	@ (80043d8 <HAL_GPIO_Init+0x304>)
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	089b      	lsrs	r3, r3, #2
 800427c:	3302      	adds	r3, #2
 800427e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004282:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	220f      	movs	r2, #15
 800428e:	fa02 f303 	lsl.w	r3, r2, r3
 8004292:	43db      	mvns	r3, r3
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	4013      	ands	r3, r2
 8004298:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a4f      	ldr	r2, [pc, #316]	@ (80043dc <HAL_GPIO_Init+0x308>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d025      	beq.n	80042ee <HAL_GPIO_Init+0x21a>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a4e      	ldr	r2, [pc, #312]	@ (80043e0 <HAL_GPIO_Init+0x30c>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d01f      	beq.n	80042ea <HAL_GPIO_Init+0x216>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a4d      	ldr	r2, [pc, #308]	@ (80043e4 <HAL_GPIO_Init+0x310>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d019      	beq.n	80042e6 <HAL_GPIO_Init+0x212>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a4c      	ldr	r2, [pc, #304]	@ (80043e8 <HAL_GPIO_Init+0x314>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d013      	beq.n	80042e2 <HAL_GPIO_Init+0x20e>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a4b      	ldr	r2, [pc, #300]	@ (80043ec <HAL_GPIO_Init+0x318>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d00d      	beq.n	80042de <HAL_GPIO_Init+0x20a>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a4a      	ldr	r2, [pc, #296]	@ (80043f0 <HAL_GPIO_Init+0x31c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d007      	beq.n	80042da <HAL_GPIO_Init+0x206>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a49      	ldr	r2, [pc, #292]	@ (80043f4 <HAL_GPIO_Init+0x320>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d101      	bne.n	80042d6 <HAL_GPIO_Init+0x202>
 80042d2:	2306      	movs	r3, #6
 80042d4:	e00c      	b.n	80042f0 <HAL_GPIO_Init+0x21c>
 80042d6:	2307      	movs	r3, #7
 80042d8:	e00a      	b.n	80042f0 <HAL_GPIO_Init+0x21c>
 80042da:	2305      	movs	r3, #5
 80042dc:	e008      	b.n	80042f0 <HAL_GPIO_Init+0x21c>
 80042de:	2304      	movs	r3, #4
 80042e0:	e006      	b.n	80042f0 <HAL_GPIO_Init+0x21c>
 80042e2:	2303      	movs	r3, #3
 80042e4:	e004      	b.n	80042f0 <HAL_GPIO_Init+0x21c>
 80042e6:	2302      	movs	r3, #2
 80042e8:	e002      	b.n	80042f0 <HAL_GPIO_Init+0x21c>
 80042ea:	2301      	movs	r3, #1
 80042ec:	e000      	b.n	80042f0 <HAL_GPIO_Init+0x21c>
 80042ee:	2300      	movs	r3, #0
 80042f0:	69fa      	ldr	r2, [r7, #28]
 80042f2:	f002 0203 	and.w	r2, r2, #3
 80042f6:	0092      	lsls	r2, r2, #2
 80042f8:	4093      	lsls	r3, r2
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004300:	4935      	ldr	r1, [pc, #212]	@ (80043d8 <HAL_GPIO_Init+0x304>)
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	089b      	lsrs	r3, r3, #2
 8004306:	3302      	adds	r3, #2
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800430e:	4b3a      	ldr	r3, [pc, #232]	@ (80043f8 <HAL_GPIO_Init+0x324>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	43db      	mvns	r3, r3
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	4013      	ands	r3, r2
 800431c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	4313      	orrs	r3, r2
 8004330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004332:	4a31      	ldr	r2, [pc, #196]	@ (80043f8 <HAL_GPIO_Init+0x324>)
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004338:	4b2f      	ldr	r3, [pc, #188]	@ (80043f8 <HAL_GPIO_Init+0x324>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	43db      	mvns	r3, r3
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	4013      	ands	r3, r2
 8004346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	4313      	orrs	r3, r2
 800435a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800435c:	4a26      	ldr	r2, [pc, #152]	@ (80043f8 <HAL_GPIO_Init+0x324>)
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004362:	4b25      	ldr	r3, [pc, #148]	@ (80043f8 <HAL_GPIO_Init+0x324>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	43db      	mvns	r3, r3
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	4013      	ands	r3, r2
 8004370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	4313      	orrs	r3, r2
 8004384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004386:	4a1c      	ldr	r2, [pc, #112]	@ (80043f8 <HAL_GPIO_Init+0x324>)
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800438c:	4b1a      	ldr	r3, [pc, #104]	@ (80043f8 <HAL_GPIO_Init+0x324>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	43db      	mvns	r3, r3
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	4013      	ands	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d003      	beq.n	80043b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043b0:	4a11      	ldr	r2, [pc, #68]	@ (80043f8 <HAL_GPIO_Init+0x324>)
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	3301      	adds	r3, #1
 80043ba:	61fb      	str	r3, [r7, #28]
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	2b0f      	cmp	r3, #15
 80043c0:	f67f ae96 	bls.w	80040f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043c4:	bf00      	nop
 80043c6:	bf00      	nop
 80043c8:	3724      	adds	r7, #36	@ 0x24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	40023800 	.word	0x40023800
 80043d8:	40013800 	.word	0x40013800
 80043dc:	40020000 	.word	0x40020000
 80043e0:	40020400 	.word	0x40020400
 80043e4:	40020800 	.word	0x40020800
 80043e8:	40020c00 	.word	0x40020c00
 80043ec:	40021000 	.word	0x40021000
 80043f0:	40021400 	.word	0x40021400
 80043f4:	40021800 	.word	0x40021800
 80043f8:	40013c00 	.word	0x40013c00

080043fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	807b      	strh	r3, [r7, #2]
 8004408:	4613      	mov	r3, r2
 800440a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800440c:	787b      	ldrb	r3, [r7, #1]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004412:	887a      	ldrh	r2, [r7, #2]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004418:	e003      	b.n	8004422 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800441a:	887b      	ldrh	r3, [r7, #2]
 800441c:	041a      	lsls	r2, r3, #16
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	619a      	str	r2, [r3, #24]
}
 8004422:	bf00      	nop
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
	...

08004430 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	4603      	mov	r3, r0
 8004438:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800443a:	4b08      	ldr	r3, [pc, #32]	@ (800445c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800443c:	695a      	ldr	r2, [r3, #20]
 800443e:	88fb      	ldrh	r3, [r7, #6]
 8004440:	4013      	ands	r3, r2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d006      	beq.n	8004454 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004446:	4a05      	ldr	r2, [pc, #20]	@ (800445c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004448:	88fb      	ldrh	r3, [r7, #6]
 800444a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800444c:	88fb      	ldrh	r3, [r7, #6]
 800444e:	4618      	mov	r0, r3
 8004450:	f7fe fb5e 	bl	8002b10 <HAL_GPIO_EXTI_Callback>
  }
}
 8004454:	bf00      	nop
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40013c00 	.word	0x40013c00

08004460 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af02      	add	r7, sp, #8
 8004466:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e108      	b.n	8004684 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	d106      	bne.n	8004492 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f7ff f853 	bl	8003538 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2203      	movs	r2, #3
 8004496:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044a0:	d102      	bne.n	80044a8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f002 fe15 	bl	80070dc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6818      	ldr	r0, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	7c1a      	ldrb	r2, [r3, #16]
 80044ba:	f88d 2000 	strb.w	r2, [sp]
 80044be:	3304      	adds	r3, #4
 80044c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044c2:	f002 fda7 	bl	8007014 <USB_CoreInit>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d005      	beq.n	80044d8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e0d5      	b.n	8004684 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2100      	movs	r1, #0
 80044de:	4618      	mov	r0, r3
 80044e0:	f002 fe0d 	bl	80070fe <USB_SetCurrentMode>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d005      	beq.n	80044f6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2202      	movs	r2, #2
 80044ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e0c6      	b.n	8004684 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044f6:	2300      	movs	r3, #0
 80044f8:	73fb      	strb	r3, [r7, #15]
 80044fa:	e04a      	b.n	8004592 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80044fc:	7bfa      	ldrb	r2, [r7, #15]
 80044fe:	6879      	ldr	r1, [r7, #4]
 8004500:	4613      	mov	r3, r2
 8004502:	00db      	lsls	r3, r3, #3
 8004504:	4413      	add	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	440b      	add	r3, r1
 800450a:	3315      	adds	r3, #21
 800450c:	2201      	movs	r2, #1
 800450e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004510:	7bfa      	ldrb	r2, [r7, #15]
 8004512:	6879      	ldr	r1, [r7, #4]
 8004514:	4613      	mov	r3, r2
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	4413      	add	r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	440b      	add	r3, r1
 800451e:	3314      	adds	r3, #20
 8004520:	7bfa      	ldrb	r2, [r7, #15]
 8004522:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004524:	7bfa      	ldrb	r2, [r7, #15]
 8004526:	7bfb      	ldrb	r3, [r7, #15]
 8004528:	b298      	uxth	r0, r3
 800452a:	6879      	ldr	r1, [r7, #4]
 800452c:	4613      	mov	r3, r2
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	4413      	add	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	440b      	add	r3, r1
 8004536:	332e      	adds	r3, #46	@ 0x2e
 8004538:	4602      	mov	r2, r0
 800453a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800453c:	7bfa      	ldrb	r2, [r7, #15]
 800453e:	6879      	ldr	r1, [r7, #4]
 8004540:	4613      	mov	r3, r2
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	4413      	add	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	440b      	add	r3, r1
 800454a:	3318      	adds	r3, #24
 800454c:	2200      	movs	r2, #0
 800454e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004550:	7bfa      	ldrb	r2, [r7, #15]
 8004552:	6879      	ldr	r1, [r7, #4]
 8004554:	4613      	mov	r3, r2
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	4413      	add	r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	440b      	add	r3, r1
 800455e:	331c      	adds	r3, #28
 8004560:	2200      	movs	r2, #0
 8004562:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004564:	7bfa      	ldrb	r2, [r7, #15]
 8004566:	6879      	ldr	r1, [r7, #4]
 8004568:	4613      	mov	r3, r2
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	4413      	add	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	440b      	add	r3, r1
 8004572:	3320      	adds	r3, #32
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004578:	7bfa      	ldrb	r2, [r7, #15]
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	4613      	mov	r3, r2
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	4413      	add	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	440b      	add	r3, r1
 8004586:	3324      	adds	r3, #36	@ 0x24
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800458c:	7bfb      	ldrb	r3, [r7, #15]
 800458e:	3301      	adds	r3, #1
 8004590:	73fb      	strb	r3, [r7, #15]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	791b      	ldrb	r3, [r3, #4]
 8004596:	7bfa      	ldrb	r2, [r7, #15]
 8004598:	429a      	cmp	r2, r3
 800459a:	d3af      	bcc.n	80044fc <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800459c:	2300      	movs	r3, #0
 800459e:	73fb      	strb	r3, [r7, #15]
 80045a0:	e044      	b.n	800462c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80045a2:	7bfa      	ldrb	r2, [r7, #15]
 80045a4:	6879      	ldr	r1, [r7, #4]
 80045a6:	4613      	mov	r3, r2
 80045a8:	00db      	lsls	r3, r3, #3
 80045aa:	4413      	add	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	440b      	add	r3, r1
 80045b0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80045b4:	2200      	movs	r2, #0
 80045b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80045b8:	7bfa      	ldrb	r2, [r7, #15]
 80045ba:	6879      	ldr	r1, [r7, #4]
 80045bc:	4613      	mov	r3, r2
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	4413      	add	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	440b      	add	r3, r1
 80045c6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80045ca:	7bfa      	ldrb	r2, [r7, #15]
 80045cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80045ce:	7bfa      	ldrb	r2, [r7, #15]
 80045d0:	6879      	ldr	r1, [r7, #4]
 80045d2:	4613      	mov	r3, r2
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	4413      	add	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	440b      	add	r3, r1
 80045dc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80045e0:	2200      	movs	r2, #0
 80045e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80045e4:	7bfa      	ldrb	r2, [r7, #15]
 80045e6:	6879      	ldr	r1, [r7, #4]
 80045e8:	4613      	mov	r3, r2
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	4413      	add	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	440b      	add	r3, r1
 80045f2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80045f6:	2200      	movs	r2, #0
 80045f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80045fa:	7bfa      	ldrb	r2, [r7, #15]
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	4613      	mov	r3, r2
 8004600:	00db      	lsls	r3, r3, #3
 8004602:	4413      	add	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	440b      	add	r3, r1
 8004608:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800460c:	2200      	movs	r2, #0
 800460e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004610:	7bfa      	ldrb	r2, [r7, #15]
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	4613      	mov	r3, r2
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	4413      	add	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004622:	2200      	movs	r2, #0
 8004624:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004626:	7bfb      	ldrb	r3, [r7, #15]
 8004628:	3301      	adds	r3, #1
 800462a:	73fb      	strb	r3, [r7, #15]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	791b      	ldrb	r3, [r3, #4]
 8004630:	7bfa      	ldrb	r2, [r7, #15]
 8004632:	429a      	cmp	r2, r3
 8004634:	d3b5      	bcc.n	80045a2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6818      	ldr	r0, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	7c1a      	ldrb	r2, [r3, #16]
 800463e:	f88d 2000 	strb.w	r2, [sp]
 8004642:	3304      	adds	r3, #4
 8004644:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004646:	f002 fda7 	bl	8007198 <USB_DevInit>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d005      	beq.n	800465c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e013      	b.n	8004684 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	7b1b      	ldrb	r3, [r3, #12]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d102      	bne.n	8004678 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f80a 	bl	800468c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4618      	mov	r0, r3
 800467e:	f002 ff62 	bl	8007546 <USB_DevDisconnect>

  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046be:	f043 0303 	orr.w	r3, r3, #3
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e0cc      	b.n	8004882 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046e8:	4b68      	ldr	r3, [pc, #416]	@ (800488c <HAL_RCC_ClockConfig+0x1b8>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 030f 	and.w	r3, r3, #15
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d90c      	bls.n	8004710 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f6:	4b65      	ldr	r3, [pc, #404]	@ (800488c <HAL_RCC_ClockConfig+0x1b8>)
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	b2d2      	uxtb	r2, r2
 80046fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fe:	4b63      	ldr	r3, [pc, #396]	@ (800488c <HAL_RCC_ClockConfig+0x1b8>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 030f 	and.w	r3, r3, #15
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	429a      	cmp	r2, r3
 800470a:	d001      	beq.n	8004710 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e0b8      	b.n	8004882 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d020      	beq.n	800475e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0304 	and.w	r3, r3, #4
 8004724:	2b00      	cmp	r3, #0
 8004726:	d005      	beq.n	8004734 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004728:	4b59      	ldr	r3, [pc, #356]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	4a58      	ldr	r2, [pc, #352]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 800472e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004732:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0308 	and.w	r3, r3, #8
 800473c:	2b00      	cmp	r3, #0
 800473e:	d005      	beq.n	800474c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004740:	4b53      	ldr	r3, [pc, #332]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	4a52      	ldr	r2, [pc, #328]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 8004746:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800474a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800474c:	4b50      	ldr	r3, [pc, #320]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	494d      	ldr	r1, [pc, #308]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 800475a:	4313      	orrs	r3, r2
 800475c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d044      	beq.n	80047f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d107      	bne.n	8004782 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004772:	4b47      	ldr	r3, [pc, #284]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d119      	bne.n	80047b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e07f      	b.n	8004882 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b02      	cmp	r3, #2
 8004788:	d003      	beq.n	8004792 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800478e:	2b03      	cmp	r3, #3
 8004790:	d107      	bne.n	80047a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004792:	4b3f      	ldr	r3, [pc, #252]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d109      	bne.n	80047b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e06f      	b.n	8004882 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a2:	4b3b      	ldr	r3, [pc, #236]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e067      	b.n	8004882 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047b2:	4b37      	ldr	r3, [pc, #220]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f023 0203 	bic.w	r2, r3, #3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	4934      	ldr	r1, [pc, #208]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047c4:	f7ff f8d2 	bl	800396c <HAL_GetTick>
 80047c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ca:	e00a      	b.n	80047e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047cc:	f7ff f8ce 	bl	800396c <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047da:	4293      	cmp	r3, r2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e04f      	b.n	8004882 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047e2:	4b2b      	ldr	r3, [pc, #172]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 020c 	and.w	r2, r3, #12
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d1eb      	bne.n	80047cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047f4:	4b25      	ldr	r3, [pc, #148]	@ (800488c <HAL_RCC_ClockConfig+0x1b8>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 030f 	and.w	r3, r3, #15
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d20c      	bcs.n	800481c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004802:	4b22      	ldr	r3, [pc, #136]	@ (800488c <HAL_RCC_ClockConfig+0x1b8>)
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800480a:	4b20      	ldr	r3, [pc, #128]	@ (800488c <HAL_RCC_ClockConfig+0x1b8>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 030f 	and.w	r3, r3, #15
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	429a      	cmp	r2, r3
 8004816:	d001      	beq.n	800481c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e032      	b.n	8004882 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b00      	cmp	r3, #0
 8004826:	d008      	beq.n	800483a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004828:	4b19      	ldr	r3, [pc, #100]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	4916      	ldr	r1, [pc, #88]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 8004836:	4313      	orrs	r3, r2
 8004838:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0308 	and.w	r3, r3, #8
 8004842:	2b00      	cmp	r3, #0
 8004844:	d009      	beq.n	800485a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004846:	4b12      	ldr	r3, [pc, #72]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	490e      	ldr	r1, [pc, #56]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 8004856:	4313      	orrs	r3, r2
 8004858:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800485a:	f000 fb7f 	bl	8004f5c <HAL_RCC_GetSysClockFreq>
 800485e:	4602      	mov	r2, r0
 8004860:	4b0b      	ldr	r3, [pc, #44]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	091b      	lsrs	r3, r3, #4
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	490a      	ldr	r1, [pc, #40]	@ (8004894 <HAL_RCC_ClockConfig+0x1c0>)
 800486c:	5ccb      	ldrb	r3, [r1, r3]
 800486e:	fa22 f303 	lsr.w	r3, r2, r3
 8004872:	4a09      	ldr	r2, [pc, #36]	@ (8004898 <HAL_RCC_ClockConfig+0x1c4>)
 8004874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004876:	4b09      	ldr	r3, [pc, #36]	@ (800489c <HAL_RCC_ClockConfig+0x1c8>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4618      	mov	r0, r3
 800487c:	f7ff f832 	bl	80038e4 <HAL_InitTick>

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	40023c00 	.word	0x40023c00
 8004890:	40023800 	.word	0x40023800
 8004894:	0800c444 	.word	0x0800c444
 8004898:	2000000c 	.word	0x2000000c
 800489c:	20000010 	.word	0x20000010

080048a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048a4:	4b03      	ldr	r3, [pc, #12]	@ (80048b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80048a6:	681b      	ldr	r3, [r3, #0]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	2000000c 	.word	0x2000000c

080048b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048bc:	f7ff fff0 	bl	80048a0 <HAL_RCC_GetHCLKFreq>
 80048c0:	4602      	mov	r2, r0
 80048c2:	4b05      	ldr	r3, [pc, #20]	@ (80048d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	0a9b      	lsrs	r3, r3, #10
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	4903      	ldr	r1, [pc, #12]	@ (80048dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80048ce:	5ccb      	ldrb	r3, [r1, r3]
 80048d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	40023800 	.word	0x40023800
 80048dc:	0800c454 	.word	0x0800c454

080048e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048e4:	f7ff ffdc 	bl	80048a0 <HAL_RCC_GetHCLKFreq>
 80048e8:	4602      	mov	r2, r0
 80048ea:	4b05      	ldr	r3, [pc, #20]	@ (8004900 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	0b5b      	lsrs	r3, r3, #13
 80048f0:	f003 0307 	and.w	r3, r3, #7
 80048f4:	4903      	ldr	r1, [pc, #12]	@ (8004904 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048f6:	5ccb      	ldrb	r3, [r1, r3]
 80048f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	40023800 	.word	0x40023800
 8004904:	0800c454 	.word	0x0800c454

08004908 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b08c      	sub	sp, #48	@ 0x30
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004910:	2300      	movs	r3, #0
 8004912:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004918:	2300      	movs	r3, #0
 800491a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800491c:	2300      	movs	r3, #0
 800491e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004924:	2300      	movs	r3, #0
 8004926:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004928:	2300      	movs	r3, #0
 800492a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8004930:	2300      	movs	r3, #0
 8004932:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b00      	cmp	r3, #0
 800493e:	d010      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004940:	4b6f      	ldr	r3, [pc, #444]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004942:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004946:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800494e:	496c      	ldr	r1, [pc, #432]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004950:	4313      	orrs	r3, r2
 8004952:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800495e:	2301      	movs	r3, #1
 8004960:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d010      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800496e:	4b64      	ldr	r3, [pc, #400]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004970:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004974:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800497c:	4960      	ldr	r1, [pc, #384]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800497e:	4313      	orrs	r3, r2
 8004980:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800498c:	2301      	movs	r3, #1
 800498e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b00      	cmp	r3, #0
 800499a:	d017      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800499c:	4b58      	ldr	r3, [pc, #352]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800499e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049aa:	4955      	ldr	r1, [pc, #340]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049ba:	d101      	bne.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80049bc:	2301      	movs	r3, #1
 80049be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80049c8:	2301      	movs	r3, #1
 80049ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0308 	and.w	r3, r3, #8
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d017      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80049d8:	4b49      	ldr	r3, [pc, #292]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80049da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049de:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049e6:	4946      	ldr	r1, [pc, #280]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049f6:	d101      	bne.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80049f8:	2301      	movs	r3, #1
 80049fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d101      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004a04:	2301      	movs	r3, #1
 8004a06:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0320 	and.w	r3, r3, #32
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 808a 	beq.w	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a16:	2300      	movs	r3, #0
 8004a18:	60bb      	str	r3, [r7, #8]
 8004a1a:	4b39      	ldr	r3, [pc, #228]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1e:	4a38      	ldr	r2, [pc, #224]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004a20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a24:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a26:	4b36      	ldr	r3, [pc, #216]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a2e:	60bb      	str	r3, [r7, #8]
 8004a30:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004a32:	4b34      	ldr	r3, [pc, #208]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a33      	ldr	r2, [pc, #204]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004a38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a3c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a3e:	f7fe ff95 	bl	800396c <HAL_GetTick>
 8004a42:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004a44:	e008      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a46:	f7fe ff91 	bl	800396c <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e278      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004a58:	4b2a      	ldr	r3, [pc, #168]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0f0      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a64:	4b26      	ldr	r3, [pc, #152]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a6c:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a6e:	6a3b      	ldr	r3, [r7, #32]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d02f      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a7c:	6a3a      	ldr	r2, [r7, #32]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d028      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a82:	4b1f      	ldr	r3, [pc, #124]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a8a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a8c:	4b1e      	ldr	r3, [pc, #120]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004a8e:	2201      	movs	r2, #1
 8004a90:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a92:	4b1d      	ldr	r3, [pc, #116]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004a98:	4a19      	ldr	r2, [pc, #100]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004a9a:	6a3b      	ldr	r3, [r7, #32]
 8004a9c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a9e:	4b18      	ldr	r3, [pc, #96]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d114      	bne.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004aaa:	f7fe ff5f 	bl	800396c <HAL_GetTick>
 8004aae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ab0:	e00a      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ab2:	f7fe ff5b 	bl	800396c <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d901      	bls.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e240      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d0ee      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004adc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ae0:	d114      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004ae2:	4b07      	ldr	r3, [pc, #28]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aee:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004af2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004af6:	4902      	ldr	r1, [pc, #8]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	608b      	str	r3, [r1, #8]
 8004afc:	e00c      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004afe:	bf00      	nop
 8004b00:	40023800 	.word	0x40023800
 8004b04:	40007000 	.word	0x40007000
 8004b08:	42470e40 	.word	0x42470e40
 8004b0c:	4b4a      	ldr	r3, [pc, #296]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	4a49      	ldr	r2, [pc, #292]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004b12:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004b16:	6093      	str	r3, [r2, #8]
 8004b18:	4b47      	ldr	r3, [pc, #284]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004b1a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b24:	4944      	ldr	r1, [pc, #272]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0310 	and.w	r3, r3, #16
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d004      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8004b3c:	4b3f      	ldr	r3, [pc, #252]	@ (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004b3e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00a      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004b4c:	4b3a      	ldr	r3, [pc, #232]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b52:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b5a:	4937      	ldr	r1, [pc, #220]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00a      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b6e:	4b32      	ldr	r3, [pc, #200]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b74:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b7c:	492e      	ldr	r1, [pc, #184]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d011      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004b90:	4b29      	ldr	r3, [pc, #164]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b96:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b9e:	4926      	ldr	r1, [pc, #152]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004baa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bae:	d101      	bne.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00a      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bc6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bce:	491a      	ldr	r1, [pc, #104]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d011      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8004be2:	4b15      	ldr	r3, [pc, #84]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004be8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bf0:	4911      	ldr	r1, [pc, #68]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c00:	d101      	bne.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8004c02:	2301      	movs	r3, #1
 8004c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d005      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c14:	f040 80ff 	bne.w	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c18:	4b09      	ldr	r3, [pc, #36]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c1e:	f7fe fea5 	bl	800396c <HAL_GetTick>
 8004c22:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c24:	e00e      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c26:	f7fe fea1 	bl	800396c <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d907      	bls.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e188      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004c38:	40023800 	.word	0x40023800
 8004c3c:	424711e0 	.word	0x424711e0
 8004c40:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c44:	4b7e      	ldr	r3, [pc, #504]	@ (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1ea      	bne.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d003      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d009      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d028      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d124      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004c78:	4b71      	ldr	r3, [pc, #452]	@ (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c7e:	0c1b      	lsrs	r3, r3, #16
 8004c80:	f003 0303 	and.w	r3, r3, #3
 8004c84:	3301      	adds	r3, #1
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c8a:	4b6d      	ldr	r3, [pc, #436]	@ (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c90:	0e1b      	lsrs	r3, r3, #24
 8004c92:	f003 030f 	and.w	r3, r3, #15
 8004c96:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	019b      	lsls	r3, r3, #6
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	085b      	lsrs	r3, r3, #1
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	041b      	lsls	r3, r3, #16
 8004cac:	431a      	orrs	r2, r3
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	061b      	lsls	r3, r3, #24
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	071b      	lsls	r3, r3, #28
 8004cba:	4961      	ldr	r1, [pc, #388]	@ (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0304 	and.w	r3, r3, #4
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d004      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cd6:	d00a      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d035      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ce8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cec:	d130      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004cee:	4b54      	ldr	r3, [pc, #336]	@ (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cf4:	0c1b      	lsrs	r3, r3, #16
 8004cf6:	f003 0303 	and.w	r3, r3, #3
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	005b      	lsls	r3, r3, #1
 8004cfe:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d00:	4b4f      	ldr	r3, [pc, #316]	@ (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d06:	0f1b      	lsrs	r3, r3, #28
 8004d08:	f003 0307 	and.w	r3, r3, #7
 8004d0c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	019b      	lsls	r3, r3, #6
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	085b      	lsrs	r3, r3, #1
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	041b      	lsls	r3, r3, #16
 8004d22:	431a      	orrs	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	061b      	lsls	r3, r3, #24
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	071b      	lsls	r3, r3, #28
 8004d30:	4943      	ldr	r1, [pc, #268]	@ (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d38:	4b41      	ldr	r3, [pc, #260]	@ (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004d3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d3e:	f023 021f 	bic.w	r2, r3, #31
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d46:	3b01      	subs	r3, #1
 8004d48:	493d      	ldr	r1, [pc, #244]	@ (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d029      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d64:	d124      	bne.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004d66:	4b36      	ldr	r3, [pc, #216]	@ (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004d68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d6c:	0c1b      	lsrs	r3, r3, #16
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	3301      	adds	r3, #1
 8004d74:	005b      	lsls	r3, r3, #1
 8004d76:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d78:	4b31      	ldr	r3, [pc, #196]	@ (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d7e:	0f1b      	lsrs	r3, r3, #28
 8004d80:	f003 0307 	and.w	r3, r3, #7
 8004d84:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	019b      	lsls	r3, r3, #6
 8004d90:	431a      	orrs	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	085b      	lsrs	r3, r3, #1
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	041b      	lsls	r3, r3, #16
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	061b      	lsls	r3, r3, #24
 8004da2:	431a      	orrs	r2, r3
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	071b      	lsls	r3, r3, #28
 8004da8:	4925      	ldr	r1, [pc, #148]	@ (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d016      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	019b      	lsls	r3, r3, #6
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	085b      	lsrs	r3, r3, #1
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	041b      	lsls	r3, r3, #16
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	061b      	lsls	r3, r3, #24
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	071b      	lsls	r3, r3, #28
 8004de2:	4917      	ldr	r1, [pc, #92]	@ (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004dea:	4b16      	ldr	r3, [pc, #88]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004dec:	2201      	movs	r2, #1
 8004dee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004df0:	f7fe fdbc 	bl	800396c <HAL_GetTick>
 8004df4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004df6:	e008      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004df8:	f7fe fdb8 	bl	800396c <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e09f      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0f0      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8004e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	f040 8095 	bne.w	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e24:	f7fe fda2 	bl	800396c <HAL_GetTick>
 8004e28:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e2a:	e00f      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e2c:	f7fe fd9e 	bl	800396c <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d908      	bls.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e085      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004e3e:	bf00      	nop
 8004e40:	40023800 	.word	0x40023800
 8004e44:	42470068 	.word	0x42470068
 8004e48:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e4c:	4b41      	ldr	r3, [pc, #260]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e58:	d0e8      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0304 	and.w	r3, r3, #4
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d009      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d02b      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d127      	bne.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004e82:	4b34      	ldr	r3, [pc, #208]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e88:	0c1b      	lsrs	r3, r3, #16
 8004e8a:	f003 0303 	and.w	r3, r3, #3
 8004e8e:	3301      	adds	r3, #1
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	699a      	ldr	r2, [r3, #24]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	019b      	lsls	r3, r3, #6
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	085b      	lsrs	r3, r3, #1
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	041b      	lsls	r3, r3, #16
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eae:	061b      	lsls	r3, r3, #24
 8004eb0:	4928      	ldr	r1, [pc, #160]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004eb8:	4b26      	ldr	r3, [pc, #152]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004eba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ebe:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	021b      	lsls	r3, r3, #8
 8004eca:	4922      	ldr	r1, [pc, #136]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d01d      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ee2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ee6:	d118      	bne.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ee8:	4b1a      	ldr	r3, [pc, #104]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eee:	0e1b      	lsrs	r3, r3, #24
 8004ef0:	f003 030f 	and.w	r3, r3, #15
 8004ef4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	699a      	ldr	r2, [r3, #24]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	019b      	lsls	r3, r3, #6
 8004f00:	431a      	orrs	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	085b      	lsrs	r3, r3, #1
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	041b      	lsls	r3, r3, #16
 8004f0c:	431a      	orrs	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	061b      	lsls	r3, r3, #24
 8004f12:	4910      	ldr	r1, [pc, #64]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f20:	f7fe fd24 	bl	800396c <HAL_GetTick>
 8004f24:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f26:	e008      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f28:	f7fe fd20 	bl	800396c <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e007      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f3a:	4b06      	ldr	r3, [pc, #24]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f46:	d1ef      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3730      	adds	r7, #48	@ 0x30
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	40023800 	.word	0x40023800
 8004f58:	42470070 	.word	0x42470070

08004f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f60:	b0ae      	sub	sp, #184	@ 0xb8
 8004f62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004f64:	2300      	movs	r3, #0
 8004f66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004f70:	2300      	movs	r3, #0
 8004f72:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f82:	4bcb      	ldr	r3, [pc, #812]	@ (80052b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f003 030c 	and.w	r3, r3, #12
 8004f8a:	2b0c      	cmp	r3, #12
 8004f8c:	f200 8206 	bhi.w	800539c <HAL_RCC_GetSysClockFreq+0x440>
 8004f90:	a201      	add	r2, pc, #4	@ (adr r2, 8004f98 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f96:	bf00      	nop
 8004f98:	08004fcd 	.word	0x08004fcd
 8004f9c:	0800539d 	.word	0x0800539d
 8004fa0:	0800539d 	.word	0x0800539d
 8004fa4:	0800539d 	.word	0x0800539d
 8004fa8:	08004fd5 	.word	0x08004fd5
 8004fac:	0800539d 	.word	0x0800539d
 8004fb0:	0800539d 	.word	0x0800539d
 8004fb4:	0800539d 	.word	0x0800539d
 8004fb8:	08004fdd 	.word	0x08004fdd
 8004fbc:	0800539d 	.word	0x0800539d
 8004fc0:	0800539d 	.word	0x0800539d
 8004fc4:	0800539d 	.word	0x0800539d
 8004fc8:	080051cd 	.word	0x080051cd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fcc:	4bb9      	ldr	r3, [pc, #740]	@ (80052b4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004fce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004fd2:	e1e7      	b.n	80053a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fd4:	4bb8      	ldr	r3, [pc, #736]	@ (80052b8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004fd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004fda:	e1e3      	b.n	80053a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fdc:	4bb4      	ldr	r3, [pc, #720]	@ (80052b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fe4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fe8:	4bb1      	ldr	r3, [pc, #708]	@ (80052b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d071      	beq.n	80050d8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ff4:	4bae      	ldr	r3, [pc, #696]	@ (80052b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	099b      	lsrs	r3, r3, #6
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005000:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005004:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800500c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005010:	2300      	movs	r3, #0
 8005012:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005016:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800501a:	4622      	mov	r2, r4
 800501c:	462b      	mov	r3, r5
 800501e:	f04f 0000 	mov.w	r0, #0
 8005022:	f04f 0100 	mov.w	r1, #0
 8005026:	0159      	lsls	r1, r3, #5
 8005028:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800502c:	0150      	lsls	r0, r2, #5
 800502e:	4602      	mov	r2, r0
 8005030:	460b      	mov	r3, r1
 8005032:	4621      	mov	r1, r4
 8005034:	1a51      	subs	r1, r2, r1
 8005036:	6439      	str	r1, [r7, #64]	@ 0x40
 8005038:	4629      	mov	r1, r5
 800503a:	eb63 0301 	sbc.w	r3, r3, r1
 800503e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005040:	f04f 0200 	mov.w	r2, #0
 8005044:	f04f 0300 	mov.w	r3, #0
 8005048:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800504c:	4649      	mov	r1, r9
 800504e:	018b      	lsls	r3, r1, #6
 8005050:	4641      	mov	r1, r8
 8005052:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005056:	4641      	mov	r1, r8
 8005058:	018a      	lsls	r2, r1, #6
 800505a:	4641      	mov	r1, r8
 800505c:	1a51      	subs	r1, r2, r1
 800505e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005060:	4649      	mov	r1, r9
 8005062:	eb63 0301 	sbc.w	r3, r3, r1
 8005066:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005068:	f04f 0200 	mov.w	r2, #0
 800506c:	f04f 0300 	mov.w	r3, #0
 8005070:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005074:	4649      	mov	r1, r9
 8005076:	00cb      	lsls	r3, r1, #3
 8005078:	4641      	mov	r1, r8
 800507a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800507e:	4641      	mov	r1, r8
 8005080:	00ca      	lsls	r2, r1, #3
 8005082:	4610      	mov	r0, r2
 8005084:	4619      	mov	r1, r3
 8005086:	4603      	mov	r3, r0
 8005088:	4622      	mov	r2, r4
 800508a:	189b      	adds	r3, r3, r2
 800508c:	633b      	str	r3, [r7, #48]	@ 0x30
 800508e:	462b      	mov	r3, r5
 8005090:	460a      	mov	r2, r1
 8005092:	eb42 0303 	adc.w	r3, r2, r3
 8005096:	637b      	str	r3, [r7, #52]	@ 0x34
 8005098:	f04f 0200 	mov.w	r2, #0
 800509c:	f04f 0300 	mov.w	r3, #0
 80050a0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80050a4:	4629      	mov	r1, r5
 80050a6:	024b      	lsls	r3, r1, #9
 80050a8:	4621      	mov	r1, r4
 80050aa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80050ae:	4621      	mov	r1, r4
 80050b0:	024a      	lsls	r2, r1, #9
 80050b2:	4610      	mov	r0, r2
 80050b4:	4619      	mov	r1, r3
 80050b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80050ba:	2200      	movs	r2, #0
 80050bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80050c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80050c4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80050c8:	f7fb fdde 	bl	8000c88 <__aeabi_uldivmod>
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	4613      	mov	r3, r2
 80050d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050d6:	e067      	b.n	80051a8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050d8:	4b75      	ldr	r3, [pc, #468]	@ (80052b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	099b      	lsrs	r3, r3, #6
 80050de:	2200      	movs	r2, #0
 80050e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80050e4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80050e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80050ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80050f2:	2300      	movs	r3, #0
 80050f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80050f6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80050fa:	4622      	mov	r2, r4
 80050fc:	462b      	mov	r3, r5
 80050fe:	f04f 0000 	mov.w	r0, #0
 8005102:	f04f 0100 	mov.w	r1, #0
 8005106:	0159      	lsls	r1, r3, #5
 8005108:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800510c:	0150      	lsls	r0, r2, #5
 800510e:	4602      	mov	r2, r0
 8005110:	460b      	mov	r3, r1
 8005112:	4621      	mov	r1, r4
 8005114:	1a51      	subs	r1, r2, r1
 8005116:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005118:	4629      	mov	r1, r5
 800511a:	eb63 0301 	sbc.w	r3, r3, r1
 800511e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005120:	f04f 0200 	mov.w	r2, #0
 8005124:	f04f 0300 	mov.w	r3, #0
 8005128:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800512c:	4649      	mov	r1, r9
 800512e:	018b      	lsls	r3, r1, #6
 8005130:	4641      	mov	r1, r8
 8005132:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005136:	4641      	mov	r1, r8
 8005138:	018a      	lsls	r2, r1, #6
 800513a:	4641      	mov	r1, r8
 800513c:	ebb2 0a01 	subs.w	sl, r2, r1
 8005140:	4649      	mov	r1, r9
 8005142:	eb63 0b01 	sbc.w	fp, r3, r1
 8005146:	f04f 0200 	mov.w	r2, #0
 800514a:	f04f 0300 	mov.w	r3, #0
 800514e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005152:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005156:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800515a:	4692      	mov	sl, r2
 800515c:	469b      	mov	fp, r3
 800515e:	4623      	mov	r3, r4
 8005160:	eb1a 0303 	adds.w	r3, sl, r3
 8005164:	623b      	str	r3, [r7, #32]
 8005166:	462b      	mov	r3, r5
 8005168:	eb4b 0303 	adc.w	r3, fp, r3
 800516c:	627b      	str	r3, [r7, #36]	@ 0x24
 800516e:	f04f 0200 	mov.w	r2, #0
 8005172:	f04f 0300 	mov.w	r3, #0
 8005176:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800517a:	4629      	mov	r1, r5
 800517c:	028b      	lsls	r3, r1, #10
 800517e:	4621      	mov	r1, r4
 8005180:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005184:	4621      	mov	r1, r4
 8005186:	028a      	lsls	r2, r1, #10
 8005188:	4610      	mov	r0, r2
 800518a:	4619      	mov	r1, r3
 800518c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005190:	2200      	movs	r2, #0
 8005192:	673b      	str	r3, [r7, #112]	@ 0x70
 8005194:	677a      	str	r2, [r7, #116]	@ 0x74
 8005196:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800519a:	f7fb fd75 	bl	8000c88 <__aeabi_uldivmod>
 800519e:	4602      	mov	r2, r0
 80051a0:	460b      	mov	r3, r1
 80051a2:	4613      	mov	r3, r2
 80051a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80051a8:	4b41      	ldr	r3, [pc, #260]	@ (80052b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	0c1b      	lsrs	r3, r3, #16
 80051ae:	f003 0303 	and.w	r3, r3, #3
 80051b2:	3301      	adds	r3, #1
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80051ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80051be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80051c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80051ca:	e0eb      	b.n	80053a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051cc:	4b38      	ldr	r3, [pc, #224]	@ (80052b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051d8:	4b35      	ldr	r3, [pc, #212]	@ (80052b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d06b      	beq.n	80052bc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051e4:	4b32      	ldr	r3, [pc, #200]	@ (80052b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	099b      	lsrs	r3, r3, #6
 80051ea:	2200      	movs	r2, #0
 80051ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80051f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80051f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051f6:	663b      	str	r3, [r7, #96]	@ 0x60
 80051f8:	2300      	movs	r3, #0
 80051fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80051fc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005200:	4622      	mov	r2, r4
 8005202:	462b      	mov	r3, r5
 8005204:	f04f 0000 	mov.w	r0, #0
 8005208:	f04f 0100 	mov.w	r1, #0
 800520c:	0159      	lsls	r1, r3, #5
 800520e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005212:	0150      	lsls	r0, r2, #5
 8005214:	4602      	mov	r2, r0
 8005216:	460b      	mov	r3, r1
 8005218:	4621      	mov	r1, r4
 800521a:	1a51      	subs	r1, r2, r1
 800521c:	61b9      	str	r1, [r7, #24]
 800521e:	4629      	mov	r1, r5
 8005220:	eb63 0301 	sbc.w	r3, r3, r1
 8005224:	61fb      	str	r3, [r7, #28]
 8005226:	f04f 0200 	mov.w	r2, #0
 800522a:	f04f 0300 	mov.w	r3, #0
 800522e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005232:	4659      	mov	r1, fp
 8005234:	018b      	lsls	r3, r1, #6
 8005236:	4651      	mov	r1, sl
 8005238:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800523c:	4651      	mov	r1, sl
 800523e:	018a      	lsls	r2, r1, #6
 8005240:	4651      	mov	r1, sl
 8005242:	ebb2 0801 	subs.w	r8, r2, r1
 8005246:	4659      	mov	r1, fp
 8005248:	eb63 0901 	sbc.w	r9, r3, r1
 800524c:	f04f 0200 	mov.w	r2, #0
 8005250:	f04f 0300 	mov.w	r3, #0
 8005254:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005258:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800525c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005260:	4690      	mov	r8, r2
 8005262:	4699      	mov	r9, r3
 8005264:	4623      	mov	r3, r4
 8005266:	eb18 0303 	adds.w	r3, r8, r3
 800526a:	613b      	str	r3, [r7, #16]
 800526c:	462b      	mov	r3, r5
 800526e:	eb49 0303 	adc.w	r3, r9, r3
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	f04f 0200 	mov.w	r2, #0
 8005278:	f04f 0300 	mov.w	r3, #0
 800527c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005280:	4629      	mov	r1, r5
 8005282:	024b      	lsls	r3, r1, #9
 8005284:	4621      	mov	r1, r4
 8005286:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800528a:	4621      	mov	r1, r4
 800528c:	024a      	lsls	r2, r1, #9
 800528e:	4610      	mov	r0, r2
 8005290:	4619      	mov	r1, r3
 8005292:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005296:	2200      	movs	r2, #0
 8005298:	65bb      	str	r3, [r7, #88]	@ 0x58
 800529a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800529c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80052a0:	f7fb fcf2 	bl	8000c88 <__aeabi_uldivmod>
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	4613      	mov	r3, r2
 80052aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052ae:	e065      	b.n	800537c <HAL_RCC_GetSysClockFreq+0x420>
 80052b0:	40023800 	.word	0x40023800
 80052b4:	00f42400 	.word	0x00f42400
 80052b8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052bc:	4b3d      	ldr	r3, [pc, #244]	@ (80053b4 <HAL_RCC_GetSysClockFreq+0x458>)
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	099b      	lsrs	r3, r3, #6
 80052c2:	2200      	movs	r2, #0
 80052c4:	4618      	mov	r0, r3
 80052c6:	4611      	mov	r1, r2
 80052c8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80052ce:	2300      	movs	r3, #0
 80052d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80052d2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80052d6:	4642      	mov	r2, r8
 80052d8:	464b      	mov	r3, r9
 80052da:	f04f 0000 	mov.w	r0, #0
 80052de:	f04f 0100 	mov.w	r1, #0
 80052e2:	0159      	lsls	r1, r3, #5
 80052e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052e8:	0150      	lsls	r0, r2, #5
 80052ea:	4602      	mov	r2, r0
 80052ec:	460b      	mov	r3, r1
 80052ee:	4641      	mov	r1, r8
 80052f0:	1a51      	subs	r1, r2, r1
 80052f2:	60b9      	str	r1, [r7, #8]
 80052f4:	4649      	mov	r1, r9
 80052f6:	eb63 0301 	sbc.w	r3, r3, r1
 80052fa:	60fb      	str	r3, [r7, #12]
 80052fc:	f04f 0200 	mov.w	r2, #0
 8005300:	f04f 0300 	mov.w	r3, #0
 8005304:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005308:	4659      	mov	r1, fp
 800530a:	018b      	lsls	r3, r1, #6
 800530c:	4651      	mov	r1, sl
 800530e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005312:	4651      	mov	r1, sl
 8005314:	018a      	lsls	r2, r1, #6
 8005316:	4651      	mov	r1, sl
 8005318:	1a54      	subs	r4, r2, r1
 800531a:	4659      	mov	r1, fp
 800531c:	eb63 0501 	sbc.w	r5, r3, r1
 8005320:	f04f 0200 	mov.w	r2, #0
 8005324:	f04f 0300 	mov.w	r3, #0
 8005328:	00eb      	lsls	r3, r5, #3
 800532a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800532e:	00e2      	lsls	r2, r4, #3
 8005330:	4614      	mov	r4, r2
 8005332:	461d      	mov	r5, r3
 8005334:	4643      	mov	r3, r8
 8005336:	18e3      	adds	r3, r4, r3
 8005338:	603b      	str	r3, [r7, #0]
 800533a:	464b      	mov	r3, r9
 800533c:	eb45 0303 	adc.w	r3, r5, r3
 8005340:	607b      	str	r3, [r7, #4]
 8005342:	f04f 0200 	mov.w	r2, #0
 8005346:	f04f 0300 	mov.w	r3, #0
 800534a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800534e:	4629      	mov	r1, r5
 8005350:	028b      	lsls	r3, r1, #10
 8005352:	4621      	mov	r1, r4
 8005354:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005358:	4621      	mov	r1, r4
 800535a:	028a      	lsls	r2, r1, #10
 800535c:	4610      	mov	r0, r2
 800535e:	4619      	mov	r1, r3
 8005360:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005364:	2200      	movs	r2, #0
 8005366:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005368:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800536a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800536e:	f7fb fc8b 	bl	8000c88 <__aeabi_uldivmod>
 8005372:	4602      	mov	r2, r0
 8005374:	460b      	mov	r3, r1
 8005376:	4613      	mov	r3, r2
 8005378:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800537c:	4b0d      	ldr	r3, [pc, #52]	@ (80053b4 <HAL_RCC_GetSysClockFreq+0x458>)
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	0f1b      	lsrs	r3, r3, #28
 8005382:	f003 0307 	and.w	r3, r3, #7
 8005386:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800538a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800538e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005392:	fbb2 f3f3 	udiv	r3, r2, r3
 8005396:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800539a:	e003      	b.n	80053a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800539c:	4b06      	ldr	r3, [pc, #24]	@ (80053b8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800539e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80053a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	37b8      	adds	r7, #184	@ 0xb8
 80053ac:	46bd      	mov	sp, r7
 80053ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053b2:	bf00      	nop
 80053b4:	40023800 	.word	0x40023800
 80053b8:	00f42400 	.word	0x00f42400

080053bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e28d      	b.n	80058ea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f000 8083 	beq.w	80054e2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80053dc:	4b94      	ldr	r3, [pc, #592]	@ (8005630 <HAL_RCC_OscConfig+0x274>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f003 030c 	and.w	r3, r3, #12
 80053e4:	2b04      	cmp	r3, #4
 80053e6:	d019      	beq.n	800541c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80053e8:	4b91      	ldr	r3, [pc, #580]	@ (8005630 <HAL_RCC_OscConfig+0x274>)
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f003 030c 	and.w	r3, r3, #12
        || \
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	d106      	bne.n	8005402 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80053f4:	4b8e      	ldr	r3, [pc, #568]	@ (8005630 <HAL_RCC_OscConfig+0x274>)
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005400:	d00c      	beq.n	800541c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005402:	4b8b      	ldr	r3, [pc, #556]	@ (8005630 <HAL_RCC_OscConfig+0x274>)
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800540a:	2b0c      	cmp	r3, #12
 800540c:	d112      	bne.n	8005434 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800540e:	4b88      	ldr	r3, [pc, #544]	@ (8005630 <HAL_RCC_OscConfig+0x274>)
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005416:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800541a:	d10b      	bne.n	8005434 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800541c:	4b84      	ldr	r3, [pc, #528]	@ (8005630 <HAL_RCC_OscConfig+0x274>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d05b      	beq.n	80054e0 <HAL_RCC_OscConfig+0x124>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d157      	bne.n	80054e0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e25a      	b.n	80058ea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800543c:	d106      	bne.n	800544c <HAL_RCC_OscConfig+0x90>
 800543e:	4b7c      	ldr	r3, [pc, #496]	@ (8005630 <HAL_RCC_OscConfig+0x274>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a7b      	ldr	r2, [pc, #492]	@ (8005630 <HAL_RCC_OscConfig+0x274>)
 8005444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005448:	6013      	str	r3, [r2, #0]
 800544a:	e01d      	b.n	8005488 <HAL_RCC_OscConfig+0xcc>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005454:	d10c      	bne.n	8005470 <HAL_RCC_OscConfig+0xb4>
 8005456:	4b76      	ldr	r3, [pc, #472]	@ (8005630 <HAL_RCC_OscConfig+0x274>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a75      	ldr	r2, [pc, #468]	@ (8005630 <HAL_RCC_OscConfig+0x274>)
 800545c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005460:	6013      	str	r3, [r2, #0]
 8005462:	4b73      	ldr	r3, [pc, #460]	@ (8005630 <HAL_RCC_OscConfig+0x274>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a72      	ldr	r2, [pc, #456]	@ (8005630 <HAL_RCC_OscConfig+0x274>)
 8005468:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800546c:	6013      	str	r3, [r2, #0]
 800546e:	e00b      	b.n	8005488 <HAL_RCC_OscConfig+0xcc>
 8005470:	4b6f      	ldr	r3, [pc, #444]	@ (8005630 <HAL_RCC_OscConfig+0x274>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a6e      	ldr	r2, [pc, #440]	@ (8005630 <HAL_RCC_OscConfig+0x274>)
 8005476:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800547a:	6013      	str	r3, [r2, #0]
 800547c:	4b6c      	ldr	r3, [pc, #432]	@ (8005630 <HAL_RCC_OscConfig+0x274>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a6b      	ldr	r2, [pc, #428]	@ (8005630 <HAL_RCC_OscConfig+0x274>)
 8005482:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d013      	beq.n	80054b8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005490:	f7fe fa6c 	bl	800396c <HAL_GetTick>
 8005494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005496:	e008      	b.n	80054aa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005498:	f7fe fa68 	bl	800396c <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b64      	cmp	r3, #100	@ 0x64
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e21f      	b.n	80058ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054aa:	4b61      	ldr	r3, [pc, #388]	@ (8005630 <HAL_RCC_OscConfig+0x274>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d0f0      	beq.n	8005498 <HAL_RCC_OscConfig+0xdc>
 80054b6:	e014      	b.n	80054e2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b8:	f7fe fa58 	bl	800396c <HAL_GetTick>
 80054bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054be:	e008      	b.n	80054d2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054c0:	f7fe fa54 	bl	800396c <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	2b64      	cmp	r3, #100	@ 0x64
 80054cc:	d901      	bls.n	80054d2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e20b      	b.n	80058ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054d2:	4b57      	ldr	r3, [pc, #348]	@ (8005630 <HAL_RCC_OscConfig+0x274>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1f0      	bne.n	80054c0 <HAL_RCC_OscConfig+0x104>
 80054de:	e000      	b.n	80054e2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d06f      	beq.n	80055ce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80054ee:	4b50      	ldr	r3, [pc, #320]	@ (8005630 <HAL_RCC_OscConfig+0x274>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f003 030c 	and.w	r3, r3, #12
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d017      	beq.n	800552a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80054fa:	4b4d      	ldr	r3, [pc, #308]	@ (8005630 <HAL_RCC_OscConfig+0x274>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f003 030c 	and.w	r3, r3, #12
        || \
 8005502:	2b08      	cmp	r3, #8
 8005504:	d105      	bne.n	8005512 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005506:	4b4a      	ldr	r3, [pc, #296]	@ (8005630 <HAL_RCC_OscConfig+0x274>)
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00b      	beq.n	800552a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005512:	4b47      	ldr	r3, [pc, #284]	@ (8005630 <HAL_RCC_OscConfig+0x274>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800551a:	2b0c      	cmp	r3, #12
 800551c:	d11c      	bne.n	8005558 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800551e:	4b44      	ldr	r3, [pc, #272]	@ (8005630 <HAL_RCC_OscConfig+0x274>)
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d116      	bne.n	8005558 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800552a:	4b41      	ldr	r3, [pc, #260]	@ (8005630 <HAL_RCC_OscConfig+0x274>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d005      	beq.n	8005542 <HAL_RCC_OscConfig+0x186>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d001      	beq.n	8005542 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e1d3      	b.n	80058ea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005542:	4b3b      	ldr	r3, [pc, #236]	@ (8005630 <HAL_RCC_OscConfig+0x274>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	00db      	lsls	r3, r3, #3
 8005550:	4937      	ldr	r1, [pc, #220]	@ (8005630 <HAL_RCC_OscConfig+0x274>)
 8005552:	4313      	orrs	r3, r2
 8005554:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005556:	e03a      	b.n	80055ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d020      	beq.n	80055a2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005560:	4b34      	ldr	r3, [pc, #208]	@ (8005634 <HAL_RCC_OscConfig+0x278>)
 8005562:	2201      	movs	r2, #1
 8005564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005566:	f7fe fa01 	bl	800396c <HAL_GetTick>
 800556a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800556c:	e008      	b.n	8005580 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800556e:	f7fe f9fd 	bl	800396c <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	2b02      	cmp	r3, #2
 800557a:	d901      	bls.n	8005580 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e1b4      	b.n	80058ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005580:	4b2b      	ldr	r3, [pc, #172]	@ (8005630 <HAL_RCC_OscConfig+0x274>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d0f0      	beq.n	800556e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800558c:	4b28      	ldr	r3, [pc, #160]	@ (8005630 <HAL_RCC_OscConfig+0x274>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	00db      	lsls	r3, r3, #3
 800559a:	4925      	ldr	r1, [pc, #148]	@ (8005630 <HAL_RCC_OscConfig+0x274>)
 800559c:	4313      	orrs	r3, r2
 800559e:	600b      	str	r3, [r1, #0]
 80055a0:	e015      	b.n	80055ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055a2:	4b24      	ldr	r3, [pc, #144]	@ (8005634 <HAL_RCC_OscConfig+0x278>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a8:	f7fe f9e0 	bl	800396c <HAL_GetTick>
 80055ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055ae:	e008      	b.n	80055c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055b0:	f7fe f9dc 	bl	800396c <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e193      	b.n	80058ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005630 <HAL_RCC_OscConfig+0x274>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1f0      	bne.n	80055b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0308 	and.w	r3, r3, #8
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d036      	beq.n	8005648 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d016      	beq.n	8005610 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055e2:	4b15      	ldr	r3, [pc, #84]	@ (8005638 <HAL_RCC_OscConfig+0x27c>)
 80055e4:	2201      	movs	r2, #1
 80055e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e8:	f7fe f9c0 	bl	800396c <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055f0:	f7fe f9bc 	bl	800396c <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e173      	b.n	80058ea <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005602:	4b0b      	ldr	r3, [pc, #44]	@ (8005630 <HAL_RCC_OscConfig+0x274>)
 8005604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d0f0      	beq.n	80055f0 <HAL_RCC_OscConfig+0x234>
 800560e:	e01b      	b.n	8005648 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005610:	4b09      	ldr	r3, [pc, #36]	@ (8005638 <HAL_RCC_OscConfig+0x27c>)
 8005612:	2200      	movs	r2, #0
 8005614:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005616:	f7fe f9a9 	bl	800396c <HAL_GetTick>
 800561a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800561c:	e00e      	b.n	800563c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800561e:	f7fe f9a5 	bl	800396c <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	2b02      	cmp	r3, #2
 800562a:	d907      	bls.n	800563c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e15c      	b.n	80058ea <HAL_RCC_OscConfig+0x52e>
 8005630:	40023800 	.word	0x40023800
 8005634:	42470000 	.word	0x42470000
 8005638:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800563c:	4b8a      	ldr	r3, [pc, #552]	@ (8005868 <HAL_RCC_OscConfig+0x4ac>)
 800563e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1ea      	bne.n	800561e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 8097 	beq.w	8005784 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005656:	2300      	movs	r3, #0
 8005658:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800565a:	4b83      	ldr	r3, [pc, #524]	@ (8005868 <HAL_RCC_OscConfig+0x4ac>)
 800565c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10f      	bne.n	8005686 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005666:	2300      	movs	r3, #0
 8005668:	60bb      	str	r3, [r7, #8]
 800566a:	4b7f      	ldr	r3, [pc, #508]	@ (8005868 <HAL_RCC_OscConfig+0x4ac>)
 800566c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800566e:	4a7e      	ldr	r2, [pc, #504]	@ (8005868 <HAL_RCC_OscConfig+0x4ac>)
 8005670:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005674:	6413      	str	r3, [r2, #64]	@ 0x40
 8005676:	4b7c      	ldr	r3, [pc, #496]	@ (8005868 <HAL_RCC_OscConfig+0x4ac>)
 8005678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800567a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800567e:	60bb      	str	r3, [r7, #8]
 8005680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005682:	2301      	movs	r3, #1
 8005684:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005686:	4b79      	ldr	r3, [pc, #484]	@ (800586c <HAL_RCC_OscConfig+0x4b0>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800568e:	2b00      	cmp	r3, #0
 8005690:	d118      	bne.n	80056c4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005692:	4b76      	ldr	r3, [pc, #472]	@ (800586c <HAL_RCC_OscConfig+0x4b0>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a75      	ldr	r2, [pc, #468]	@ (800586c <HAL_RCC_OscConfig+0x4b0>)
 8005698:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800569c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800569e:	f7fe f965 	bl	800396c <HAL_GetTick>
 80056a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056a4:	e008      	b.n	80056b8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056a6:	f7fe f961 	bl	800396c <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d901      	bls.n	80056b8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e118      	b.n	80058ea <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b8:	4b6c      	ldr	r3, [pc, #432]	@ (800586c <HAL_RCC_OscConfig+0x4b0>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d0f0      	beq.n	80056a6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d106      	bne.n	80056da <HAL_RCC_OscConfig+0x31e>
 80056cc:	4b66      	ldr	r3, [pc, #408]	@ (8005868 <HAL_RCC_OscConfig+0x4ac>)
 80056ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056d0:	4a65      	ldr	r2, [pc, #404]	@ (8005868 <HAL_RCC_OscConfig+0x4ac>)
 80056d2:	f043 0301 	orr.w	r3, r3, #1
 80056d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80056d8:	e01c      	b.n	8005714 <HAL_RCC_OscConfig+0x358>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	2b05      	cmp	r3, #5
 80056e0:	d10c      	bne.n	80056fc <HAL_RCC_OscConfig+0x340>
 80056e2:	4b61      	ldr	r3, [pc, #388]	@ (8005868 <HAL_RCC_OscConfig+0x4ac>)
 80056e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056e6:	4a60      	ldr	r2, [pc, #384]	@ (8005868 <HAL_RCC_OscConfig+0x4ac>)
 80056e8:	f043 0304 	orr.w	r3, r3, #4
 80056ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80056ee:	4b5e      	ldr	r3, [pc, #376]	@ (8005868 <HAL_RCC_OscConfig+0x4ac>)
 80056f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056f2:	4a5d      	ldr	r2, [pc, #372]	@ (8005868 <HAL_RCC_OscConfig+0x4ac>)
 80056f4:	f043 0301 	orr.w	r3, r3, #1
 80056f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80056fa:	e00b      	b.n	8005714 <HAL_RCC_OscConfig+0x358>
 80056fc:	4b5a      	ldr	r3, [pc, #360]	@ (8005868 <HAL_RCC_OscConfig+0x4ac>)
 80056fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005700:	4a59      	ldr	r2, [pc, #356]	@ (8005868 <HAL_RCC_OscConfig+0x4ac>)
 8005702:	f023 0301 	bic.w	r3, r3, #1
 8005706:	6713      	str	r3, [r2, #112]	@ 0x70
 8005708:	4b57      	ldr	r3, [pc, #348]	@ (8005868 <HAL_RCC_OscConfig+0x4ac>)
 800570a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800570c:	4a56      	ldr	r2, [pc, #344]	@ (8005868 <HAL_RCC_OscConfig+0x4ac>)
 800570e:	f023 0304 	bic.w	r3, r3, #4
 8005712:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d015      	beq.n	8005748 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800571c:	f7fe f926 	bl	800396c <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005722:	e00a      	b.n	800573a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005724:	f7fe f922 	bl	800396c <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005732:	4293      	cmp	r3, r2
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e0d7      	b.n	80058ea <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800573a:	4b4b      	ldr	r3, [pc, #300]	@ (8005868 <HAL_RCC_OscConfig+0x4ac>)
 800573c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0ee      	beq.n	8005724 <HAL_RCC_OscConfig+0x368>
 8005746:	e014      	b.n	8005772 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005748:	f7fe f910 	bl	800396c <HAL_GetTick>
 800574c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800574e:	e00a      	b.n	8005766 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005750:	f7fe f90c 	bl	800396c <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800575e:	4293      	cmp	r3, r2
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e0c1      	b.n	80058ea <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005766:	4b40      	ldr	r3, [pc, #256]	@ (8005868 <HAL_RCC_OscConfig+0x4ac>)
 8005768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1ee      	bne.n	8005750 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005772:	7dfb      	ldrb	r3, [r7, #23]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d105      	bne.n	8005784 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005778:	4b3b      	ldr	r3, [pc, #236]	@ (8005868 <HAL_RCC_OscConfig+0x4ac>)
 800577a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800577c:	4a3a      	ldr	r2, [pc, #232]	@ (8005868 <HAL_RCC_OscConfig+0x4ac>)
 800577e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005782:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 80ad 	beq.w	80058e8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800578e:	4b36      	ldr	r3, [pc, #216]	@ (8005868 <HAL_RCC_OscConfig+0x4ac>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f003 030c 	and.w	r3, r3, #12
 8005796:	2b08      	cmp	r3, #8
 8005798:	d060      	beq.n	800585c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d145      	bne.n	800582e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057a2:	4b33      	ldr	r3, [pc, #204]	@ (8005870 <HAL_RCC_OscConfig+0x4b4>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a8:	f7fe f8e0 	bl	800396c <HAL_GetTick>
 80057ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ae:	e008      	b.n	80057c2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057b0:	f7fe f8dc 	bl	800396c <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e093      	b.n	80058ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057c2:	4b29      	ldr	r3, [pc, #164]	@ (8005868 <HAL_RCC_OscConfig+0x4ac>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1f0      	bne.n	80057b0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	69da      	ldr	r2, [r3, #28]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	431a      	orrs	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057dc:	019b      	lsls	r3, r3, #6
 80057de:	431a      	orrs	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e4:	085b      	lsrs	r3, r3, #1
 80057e6:	3b01      	subs	r3, #1
 80057e8:	041b      	lsls	r3, r3, #16
 80057ea:	431a      	orrs	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f0:	061b      	lsls	r3, r3, #24
 80057f2:	431a      	orrs	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f8:	071b      	lsls	r3, r3, #28
 80057fa:	491b      	ldr	r1, [pc, #108]	@ (8005868 <HAL_RCC_OscConfig+0x4ac>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005800:	4b1b      	ldr	r3, [pc, #108]	@ (8005870 <HAL_RCC_OscConfig+0x4b4>)
 8005802:	2201      	movs	r2, #1
 8005804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005806:	f7fe f8b1 	bl	800396c <HAL_GetTick>
 800580a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800580c:	e008      	b.n	8005820 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800580e:	f7fe f8ad 	bl	800396c <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	2b02      	cmp	r3, #2
 800581a:	d901      	bls.n	8005820 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e064      	b.n	80058ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005820:	4b11      	ldr	r3, [pc, #68]	@ (8005868 <HAL_RCC_OscConfig+0x4ac>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d0f0      	beq.n	800580e <HAL_RCC_OscConfig+0x452>
 800582c:	e05c      	b.n	80058e8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800582e:	4b10      	ldr	r3, [pc, #64]	@ (8005870 <HAL_RCC_OscConfig+0x4b4>)
 8005830:	2200      	movs	r2, #0
 8005832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005834:	f7fe f89a 	bl	800396c <HAL_GetTick>
 8005838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800583a:	e008      	b.n	800584e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800583c:	f7fe f896 	bl	800396c <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b02      	cmp	r3, #2
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e04d      	b.n	80058ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800584e:	4b06      	ldr	r3, [pc, #24]	@ (8005868 <HAL_RCC_OscConfig+0x4ac>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1f0      	bne.n	800583c <HAL_RCC_OscConfig+0x480>
 800585a:	e045      	b.n	80058e8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d107      	bne.n	8005874 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e040      	b.n	80058ea <HAL_RCC_OscConfig+0x52e>
 8005868:	40023800 	.word	0x40023800
 800586c:	40007000 	.word	0x40007000
 8005870:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005874:	4b1f      	ldr	r3, [pc, #124]	@ (80058f4 <HAL_RCC_OscConfig+0x538>)
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d030      	beq.n	80058e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800588c:	429a      	cmp	r2, r3
 800588e:	d129      	bne.n	80058e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800589a:	429a      	cmp	r2, r3
 800589c:	d122      	bne.n	80058e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80058a4:	4013      	ands	r3, r2
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80058aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d119      	bne.n	80058e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ba:	085b      	lsrs	r3, r3, #1
 80058bc:	3b01      	subs	r3, #1
 80058be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d10f      	bne.n	80058e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d107      	bne.n	80058e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058de:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d001      	beq.n	80058e8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e000      	b.n	80058ea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3718      	adds	r7, #24
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	40023800 	.word	0x40023800

080058f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d101      	bne.n	800590a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e07b      	b.n	8005a02 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800590e:	2b00      	cmp	r3, #0
 8005910:	d108      	bne.n	8005924 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800591a:	d009      	beq.n	8005930 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	61da      	str	r2, [r3, #28]
 8005922:	e005      	b.n	8005930 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d106      	bne.n	8005950 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f7fd fce8 	bl	8003320 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005966:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005978:	431a      	orrs	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005982:	431a      	orrs	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	431a      	orrs	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	431a      	orrs	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059a0:	431a      	orrs	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059aa:	431a      	orrs	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059b4:	ea42 0103 	orr.w	r1, r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059bc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	430a      	orrs	r2, r1
 80059c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	0c1b      	lsrs	r3, r3, #16
 80059ce:	f003 0104 	and.w	r1, r3, #4
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d6:	f003 0210 	and.w	r2, r3, #16
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	430a      	orrs	r2, r1
 80059e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	69da      	ldr	r2, [r3, #28]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3708      	adds	r7, #8
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b088      	sub	sp, #32
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	60f8      	str	r0, [r7, #12]
 8005a12:	60b9      	str	r1, [r7, #8]
 8005a14:	603b      	str	r3, [r7, #0]
 8005a16:	4613      	mov	r3, r2
 8005a18:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a1a:	f7fd ffa7 	bl	800396c <HAL_GetTick>
 8005a1e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005a20:	88fb      	ldrh	r3, [r7, #6]
 8005a22:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d001      	beq.n	8005a34 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005a30:	2302      	movs	r3, #2
 8005a32:	e12a      	b.n	8005c8a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d002      	beq.n	8005a40 <HAL_SPI_Transmit+0x36>
 8005a3a:	88fb      	ldrh	r3, [r7, #6]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d101      	bne.n	8005a44 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e122      	b.n	8005c8a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d101      	bne.n	8005a52 <HAL_SPI_Transmit+0x48>
 8005a4e:	2302      	movs	r3, #2
 8005a50:	e11b      	b.n	8005c8a <HAL_SPI_Transmit+0x280>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2203      	movs	r2, #3
 8005a5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	88fa      	ldrh	r2, [r7, #6]
 8005a72:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	88fa      	ldrh	r2, [r7, #6]
 8005a78:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005aa0:	d10f      	bne.n	8005ac2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ab0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ac0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005acc:	2b40      	cmp	r3, #64	@ 0x40
 8005ace:	d007      	beq.n	8005ae0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ade:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ae8:	d152      	bne.n	8005b90 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d002      	beq.n	8005af8 <HAL_SPI_Transmit+0xee>
 8005af2:	8b7b      	ldrh	r3, [r7, #26]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d145      	bne.n	8005b84 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005afc:	881a      	ldrh	r2, [r3, #0]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b08:	1c9a      	adds	r2, r3, #2
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	3b01      	subs	r3, #1
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b1c:	e032      	b.n	8005b84 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d112      	bne.n	8005b52 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b30:	881a      	ldrh	r2, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b3c:	1c9a      	adds	r2, r3, #2
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005b50:	e018      	b.n	8005b84 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b52:	f7fd ff0b 	bl	800396c <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	683a      	ldr	r2, [r7, #0]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d803      	bhi.n	8005b6a <HAL_SPI_Transmit+0x160>
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b68:	d102      	bne.n	8005b70 <HAL_SPI_Transmit+0x166>
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d109      	bne.n	8005b84 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e082      	b.n	8005c8a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1c7      	bne.n	8005b1e <HAL_SPI_Transmit+0x114>
 8005b8e:	e053      	b.n	8005c38 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d002      	beq.n	8005b9e <HAL_SPI_Transmit+0x194>
 8005b98:	8b7b      	ldrh	r3, [r7, #26]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d147      	bne.n	8005c2e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	330c      	adds	r3, #12
 8005ba8:	7812      	ldrb	r2, [r2, #0]
 8005baa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb0:	1c5a      	adds	r2, r3, #1
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005bc4:	e033      	b.n	8005c2e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d113      	bne.n	8005bfc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	330c      	adds	r3, #12
 8005bde:	7812      	ldrb	r2, [r2, #0]
 8005be0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005be6:	1c5a      	adds	r2, r3, #1
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005bfa:	e018      	b.n	8005c2e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bfc:	f7fd feb6 	bl	800396c <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	683a      	ldr	r2, [r7, #0]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d803      	bhi.n	8005c14 <HAL_SPI_Transmit+0x20a>
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c12:	d102      	bne.n	8005c1a <HAL_SPI_Transmit+0x210>
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d109      	bne.n	8005c2e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e02d      	b.n	8005c8a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1c6      	bne.n	8005bc6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c38:	69fa      	ldr	r2, [r7, #28]
 8005c3a:	6839      	ldr	r1, [r7, #0]
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f000 fa59 	bl	80060f4 <SPI_EndRxTxTransaction>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d002      	beq.n	8005c4e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10a      	bne.n	8005c6c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c56:	2300      	movs	r3, #0
 8005c58:	617b      	str	r3, [r7, #20]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	617b      	str	r3, [r7, #20]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	617b      	str	r3, [r7, #20]
 8005c6a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d001      	beq.n	8005c88 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e000      	b.n	8005c8a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005c88:	2300      	movs	r3, #0
  }
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3720      	adds	r7, #32
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b08a      	sub	sp, #40	@ 0x28
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	60f8      	str	r0, [r7, #12]
 8005c9a:	60b9      	str	r1, [r7, #8]
 8005c9c:	607a      	str	r2, [r7, #4]
 8005c9e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ca4:	f7fd fe62 	bl	800396c <HAL_GetTick>
 8005ca8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005cb0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005cb8:	887b      	ldrh	r3, [r7, #2]
 8005cba:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005cbc:	7ffb      	ldrb	r3, [r7, #31]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d00c      	beq.n	8005cdc <HAL_SPI_TransmitReceive+0x4a>
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cc8:	d106      	bne.n	8005cd8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d102      	bne.n	8005cd8 <HAL_SPI_TransmitReceive+0x46>
 8005cd2:	7ffb      	ldrb	r3, [r7, #31]
 8005cd4:	2b04      	cmp	r3, #4
 8005cd6:	d001      	beq.n	8005cdc <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005cd8:	2302      	movs	r3, #2
 8005cda:	e17f      	b.n	8005fdc <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d005      	beq.n	8005cee <HAL_SPI_TransmitReceive+0x5c>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d002      	beq.n	8005cee <HAL_SPI_TransmitReceive+0x5c>
 8005ce8:	887b      	ldrh	r3, [r7, #2]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e174      	b.n	8005fdc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d101      	bne.n	8005d00 <HAL_SPI_TransmitReceive+0x6e>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	e16d      	b.n	8005fdc <HAL_SPI_TransmitReceive+0x34a>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	2b04      	cmp	r3, #4
 8005d12:	d003      	beq.n	8005d1c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2205      	movs	r2, #5
 8005d18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	887a      	ldrh	r2, [r7, #2]
 8005d2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	887a      	ldrh	r2, [r7, #2]
 8005d32:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	887a      	ldrh	r2, [r7, #2]
 8005d3e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	887a      	ldrh	r2, [r7, #2]
 8005d44:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d5c:	2b40      	cmp	r3, #64	@ 0x40
 8005d5e:	d007      	beq.n	8005d70 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d78:	d17e      	bne.n	8005e78 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d002      	beq.n	8005d88 <HAL_SPI_TransmitReceive+0xf6>
 8005d82:	8afb      	ldrh	r3, [r7, #22]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d16c      	bne.n	8005e62 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d8c:	881a      	ldrh	r2, [r3, #0]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d98:	1c9a      	adds	r2, r3, #2
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	3b01      	subs	r3, #1
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dac:	e059      	b.n	8005e62 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d11b      	bne.n	8005df4 <HAL_SPI_TransmitReceive+0x162>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d016      	beq.n	8005df4 <HAL_SPI_TransmitReceive+0x162>
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d113      	bne.n	8005df4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dd0:	881a      	ldrh	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ddc:	1c9a      	adds	r2, r3, #2
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	3b01      	subs	r3, #1
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d119      	bne.n	8005e36 <HAL_SPI_TransmitReceive+0x1a4>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d014      	beq.n	8005e36 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68da      	ldr	r2, [r3, #12]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e16:	b292      	uxth	r2, r2
 8005e18:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e1e:	1c9a      	adds	r2, r3, #2
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e32:	2301      	movs	r3, #1
 8005e34:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005e36:	f7fd fd99 	bl	800396c <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	6a3b      	ldr	r3, [r7, #32]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d80d      	bhi.n	8005e62 <HAL_SPI_TransmitReceive+0x1d0>
 8005e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4c:	d009      	beq.n	8005e62 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e0bc      	b.n	8005fdc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1a0      	bne.n	8005dae <HAL_SPI_TransmitReceive+0x11c>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d19b      	bne.n	8005dae <HAL_SPI_TransmitReceive+0x11c>
 8005e76:	e082      	b.n	8005f7e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d002      	beq.n	8005e86 <HAL_SPI_TransmitReceive+0x1f4>
 8005e80:	8afb      	ldrh	r3, [r7, #22]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d171      	bne.n	8005f6a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	330c      	adds	r3, #12
 8005e90:	7812      	ldrb	r2, [r2, #0]
 8005e92:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e98:	1c5a      	adds	r2, r3, #1
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005eac:	e05d      	b.n	8005f6a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f003 0302 	and.w	r3, r3, #2
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d11c      	bne.n	8005ef6 <HAL_SPI_TransmitReceive+0x264>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d017      	beq.n	8005ef6 <HAL_SPI_TransmitReceive+0x264>
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d114      	bne.n	8005ef6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	330c      	adds	r3, #12
 8005ed6:	7812      	ldrb	r2, [r2, #0]
 8005ed8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ede:	1c5a      	adds	r2, r3, #1
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	3b01      	subs	r3, #1
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d119      	bne.n	8005f38 <HAL_SPI_TransmitReceive+0x2a6>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d014      	beq.n	8005f38 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68da      	ldr	r2, [r3, #12]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f18:	b2d2      	uxtb	r2, r2
 8005f1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f20:	1c5a      	adds	r2, r3, #1
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f34:	2301      	movs	r3, #1
 8005f36:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005f38:	f7fd fd18 	bl	800396c <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	6a3b      	ldr	r3, [r7, #32]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d803      	bhi.n	8005f50 <HAL_SPI_TransmitReceive+0x2be>
 8005f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f4e:	d102      	bne.n	8005f56 <HAL_SPI_TransmitReceive+0x2c4>
 8005f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d109      	bne.n	8005f6a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e038      	b.n	8005fdc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d19c      	bne.n	8005eae <HAL_SPI_TransmitReceive+0x21c>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d197      	bne.n	8005eae <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f7e:	6a3a      	ldr	r2, [r7, #32]
 8005f80:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f000 f8b6 	bl	80060f4 <SPI_EndRxTxTransaction>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d008      	beq.n	8005fa0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2220      	movs	r2, #32
 8005f92:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e01d      	b.n	8005fdc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10a      	bne.n	8005fbe <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fa8:	2300      	movs	r3, #0
 8005faa:	613b      	str	r3, [r7, #16]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	613b      	str	r3, [r7, #16]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	613b      	str	r3, [r7, #16]
 8005fbc:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e000      	b.n	8005fdc <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005fda:	2300      	movs	r3, #0
  }
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3728      	adds	r7, #40	@ 0x28
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b088      	sub	sp, #32
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	603b      	str	r3, [r7, #0]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ff4:	f7fd fcba 	bl	800396c <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ffc:	1a9b      	subs	r3, r3, r2
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	4413      	add	r3, r2
 8006002:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006004:	f7fd fcb2 	bl	800396c <HAL_GetTick>
 8006008:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800600a:	4b39      	ldr	r3, [pc, #228]	@ (80060f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	015b      	lsls	r3, r3, #5
 8006010:	0d1b      	lsrs	r3, r3, #20
 8006012:	69fa      	ldr	r2, [r7, #28]
 8006014:	fb02 f303 	mul.w	r3, r2, r3
 8006018:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800601a:	e054      	b.n	80060c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006022:	d050      	beq.n	80060c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006024:	f7fd fca2 	bl	800396c <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	69fa      	ldr	r2, [r7, #28]
 8006030:	429a      	cmp	r2, r3
 8006032:	d902      	bls.n	800603a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d13d      	bne.n	80060b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006048:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006052:	d111      	bne.n	8006078 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800605c:	d004      	beq.n	8006068 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006066:	d107      	bne.n	8006078 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006076:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800607c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006080:	d10f      	bne.n	80060a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80060a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e017      	b.n	80060e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d101      	bne.n	80060c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80060bc:	2300      	movs	r3, #0
 80060be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	3b01      	subs	r3, #1
 80060c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	689a      	ldr	r2, [r3, #8]
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	4013      	ands	r3, r2
 80060d0:	68ba      	ldr	r2, [r7, #8]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	bf0c      	ite	eq
 80060d6:	2301      	moveq	r3, #1
 80060d8:	2300      	movne	r3, #0
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	461a      	mov	r2, r3
 80060de:	79fb      	ldrb	r3, [r7, #7]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d19b      	bne.n	800601c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3720      	adds	r7, #32
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	2000000c 	.word	0x2000000c

080060f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b088      	sub	sp, #32
 80060f8:	af02      	add	r7, sp, #8
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	9300      	str	r3, [sp, #0]
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	2201      	movs	r2, #1
 8006108:	2102      	movs	r1, #2
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f7ff ff6a 	bl	8005fe4 <SPI_WaitFlagStateUntilTimeout>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d007      	beq.n	8006126 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800611a:	f043 0220 	orr.w	r2, r3, #32
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e032      	b.n	800618c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006126:	4b1b      	ldr	r3, [pc, #108]	@ (8006194 <SPI_EndRxTxTransaction+0xa0>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a1b      	ldr	r2, [pc, #108]	@ (8006198 <SPI_EndRxTxTransaction+0xa4>)
 800612c:	fba2 2303 	umull	r2, r3, r2, r3
 8006130:	0d5b      	lsrs	r3, r3, #21
 8006132:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006136:	fb02 f303 	mul.w	r3, r2, r3
 800613a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006144:	d112      	bne.n	800616c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	2200      	movs	r2, #0
 800614e:	2180      	movs	r1, #128	@ 0x80
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f7ff ff47 	bl	8005fe4 <SPI_WaitFlagStateUntilTimeout>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d016      	beq.n	800618a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006160:	f043 0220 	orr.w	r2, r3, #32
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e00f      	b.n	800618c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00a      	beq.n	8006188 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	3b01      	subs	r3, #1
 8006176:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006182:	2b80      	cmp	r3, #128	@ 0x80
 8006184:	d0f2      	beq.n	800616c <SPI_EndRxTxTransaction+0x78>
 8006186:	e000      	b.n	800618a <SPI_EndRxTxTransaction+0x96>
        break;
 8006188:	bf00      	nop
  }

  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3718      	adds	r7, #24
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	2000000c 	.word	0x2000000c
 8006198:	165e9f81 	.word	0x165e9f81

0800619c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e041      	b.n	8006232 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d106      	bne.n	80061c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7fd f94a 	bl	800345c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	3304      	adds	r3, #4
 80061d8:	4619      	mov	r1, r3
 80061da:	4610      	mov	r0, r2
 80061dc:	f000 fa80 	bl	80066e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
	...

0800623c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800624a:	b2db      	uxtb	r3, r3
 800624c:	2b01      	cmp	r3, #1
 800624e:	d001      	beq.n	8006254 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e046      	b.n	80062e2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2202      	movs	r2, #2
 8006258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a23      	ldr	r2, [pc, #140]	@ (80062f0 <HAL_TIM_Base_Start+0xb4>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d022      	beq.n	80062ac <HAL_TIM_Base_Start+0x70>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800626e:	d01d      	beq.n	80062ac <HAL_TIM_Base_Start+0x70>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a1f      	ldr	r2, [pc, #124]	@ (80062f4 <HAL_TIM_Base_Start+0xb8>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d018      	beq.n	80062ac <HAL_TIM_Base_Start+0x70>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a1e      	ldr	r2, [pc, #120]	@ (80062f8 <HAL_TIM_Base_Start+0xbc>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d013      	beq.n	80062ac <HAL_TIM_Base_Start+0x70>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a1c      	ldr	r2, [pc, #112]	@ (80062fc <HAL_TIM_Base_Start+0xc0>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d00e      	beq.n	80062ac <HAL_TIM_Base_Start+0x70>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a1b      	ldr	r2, [pc, #108]	@ (8006300 <HAL_TIM_Base_Start+0xc4>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d009      	beq.n	80062ac <HAL_TIM_Base_Start+0x70>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a19      	ldr	r2, [pc, #100]	@ (8006304 <HAL_TIM_Base_Start+0xc8>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d004      	beq.n	80062ac <HAL_TIM_Base_Start+0x70>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a18      	ldr	r2, [pc, #96]	@ (8006308 <HAL_TIM_Base_Start+0xcc>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d111      	bne.n	80062d0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f003 0307 	and.w	r3, r3, #7
 80062b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2b06      	cmp	r3, #6
 80062bc:	d010      	beq.n	80062e0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f042 0201 	orr.w	r2, r2, #1
 80062cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ce:	e007      	b.n	80062e0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f042 0201 	orr.w	r2, r2, #1
 80062de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3714      	adds	r7, #20
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	40010000 	.word	0x40010000
 80062f4:	40000400 	.word	0x40000400
 80062f8:	40000800 	.word	0x40000800
 80062fc:	40000c00 	.word	0x40000c00
 8006300:	40010400 	.word	0x40010400
 8006304:	40014000 	.word	0x40014000
 8006308:	40001800 	.word	0x40001800

0800630c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	2b00      	cmp	r3, #0
 800632c:	d020      	beq.n	8006370 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f003 0302 	and.w	r3, r3, #2
 8006334:	2b00      	cmp	r3, #0
 8006336:	d01b      	beq.n	8006370 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f06f 0202 	mvn.w	r2, #2
 8006340:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2201      	movs	r2, #1
 8006346:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	f003 0303 	and.w	r3, r3, #3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d003      	beq.n	800635e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f9a3 	bl	80066a2 <HAL_TIM_IC_CaptureCallback>
 800635c:	e005      	b.n	800636a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f995 	bl	800668e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 f9a6 	bl	80066b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	f003 0304 	and.w	r3, r3, #4
 8006376:	2b00      	cmp	r3, #0
 8006378:	d020      	beq.n	80063bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f003 0304 	and.w	r3, r3, #4
 8006380:	2b00      	cmp	r3, #0
 8006382:	d01b      	beq.n	80063bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f06f 0204 	mvn.w	r2, #4
 800638c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2202      	movs	r2, #2
 8006392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d003      	beq.n	80063aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f97d 	bl	80066a2 <HAL_TIM_IC_CaptureCallback>
 80063a8:	e005      	b.n	80063b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f96f 	bl	800668e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 f980 	bl	80066b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	f003 0308 	and.w	r3, r3, #8
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d020      	beq.n	8006408 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f003 0308 	and.w	r3, r3, #8
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d01b      	beq.n	8006408 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f06f 0208 	mvn.w	r2, #8
 80063d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2204      	movs	r2, #4
 80063de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	69db      	ldr	r3, [r3, #28]
 80063e6:	f003 0303 	and.w	r3, r3, #3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d003      	beq.n	80063f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f957 	bl	80066a2 <HAL_TIM_IC_CaptureCallback>
 80063f4:	e005      	b.n	8006402 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 f949 	bl	800668e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 f95a 	bl	80066b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	f003 0310 	and.w	r3, r3, #16
 800640e:	2b00      	cmp	r3, #0
 8006410:	d020      	beq.n	8006454 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f003 0310 	and.w	r3, r3, #16
 8006418:	2b00      	cmp	r3, #0
 800641a:	d01b      	beq.n	8006454 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f06f 0210 	mvn.w	r2, #16
 8006424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2208      	movs	r2, #8
 800642a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006436:	2b00      	cmp	r3, #0
 8006438:	d003      	beq.n	8006442 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f931 	bl	80066a2 <HAL_TIM_IC_CaptureCallback>
 8006440:	e005      	b.n	800644e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f923 	bl	800668e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f934 	bl	80066b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00c      	beq.n	8006478 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f003 0301 	and.w	r3, r3, #1
 8006464:	2b00      	cmp	r3, #0
 8006466:	d007      	beq.n	8006478 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f06f 0201 	mvn.w	r2, #1
 8006470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f901 	bl	800667a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00c      	beq.n	800649c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006488:	2b00      	cmp	r3, #0
 800648a:	d007      	beq.n	800649c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 faee 	bl	8006a78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00c      	beq.n	80064c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d007      	beq.n	80064c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80064b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f905 	bl	80066ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	f003 0320 	and.w	r3, r3, #32
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00c      	beq.n	80064e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f003 0320 	and.w	r3, r3, #32
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d007      	beq.n	80064e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f06f 0220 	mvn.w	r2, #32
 80064dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 fac0 	bl	8006a64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064e4:	bf00      	nop
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064f6:	2300      	movs	r3, #0
 80064f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006500:	2b01      	cmp	r3, #1
 8006502:	d101      	bne.n	8006508 <HAL_TIM_ConfigClockSource+0x1c>
 8006504:	2302      	movs	r3, #2
 8006506:	e0b4      	b.n	8006672 <HAL_TIM_ConfigClockSource+0x186>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2202      	movs	r2, #2
 8006514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006526:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800652e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68ba      	ldr	r2, [r7, #8]
 8006536:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006540:	d03e      	beq.n	80065c0 <HAL_TIM_ConfigClockSource+0xd4>
 8006542:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006546:	f200 8087 	bhi.w	8006658 <HAL_TIM_ConfigClockSource+0x16c>
 800654a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800654e:	f000 8086 	beq.w	800665e <HAL_TIM_ConfigClockSource+0x172>
 8006552:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006556:	d87f      	bhi.n	8006658 <HAL_TIM_ConfigClockSource+0x16c>
 8006558:	2b70      	cmp	r3, #112	@ 0x70
 800655a:	d01a      	beq.n	8006592 <HAL_TIM_ConfigClockSource+0xa6>
 800655c:	2b70      	cmp	r3, #112	@ 0x70
 800655e:	d87b      	bhi.n	8006658 <HAL_TIM_ConfigClockSource+0x16c>
 8006560:	2b60      	cmp	r3, #96	@ 0x60
 8006562:	d050      	beq.n	8006606 <HAL_TIM_ConfigClockSource+0x11a>
 8006564:	2b60      	cmp	r3, #96	@ 0x60
 8006566:	d877      	bhi.n	8006658 <HAL_TIM_ConfigClockSource+0x16c>
 8006568:	2b50      	cmp	r3, #80	@ 0x50
 800656a:	d03c      	beq.n	80065e6 <HAL_TIM_ConfigClockSource+0xfa>
 800656c:	2b50      	cmp	r3, #80	@ 0x50
 800656e:	d873      	bhi.n	8006658 <HAL_TIM_ConfigClockSource+0x16c>
 8006570:	2b40      	cmp	r3, #64	@ 0x40
 8006572:	d058      	beq.n	8006626 <HAL_TIM_ConfigClockSource+0x13a>
 8006574:	2b40      	cmp	r3, #64	@ 0x40
 8006576:	d86f      	bhi.n	8006658 <HAL_TIM_ConfigClockSource+0x16c>
 8006578:	2b30      	cmp	r3, #48	@ 0x30
 800657a:	d064      	beq.n	8006646 <HAL_TIM_ConfigClockSource+0x15a>
 800657c:	2b30      	cmp	r3, #48	@ 0x30
 800657e:	d86b      	bhi.n	8006658 <HAL_TIM_ConfigClockSource+0x16c>
 8006580:	2b20      	cmp	r3, #32
 8006582:	d060      	beq.n	8006646 <HAL_TIM_ConfigClockSource+0x15a>
 8006584:	2b20      	cmp	r3, #32
 8006586:	d867      	bhi.n	8006658 <HAL_TIM_ConfigClockSource+0x16c>
 8006588:	2b00      	cmp	r3, #0
 800658a:	d05c      	beq.n	8006646 <HAL_TIM_ConfigClockSource+0x15a>
 800658c:	2b10      	cmp	r3, #16
 800658e:	d05a      	beq.n	8006646 <HAL_TIM_ConfigClockSource+0x15a>
 8006590:	e062      	b.n	8006658 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065a2:	f000 f9c3 	bl	800692c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80065b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	609a      	str	r2, [r3, #8]
      break;
 80065be:	e04f      	b.n	8006660 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065d0:	f000 f9ac 	bl	800692c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	689a      	ldr	r2, [r3, #8]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065e2:	609a      	str	r2, [r3, #8]
      break;
 80065e4:	e03c      	b.n	8006660 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065f2:	461a      	mov	r2, r3
 80065f4:	f000 f920 	bl	8006838 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2150      	movs	r1, #80	@ 0x50
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 f979 	bl	80068f6 <TIM_ITRx_SetConfig>
      break;
 8006604:	e02c      	b.n	8006660 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006612:	461a      	mov	r2, r3
 8006614:	f000 f93f 	bl	8006896 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2160      	movs	r1, #96	@ 0x60
 800661e:	4618      	mov	r0, r3
 8006620:	f000 f969 	bl	80068f6 <TIM_ITRx_SetConfig>
      break;
 8006624:	e01c      	b.n	8006660 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006632:	461a      	mov	r2, r3
 8006634:	f000 f900 	bl	8006838 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2140      	movs	r1, #64	@ 0x40
 800663e:	4618      	mov	r0, r3
 8006640:	f000 f959 	bl	80068f6 <TIM_ITRx_SetConfig>
      break;
 8006644:	e00c      	b.n	8006660 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4619      	mov	r1, r3
 8006650:	4610      	mov	r0, r2
 8006652:	f000 f950 	bl	80068f6 <TIM_ITRx_SetConfig>
      break;
 8006656:	e003      	b.n	8006660 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	73fb      	strb	r3, [r7, #15]
      break;
 800665c:	e000      	b.n	8006660 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800665e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006670:	7bfb      	ldrb	r3, [r7, #15]
}
 8006672:	4618      	mov	r0, r3
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800667a:	b480      	push	{r7}
 800667c:	b083      	sub	sp, #12
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006682:	bf00      	nop
 8006684:	370c      	adds	r7, #12
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr

0800668e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800668e:	b480      	push	{r7}
 8006690:	b083      	sub	sp, #12
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006696:	bf00      	nop
 8006698:	370c      	adds	r7, #12
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr

080066a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066a2:	b480      	push	{r7}
 80066a4:	b083      	sub	sp, #12
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066aa:	bf00      	nop
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr

080066b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b083      	sub	sp, #12
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066be:	bf00      	nop
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b083      	sub	sp, #12
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066d2:	bf00      	nop
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
	...

080066e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a46      	ldr	r2, [pc, #280]	@ (800680c <TIM_Base_SetConfig+0x12c>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d013      	beq.n	8006720 <TIM_Base_SetConfig+0x40>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066fe:	d00f      	beq.n	8006720 <TIM_Base_SetConfig+0x40>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a43      	ldr	r2, [pc, #268]	@ (8006810 <TIM_Base_SetConfig+0x130>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d00b      	beq.n	8006720 <TIM_Base_SetConfig+0x40>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a42      	ldr	r2, [pc, #264]	@ (8006814 <TIM_Base_SetConfig+0x134>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d007      	beq.n	8006720 <TIM_Base_SetConfig+0x40>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a41      	ldr	r2, [pc, #260]	@ (8006818 <TIM_Base_SetConfig+0x138>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d003      	beq.n	8006720 <TIM_Base_SetConfig+0x40>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a40      	ldr	r2, [pc, #256]	@ (800681c <TIM_Base_SetConfig+0x13c>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d108      	bne.n	8006732 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006726:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	4313      	orrs	r3, r2
 8006730:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a35      	ldr	r2, [pc, #212]	@ (800680c <TIM_Base_SetConfig+0x12c>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d02b      	beq.n	8006792 <TIM_Base_SetConfig+0xb2>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006740:	d027      	beq.n	8006792 <TIM_Base_SetConfig+0xb2>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a32      	ldr	r2, [pc, #200]	@ (8006810 <TIM_Base_SetConfig+0x130>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d023      	beq.n	8006792 <TIM_Base_SetConfig+0xb2>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a31      	ldr	r2, [pc, #196]	@ (8006814 <TIM_Base_SetConfig+0x134>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d01f      	beq.n	8006792 <TIM_Base_SetConfig+0xb2>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a30      	ldr	r2, [pc, #192]	@ (8006818 <TIM_Base_SetConfig+0x138>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d01b      	beq.n	8006792 <TIM_Base_SetConfig+0xb2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a2f      	ldr	r2, [pc, #188]	@ (800681c <TIM_Base_SetConfig+0x13c>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d017      	beq.n	8006792 <TIM_Base_SetConfig+0xb2>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a2e      	ldr	r2, [pc, #184]	@ (8006820 <TIM_Base_SetConfig+0x140>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d013      	beq.n	8006792 <TIM_Base_SetConfig+0xb2>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a2d      	ldr	r2, [pc, #180]	@ (8006824 <TIM_Base_SetConfig+0x144>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d00f      	beq.n	8006792 <TIM_Base_SetConfig+0xb2>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a2c      	ldr	r2, [pc, #176]	@ (8006828 <TIM_Base_SetConfig+0x148>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d00b      	beq.n	8006792 <TIM_Base_SetConfig+0xb2>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a2b      	ldr	r2, [pc, #172]	@ (800682c <TIM_Base_SetConfig+0x14c>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d007      	beq.n	8006792 <TIM_Base_SetConfig+0xb2>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a2a      	ldr	r2, [pc, #168]	@ (8006830 <TIM_Base_SetConfig+0x150>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d003      	beq.n	8006792 <TIM_Base_SetConfig+0xb2>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a29      	ldr	r2, [pc, #164]	@ (8006834 <TIM_Base_SetConfig+0x154>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d108      	bne.n	80067a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	689a      	ldr	r2, [r3, #8]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a10      	ldr	r2, [pc, #64]	@ (800680c <TIM_Base_SetConfig+0x12c>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d003      	beq.n	80067d8 <TIM_Base_SetConfig+0xf8>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a12      	ldr	r2, [pc, #72]	@ (800681c <TIM_Base_SetConfig+0x13c>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d103      	bne.n	80067e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	691a      	ldr	r2, [r3, #16]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	f003 0301 	and.w	r3, r3, #1
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d105      	bne.n	80067fe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	f023 0201 	bic.w	r2, r3, #1
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	611a      	str	r2, [r3, #16]
  }
}
 80067fe:	bf00      	nop
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	40010000 	.word	0x40010000
 8006810:	40000400 	.word	0x40000400
 8006814:	40000800 	.word	0x40000800
 8006818:	40000c00 	.word	0x40000c00
 800681c:	40010400 	.word	0x40010400
 8006820:	40014000 	.word	0x40014000
 8006824:	40014400 	.word	0x40014400
 8006828:	40014800 	.word	0x40014800
 800682c:	40001800 	.word	0x40001800
 8006830:	40001c00 	.word	0x40001c00
 8006834:	40002000 	.word	0x40002000

08006838 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006838:	b480      	push	{r7}
 800683a:	b087      	sub	sp, #28
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6a1b      	ldr	r3, [r3, #32]
 8006848:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	f023 0201 	bic.w	r2, r3, #1
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006862:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	011b      	lsls	r3, r3, #4
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	4313      	orrs	r3, r2
 800686c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f023 030a 	bic.w	r3, r3, #10
 8006874:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	4313      	orrs	r3, r2
 800687c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	621a      	str	r2, [r3, #32]
}
 800688a:	bf00      	nop
 800688c:	371c      	adds	r7, #28
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006896:	b480      	push	{r7}
 8006898:	b087      	sub	sp, #28
 800689a:	af00      	add	r7, sp, #0
 800689c:	60f8      	str	r0, [r7, #12]
 800689e:	60b9      	str	r1, [r7, #8]
 80068a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6a1b      	ldr	r3, [r3, #32]
 80068ac:	f023 0210 	bic.w	r2, r3, #16
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80068c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	031b      	lsls	r3, r3, #12
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80068d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	011b      	lsls	r3, r3, #4
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	4313      	orrs	r3, r2
 80068dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	621a      	str	r2, [r3, #32]
}
 80068ea:	bf00      	nop
 80068ec:	371c      	adds	r7, #28
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr

080068f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068f6:	b480      	push	{r7}
 80068f8:	b085      	sub	sp, #20
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
 80068fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800690c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	4313      	orrs	r3, r2
 8006914:	f043 0307 	orr.w	r3, r3, #7
 8006918:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	609a      	str	r2, [r3, #8]
}
 8006920:	bf00      	nop
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800692c:	b480      	push	{r7}
 800692e:	b087      	sub	sp, #28
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
 8006938:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006946:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	021a      	lsls	r2, r3, #8
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	431a      	orrs	r2, r3
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	4313      	orrs	r3, r2
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	4313      	orrs	r3, r2
 8006958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	697a      	ldr	r2, [r7, #20]
 800695e:	609a      	str	r2, [r3, #8]
}
 8006960:	bf00      	nop
 8006962:	371c      	adds	r7, #28
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800697c:	2b01      	cmp	r3, #1
 800697e:	d101      	bne.n	8006984 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006980:	2302      	movs	r3, #2
 8006982:	e05a      	b.n	8006a3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2202      	movs	r2, #2
 8006990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a21      	ldr	r2, [pc, #132]	@ (8006a48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d022      	beq.n	8006a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069d0:	d01d      	beq.n	8006a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a1d      	ldr	r2, [pc, #116]	@ (8006a4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d018      	beq.n	8006a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a1b      	ldr	r2, [pc, #108]	@ (8006a50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d013      	beq.n	8006a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a1a      	ldr	r2, [pc, #104]	@ (8006a54 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d00e      	beq.n	8006a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a18      	ldr	r2, [pc, #96]	@ (8006a58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d009      	beq.n	8006a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a17      	ldr	r2, [pc, #92]	@ (8006a5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d004      	beq.n	8006a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a15      	ldr	r2, [pc, #84]	@ (8006a60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d10c      	bne.n	8006a28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	68ba      	ldr	r2, [r7, #8]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68ba      	ldr	r2, [r7, #8]
 8006a26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	40010000 	.word	0x40010000
 8006a4c:	40000400 	.word	0x40000400
 8006a50:	40000800 	.word	0x40000800
 8006a54:	40000c00 	.word	0x40000c00
 8006a58:	40010400 	.word	0x40010400
 8006a5c:	40014000 	.word	0x40014000
 8006a60:	40001800 	.word	0x40001800

08006a64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a80:	bf00      	nop
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e042      	b.n	8006b24 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d106      	bne.n	8006ab8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f7fc fcf8 	bl	80034a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2224      	movs	r2, #36	@ 0x24
 8006abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68da      	ldr	r2, [r3, #12]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006ace:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 f82b 	bl	8006b2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	691a      	ldr	r2, [r3, #16]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ae4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	695a      	ldr	r2, [r3, #20]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006af4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68da      	ldr	r2, [r3, #12]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006b04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2220      	movs	r2, #32
 8006b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2220      	movs	r2, #32
 8006b18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3708      	adds	r7, #8
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b30:	b0c0      	sub	sp, #256	@ 0x100
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b48:	68d9      	ldr	r1, [r3, #12]
 8006b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	ea40 0301 	orr.w	r3, r0, r1
 8006b54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b5a:	689a      	ldr	r2, [r3, #8]
 8006b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	431a      	orrs	r2, r3
 8006b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	431a      	orrs	r2, r3
 8006b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b70:	69db      	ldr	r3, [r3, #28]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006b84:	f021 010c 	bic.w	r1, r1, #12
 8006b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006b92:	430b      	orrs	r3, r1
 8006b94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ba6:	6999      	ldr	r1, [r3, #24]
 8006ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	ea40 0301 	orr.w	r3, r0, r1
 8006bb2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	4b8f      	ldr	r3, [pc, #572]	@ (8006df8 <UART_SetConfig+0x2cc>)
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d005      	beq.n	8006bcc <UART_SetConfig+0xa0>
 8006bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	4b8d      	ldr	r3, [pc, #564]	@ (8006dfc <UART_SetConfig+0x2d0>)
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d104      	bne.n	8006bd6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006bcc:	f7fd fe88 	bl	80048e0 <HAL_RCC_GetPCLK2Freq>
 8006bd0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006bd4:	e003      	b.n	8006bde <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006bd6:	f7fd fe6f 	bl	80048b8 <HAL_RCC_GetPCLK1Freq>
 8006bda:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006be2:	69db      	ldr	r3, [r3, #28]
 8006be4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006be8:	f040 810c 	bne.w	8006e04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006bec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006bf6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006bfa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006bfe:	4622      	mov	r2, r4
 8006c00:	462b      	mov	r3, r5
 8006c02:	1891      	adds	r1, r2, r2
 8006c04:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006c06:	415b      	adcs	r3, r3
 8006c08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006c0e:	4621      	mov	r1, r4
 8006c10:	eb12 0801 	adds.w	r8, r2, r1
 8006c14:	4629      	mov	r1, r5
 8006c16:	eb43 0901 	adc.w	r9, r3, r1
 8006c1a:	f04f 0200 	mov.w	r2, #0
 8006c1e:	f04f 0300 	mov.w	r3, #0
 8006c22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c2e:	4690      	mov	r8, r2
 8006c30:	4699      	mov	r9, r3
 8006c32:	4623      	mov	r3, r4
 8006c34:	eb18 0303 	adds.w	r3, r8, r3
 8006c38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006c3c:	462b      	mov	r3, r5
 8006c3e:	eb49 0303 	adc.w	r3, r9, r3
 8006c42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006c52:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006c56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	18db      	adds	r3, r3, r3
 8006c5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c60:	4613      	mov	r3, r2
 8006c62:	eb42 0303 	adc.w	r3, r2, r3
 8006c66:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006c6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006c70:	f7fa f80a 	bl	8000c88 <__aeabi_uldivmod>
 8006c74:	4602      	mov	r2, r0
 8006c76:	460b      	mov	r3, r1
 8006c78:	4b61      	ldr	r3, [pc, #388]	@ (8006e00 <UART_SetConfig+0x2d4>)
 8006c7a:	fba3 2302 	umull	r2, r3, r3, r2
 8006c7e:	095b      	lsrs	r3, r3, #5
 8006c80:	011c      	lsls	r4, r3, #4
 8006c82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c86:	2200      	movs	r2, #0
 8006c88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c8c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006c90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006c94:	4642      	mov	r2, r8
 8006c96:	464b      	mov	r3, r9
 8006c98:	1891      	adds	r1, r2, r2
 8006c9a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006c9c:	415b      	adcs	r3, r3
 8006c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ca0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006ca4:	4641      	mov	r1, r8
 8006ca6:	eb12 0a01 	adds.w	sl, r2, r1
 8006caa:	4649      	mov	r1, r9
 8006cac:	eb43 0b01 	adc.w	fp, r3, r1
 8006cb0:	f04f 0200 	mov.w	r2, #0
 8006cb4:	f04f 0300 	mov.w	r3, #0
 8006cb8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006cbc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006cc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cc4:	4692      	mov	sl, r2
 8006cc6:	469b      	mov	fp, r3
 8006cc8:	4643      	mov	r3, r8
 8006cca:	eb1a 0303 	adds.w	r3, sl, r3
 8006cce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006cd2:	464b      	mov	r3, r9
 8006cd4:	eb4b 0303 	adc.w	r3, fp, r3
 8006cd8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ce8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006cec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	18db      	adds	r3, r3, r3
 8006cf4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	eb42 0303 	adc.w	r3, r2, r3
 8006cfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cfe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006d02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006d06:	f7f9 ffbf 	bl	8000c88 <__aeabi_uldivmod>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	4611      	mov	r1, r2
 8006d10:	4b3b      	ldr	r3, [pc, #236]	@ (8006e00 <UART_SetConfig+0x2d4>)
 8006d12:	fba3 2301 	umull	r2, r3, r3, r1
 8006d16:	095b      	lsrs	r3, r3, #5
 8006d18:	2264      	movs	r2, #100	@ 0x64
 8006d1a:	fb02 f303 	mul.w	r3, r2, r3
 8006d1e:	1acb      	subs	r3, r1, r3
 8006d20:	00db      	lsls	r3, r3, #3
 8006d22:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006d26:	4b36      	ldr	r3, [pc, #216]	@ (8006e00 <UART_SetConfig+0x2d4>)
 8006d28:	fba3 2302 	umull	r2, r3, r3, r2
 8006d2c:	095b      	lsrs	r3, r3, #5
 8006d2e:	005b      	lsls	r3, r3, #1
 8006d30:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006d34:	441c      	add	r4, r3
 8006d36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d40:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006d44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006d48:	4642      	mov	r2, r8
 8006d4a:	464b      	mov	r3, r9
 8006d4c:	1891      	adds	r1, r2, r2
 8006d4e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006d50:	415b      	adcs	r3, r3
 8006d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006d58:	4641      	mov	r1, r8
 8006d5a:	1851      	adds	r1, r2, r1
 8006d5c:	6339      	str	r1, [r7, #48]	@ 0x30
 8006d5e:	4649      	mov	r1, r9
 8006d60:	414b      	adcs	r3, r1
 8006d62:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d64:	f04f 0200 	mov.w	r2, #0
 8006d68:	f04f 0300 	mov.w	r3, #0
 8006d6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006d70:	4659      	mov	r1, fp
 8006d72:	00cb      	lsls	r3, r1, #3
 8006d74:	4651      	mov	r1, sl
 8006d76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d7a:	4651      	mov	r1, sl
 8006d7c:	00ca      	lsls	r2, r1, #3
 8006d7e:	4610      	mov	r0, r2
 8006d80:	4619      	mov	r1, r3
 8006d82:	4603      	mov	r3, r0
 8006d84:	4642      	mov	r2, r8
 8006d86:	189b      	adds	r3, r3, r2
 8006d88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d8c:	464b      	mov	r3, r9
 8006d8e:	460a      	mov	r2, r1
 8006d90:	eb42 0303 	adc.w	r3, r2, r3
 8006d94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006da4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006da8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006dac:	460b      	mov	r3, r1
 8006dae:	18db      	adds	r3, r3, r3
 8006db0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006db2:	4613      	mov	r3, r2
 8006db4:	eb42 0303 	adc.w	r3, r2, r3
 8006db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006dba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006dbe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006dc2:	f7f9 ff61 	bl	8000c88 <__aeabi_uldivmod>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	460b      	mov	r3, r1
 8006dca:	4b0d      	ldr	r3, [pc, #52]	@ (8006e00 <UART_SetConfig+0x2d4>)
 8006dcc:	fba3 1302 	umull	r1, r3, r3, r2
 8006dd0:	095b      	lsrs	r3, r3, #5
 8006dd2:	2164      	movs	r1, #100	@ 0x64
 8006dd4:	fb01 f303 	mul.w	r3, r1, r3
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	00db      	lsls	r3, r3, #3
 8006ddc:	3332      	adds	r3, #50	@ 0x32
 8006dde:	4a08      	ldr	r2, [pc, #32]	@ (8006e00 <UART_SetConfig+0x2d4>)
 8006de0:	fba2 2303 	umull	r2, r3, r2, r3
 8006de4:	095b      	lsrs	r3, r3, #5
 8006de6:	f003 0207 	and.w	r2, r3, #7
 8006dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4422      	add	r2, r4
 8006df2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006df4:	e106      	b.n	8007004 <UART_SetConfig+0x4d8>
 8006df6:	bf00      	nop
 8006df8:	40011000 	.word	0x40011000
 8006dfc:	40011400 	.word	0x40011400
 8006e00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006e0e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006e12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006e16:	4642      	mov	r2, r8
 8006e18:	464b      	mov	r3, r9
 8006e1a:	1891      	adds	r1, r2, r2
 8006e1c:	6239      	str	r1, [r7, #32]
 8006e1e:	415b      	adcs	r3, r3
 8006e20:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e26:	4641      	mov	r1, r8
 8006e28:	1854      	adds	r4, r2, r1
 8006e2a:	4649      	mov	r1, r9
 8006e2c:	eb43 0501 	adc.w	r5, r3, r1
 8006e30:	f04f 0200 	mov.w	r2, #0
 8006e34:	f04f 0300 	mov.w	r3, #0
 8006e38:	00eb      	lsls	r3, r5, #3
 8006e3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e3e:	00e2      	lsls	r2, r4, #3
 8006e40:	4614      	mov	r4, r2
 8006e42:	461d      	mov	r5, r3
 8006e44:	4643      	mov	r3, r8
 8006e46:	18e3      	adds	r3, r4, r3
 8006e48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e4c:	464b      	mov	r3, r9
 8006e4e:	eb45 0303 	adc.w	r3, r5, r3
 8006e52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e62:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006e66:	f04f 0200 	mov.w	r2, #0
 8006e6a:	f04f 0300 	mov.w	r3, #0
 8006e6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006e72:	4629      	mov	r1, r5
 8006e74:	008b      	lsls	r3, r1, #2
 8006e76:	4621      	mov	r1, r4
 8006e78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e7c:	4621      	mov	r1, r4
 8006e7e:	008a      	lsls	r2, r1, #2
 8006e80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006e84:	f7f9 ff00 	bl	8000c88 <__aeabi_uldivmod>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	4b60      	ldr	r3, [pc, #384]	@ (8007010 <UART_SetConfig+0x4e4>)
 8006e8e:	fba3 2302 	umull	r2, r3, r3, r2
 8006e92:	095b      	lsrs	r3, r3, #5
 8006e94:	011c      	lsls	r4, r3, #4
 8006e96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006ea0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006ea4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006ea8:	4642      	mov	r2, r8
 8006eaa:	464b      	mov	r3, r9
 8006eac:	1891      	adds	r1, r2, r2
 8006eae:	61b9      	str	r1, [r7, #24]
 8006eb0:	415b      	adcs	r3, r3
 8006eb2:	61fb      	str	r3, [r7, #28]
 8006eb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006eb8:	4641      	mov	r1, r8
 8006eba:	1851      	adds	r1, r2, r1
 8006ebc:	6139      	str	r1, [r7, #16]
 8006ebe:	4649      	mov	r1, r9
 8006ec0:	414b      	adcs	r3, r1
 8006ec2:	617b      	str	r3, [r7, #20]
 8006ec4:	f04f 0200 	mov.w	r2, #0
 8006ec8:	f04f 0300 	mov.w	r3, #0
 8006ecc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ed0:	4659      	mov	r1, fp
 8006ed2:	00cb      	lsls	r3, r1, #3
 8006ed4:	4651      	mov	r1, sl
 8006ed6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006eda:	4651      	mov	r1, sl
 8006edc:	00ca      	lsls	r2, r1, #3
 8006ede:	4610      	mov	r0, r2
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	4642      	mov	r2, r8
 8006ee6:	189b      	adds	r3, r3, r2
 8006ee8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006eec:	464b      	mov	r3, r9
 8006eee:	460a      	mov	r2, r1
 8006ef0:	eb42 0303 	adc.w	r3, r2, r3
 8006ef4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f02:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006f04:	f04f 0200 	mov.w	r2, #0
 8006f08:	f04f 0300 	mov.w	r3, #0
 8006f0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006f10:	4649      	mov	r1, r9
 8006f12:	008b      	lsls	r3, r1, #2
 8006f14:	4641      	mov	r1, r8
 8006f16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f1a:	4641      	mov	r1, r8
 8006f1c:	008a      	lsls	r2, r1, #2
 8006f1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006f22:	f7f9 feb1 	bl	8000c88 <__aeabi_uldivmod>
 8006f26:	4602      	mov	r2, r0
 8006f28:	460b      	mov	r3, r1
 8006f2a:	4611      	mov	r1, r2
 8006f2c:	4b38      	ldr	r3, [pc, #224]	@ (8007010 <UART_SetConfig+0x4e4>)
 8006f2e:	fba3 2301 	umull	r2, r3, r3, r1
 8006f32:	095b      	lsrs	r3, r3, #5
 8006f34:	2264      	movs	r2, #100	@ 0x64
 8006f36:	fb02 f303 	mul.w	r3, r2, r3
 8006f3a:	1acb      	subs	r3, r1, r3
 8006f3c:	011b      	lsls	r3, r3, #4
 8006f3e:	3332      	adds	r3, #50	@ 0x32
 8006f40:	4a33      	ldr	r2, [pc, #204]	@ (8007010 <UART_SetConfig+0x4e4>)
 8006f42:	fba2 2303 	umull	r2, r3, r2, r3
 8006f46:	095b      	lsrs	r3, r3, #5
 8006f48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f4c:	441c      	add	r4, r3
 8006f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f52:	2200      	movs	r2, #0
 8006f54:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f56:	677a      	str	r2, [r7, #116]	@ 0x74
 8006f58:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006f5c:	4642      	mov	r2, r8
 8006f5e:	464b      	mov	r3, r9
 8006f60:	1891      	adds	r1, r2, r2
 8006f62:	60b9      	str	r1, [r7, #8]
 8006f64:	415b      	adcs	r3, r3
 8006f66:	60fb      	str	r3, [r7, #12]
 8006f68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f6c:	4641      	mov	r1, r8
 8006f6e:	1851      	adds	r1, r2, r1
 8006f70:	6039      	str	r1, [r7, #0]
 8006f72:	4649      	mov	r1, r9
 8006f74:	414b      	adcs	r3, r1
 8006f76:	607b      	str	r3, [r7, #4]
 8006f78:	f04f 0200 	mov.w	r2, #0
 8006f7c:	f04f 0300 	mov.w	r3, #0
 8006f80:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f84:	4659      	mov	r1, fp
 8006f86:	00cb      	lsls	r3, r1, #3
 8006f88:	4651      	mov	r1, sl
 8006f8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f8e:	4651      	mov	r1, sl
 8006f90:	00ca      	lsls	r2, r1, #3
 8006f92:	4610      	mov	r0, r2
 8006f94:	4619      	mov	r1, r3
 8006f96:	4603      	mov	r3, r0
 8006f98:	4642      	mov	r2, r8
 8006f9a:	189b      	adds	r3, r3, r2
 8006f9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f9e:	464b      	mov	r3, r9
 8006fa0:	460a      	mov	r2, r1
 8006fa2:	eb42 0303 	adc.w	r3, r2, r3
 8006fa6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	663b      	str	r3, [r7, #96]	@ 0x60
 8006fb2:	667a      	str	r2, [r7, #100]	@ 0x64
 8006fb4:	f04f 0200 	mov.w	r2, #0
 8006fb8:	f04f 0300 	mov.w	r3, #0
 8006fbc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006fc0:	4649      	mov	r1, r9
 8006fc2:	008b      	lsls	r3, r1, #2
 8006fc4:	4641      	mov	r1, r8
 8006fc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fca:	4641      	mov	r1, r8
 8006fcc:	008a      	lsls	r2, r1, #2
 8006fce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006fd2:	f7f9 fe59 	bl	8000c88 <__aeabi_uldivmod>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	460b      	mov	r3, r1
 8006fda:	4b0d      	ldr	r3, [pc, #52]	@ (8007010 <UART_SetConfig+0x4e4>)
 8006fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8006fe0:	095b      	lsrs	r3, r3, #5
 8006fe2:	2164      	movs	r1, #100	@ 0x64
 8006fe4:	fb01 f303 	mul.w	r3, r1, r3
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	011b      	lsls	r3, r3, #4
 8006fec:	3332      	adds	r3, #50	@ 0x32
 8006fee:	4a08      	ldr	r2, [pc, #32]	@ (8007010 <UART_SetConfig+0x4e4>)
 8006ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff4:	095b      	lsrs	r3, r3, #5
 8006ff6:	f003 020f 	and.w	r2, r3, #15
 8006ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4422      	add	r2, r4
 8007002:	609a      	str	r2, [r3, #8]
}
 8007004:	bf00      	nop
 8007006:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800700a:	46bd      	mov	sp, r7
 800700c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007010:	51eb851f 	.word	0x51eb851f

08007014 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007014:	b084      	sub	sp, #16
 8007016:	b580      	push	{r7, lr}
 8007018:	b084      	sub	sp, #16
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	f107 001c 	add.w	r0, r7, #28
 8007022:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007026:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800702a:	2b01      	cmp	r3, #1
 800702c:	d123      	bne.n	8007076 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007032:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007042:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007056:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800705a:	2b01      	cmp	r3, #1
 800705c:	d105      	bne.n	800706a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 fa9a 	bl	80075a4 <USB_CoreReset>
 8007070:	4603      	mov	r3, r0
 8007072:	73fb      	strb	r3, [r7, #15]
 8007074:	e01b      	b.n	80070ae <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fa8e 	bl	80075a4 <USB_CoreReset>
 8007088:	4603      	mov	r3, r0
 800708a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800708c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007090:	2b00      	cmp	r3, #0
 8007092:	d106      	bne.n	80070a2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007098:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	639a      	str	r2, [r3, #56]	@ 0x38
 80070a0:	e005      	b.n	80070ae <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80070ae:	7fbb      	ldrb	r3, [r7, #30]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d10b      	bne.n	80070cc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	f043 0206 	orr.w	r2, r3, #6
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	f043 0220 	orr.w	r2, r3, #32
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80070cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070d8:	b004      	add	sp, #16
 80070da:	4770      	bx	lr

080070dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	f023 0201 	bic.w	r2, r3, #1
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	370c      	adds	r7, #12
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr

080070fe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b084      	sub	sp, #16
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
 8007106:	460b      	mov	r3, r1
 8007108:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800710a:	2300      	movs	r3, #0
 800710c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800711a:	78fb      	ldrb	r3, [r7, #3]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d115      	bne.n	800714c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800712c:	200a      	movs	r0, #10
 800712e:	f7fc fc29 	bl	8003984 <HAL_Delay>
      ms += 10U;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	330a      	adds	r3, #10
 8007136:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 fa25 	bl	8007588 <USB_GetMode>
 800713e:	4603      	mov	r3, r0
 8007140:	2b01      	cmp	r3, #1
 8007142:	d01e      	beq.n	8007182 <USB_SetCurrentMode+0x84>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2bc7      	cmp	r3, #199	@ 0xc7
 8007148:	d9f0      	bls.n	800712c <USB_SetCurrentMode+0x2e>
 800714a:	e01a      	b.n	8007182 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800714c:	78fb      	ldrb	r3, [r7, #3]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d115      	bne.n	800717e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800715e:	200a      	movs	r0, #10
 8007160:	f7fc fc10 	bl	8003984 <HAL_Delay>
      ms += 10U;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	330a      	adds	r3, #10
 8007168:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 fa0c 	bl	8007588 <USB_GetMode>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d005      	beq.n	8007182 <USB_SetCurrentMode+0x84>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2bc7      	cmp	r3, #199	@ 0xc7
 800717a:	d9f0      	bls.n	800715e <USB_SetCurrentMode+0x60>
 800717c:	e001      	b.n	8007182 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e005      	b.n	800718e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2bc8      	cmp	r3, #200	@ 0xc8
 8007186:	d101      	bne.n	800718c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e000      	b.n	800718e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
	...

08007198 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007198:	b084      	sub	sp, #16
 800719a:	b580      	push	{r7, lr}
 800719c:	b086      	sub	sp, #24
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
 80071a2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80071a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80071aa:	2300      	movs	r3, #0
 80071ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80071b2:	2300      	movs	r3, #0
 80071b4:	613b      	str	r3, [r7, #16]
 80071b6:	e009      	b.n	80071cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	3340      	adds	r3, #64	@ 0x40
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	4413      	add	r3, r2
 80071c2:	2200      	movs	r2, #0
 80071c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	3301      	adds	r3, #1
 80071ca:	613b      	str	r3, [r7, #16]
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	2b0e      	cmp	r3, #14
 80071d0:	d9f2      	bls.n	80071b8 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80071d2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d11c      	bne.n	8007214 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071e8:	f043 0302 	orr.w	r3, r3, #2
 80071ec:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	601a      	str	r2, [r3, #0]
 8007212:	e005      	b.n	8007220 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007218:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007226:	461a      	mov	r2, r3
 8007228:	2300      	movs	r3, #0
 800722a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800722c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007230:	2b01      	cmp	r3, #1
 8007232:	d10d      	bne.n	8007250 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007234:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007238:	2b00      	cmp	r3, #0
 800723a:	d104      	bne.n	8007246 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800723c:	2100      	movs	r1, #0
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f968 	bl	8007514 <USB_SetDevSpeed>
 8007244:	e008      	b.n	8007258 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007246:	2101      	movs	r1, #1
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 f963 	bl	8007514 <USB_SetDevSpeed>
 800724e:	e003      	b.n	8007258 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007250:	2103      	movs	r1, #3
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f95e 	bl	8007514 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007258:	2110      	movs	r1, #16
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f8fa 	bl	8007454 <USB_FlushTxFifo>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d001      	beq.n	800726a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f924 	bl	80074b8 <USB_FlushRxFifo>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d001      	beq.n	800727a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007280:	461a      	mov	r2, r3
 8007282:	2300      	movs	r3, #0
 8007284:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800728c:	461a      	mov	r2, r3
 800728e:	2300      	movs	r3, #0
 8007290:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007298:	461a      	mov	r2, r3
 800729a:	2300      	movs	r3, #0
 800729c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800729e:	2300      	movs	r3, #0
 80072a0:	613b      	str	r3, [r7, #16]
 80072a2:	e043      	b.n	800732c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	015a      	lsls	r2, r3, #5
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	4413      	add	r3, r2
 80072ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072ba:	d118      	bne.n	80072ee <USB_DevInit+0x156>
    {
      if (i == 0U)
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d10a      	bne.n	80072d8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	015a      	lsls	r2, r3, #5
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	4413      	add	r3, r2
 80072ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072ce:	461a      	mov	r2, r3
 80072d0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80072d4:	6013      	str	r3, [r2, #0]
 80072d6:	e013      	b.n	8007300 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	015a      	lsls	r2, r3, #5
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	4413      	add	r3, r2
 80072e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072e4:	461a      	mov	r2, r3
 80072e6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80072ea:	6013      	str	r3, [r2, #0]
 80072ec:	e008      	b.n	8007300 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	015a      	lsls	r2, r3, #5
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	4413      	add	r3, r2
 80072f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072fa:	461a      	mov	r2, r3
 80072fc:	2300      	movs	r3, #0
 80072fe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	015a      	lsls	r2, r3, #5
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	4413      	add	r3, r2
 8007308:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800730c:	461a      	mov	r2, r3
 800730e:	2300      	movs	r3, #0
 8007310:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	015a      	lsls	r2, r3, #5
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	4413      	add	r3, r2
 800731a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800731e:	461a      	mov	r2, r3
 8007320:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007324:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	3301      	adds	r3, #1
 800732a:	613b      	str	r3, [r7, #16]
 800732c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007330:	461a      	mov	r2, r3
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	4293      	cmp	r3, r2
 8007336:	d3b5      	bcc.n	80072a4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007338:	2300      	movs	r3, #0
 800733a:	613b      	str	r3, [r7, #16]
 800733c:	e043      	b.n	80073c6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	015a      	lsls	r2, r3, #5
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	4413      	add	r3, r2
 8007346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007350:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007354:	d118      	bne.n	8007388 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d10a      	bne.n	8007372 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	015a      	lsls	r2, r3, #5
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	4413      	add	r3, r2
 8007364:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007368:	461a      	mov	r2, r3
 800736a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800736e:	6013      	str	r3, [r2, #0]
 8007370:	e013      	b.n	800739a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	015a      	lsls	r2, r3, #5
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	4413      	add	r3, r2
 800737a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800737e:	461a      	mov	r2, r3
 8007380:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007384:	6013      	str	r3, [r2, #0]
 8007386:	e008      	b.n	800739a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	015a      	lsls	r2, r3, #5
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	4413      	add	r3, r2
 8007390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007394:	461a      	mov	r2, r3
 8007396:	2300      	movs	r3, #0
 8007398:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	015a      	lsls	r2, r3, #5
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	4413      	add	r3, r2
 80073a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073a6:	461a      	mov	r2, r3
 80073a8:	2300      	movs	r3, #0
 80073aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	015a      	lsls	r2, r3, #5
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	4413      	add	r3, r2
 80073b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073b8:	461a      	mov	r2, r3
 80073ba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80073be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	3301      	adds	r3, #1
 80073c4:	613b      	str	r3, [r7, #16]
 80073c6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80073ca:	461a      	mov	r2, r3
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d3b5      	bcc.n	800733e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073e4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80073f2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80073f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d105      	bne.n	8007408 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	f043 0210 	orr.w	r2, r3, #16
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	699a      	ldr	r2, [r3, #24]
 800740c:	4b10      	ldr	r3, [pc, #64]	@ (8007450 <USB_DevInit+0x2b8>)
 800740e:	4313      	orrs	r3, r2
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007414:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007418:	2b00      	cmp	r3, #0
 800741a:	d005      	beq.n	8007428 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	f043 0208 	orr.w	r2, r3, #8
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007428:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800742c:	2b01      	cmp	r3, #1
 800742e:	d107      	bne.n	8007440 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007438:	f043 0304 	orr.w	r3, r3, #4
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007440:	7dfb      	ldrb	r3, [r7, #23]
}
 8007442:	4618      	mov	r0, r3
 8007444:	3718      	adds	r7, #24
 8007446:	46bd      	mov	sp, r7
 8007448:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800744c:	b004      	add	sp, #16
 800744e:	4770      	bx	lr
 8007450:	803c3800 	.word	0x803c3800

08007454 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800745e:	2300      	movs	r3, #0
 8007460:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	3301      	adds	r3, #1
 8007466:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800746e:	d901      	bls.n	8007474 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007470:	2303      	movs	r3, #3
 8007472:	e01b      	b.n	80074ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	2b00      	cmp	r3, #0
 800747a:	daf2      	bge.n	8007462 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800747c:	2300      	movs	r3, #0
 800747e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	019b      	lsls	r3, r3, #6
 8007484:	f043 0220 	orr.w	r2, r3, #32
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	3301      	adds	r3, #1
 8007490:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007498:	d901      	bls.n	800749e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	e006      	b.n	80074ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	f003 0320 	and.w	r3, r3, #32
 80074a6:	2b20      	cmp	r3, #32
 80074a8:	d0f0      	beq.n	800748c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3714      	adds	r7, #20
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074c0:	2300      	movs	r3, #0
 80074c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	3301      	adds	r3, #1
 80074c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074d0:	d901      	bls.n	80074d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	e018      	b.n	8007508 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	daf2      	bge.n	80074c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80074de:	2300      	movs	r3, #0
 80074e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2210      	movs	r2, #16
 80074e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	3301      	adds	r3, #1
 80074ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074f4:	d901      	bls.n	80074fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80074f6:	2303      	movs	r3, #3
 80074f8:	e006      	b.n	8007508 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	f003 0310 	and.w	r3, r3, #16
 8007502:	2b10      	cmp	r3, #16
 8007504:	d0f0      	beq.n	80074e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3714      	adds	r7, #20
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	460b      	mov	r3, r1
 800751e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	78fb      	ldrb	r3, [r7, #3]
 800752e:	68f9      	ldr	r1, [r7, #12]
 8007530:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007534:	4313      	orrs	r3, r2
 8007536:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007546:	b480      	push	{r7}
 8007548:	b085      	sub	sp, #20
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007560:	f023 0303 	bic.w	r3, r3, #3
 8007564:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007574:	f043 0302 	orr.w	r3, r3, #2
 8007578:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3714      	adds	r7, #20
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	695b      	ldr	r3, [r3, #20]
 8007594:	f003 0301 	and.w	r3, r3, #1
}
 8007598:	4618      	mov	r0, r3
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075ac:	2300      	movs	r3, #0
 80075ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	3301      	adds	r3, #1
 80075b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075bc:	d901      	bls.n	80075c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80075be:	2303      	movs	r3, #3
 80075c0:	e01b      	b.n	80075fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	daf2      	bge.n	80075b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80075ca:	2300      	movs	r3, #0
 80075cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	f043 0201 	orr.w	r2, r3, #1
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	3301      	adds	r3, #1
 80075de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075e6:	d901      	bls.n	80075ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80075e8:	2303      	movs	r3, #3
 80075ea:	e006      	b.n	80075fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	f003 0301 	and.w	r3, r3, #1
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d0f0      	beq.n	80075da <USB_CoreReset+0x36>

  return HAL_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3714      	adds	r7, #20
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr

08007606 <__cvt>:
 8007606:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800760a:	ec57 6b10 	vmov	r6, r7, d0
 800760e:	2f00      	cmp	r7, #0
 8007610:	460c      	mov	r4, r1
 8007612:	4619      	mov	r1, r3
 8007614:	463b      	mov	r3, r7
 8007616:	bfbb      	ittet	lt
 8007618:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800761c:	461f      	movlt	r7, r3
 800761e:	2300      	movge	r3, #0
 8007620:	232d      	movlt	r3, #45	@ 0x2d
 8007622:	700b      	strb	r3, [r1, #0]
 8007624:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007626:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800762a:	4691      	mov	r9, r2
 800762c:	f023 0820 	bic.w	r8, r3, #32
 8007630:	bfbc      	itt	lt
 8007632:	4632      	movlt	r2, r6
 8007634:	4616      	movlt	r6, r2
 8007636:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800763a:	d005      	beq.n	8007648 <__cvt+0x42>
 800763c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007640:	d100      	bne.n	8007644 <__cvt+0x3e>
 8007642:	3401      	adds	r4, #1
 8007644:	2102      	movs	r1, #2
 8007646:	e000      	b.n	800764a <__cvt+0x44>
 8007648:	2103      	movs	r1, #3
 800764a:	ab03      	add	r3, sp, #12
 800764c:	9301      	str	r3, [sp, #4]
 800764e:	ab02      	add	r3, sp, #8
 8007650:	9300      	str	r3, [sp, #0]
 8007652:	ec47 6b10 	vmov	d0, r6, r7
 8007656:	4653      	mov	r3, sl
 8007658:	4622      	mov	r2, r4
 800765a:	f000 fe6d 	bl	8008338 <_dtoa_r>
 800765e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007662:	4605      	mov	r5, r0
 8007664:	d119      	bne.n	800769a <__cvt+0x94>
 8007666:	f019 0f01 	tst.w	r9, #1
 800766a:	d00e      	beq.n	800768a <__cvt+0x84>
 800766c:	eb00 0904 	add.w	r9, r0, r4
 8007670:	2200      	movs	r2, #0
 8007672:	2300      	movs	r3, #0
 8007674:	4630      	mov	r0, r6
 8007676:	4639      	mov	r1, r7
 8007678:	f7f9 fa46 	bl	8000b08 <__aeabi_dcmpeq>
 800767c:	b108      	cbz	r0, 8007682 <__cvt+0x7c>
 800767e:	f8cd 900c 	str.w	r9, [sp, #12]
 8007682:	2230      	movs	r2, #48	@ 0x30
 8007684:	9b03      	ldr	r3, [sp, #12]
 8007686:	454b      	cmp	r3, r9
 8007688:	d31e      	bcc.n	80076c8 <__cvt+0xc2>
 800768a:	9b03      	ldr	r3, [sp, #12]
 800768c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800768e:	1b5b      	subs	r3, r3, r5
 8007690:	4628      	mov	r0, r5
 8007692:	6013      	str	r3, [r2, #0]
 8007694:	b004      	add	sp, #16
 8007696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800769a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800769e:	eb00 0904 	add.w	r9, r0, r4
 80076a2:	d1e5      	bne.n	8007670 <__cvt+0x6a>
 80076a4:	7803      	ldrb	r3, [r0, #0]
 80076a6:	2b30      	cmp	r3, #48	@ 0x30
 80076a8:	d10a      	bne.n	80076c0 <__cvt+0xba>
 80076aa:	2200      	movs	r2, #0
 80076ac:	2300      	movs	r3, #0
 80076ae:	4630      	mov	r0, r6
 80076b0:	4639      	mov	r1, r7
 80076b2:	f7f9 fa29 	bl	8000b08 <__aeabi_dcmpeq>
 80076b6:	b918      	cbnz	r0, 80076c0 <__cvt+0xba>
 80076b8:	f1c4 0401 	rsb	r4, r4, #1
 80076bc:	f8ca 4000 	str.w	r4, [sl]
 80076c0:	f8da 3000 	ldr.w	r3, [sl]
 80076c4:	4499      	add	r9, r3
 80076c6:	e7d3      	b.n	8007670 <__cvt+0x6a>
 80076c8:	1c59      	adds	r1, r3, #1
 80076ca:	9103      	str	r1, [sp, #12]
 80076cc:	701a      	strb	r2, [r3, #0]
 80076ce:	e7d9      	b.n	8007684 <__cvt+0x7e>

080076d0 <__exponent>:
 80076d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076d2:	2900      	cmp	r1, #0
 80076d4:	bfba      	itte	lt
 80076d6:	4249      	neglt	r1, r1
 80076d8:	232d      	movlt	r3, #45	@ 0x2d
 80076da:	232b      	movge	r3, #43	@ 0x2b
 80076dc:	2909      	cmp	r1, #9
 80076de:	7002      	strb	r2, [r0, #0]
 80076e0:	7043      	strb	r3, [r0, #1]
 80076e2:	dd29      	ble.n	8007738 <__exponent+0x68>
 80076e4:	f10d 0307 	add.w	r3, sp, #7
 80076e8:	461d      	mov	r5, r3
 80076ea:	270a      	movs	r7, #10
 80076ec:	461a      	mov	r2, r3
 80076ee:	fbb1 f6f7 	udiv	r6, r1, r7
 80076f2:	fb07 1416 	mls	r4, r7, r6, r1
 80076f6:	3430      	adds	r4, #48	@ 0x30
 80076f8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80076fc:	460c      	mov	r4, r1
 80076fe:	2c63      	cmp	r4, #99	@ 0x63
 8007700:	f103 33ff 	add.w	r3, r3, #4294967295
 8007704:	4631      	mov	r1, r6
 8007706:	dcf1      	bgt.n	80076ec <__exponent+0x1c>
 8007708:	3130      	adds	r1, #48	@ 0x30
 800770a:	1e94      	subs	r4, r2, #2
 800770c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007710:	1c41      	adds	r1, r0, #1
 8007712:	4623      	mov	r3, r4
 8007714:	42ab      	cmp	r3, r5
 8007716:	d30a      	bcc.n	800772e <__exponent+0x5e>
 8007718:	f10d 0309 	add.w	r3, sp, #9
 800771c:	1a9b      	subs	r3, r3, r2
 800771e:	42ac      	cmp	r4, r5
 8007720:	bf88      	it	hi
 8007722:	2300      	movhi	r3, #0
 8007724:	3302      	adds	r3, #2
 8007726:	4403      	add	r3, r0
 8007728:	1a18      	subs	r0, r3, r0
 800772a:	b003      	add	sp, #12
 800772c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800772e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007732:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007736:	e7ed      	b.n	8007714 <__exponent+0x44>
 8007738:	2330      	movs	r3, #48	@ 0x30
 800773a:	3130      	adds	r1, #48	@ 0x30
 800773c:	7083      	strb	r3, [r0, #2]
 800773e:	70c1      	strb	r1, [r0, #3]
 8007740:	1d03      	adds	r3, r0, #4
 8007742:	e7f1      	b.n	8007728 <__exponent+0x58>

08007744 <_printf_float>:
 8007744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007748:	b08d      	sub	sp, #52	@ 0x34
 800774a:	460c      	mov	r4, r1
 800774c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007750:	4616      	mov	r6, r2
 8007752:	461f      	mov	r7, r3
 8007754:	4605      	mov	r5, r0
 8007756:	f000 fcef 	bl	8008138 <_localeconv_r>
 800775a:	6803      	ldr	r3, [r0, #0]
 800775c:	9304      	str	r3, [sp, #16]
 800775e:	4618      	mov	r0, r3
 8007760:	f7f8 fda6 	bl	80002b0 <strlen>
 8007764:	2300      	movs	r3, #0
 8007766:	930a      	str	r3, [sp, #40]	@ 0x28
 8007768:	f8d8 3000 	ldr.w	r3, [r8]
 800776c:	9005      	str	r0, [sp, #20]
 800776e:	3307      	adds	r3, #7
 8007770:	f023 0307 	bic.w	r3, r3, #7
 8007774:	f103 0208 	add.w	r2, r3, #8
 8007778:	f894 a018 	ldrb.w	sl, [r4, #24]
 800777c:	f8d4 b000 	ldr.w	fp, [r4]
 8007780:	f8c8 2000 	str.w	r2, [r8]
 8007784:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007788:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800778c:	9307      	str	r3, [sp, #28]
 800778e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007792:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007796:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800779a:	4b9c      	ldr	r3, [pc, #624]	@ (8007a0c <_printf_float+0x2c8>)
 800779c:	f04f 32ff 	mov.w	r2, #4294967295
 80077a0:	f7f9 f9e4 	bl	8000b6c <__aeabi_dcmpun>
 80077a4:	bb70      	cbnz	r0, 8007804 <_printf_float+0xc0>
 80077a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077aa:	4b98      	ldr	r3, [pc, #608]	@ (8007a0c <_printf_float+0x2c8>)
 80077ac:	f04f 32ff 	mov.w	r2, #4294967295
 80077b0:	f7f9 f9be 	bl	8000b30 <__aeabi_dcmple>
 80077b4:	bb30      	cbnz	r0, 8007804 <_printf_float+0xc0>
 80077b6:	2200      	movs	r2, #0
 80077b8:	2300      	movs	r3, #0
 80077ba:	4640      	mov	r0, r8
 80077bc:	4649      	mov	r1, r9
 80077be:	f7f9 f9ad 	bl	8000b1c <__aeabi_dcmplt>
 80077c2:	b110      	cbz	r0, 80077ca <_printf_float+0x86>
 80077c4:	232d      	movs	r3, #45	@ 0x2d
 80077c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077ca:	4a91      	ldr	r2, [pc, #580]	@ (8007a10 <_printf_float+0x2cc>)
 80077cc:	4b91      	ldr	r3, [pc, #580]	@ (8007a14 <_printf_float+0x2d0>)
 80077ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80077d2:	bf94      	ite	ls
 80077d4:	4690      	movls	r8, r2
 80077d6:	4698      	movhi	r8, r3
 80077d8:	2303      	movs	r3, #3
 80077da:	6123      	str	r3, [r4, #16]
 80077dc:	f02b 0304 	bic.w	r3, fp, #4
 80077e0:	6023      	str	r3, [r4, #0]
 80077e2:	f04f 0900 	mov.w	r9, #0
 80077e6:	9700      	str	r7, [sp, #0]
 80077e8:	4633      	mov	r3, r6
 80077ea:	aa0b      	add	r2, sp, #44	@ 0x2c
 80077ec:	4621      	mov	r1, r4
 80077ee:	4628      	mov	r0, r5
 80077f0:	f000 f9d2 	bl	8007b98 <_printf_common>
 80077f4:	3001      	adds	r0, #1
 80077f6:	f040 808d 	bne.w	8007914 <_printf_float+0x1d0>
 80077fa:	f04f 30ff 	mov.w	r0, #4294967295
 80077fe:	b00d      	add	sp, #52	@ 0x34
 8007800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007804:	4642      	mov	r2, r8
 8007806:	464b      	mov	r3, r9
 8007808:	4640      	mov	r0, r8
 800780a:	4649      	mov	r1, r9
 800780c:	f7f9 f9ae 	bl	8000b6c <__aeabi_dcmpun>
 8007810:	b140      	cbz	r0, 8007824 <_printf_float+0xe0>
 8007812:	464b      	mov	r3, r9
 8007814:	2b00      	cmp	r3, #0
 8007816:	bfbc      	itt	lt
 8007818:	232d      	movlt	r3, #45	@ 0x2d
 800781a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800781e:	4a7e      	ldr	r2, [pc, #504]	@ (8007a18 <_printf_float+0x2d4>)
 8007820:	4b7e      	ldr	r3, [pc, #504]	@ (8007a1c <_printf_float+0x2d8>)
 8007822:	e7d4      	b.n	80077ce <_printf_float+0x8a>
 8007824:	6863      	ldr	r3, [r4, #4]
 8007826:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800782a:	9206      	str	r2, [sp, #24]
 800782c:	1c5a      	adds	r2, r3, #1
 800782e:	d13b      	bne.n	80078a8 <_printf_float+0x164>
 8007830:	2306      	movs	r3, #6
 8007832:	6063      	str	r3, [r4, #4]
 8007834:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007838:	2300      	movs	r3, #0
 800783a:	6022      	str	r2, [r4, #0]
 800783c:	9303      	str	r3, [sp, #12]
 800783e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007840:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007844:	ab09      	add	r3, sp, #36	@ 0x24
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	6861      	ldr	r1, [r4, #4]
 800784a:	ec49 8b10 	vmov	d0, r8, r9
 800784e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007852:	4628      	mov	r0, r5
 8007854:	f7ff fed7 	bl	8007606 <__cvt>
 8007858:	9b06      	ldr	r3, [sp, #24]
 800785a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800785c:	2b47      	cmp	r3, #71	@ 0x47
 800785e:	4680      	mov	r8, r0
 8007860:	d129      	bne.n	80078b6 <_printf_float+0x172>
 8007862:	1cc8      	adds	r0, r1, #3
 8007864:	db02      	blt.n	800786c <_printf_float+0x128>
 8007866:	6863      	ldr	r3, [r4, #4]
 8007868:	4299      	cmp	r1, r3
 800786a:	dd41      	ble.n	80078f0 <_printf_float+0x1ac>
 800786c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007870:	fa5f fa8a 	uxtb.w	sl, sl
 8007874:	3901      	subs	r1, #1
 8007876:	4652      	mov	r2, sl
 8007878:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800787c:	9109      	str	r1, [sp, #36]	@ 0x24
 800787e:	f7ff ff27 	bl	80076d0 <__exponent>
 8007882:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007884:	1813      	adds	r3, r2, r0
 8007886:	2a01      	cmp	r2, #1
 8007888:	4681      	mov	r9, r0
 800788a:	6123      	str	r3, [r4, #16]
 800788c:	dc02      	bgt.n	8007894 <_printf_float+0x150>
 800788e:	6822      	ldr	r2, [r4, #0]
 8007890:	07d2      	lsls	r2, r2, #31
 8007892:	d501      	bpl.n	8007898 <_printf_float+0x154>
 8007894:	3301      	adds	r3, #1
 8007896:	6123      	str	r3, [r4, #16]
 8007898:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800789c:	2b00      	cmp	r3, #0
 800789e:	d0a2      	beq.n	80077e6 <_printf_float+0xa2>
 80078a0:	232d      	movs	r3, #45	@ 0x2d
 80078a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078a6:	e79e      	b.n	80077e6 <_printf_float+0xa2>
 80078a8:	9a06      	ldr	r2, [sp, #24]
 80078aa:	2a47      	cmp	r2, #71	@ 0x47
 80078ac:	d1c2      	bne.n	8007834 <_printf_float+0xf0>
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1c0      	bne.n	8007834 <_printf_float+0xf0>
 80078b2:	2301      	movs	r3, #1
 80078b4:	e7bd      	b.n	8007832 <_printf_float+0xee>
 80078b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80078ba:	d9db      	bls.n	8007874 <_printf_float+0x130>
 80078bc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80078c0:	d118      	bne.n	80078f4 <_printf_float+0x1b0>
 80078c2:	2900      	cmp	r1, #0
 80078c4:	6863      	ldr	r3, [r4, #4]
 80078c6:	dd0b      	ble.n	80078e0 <_printf_float+0x19c>
 80078c8:	6121      	str	r1, [r4, #16]
 80078ca:	b913      	cbnz	r3, 80078d2 <_printf_float+0x18e>
 80078cc:	6822      	ldr	r2, [r4, #0]
 80078ce:	07d0      	lsls	r0, r2, #31
 80078d0:	d502      	bpl.n	80078d8 <_printf_float+0x194>
 80078d2:	3301      	adds	r3, #1
 80078d4:	440b      	add	r3, r1
 80078d6:	6123      	str	r3, [r4, #16]
 80078d8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80078da:	f04f 0900 	mov.w	r9, #0
 80078de:	e7db      	b.n	8007898 <_printf_float+0x154>
 80078e0:	b913      	cbnz	r3, 80078e8 <_printf_float+0x1a4>
 80078e2:	6822      	ldr	r2, [r4, #0]
 80078e4:	07d2      	lsls	r2, r2, #31
 80078e6:	d501      	bpl.n	80078ec <_printf_float+0x1a8>
 80078e8:	3302      	adds	r3, #2
 80078ea:	e7f4      	b.n	80078d6 <_printf_float+0x192>
 80078ec:	2301      	movs	r3, #1
 80078ee:	e7f2      	b.n	80078d6 <_printf_float+0x192>
 80078f0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80078f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078f6:	4299      	cmp	r1, r3
 80078f8:	db05      	blt.n	8007906 <_printf_float+0x1c2>
 80078fa:	6823      	ldr	r3, [r4, #0]
 80078fc:	6121      	str	r1, [r4, #16]
 80078fe:	07d8      	lsls	r0, r3, #31
 8007900:	d5ea      	bpl.n	80078d8 <_printf_float+0x194>
 8007902:	1c4b      	adds	r3, r1, #1
 8007904:	e7e7      	b.n	80078d6 <_printf_float+0x192>
 8007906:	2900      	cmp	r1, #0
 8007908:	bfd4      	ite	le
 800790a:	f1c1 0202 	rsble	r2, r1, #2
 800790e:	2201      	movgt	r2, #1
 8007910:	4413      	add	r3, r2
 8007912:	e7e0      	b.n	80078d6 <_printf_float+0x192>
 8007914:	6823      	ldr	r3, [r4, #0]
 8007916:	055a      	lsls	r2, r3, #21
 8007918:	d407      	bmi.n	800792a <_printf_float+0x1e6>
 800791a:	6923      	ldr	r3, [r4, #16]
 800791c:	4642      	mov	r2, r8
 800791e:	4631      	mov	r1, r6
 8007920:	4628      	mov	r0, r5
 8007922:	47b8      	blx	r7
 8007924:	3001      	adds	r0, #1
 8007926:	d12b      	bne.n	8007980 <_printf_float+0x23c>
 8007928:	e767      	b.n	80077fa <_printf_float+0xb6>
 800792a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800792e:	f240 80dd 	bls.w	8007aec <_printf_float+0x3a8>
 8007932:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007936:	2200      	movs	r2, #0
 8007938:	2300      	movs	r3, #0
 800793a:	f7f9 f8e5 	bl	8000b08 <__aeabi_dcmpeq>
 800793e:	2800      	cmp	r0, #0
 8007940:	d033      	beq.n	80079aa <_printf_float+0x266>
 8007942:	4a37      	ldr	r2, [pc, #220]	@ (8007a20 <_printf_float+0x2dc>)
 8007944:	2301      	movs	r3, #1
 8007946:	4631      	mov	r1, r6
 8007948:	4628      	mov	r0, r5
 800794a:	47b8      	blx	r7
 800794c:	3001      	adds	r0, #1
 800794e:	f43f af54 	beq.w	80077fa <_printf_float+0xb6>
 8007952:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007956:	4543      	cmp	r3, r8
 8007958:	db02      	blt.n	8007960 <_printf_float+0x21c>
 800795a:	6823      	ldr	r3, [r4, #0]
 800795c:	07d8      	lsls	r0, r3, #31
 800795e:	d50f      	bpl.n	8007980 <_printf_float+0x23c>
 8007960:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007964:	4631      	mov	r1, r6
 8007966:	4628      	mov	r0, r5
 8007968:	47b8      	blx	r7
 800796a:	3001      	adds	r0, #1
 800796c:	f43f af45 	beq.w	80077fa <_printf_float+0xb6>
 8007970:	f04f 0900 	mov.w	r9, #0
 8007974:	f108 38ff 	add.w	r8, r8, #4294967295
 8007978:	f104 0a1a 	add.w	sl, r4, #26
 800797c:	45c8      	cmp	r8, r9
 800797e:	dc09      	bgt.n	8007994 <_printf_float+0x250>
 8007980:	6823      	ldr	r3, [r4, #0]
 8007982:	079b      	lsls	r3, r3, #30
 8007984:	f100 8103 	bmi.w	8007b8e <_printf_float+0x44a>
 8007988:	68e0      	ldr	r0, [r4, #12]
 800798a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800798c:	4298      	cmp	r0, r3
 800798e:	bfb8      	it	lt
 8007990:	4618      	movlt	r0, r3
 8007992:	e734      	b.n	80077fe <_printf_float+0xba>
 8007994:	2301      	movs	r3, #1
 8007996:	4652      	mov	r2, sl
 8007998:	4631      	mov	r1, r6
 800799a:	4628      	mov	r0, r5
 800799c:	47b8      	blx	r7
 800799e:	3001      	adds	r0, #1
 80079a0:	f43f af2b 	beq.w	80077fa <_printf_float+0xb6>
 80079a4:	f109 0901 	add.w	r9, r9, #1
 80079a8:	e7e8      	b.n	800797c <_printf_float+0x238>
 80079aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	dc39      	bgt.n	8007a24 <_printf_float+0x2e0>
 80079b0:	4a1b      	ldr	r2, [pc, #108]	@ (8007a20 <_printf_float+0x2dc>)
 80079b2:	2301      	movs	r3, #1
 80079b4:	4631      	mov	r1, r6
 80079b6:	4628      	mov	r0, r5
 80079b8:	47b8      	blx	r7
 80079ba:	3001      	adds	r0, #1
 80079bc:	f43f af1d 	beq.w	80077fa <_printf_float+0xb6>
 80079c0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80079c4:	ea59 0303 	orrs.w	r3, r9, r3
 80079c8:	d102      	bne.n	80079d0 <_printf_float+0x28c>
 80079ca:	6823      	ldr	r3, [r4, #0]
 80079cc:	07d9      	lsls	r1, r3, #31
 80079ce:	d5d7      	bpl.n	8007980 <_printf_float+0x23c>
 80079d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079d4:	4631      	mov	r1, r6
 80079d6:	4628      	mov	r0, r5
 80079d8:	47b8      	blx	r7
 80079da:	3001      	adds	r0, #1
 80079dc:	f43f af0d 	beq.w	80077fa <_printf_float+0xb6>
 80079e0:	f04f 0a00 	mov.w	sl, #0
 80079e4:	f104 0b1a 	add.w	fp, r4, #26
 80079e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079ea:	425b      	negs	r3, r3
 80079ec:	4553      	cmp	r3, sl
 80079ee:	dc01      	bgt.n	80079f4 <_printf_float+0x2b0>
 80079f0:	464b      	mov	r3, r9
 80079f2:	e793      	b.n	800791c <_printf_float+0x1d8>
 80079f4:	2301      	movs	r3, #1
 80079f6:	465a      	mov	r2, fp
 80079f8:	4631      	mov	r1, r6
 80079fa:	4628      	mov	r0, r5
 80079fc:	47b8      	blx	r7
 80079fe:	3001      	adds	r0, #1
 8007a00:	f43f aefb 	beq.w	80077fa <_printf_float+0xb6>
 8007a04:	f10a 0a01 	add.w	sl, sl, #1
 8007a08:	e7ee      	b.n	80079e8 <_printf_float+0x2a4>
 8007a0a:	bf00      	nop
 8007a0c:	7fefffff 	.word	0x7fefffff
 8007a10:	0800c45c 	.word	0x0800c45c
 8007a14:	0800c460 	.word	0x0800c460
 8007a18:	0800c464 	.word	0x0800c464
 8007a1c:	0800c468 	.word	0x0800c468
 8007a20:	0800c46c 	.word	0x0800c46c
 8007a24:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007a26:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007a2a:	4553      	cmp	r3, sl
 8007a2c:	bfa8      	it	ge
 8007a2e:	4653      	movge	r3, sl
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	4699      	mov	r9, r3
 8007a34:	dc36      	bgt.n	8007aa4 <_printf_float+0x360>
 8007a36:	f04f 0b00 	mov.w	fp, #0
 8007a3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a3e:	f104 021a 	add.w	r2, r4, #26
 8007a42:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007a44:	9306      	str	r3, [sp, #24]
 8007a46:	eba3 0309 	sub.w	r3, r3, r9
 8007a4a:	455b      	cmp	r3, fp
 8007a4c:	dc31      	bgt.n	8007ab2 <_printf_float+0x36e>
 8007a4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a50:	459a      	cmp	sl, r3
 8007a52:	dc3a      	bgt.n	8007aca <_printf_float+0x386>
 8007a54:	6823      	ldr	r3, [r4, #0]
 8007a56:	07da      	lsls	r2, r3, #31
 8007a58:	d437      	bmi.n	8007aca <_printf_float+0x386>
 8007a5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a5c:	ebaa 0903 	sub.w	r9, sl, r3
 8007a60:	9b06      	ldr	r3, [sp, #24]
 8007a62:	ebaa 0303 	sub.w	r3, sl, r3
 8007a66:	4599      	cmp	r9, r3
 8007a68:	bfa8      	it	ge
 8007a6a:	4699      	movge	r9, r3
 8007a6c:	f1b9 0f00 	cmp.w	r9, #0
 8007a70:	dc33      	bgt.n	8007ada <_printf_float+0x396>
 8007a72:	f04f 0800 	mov.w	r8, #0
 8007a76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a7a:	f104 0b1a 	add.w	fp, r4, #26
 8007a7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a80:	ebaa 0303 	sub.w	r3, sl, r3
 8007a84:	eba3 0309 	sub.w	r3, r3, r9
 8007a88:	4543      	cmp	r3, r8
 8007a8a:	f77f af79 	ble.w	8007980 <_printf_float+0x23c>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	465a      	mov	r2, fp
 8007a92:	4631      	mov	r1, r6
 8007a94:	4628      	mov	r0, r5
 8007a96:	47b8      	blx	r7
 8007a98:	3001      	adds	r0, #1
 8007a9a:	f43f aeae 	beq.w	80077fa <_printf_float+0xb6>
 8007a9e:	f108 0801 	add.w	r8, r8, #1
 8007aa2:	e7ec      	b.n	8007a7e <_printf_float+0x33a>
 8007aa4:	4642      	mov	r2, r8
 8007aa6:	4631      	mov	r1, r6
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	47b8      	blx	r7
 8007aac:	3001      	adds	r0, #1
 8007aae:	d1c2      	bne.n	8007a36 <_printf_float+0x2f2>
 8007ab0:	e6a3      	b.n	80077fa <_printf_float+0xb6>
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	4631      	mov	r1, r6
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	9206      	str	r2, [sp, #24]
 8007aba:	47b8      	blx	r7
 8007abc:	3001      	adds	r0, #1
 8007abe:	f43f ae9c 	beq.w	80077fa <_printf_float+0xb6>
 8007ac2:	9a06      	ldr	r2, [sp, #24]
 8007ac4:	f10b 0b01 	add.w	fp, fp, #1
 8007ac8:	e7bb      	b.n	8007a42 <_printf_float+0x2fe>
 8007aca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ace:	4631      	mov	r1, r6
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	47b8      	blx	r7
 8007ad4:	3001      	adds	r0, #1
 8007ad6:	d1c0      	bne.n	8007a5a <_printf_float+0x316>
 8007ad8:	e68f      	b.n	80077fa <_printf_float+0xb6>
 8007ada:	9a06      	ldr	r2, [sp, #24]
 8007adc:	464b      	mov	r3, r9
 8007ade:	4442      	add	r2, r8
 8007ae0:	4631      	mov	r1, r6
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	47b8      	blx	r7
 8007ae6:	3001      	adds	r0, #1
 8007ae8:	d1c3      	bne.n	8007a72 <_printf_float+0x32e>
 8007aea:	e686      	b.n	80077fa <_printf_float+0xb6>
 8007aec:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007af0:	f1ba 0f01 	cmp.w	sl, #1
 8007af4:	dc01      	bgt.n	8007afa <_printf_float+0x3b6>
 8007af6:	07db      	lsls	r3, r3, #31
 8007af8:	d536      	bpl.n	8007b68 <_printf_float+0x424>
 8007afa:	2301      	movs	r3, #1
 8007afc:	4642      	mov	r2, r8
 8007afe:	4631      	mov	r1, r6
 8007b00:	4628      	mov	r0, r5
 8007b02:	47b8      	blx	r7
 8007b04:	3001      	adds	r0, #1
 8007b06:	f43f ae78 	beq.w	80077fa <_printf_float+0xb6>
 8007b0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b0e:	4631      	mov	r1, r6
 8007b10:	4628      	mov	r0, r5
 8007b12:	47b8      	blx	r7
 8007b14:	3001      	adds	r0, #1
 8007b16:	f43f ae70 	beq.w	80077fa <_printf_float+0xb6>
 8007b1a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007b1e:	2200      	movs	r2, #0
 8007b20:	2300      	movs	r3, #0
 8007b22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b26:	f7f8 ffef 	bl	8000b08 <__aeabi_dcmpeq>
 8007b2a:	b9c0      	cbnz	r0, 8007b5e <_printf_float+0x41a>
 8007b2c:	4653      	mov	r3, sl
 8007b2e:	f108 0201 	add.w	r2, r8, #1
 8007b32:	4631      	mov	r1, r6
 8007b34:	4628      	mov	r0, r5
 8007b36:	47b8      	blx	r7
 8007b38:	3001      	adds	r0, #1
 8007b3a:	d10c      	bne.n	8007b56 <_printf_float+0x412>
 8007b3c:	e65d      	b.n	80077fa <_printf_float+0xb6>
 8007b3e:	2301      	movs	r3, #1
 8007b40:	465a      	mov	r2, fp
 8007b42:	4631      	mov	r1, r6
 8007b44:	4628      	mov	r0, r5
 8007b46:	47b8      	blx	r7
 8007b48:	3001      	adds	r0, #1
 8007b4a:	f43f ae56 	beq.w	80077fa <_printf_float+0xb6>
 8007b4e:	f108 0801 	add.w	r8, r8, #1
 8007b52:	45d0      	cmp	r8, sl
 8007b54:	dbf3      	blt.n	8007b3e <_printf_float+0x3fa>
 8007b56:	464b      	mov	r3, r9
 8007b58:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007b5c:	e6df      	b.n	800791e <_printf_float+0x1da>
 8007b5e:	f04f 0800 	mov.w	r8, #0
 8007b62:	f104 0b1a 	add.w	fp, r4, #26
 8007b66:	e7f4      	b.n	8007b52 <_printf_float+0x40e>
 8007b68:	2301      	movs	r3, #1
 8007b6a:	4642      	mov	r2, r8
 8007b6c:	e7e1      	b.n	8007b32 <_printf_float+0x3ee>
 8007b6e:	2301      	movs	r3, #1
 8007b70:	464a      	mov	r2, r9
 8007b72:	4631      	mov	r1, r6
 8007b74:	4628      	mov	r0, r5
 8007b76:	47b8      	blx	r7
 8007b78:	3001      	adds	r0, #1
 8007b7a:	f43f ae3e 	beq.w	80077fa <_printf_float+0xb6>
 8007b7e:	f108 0801 	add.w	r8, r8, #1
 8007b82:	68e3      	ldr	r3, [r4, #12]
 8007b84:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007b86:	1a5b      	subs	r3, r3, r1
 8007b88:	4543      	cmp	r3, r8
 8007b8a:	dcf0      	bgt.n	8007b6e <_printf_float+0x42a>
 8007b8c:	e6fc      	b.n	8007988 <_printf_float+0x244>
 8007b8e:	f04f 0800 	mov.w	r8, #0
 8007b92:	f104 0919 	add.w	r9, r4, #25
 8007b96:	e7f4      	b.n	8007b82 <_printf_float+0x43e>

08007b98 <_printf_common>:
 8007b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b9c:	4616      	mov	r6, r2
 8007b9e:	4698      	mov	r8, r3
 8007ba0:	688a      	ldr	r2, [r1, #8]
 8007ba2:	690b      	ldr	r3, [r1, #16]
 8007ba4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	bfb8      	it	lt
 8007bac:	4613      	movlt	r3, r2
 8007bae:	6033      	str	r3, [r6, #0]
 8007bb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007bb4:	4607      	mov	r7, r0
 8007bb6:	460c      	mov	r4, r1
 8007bb8:	b10a      	cbz	r2, 8007bbe <_printf_common+0x26>
 8007bba:	3301      	adds	r3, #1
 8007bbc:	6033      	str	r3, [r6, #0]
 8007bbe:	6823      	ldr	r3, [r4, #0]
 8007bc0:	0699      	lsls	r1, r3, #26
 8007bc2:	bf42      	ittt	mi
 8007bc4:	6833      	ldrmi	r3, [r6, #0]
 8007bc6:	3302      	addmi	r3, #2
 8007bc8:	6033      	strmi	r3, [r6, #0]
 8007bca:	6825      	ldr	r5, [r4, #0]
 8007bcc:	f015 0506 	ands.w	r5, r5, #6
 8007bd0:	d106      	bne.n	8007be0 <_printf_common+0x48>
 8007bd2:	f104 0a19 	add.w	sl, r4, #25
 8007bd6:	68e3      	ldr	r3, [r4, #12]
 8007bd8:	6832      	ldr	r2, [r6, #0]
 8007bda:	1a9b      	subs	r3, r3, r2
 8007bdc:	42ab      	cmp	r3, r5
 8007bde:	dc26      	bgt.n	8007c2e <_printf_common+0x96>
 8007be0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007be4:	6822      	ldr	r2, [r4, #0]
 8007be6:	3b00      	subs	r3, #0
 8007be8:	bf18      	it	ne
 8007bea:	2301      	movne	r3, #1
 8007bec:	0692      	lsls	r2, r2, #26
 8007bee:	d42b      	bmi.n	8007c48 <_printf_common+0xb0>
 8007bf0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007bf4:	4641      	mov	r1, r8
 8007bf6:	4638      	mov	r0, r7
 8007bf8:	47c8      	blx	r9
 8007bfa:	3001      	adds	r0, #1
 8007bfc:	d01e      	beq.n	8007c3c <_printf_common+0xa4>
 8007bfe:	6823      	ldr	r3, [r4, #0]
 8007c00:	6922      	ldr	r2, [r4, #16]
 8007c02:	f003 0306 	and.w	r3, r3, #6
 8007c06:	2b04      	cmp	r3, #4
 8007c08:	bf02      	ittt	eq
 8007c0a:	68e5      	ldreq	r5, [r4, #12]
 8007c0c:	6833      	ldreq	r3, [r6, #0]
 8007c0e:	1aed      	subeq	r5, r5, r3
 8007c10:	68a3      	ldr	r3, [r4, #8]
 8007c12:	bf0c      	ite	eq
 8007c14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c18:	2500      	movne	r5, #0
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	bfc4      	itt	gt
 8007c1e:	1a9b      	subgt	r3, r3, r2
 8007c20:	18ed      	addgt	r5, r5, r3
 8007c22:	2600      	movs	r6, #0
 8007c24:	341a      	adds	r4, #26
 8007c26:	42b5      	cmp	r5, r6
 8007c28:	d11a      	bne.n	8007c60 <_printf_common+0xc8>
 8007c2a:	2000      	movs	r0, #0
 8007c2c:	e008      	b.n	8007c40 <_printf_common+0xa8>
 8007c2e:	2301      	movs	r3, #1
 8007c30:	4652      	mov	r2, sl
 8007c32:	4641      	mov	r1, r8
 8007c34:	4638      	mov	r0, r7
 8007c36:	47c8      	blx	r9
 8007c38:	3001      	adds	r0, #1
 8007c3a:	d103      	bne.n	8007c44 <_printf_common+0xac>
 8007c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c44:	3501      	adds	r5, #1
 8007c46:	e7c6      	b.n	8007bd6 <_printf_common+0x3e>
 8007c48:	18e1      	adds	r1, r4, r3
 8007c4a:	1c5a      	adds	r2, r3, #1
 8007c4c:	2030      	movs	r0, #48	@ 0x30
 8007c4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007c52:	4422      	add	r2, r4
 8007c54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007c58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007c5c:	3302      	adds	r3, #2
 8007c5e:	e7c7      	b.n	8007bf0 <_printf_common+0x58>
 8007c60:	2301      	movs	r3, #1
 8007c62:	4622      	mov	r2, r4
 8007c64:	4641      	mov	r1, r8
 8007c66:	4638      	mov	r0, r7
 8007c68:	47c8      	blx	r9
 8007c6a:	3001      	adds	r0, #1
 8007c6c:	d0e6      	beq.n	8007c3c <_printf_common+0xa4>
 8007c6e:	3601      	adds	r6, #1
 8007c70:	e7d9      	b.n	8007c26 <_printf_common+0x8e>
	...

08007c74 <_printf_i>:
 8007c74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c78:	7e0f      	ldrb	r7, [r1, #24]
 8007c7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007c7c:	2f78      	cmp	r7, #120	@ 0x78
 8007c7e:	4691      	mov	r9, r2
 8007c80:	4680      	mov	r8, r0
 8007c82:	460c      	mov	r4, r1
 8007c84:	469a      	mov	sl, r3
 8007c86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007c8a:	d807      	bhi.n	8007c9c <_printf_i+0x28>
 8007c8c:	2f62      	cmp	r7, #98	@ 0x62
 8007c8e:	d80a      	bhi.n	8007ca6 <_printf_i+0x32>
 8007c90:	2f00      	cmp	r7, #0
 8007c92:	f000 80d2 	beq.w	8007e3a <_printf_i+0x1c6>
 8007c96:	2f58      	cmp	r7, #88	@ 0x58
 8007c98:	f000 80b9 	beq.w	8007e0e <_printf_i+0x19a>
 8007c9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ca0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007ca4:	e03a      	b.n	8007d1c <_printf_i+0xa8>
 8007ca6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007caa:	2b15      	cmp	r3, #21
 8007cac:	d8f6      	bhi.n	8007c9c <_printf_i+0x28>
 8007cae:	a101      	add	r1, pc, #4	@ (adr r1, 8007cb4 <_printf_i+0x40>)
 8007cb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007cb4:	08007d0d 	.word	0x08007d0d
 8007cb8:	08007d21 	.word	0x08007d21
 8007cbc:	08007c9d 	.word	0x08007c9d
 8007cc0:	08007c9d 	.word	0x08007c9d
 8007cc4:	08007c9d 	.word	0x08007c9d
 8007cc8:	08007c9d 	.word	0x08007c9d
 8007ccc:	08007d21 	.word	0x08007d21
 8007cd0:	08007c9d 	.word	0x08007c9d
 8007cd4:	08007c9d 	.word	0x08007c9d
 8007cd8:	08007c9d 	.word	0x08007c9d
 8007cdc:	08007c9d 	.word	0x08007c9d
 8007ce0:	08007e21 	.word	0x08007e21
 8007ce4:	08007d4b 	.word	0x08007d4b
 8007ce8:	08007ddb 	.word	0x08007ddb
 8007cec:	08007c9d 	.word	0x08007c9d
 8007cf0:	08007c9d 	.word	0x08007c9d
 8007cf4:	08007e43 	.word	0x08007e43
 8007cf8:	08007c9d 	.word	0x08007c9d
 8007cfc:	08007d4b 	.word	0x08007d4b
 8007d00:	08007c9d 	.word	0x08007c9d
 8007d04:	08007c9d 	.word	0x08007c9d
 8007d08:	08007de3 	.word	0x08007de3
 8007d0c:	6833      	ldr	r3, [r6, #0]
 8007d0e:	1d1a      	adds	r2, r3, #4
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	6032      	str	r2, [r6, #0]
 8007d14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e09d      	b.n	8007e5c <_printf_i+0x1e8>
 8007d20:	6833      	ldr	r3, [r6, #0]
 8007d22:	6820      	ldr	r0, [r4, #0]
 8007d24:	1d19      	adds	r1, r3, #4
 8007d26:	6031      	str	r1, [r6, #0]
 8007d28:	0606      	lsls	r6, r0, #24
 8007d2a:	d501      	bpl.n	8007d30 <_printf_i+0xbc>
 8007d2c:	681d      	ldr	r5, [r3, #0]
 8007d2e:	e003      	b.n	8007d38 <_printf_i+0xc4>
 8007d30:	0645      	lsls	r5, r0, #25
 8007d32:	d5fb      	bpl.n	8007d2c <_printf_i+0xb8>
 8007d34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007d38:	2d00      	cmp	r5, #0
 8007d3a:	da03      	bge.n	8007d44 <_printf_i+0xd0>
 8007d3c:	232d      	movs	r3, #45	@ 0x2d
 8007d3e:	426d      	negs	r5, r5
 8007d40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d44:	4859      	ldr	r0, [pc, #356]	@ (8007eac <_printf_i+0x238>)
 8007d46:	230a      	movs	r3, #10
 8007d48:	e011      	b.n	8007d6e <_printf_i+0xfa>
 8007d4a:	6821      	ldr	r1, [r4, #0]
 8007d4c:	6833      	ldr	r3, [r6, #0]
 8007d4e:	0608      	lsls	r0, r1, #24
 8007d50:	f853 5b04 	ldr.w	r5, [r3], #4
 8007d54:	d402      	bmi.n	8007d5c <_printf_i+0xe8>
 8007d56:	0649      	lsls	r1, r1, #25
 8007d58:	bf48      	it	mi
 8007d5a:	b2ad      	uxthmi	r5, r5
 8007d5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007d5e:	4853      	ldr	r0, [pc, #332]	@ (8007eac <_printf_i+0x238>)
 8007d60:	6033      	str	r3, [r6, #0]
 8007d62:	bf14      	ite	ne
 8007d64:	230a      	movne	r3, #10
 8007d66:	2308      	moveq	r3, #8
 8007d68:	2100      	movs	r1, #0
 8007d6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007d6e:	6866      	ldr	r6, [r4, #4]
 8007d70:	60a6      	str	r6, [r4, #8]
 8007d72:	2e00      	cmp	r6, #0
 8007d74:	bfa2      	ittt	ge
 8007d76:	6821      	ldrge	r1, [r4, #0]
 8007d78:	f021 0104 	bicge.w	r1, r1, #4
 8007d7c:	6021      	strge	r1, [r4, #0]
 8007d7e:	b90d      	cbnz	r5, 8007d84 <_printf_i+0x110>
 8007d80:	2e00      	cmp	r6, #0
 8007d82:	d04b      	beq.n	8007e1c <_printf_i+0x1a8>
 8007d84:	4616      	mov	r6, r2
 8007d86:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d8a:	fb03 5711 	mls	r7, r3, r1, r5
 8007d8e:	5dc7      	ldrb	r7, [r0, r7]
 8007d90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d94:	462f      	mov	r7, r5
 8007d96:	42bb      	cmp	r3, r7
 8007d98:	460d      	mov	r5, r1
 8007d9a:	d9f4      	bls.n	8007d86 <_printf_i+0x112>
 8007d9c:	2b08      	cmp	r3, #8
 8007d9e:	d10b      	bne.n	8007db8 <_printf_i+0x144>
 8007da0:	6823      	ldr	r3, [r4, #0]
 8007da2:	07df      	lsls	r7, r3, #31
 8007da4:	d508      	bpl.n	8007db8 <_printf_i+0x144>
 8007da6:	6923      	ldr	r3, [r4, #16]
 8007da8:	6861      	ldr	r1, [r4, #4]
 8007daa:	4299      	cmp	r1, r3
 8007dac:	bfde      	ittt	le
 8007dae:	2330      	movle	r3, #48	@ 0x30
 8007db0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007db4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007db8:	1b92      	subs	r2, r2, r6
 8007dba:	6122      	str	r2, [r4, #16]
 8007dbc:	f8cd a000 	str.w	sl, [sp]
 8007dc0:	464b      	mov	r3, r9
 8007dc2:	aa03      	add	r2, sp, #12
 8007dc4:	4621      	mov	r1, r4
 8007dc6:	4640      	mov	r0, r8
 8007dc8:	f7ff fee6 	bl	8007b98 <_printf_common>
 8007dcc:	3001      	adds	r0, #1
 8007dce:	d14a      	bne.n	8007e66 <_printf_i+0x1f2>
 8007dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd4:	b004      	add	sp, #16
 8007dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dda:	6823      	ldr	r3, [r4, #0]
 8007ddc:	f043 0320 	orr.w	r3, r3, #32
 8007de0:	6023      	str	r3, [r4, #0]
 8007de2:	4833      	ldr	r0, [pc, #204]	@ (8007eb0 <_printf_i+0x23c>)
 8007de4:	2778      	movs	r7, #120	@ 0x78
 8007de6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007dea:	6823      	ldr	r3, [r4, #0]
 8007dec:	6831      	ldr	r1, [r6, #0]
 8007dee:	061f      	lsls	r7, r3, #24
 8007df0:	f851 5b04 	ldr.w	r5, [r1], #4
 8007df4:	d402      	bmi.n	8007dfc <_printf_i+0x188>
 8007df6:	065f      	lsls	r7, r3, #25
 8007df8:	bf48      	it	mi
 8007dfa:	b2ad      	uxthmi	r5, r5
 8007dfc:	6031      	str	r1, [r6, #0]
 8007dfe:	07d9      	lsls	r1, r3, #31
 8007e00:	bf44      	itt	mi
 8007e02:	f043 0320 	orrmi.w	r3, r3, #32
 8007e06:	6023      	strmi	r3, [r4, #0]
 8007e08:	b11d      	cbz	r5, 8007e12 <_printf_i+0x19e>
 8007e0a:	2310      	movs	r3, #16
 8007e0c:	e7ac      	b.n	8007d68 <_printf_i+0xf4>
 8007e0e:	4827      	ldr	r0, [pc, #156]	@ (8007eac <_printf_i+0x238>)
 8007e10:	e7e9      	b.n	8007de6 <_printf_i+0x172>
 8007e12:	6823      	ldr	r3, [r4, #0]
 8007e14:	f023 0320 	bic.w	r3, r3, #32
 8007e18:	6023      	str	r3, [r4, #0]
 8007e1a:	e7f6      	b.n	8007e0a <_printf_i+0x196>
 8007e1c:	4616      	mov	r6, r2
 8007e1e:	e7bd      	b.n	8007d9c <_printf_i+0x128>
 8007e20:	6833      	ldr	r3, [r6, #0]
 8007e22:	6825      	ldr	r5, [r4, #0]
 8007e24:	6961      	ldr	r1, [r4, #20]
 8007e26:	1d18      	adds	r0, r3, #4
 8007e28:	6030      	str	r0, [r6, #0]
 8007e2a:	062e      	lsls	r6, r5, #24
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	d501      	bpl.n	8007e34 <_printf_i+0x1c0>
 8007e30:	6019      	str	r1, [r3, #0]
 8007e32:	e002      	b.n	8007e3a <_printf_i+0x1c6>
 8007e34:	0668      	lsls	r0, r5, #25
 8007e36:	d5fb      	bpl.n	8007e30 <_printf_i+0x1bc>
 8007e38:	8019      	strh	r1, [r3, #0]
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	6123      	str	r3, [r4, #16]
 8007e3e:	4616      	mov	r6, r2
 8007e40:	e7bc      	b.n	8007dbc <_printf_i+0x148>
 8007e42:	6833      	ldr	r3, [r6, #0]
 8007e44:	1d1a      	adds	r2, r3, #4
 8007e46:	6032      	str	r2, [r6, #0]
 8007e48:	681e      	ldr	r6, [r3, #0]
 8007e4a:	6862      	ldr	r2, [r4, #4]
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	4630      	mov	r0, r6
 8007e50:	f7f8 f9de 	bl	8000210 <memchr>
 8007e54:	b108      	cbz	r0, 8007e5a <_printf_i+0x1e6>
 8007e56:	1b80      	subs	r0, r0, r6
 8007e58:	6060      	str	r0, [r4, #4]
 8007e5a:	6863      	ldr	r3, [r4, #4]
 8007e5c:	6123      	str	r3, [r4, #16]
 8007e5e:	2300      	movs	r3, #0
 8007e60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e64:	e7aa      	b.n	8007dbc <_printf_i+0x148>
 8007e66:	6923      	ldr	r3, [r4, #16]
 8007e68:	4632      	mov	r2, r6
 8007e6a:	4649      	mov	r1, r9
 8007e6c:	4640      	mov	r0, r8
 8007e6e:	47d0      	blx	sl
 8007e70:	3001      	adds	r0, #1
 8007e72:	d0ad      	beq.n	8007dd0 <_printf_i+0x15c>
 8007e74:	6823      	ldr	r3, [r4, #0]
 8007e76:	079b      	lsls	r3, r3, #30
 8007e78:	d413      	bmi.n	8007ea2 <_printf_i+0x22e>
 8007e7a:	68e0      	ldr	r0, [r4, #12]
 8007e7c:	9b03      	ldr	r3, [sp, #12]
 8007e7e:	4298      	cmp	r0, r3
 8007e80:	bfb8      	it	lt
 8007e82:	4618      	movlt	r0, r3
 8007e84:	e7a6      	b.n	8007dd4 <_printf_i+0x160>
 8007e86:	2301      	movs	r3, #1
 8007e88:	4632      	mov	r2, r6
 8007e8a:	4649      	mov	r1, r9
 8007e8c:	4640      	mov	r0, r8
 8007e8e:	47d0      	blx	sl
 8007e90:	3001      	adds	r0, #1
 8007e92:	d09d      	beq.n	8007dd0 <_printf_i+0x15c>
 8007e94:	3501      	adds	r5, #1
 8007e96:	68e3      	ldr	r3, [r4, #12]
 8007e98:	9903      	ldr	r1, [sp, #12]
 8007e9a:	1a5b      	subs	r3, r3, r1
 8007e9c:	42ab      	cmp	r3, r5
 8007e9e:	dcf2      	bgt.n	8007e86 <_printf_i+0x212>
 8007ea0:	e7eb      	b.n	8007e7a <_printf_i+0x206>
 8007ea2:	2500      	movs	r5, #0
 8007ea4:	f104 0619 	add.w	r6, r4, #25
 8007ea8:	e7f5      	b.n	8007e96 <_printf_i+0x222>
 8007eaa:	bf00      	nop
 8007eac:	0800c46e 	.word	0x0800c46e
 8007eb0:	0800c47f 	.word	0x0800c47f

08007eb4 <std>:
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	b510      	push	{r4, lr}
 8007eb8:	4604      	mov	r4, r0
 8007eba:	e9c0 3300 	strd	r3, r3, [r0]
 8007ebe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ec2:	6083      	str	r3, [r0, #8]
 8007ec4:	8181      	strh	r1, [r0, #12]
 8007ec6:	6643      	str	r3, [r0, #100]	@ 0x64
 8007ec8:	81c2      	strh	r2, [r0, #14]
 8007eca:	6183      	str	r3, [r0, #24]
 8007ecc:	4619      	mov	r1, r3
 8007ece:	2208      	movs	r2, #8
 8007ed0:	305c      	adds	r0, #92	@ 0x5c
 8007ed2:	f000 f928 	bl	8008126 <memset>
 8007ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8007f0c <std+0x58>)
 8007ed8:	6263      	str	r3, [r4, #36]	@ 0x24
 8007eda:	4b0d      	ldr	r3, [pc, #52]	@ (8007f10 <std+0x5c>)
 8007edc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007ede:	4b0d      	ldr	r3, [pc, #52]	@ (8007f14 <std+0x60>)
 8007ee0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8007f18 <std+0x64>)
 8007ee4:	6323      	str	r3, [r4, #48]	@ 0x30
 8007ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8007f1c <std+0x68>)
 8007ee8:	6224      	str	r4, [r4, #32]
 8007eea:	429c      	cmp	r4, r3
 8007eec:	d006      	beq.n	8007efc <std+0x48>
 8007eee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007ef2:	4294      	cmp	r4, r2
 8007ef4:	d002      	beq.n	8007efc <std+0x48>
 8007ef6:	33d0      	adds	r3, #208	@ 0xd0
 8007ef8:	429c      	cmp	r4, r3
 8007efa:	d105      	bne.n	8007f08 <std+0x54>
 8007efc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f04:	f000 b98c 	b.w	8008220 <__retarget_lock_init_recursive>
 8007f08:	bd10      	pop	{r4, pc}
 8007f0a:	bf00      	nop
 8007f0c:	080080a1 	.word	0x080080a1
 8007f10:	080080c3 	.word	0x080080c3
 8007f14:	080080fb 	.word	0x080080fb
 8007f18:	0800811f 	.word	0x0800811f
 8007f1c:	20000880 	.word	0x20000880

08007f20 <stdio_exit_handler>:
 8007f20:	4a02      	ldr	r2, [pc, #8]	@ (8007f2c <stdio_exit_handler+0xc>)
 8007f22:	4903      	ldr	r1, [pc, #12]	@ (8007f30 <stdio_exit_handler+0x10>)
 8007f24:	4803      	ldr	r0, [pc, #12]	@ (8007f34 <stdio_exit_handler+0x14>)
 8007f26:	f000 b869 	b.w	8007ffc <_fwalk_sglue>
 8007f2a:	bf00      	nop
 8007f2c:	20000018 	.word	0x20000018
 8007f30:	08009b7d 	.word	0x08009b7d
 8007f34:	20000028 	.word	0x20000028

08007f38 <cleanup_stdio>:
 8007f38:	6841      	ldr	r1, [r0, #4]
 8007f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8007f6c <cleanup_stdio+0x34>)
 8007f3c:	4299      	cmp	r1, r3
 8007f3e:	b510      	push	{r4, lr}
 8007f40:	4604      	mov	r4, r0
 8007f42:	d001      	beq.n	8007f48 <cleanup_stdio+0x10>
 8007f44:	f001 fe1a 	bl	8009b7c <_fflush_r>
 8007f48:	68a1      	ldr	r1, [r4, #8]
 8007f4a:	4b09      	ldr	r3, [pc, #36]	@ (8007f70 <cleanup_stdio+0x38>)
 8007f4c:	4299      	cmp	r1, r3
 8007f4e:	d002      	beq.n	8007f56 <cleanup_stdio+0x1e>
 8007f50:	4620      	mov	r0, r4
 8007f52:	f001 fe13 	bl	8009b7c <_fflush_r>
 8007f56:	68e1      	ldr	r1, [r4, #12]
 8007f58:	4b06      	ldr	r3, [pc, #24]	@ (8007f74 <cleanup_stdio+0x3c>)
 8007f5a:	4299      	cmp	r1, r3
 8007f5c:	d004      	beq.n	8007f68 <cleanup_stdio+0x30>
 8007f5e:	4620      	mov	r0, r4
 8007f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f64:	f001 be0a 	b.w	8009b7c <_fflush_r>
 8007f68:	bd10      	pop	{r4, pc}
 8007f6a:	bf00      	nop
 8007f6c:	20000880 	.word	0x20000880
 8007f70:	200008e8 	.word	0x200008e8
 8007f74:	20000950 	.word	0x20000950

08007f78 <global_stdio_init.part.0>:
 8007f78:	b510      	push	{r4, lr}
 8007f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8007fa8 <global_stdio_init.part.0+0x30>)
 8007f7c:	4c0b      	ldr	r4, [pc, #44]	@ (8007fac <global_stdio_init.part.0+0x34>)
 8007f7e:	4a0c      	ldr	r2, [pc, #48]	@ (8007fb0 <global_stdio_init.part.0+0x38>)
 8007f80:	601a      	str	r2, [r3, #0]
 8007f82:	4620      	mov	r0, r4
 8007f84:	2200      	movs	r2, #0
 8007f86:	2104      	movs	r1, #4
 8007f88:	f7ff ff94 	bl	8007eb4 <std>
 8007f8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007f90:	2201      	movs	r2, #1
 8007f92:	2109      	movs	r1, #9
 8007f94:	f7ff ff8e 	bl	8007eb4 <std>
 8007f98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007f9c:	2202      	movs	r2, #2
 8007f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fa2:	2112      	movs	r1, #18
 8007fa4:	f7ff bf86 	b.w	8007eb4 <std>
 8007fa8:	200009b8 	.word	0x200009b8
 8007fac:	20000880 	.word	0x20000880
 8007fb0:	08007f21 	.word	0x08007f21

08007fb4 <__sfp_lock_acquire>:
 8007fb4:	4801      	ldr	r0, [pc, #4]	@ (8007fbc <__sfp_lock_acquire+0x8>)
 8007fb6:	f000 b934 	b.w	8008222 <__retarget_lock_acquire_recursive>
 8007fba:	bf00      	nop
 8007fbc:	200009c1 	.word	0x200009c1

08007fc0 <__sfp_lock_release>:
 8007fc0:	4801      	ldr	r0, [pc, #4]	@ (8007fc8 <__sfp_lock_release+0x8>)
 8007fc2:	f000 b92f 	b.w	8008224 <__retarget_lock_release_recursive>
 8007fc6:	bf00      	nop
 8007fc8:	200009c1 	.word	0x200009c1

08007fcc <__sinit>:
 8007fcc:	b510      	push	{r4, lr}
 8007fce:	4604      	mov	r4, r0
 8007fd0:	f7ff fff0 	bl	8007fb4 <__sfp_lock_acquire>
 8007fd4:	6a23      	ldr	r3, [r4, #32]
 8007fd6:	b11b      	cbz	r3, 8007fe0 <__sinit+0x14>
 8007fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fdc:	f7ff bff0 	b.w	8007fc0 <__sfp_lock_release>
 8007fe0:	4b04      	ldr	r3, [pc, #16]	@ (8007ff4 <__sinit+0x28>)
 8007fe2:	6223      	str	r3, [r4, #32]
 8007fe4:	4b04      	ldr	r3, [pc, #16]	@ (8007ff8 <__sinit+0x2c>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d1f5      	bne.n	8007fd8 <__sinit+0xc>
 8007fec:	f7ff ffc4 	bl	8007f78 <global_stdio_init.part.0>
 8007ff0:	e7f2      	b.n	8007fd8 <__sinit+0xc>
 8007ff2:	bf00      	nop
 8007ff4:	08007f39 	.word	0x08007f39
 8007ff8:	200009b8 	.word	0x200009b8

08007ffc <_fwalk_sglue>:
 8007ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008000:	4607      	mov	r7, r0
 8008002:	4688      	mov	r8, r1
 8008004:	4614      	mov	r4, r2
 8008006:	2600      	movs	r6, #0
 8008008:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800800c:	f1b9 0901 	subs.w	r9, r9, #1
 8008010:	d505      	bpl.n	800801e <_fwalk_sglue+0x22>
 8008012:	6824      	ldr	r4, [r4, #0]
 8008014:	2c00      	cmp	r4, #0
 8008016:	d1f7      	bne.n	8008008 <_fwalk_sglue+0xc>
 8008018:	4630      	mov	r0, r6
 800801a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800801e:	89ab      	ldrh	r3, [r5, #12]
 8008020:	2b01      	cmp	r3, #1
 8008022:	d907      	bls.n	8008034 <_fwalk_sglue+0x38>
 8008024:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008028:	3301      	adds	r3, #1
 800802a:	d003      	beq.n	8008034 <_fwalk_sglue+0x38>
 800802c:	4629      	mov	r1, r5
 800802e:	4638      	mov	r0, r7
 8008030:	47c0      	blx	r8
 8008032:	4306      	orrs	r6, r0
 8008034:	3568      	adds	r5, #104	@ 0x68
 8008036:	e7e9      	b.n	800800c <_fwalk_sglue+0x10>

08008038 <sniprintf>:
 8008038:	b40c      	push	{r2, r3}
 800803a:	b530      	push	{r4, r5, lr}
 800803c:	4b17      	ldr	r3, [pc, #92]	@ (800809c <sniprintf+0x64>)
 800803e:	1e0c      	subs	r4, r1, #0
 8008040:	681d      	ldr	r5, [r3, #0]
 8008042:	b09d      	sub	sp, #116	@ 0x74
 8008044:	da08      	bge.n	8008058 <sniprintf+0x20>
 8008046:	238b      	movs	r3, #139	@ 0x8b
 8008048:	602b      	str	r3, [r5, #0]
 800804a:	f04f 30ff 	mov.w	r0, #4294967295
 800804e:	b01d      	add	sp, #116	@ 0x74
 8008050:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008054:	b002      	add	sp, #8
 8008056:	4770      	bx	lr
 8008058:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800805c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008060:	bf14      	ite	ne
 8008062:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008066:	4623      	moveq	r3, r4
 8008068:	9304      	str	r3, [sp, #16]
 800806a:	9307      	str	r3, [sp, #28]
 800806c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008070:	9002      	str	r0, [sp, #8]
 8008072:	9006      	str	r0, [sp, #24]
 8008074:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008078:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800807a:	ab21      	add	r3, sp, #132	@ 0x84
 800807c:	a902      	add	r1, sp, #8
 800807e:	4628      	mov	r0, r5
 8008080:	9301      	str	r3, [sp, #4]
 8008082:	f001 fbfb 	bl	800987c <_svfiprintf_r>
 8008086:	1c43      	adds	r3, r0, #1
 8008088:	bfbc      	itt	lt
 800808a:	238b      	movlt	r3, #139	@ 0x8b
 800808c:	602b      	strlt	r3, [r5, #0]
 800808e:	2c00      	cmp	r4, #0
 8008090:	d0dd      	beq.n	800804e <sniprintf+0x16>
 8008092:	9b02      	ldr	r3, [sp, #8]
 8008094:	2200      	movs	r2, #0
 8008096:	701a      	strb	r2, [r3, #0]
 8008098:	e7d9      	b.n	800804e <sniprintf+0x16>
 800809a:	bf00      	nop
 800809c:	20000024 	.word	0x20000024

080080a0 <__sread>:
 80080a0:	b510      	push	{r4, lr}
 80080a2:	460c      	mov	r4, r1
 80080a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080a8:	f000 f86c 	bl	8008184 <_read_r>
 80080ac:	2800      	cmp	r0, #0
 80080ae:	bfab      	itete	ge
 80080b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80080b2:	89a3      	ldrhlt	r3, [r4, #12]
 80080b4:	181b      	addge	r3, r3, r0
 80080b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80080ba:	bfac      	ite	ge
 80080bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80080be:	81a3      	strhlt	r3, [r4, #12]
 80080c0:	bd10      	pop	{r4, pc}

080080c2 <__swrite>:
 80080c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080c6:	461f      	mov	r7, r3
 80080c8:	898b      	ldrh	r3, [r1, #12]
 80080ca:	05db      	lsls	r3, r3, #23
 80080cc:	4605      	mov	r5, r0
 80080ce:	460c      	mov	r4, r1
 80080d0:	4616      	mov	r6, r2
 80080d2:	d505      	bpl.n	80080e0 <__swrite+0x1e>
 80080d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080d8:	2302      	movs	r3, #2
 80080da:	2200      	movs	r2, #0
 80080dc:	f000 f840 	bl	8008160 <_lseek_r>
 80080e0:	89a3      	ldrh	r3, [r4, #12]
 80080e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80080ea:	81a3      	strh	r3, [r4, #12]
 80080ec:	4632      	mov	r2, r6
 80080ee:	463b      	mov	r3, r7
 80080f0:	4628      	mov	r0, r5
 80080f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080f6:	f000 b857 	b.w	80081a8 <_write_r>

080080fa <__sseek>:
 80080fa:	b510      	push	{r4, lr}
 80080fc:	460c      	mov	r4, r1
 80080fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008102:	f000 f82d 	bl	8008160 <_lseek_r>
 8008106:	1c43      	adds	r3, r0, #1
 8008108:	89a3      	ldrh	r3, [r4, #12]
 800810a:	bf15      	itete	ne
 800810c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800810e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008112:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008116:	81a3      	strheq	r3, [r4, #12]
 8008118:	bf18      	it	ne
 800811a:	81a3      	strhne	r3, [r4, #12]
 800811c:	bd10      	pop	{r4, pc}

0800811e <__sclose>:
 800811e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008122:	f000 b80d 	b.w	8008140 <_close_r>

08008126 <memset>:
 8008126:	4402      	add	r2, r0
 8008128:	4603      	mov	r3, r0
 800812a:	4293      	cmp	r3, r2
 800812c:	d100      	bne.n	8008130 <memset+0xa>
 800812e:	4770      	bx	lr
 8008130:	f803 1b01 	strb.w	r1, [r3], #1
 8008134:	e7f9      	b.n	800812a <memset+0x4>
	...

08008138 <_localeconv_r>:
 8008138:	4800      	ldr	r0, [pc, #0]	@ (800813c <_localeconv_r+0x4>)
 800813a:	4770      	bx	lr
 800813c:	20000164 	.word	0x20000164

08008140 <_close_r>:
 8008140:	b538      	push	{r3, r4, r5, lr}
 8008142:	4d06      	ldr	r5, [pc, #24]	@ (800815c <_close_r+0x1c>)
 8008144:	2300      	movs	r3, #0
 8008146:	4604      	mov	r4, r0
 8008148:	4608      	mov	r0, r1
 800814a:	602b      	str	r3, [r5, #0]
 800814c:	f7fb fb02 	bl	8003754 <_close>
 8008150:	1c43      	adds	r3, r0, #1
 8008152:	d102      	bne.n	800815a <_close_r+0x1a>
 8008154:	682b      	ldr	r3, [r5, #0]
 8008156:	b103      	cbz	r3, 800815a <_close_r+0x1a>
 8008158:	6023      	str	r3, [r4, #0]
 800815a:	bd38      	pop	{r3, r4, r5, pc}
 800815c:	200009bc 	.word	0x200009bc

08008160 <_lseek_r>:
 8008160:	b538      	push	{r3, r4, r5, lr}
 8008162:	4d07      	ldr	r5, [pc, #28]	@ (8008180 <_lseek_r+0x20>)
 8008164:	4604      	mov	r4, r0
 8008166:	4608      	mov	r0, r1
 8008168:	4611      	mov	r1, r2
 800816a:	2200      	movs	r2, #0
 800816c:	602a      	str	r2, [r5, #0]
 800816e:	461a      	mov	r2, r3
 8008170:	f7fb fb17 	bl	80037a2 <_lseek>
 8008174:	1c43      	adds	r3, r0, #1
 8008176:	d102      	bne.n	800817e <_lseek_r+0x1e>
 8008178:	682b      	ldr	r3, [r5, #0]
 800817a:	b103      	cbz	r3, 800817e <_lseek_r+0x1e>
 800817c:	6023      	str	r3, [r4, #0]
 800817e:	bd38      	pop	{r3, r4, r5, pc}
 8008180:	200009bc 	.word	0x200009bc

08008184 <_read_r>:
 8008184:	b538      	push	{r3, r4, r5, lr}
 8008186:	4d07      	ldr	r5, [pc, #28]	@ (80081a4 <_read_r+0x20>)
 8008188:	4604      	mov	r4, r0
 800818a:	4608      	mov	r0, r1
 800818c:	4611      	mov	r1, r2
 800818e:	2200      	movs	r2, #0
 8008190:	602a      	str	r2, [r5, #0]
 8008192:	461a      	mov	r2, r3
 8008194:	f7fb faa5 	bl	80036e2 <_read>
 8008198:	1c43      	adds	r3, r0, #1
 800819a:	d102      	bne.n	80081a2 <_read_r+0x1e>
 800819c:	682b      	ldr	r3, [r5, #0]
 800819e:	b103      	cbz	r3, 80081a2 <_read_r+0x1e>
 80081a0:	6023      	str	r3, [r4, #0]
 80081a2:	bd38      	pop	{r3, r4, r5, pc}
 80081a4:	200009bc 	.word	0x200009bc

080081a8 <_write_r>:
 80081a8:	b538      	push	{r3, r4, r5, lr}
 80081aa:	4d07      	ldr	r5, [pc, #28]	@ (80081c8 <_write_r+0x20>)
 80081ac:	4604      	mov	r4, r0
 80081ae:	4608      	mov	r0, r1
 80081b0:	4611      	mov	r1, r2
 80081b2:	2200      	movs	r2, #0
 80081b4:	602a      	str	r2, [r5, #0]
 80081b6:	461a      	mov	r2, r3
 80081b8:	f7fb fab0 	bl	800371c <_write>
 80081bc:	1c43      	adds	r3, r0, #1
 80081be:	d102      	bne.n	80081c6 <_write_r+0x1e>
 80081c0:	682b      	ldr	r3, [r5, #0]
 80081c2:	b103      	cbz	r3, 80081c6 <_write_r+0x1e>
 80081c4:	6023      	str	r3, [r4, #0]
 80081c6:	bd38      	pop	{r3, r4, r5, pc}
 80081c8:	200009bc 	.word	0x200009bc

080081cc <__errno>:
 80081cc:	4b01      	ldr	r3, [pc, #4]	@ (80081d4 <__errno+0x8>)
 80081ce:	6818      	ldr	r0, [r3, #0]
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	20000024 	.word	0x20000024

080081d8 <__libc_init_array>:
 80081d8:	b570      	push	{r4, r5, r6, lr}
 80081da:	4d0d      	ldr	r5, [pc, #52]	@ (8008210 <__libc_init_array+0x38>)
 80081dc:	4c0d      	ldr	r4, [pc, #52]	@ (8008214 <__libc_init_array+0x3c>)
 80081de:	1b64      	subs	r4, r4, r5
 80081e0:	10a4      	asrs	r4, r4, #2
 80081e2:	2600      	movs	r6, #0
 80081e4:	42a6      	cmp	r6, r4
 80081e6:	d109      	bne.n	80081fc <__libc_init_array+0x24>
 80081e8:	4d0b      	ldr	r5, [pc, #44]	@ (8008218 <__libc_init_array+0x40>)
 80081ea:	4c0c      	ldr	r4, [pc, #48]	@ (800821c <__libc_init_array+0x44>)
 80081ec:	f003 ffc0 	bl	800c170 <_init>
 80081f0:	1b64      	subs	r4, r4, r5
 80081f2:	10a4      	asrs	r4, r4, #2
 80081f4:	2600      	movs	r6, #0
 80081f6:	42a6      	cmp	r6, r4
 80081f8:	d105      	bne.n	8008206 <__libc_init_array+0x2e>
 80081fa:	bd70      	pop	{r4, r5, r6, pc}
 80081fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008200:	4798      	blx	r3
 8008202:	3601      	adds	r6, #1
 8008204:	e7ee      	b.n	80081e4 <__libc_init_array+0xc>
 8008206:	f855 3b04 	ldr.w	r3, [r5], #4
 800820a:	4798      	blx	r3
 800820c:	3601      	adds	r6, #1
 800820e:	e7f2      	b.n	80081f6 <__libc_init_array+0x1e>
 8008210:	0800c9e0 	.word	0x0800c9e0
 8008214:	0800c9e0 	.word	0x0800c9e0
 8008218:	0800c9e0 	.word	0x0800c9e0
 800821c:	0800c9e4 	.word	0x0800c9e4

08008220 <__retarget_lock_init_recursive>:
 8008220:	4770      	bx	lr

08008222 <__retarget_lock_acquire_recursive>:
 8008222:	4770      	bx	lr

08008224 <__retarget_lock_release_recursive>:
 8008224:	4770      	bx	lr

08008226 <quorem>:
 8008226:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800822a:	6903      	ldr	r3, [r0, #16]
 800822c:	690c      	ldr	r4, [r1, #16]
 800822e:	42a3      	cmp	r3, r4
 8008230:	4607      	mov	r7, r0
 8008232:	db7e      	blt.n	8008332 <quorem+0x10c>
 8008234:	3c01      	subs	r4, #1
 8008236:	f101 0814 	add.w	r8, r1, #20
 800823a:	00a3      	lsls	r3, r4, #2
 800823c:	f100 0514 	add.w	r5, r0, #20
 8008240:	9300      	str	r3, [sp, #0]
 8008242:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008246:	9301      	str	r3, [sp, #4]
 8008248:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800824c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008250:	3301      	adds	r3, #1
 8008252:	429a      	cmp	r2, r3
 8008254:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008258:	fbb2 f6f3 	udiv	r6, r2, r3
 800825c:	d32e      	bcc.n	80082bc <quorem+0x96>
 800825e:	f04f 0a00 	mov.w	sl, #0
 8008262:	46c4      	mov	ip, r8
 8008264:	46ae      	mov	lr, r5
 8008266:	46d3      	mov	fp, sl
 8008268:	f85c 3b04 	ldr.w	r3, [ip], #4
 800826c:	b298      	uxth	r0, r3
 800826e:	fb06 a000 	mla	r0, r6, r0, sl
 8008272:	0c02      	lsrs	r2, r0, #16
 8008274:	0c1b      	lsrs	r3, r3, #16
 8008276:	fb06 2303 	mla	r3, r6, r3, r2
 800827a:	f8de 2000 	ldr.w	r2, [lr]
 800827e:	b280      	uxth	r0, r0
 8008280:	b292      	uxth	r2, r2
 8008282:	1a12      	subs	r2, r2, r0
 8008284:	445a      	add	r2, fp
 8008286:	f8de 0000 	ldr.w	r0, [lr]
 800828a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800828e:	b29b      	uxth	r3, r3
 8008290:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008294:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008298:	b292      	uxth	r2, r2
 800829a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800829e:	45e1      	cmp	r9, ip
 80082a0:	f84e 2b04 	str.w	r2, [lr], #4
 80082a4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80082a8:	d2de      	bcs.n	8008268 <quorem+0x42>
 80082aa:	9b00      	ldr	r3, [sp, #0]
 80082ac:	58eb      	ldr	r3, [r5, r3]
 80082ae:	b92b      	cbnz	r3, 80082bc <quorem+0x96>
 80082b0:	9b01      	ldr	r3, [sp, #4]
 80082b2:	3b04      	subs	r3, #4
 80082b4:	429d      	cmp	r5, r3
 80082b6:	461a      	mov	r2, r3
 80082b8:	d32f      	bcc.n	800831a <quorem+0xf4>
 80082ba:	613c      	str	r4, [r7, #16]
 80082bc:	4638      	mov	r0, r7
 80082be:	f001 f979 	bl	80095b4 <__mcmp>
 80082c2:	2800      	cmp	r0, #0
 80082c4:	db25      	blt.n	8008312 <quorem+0xec>
 80082c6:	4629      	mov	r1, r5
 80082c8:	2000      	movs	r0, #0
 80082ca:	f858 2b04 	ldr.w	r2, [r8], #4
 80082ce:	f8d1 c000 	ldr.w	ip, [r1]
 80082d2:	fa1f fe82 	uxth.w	lr, r2
 80082d6:	fa1f f38c 	uxth.w	r3, ip
 80082da:	eba3 030e 	sub.w	r3, r3, lr
 80082de:	4403      	add	r3, r0
 80082e0:	0c12      	lsrs	r2, r2, #16
 80082e2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80082e6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082f0:	45c1      	cmp	r9, r8
 80082f2:	f841 3b04 	str.w	r3, [r1], #4
 80082f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80082fa:	d2e6      	bcs.n	80082ca <quorem+0xa4>
 80082fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008300:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008304:	b922      	cbnz	r2, 8008310 <quorem+0xea>
 8008306:	3b04      	subs	r3, #4
 8008308:	429d      	cmp	r5, r3
 800830a:	461a      	mov	r2, r3
 800830c:	d30b      	bcc.n	8008326 <quorem+0x100>
 800830e:	613c      	str	r4, [r7, #16]
 8008310:	3601      	adds	r6, #1
 8008312:	4630      	mov	r0, r6
 8008314:	b003      	add	sp, #12
 8008316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800831a:	6812      	ldr	r2, [r2, #0]
 800831c:	3b04      	subs	r3, #4
 800831e:	2a00      	cmp	r2, #0
 8008320:	d1cb      	bne.n	80082ba <quorem+0x94>
 8008322:	3c01      	subs	r4, #1
 8008324:	e7c6      	b.n	80082b4 <quorem+0x8e>
 8008326:	6812      	ldr	r2, [r2, #0]
 8008328:	3b04      	subs	r3, #4
 800832a:	2a00      	cmp	r2, #0
 800832c:	d1ef      	bne.n	800830e <quorem+0xe8>
 800832e:	3c01      	subs	r4, #1
 8008330:	e7ea      	b.n	8008308 <quorem+0xe2>
 8008332:	2000      	movs	r0, #0
 8008334:	e7ee      	b.n	8008314 <quorem+0xee>
	...

08008338 <_dtoa_r>:
 8008338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800833c:	69c7      	ldr	r7, [r0, #28]
 800833e:	b099      	sub	sp, #100	@ 0x64
 8008340:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008344:	ec55 4b10 	vmov	r4, r5, d0
 8008348:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800834a:	9109      	str	r1, [sp, #36]	@ 0x24
 800834c:	4683      	mov	fp, r0
 800834e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008350:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008352:	b97f      	cbnz	r7, 8008374 <_dtoa_r+0x3c>
 8008354:	2010      	movs	r0, #16
 8008356:	f000 fdfd 	bl	8008f54 <malloc>
 800835a:	4602      	mov	r2, r0
 800835c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008360:	b920      	cbnz	r0, 800836c <_dtoa_r+0x34>
 8008362:	4ba7      	ldr	r3, [pc, #668]	@ (8008600 <_dtoa_r+0x2c8>)
 8008364:	21ef      	movs	r1, #239	@ 0xef
 8008366:	48a7      	ldr	r0, [pc, #668]	@ (8008604 <_dtoa_r+0x2cc>)
 8008368:	f001 fc68 	bl	8009c3c <__assert_func>
 800836c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008370:	6007      	str	r7, [r0, #0]
 8008372:	60c7      	str	r7, [r0, #12]
 8008374:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008378:	6819      	ldr	r1, [r3, #0]
 800837a:	b159      	cbz	r1, 8008394 <_dtoa_r+0x5c>
 800837c:	685a      	ldr	r2, [r3, #4]
 800837e:	604a      	str	r2, [r1, #4]
 8008380:	2301      	movs	r3, #1
 8008382:	4093      	lsls	r3, r2
 8008384:	608b      	str	r3, [r1, #8]
 8008386:	4658      	mov	r0, fp
 8008388:	f000 feda 	bl	8009140 <_Bfree>
 800838c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008390:	2200      	movs	r2, #0
 8008392:	601a      	str	r2, [r3, #0]
 8008394:	1e2b      	subs	r3, r5, #0
 8008396:	bfb9      	ittee	lt
 8008398:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800839c:	9303      	strlt	r3, [sp, #12]
 800839e:	2300      	movge	r3, #0
 80083a0:	6033      	strge	r3, [r6, #0]
 80083a2:	9f03      	ldr	r7, [sp, #12]
 80083a4:	4b98      	ldr	r3, [pc, #608]	@ (8008608 <_dtoa_r+0x2d0>)
 80083a6:	bfbc      	itt	lt
 80083a8:	2201      	movlt	r2, #1
 80083aa:	6032      	strlt	r2, [r6, #0]
 80083ac:	43bb      	bics	r3, r7
 80083ae:	d112      	bne.n	80083d6 <_dtoa_r+0x9e>
 80083b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80083b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80083b6:	6013      	str	r3, [r2, #0]
 80083b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80083bc:	4323      	orrs	r3, r4
 80083be:	f000 854d 	beq.w	8008e5c <_dtoa_r+0xb24>
 80083c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80083c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800861c <_dtoa_r+0x2e4>
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f000 854f 	beq.w	8008e6c <_dtoa_r+0xb34>
 80083ce:	f10a 0303 	add.w	r3, sl, #3
 80083d2:	f000 bd49 	b.w	8008e68 <_dtoa_r+0xb30>
 80083d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80083da:	2200      	movs	r2, #0
 80083dc:	ec51 0b17 	vmov	r0, r1, d7
 80083e0:	2300      	movs	r3, #0
 80083e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80083e6:	f7f8 fb8f 	bl	8000b08 <__aeabi_dcmpeq>
 80083ea:	4680      	mov	r8, r0
 80083ec:	b158      	cbz	r0, 8008406 <_dtoa_r+0xce>
 80083ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80083f0:	2301      	movs	r3, #1
 80083f2:	6013      	str	r3, [r2, #0]
 80083f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80083f6:	b113      	cbz	r3, 80083fe <_dtoa_r+0xc6>
 80083f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80083fa:	4b84      	ldr	r3, [pc, #528]	@ (800860c <_dtoa_r+0x2d4>)
 80083fc:	6013      	str	r3, [r2, #0]
 80083fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008620 <_dtoa_r+0x2e8>
 8008402:	f000 bd33 	b.w	8008e6c <_dtoa_r+0xb34>
 8008406:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800840a:	aa16      	add	r2, sp, #88	@ 0x58
 800840c:	a917      	add	r1, sp, #92	@ 0x5c
 800840e:	4658      	mov	r0, fp
 8008410:	f001 f980 	bl	8009714 <__d2b>
 8008414:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008418:	4681      	mov	r9, r0
 800841a:	2e00      	cmp	r6, #0
 800841c:	d077      	beq.n	800850e <_dtoa_r+0x1d6>
 800841e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008420:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008424:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008428:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800842c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008430:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008434:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008438:	4619      	mov	r1, r3
 800843a:	2200      	movs	r2, #0
 800843c:	4b74      	ldr	r3, [pc, #464]	@ (8008610 <_dtoa_r+0x2d8>)
 800843e:	f7f7 ff43 	bl	80002c8 <__aeabi_dsub>
 8008442:	a369      	add	r3, pc, #420	@ (adr r3, 80085e8 <_dtoa_r+0x2b0>)
 8008444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008448:	f7f8 f8f6 	bl	8000638 <__aeabi_dmul>
 800844c:	a368      	add	r3, pc, #416	@ (adr r3, 80085f0 <_dtoa_r+0x2b8>)
 800844e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008452:	f7f7 ff3b 	bl	80002cc <__adddf3>
 8008456:	4604      	mov	r4, r0
 8008458:	4630      	mov	r0, r6
 800845a:	460d      	mov	r5, r1
 800845c:	f7f8 f882 	bl	8000564 <__aeabi_i2d>
 8008460:	a365      	add	r3, pc, #404	@ (adr r3, 80085f8 <_dtoa_r+0x2c0>)
 8008462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008466:	f7f8 f8e7 	bl	8000638 <__aeabi_dmul>
 800846a:	4602      	mov	r2, r0
 800846c:	460b      	mov	r3, r1
 800846e:	4620      	mov	r0, r4
 8008470:	4629      	mov	r1, r5
 8008472:	f7f7 ff2b 	bl	80002cc <__adddf3>
 8008476:	4604      	mov	r4, r0
 8008478:	460d      	mov	r5, r1
 800847a:	f7f8 fb8d 	bl	8000b98 <__aeabi_d2iz>
 800847e:	2200      	movs	r2, #0
 8008480:	4607      	mov	r7, r0
 8008482:	2300      	movs	r3, #0
 8008484:	4620      	mov	r0, r4
 8008486:	4629      	mov	r1, r5
 8008488:	f7f8 fb48 	bl	8000b1c <__aeabi_dcmplt>
 800848c:	b140      	cbz	r0, 80084a0 <_dtoa_r+0x168>
 800848e:	4638      	mov	r0, r7
 8008490:	f7f8 f868 	bl	8000564 <__aeabi_i2d>
 8008494:	4622      	mov	r2, r4
 8008496:	462b      	mov	r3, r5
 8008498:	f7f8 fb36 	bl	8000b08 <__aeabi_dcmpeq>
 800849c:	b900      	cbnz	r0, 80084a0 <_dtoa_r+0x168>
 800849e:	3f01      	subs	r7, #1
 80084a0:	2f16      	cmp	r7, #22
 80084a2:	d851      	bhi.n	8008548 <_dtoa_r+0x210>
 80084a4:	4b5b      	ldr	r3, [pc, #364]	@ (8008614 <_dtoa_r+0x2dc>)
 80084a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80084aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084b2:	f7f8 fb33 	bl	8000b1c <__aeabi_dcmplt>
 80084b6:	2800      	cmp	r0, #0
 80084b8:	d048      	beq.n	800854c <_dtoa_r+0x214>
 80084ba:	3f01      	subs	r7, #1
 80084bc:	2300      	movs	r3, #0
 80084be:	9312      	str	r3, [sp, #72]	@ 0x48
 80084c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80084c2:	1b9b      	subs	r3, r3, r6
 80084c4:	1e5a      	subs	r2, r3, #1
 80084c6:	bf44      	itt	mi
 80084c8:	f1c3 0801 	rsbmi	r8, r3, #1
 80084cc:	2300      	movmi	r3, #0
 80084ce:	9208      	str	r2, [sp, #32]
 80084d0:	bf54      	ite	pl
 80084d2:	f04f 0800 	movpl.w	r8, #0
 80084d6:	9308      	strmi	r3, [sp, #32]
 80084d8:	2f00      	cmp	r7, #0
 80084da:	db39      	blt.n	8008550 <_dtoa_r+0x218>
 80084dc:	9b08      	ldr	r3, [sp, #32]
 80084de:	970f      	str	r7, [sp, #60]	@ 0x3c
 80084e0:	443b      	add	r3, r7
 80084e2:	9308      	str	r3, [sp, #32]
 80084e4:	2300      	movs	r3, #0
 80084e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80084e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084ea:	2b09      	cmp	r3, #9
 80084ec:	d864      	bhi.n	80085b8 <_dtoa_r+0x280>
 80084ee:	2b05      	cmp	r3, #5
 80084f0:	bfc4      	itt	gt
 80084f2:	3b04      	subgt	r3, #4
 80084f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80084f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084f8:	f1a3 0302 	sub.w	r3, r3, #2
 80084fc:	bfcc      	ite	gt
 80084fe:	2400      	movgt	r4, #0
 8008500:	2401      	movle	r4, #1
 8008502:	2b03      	cmp	r3, #3
 8008504:	d863      	bhi.n	80085ce <_dtoa_r+0x296>
 8008506:	e8df f003 	tbb	[pc, r3]
 800850a:	372a      	.short	0x372a
 800850c:	5535      	.short	0x5535
 800850e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008512:	441e      	add	r6, r3
 8008514:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008518:	2b20      	cmp	r3, #32
 800851a:	bfc1      	itttt	gt
 800851c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008520:	409f      	lslgt	r7, r3
 8008522:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008526:	fa24 f303 	lsrgt.w	r3, r4, r3
 800852a:	bfd6      	itet	le
 800852c:	f1c3 0320 	rsble	r3, r3, #32
 8008530:	ea47 0003 	orrgt.w	r0, r7, r3
 8008534:	fa04 f003 	lslle.w	r0, r4, r3
 8008538:	f7f8 f804 	bl	8000544 <__aeabi_ui2d>
 800853c:	2201      	movs	r2, #1
 800853e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008542:	3e01      	subs	r6, #1
 8008544:	9214      	str	r2, [sp, #80]	@ 0x50
 8008546:	e777      	b.n	8008438 <_dtoa_r+0x100>
 8008548:	2301      	movs	r3, #1
 800854a:	e7b8      	b.n	80084be <_dtoa_r+0x186>
 800854c:	9012      	str	r0, [sp, #72]	@ 0x48
 800854e:	e7b7      	b.n	80084c0 <_dtoa_r+0x188>
 8008550:	427b      	negs	r3, r7
 8008552:	930a      	str	r3, [sp, #40]	@ 0x28
 8008554:	2300      	movs	r3, #0
 8008556:	eba8 0807 	sub.w	r8, r8, r7
 800855a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800855c:	e7c4      	b.n	80084e8 <_dtoa_r+0x1b0>
 800855e:	2300      	movs	r3, #0
 8008560:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008562:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008564:	2b00      	cmp	r3, #0
 8008566:	dc35      	bgt.n	80085d4 <_dtoa_r+0x29c>
 8008568:	2301      	movs	r3, #1
 800856a:	9300      	str	r3, [sp, #0]
 800856c:	9307      	str	r3, [sp, #28]
 800856e:	461a      	mov	r2, r3
 8008570:	920e      	str	r2, [sp, #56]	@ 0x38
 8008572:	e00b      	b.n	800858c <_dtoa_r+0x254>
 8008574:	2301      	movs	r3, #1
 8008576:	e7f3      	b.n	8008560 <_dtoa_r+0x228>
 8008578:	2300      	movs	r3, #0
 800857a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800857c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800857e:	18fb      	adds	r3, r7, r3
 8008580:	9300      	str	r3, [sp, #0]
 8008582:	3301      	adds	r3, #1
 8008584:	2b01      	cmp	r3, #1
 8008586:	9307      	str	r3, [sp, #28]
 8008588:	bfb8      	it	lt
 800858a:	2301      	movlt	r3, #1
 800858c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008590:	2100      	movs	r1, #0
 8008592:	2204      	movs	r2, #4
 8008594:	f102 0514 	add.w	r5, r2, #20
 8008598:	429d      	cmp	r5, r3
 800859a:	d91f      	bls.n	80085dc <_dtoa_r+0x2a4>
 800859c:	6041      	str	r1, [r0, #4]
 800859e:	4658      	mov	r0, fp
 80085a0:	f000 fd8e 	bl	80090c0 <_Balloc>
 80085a4:	4682      	mov	sl, r0
 80085a6:	2800      	cmp	r0, #0
 80085a8:	d13c      	bne.n	8008624 <_dtoa_r+0x2ec>
 80085aa:	4b1b      	ldr	r3, [pc, #108]	@ (8008618 <_dtoa_r+0x2e0>)
 80085ac:	4602      	mov	r2, r0
 80085ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80085b2:	e6d8      	b.n	8008366 <_dtoa_r+0x2e>
 80085b4:	2301      	movs	r3, #1
 80085b6:	e7e0      	b.n	800857a <_dtoa_r+0x242>
 80085b8:	2401      	movs	r4, #1
 80085ba:	2300      	movs	r3, #0
 80085bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80085be:	940b      	str	r4, [sp, #44]	@ 0x2c
 80085c0:	f04f 33ff 	mov.w	r3, #4294967295
 80085c4:	9300      	str	r3, [sp, #0]
 80085c6:	9307      	str	r3, [sp, #28]
 80085c8:	2200      	movs	r2, #0
 80085ca:	2312      	movs	r3, #18
 80085cc:	e7d0      	b.n	8008570 <_dtoa_r+0x238>
 80085ce:	2301      	movs	r3, #1
 80085d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085d2:	e7f5      	b.n	80085c0 <_dtoa_r+0x288>
 80085d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085d6:	9300      	str	r3, [sp, #0]
 80085d8:	9307      	str	r3, [sp, #28]
 80085da:	e7d7      	b.n	800858c <_dtoa_r+0x254>
 80085dc:	3101      	adds	r1, #1
 80085de:	0052      	lsls	r2, r2, #1
 80085e0:	e7d8      	b.n	8008594 <_dtoa_r+0x25c>
 80085e2:	bf00      	nop
 80085e4:	f3af 8000 	nop.w
 80085e8:	636f4361 	.word	0x636f4361
 80085ec:	3fd287a7 	.word	0x3fd287a7
 80085f0:	8b60c8b3 	.word	0x8b60c8b3
 80085f4:	3fc68a28 	.word	0x3fc68a28
 80085f8:	509f79fb 	.word	0x509f79fb
 80085fc:	3fd34413 	.word	0x3fd34413
 8008600:	0800c49d 	.word	0x0800c49d
 8008604:	0800c4b4 	.word	0x0800c4b4
 8008608:	7ff00000 	.word	0x7ff00000
 800860c:	0800c46d 	.word	0x0800c46d
 8008610:	3ff80000 	.word	0x3ff80000
 8008614:	0800c5b0 	.word	0x0800c5b0
 8008618:	0800c50c 	.word	0x0800c50c
 800861c:	0800c499 	.word	0x0800c499
 8008620:	0800c46c 	.word	0x0800c46c
 8008624:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008628:	6018      	str	r0, [r3, #0]
 800862a:	9b07      	ldr	r3, [sp, #28]
 800862c:	2b0e      	cmp	r3, #14
 800862e:	f200 80a4 	bhi.w	800877a <_dtoa_r+0x442>
 8008632:	2c00      	cmp	r4, #0
 8008634:	f000 80a1 	beq.w	800877a <_dtoa_r+0x442>
 8008638:	2f00      	cmp	r7, #0
 800863a:	dd33      	ble.n	80086a4 <_dtoa_r+0x36c>
 800863c:	4bad      	ldr	r3, [pc, #692]	@ (80088f4 <_dtoa_r+0x5bc>)
 800863e:	f007 020f 	and.w	r2, r7, #15
 8008642:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008646:	ed93 7b00 	vldr	d7, [r3]
 800864a:	05f8      	lsls	r0, r7, #23
 800864c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008650:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008654:	d516      	bpl.n	8008684 <_dtoa_r+0x34c>
 8008656:	4ba8      	ldr	r3, [pc, #672]	@ (80088f8 <_dtoa_r+0x5c0>)
 8008658:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800865c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008660:	f7f8 f914 	bl	800088c <__aeabi_ddiv>
 8008664:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008668:	f004 040f 	and.w	r4, r4, #15
 800866c:	2603      	movs	r6, #3
 800866e:	4da2      	ldr	r5, [pc, #648]	@ (80088f8 <_dtoa_r+0x5c0>)
 8008670:	b954      	cbnz	r4, 8008688 <_dtoa_r+0x350>
 8008672:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800867a:	f7f8 f907 	bl	800088c <__aeabi_ddiv>
 800867e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008682:	e028      	b.n	80086d6 <_dtoa_r+0x39e>
 8008684:	2602      	movs	r6, #2
 8008686:	e7f2      	b.n	800866e <_dtoa_r+0x336>
 8008688:	07e1      	lsls	r1, r4, #31
 800868a:	d508      	bpl.n	800869e <_dtoa_r+0x366>
 800868c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008690:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008694:	f7f7 ffd0 	bl	8000638 <__aeabi_dmul>
 8008698:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800869c:	3601      	adds	r6, #1
 800869e:	1064      	asrs	r4, r4, #1
 80086a0:	3508      	adds	r5, #8
 80086a2:	e7e5      	b.n	8008670 <_dtoa_r+0x338>
 80086a4:	f000 80d2 	beq.w	800884c <_dtoa_r+0x514>
 80086a8:	427c      	negs	r4, r7
 80086aa:	4b92      	ldr	r3, [pc, #584]	@ (80088f4 <_dtoa_r+0x5bc>)
 80086ac:	4d92      	ldr	r5, [pc, #584]	@ (80088f8 <_dtoa_r+0x5c0>)
 80086ae:	f004 020f 	and.w	r2, r4, #15
 80086b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80086be:	f7f7 ffbb 	bl	8000638 <__aeabi_dmul>
 80086c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086c6:	1124      	asrs	r4, r4, #4
 80086c8:	2300      	movs	r3, #0
 80086ca:	2602      	movs	r6, #2
 80086cc:	2c00      	cmp	r4, #0
 80086ce:	f040 80b2 	bne.w	8008836 <_dtoa_r+0x4fe>
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1d3      	bne.n	800867e <_dtoa_r+0x346>
 80086d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80086d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f000 80b7 	beq.w	8008850 <_dtoa_r+0x518>
 80086e2:	4b86      	ldr	r3, [pc, #536]	@ (80088fc <_dtoa_r+0x5c4>)
 80086e4:	2200      	movs	r2, #0
 80086e6:	4620      	mov	r0, r4
 80086e8:	4629      	mov	r1, r5
 80086ea:	f7f8 fa17 	bl	8000b1c <__aeabi_dcmplt>
 80086ee:	2800      	cmp	r0, #0
 80086f0:	f000 80ae 	beq.w	8008850 <_dtoa_r+0x518>
 80086f4:	9b07      	ldr	r3, [sp, #28]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	f000 80aa 	beq.w	8008850 <_dtoa_r+0x518>
 80086fc:	9b00      	ldr	r3, [sp, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	dd37      	ble.n	8008772 <_dtoa_r+0x43a>
 8008702:	1e7b      	subs	r3, r7, #1
 8008704:	9304      	str	r3, [sp, #16]
 8008706:	4620      	mov	r0, r4
 8008708:	4b7d      	ldr	r3, [pc, #500]	@ (8008900 <_dtoa_r+0x5c8>)
 800870a:	2200      	movs	r2, #0
 800870c:	4629      	mov	r1, r5
 800870e:	f7f7 ff93 	bl	8000638 <__aeabi_dmul>
 8008712:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008716:	9c00      	ldr	r4, [sp, #0]
 8008718:	3601      	adds	r6, #1
 800871a:	4630      	mov	r0, r6
 800871c:	f7f7 ff22 	bl	8000564 <__aeabi_i2d>
 8008720:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008724:	f7f7 ff88 	bl	8000638 <__aeabi_dmul>
 8008728:	4b76      	ldr	r3, [pc, #472]	@ (8008904 <_dtoa_r+0x5cc>)
 800872a:	2200      	movs	r2, #0
 800872c:	f7f7 fdce 	bl	80002cc <__adddf3>
 8008730:	4605      	mov	r5, r0
 8008732:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008736:	2c00      	cmp	r4, #0
 8008738:	f040 808d 	bne.w	8008856 <_dtoa_r+0x51e>
 800873c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008740:	4b71      	ldr	r3, [pc, #452]	@ (8008908 <_dtoa_r+0x5d0>)
 8008742:	2200      	movs	r2, #0
 8008744:	f7f7 fdc0 	bl	80002c8 <__aeabi_dsub>
 8008748:	4602      	mov	r2, r0
 800874a:	460b      	mov	r3, r1
 800874c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008750:	462a      	mov	r2, r5
 8008752:	4633      	mov	r3, r6
 8008754:	f7f8 fa00 	bl	8000b58 <__aeabi_dcmpgt>
 8008758:	2800      	cmp	r0, #0
 800875a:	f040 828b 	bne.w	8008c74 <_dtoa_r+0x93c>
 800875e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008762:	462a      	mov	r2, r5
 8008764:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008768:	f7f8 f9d8 	bl	8000b1c <__aeabi_dcmplt>
 800876c:	2800      	cmp	r0, #0
 800876e:	f040 8128 	bne.w	80089c2 <_dtoa_r+0x68a>
 8008772:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008776:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800877a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800877c:	2b00      	cmp	r3, #0
 800877e:	f2c0 815a 	blt.w	8008a36 <_dtoa_r+0x6fe>
 8008782:	2f0e      	cmp	r7, #14
 8008784:	f300 8157 	bgt.w	8008a36 <_dtoa_r+0x6fe>
 8008788:	4b5a      	ldr	r3, [pc, #360]	@ (80088f4 <_dtoa_r+0x5bc>)
 800878a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800878e:	ed93 7b00 	vldr	d7, [r3]
 8008792:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008794:	2b00      	cmp	r3, #0
 8008796:	ed8d 7b00 	vstr	d7, [sp]
 800879a:	da03      	bge.n	80087a4 <_dtoa_r+0x46c>
 800879c:	9b07      	ldr	r3, [sp, #28]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	f340 8101 	ble.w	80089a6 <_dtoa_r+0x66e>
 80087a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80087a8:	4656      	mov	r6, sl
 80087aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087ae:	4620      	mov	r0, r4
 80087b0:	4629      	mov	r1, r5
 80087b2:	f7f8 f86b 	bl	800088c <__aeabi_ddiv>
 80087b6:	f7f8 f9ef 	bl	8000b98 <__aeabi_d2iz>
 80087ba:	4680      	mov	r8, r0
 80087bc:	f7f7 fed2 	bl	8000564 <__aeabi_i2d>
 80087c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087c4:	f7f7 ff38 	bl	8000638 <__aeabi_dmul>
 80087c8:	4602      	mov	r2, r0
 80087ca:	460b      	mov	r3, r1
 80087cc:	4620      	mov	r0, r4
 80087ce:	4629      	mov	r1, r5
 80087d0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80087d4:	f7f7 fd78 	bl	80002c8 <__aeabi_dsub>
 80087d8:	f806 4b01 	strb.w	r4, [r6], #1
 80087dc:	9d07      	ldr	r5, [sp, #28]
 80087de:	eba6 040a 	sub.w	r4, r6, sl
 80087e2:	42a5      	cmp	r5, r4
 80087e4:	4602      	mov	r2, r0
 80087e6:	460b      	mov	r3, r1
 80087e8:	f040 8117 	bne.w	8008a1a <_dtoa_r+0x6e2>
 80087ec:	f7f7 fd6e 	bl	80002cc <__adddf3>
 80087f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087f4:	4604      	mov	r4, r0
 80087f6:	460d      	mov	r5, r1
 80087f8:	f7f8 f9ae 	bl	8000b58 <__aeabi_dcmpgt>
 80087fc:	2800      	cmp	r0, #0
 80087fe:	f040 80f9 	bne.w	80089f4 <_dtoa_r+0x6bc>
 8008802:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008806:	4620      	mov	r0, r4
 8008808:	4629      	mov	r1, r5
 800880a:	f7f8 f97d 	bl	8000b08 <__aeabi_dcmpeq>
 800880e:	b118      	cbz	r0, 8008818 <_dtoa_r+0x4e0>
 8008810:	f018 0f01 	tst.w	r8, #1
 8008814:	f040 80ee 	bne.w	80089f4 <_dtoa_r+0x6bc>
 8008818:	4649      	mov	r1, r9
 800881a:	4658      	mov	r0, fp
 800881c:	f000 fc90 	bl	8009140 <_Bfree>
 8008820:	2300      	movs	r3, #0
 8008822:	7033      	strb	r3, [r6, #0]
 8008824:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008826:	3701      	adds	r7, #1
 8008828:	601f      	str	r7, [r3, #0]
 800882a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800882c:	2b00      	cmp	r3, #0
 800882e:	f000 831d 	beq.w	8008e6c <_dtoa_r+0xb34>
 8008832:	601e      	str	r6, [r3, #0]
 8008834:	e31a      	b.n	8008e6c <_dtoa_r+0xb34>
 8008836:	07e2      	lsls	r2, r4, #31
 8008838:	d505      	bpl.n	8008846 <_dtoa_r+0x50e>
 800883a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800883e:	f7f7 fefb 	bl	8000638 <__aeabi_dmul>
 8008842:	3601      	adds	r6, #1
 8008844:	2301      	movs	r3, #1
 8008846:	1064      	asrs	r4, r4, #1
 8008848:	3508      	adds	r5, #8
 800884a:	e73f      	b.n	80086cc <_dtoa_r+0x394>
 800884c:	2602      	movs	r6, #2
 800884e:	e742      	b.n	80086d6 <_dtoa_r+0x39e>
 8008850:	9c07      	ldr	r4, [sp, #28]
 8008852:	9704      	str	r7, [sp, #16]
 8008854:	e761      	b.n	800871a <_dtoa_r+0x3e2>
 8008856:	4b27      	ldr	r3, [pc, #156]	@ (80088f4 <_dtoa_r+0x5bc>)
 8008858:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800885a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800885e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008862:	4454      	add	r4, sl
 8008864:	2900      	cmp	r1, #0
 8008866:	d053      	beq.n	8008910 <_dtoa_r+0x5d8>
 8008868:	4928      	ldr	r1, [pc, #160]	@ (800890c <_dtoa_r+0x5d4>)
 800886a:	2000      	movs	r0, #0
 800886c:	f7f8 f80e 	bl	800088c <__aeabi_ddiv>
 8008870:	4633      	mov	r3, r6
 8008872:	462a      	mov	r2, r5
 8008874:	f7f7 fd28 	bl	80002c8 <__aeabi_dsub>
 8008878:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800887c:	4656      	mov	r6, sl
 800887e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008882:	f7f8 f989 	bl	8000b98 <__aeabi_d2iz>
 8008886:	4605      	mov	r5, r0
 8008888:	f7f7 fe6c 	bl	8000564 <__aeabi_i2d>
 800888c:	4602      	mov	r2, r0
 800888e:	460b      	mov	r3, r1
 8008890:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008894:	f7f7 fd18 	bl	80002c8 <__aeabi_dsub>
 8008898:	3530      	adds	r5, #48	@ 0x30
 800889a:	4602      	mov	r2, r0
 800889c:	460b      	mov	r3, r1
 800889e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80088a2:	f806 5b01 	strb.w	r5, [r6], #1
 80088a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80088aa:	f7f8 f937 	bl	8000b1c <__aeabi_dcmplt>
 80088ae:	2800      	cmp	r0, #0
 80088b0:	d171      	bne.n	8008996 <_dtoa_r+0x65e>
 80088b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088b6:	4911      	ldr	r1, [pc, #68]	@ (80088fc <_dtoa_r+0x5c4>)
 80088b8:	2000      	movs	r0, #0
 80088ba:	f7f7 fd05 	bl	80002c8 <__aeabi_dsub>
 80088be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80088c2:	f7f8 f92b 	bl	8000b1c <__aeabi_dcmplt>
 80088c6:	2800      	cmp	r0, #0
 80088c8:	f040 8095 	bne.w	80089f6 <_dtoa_r+0x6be>
 80088cc:	42a6      	cmp	r6, r4
 80088ce:	f43f af50 	beq.w	8008772 <_dtoa_r+0x43a>
 80088d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80088d6:	4b0a      	ldr	r3, [pc, #40]	@ (8008900 <_dtoa_r+0x5c8>)
 80088d8:	2200      	movs	r2, #0
 80088da:	f7f7 fead 	bl	8000638 <__aeabi_dmul>
 80088de:	4b08      	ldr	r3, [pc, #32]	@ (8008900 <_dtoa_r+0x5c8>)
 80088e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80088e4:	2200      	movs	r2, #0
 80088e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088ea:	f7f7 fea5 	bl	8000638 <__aeabi_dmul>
 80088ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088f2:	e7c4      	b.n	800887e <_dtoa_r+0x546>
 80088f4:	0800c5b0 	.word	0x0800c5b0
 80088f8:	0800c588 	.word	0x0800c588
 80088fc:	3ff00000 	.word	0x3ff00000
 8008900:	40240000 	.word	0x40240000
 8008904:	401c0000 	.word	0x401c0000
 8008908:	40140000 	.word	0x40140000
 800890c:	3fe00000 	.word	0x3fe00000
 8008910:	4631      	mov	r1, r6
 8008912:	4628      	mov	r0, r5
 8008914:	f7f7 fe90 	bl	8000638 <__aeabi_dmul>
 8008918:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800891c:	9415      	str	r4, [sp, #84]	@ 0x54
 800891e:	4656      	mov	r6, sl
 8008920:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008924:	f7f8 f938 	bl	8000b98 <__aeabi_d2iz>
 8008928:	4605      	mov	r5, r0
 800892a:	f7f7 fe1b 	bl	8000564 <__aeabi_i2d>
 800892e:	4602      	mov	r2, r0
 8008930:	460b      	mov	r3, r1
 8008932:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008936:	f7f7 fcc7 	bl	80002c8 <__aeabi_dsub>
 800893a:	3530      	adds	r5, #48	@ 0x30
 800893c:	f806 5b01 	strb.w	r5, [r6], #1
 8008940:	4602      	mov	r2, r0
 8008942:	460b      	mov	r3, r1
 8008944:	42a6      	cmp	r6, r4
 8008946:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800894a:	f04f 0200 	mov.w	r2, #0
 800894e:	d124      	bne.n	800899a <_dtoa_r+0x662>
 8008950:	4bac      	ldr	r3, [pc, #688]	@ (8008c04 <_dtoa_r+0x8cc>)
 8008952:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008956:	f7f7 fcb9 	bl	80002cc <__adddf3>
 800895a:	4602      	mov	r2, r0
 800895c:	460b      	mov	r3, r1
 800895e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008962:	f7f8 f8f9 	bl	8000b58 <__aeabi_dcmpgt>
 8008966:	2800      	cmp	r0, #0
 8008968:	d145      	bne.n	80089f6 <_dtoa_r+0x6be>
 800896a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800896e:	49a5      	ldr	r1, [pc, #660]	@ (8008c04 <_dtoa_r+0x8cc>)
 8008970:	2000      	movs	r0, #0
 8008972:	f7f7 fca9 	bl	80002c8 <__aeabi_dsub>
 8008976:	4602      	mov	r2, r0
 8008978:	460b      	mov	r3, r1
 800897a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800897e:	f7f8 f8cd 	bl	8000b1c <__aeabi_dcmplt>
 8008982:	2800      	cmp	r0, #0
 8008984:	f43f aef5 	beq.w	8008772 <_dtoa_r+0x43a>
 8008988:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800898a:	1e73      	subs	r3, r6, #1
 800898c:	9315      	str	r3, [sp, #84]	@ 0x54
 800898e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008992:	2b30      	cmp	r3, #48	@ 0x30
 8008994:	d0f8      	beq.n	8008988 <_dtoa_r+0x650>
 8008996:	9f04      	ldr	r7, [sp, #16]
 8008998:	e73e      	b.n	8008818 <_dtoa_r+0x4e0>
 800899a:	4b9b      	ldr	r3, [pc, #620]	@ (8008c08 <_dtoa_r+0x8d0>)
 800899c:	f7f7 fe4c 	bl	8000638 <__aeabi_dmul>
 80089a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089a4:	e7bc      	b.n	8008920 <_dtoa_r+0x5e8>
 80089a6:	d10c      	bne.n	80089c2 <_dtoa_r+0x68a>
 80089a8:	4b98      	ldr	r3, [pc, #608]	@ (8008c0c <_dtoa_r+0x8d4>)
 80089aa:	2200      	movs	r2, #0
 80089ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089b0:	f7f7 fe42 	bl	8000638 <__aeabi_dmul>
 80089b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089b8:	f7f8 f8c4 	bl	8000b44 <__aeabi_dcmpge>
 80089bc:	2800      	cmp	r0, #0
 80089be:	f000 8157 	beq.w	8008c70 <_dtoa_r+0x938>
 80089c2:	2400      	movs	r4, #0
 80089c4:	4625      	mov	r5, r4
 80089c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089c8:	43db      	mvns	r3, r3
 80089ca:	9304      	str	r3, [sp, #16]
 80089cc:	4656      	mov	r6, sl
 80089ce:	2700      	movs	r7, #0
 80089d0:	4621      	mov	r1, r4
 80089d2:	4658      	mov	r0, fp
 80089d4:	f000 fbb4 	bl	8009140 <_Bfree>
 80089d8:	2d00      	cmp	r5, #0
 80089da:	d0dc      	beq.n	8008996 <_dtoa_r+0x65e>
 80089dc:	b12f      	cbz	r7, 80089ea <_dtoa_r+0x6b2>
 80089de:	42af      	cmp	r7, r5
 80089e0:	d003      	beq.n	80089ea <_dtoa_r+0x6b2>
 80089e2:	4639      	mov	r1, r7
 80089e4:	4658      	mov	r0, fp
 80089e6:	f000 fbab 	bl	8009140 <_Bfree>
 80089ea:	4629      	mov	r1, r5
 80089ec:	4658      	mov	r0, fp
 80089ee:	f000 fba7 	bl	8009140 <_Bfree>
 80089f2:	e7d0      	b.n	8008996 <_dtoa_r+0x65e>
 80089f4:	9704      	str	r7, [sp, #16]
 80089f6:	4633      	mov	r3, r6
 80089f8:	461e      	mov	r6, r3
 80089fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089fe:	2a39      	cmp	r2, #57	@ 0x39
 8008a00:	d107      	bne.n	8008a12 <_dtoa_r+0x6da>
 8008a02:	459a      	cmp	sl, r3
 8008a04:	d1f8      	bne.n	80089f8 <_dtoa_r+0x6c0>
 8008a06:	9a04      	ldr	r2, [sp, #16]
 8008a08:	3201      	adds	r2, #1
 8008a0a:	9204      	str	r2, [sp, #16]
 8008a0c:	2230      	movs	r2, #48	@ 0x30
 8008a0e:	f88a 2000 	strb.w	r2, [sl]
 8008a12:	781a      	ldrb	r2, [r3, #0]
 8008a14:	3201      	adds	r2, #1
 8008a16:	701a      	strb	r2, [r3, #0]
 8008a18:	e7bd      	b.n	8008996 <_dtoa_r+0x65e>
 8008a1a:	4b7b      	ldr	r3, [pc, #492]	@ (8008c08 <_dtoa_r+0x8d0>)
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	f7f7 fe0b 	bl	8000638 <__aeabi_dmul>
 8008a22:	2200      	movs	r2, #0
 8008a24:	2300      	movs	r3, #0
 8008a26:	4604      	mov	r4, r0
 8008a28:	460d      	mov	r5, r1
 8008a2a:	f7f8 f86d 	bl	8000b08 <__aeabi_dcmpeq>
 8008a2e:	2800      	cmp	r0, #0
 8008a30:	f43f aebb 	beq.w	80087aa <_dtoa_r+0x472>
 8008a34:	e6f0      	b.n	8008818 <_dtoa_r+0x4e0>
 8008a36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008a38:	2a00      	cmp	r2, #0
 8008a3a:	f000 80db 	beq.w	8008bf4 <_dtoa_r+0x8bc>
 8008a3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a40:	2a01      	cmp	r2, #1
 8008a42:	f300 80bf 	bgt.w	8008bc4 <_dtoa_r+0x88c>
 8008a46:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008a48:	2a00      	cmp	r2, #0
 8008a4a:	f000 80b7 	beq.w	8008bbc <_dtoa_r+0x884>
 8008a4e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008a52:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008a54:	4646      	mov	r6, r8
 8008a56:	9a08      	ldr	r2, [sp, #32]
 8008a58:	2101      	movs	r1, #1
 8008a5a:	441a      	add	r2, r3
 8008a5c:	4658      	mov	r0, fp
 8008a5e:	4498      	add	r8, r3
 8008a60:	9208      	str	r2, [sp, #32]
 8008a62:	f000 fc21 	bl	80092a8 <__i2b>
 8008a66:	4605      	mov	r5, r0
 8008a68:	b15e      	cbz	r6, 8008a82 <_dtoa_r+0x74a>
 8008a6a:	9b08      	ldr	r3, [sp, #32]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	dd08      	ble.n	8008a82 <_dtoa_r+0x74a>
 8008a70:	42b3      	cmp	r3, r6
 8008a72:	9a08      	ldr	r2, [sp, #32]
 8008a74:	bfa8      	it	ge
 8008a76:	4633      	movge	r3, r6
 8008a78:	eba8 0803 	sub.w	r8, r8, r3
 8008a7c:	1af6      	subs	r6, r6, r3
 8008a7e:	1ad3      	subs	r3, r2, r3
 8008a80:	9308      	str	r3, [sp, #32]
 8008a82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a84:	b1f3      	cbz	r3, 8008ac4 <_dtoa_r+0x78c>
 8008a86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	f000 80b7 	beq.w	8008bfc <_dtoa_r+0x8c4>
 8008a8e:	b18c      	cbz	r4, 8008ab4 <_dtoa_r+0x77c>
 8008a90:	4629      	mov	r1, r5
 8008a92:	4622      	mov	r2, r4
 8008a94:	4658      	mov	r0, fp
 8008a96:	f000 fcc7 	bl	8009428 <__pow5mult>
 8008a9a:	464a      	mov	r2, r9
 8008a9c:	4601      	mov	r1, r0
 8008a9e:	4605      	mov	r5, r0
 8008aa0:	4658      	mov	r0, fp
 8008aa2:	f000 fc17 	bl	80092d4 <__multiply>
 8008aa6:	4649      	mov	r1, r9
 8008aa8:	9004      	str	r0, [sp, #16]
 8008aaa:	4658      	mov	r0, fp
 8008aac:	f000 fb48 	bl	8009140 <_Bfree>
 8008ab0:	9b04      	ldr	r3, [sp, #16]
 8008ab2:	4699      	mov	r9, r3
 8008ab4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ab6:	1b1a      	subs	r2, r3, r4
 8008ab8:	d004      	beq.n	8008ac4 <_dtoa_r+0x78c>
 8008aba:	4649      	mov	r1, r9
 8008abc:	4658      	mov	r0, fp
 8008abe:	f000 fcb3 	bl	8009428 <__pow5mult>
 8008ac2:	4681      	mov	r9, r0
 8008ac4:	2101      	movs	r1, #1
 8008ac6:	4658      	mov	r0, fp
 8008ac8:	f000 fbee 	bl	80092a8 <__i2b>
 8008acc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ace:	4604      	mov	r4, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	f000 81cf 	beq.w	8008e74 <_dtoa_r+0xb3c>
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	4601      	mov	r1, r0
 8008ada:	4658      	mov	r0, fp
 8008adc:	f000 fca4 	bl	8009428 <__pow5mult>
 8008ae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	4604      	mov	r4, r0
 8008ae6:	f300 8095 	bgt.w	8008c14 <_dtoa_r+0x8dc>
 8008aea:	9b02      	ldr	r3, [sp, #8]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f040 8087 	bne.w	8008c00 <_dtoa_r+0x8c8>
 8008af2:	9b03      	ldr	r3, [sp, #12]
 8008af4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	f040 8089 	bne.w	8008c10 <_dtoa_r+0x8d8>
 8008afe:	9b03      	ldr	r3, [sp, #12]
 8008b00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b04:	0d1b      	lsrs	r3, r3, #20
 8008b06:	051b      	lsls	r3, r3, #20
 8008b08:	b12b      	cbz	r3, 8008b16 <_dtoa_r+0x7de>
 8008b0a:	9b08      	ldr	r3, [sp, #32]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	9308      	str	r3, [sp, #32]
 8008b10:	f108 0801 	add.w	r8, r8, #1
 8008b14:	2301      	movs	r3, #1
 8008b16:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	f000 81b0 	beq.w	8008e80 <_dtoa_r+0xb48>
 8008b20:	6923      	ldr	r3, [r4, #16]
 8008b22:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008b26:	6918      	ldr	r0, [r3, #16]
 8008b28:	f000 fb72 	bl	8009210 <__hi0bits>
 8008b2c:	f1c0 0020 	rsb	r0, r0, #32
 8008b30:	9b08      	ldr	r3, [sp, #32]
 8008b32:	4418      	add	r0, r3
 8008b34:	f010 001f 	ands.w	r0, r0, #31
 8008b38:	d077      	beq.n	8008c2a <_dtoa_r+0x8f2>
 8008b3a:	f1c0 0320 	rsb	r3, r0, #32
 8008b3e:	2b04      	cmp	r3, #4
 8008b40:	dd6b      	ble.n	8008c1a <_dtoa_r+0x8e2>
 8008b42:	9b08      	ldr	r3, [sp, #32]
 8008b44:	f1c0 001c 	rsb	r0, r0, #28
 8008b48:	4403      	add	r3, r0
 8008b4a:	4480      	add	r8, r0
 8008b4c:	4406      	add	r6, r0
 8008b4e:	9308      	str	r3, [sp, #32]
 8008b50:	f1b8 0f00 	cmp.w	r8, #0
 8008b54:	dd05      	ble.n	8008b62 <_dtoa_r+0x82a>
 8008b56:	4649      	mov	r1, r9
 8008b58:	4642      	mov	r2, r8
 8008b5a:	4658      	mov	r0, fp
 8008b5c:	f000 fcbe 	bl	80094dc <__lshift>
 8008b60:	4681      	mov	r9, r0
 8008b62:	9b08      	ldr	r3, [sp, #32]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	dd05      	ble.n	8008b74 <_dtoa_r+0x83c>
 8008b68:	4621      	mov	r1, r4
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	4658      	mov	r0, fp
 8008b6e:	f000 fcb5 	bl	80094dc <__lshift>
 8008b72:	4604      	mov	r4, r0
 8008b74:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d059      	beq.n	8008c2e <_dtoa_r+0x8f6>
 8008b7a:	4621      	mov	r1, r4
 8008b7c:	4648      	mov	r0, r9
 8008b7e:	f000 fd19 	bl	80095b4 <__mcmp>
 8008b82:	2800      	cmp	r0, #0
 8008b84:	da53      	bge.n	8008c2e <_dtoa_r+0x8f6>
 8008b86:	1e7b      	subs	r3, r7, #1
 8008b88:	9304      	str	r3, [sp, #16]
 8008b8a:	4649      	mov	r1, r9
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	220a      	movs	r2, #10
 8008b90:	4658      	mov	r0, fp
 8008b92:	f000 faf7 	bl	8009184 <__multadd>
 8008b96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b98:	4681      	mov	r9, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	f000 8172 	beq.w	8008e84 <_dtoa_r+0xb4c>
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	4629      	mov	r1, r5
 8008ba4:	220a      	movs	r2, #10
 8008ba6:	4658      	mov	r0, fp
 8008ba8:	f000 faec 	bl	8009184 <__multadd>
 8008bac:	9b00      	ldr	r3, [sp, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	4605      	mov	r5, r0
 8008bb2:	dc67      	bgt.n	8008c84 <_dtoa_r+0x94c>
 8008bb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bb6:	2b02      	cmp	r3, #2
 8008bb8:	dc41      	bgt.n	8008c3e <_dtoa_r+0x906>
 8008bba:	e063      	b.n	8008c84 <_dtoa_r+0x94c>
 8008bbc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008bbe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008bc2:	e746      	b.n	8008a52 <_dtoa_r+0x71a>
 8008bc4:	9b07      	ldr	r3, [sp, #28]
 8008bc6:	1e5c      	subs	r4, r3, #1
 8008bc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bca:	42a3      	cmp	r3, r4
 8008bcc:	bfbf      	itttt	lt
 8008bce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008bd0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008bd2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008bd4:	1ae3      	sublt	r3, r4, r3
 8008bd6:	bfb4      	ite	lt
 8008bd8:	18d2      	addlt	r2, r2, r3
 8008bda:	1b1c      	subge	r4, r3, r4
 8008bdc:	9b07      	ldr	r3, [sp, #28]
 8008bde:	bfbc      	itt	lt
 8008be0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008be2:	2400      	movlt	r4, #0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	bfb5      	itete	lt
 8008be8:	eba8 0603 	sublt.w	r6, r8, r3
 8008bec:	9b07      	ldrge	r3, [sp, #28]
 8008bee:	2300      	movlt	r3, #0
 8008bf0:	4646      	movge	r6, r8
 8008bf2:	e730      	b.n	8008a56 <_dtoa_r+0x71e>
 8008bf4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008bf6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008bf8:	4646      	mov	r6, r8
 8008bfa:	e735      	b.n	8008a68 <_dtoa_r+0x730>
 8008bfc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008bfe:	e75c      	b.n	8008aba <_dtoa_r+0x782>
 8008c00:	2300      	movs	r3, #0
 8008c02:	e788      	b.n	8008b16 <_dtoa_r+0x7de>
 8008c04:	3fe00000 	.word	0x3fe00000
 8008c08:	40240000 	.word	0x40240000
 8008c0c:	40140000 	.word	0x40140000
 8008c10:	9b02      	ldr	r3, [sp, #8]
 8008c12:	e780      	b.n	8008b16 <_dtoa_r+0x7de>
 8008c14:	2300      	movs	r3, #0
 8008c16:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c18:	e782      	b.n	8008b20 <_dtoa_r+0x7e8>
 8008c1a:	d099      	beq.n	8008b50 <_dtoa_r+0x818>
 8008c1c:	9a08      	ldr	r2, [sp, #32]
 8008c1e:	331c      	adds	r3, #28
 8008c20:	441a      	add	r2, r3
 8008c22:	4498      	add	r8, r3
 8008c24:	441e      	add	r6, r3
 8008c26:	9208      	str	r2, [sp, #32]
 8008c28:	e792      	b.n	8008b50 <_dtoa_r+0x818>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	e7f6      	b.n	8008c1c <_dtoa_r+0x8e4>
 8008c2e:	9b07      	ldr	r3, [sp, #28]
 8008c30:	9704      	str	r7, [sp, #16]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	dc20      	bgt.n	8008c78 <_dtoa_r+0x940>
 8008c36:	9300      	str	r3, [sp, #0]
 8008c38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	dd1e      	ble.n	8008c7c <_dtoa_r+0x944>
 8008c3e:	9b00      	ldr	r3, [sp, #0]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	f47f aec0 	bne.w	80089c6 <_dtoa_r+0x68e>
 8008c46:	4621      	mov	r1, r4
 8008c48:	2205      	movs	r2, #5
 8008c4a:	4658      	mov	r0, fp
 8008c4c:	f000 fa9a 	bl	8009184 <__multadd>
 8008c50:	4601      	mov	r1, r0
 8008c52:	4604      	mov	r4, r0
 8008c54:	4648      	mov	r0, r9
 8008c56:	f000 fcad 	bl	80095b4 <__mcmp>
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	f77f aeb3 	ble.w	80089c6 <_dtoa_r+0x68e>
 8008c60:	4656      	mov	r6, sl
 8008c62:	2331      	movs	r3, #49	@ 0x31
 8008c64:	f806 3b01 	strb.w	r3, [r6], #1
 8008c68:	9b04      	ldr	r3, [sp, #16]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	9304      	str	r3, [sp, #16]
 8008c6e:	e6ae      	b.n	80089ce <_dtoa_r+0x696>
 8008c70:	9c07      	ldr	r4, [sp, #28]
 8008c72:	9704      	str	r7, [sp, #16]
 8008c74:	4625      	mov	r5, r4
 8008c76:	e7f3      	b.n	8008c60 <_dtoa_r+0x928>
 8008c78:	9b07      	ldr	r3, [sp, #28]
 8008c7a:	9300      	str	r3, [sp, #0]
 8008c7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	f000 8104 	beq.w	8008e8c <_dtoa_r+0xb54>
 8008c84:	2e00      	cmp	r6, #0
 8008c86:	dd05      	ble.n	8008c94 <_dtoa_r+0x95c>
 8008c88:	4629      	mov	r1, r5
 8008c8a:	4632      	mov	r2, r6
 8008c8c:	4658      	mov	r0, fp
 8008c8e:	f000 fc25 	bl	80094dc <__lshift>
 8008c92:	4605      	mov	r5, r0
 8008c94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d05a      	beq.n	8008d50 <_dtoa_r+0xa18>
 8008c9a:	6869      	ldr	r1, [r5, #4]
 8008c9c:	4658      	mov	r0, fp
 8008c9e:	f000 fa0f 	bl	80090c0 <_Balloc>
 8008ca2:	4606      	mov	r6, r0
 8008ca4:	b928      	cbnz	r0, 8008cb2 <_dtoa_r+0x97a>
 8008ca6:	4b84      	ldr	r3, [pc, #528]	@ (8008eb8 <_dtoa_r+0xb80>)
 8008ca8:	4602      	mov	r2, r0
 8008caa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008cae:	f7ff bb5a 	b.w	8008366 <_dtoa_r+0x2e>
 8008cb2:	692a      	ldr	r2, [r5, #16]
 8008cb4:	3202      	adds	r2, #2
 8008cb6:	0092      	lsls	r2, r2, #2
 8008cb8:	f105 010c 	add.w	r1, r5, #12
 8008cbc:	300c      	adds	r0, #12
 8008cbe:	f000 ffaf 	bl	8009c20 <memcpy>
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	4631      	mov	r1, r6
 8008cc6:	4658      	mov	r0, fp
 8008cc8:	f000 fc08 	bl	80094dc <__lshift>
 8008ccc:	f10a 0301 	add.w	r3, sl, #1
 8008cd0:	9307      	str	r3, [sp, #28]
 8008cd2:	9b00      	ldr	r3, [sp, #0]
 8008cd4:	4453      	add	r3, sl
 8008cd6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008cd8:	9b02      	ldr	r3, [sp, #8]
 8008cda:	f003 0301 	and.w	r3, r3, #1
 8008cde:	462f      	mov	r7, r5
 8008ce0:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ce2:	4605      	mov	r5, r0
 8008ce4:	9b07      	ldr	r3, [sp, #28]
 8008ce6:	4621      	mov	r1, r4
 8008ce8:	3b01      	subs	r3, #1
 8008cea:	4648      	mov	r0, r9
 8008cec:	9300      	str	r3, [sp, #0]
 8008cee:	f7ff fa9a 	bl	8008226 <quorem>
 8008cf2:	4639      	mov	r1, r7
 8008cf4:	9002      	str	r0, [sp, #8]
 8008cf6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008cfa:	4648      	mov	r0, r9
 8008cfc:	f000 fc5a 	bl	80095b4 <__mcmp>
 8008d00:	462a      	mov	r2, r5
 8008d02:	9008      	str	r0, [sp, #32]
 8008d04:	4621      	mov	r1, r4
 8008d06:	4658      	mov	r0, fp
 8008d08:	f000 fc70 	bl	80095ec <__mdiff>
 8008d0c:	68c2      	ldr	r2, [r0, #12]
 8008d0e:	4606      	mov	r6, r0
 8008d10:	bb02      	cbnz	r2, 8008d54 <_dtoa_r+0xa1c>
 8008d12:	4601      	mov	r1, r0
 8008d14:	4648      	mov	r0, r9
 8008d16:	f000 fc4d 	bl	80095b4 <__mcmp>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	4631      	mov	r1, r6
 8008d1e:	4658      	mov	r0, fp
 8008d20:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d22:	f000 fa0d 	bl	8009140 <_Bfree>
 8008d26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d2a:	9e07      	ldr	r6, [sp, #28]
 8008d2c:	ea43 0102 	orr.w	r1, r3, r2
 8008d30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d32:	4319      	orrs	r1, r3
 8008d34:	d110      	bne.n	8008d58 <_dtoa_r+0xa20>
 8008d36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008d3a:	d029      	beq.n	8008d90 <_dtoa_r+0xa58>
 8008d3c:	9b08      	ldr	r3, [sp, #32]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	dd02      	ble.n	8008d48 <_dtoa_r+0xa10>
 8008d42:	9b02      	ldr	r3, [sp, #8]
 8008d44:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008d48:	9b00      	ldr	r3, [sp, #0]
 8008d4a:	f883 8000 	strb.w	r8, [r3]
 8008d4e:	e63f      	b.n	80089d0 <_dtoa_r+0x698>
 8008d50:	4628      	mov	r0, r5
 8008d52:	e7bb      	b.n	8008ccc <_dtoa_r+0x994>
 8008d54:	2201      	movs	r2, #1
 8008d56:	e7e1      	b.n	8008d1c <_dtoa_r+0x9e4>
 8008d58:	9b08      	ldr	r3, [sp, #32]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	db04      	blt.n	8008d68 <_dtoa_r+0xa30>
 8008d5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008d60:	430b      	orrs	r3, r1
 8008d62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008d64:	430b      	orrs	r3, r1
 8008d66:	d120      	bne.n	8008daa <_dtoa_r+0xa72>
 8008d68:	2a00      	cmp	r2, #0
 8008d6a:	dded      	ble.n	8008d48 <_dtoa_r+0xa10>
 8008d6c:	4649      	mov	r1, r9
 8008d6e:	2201      	movs	r2, #1
 8008d70:	4658      	mov	r0, fp
 8008d72:	f000 fbb3 	bl	80094dc <__lshift>
 8008d76:	4621      	mov	r1, r4
 8008d78:	4681      	mov	r9, r0
 8008d7a:	f000 fc1b 	bl	80095b4 <__mcmp>
 8008d7e:	2800      	cmp	r0, #0
 8008d80:	dc03      	bgt.n	8008d8a <_dtoa_r+0xa52>
 8008d82:	d1e1      	bne.n	8008d48 <_dtoa_r+0xa10>
 8008d84:	f018 0f01 	tst.w	r8, #1
 8008d88:	d0de      	beq.n	8008d48 <_dtoa_r+0xa10>
 8008d8a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008d8e:	d1d8      	bne.n	8008d42 <_dtoa_r+0xa0a>
 8008d90:	9a00      	ldr	r2, [sp, #0]
 8008d92:	2339      	movs	r3, #57	@ 0x39
 8008d94:	7013      	strb	r3, [r2, #0]
 8008d96:	4633      	mov	r3, r6
 8008d98:	461e      	mov	r6, r3
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008da0:	2a39      	cmp	r2, #57	@ 0x39
 8008da2:	d052      	beq.n	8008e4a <_dtoa_r+0xb12>
 8008da4:	3201      	adds	r2, #1
 8008da6:	701a      	strb	r2, [r3, #0]
 8008da8:	e612      	b.n	80089d0 <_dtoa_r+0x698>
 8008daa:	2a00      	cmp	r2, #0
 8008dac:	dd07      	ble.n	8008dbe <_dtoa_r+0xa86>
 8008dae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008db2:	d0ed      	beq.n	8008d90 <_dtoa_r+0xa58>
 8008db4:	9a00      	ldr	r2, [sp, #0]
 8008db6:	f108 0301 	add.w	r3, r8, #1
 8008dba:	7013      	strb	r3, [r2, #0]
 8008dbc:	e608      	b.n	80089d0 <_dtoa_r+0x698>
 8008dbe:	9b07      	ldr	r3, [sp, #28]
 8008dc0:	9a07      	ldr	r2, [sp, #28]
 8008dc2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008dc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d028      	beq.n	8008e1e <_dtoa_r+0xae6>
 8008dcc:	4649      	mov	r1, r9
 8008dce:	2300      	movs	r3, #0
 8008dd0:	220a      	movs	r2, #10
 8008dd2:	4658      	mov	r0, fp
 8008dd4:	f000 f9d6 	bl	8009184 <__multadd>
 8008dd8:	42af      	cmp	r7, r5
 8008dda:	4681      	mov	r9, r0
 8008ddc:	f04f 0300 	mov.w	r3, #0
 8008de0:	f04f 020a 	mov.w	r2, #10
 8008de4:	4639      	mov	r1, r7
 8008de6:	4658      	mov	r0, fp
 8008de8:	d107      	bne.n	8008dfa <_dtoa_r+0xac2>
 8008dea:	f000 f9cb 	bl	8009184 <__multadd>
 8008dee:	4607      	mov	r7, r0
 8008df0:	4605      	mov	r5, r0
 8008df2:	9b07      	ldr	r3, [sp, #28]
 8008df4:	3301      	adds	r3, #1
 8008df6:	9307      	str	r3, [sp, #28]
 8008df8:	e774      	b.n	8008ce4 <_dtoa_r+0x9ac>
 8008dfa:	f000 f9c3 	bl	8009184 <__multadd>
 8008dfe:	4629      	mov	r1, r5
 8008e00:	4607      	mov	r7, r0
 8008e02:	2300      	movs	r3, #0
 8008e04:	220a      	movs	r2, #10
 8008e06:	4658      	mov	r0, fp
 8008e08:	f000 f9bc 	bl	8009184 <__multadd>
 8008e0c:	4605      	mov	r5, r0
 8008e0e:	e7f0      	b.n	8008df2 <_dtoa_r+0xaba>
 8008e10:	9b00      	ldr	r3, [sp, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	bfcc      	ite	gt
 8008e16:	461e      	movgt	r6, r3
 8008e18:	2601      	movle	r6, #1
 8008e1a:	4456      	add	r6, sl
 8008e1c:	2700      	movs	r7, #0
 8008e1e:	4649      	mov	r1, r9
 8008e20:	2201      	movs	r2, #1
 8008e22:	4658      	mov	r0, fp
 8008e24:	f000 fb5a 	bl	80094dc <__lshift>
 8008e28:	4621      	mov	r1, r4
 8008e2a:	4681      	mov	r9, r0
 8008e2c:	f000 fbc2 	bl	80095b4 <__mcmp>
 8008e30:	2800      	cmp	r0, #0
 8008e32:	dcb0      	bgt.n	8008d96 <_dtoa_r+0xa5e>
 8008e34:	d102      	bne.n	8008e3c <_dtoa_r+0xb04>
 8008e36:	f018 0f01 	tst.w	r8, #1
 8008e3a:	d1ac      	bne.n	8008d96 <_dtoa_r+0xa5e>
 8008e3c:	4633      	mov	r3, r6
 8008e3e:	461e      	mov	r6, r3
 8008e40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e44:	2a30      	cmp	r2, #48	@ 0x30
 8008e46:	d0fa      	beq.n	8008e3e <_dtoa_r+0xb06>
 8008e48:	e5c2      	b.n	80089d0 <_dtoa_r+0x698>
 8008e4a:	459a      	cmp	sl, r3
 8008e4c:	d1a4      	bne.n	8008d98 <_dtoa_r+0xa60>
 8008e4e:	9b04      	ldr	r3, [sp, #16]
 8008e50:	3301      	adds	r3, #1
 8008e52:	9304      	str	r3, [sp, #16]
 8008e54:	2331      	movs	r3, #49	@ 0x31
 8008e56:	f88a 3000 	strb.w	r3, [sl]
 8008e5a:	e5b9      	b.n	80089d0 <_dtoa_r+0x698>
 8008e5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008e5e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008ebc <_dtoa_r+0xb84>
 8008e62:	b11b      	cbz	r3, 8008e6c <_dtoa_r+0xb34>
 8008e64:	f10a 0308 	add.w	r3, sl, #8
 8008e68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008e6a:	6013      	str	r3, [r2, #0]
 8008e6c:	4650      	mov	r0, sl
 8008e6e:	b019      	add	sp, #100	@ 0x64
 8008e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	f77f ae37 	ble.w	8008aea <_dtoa_r+0x7b2>
 8008e7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e80:	2001      	movs	r0, #1
 8008e82:	e655      	b.n	8008b30 <_dtoa_r+0x7f8>
 8008e84:	9b00      	ldr	r3, [sp, #0]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	f77f aed6 	ble.w	8008c38 <_dtoa_r+0x900>
 8008e8c:	4656      	mov	r6, sl
 8008e8e:	4621      	mov	r1, r4
 8008e90:	4648      	mov	r0, r9
 8008e92:	f7ff f9c8 	bl	8008226 <quorem>
 8008e96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008e9a:	f806 8b01 	strb.w	r8, [r6], #1
 8008e9e:	9b00      	ldr	r3, [sp, #0]
 8008ea0:	eba6 020a 	sub.w	r2, r6, sl
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	ddb3      	ble.n	8008e10 <_dtoa_r+0xad8>
 8008ea8:	4649      	mov	r1, r9
 8008eaa:	2300      	movs	r3, #0
 8008eac:	220a      	movs	r2, #10
 8008eae:	4658      	mov	r0, fp
 8008eb0:	f000 f968 	bl	8009184 <__multadd>
 8008eb4:	4681      	mov	r9, r0
 8008eb6:	e7ea      	b.n	8008e8e <_dtoa_r+0xb56>
 8008eb8:	0800c50c 	.word	0x0800c50c
 8008ebc:	0800c490 	.word	0x0800c490

08008ec0 <_free_r>:
 8008ec0:	b538      	push	{r3, r4, r5, lr}
 8008ec2:	4605      	mov	r5, r0
 8008ec4:	2900      	cmp	r1, #0
 8008ec6:	d041      	beq.n	8008f4c <_free_r+0x8c>
 8008ec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ecc:	1f0c      	subs	r4, r1, #4
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	bfb8      	it	lt
 8008ed2:	18e4      	addlt	r4, r4, r3
 8008ed4:	f000 f8e8 	bl	80090a8 <__malloc_lock>
 8008ed8:	4a1d      	ldr	r2, [pc, #116]	@ (8008f50 <_free_r+0x90>)
 8008eda:	6813      	ldr	r3, [r2, #0]
 8008edc:	b933      	cbnz	r3, 8008eec <_free_r+0x2c>
 8008ede:	6063      	str	r3, [r4, #4]
 8008ee0:	6014      	str	r4, [r2, #0]
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ee8:	f000 b8e4 	b.w	80090b4 <__malloc_unlock>
 8008eec:	42a3      	cmp	r3, r4
 8008eee:	d908      	bls.n	8008f02 <_free_r+0x42>
 8008ef0:	6820      	ldr	r0, [r4, #0]
 8008ef2:	1821      	adds	r1, r4, r0
 8008ef4:	428b      	cmp	r3, r1
 8008ef6:	bf01      	itttt	eq
 8008ef8:	6819      	ldreq	r1, [r3, #0]
 8008efa:	685b      	ldreq	r3, [r3, #4]
 8008efc:	1809      	addeq	r1, r1, r0
 8008efe:	6021      	streq	r1, [r4, #0]
 8008f00:	e7ed      	b.n	8008ede <_free_r+0x1e>
 8008f02:	461a      	mov	r2, r3
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	b10b      	cbz	r3, 8008f0c <_free_r+0x4c>
 8008f08:	42a3      	cmp	r3, r4
 8008f0a:	d9fa      	bls.n	8008f02 <_free_r+0x42>
 8008f0c:	6811      	ldr	r1, [r2, #0]
 8008f0e:	1850      	adds	r0, r2, r1
 8008f10:	42a0      	cmp	r0, r4
 8008f12:	d10b      	bne.n	8008f2c <_free_r+0x6c>
 8008f14:	6820      	ldr	r0, [r4, #0]
 8008f16:	4401      	add	r1, r0
 8008f18:	1850      	adds	r0, r2, r1
 8008f1a:	4283      	cmp	r3, r0
 8008f1c:	6011      	str	r1, [r2, #0]
 8008f1e:	d1e0      	bne.n	8008ee2 <_free_r+0x22>
 8008f20:	6818      	ldr	r0, [r3, #0]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	6053      	str	r3, [r2, #4]
 8008f26:	4408      	add	r0, r1
 8008f28:	6010      	str	r0, [r2, #0]
 8008f2a:	e7da      	b.n	8008ee2 <_free_r+0x22>
 8008f2c:	d902      	bls.n	8008f34 <_free_r+0x74>
 8008f2e:	230c      	movs	r3, #12
 8008f30:	602b      	str	r3, [r5, #0]
 8008f32:	e7d6      	b.n	8008ee2 <_free_r+0x22>
 8008f34:	6820      	ldr	r0, [r4, #0]
 8008f36:	1821      	adds	r1, r4, r0
 8008f38:	428b      	cmp	r3, r1
 8008f3a:	bf04      	itt	eq
 8008f3c:	6819      	ldreq	r1, [r3, #0]
 8008f3e:	685b      	ldreq	r3, [r3, #4]
 8008f40:	6063      	str	r3, [r4, #4]
 8008f42:	bf04      	itt	eq
 8008f44:	1809      	addeq	r1, r1, r0
 8008f46:	6021      	streq	r1, [r4, #0]
 8008f48:	6054      	str	r4, [r2, #4]
 8008f4a:	e7ca      	b.n	8008ee2 <_free_r+0x22>
 8008f4c:	bd38      	pop	{r3, r4, r5, pc}
 8008f4e:	bf00      	nop
 8008f50:	200009c8 	.word	0x200009c8

08008f54 <malloc>:
 8008f54:	4b02      	ldr	r3, [pc, #8]	@ (8008f60 <malloc+0xc>)
 8008f56:	4601      	mov	r1, r0
 8008f58:	6818      	ldr	r0, [r3, #0]
 8008f5a:	f000 b825 	b.w	8008fa8 <_malloc_r>
 8008f5e:	bf00      	nop
 8008f60:	20000024 	.word	0x20000024

08008f64 <sbrk_aligned>:
 8008f64:	b570      	push	{r4, r5, r6, lr}
 8008f66:	4e0f      	ldr	r6, [pc, #60]	@ (8008fa4 <sbrk_aligned+0x40>)
 8008f68:	460c      	mov	r4, r1
 8008f6a:	6831      	ldr	r1, [r6, #0]
 8008f6c:	4605      	mov	r5, r0
 8008f6e:	b911      	cbnz	r1, 8008f76 <sbrk_aligned+0x12>
 8008f70:	f000 fe46 	bl	8009c00 <_sbrk_r>
 8008f74:	6030      	str	r0, [r6, #0]
 8008f76:	4621      	mov	r1, r4
 8008f78:	4628      	mov	r0, r5
 8008f7a:	f000 fe41 	bl	8009c00 <_sbrk_r>
 8008f7e:	1c43      	adds	r3, r0, #1
 8008f80:	d103      	bne.n	8008f8a <sbrk_aligned+0x26>
 8008f82:	f04f 34ff 	mov.w	r4, #4294967295
 8008f86:	4620      	mov	r0, r4
 8008f88:	bd70      	pop	{r4, r5, r6, pc}
 8008f8a:	1cc4      	adds	r4, r0, #3
 8008f8c:	f024 0403 	bic.w	r4, r4, #3
 8008f90:	42a0      	cmp	r0, r4
 8008f92:	d0f8      	beq.n	8008f86 <sbrk_aligned+0x22>
 8008f94:	1a21      	subs	r1, r4, r0
 8008f96:	4628      	mov	r0, r5
 8008f98:	f000 fe32 	bl	8009c00 <_sbrk_r>
 8008f9c:	3001      	adds	r0, #1
 8008f9e:	d1f2      	bne.n	8008f86 <sbrk_aligned+0x22>
 8008fa0:	e7ef      	b.n	8008f82 <sbrk_aligned+0x1e>
 8008fa2:	bf00      	nop
 8008fa4:	200009c4 	.word	0x200009c4

08008fa8 <_malloc_r>:
 8008fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fac:	1ccd      	adds	r5, r1, #3
 8008fae:	f025 0503 	bic.w	r5, r5, #3
 8008fb2:	3508      	adds	r5, #8
 8008fb4:	2d0c      	cmp	r5, #12
 8008fb6:	bf38      	it	cc
 8008fb8:	250c      	movcc	r5, #12
 8008fba:	2d00      	cmp	r5, #0
 8008fbc:	4606      	mov	r6, r0
 8008fbe:	db01      	blt.n	8008fc4 <_malloc_r+0x1c>
 8008fc0:	42a9      	cmp	r1, r5
 8008fc2:	d904      	bls.n	8008fce <_malloc_r+0x26>
 8008fc4:	230c      	movs	r3, #12
 8008fc6:	6033      	str	r3, [r6, #0]
 8008fc8:	2000      	movs	r0, #0
 8008fca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80090a4 <_malloc_r+0xfc>
 8008fd2:	f000 f869 	bl	80090a8 <__malloc_lock>
 8008fd6:	f8d8 3000 	ldr.w	r3, [r8]
 8008fda:	461c      	mov	r4, r3
 8008fdc:	bb44      	cbnz	r4, 8009030 <_malloc_r+0x88>
 8008fde:	4629      	mov	r1, r5
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	f7ff ffbf 	bl	8008f64 <sbrk_aligned>
 8008fe6:	1c43      	adds	r3, r0, #1
 8008fe8:	4604      	mov	r4, r0
 8008fea:	d158      	bne.n	800909e <_malloc_r+0xf6>
 8008fec:	f8d8 4000 	ldr.w	r4, [r8]
 8008ff0:	4627      	mov	r7, r4
 8008ff2:	2f00      	cmp	r7, #0
 8008ff4:	d143      	bne.n	800907e <_malloc_r+0xd6>
 8008ff6:	2c00      	cmp	r4, #0
 8008ff8:	d04b      	beq.n	8009092 <_malloc_r+0xea>
 8008ffa:	6823      	ldr	r3, [r4, #0]
 8008ffc:	4639      	mov	r1, r7
 8008ffe:	4630      	mov	r0, r6
 8009000:	eb04 0903 	add.w	r9, r4, r3
 8009004:	f000 fdfc 	bl	8009c00 <_sbrk_r>
 8009008:	4581      	cmp	r9, r0
 800900a:	d142      	bne.n	8009092 <_malloc_r+0xea>
 800900c:	6821      	ldr	r1, [r4, #0]
 800900e:	1a6d      	subs	r5, r5, r1
 8009010:	4629      	mov	r1, r5
 8009012:	4630      	mov	r0, r6
 8009014:	f7ff ffa6 	bl	8008f64 <sbrk_aligned>
 8009018:	3001      	adds	r0, #1
 800901a:	d03a      	beq.n	8009092 <_malloc_r+0xea>
 800901c:	6823      	ldr	r3, [r4, #0]
 800901e:	442b      	add	r3, r5
 8009020:	6023      	str	r3, [r4, #0]
 8009022:	f8d8 3000 	ldr.w	r3, [r8]
 8009026:	685a      	ldr	r2, [r3, #4]
 8009028:	bb62      	cbnz	r2, 8009084 <_malloc_r+0xdc>
 800902a:	f8c8 7000 	str.w	r7, [r8]
 800902e:	e00f      	b.n	8009050 <_malloc_r+0xa8>
 8009030:	6822      	ldr	r2, [r4, #0]
 8009032:	1b52      	subs	r2, r2, r5
 8009034:	d420      	bmi.n	8009078 <_malloc_r+0xd0>
 8009036:	2a0b      	cmp	r2, #11
 8009038:	d917      	bls.n	800906a <_malloc_r+0xc2>
 800903a:	1961      	adds	r1, r4, r5
 800903c:	42a3      	cmp	r3, r4
 800903e:	6025      	str	r5, [r4, #0]
 8009040:	bf18      	it	ne
 8009042:	6059      	strne	r1, [r3, #4]
 8009044:	6863      	ldr	r3, [r4, #4]
 8009046:	bf08      	it	eq
 8009048:	f8c8 1000 	streq.w	r1, [r8]
 800904c:	5162      	str	r2, [r4, r5]
 800904e:	604b      	str	r3, [r1, #4]
 8009050:	4630      	mov	r0, r6
 8009052:	f000 f82f 	bl	80090b4 <__malloc_unlock>
 8009056:	f104 000b 	add.w	r0, r4, #11
 800905a:	1d23      	adds	r3, r4, #4
 800905c:	f020 0007 	bic.w	r0, r0, #7
 8009060:	1ac2      	subs	r2, r0, r3
 8009062:	bf1c      	itt	ne
 8009064:	1a1b      	subne	r3, r3, r0
 8009066:	50a3      	strne	r3, [r4, r2]
 8009068:	e7af      	b.n	8008fca <_malloc_r+0x22>
 800906a:	6862      	ldr	r2, [r4, #4]
 800906c:	42a3      	cmp	r3, r4
 800906e:	bf0c      	ite	eq
 8009070:	f8c8 2000 	streq.w	r2, [r8]
 8009074:	605a      	strne	r2, [r3, #4]
 8009076:	e7eb      	b.n	8009050 <_malloc_r+0xa8>
 8009078:	4623      	mov	r3, r4
 800907a:	6864      	ldr	r4, [r4, #4]
 800907c:	e7ae      	b.n	8008fdc <_malloc_r+0x34>
 800907e:	463c      	mov	r4, r7
 8009080:	687f      	ldr	r7, [r7, #4]
 8009082:	e7b6      	b.n	8008ff2 <_malloc_r+0x4a>
 8009084:	461a      	mov	r2, r3
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	42a3      	cmp	r3, r4
 800908a:	d1fb      	bne.n	8009084 <_malloc_r+0xdc>
 800908c:	2300      	movs	r3, #0
 800908e:	6053      	str	r3, [r2, #4]
 8009090:	e7de      	b.n	8009050 <_malloc_r+0xa8>
 8009092:	230c      	movs	r3, #12
 8009094:	6033      	str	r3, [r6, #0]
 8009096:	4630      	mov	r0, r6
 8009098:	f000 f80c 	bl	80090b4 <__malloc_unlock>
 800909c:	e794      	b.n	8008fc8 <_malloc_r+0x20>
 800909e:	6005      	str	r5, [r0, #0]
 80090a0:	e7d6      	b.n	8009050 <_malloc_r+0xa8>
 80090a2:	bf00      	nop
 80090a4:	200009c8 	.word	0x200009c8

080090a8 <__malloc_lock>:
 80090a8:	4801      	ldr	r0, [pc, #4]	@ (80090b0 <__malloc_lock+0x8>)
 80090aa:	f7ff b8ba 	b.w	8008222 <__retarget_lock_acquire_recursive>
 80090ae:	bf00      	nop
 80090b0:	200009c0 	.word	0x200009c0

080090b4 <__malloc_unlock>:
 80090b4:	4801      	ldr	r0, [pc, #4]	@ (80090bc <__malloc_unlock+0x8>)
 80090b6:	f7ff b8b5 	b.w	8008224 <__retarget_lock_release_recursive>
 80090ba:	bf00      	nop
 80090bc:	200009c0 	.word	0x200009c0

080090c0 <_Balloc>:
 80090c0:	b570      	push	{r4, r5, r6, lr}
 80090c2:	69c6      	ldr	r6, [r0, #28]
 80090c4:	4604      	mov	r4, r0
 80090c6:	460d      	mov	r5, r1
 80090c8:	b976      	cbnz	r6, 80090e8 <_Balloc+0x28>
 80090ca:	2010      	movs	r0, #16
 80090cc:	f7ff ff42 	bl	8008f54 <malloc>
 80090d0:	4602      	mov	r2, r0
 80090d2:	61e0      	str	r0, [r4, #28]
 80090d4:	b920      	cbnz	r0, 80090e0 <_Balloc+0x20>
 80090d6:	4b18      	ldr	r3, [pc, #96]	@ (8009138 <_Balloc+0x78>)
 80090d8:	4818      	ldr	r0, [pc, #96]	@ (800913c <_Balloc+0x7c>)
 80090da:	216b      	movs	r1, #107	@ 0x6b
 80090dc:	f000 fdae 	bl	8009c3c <__assert_func>
 80090e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090e4:	6006      	str	r6, [r0, #0]
 80090e6:	60c6      	str	r6, [r0, #12]
 80090e8:	69e6      	ldr	r6, [r4, #28]
 80090ea:	68f3      	ldr	r3, [r6, #12]
 80090ec:	b183      	cbz	r3, 8009110 <_Balloc+0x50>
 80090ee:	69e3      	ldr	r3, [r4, #28]
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80090f6:	b9b8      	cbnz	r0, 8009128 <_Balloc+0x68>
 80090f8:	2101      	movs	r1, #1
 80090fa:	fa01 f605 	lsl.w	r6, r1, r5
 80090fe:	1d72      	adds	r2, r6, #5
 8009100:	0092      	lsls	r2, r2, #2
 8009102:	4620      	mov	r0, r4
 8009104:	f000 fdb8 	bl	8009c78 <_calloc_r>
 8009108:	b160      	cbz	r0, 8009124 <_Balloc+0x64>
 800910a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800910e:	e00e      	b.n	800912e <_Balloc+0x6e>
 8009110:	2221      	movs	r2, #33	@ 0x21
 8009112:	2104      	movs	r1, #4
 8009114:	4620      	mov	r0, r4
 8009116:	f000 fdaf 	bl	8009c78 <_calloc_r>
 800911a:	69e3      	ldr	r3, [r4, #28]
 800911c:	60f0      	str	r0, [r6, #12]
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d1e4      	bne.n	80090ee <_Balloc+0x2e>
 8009124:	2000      	movs	r0, #0
 8009126:	bd70      	pop	{r4, r5, r6, pc}
 8009128:	6802      	ldr	r2, [r0, #0]
 800912a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800912e:	2300      	movs	r3, #0
 8009130:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009134:	e7f7      	b.n	8009126 <_Balloc+0x66>
 8009136:	bf00      	nop
 8009138:	0800c49d 	.word	0x0800c49d
 800913c:	0800c51d 	.word	0x0800c51d

08009140 <_Bfree>:
 8009140:	b570      	push	{r4, r5, r6, lr}
 8009142:	69c6      	ldr	r6, [r0, #28]
 8009144:	4605      	mov	r5, r0
 8009146:	460c      	mov	r4, r1
 8009148:	b976      	cbnz	r6, 8009168 <_Bfree+0x28>
 800914a:	2010      	movs	r0, #16
 800914c:	f7ff ff02 	bl	8008f54 <malloc>
 8009150:	4602      	mov	r2, r0
 8009152:	61e8      	str	r0, [r5, #28]
 8009154:	b920      	cbnz	r0, 8009160 <_Bfree+0x20>
 8009156:	4b09      	ldr	r3, [pc, #36]	@ (800917c <_Bfree+0x3c>)
 8009158:	4809      	ldr	r0, [pc, #36]	@ (8009180 <_Bfree+0x40>)
 800915a:	218f      	movs	r1, #143	@ 0x8f
 800915c:	f000 fd6e 	bl	8009c3c <__assert_func>
 8009160:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009164:	6006      	str	r6, [r0, #0]
 8009166:	60c6      	str	r6, [r0, #12]
 8009168:	b13c      	cbz	r4, 800917a <_Bfree+0x3a>
 800916a:	69eb      	ldr	r3, [r5, #28]
 800916c:	6862      	ldr	r2, [r4, #4]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009174:	6021      	str	r1, [r4, #0]
 8009176:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800917a:	bd70      	pop	{r4, r5, r6, pc}
 800917c:	0800c49d 	.word	0x0800c49d
 8009180:	0800c51d 	.word	0x0800c51d

08009184 <__multadd>:
 8009184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009188:	690d      	ldr	r5, [r1, #16]
 800918a:	4607      	mov	r7, r0
 800918c:	460c      	mov	r4, r1
 800918e:	461e      	mov	r6, r3
 8009190:	f101 0c14 	add.w	ip, r1, #20
 8009194:	2000      	movs	r0, #0
 8009196:	f8dc 3000 	ldr.w	r3, [ip]
 800919a:	b299      	uxth	r1, r3
 800919c:	fb02 6101 	mla	r1, r2, r1, r6
 80091a0:	0c1e      	lsrs	r6, r3, #16
 80091a2:	0c0b      	lsrs	r3, r1, #16
 80091a4:	fb02 3306 	mla	r3, r2, r6, r3
 80091a8:	b289      	uxth	r1, r1
 80091aa:	3001      	adds	r0, #1
 80091ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80091b0:	4285      	cmp	r5, r0
 80091b2:	f84c 1b04 	str.w	r1, [ip], #4
 80091b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80091ba:	dcec      	bgt.n	8009196 <__multadd+0x12>
 80091bc:	b30e      	cbz	r6, 8009202 <__multadd+0x7e>
 80091be:	68a3      	ldr	r3, [r4, #8]
 80091c0:	42ab      	cmp	r3, r5
 80091c2:	dc19      	bgt.n	80091f8 <__multadd+0x74>
 80091c4:	6861      	ldr	r1, [r4, #4]
 80091c6:	4638      	mov	r0, r7
 80091c8:	3101      	adds	r1, #1
 80091ca:	f7ff ff79 	bl	80090c0 <_Balloc>
 80091ce:	4680      	mov	r8, r0
 80091d0:	b928      	cbnz	r0, 80091de <__multadd+0x5a>
 80091d2:	4602      	mov	r2, r0
 80091d4:	4b0c      	ldr	r3, [pc, #48]	@ (8009208 <__multadd+0x84>)
 80091d6:	480d      	ldr	r0, [pc, #52]	@ (800920c <__multadd+0x88>)
 80091d8:	21ba      	movs	r1, #186	@ 0xba
 80091da:	f000 fd2f 	bl	8009c3c <__assert_func>
 80091de:	6922      	ldr	r2, [r4, #16]
 80091e0:	3202      	adds	r2, #2
 80091e2:	f104 010c 	add.w	r1, r4, #12
 80091e6:	0092      	lsls	r2, r2, #2
 80091e8:	300c      	adds	r0, #12
 80091ea:	f000 fd19 	bl	8009c20 <memcpy>
 80091ee:	4621      	mov	r1, r4
 80091f0:	4638      	mov	r0, r7
 80091f2:	f7ff ffa5 	bl	8009140 <_Bfree>
 80091f6:	4644      	mov	r4, r8
 80091f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80091fc:	3501      	adds	r5, #1
 80091fe:	615e      	str	r6, [r3, #20]
 8009200:	6125      	str	r5, [r4, #16]
 8009202:	4620      	mov	r0, r4
 8009204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009208:	0800c50c 	.word	0x0800c50c
 800920c:	0800c51d 	.word	0x0800c51d

08009210 <__hi0bits>:
 8009210:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009214:	4603      	mov	r3, r0
 8009216:	bf36      	itet	cc
 8009218:	0403      	lslcc	r3, r0, #16
 800921a:	2000      	movcs	r0, #0
 800921c:	2010      	movcc	r0, #16
 800921e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009222:	bf3c      	itt	cc
 8009224:	021b      	lslcc	r3, r3, #8
 8009226:	3008      	addcc	r0, #8
 8009228:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800922c:	bf3c      	itt	cc
 800922e:	011b      	lslcc	r3, r3, #4
 8009230:	3004      	addcc	r0, #4
 8009232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009236:	bf3c      	itt	cc
 8009238:	009b      	lslcc	r3, r3, #2
 800923a:	3002      	addcc	r0, #2
 800923c:	2b00      	cmp	r3, #0
 800923e:	db05      	blt.n	800924c <__hi0bits+0x3c>
 8009240:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009244:	f100 0001 	add.w	r0, r0, #1
 8009248:	bf08      	it	eq
 800924a:	2020      	moveq	r0, #32
 800924c:	4770      	bx	lr

0800924e <__lo0bits>:
 800924e:	6803      	ldr	r3, [r0, #0]
 8009250:	4602      	mov	r2, r0
 8009252:	f013 0007 	ands.w	r0, r3, #7
 8009256:	d00b      	beq.n	8009270 <__lo0bits+0x22>
 8009258:	07d9      	lsls	r1, r3, #31
 800925a:	d421      	bmi.n	80092a0 <__lo0bits+0x52>
 800925c:	0798      	lsls	r0, r3, #30
 800925e:	bf49      	itett	mi
 8009260:	085b      	lsrmi	r3, r3, #1
 8009262:	089b      	lsrpl	r3, r3, #2
 8009264:	2001      	movmi	r0, #1
 8009266:	6013      	strmi	r3, [r2, #0]
 8009268:	bf5c      	itt	pl
 800926a:	6013      	strpl	r3, [r2, #0]
 800926c:	2002      	movpl	r0, #2
 800926e:	4770      	bx	lr
 8009270:	b299      	uxth	r1, r3
 8009272:	b909      	cbnz	r1, 8009278 <__lo0bits+0x2a>
 8009274:	0c1b      	lsrs	r3, r3, #16
 8009276:	2010      	movs	r0, #16
 8009278:	b2d9      	uxtb	r1, r3
 800927a:	b909      	cbnz	r1, 8009280 <__lo0bits+0x32>
 800927c:	3008      	adds	r0, #8
 800927e:	0a1b      	lsrs	r3, r3, #8
 8009280:	0719      	lsls	r1, r3, #28
 8009282:	bf04      	itt	eq
 8009284:	091b      	lsreq	r3, r3, #4
 8009286:	3004      	addeq	r0, #4
 8009288:	0799      	lsls	r1, r3, #30
 800928a:	bf04      	itt	eq
 800928c:	089b      	lsreq	r3, r3, #2
 800928e:	3002      	addeq	r0, #2
 8009290:	07d9      	lsls	r1, r3, #31
 8009292:	d403      	bmi.n	800929c <__lo0bits+0x4e>
 8009294:	085b      	lsrs	r3, r3, #1
 8009296:	f100 0001 	add.w	r0, r0, #1
 800929a:	d003      	beq.n	80092a4 <__lo0bits+0x56>
 800929c:	6013      	str	r3, [r2, #0]
 800929e:	4770      	bx	lr
 80092a0:	2000      	movs	r0, #0
 80092a2:	4770      	bx	lr
 80092a4:	2020      	movs	r0, #32
 80092a6:	4770      	bx	lr

080092a8 <__i2b>:
 80092a8:	b510      	push	{r4, lr}
 80092aa:	460c      	mov	r4, r1
 80092ac:	2101      	movs	r1, #1
 80092ae:	f7ff ff07 	bl	80090c0 <_Balloc>
 80092b2:	4602      	mov	r2, r0
 80092b4:	b928      	cbnz	r0, 80092c2 <__i2b+0x1a>
 80092b6:	4b05      	ldr	r3, [pc, #20]	@ (80092cc <__i2b+0x24>)
 80092b8:	4805      	ldr	r0, [pc, #20]	@ (80092d0 <__i2b+0x28>)
 80092ba:	f240 1145 	movw	r1, #325	@ 0x145
 80092be:	f000 fcbd 	bl	8009c3c <__assert_func>
 80092c2:	2301      	movs	r3, #1
 80092c4:	6144      	str	r4, [r0, #20]
 80092c6:	6103      	str	r3, [r0, #16]
 80092c8:	bd10      	pop	{r4, pc}
 80092ca:	bf00      	nop
 80092cc:	0800c50c 	.word	0x0800c50c
 80092d0:	0800c51d 	.word	0x0800c51d

080092d4 <__multiply>:
 80092d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d8:	4614      	mov	r4, r2
 80092da:	690a      	ldr	r2, [r1, #16]
 80092dc:	6923      	ldr	r3, [r4, #16]
 80092de:	429a      	cmp	r2, r3
 80092e0:	bfa8      	it	ge
 80092e2:	4623      	movge	r3, r4
 80092e4:	460f      	mov	r7, r1
 80092e6:	bfa4      	itt	ge
 80092e8:	460c      	movge	r4, r1
 80092ea:	461f      	movge	r7, r3
 80092ec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80092f0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80092f4:	68a3      	ldr	r3, [r4, #8]
 80092f6:	6861      	ldr	r1, [r4, #4]
 80092f8:	eb0a 0609 	add.w	r6, sl, r9
 80092fc:	42b3      	cmp	r3, r6
 80092fe:	b085      	sub	sp, #20
 8009300:	bfb8      	it	lt
 8009302:	3101      	addlt	r1, #1
 8009304:	f7ff fedc 	bl	80090c0 <_Balloc>
 8009308:	b930      	cbnz	r0, 8009318 <__multiply+0x44>
 800930a:	4602      	mov	r2, r0
 800930c:	4b44      	ldr	r3, [pc, #272]	@ (8009420 <__multiply+0x14c>)
 800930e:	4845      	ldr	r0, [pc, #276]	@ (8009424 <__multiply+0x150>)
 8009310:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009314:	f000 fc92 	bl	8009c3c <__assert_func>
 8009318:	f100 0514 	add.w	r5, r0, #20
 800931c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009320:	462b      	mov	r3, r5
 8009322:	2200      	movs	r2, #0
 8009324:	4543      	cmp	r3, r8
 8009326:	d321      	bcc.n	800936c <__multiply+0x98>
 8009328:	f107 0114 	add.w	r1, r7, #20
 800932c:	f104 0214 	add.w	r2, r4, #20
 8009330:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009334:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009338:	9302      	str	r3, [sp, #8]
 800933a:	1b13      	subs	r3, r2, r4
 800933c:	3b15      	subs	r3, #21
 800933e:	f023 0303 	bic.w	r3, r3, #3
 8009342:	3304      	adds	r3, #4
 8009344:	f104 0715 	add.w	r7, r4, #21
 8009348:	42ba      	cmp	r2, r7
 800934a:	bf38      	it	cc
 800934c:	2304      	movcc	r3, #4
 800934e:	9301      	str	r3, [sp, #4]
 8009350:	9b02      	ldr	r3, [sp, #8]
 8009352:	9103      	str	r1, [sp, #12]
 8009354:	428b      	cmp	r3, r1
 8009356:	d80c      	bhi.n	8009372 <__multiply+0x9e>
 8009358:	2e00      	cmp	r6, #0
 800935a:	dd03      	ble.n	8009364 <__multiply+0x90>
 800935c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009360:	2b00      	cmp	r3, #0
 8009362:	d05b      	beq.n	800941c <__multiply+0x148>
 8009364:	6106      	str	r6, [r0, #16]
 8009366:	b005      	add	sp, #20
 8009368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800936c:	f843 2b04 	str.w	r2, [r3], #4
 8009370:	e7d8      	b.n	8009324 <__multiply+0x50>
 8009372:	f8b1 a000 	ldrh.w	sl, [r1]
 8009376:	f1ba 0f00 	cmp.w	sl, #0
 800937a:	d024      	beq.n	80093c6 <__multiply+0xf2>
 800937c:	f104 0e14 	add.w	lr, r4, #20
 8009380:	46a9      	mov	r9, r5
 8009382:	f04f 0c00 	mov.w	ip, #0
 8009386:	f85e 7b04 	ldr.w	r7, [lr], #4
 800938a:	f8d9 3000 	ldr.w	r3, [r9]
 800938e:	fa1f fb87 	uxth.w	fp, r7
 8009392:	b29b      	uxth	r3, r3
 8009394:	fb0a 330b 	mla	r3, sl, fp, r3
 8009398:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800939c:	f8d9 7000 	ldr.w	r7, [r9]
 80093a0:	4463      	add	r3, ip
 80093a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80093a6:	fb0a c70b 	mla	r7, sl, fp, ip
 80093aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80093b4:	4572      	cmp	r2, lr
 80093b6:	f849 3b04 	str.w	r3, [r9], #4
 80093ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80093be:	d8e2      	bhi.n	8009386 <__multiply+0xb2>
 80093c0:	9b01      	ldr	r3, [sp, #4]
 80093c2:	f845 c003 	str.w	ip, [r5, r3]
 80093c6:	9b03      	ldr	r3, [sp, #12]
 80093c8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80093cc:	3104      	adds	r1, #4
 80093ce:	f1b9 0f00 	cmp.w	r9, #0
 80093d2:	d021      	beq.n	8009418 <__multiply+0x144>
 80093d4:	682b      	ldr	r3, [r5, #0]
 80093d6:	f104 0c14 	add.w	ip, r4, #20
 80093da:	46ae      	mov	lr, r5
 80093dc:	f04f 0a00 	mov.w	sl, #0
 80093e0:	f8bc b000 	ldrh.w	fp, [ip]
 80093e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80093e8:	fb09 770b 	mla	r7, r9, fp, r7
 80093ec:	4457      	add	r7, sl
 80093ee:	b29b      	uxth	r3, r3
 80093f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80093f4:	f84e 3b04 	str.w	r3, [lr], #4
 80093f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80093fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009400:	f8be 3000 	ldrh.w	r3, [lr]
 8009404:	fb09 330a 	mla	r3, r9, sl, r3
 8009408:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800940c:	4562      	cmp	r2, ip
 800940e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009412:	d8e5      	bhi.n	80093e0 <__multiply+0x10c>
 8009414:	9f01      	ldr	r7, [sp, #4]
 8009416:	51eb      	str	r3, [r5, r7]
 8009418:	3504      	adds	r5, #4
 800941a:	e799      	b.n	8009350 <__multiply+0x7c>
 800941c:	3e01      	subs	r6, #1
 800941e:	e79b      	b.n	8009358 <__multiply+0x84>
 8009420:	0800c50c 	.word	0x0800c50c
 8009424:	0800c51d 	.word	0x0800c51d

08009428 <__pow5mult>:
 8009428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800942c:	4615      	mov	r5, r2
 800942e:	f012 0203 	ands.w	r2, r2, #3
 8009432:	4607      	mov	r7, r0
 8009434:	460e      	mov	r6, r1
 8009436:	d007      	beq.n	8009448 <__pow5mult+0x20>
 8009438:	4c25      	ldr	r4, [pc, #148]	@ (80094d0 <__pow5mult+0xa8>)
 800943a:	3a01      	subs	r2, #1
 800943c:	2300      	movs	r3, #0
 800943e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009442:	f7ff fe9f 	bl	8009184 <__multadd>
 8009446:	4606      	mov	r6, r0
 8009448:	10ad      	asrs	r5, r5, #2
 800944a:	d03d      	beq.n	80094c8 <__pow5mult+0xa0>
 800944c:	69fc      	ldr	r4, [r7, #28]
 800944e:	b97c      	cbnz	r4, 8009470 <__pow5mult+0x48>
 8009450:	2010      	movs	r0, #16
 8009452:	f7ff fd7f 	bl	8008f54 <malloc>
 8009456:	4602      	mov	r2, r0
 8009458:	61f8      	str	r0, [r7, #28]
 800945a:	b928      	cbnz	r0, 8009468 <__pow5mult+0x40>
 800945c:	4b1d      	ldr	r3, [pc, #116]	@ (80094d4 <__pow5mult+0xac>)
 800945e:	481e      	ldr	r0, [pc, #120]	@ (80094d8 <__pow5mult+0xb0>)
 8009460:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009464:	f000 fbea 	bl	8009c3c <__assert_func>
 8009468:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800946c:	6004      	str	r4, [r0, #0]
 800946e:	60c4      	str	r4, [r0, #12]
 8009470:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009474:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009478:	b94c      	cbnz	r4, 800948e <__pow5mult+0x66>
 800947a:	f240 2171 	movw	r1, #625	@ 0x271
 800947e:	4638      	mov	r0, r7
 8009480:	f7ff ff12 	bl	80092a8 <__i2b>
 8009484:	2300      	movs	r3, #0
 8009486:	f8c8 0008 	str.w	r0, [r8, #8]
 800948a:	4604      	mov	r4, r0
 800948c:	6003      	str	r3, [r0, #0]
 800948e:	f04f 0900 	mov.w	r9, #0
 8009492:	07eb      	lsls	r3, r5, #31
 8009494:	d50a      	bpl.n	80094ac <__pow5mult+0x84>
 8009496:	4631      	mov	r1, r6
 8009498:	4622      	mov	r2, r4
 800949a:	4638      	mov	r0, r7
 800949c:	f7ff ff1a 	bl	80092d4 <__multiply>
 80094a0:	4631      	mov	r1, r6
 80094a2:	4680      	mov	r8, r0
 80094a4:	4638      	mov	r0, r7
 80094a6:	f7ff fe4b 	bl	8009140 <_Bfree>
 80094aa:	4646      	mov	r6, r8
 80094ac:	106d      	asrs	r5, r5, #1
 80094ae:	d00b      	beq.n	80094c8 <__pow5mult+0xa0>
 80094b0:	6820      	ldr	r0, [r4, #0]
 80094b2:	b938      	cbnz	r0, 80094c4 <__pow5mult+0x9c>
 80094b4:	4622      	mov	r2, r4
 80094b6:	4621      	mov	r1, r4
 80094b8:	4638      	mov	r0, r7
 80094ba:	f7ff ff0b 	bl	80092d4 <__multiply>
 80094be:	6020      	str	r0, [r4, #0]
 80094c0:	f8c0 9000 	str.w	r9, [r0]
 80094c4:	4604      	mov	r4, r0
 80094c6:	e7e4      	b.n	8009492 <__pow5mult+0x6a>
 80094c8:	4630      	mov	r0, r6
 80094ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094ce:	bf00      	nop
 80094d0:	0800c578 	.word	0x0800c578
 80094d4:	0800c49d 	.word	0x0800c49d
 80094d8:	0800c51d 	.word	0x0800c51d

080094dc <__lshift>:
 80094dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094e0:	460c      	mov	r4, r1
 80094e2:	6849      	ldr	r1, [r1, #4]
 80094e4:	6923      	ldr	r3, [r4, #16]
 80094e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80094ea:	68a3      	ldr	r3, [r4, #8]
 80094ec:	4607      	mov	r7, r0
 80094ee:	4691      	mov	r9, r2
 80094f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80094f4:	f108 0601 	add.w	r6, r8, #1
 80094f8:	42b3      	cmp	r3, r6
 80094fa:	db0b      	blt.n	8009514 <__lshift+0x38>
 80094fc:	4638      	mov	r0, r7
 80094fe:	f7ff fddf 	bl	80090c0 <_Balloc>
 8009502:	4605      	mov	r5, r0
 8009504:	b948      	cbnz	r0, 800951a <__lshift+0x3e>
 8009506:	4602      	mov	r2, r0
 8009508:	4b28      	ldr	r3, [pc, #160]	@ (80095ac <__lshift+0xd0>)
 800950a:	4829      	ldr	r0, [pc, #164]	@ (80095b0 <__lshift+0xd4>)
 800950c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009510:	f000 fb94 	bl	8009c3c <__assert_func>
 8009514:	3101      	adds	r1, #1
 8009516:	005b      	lsls	r3, r3, #1
 8009518:	e7ee      	b.n	80094f8 <__lshift+0x1c>
 800951a:	2300      	movs	r3, #0
 800951c:	f100 0114 	add.w	r1, r0, #20
 8009520:	f100 0210 	add.w	r2, r0, #16
 8009524:	4618      	mov	r0, r3
 8009526:	4553      	cmp	r3, sl
 8009528:	db33      	blt.n	8009592 <__lshift+0xb6>
 800952a:	6920      	ldr	r0, [r4, #16]
 800952c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009530:	f104 0314 	add.w	r3, r4, #20
 8009534:	f019 091f 	ands.w	r9, r9, #31
 8009538:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800953c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009540:	d02b      	beq.n	800959a <__lshift+0xbe>
 8009542:	f1c9 0e20 	rsb	lr, r9, #32
 8009546:	468a      	mov	sl, r1
 8009548:	2200      	movs	r2, #0
 800954a:	6818      	ldr	r0, [r3, #0]
 800954c:	fa00 f009 	lsl.w	r0, r0, r9
 8009550:	4310      	orrs	r0, r2
 8009552:	f84a 0b04 	str.w	r0, [sl], #4
 8009556:	f853 2b04 	ldr.w	r2, [r3], #4
 800955a:	459c      	cmp	ip, r3
 800955c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009560:	d8f3      	bhi.n	800954a <__lshift+0x6e>
 8009562:	ebac 0304 	sub.w	r3, ip, r4
 8009566:	3b15      	subs	r3, #21
 8009568:	f023 0303 	bic.w	r3, r3, #3
 800956c:	3304      	adds	r3, #4
 800956e:	f104 0015 	add.w	r0, r4, #21
 8009572:	4584      	cmp	ip, r0
 8009574:	bf38      	it	cc
 8009576:	2304      	movcc	r3, #4
 8009578:	50ca      	str	r2, [r1, r3]
 800957a:	b10a      	cbz	r2, 8009580 <__lshift+0xa4>
 800957c:	f108 0602 	add.w	r6, r8, #2
 8009580:	3e01      	subs	r6, #1
 8009582:	4638      	mov	r0, r7
 8009584:	612e      	str	r6, [r5, #16]
 8009586:	4621      	mov	r1, r4
 8009588:	f7ff fdda 	bl	8009140 <_Bfree>
 800958c:	4628      	mov	r0, r5
 800958e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009592:	f842 0f04 	str.w	r0, [r2, #4]!
 8009596:	3301      	adds	r3, #1
 8009598:	e7c5      	b.n	8009526 <__lshift+0x4a>
 800959a:	3904      	subs	r1, #4
 800959c:	f853 2b04 	ldr.w	r2, [r3], #4
 80095a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80095a4:	459c      	cmp	ip, r3
 80095a6:	d8f9      	bhi.n	800959c <__lshift+0xc0>
 80095a8:	e7ea      	b.n	8009580 <__lshift+0xa4>
 80095aa:	bf00      	nop
 80095ac:	0800c50c 	.word	0x0800c50c
 80095b0:	0800c51d 	.word	0x0800c51d

080095b4 <__mcmp>:
 80095b4:	690a      	ldr	r2, [r1, #16]
 80095b6:	4603      	mov	r3, r0
 80095b8:	6900      	ldr	r0, [r0, #16]
 80095ba:	1a80      	subs	r0, r0, r2
 80095bc:	b530      	push	{r4, r5, lr}
 80095be:	d10e      	bne.n	80095de <__mcmp+0x2a>
 80095c0:	3314      	adds	r3, #20
 80095c2:	3114      	adds	r1, #20
 80095c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80095c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80095cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80095d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80095d4:	4295      	cmp	r5, r2
 80095d6:	d003      	beq.n	80095e0 <__mcmp+0x2c>
 80095d8:	d205      	bcs.n	80095e6 <__mcmp+0x32>
 80095da:	f04f 30ff 	mov.w	r0, #4294967295
 80095de:	bd30      	pop	{r4, r5, pc}
 80095e0:	42a3      	cmp	r3, r4
 80095e2:	d3f3      	bcc.n	80095cc <__mcmp+0x18>
 80095e4:	e7fb      	b.n	80095de <__mcmp+0x2a>
 80095e6:	2001      	movs	r0, #1
 80095e8:	e7f9      	b.n	80095de <__mcmp+0x2a>
	...

080095ec <__mdiff>:
 80095ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f0:	4689      	mov	r9, r1
 80095f2:	4606      	mov	r6, r0
 80095f4:	4611      	mov	r1, r2
 80095f6:	4648      	mov	r0, r9
 80095f8:	4614      	mov	r4, r2
 80095fa:	f7ff ffdb 	bl	80095b4 <__mcmp>
 80095fe:	1e05      	subs	r5, r0, #0
 8009600:	d112      	bne.n	8009628 <__mdiff+0x3c>
 8009602:	4629      	mov	r1, r5
 8009604:	4630      	mov	r0, r6
 8009606:	f7ff fd5b 	bl	80090c0 <_Balloc>
 800960a:	4602      	mov	r2, r0
 800960c:	b928      	cbnz	r0, 800961a <__mdiff+0x2e>
 800960e:	4b3f      	ldr	r3, [pc, #252]	@ (800970c <__mdiff+0x120>)
 8009610:	f240 2137 	movw	r1, #567	@ 0x237
 8009614:	483e      	ldr	r0, [pc, #248]	@ (8009710 <__mdiff+0x124>)
 8009616:	f000 fb11 	bl	8009c3c <__assert_func>
 800961a:	2301      	movs	r3, #1
 800961c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009620:	4610      	mov	r0, r2
 8009622:	b003      	add	sp, #12
 8009624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009628:	bfbc      	itt	lt
 800962a:	464b      	movlt	r3, r9
 800962c:	46a1      	movlt	r9, r4
 800962e:	4630      	mov	r0, r6
 8009630:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009634:	bfba      	itte	lt
 8009636:	461c      	movlt	r4, r3
 8009638:	2501      	movlt	r5, #1
 800963a:	2500      	movge	r5, #0
 800963c:	f7ff fd40 	bl	80090c0 <_Balloc>
 8009640:	4602      	mov	r2, r0
 8009642:	b918      	cbnz	r0, 800964c <__mdiff+0x60>
 8009644:	4b31      	ldr	r3, [pc, #196]	@ (800970c <__mdiff+0x120>)
 8009646:	f240 2145 	movw	r1, #581	@ 0x245
 800964a:	e7e3      	b.n	8009614 <__mdiff+0x28>
 800964c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009650:	6926      	ldr	r6, [r4, #16]
 8009652:	60c5      	str	r5, [r0, #12]
 8009654:	f109 0310 	add.w	r3, r9, #16
 8009658:	f109 0514 	add.w	r5, r9, #20
 800965c:	f104 0e14 	add.w	lr, r4, #20
 8009660:	f100 0b14 	add.w	fp, r0, #20
 8009664:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009668:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800966c:	9301      	str	r3, [sp, #4]
 800966e:	46d9      	mov	r9, fp
 8009670:	f04f 0c00 	mov.w	ip, #0
 8009674:	9b01      	ldr	r3, [sp, #4]
 8009676:	f85e 0b04 	ldr.w	r0, [lr], #4
 800967a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800967e:	9301      	str	r3, [sp, #4]
 8009680:	fa1f f38a 	uxth.w	r3, sl
 8009684:	4619      	mov	r1, r3
 8009686:	b283      	uxth	r3, r0
 8009688:	1acb      	subs	r3, r1, r3
 800968a:	0c00      	lsrs	r0, r0, #16
 800968c:	4463      	add	r3, ip
 800968e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009692:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009696:	b29b      	uxth	r3, r3
 8009698:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800969c:	4576      	cmp	r6, lr
 800969e:	f849 3b04 	str.w	r3, [r9], #4
 80096a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80096a6:	d8e5      	bhi.n	8009674 <__mdiff+0x88>
 80096a8:	1b33      	subs	r3, r6, r4
 80096aa:	3b15      	subs	r3, #21
 80096ac:	f023 0303 	bic.w	r3, r3, #3
 80096b0:	3415      	adds	r4, #21
 80096b2:	3304      	adds	r3, #4
 80096b4:	42a6      	cmp	r6, r4
 80096b6:	bf38      	it	cc
 80096b8:	2304      	movcc	r3, #4
 80096ba:	441d      	add	r5, r3
 80096bc:	445b      	add	r3, fp
 80096be:	461e      	mov	r6, r3
 80096c0:	462c      	mov	r4, r5
 80096c2:	4544      	cmp	r4, r8
 80096c4:	d30e      	bcc.n	80096e4 <__mdiff+0xf8>
 80096c6:	f108 0103 	add.w	r1, r8, #3
 80096ca:	1b49      	subs	r1, r1, r5
 80096cc:	f021 0103 	bic.w	r1, r1, #3
 80096d0:	3d03      	subs	r5, #3
 80096d2:	45a8      	cmp	r8, r5
 80096d4:	bf38      	it	cc
 80096d6:	2100      	movcc	r1, #0
 80096d8:	440b      	add	r3, r1
 80096da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80096de:	b191      	cbz	r1, 8009706 <__mdiff+0x11a>
 80096e0:	6117      	str	r7, [r2, #16]
 80096e2:	e79d      	b.n	8009620 <__mdiff+0x34>
 80096e4:	f854 1b04 	ldr.w	r1, [r4], #4
 80096e8:	46e6      	mov	lr, ip
 80096ea:	0c08      	lsrs	r0, r1, #16
 80096ec:	fa1c fc81 	uxtah	ip, ip, r1
 80096f0:	4471      	add	r1, lr
 80096f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80096f6:	b289      	uxth	r1, r1
 80096f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80096fc:	f846 1b04 	str.w	r1, [r6], #4
 8009700:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009704:	e7dd      	b.n	80096c2 <__mdiff+0xd6>
 8009706:	3f01      	subs	r7, #1
 8009708:	e7e7      	b.n	80096da <__mdiff+0xee>
 800970a:	bf00      	nop
 800970c:	0800c50c 	.word	0x0800c50c
 8009710:	0800c51d 	.word	0x0800c51d

08009714 <__d2b>:
 8009714:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009718:	460f      	mov	r7, r1
 800971a:	2101      	movs	r1, #1
 800971c:	ec59 8b10 	vmov	r8, r9, d0
 8009720:	4616      	mov	r6, r2
 8009722:	f7ff fccd 	bl	80090c0 <_Balloc>
 8009726:	4604      	mov	r4, r0
 8009728:	b930      	cbnz	r0, 8009738 <__d2b+0x24>
 800972a:	4602      	mov	r2, r0
 800972c:	4b23      	ldr	r3, [pc, #140]	@ (80097bc <__d2b+0xa8>)
 800972e:	4824      	ldr	r0, [pc, #144]	@ (80097c0 <__d2b+0xac>)
 8009730:	f240 310f 	movw	r1, #783	@ 0x30f
 8009734:	f000 fa82 	bl	8009c3c <__assert_func>
 8009738:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800973c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009740:	b10d      	cbz	r5, 8009746 <__d2b+0x32>
 8009742:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009746:	9301      	str	r3, [sp, #4]
 8009748:	f1b8 0300 	subs.w	r3, r8, #0
 800974c:	d023      	beq.n	8009796 <__d2b+0x82>
 800974e:	4668      	mov	r0, sp
 8009750:	9300      	str	r3, [sp, #0]
 8009752:	f7ff fd7c 	bl	800924e <__lo0bits>
 8009756:	e9dd 1200 	ldrd	r1, r2, [sp]
 800975a:	b1d0      	cbz	r0, 8009792 <__d2b+0x7e>
 800975c:	f1c0 0320 	rsb	r3, r0, #32
 8009760:	fa02 f303 	lsl.w	r3, r2, r3
 8009764:	430b      	orrs	r3, r1
 8009766:	40c2      	lsrs	r2, r0
 8009768:	6163      	str	r3, [r4, #20]
 800976a:	9201      	str	r2, [sp, #4]
 800976c:	9b01      	ldr	r3, [sp, #4]
 800976e:	61a3      	str	r3, [r4, #24]
 8009770:	2b00      	cmp	r3, #0
 8009772:	bf0c      	ite	eq
 8009774:	2201      	moveq	r2, #1
 8009776:	2202      	movne	r2, #2
 8009778:	6122      	str	r2, [r4, #16]
 800977a:	b1a5      	cbz	r5, 80097a6 <__d2b+0x92>
 800977c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009780:	4405      	add	r5, r0
 8009782:	603d      	str	r5, [r7, #0]
 8009784:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009788:	6030      	str	r0, [r6, #0]
 800978a:	4620      	mov	r0, r4
 800978c:	b003      	add	sp, #12
 800978e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009792:	6161      	str	r1, [r4, #20]
 8009794:	e7ea      	b.n	800976c <__d2b+0x58>
 8009796:	a801      	add	r0, sp, #4
 8009798:	f7ff fd59 	bl	800924e <__lo0bits>
 800979c:	9b01      	ldr	r3, [sp, #4]
 800979e:	6163      	str	r3, [r4, #20]
 80097a0:	3020      	adds	r0, #32
 80097a2:	2201      	movs	r2, #1
 80097a4:	e7e8      	b.n	8009778 <__d2b+0x64>
 80097a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80097aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80097ae:	6038      	str	r0, [r7, #0]
 80097b0:	6918      	ldr	r0, [r3, #16]
 80097b2:	f7ff fd2d 	bl	8009210 <__hi0bits>
 80097b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80097ba:	e7e5      	b.n	8009788 <__d2b+0x74>
 80097bc:	0800c50c 	.word	0x0800c50c
 80097c0:	0800c51d 	.word	0x0800c51d

080097c4 <__ssputs_r>:
 80097c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097c8:	688e      	ldr	r6, [r1, #8]
 80097ca:	461f      	mov	r7, r3
 80097cc:	42be      	cmp	r6, r7
 80097ce:	680b      	ldr	r3, [r1, #0]
 80097d0:	4682      	mov	sl, r0
 80097d2:	460c      	mov	r4, r1
 80097d4:	4690      	mov	r8, r2
 80097d6:	d82d      	bhi.n	8009834 <__ssputs_r+0x70>
 80097d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80097dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80097e0:	d026      	beq.n	8009830 <__ssputs_r+0x6c>
 80097e2:	6965      	ldr	r5, [r4, #20]
 80097e4:	6909      	ldr	r1, [r1, #16]
 80097e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097ea:	eba3 0901 	sub.w	r9, r3, r1
 80097ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80097f2:	1c7b      	adds	r3, r7, #1
 80097f4:	444b      	add	r3, r9
 80097f6:	106d      	asrs	r5, r5, #1
 80097f8:	429d      	cmp	r5, r3
 80097fa:	bf38      	it	cc
 80097fc:	461d      	movcc	r5, r3
 80097fe:	0553      	lsls	r3, r2, #21
 8009800:	d527      	bpl.n	8009852 <__ssputs_r+0x8e>
 8009802:	4629      	mov	r1, r5
 8009804:	f7ff fbd0 	bl	8008fa8 <_malloc_r>
 8009808:	4606      	mov	r6, r0
 800980a:	b360      	cbz	r0, 8009866 <__ssputs_r+0xa2>
 800980c:	6921      	ldr	r1, [r4, #16]
 800980e:	464a      	mov	r2, r9
 8009810:	f000 fa06 	bl	8009c20 <memcpy>
 8009814:	89a3      	ldrh	r3, [r4, #12]
 8009816:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800981a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800981e:	81a3      	strh	r3, [r4, #12]
 8009820:	6126      	str	r6, [r4, #16]
 8009822:	6165      	str	r5, [r4, #20]
 8009824:	444e      	add	r6, r9
 8009826:	eba5 0509 	sub.w	r5, r5, r9
 800982a:	6026      	str	r6, [r4, #0]
 800982c:	60a5      	str	r5, [r4, #8]
 800982e:	463e      	mov	r6, r7
 8009830:	42be      	cmp	r6, r7
 8009832:	d900      	bls.n	8009836 <__ssputs_r+0x72>
 8009834:	463e      	mov	r6, r7
 8009836:	6820      	ldr	r0, [r4, #0]
 8009838:	4632      	mov	r2, r6
 800983a:	4641      	mov	r1, r8
 800983c:	f000 f9c6 	bl	8009bcc <memmove>
 8009840:	68a3      	ldr	r3, [r4, #8]
 8009842:	1b9b      	subs	r3, r3, r6
 8009844:	60a3      	str	r3, [r4, #8]
 8009846:	6823      	ldr	r3, [r4, #0]
 8009848:	4433      	add	r3, r6
 800984a:	6023      	str	r3, [r4, #0]
 800984c:	2000      	movs	r0, #0
 800984e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009852:	462a      	mov	r2, r5
 8009854:	f000 fa36 	bl	8009cc4 <_realloc_r>
 8009858:	4606      	mov	r6, r0
 800985a:	2800      	cmp	r0, #0
 800985c:	d1e0      	bne.n	8009820 <__ssputs_r+0x5c>
 800985e:	6921      	ldr	r1, [r4, #16]
 8009860:	4650      	mov	r0, sl
 8009862:	f7ff fb2d 	bl	8008ec0 <_free_r>
 8009866:	230c      	movs	r3, #12
 8009868:	f8ca 3000 	str.w	r3, [sl]
 800986c:	89a3      	ldrh	r3, [r4, #12]
 800986e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009872:	81a3      	strh	r3, [r4, #12]
 8009874:	f04f 30ff 	mov.w	r0, #4294967295
 8009878:	e7e9      	b.n	800984e <__ssputs_r+0x8a>
	...

0800987c <_svfiprintf_r>:
 800987c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009880:	4698      	mov	r8, r3
 8009882:	898b      	ldrh	r3, [r1, #12]
 8009884:	061b      	lsls	r3, r3, #24
 8009886:	b09d      	sub	sp, #116	@ 0x74
 8009888:	4607      	mov	r7, r0
 800988a:	460d      	mov	r5, r1
 800988c:	4614      	mov	r4, r2
 800988e:	d510      	bpl.n	80098b2 <_svfiprintf_r+0x36>
 8009890:	690b      	ldr	r3, [r1, #16]
 8009892:	b973      	cbnz	r3, 80098b2 <_svfiprintf_r+0x36>
 8009894:	2140      	movs	r1, #64	@ 0x40
 8009896:	f7ff fb87 	bl	8008fa8 <_malloc_r>
 800989a:	6028      	str	r0, [r5, #0]
 800989c:	6128      	str	r0, [r5, #16]
 800989e:	b930      	cbnz	r0, 80098ae <_svfiprintf_r+0x32>
 80098a0:	230c      	movs	r3, #12
 80098a2:	603b      	str	r3, [r7, #0]
 80098a4:	f04f 30ff 	mov.w	r0, #4294967295
 80098a8:	b01d      	add	sp, #116	@ 0x74
 80098aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ae:	2340      	movs	r3, #64	@ 0x40
 80098b0:	616b      	str	r3, [r5, #20]
 80098b2:	2300      	movs	r3, #0
 80098b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80098b6:	2320      	movs	r3, #32
 80098b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80098bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80098c0:	2330      	movs	r3, #48	@ 0x30
 80098c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009a60 <_svfiprintf_r+0x1e4>
 80098c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80098ca:	f04f 0901 	mov.w	r9, #1
 80098ce:	4623      	mov	r3, r4
 80098d0:	469a      	mov	sl, r3
 80098d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098d6:	b10a      	cbz	r2, 80098dc <_svfiprintf_r+0x60>
 80098d8:	2a25      	cmp	r2, #37	@ 0x25
 80098da:	d1f9      	bne.n	80098d0 <_svfiprintf_r+0x54>
 80098dc:	ebba 0b04 	subs.w	fp, sl, r4
 80098e0:	d00b      	beq.n	80098fa <_svfiprintf_r+0x7e>
 80098e2:	465b      	mov	r3, fp
 80098e4:	4622      	mov	r2, r4
 80098e6:	4629      	mov	r1, r5
 80098e8:	4638      	mov	r0, r7
 80098ea:	f7ff ff6b 	bl	80097c4 <__ssputs_r>
 80098ee:	3001      	adds	r0, #1
 80098f0:	f000 80a7 	beq.w	8009a42 <_svfiprintf_r+0x1c6>
 80098f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098f6:	445a      	add	r2, fp
 80098f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80098fa:	f89a 3000 	ldrb.w	r3, [sl]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	f000 809f 	beq.w	8009a42 <_svfiprintf_r+0x1c6>
 8009904:	2300      	movs	r3, #0
 8009906:	f04f 32ff 	mov.w	r2, #4294967295
 800990a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800990e:	f10a 0a01 	add.w	sl, sl, #1
 8009912:	9304      	str	r3, [sp, #16]
 8009914:	9307      	str	r3, [sp, #28]
 8009916:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800991a:	931a      	str	r3, [sp, #104]	@ 0x68
 800991c:	4654      	mov	r4, sl
 800991e:	2205      	movs	r2, #5
 8009920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009924:	484e      	ldr	r0, [pc, #312]	@ (8009a60 <_svfiprintf_r+0x1e4>)
 8009926:	f7f6 fc73 	bl	8000210 <memchr>
 800992a:	9a04      	ldr	r2, [sp, #16]
 800992c:	b9d8      	cbnz	r0, 8009966 <_svfiprintf_r+0xea>
 800992e:	06d0      	lsls	r0, r2, #27
 8009930:	bf44      	itt	mi
 8009932:	2320      	movmi	r3, #32
 8009934:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009938:	0711      	lsls	r1, r2, #28
 800993a:	bf44      	itt	mi
 800993c:	232b      	movmi	r3, #43	@ 0x2b
 800993e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009942:	f89a 3000 	ldrb.w	r3, [sl]
 8009946:	2b2a      	cmp	r3, #42	@ 0x2a
 8009948:	d015      	beq.n	8009976 <_svfiprintf_r+0xfa>
 800994a:	9a07      	ldr	r2, [sp, #28]
 800994c:	4654      	mov	r4, sl
 800994e:	2000      	movs	r0, #0
 8009950:	f04f 0c0a 	mov.w	ip, #10
 8009954:	4621      	mov	r1, r4
 8009956:	f811 3b01 	ldrb.w	r3, [r1], #1
 800995a:	3b30      	subs	r3, #48	@ 0x30
 800995c:	2b09      	cmp	r3, #9
 800995e:	d94b      	bls.n	80099f8 <_svfiprintf_r+0x17c>
 8009960:	b1b0      	cbz	r0, 8009990 <_svfiprintf_r+0x114>
 8009962:	9207      	str	r2, [sp, #28]
 8009964:	e014      	b.n	8009990 <_svfiprintf_r+0x114>
 8009966:	eba0 0308 	sub.w	r3, r0, r8
 800996a:	fa09 f303 	lsl.w	r3, r9, r3
 800996e:	4313      	orrs	r3, r2
 8009970:	9304      	str	r3, [sp, #16]
 8009972:	46a2      	mov	sl, r4
 8009974:	e7d2      	b.n	800991c <_svfiprintf_r+0xa0>
 8009976:	9b03      	ldr	r3, [sp, #12]
 8009978:	1d19      	adds	r1, r3, #4
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	9103      	str	r1, [sp, #12]
 800997e:	2b00      	cmp	r3, #0
 8009980:	bfbb      	ittet	lt
 8009982:	425b      	neglt	r3, r3
 8009984:	f042 0202 	orrlt.w	r2, r2, #2
 8009988:	9307      	strge	r3, [sp, #28]
 800998a:	9307      	strlt	r3, [sp, #28]
 800998c:	bfb8      	it	lt
 800998e:	9204      	strlt	r2, [sp, #16]
 8009990:	7823      	ldrb	r3, [r4, #0]
 8009992:	2b2e      	cmp	r3, #46	@ 0x2e
 8009994:	d10a      	bne.n	80099ac <_svfiprintf_r+0x130>
 8009996:	7863      	ldrb	r3, [r4, #1]
 8009998:	2b2a      	cmp	r3, #42	@ 0x2a
 800999a:	d132      	bne.n	8009a02 <_svfiprintf_r+0x186>
 800999c:	9b03      	ldr	r3, [sp, #12]
 800999e:	1d1a      	adds	r2, r3, #4
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	9203      	str	r2, [sp, #12]
 80099a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80099a8:	3402      	adds	r4, #2
 80099aa:	9305      	str	r3, [sp, #20]
 80099ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009a70 <_svfiprintf_r+0x1f4>
 80099b0:	7821      	ldrb	r1, [r4, #0]
 80099b2:	2203      	movs	r2, #3
 80099b4:	4650      	mov	r0, sl
 80099b6:	f7f6 fc2b 	bl	8000210 <memchr>
 80099ba:	b138      	cbz	r0, 80099cc <_svfiprintf_r+0x150>
 80099bc:	9b04      	ldr	r3, [sp, #16]
 80099be:	eba0 000a 	sub.w	r0, r0, sl
 80099c2:	2240      	movs	r2, #64	@ 0x40
 80099c4:	4082      	lsls	r2, r0
 80099c6:	4313      	orrs	r3, r2
 80099c8:	3401      	adds	r4, #1
 80099ca:	9304      	str	r3, [sp, #16]
 80099cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099d0:	4824      	ldr	r0, [pc, #144]	@ (8009a64 <_svfiprintf_r+0x1e8>)
 80099d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80099d6:	2206      	movs	r2, #6
 80099d8:	f7f6 fc1a 	bl	8000210 <memchr>
 80099dc:	2800      	cmp	r0, #0
 80099de:	d036      	beq.n	8009a4e <_svfiprintf_r+0x1d2>
 80099e0:	4b21      	ldr	r3, [pc, #132]	@ (8009a68 <_svfiprintf_r+0x1ec>)
 80099e2:	bb1b      	cbnz	r3, 8009a2c <_svfiprintf_r+0x1b0>
 80099e4:	9b03      	ldr	r3, [sp, #12]
 80099e6:	3307      	adds	r3, #7
 80099e8:	f023 0307 	bic.w	r3, r3, #7
 80099ec:	3308      	adds	r3, #8
 80099ee:	9303      	str	r3, [sp, #12]
 80099f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099f2:	4433      	add	r3, r6
 80099f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80099f6:	e76a      	b.n	80098ce <_svfiprintf_r+0x52>
 80099f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80099fc:	460c      	mov	r4, r1
 80099fe:	2001      	movs	r0, #1
 8009a00:	e7a8      	b.n	8009954 <_svfiprintf_r+0xd8>
 8009a02:	2300      	movs	r3, #0
 8009a04:	3401      	adds	r4, #1
 8009a06:	9305      	str	r3, [sp, #20]
 8009a08:	4619      	mov	r1, r3
 8009a0a:	f04f 0c0a 	mov.w	ip, #10
 8009a0e:	4620      	mov	r0, r4
 8009a10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a14:	3a30      	subs	r2, #48	@ 0x30
 8009a16:	2a09      	cmp	r2, #9
 8009a18:	d903      	bls.n	8009a22 <_svfiprintf_r+0x1a6>
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d0c6      	beq.n	80099ac <_svfiprintf_r+0x130>
 8009a1e:	9105      	str	r1, [sp, #20]
 8009a20:	e7c4      	b.n	80099ac <_svfiprintf_r+0x130>
 8009a22:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a26:	4604      	mov	r4, r0
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e7f0      	b.n	8009a0e <_svfiprintf_r+0x192>
 8009a2c:	ab03      	add	r3, sp, #12
 8009a2e:	9300      	str	r3, [sp, #0]
 8009a30:	462a      	mov	r2, r5
 8009a32:	4b0e      	ldr	r3, [pc, #56]	@ (8009a6c <_svfiprintf_r+0x1f0>)
 8009a34:	a904      	add	r1, sp, #16
 8009a36:	4638      	mov	r0, r7
 8009a38:	f7fd fe84 	bl	8007744 <_printf_float>
 8009a3c:	1c42      	adds	r2, r0, #1
 8009a3e:	4606      	mov	r6, r0
 8009a40:	d1d6      	bne.n	80099f0 <_svfiprintf_r+0x174>
 8009a42:	89ab      	ldrh	r3, [r5, #12]
 8009a44:	065b      	lsls	r3, r3, #25
 8009a46:	f53f af2d 	bmi.w	80098a4 <_svfiprintf_r+0x28>
 8009a4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a4c:	e72c      	b.n	80098a8 <_svfiprintf_r+0x2c>
 8009a4e:	ab03      	add	r3, sp, #12
 8009a50:	9300      	str	r3, [sp, #0]
 8009a52:	462a      	mov	r2, r5
 8009a54:	4b05      	ldr	r3, [pc, #20]	@ (8009a6c <_svfiprintf_r+0x1f0>)
 8009a56:	a904      	add	r1, sp, #16
 8009a58:	4638      	mov	r0, r7
 8009a5a:	f7fe f90b 	bl	8007c74 <_printf_i>
 8009a5e:	e7ed      	b.n	8009a3c <_svfiprintf_r+0x1c0>
 8009a60:	0800c678 	.word	0x0800c678
 8009a64:	0800c682 	.word	0x0800c682
 8009a68:	08007745 	.word	0x08007745
 8009a6c:	080097c5 	.word	0x080097c5
 8009a70:	0800c67e 	.word	0x0800c67e

08009a74 <__sflush_r>:
 8009a74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a7c:	0716      	lsls	r6, r2, #28
 8009a7e:	4605      	mov	r5, r0
 8009a80:	460c      	mov	r4, r1
 8009a82:	d454      	bmi.n	8009b2e <__sflush_r+0xba>
 8009a84:	684b      	ldr	r3, [r1, #4]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	dc02      	bgt.n	8009a90 <__sflush_r+0x1c>
 8009a8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	dd48      	ble.n	8009b22 <__sflush_r+0xae>
 8009a90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009a92:	2e00      	cmp	r6, #0
 8009a94:	d045      	beq.n	8009b22 <__sflush_r+0xae>
 8009a96:	2300      	movs	r3, #0
 8009a98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009a9c:	682f      	ldr	r7, [r5, #0]
 8009a9e:	6a21      	ldr	r1, [r4, #32]
 8009aa0:	602b      	str	r3, [r5, #0]
 8009aa2:	d030      	beq.n	8009b06 <__sflush_r+0x92>
 8009aa4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009aa6:	89a3      	ldrh	r3, [r4, #12]
 8009aa8:	0759      	lsls	r1, r3, #29
 8009aaa:	d505      	bpl.n	8009ab8 <__sflush_r+0x44>
 8009aac:	6863      	ldr	r3, [r4, #4]
 8009aae:	1ad2      	subs	r2, r2, r3
 8009ab0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009ab2:	b10b      	cbz	r3, 8009ab8 <__sflush_r+0x44>
 8009ab4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009ab6:	1ad2      	subs	r2, r2, r3
 8009ab8:	2300      	movs	r3, #0
 8009aba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009abc:	6a21      	ldr	r1, [r4, #32]
 8009abe:	4628      	mov	r0, r5
 8009ac0:	47b0      	blx	r6
 8009ac2:	1c43      	adds	r3, r0, #1
 8009ac4:	89a3      	ldrh	r3, [r4, #12]
 8009ac6:	d106      	bne.n	8009ad6 <__sflush_r+0x62>
 8009ac8:	6829      	ldr	r1, [r5, #0]
 8009aca:	291d      	cmp	r1, #29
 8009acc:	d82b      	bhi.n	8009b26 <__sflush_r+0xb2>
 8009ace:	4a2a      	ldr	r2, [pc, #168]	@ (8009b78 <__sflush_r+0x104>)
 8009ad0:	410a      	asrs	r2, r1
 8009ad2:	07d6      	lsls	r6, r2, #31
 8009ad4:	d427      	bmi.n	8009b26 <__sflush_r+0xb2>
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	6062      	str	r2, [r4, #4]
 8009ada:	04d9      	lsls	r1, r3, #19
 8009adc:	6922      	ldr	r2, [r4, #16]
 8009ade:	6022      	str	r2, [r4, #0]
 8009ae0:	d504      	bpl.n	8009aec <__sflush_r+0x78>
 8009ae2:	1c42      	adds	r2, r0, #1
 8009ae4:	d101      	bne.n	8009aea <__sflush_r+0x76>
 8009ae6:	682b      	ldr	r3, [r5, #0]
 8009ae8:	b903      	cbnz	r3, 8009aec <__sflush_r+0x78>
 8009aea:	6560      	str	r0, [r4, #84]	@ 0x54
 8009aec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009aee:	602f      	str	r7, [r5, #0]
 8009af0:	b1b9      	cbz	r1, 8009b22 <__sflush_r+0xae>
 8009af2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009af6:	4299      	cmp	r1, r3
 8009af8:	d002      	beq.n	8009b00 <__sflush_r+0x8c>
 8009afa:	4628      	mov	r0, r5
 8009afc:	f7ff f9e0 	bl	8008ec0 <_free_r>
 8009b00:	2300      	movs	r3, #0
 8009b02:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b04:	e00d      	b.n	8009b22 <__sflush_r+0xae>
 8009b06:	2301      	movs	r3, #1
 8009b08:	4628      	mov	r0, r5
 8009b0a:	47b0      	blx	r6
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	1c50      	adds	r0, r2, #1
 8009b10:	d1c9      	bne.n	8009aa6 <__sflush_r+0x32>
 8009b12:	682b      	ldr	r3, [r5, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d0c6      	beq.n	8009aa6 <__sflush_r+0x32>
 8009b18:	2b1d      	cmp	r3, #29
 8009b1a:	d001      	beq.n	8009b20 <__sflush_r+0xac>
 8009b1c:	2b16      	cmp	r3, #22
 8009b1e:	d11e      	bne.n	8009b5e <__sflush_r+0xea>
 8009b20:	602f      	str	r7, [r5, #0]
 8009b22:	2000      	movs	r0, #0
 8009b24:	e022      	b.n	8009b6c <__sflush_r+0xf8>
 8009b26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b2a:	b21b      	sxth	r3, r3
 8009b2c:	e01b      	b.n	8009b66 <__sflush_r+0xf2>
 8009b2e:	690f      	ldr	r7, [r1, #16]
 8009b30:	2f00      	cmp	r7, #0
 8009b32:	d0f6      	beq.n	8009b22 <__sflush_r+0xae>
 8009b34:	0793      	lsls	r3, r2, #30
 8009b36:	680e      	ldr	r6, [r1, #0]
 8009b38:	bf08      	it	eq
 8009b3a:	694b      	ldreq	r3, [r1, #20]
 8009b3c:	600f      	str	r7, [r1, #0]
 8009b3e:	bf18      	it	ne
 8009b40:	2300      	movne	r3, #0
 8009b42:	eba6 0807 	sub.w	r8, r6, r7
 8009b46:	608b      	str	r3, [r1, #8]
 8009b48:	f1b8 0f00 	cmp.w	r8, #0
 8009b4c:	dde9      	ble.n	8009b22 <__sflush_r+0xae>
 8009b4e:	6a21      	ldr	r1, [r4, #32]
 8009b50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009b52:	4643      	mov	r3, r8
 8009b54:	463a      	mov	r2, r7
 8009b56:	4628      	mov	r0, r5
 8009b58:	47b0      	blx	r6
 8009b5a:	2800      	cmp	r0, #0
 8009b5c:	dc08      	bgt.n	8009b70 <__sflush_r+0xfc>
 8009b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b66:	81a3      	strh	r3, [r4, #12]
 8009b68:	f04f 30ff 	mov.w	r0, #4294967295
 8009b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b70:	4407      	add	r7, r0
 8009b72:	eba8 0800 	sub.w	r8, r8, r0
 8009b76:	e7e7      	b.n	8009b48 <__sflush_r+0xd4>
 8009b78:	dfbffffe 	.word	0xdfbffffe

08009b7c <_fflush_r>:
 8009b7c:	b538      	push	{r3, r4, r5, lr}
 8009b7e:	690b      	ldr	r3, [r1, #16]
 8009b80:	4605      	mov	r5, r0
 8009b82:	460c      	mov	r4, r1
 8009b84:	b913      	cbnz	r3, 8009b8c <_fflush_r+0x10>
 8009b86:	2500      	movs	r5, #0
 8009b88:	4628      	mov	r0, r5
 8009b8a:	bd38      	pop	{r3, r4, r5, pc}
 8009b8c:	b118      	cbz	r0, 8009b96 <_fflush_r+0x1a>
 8009b8e:	6a03      	ldr	r3, [r0, #32]
 8009b90:	b90b      	cbnz	r3, 8009b96 <_fflush_r+0x1a>
 8009b92:	f7fe fa1b 	bl	8007fcc <__sinit>
 8009b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d0f3      	beq.n	8009b86 <_fflush_r+0xa>
 8009b9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009ba0:	07d0      	lsls	r0, r2, #31
 8009ba2:	d404      	bmi.n	8009bae <_fflush_r+0x32>
 8009ba4:	0599      	lsls	r1, r3, #22
 8009ba6:	d402      	bmi.n	8009bae <_fflush_r+0x32>
 8009ba8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009baa:	f7fe fb3a 	bl	8008222 <__retarget_lock_acquire_recursive>
 8009bae:	4628      	mov	r0, r5
 8009bb0:	4621      	mov	r1, r4
 8009bb2:	f7ff ff5f 	bl	8009a74 <__sflush_r>
 8009bb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009bb8:	07da      	lsls	r2, r3, #31
 8009bba:	4605      	mov	r5, r0
 8009bbc:	d4e4      	bmi.n	8009b88 <_fflush_r+0xc>
 8009bbe:	89a3      	ldrh	r3, [r4, #12]
 8009bc0:	059b      	lsls	r3, r3, #22
 8009bc2:	d4e1      	bmi.n	8009b88 <_fflush_r+0xc>
 8009bc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bc6:	f7fe fb2d 	bl	8008224 <__retarget_lock_release_recursive>
 8009bca:	e7dd      	b.n	8009b88 <_fflush_r+0xc>

08009bcc <memmove>:
 8009bcc:	4288      	cmp	r0, r1
 8009bce:	b510      	push	{r4, lr}
 8009bd0:	eb01 0402 	add.w	r4, r1, r2
 8009bd4:	d902      	bls.n	8009bdc <memmove+0x10>
 8009bd6:	4284      	cmp	r4, r0
 8009bd8:	4623      	mov	r3, r4
 8009bda:	d807      	bhi.n	8009bec <memmove+0x20>
 8009bdc:	1e43      	subs	r3, r0, #1
 8009bde:	42a1      	cmp	r1, r4
 8009be0:	d008      	beq.n	8009bf4 <memmove+0x28>
 8009be2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009be6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009bea:	e7f8      	b.n	8009bde <memmove+0x12>
 8009bec:	4402      	add	r2, r0
 8009bee:	4601      	mov	r1, r0
 8009bf0:	428a      	cmp	r2, r1
 8009bf2:	d100      	bne.n	8009bf6 <memmove+0x2a>
 8009bf4:	bd10      	pop	{r4, pc}
 8009bf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009bfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009bfe:	e7f7      	b.n	8009bf0 <memmove+0x24>

08009c00 <_sbrk_r>:
 8009c00:	b538      	push	{r3, r4, r5, lr}
 8009c02:	4d06      	ldr	r5, [pc, #24]	@ (8009c1c <_sbrk_r+0x1c>)
 8009c04:	2300      	movs	r3, #0
 8009c06:	4604      	mov	r4, r0
 8009c08:	4608      	mov	r0, r1
 8009c0a:	602b      	str	r3, [r5, #0]
 8009c0c:	f7f9 fdd6 	bl	80037bc <_sbrk>
 8009c10:	1c43      	adds	r3, r0, #1
 8009c12:	d102      	bne.n	8009c1a <_sbrk_r+0x1a>
 8009c14:	682b      	ldr	r3, [r5, #0]
 8009c16:	b103      	cbz	r3, 8009c1a <_sbrk_r+0x1a>
 8009c18:	6023      	str	r3, [r4, #0]
 8009c1a:	bd38      	pop	{r3, r4, r5, pc}
 8009c1c:	200009bc 	.word	0x200009bc

08009c20 <memcpy>:
 8009c20:	440a      	add	r2, r1
 8009c22:	4291      	cmp	r1, r2
 8009c24:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c28:	d100      	bne.n	8009c2c <memcpy+0xc>
 8009c2a:	4770      	bx	lr
 8009c2c:	b510      	push	{r4, lr}
 8009c2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c36:	4291      	cmp	r1, r2
 8009c38:	d1f9      	bne.n	8009c2e <memcpy+0xe>
 8009c3a:	bd10      	pop	{r4, pc}

08009c3c <__assert_func>:
 8009c3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c3e:	4614      	mov	r4, r2
 8009c40:	461a      	mov	r2, r3
 8009c42:	4b09      	ldr	r3, [pc, #36]	@ (8009c68 <__assert_func+0x2c>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4605      	mov	r5, r0
 8009c48:	68d8      	ldr	r0, [r3, #12]
 8009c4a:	b954      	cbnz	r4, 8009c62 <__assert_func+0x26>
 8009c4c:	4b07      	ldr	r3, [pc, #28]	@ (8009c6c <__assert_func+0x30>)
 8009c4e:	461c      	mov	r4, r3
 8009c50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c54:	9100      	str	r1, [sp, #0]
 8009c56:	462b      	mov	r3, r5
 8009c58:	4905      	ldr	r1, [pc, #20]	@ (8009c70 <__assert_func+0x34>)
 8009c5a:	f000 f86f 	bl	8009d3c <fiprintf>
 8009c5e:	f000 f87f 	bl	8009d60 <abort>
 8009c62:	4b04      	ldr	r3, [pc, #16]	@ (8009c74 <__assert_func+0x38>)
 8009c64:	e7f4      	b.n	8009c50 <__assert_func+0x14>
 8009c66:	bf00      	nop
 8009c68:	20000024 	.word	0x20000024
 8009c6c:	0800c6ce 	.word	0x0800c6ce
 8009c70:	0800c6a0 	.word	0x0800c6a0
 8009c74:	0800c693 	.word	0x0800c693

08009c78 <_calloc_r>:
 8009c78:	b570      	push	{r4, r5, r6, lr}
 8009c7a:	fba1 5402 	umull	r5, r4, r1, r2
 8009c7e:	b93c      	cbnz	r4, 8009c90 <_calloc_r+0x18>
 8009c80:	4629      	mov	r1, r5
 8009c82:	f7ff f991 	bl	8008fa8 <_malloc_r>
 8009c86:	4606      	mov	r6, r0
 8009c88:	b928      	cbnz	r0, 8009c96 <_calloc_r+0x1e>
 8009c8a:	2600      	movs	r6, #0
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	bd70      	pop	{r4, r5, r6, pc}
 8009c90:	220c      	movs	r2, #12
 8009c92:	6002      	str	r2, [r0, #0]
 8009c94:	e7f9      	b.n	8009c8a <_calloc_r+0x12>
 8009c96:	462a      	mov	r2, r5
 8009c98:	4621      	mov	r1, r4
 8009c9a:	f7fe fa44 	bl	8008126 <memset>
 8009c9e:	e7f5      	b.n	8009c8c <_calloc_r+0x14>

08009ca0 <__ascii_mbtowc>:
 8009ca0:	b082      	sub	sp, #8
 8009ca2:	b901      	cbnz	r1, 8009ca6 <__ascii_mbtowc+0x6>
 8009ca4:	a901      	add	r1, sp, #4
 8009ca6:	b142      	cbz	r2, 8009cba <__ascii_mbtowc+0x1a>
 8009ca8:	b14b      	cbz	r3, 8009cbe <__ascii_mbtowc+0x1e>
 8009caa:	7813      	ldrb	r3, [r2, #0]
 8009cac:	600b      	str	r3, [r1, #0]
 8009cae:	7812      	ldrb	r2, [r2, #0]
 8009cb0:	1e10      	subs	r0, r2, #0
 8009cb2:	bf18      	it	ne
 8009cb4:	2001      	movne	r0, #1
 8009cb6:	b002      	add	sp, #8
 8009cb8:	4770      	bx	lr
 8009cba:	4610      	mov	r0, r2
 8009cbc:	e7fb      	b.n	8009cb6 <__ascii_mbtowc+0x16>
 8009cbe:	f06f 0001 	mvn.w	r0, #1
 8009cc2:	e7f8      	b.n	8009cb6 <__ascii_mbtowc+0x16>

08009cc4 <_realloc_r>:
 8009cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cc8:	4680      	mov	r8, r0
 8009cca:	4615      	mov	r5, r2
 8009ccc:	460c      	mov	r4, r1
 8009cce:	b921      	cbnz	r1, 8009cda <_realloc_r+0x16>
 8009cd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cd4:	4611      	mov	r1, r2
 8009cd6:	f7ff b967 	b.w	8008fa8 <_malloc_r>
 8009cda:	b92a      	cbnz	r2, 8009ce8 <_realloc_r+0x24>
 8009cdc:	f7ff f8f0 	bl	8008ec0 <_free_r>
 8009ce0:	2400      	movs	r4, #0
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ce8:	f000 f841 	bl	8009d6e <_malloc_usable_size_r>
 8009cec:	4285      	cmp	r5, r0
 8009cee:	4606      	mov	r6, r0
 8009cf0:	d802      	bhi.n	8009cf8 <_realloc_r+0x34>
 8009cf2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009cf6:	d8f4      	bhi.n	8009ce2 <_realloc_r+0x1e>
 8009cf8:	4629      	mov	r1, r5
 8009cfa:	4640      	mov	r0, r8
 8009cfc:	f7ff f954 	bl	8008fa8 <_malloc_r>
 8009d00:	4607      	mov	r7, r0
 8009d02:	2800      	cmp	r0, #0
 8009d04:	d0ec      	beq.n	8009ce0 <_realloc_r+0x1c>
 8009d06:	42b5      	cmp	r5, r6
 8009d08:	462a      	mov	r2, r5
 8009d0a:	4621      	mov	r1, r4
 8009d0c:	bf28      	it	cs
 8009d0e:	4632      	movcs	r2, r6
 8009d10:	f7ff ff86 	bl	8009c20 <memcpy>
 8009d14:	4621      	mov	r1, r4
 8009d16:	4640      	mov	r0, r8
 8009d18:	f7ff f8d2 	bl	8008ec0 <_free_r>
 8009d1c:	463c      	mov	r4, r7
 8009d1e:	e7e0      	b.n	8009ce2 <_realloc_r+0x1e>

08009d20 <__ascii_wctomb>:
 8009d20:	4603      	mov	r3, r0
 8009d22:	4608      	mov	r0, r1
 8009d24:	b141      	cbz	r1, 8009d38 <__ascii_wctomb+0x18>
 8009d26:	2aff      	cmp	r2, #255	@ 0xff
 8009d28:	d904      	bls.n	8009d34 <__ascii_wctomb+0x14>
 8009d2a:	228a      	movs	r2, #138	@ 0x8a
 8009d2c:	601a      	str	r2, [r3, #0]
 8009d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d32:	4770      	bx	lr
 8009d34:	700a      	strb	r2, [r1, #0]
 8009d36:	2001      	movs	r0, #1
 8009d38:	4770      	bx	lr
	...

08009d3c <fiprintf>:
 8009d3c:	b40e      	push	{r1, r2, r3}
 8009d3e:	b503      	push	{r0, r1, lr}
 8009d40:	4601      	mov	r1, r0
 8009d42:	ab03      	add	r3, sp, #12
 8009d44:	4805      	ldr	r0, [pc, #20]	@ (8009d5c <fiprintf+0x20>)
 8009d46:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d4a:	6800      	ldr	r0, [r0, #0]
 8009d4c:	9301      	str	r3, [sp, #4]
 8009d4e:	f000 f83f 	bl	8009dd0 <_vfiprintf_r>
 8009d52:	b002      	add	sp, #8
 8009d54:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d58:	b003      	add	sp, #12
 8009d5a:	4770      	bx	lr
 8009d5c:	20000024 	.word	0x20000024

08009d60 <abort>:
 8009d60:	b508      	push	{r3, lr}
 8009d62:	2006      	movs	r0, #6
 8009d64:	f000 fa08 	bl	800a178 <raise>
 8009d68:	2001      	movs	r0, #1
 8009d6a:	f7f9 fcaf 	bl	80036cc <_exit>

08009d6e <_malloc_usable_size_r>:
 8009d6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d72:	1f18      	subs	r0, r3, #4
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	bfbc      	itt	lt
 8009d78:	580b      	ldrlt	r3, [r1, r0]
 8009d7a:	18c0      	addlt	r0, r0, r3
 8009d7c:	4770      	bx	lr

08009d7e <__sfputc_r>:
 8009d7e:	6893      	ldr	r3, [r2, #8]
 8009d80:	3b01      	subs	r3, #1
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	b410      	push	{r4}
 8009d86:	6093      	str	r3, [r2, #8]
 8009d88:	da08      	bge.n	8009d9c <__sfputc_r+0x1e>
 8009d8a:	6994      	ldr	r4, [r2, #24]
 8009d8c:	42a3      	cmp	r3, r4
 8009d8e:	db01      	blt.n	8009d94 <__sfputc_r+0x16>
 8009d90:	290a      	cmp	r1, #10
 8009d92:	d103      	bne.n	8009d9c <__sfputc_r+0x1e>
 8009d94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d98:	f000 b932 	b.w	800a000 <__swbuf_r>
 8009d9c:	6813      	ldr	r3, [r2, #0]
 8009d9e:	1c58      	adds	r0, r3, #1
 8009da0:	6010      	str	r0, [r2, #0]
 8009da2:	7019      	strb	r1, [r3, #0]
 8009da4:	4608      	mov	r0, r1
 8009da6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <__sfputs_r>:
 8009dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dae:	4606      	mov	r6, r0
 8009db0:	460f      	mov	r7, r1
 8009db2:	4614      	mov	r4, r2
 8009db4:	18d5      	adds	r5, r2, r3
 8009db6:	42ac      	cmp	r4, r5
 8009db8:	d101      	bne.n	8009dbe <__sfputs_r+0x12>
 8009dba:	2000      	movs	r0, #0
 8009dbc:	e007      	b.n	8009dce <__sfputs_r+0x22>
 8009dbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dc2:	463a      	mov	r2, r7
 8009dc4:	4630      	mov	r0, r6
 8009dc6:	f7ff ffda 	bl	8009d7e <__sfputc_r>
 8009dca:	1c43      	adds	r3, r0, #1
 8009dcc:	d1f3      	bne.n	8009db6 <__sfputs_r+0xa>
 8009dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009dd0 <_vfiprintf_r>:
 8009dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd4:	460d      	mov	r5, r1
 8009dd6:	b09d      	sub	sp, #116	@ 0x74
 8009dd8:	4614      	mov	r4, r2
 8009dda:	4698      	mov	r8, r3
 8009ddc:	4606      	mov	r6, r0
 8009dde:	b118      	cbz	r0, 8009de8 <_vfiprintf_r+0x18>
 8009de0:	6a03      	ldr	r3, [r0, #32]
 8009de2:	b90b      	cbnz	r3, 8009de8 <_vfiprintf_r+0x18>
 8009de4:	f7fe f8f2 	bl	8007fcc <__sinit>
 8009de8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009dea:	07d9      	lsls	r1, r3, #31
 8009dec:	d405      	bmi.n	8009dfa <_vfiprintf_r+0x2a>
 8009dee:	89ab      	ldrh	r3, [r5, #12]
 8009df0:	059a      	lsls	r2, r3, #22
 8009df2:	d402      	bmi.n	8009dfa <_vfiprintf_r+0x2a>
 8009df4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009df6:	f7fe fa14 	bl	8008222 <__retarget_lock_acquire_recursive>
 8009dfa:	89ab      	ldrh	r3, [r5, #12]
 8009dfc:	071b      	lsls	r3, r3, #28
 8009dfe:	d501      	bpl.n	8009e04 <_vfiprintf_r+0x34>
 8009e00:	692b      	ldr	r3, [r5, #16]
 8009e02:	b99b      	cbnz	r3, 8009e2c <_vfiprintf_r+0x5c>
 8009e04:	4629      	mov	r1, r5
 8009e06:	4630      	mov	r0, r6
 8009e08:	f000 f938 	bl	800a07c <__swsetup_r>
 8009e0c:	b170      	cbz	r0, 8009e2c <_vfiprintf_r+0x5c>
 8009e0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e10:	07dc      	lsls	r4, r3, #31
 8009e12:	d504      	bpl.n	8009e1e <_vfiprintf_r+0x4e>
 8009e14:	f04f 30ff 	mov.w	r0, #4294967295
 8009e18:	b01d      	add	sp, #116	@ 0x74
 8009e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e1e:	89ab      	ldrh	r3, [r5, #12]
 8009e20:	0598      	lsls	r0, r3, #22
 8009e22:	d4f7      	bmi.n	8009e14 <_vfiprintf_r+0x44>
 8009e24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e26:	f7fe f9fd 	bl	8008224 <__retarget_lock_release_recursive>
 8009e2a:	e7f3      	b.n	8009e14 <_vfiprintf_r+0x44>
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e30:	2320      	movs	r3, #32
 8009e32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e36:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e3a:	2330      	movs	r3, #48	@ 0x30
 8009e3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009fec <_vfiprintf_r+0x21c>
 8009e40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e44:	f04f 0901 	mov.w	r9, #1
 8009e48:	4623      	mov	r3, r4
 8009e4a:	469a      	mov	sl, r3
 8009e4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e50:	b10a      	cbz	r2, 8009e56 <_vfiprintf_r+0x86>
 8009e52:	2a25      	cmp	r2, #37	@ 0x25
 8009e54:	d1f9      	bne.n	8009e4a <_vfiprintf_r+0x7a>
 8009e56:	ebba 0b04 	subs.w	fp, sl, r4
 8009e5a:	d00b      	beq.n	8009e74 <_vfiprintf_r+0xa4>
 8009e5c:	465b      	mov	r3, fp
 8009e5e:	4622      	mov	r2, r4
 8009e60:	4629      	mov	r1, r5
 8009e62:	4630      	mov	r0, r6
 8009e64:	f7ff ffa2 	bl	8009dac <__sfputs_r>
 8009e68:	3001      	adds	r0, #1
 8009e6a:	f000 80a7 	beq.w	8009fbc <_vfiprintf_r+0x1ec>
 8009e6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e70:	445a      	add	r2, fp
 8009e72:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e74:	f89a 3000 	ldrb.w	r3, [sl]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	f000 809f 	beq.w	8009fbc <_vfiprintf_r+0x1ec>
 8009e7e:	2300      	movs	r3, #0
 8009e80:	f04f 32ff 	mov.w	r2, #4294967295
 8009e84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e88:	f10a 0a01 	add.w	sl, sl, #1
 8009e8c:	9304      	str	r3, [sp, #16]
 8009e8e:	9307      	str	r3, [sp, #28]
 8009e90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e94:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e96:	4654      	mov	r4, sl
 8009e98:	2205      	movs	r2, #5
 8009e9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e9e:	4853      	ldr	r0, [pc, #332]	@ (8009fec <_vfiprintf_r+0x21c>)
 8009ea0:	f7f6 f9b6 	bl	8000210 <memchr>
 8009ea4:	9a04      	ldr	r2, [sp, #16]
 8009ea6:	b9d8      	cbnz	r0, 8009ee0 <_vfiprintf_r+0x110>
 8009ea8:	06d1      	lsls	r1, r2, #27
 8009eaa:	bf44      	itt	mi
 8009eac:	2320      	movmi	r3, #32
 8009eae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009eb2:	0713      	lsls	r3, r2, #28
 8009eb4:	bf44      	itt	mi
 8009eb6:	232b      	movmi	r3, #43	@ 0x2b
 8009eb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ebc:	f89a 3000 	ldrb.w	r3, [sl]
 8009ec0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ec2:	d015      	beq.n	8009ef0 <_vfiprintf_r+0x120>
 8009ec4:	9a07      	ldr	r2, [sp, #28]
 8009ec6:	4654      	mov	r4, sl
 8009ec8:	2000      	movs	r0, #0
 8009eca:	f04f 0c0a 	mov.w	ip, #10
 8009ece:	4621      	mov	r1, r4
 8009ed0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ed4:	3b30      	subs	r3, #48	@ 0x30
 8009ed6:	2b09      	cmp	r3, #9
 8009ed8:	d94b      	bls.n	8009f72 <_vfiprintf_r+0x1a2>
 8009eda:	b1b0      	cbz	r0, 8009f0a <_vfiprintf_r+0x13a>
 8009edc:	9207      	str	r2, [sp, #28]
 8009ede:	e014      	b.n	8009f0a <_vfiprintf_r+0x13a>
 8009ee0:	eba0 0308 	sub.w	r3, r0, r8
 8009ee4:	fa09 f303 	lsl.w	r3, r9, r3
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	9304      	str	r3, [sp, #16]
 8009eec:	46a2      	mov	sl, r4
 8009eee:	e7d2      	b.n	8009e96 <_vfiprintf_r+0xc6>
 8009ef0:	9b03      	ldr	r3, [sp, #12]
 8009ef2:	1d19      	adds	r1, r3, #4
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	9103      	str	r1, [sp, #12]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	bfbb      	ittet	lt
 8009efc:	425b      	neglt	r3, r3
 8009efe:	f042 0202 	orrlt.w	r2, r2, #2
 8009f02:	9307      	strge	r3, [sp, #28]
 8009f04:	9307      	strlt	r3, [sp, #28]
 8009f06:	bfb8      	it	lt
 8009f08:	9204      	strlt	r2, [sp, #16]
 8009f0a:	7823      	ldrb	r3, [r4, #0]
 8009f0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f0e:	d10a      	bne.n	8009f26 <_vfiprintf_r+0x156>
 8009f10:	7863      	ldrb	r3, [r4, #1]
 8009f12:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f14:	d132      	bne.n	8009f7c <_vfiprintf_r+0x1ac>
 8009f16:	9b03      	ldr	r3, [sp, #12]
 8009f18:	1d1a      	adds	r2, r3, #4
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	9203      	str	r2, [sp, #12]
 8009f1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f22:	3402      	adds	r4, #2
 8009f24:	9305      	str	r3, [sp, #20]
 8009f26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009ffc <_vfiprintf_r+0x22c>
 8009f2a:	7821      	ldrb	r1, [r4, #0]
 8009f2c:	2203      	movs	r2, #3
 8009f2e:	4650      	mov	r0, sl
 8009f30:	f7f6 f96e 	bl	8000210 <memchr>
 8009f34:	b138      	cbz	r0, 8009f46 <_vfiprintf_r+0x176>
 8009f36:	9b04      	ldr	r3, [sp, #16]
 8009f38:	eba0 000a 	sub.w	r0, r0, sl
 8009f3c:	2240      	movs	r2, #64	@ 0x40
 8009f3e:	4082      	lsls	r2, r0
 8009f40:	4313      	orrs	r3, r2
 8009f42:	3401      	adds	r4, #1
 8009f44:	9304      	str	r3, [sp, #16]
 8009f46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f4a:	4829      	ldr	r0, [pc, #164]	@ (8009ff0 <_vfiprintf_r+0x220>)
 8009f4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f50:	2206      	movs	r2, #6
 8009f52:	f7f6 f95d 	bl	8000210 <memchr>
 8009f56:	2800      	cmp	r0, #0
 8009f58:	d03f      	beq.n	8009fda <_vfiprintf_r+0x20a>
 8009f5a:	4b26      	ldr	r3, [pc, #152]	@ (8009ff4 <_vfiprintf_r+0x224>)
 8009f5c:	bb1b      	cbnz	r3, 8009fa6 <_vfiprintf_r+0x1d6>
 8009f5e:	9b03      	ldr	r3, [sp, #12]
 8009f60:	3307      	adds	r3, #7
 8009f62:	f023 0307 	bic.w	r3, r3, #7
 8009f66:	3308      	adds	r3, #8
 8009f68:	9303      	str	r3, [sp, #12]
 8009f6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f6c:	443b      	add	r3, r7
 8009f6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f70:	e76a      	b.n	8009e48 <_vfiprintf_r+0x78>
 8009f72:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f76:	460c      	mov	r4, r1
 8009f78:	2001      	movs	r0, #1
 8009f7a:	e7a8      	b.n	8009ece <_vfiprintf_r+0xfe>
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	3401      	adds	r4, #1
 8009f80:	9305      	str	r3, [sp, #20]
 8009f82:	4619      	mov	r1, r3
 8009f84:	f04f 0c0a 	mov.w	ip, #10
 8009f88:	4620      	mov	r0, r4
 8009f8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f8e:	3a30      	subs	r2, #48	@ 0x30
 8009f90:	2a09      	cmp	r2, #9
 8009f92:	d903      	bls.n	8009f9c <_vfiprintf_r+0x1cc>
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d0c6      	beq.n	8009f26 <_vfiprintf_r+0x156>
 8009f98:	9105      	str	r1, [sp, #20]
 8009f9a:	e7c4      	b.n	8009f26 <_vfiprintf_r+0x156>
 8009f9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fa0:	4604      	mov	r4, r0
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	e7f0      	b.n	8009f88 <_vfiprintf_r+0x1b8>
 8009fa6:	ab03      	add	r3, sp, #12
 8009fa8:	9300      	str	r3, [sp, #0]
 8009faa:	462a      	mov	r2, r5
 8009fac:	4b12      	ldr	r3, [pc, #72]	@ (8009ff8 <_vfiprintf_r+0x228>)
 8009fae:	a904      	add	r1, sp, #16
 8009fb0:	4630      	mov	r0, r6
 8009fb2:	f7fd fbc7 	bl	8007744 <_printf_float>
 8009fb6:	4607      	mov	r7, r0
 8009fb8:	1c78      	adds	r0, r7, #1
 8009fba:	d1d6      	bne.n	8009f6a <_vfiprintf_r+0x19a>
 8009fbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009fbe:	07d9      	lsls	r1, r3, #31
 8009fc0:	d405      	bmi.n	8009fce <_vfiprintf_r+0x1fe>
 8009fc2:	89ab      	ldrh	r3, [r5, #12]
 8009fc4:	059a      	lsls	r2, r3, #22
 8009fc6:	d402      	bmi.n	8009fce <_vfiprintf_r+0x1fe>
 8009fc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009fca:	f7fe f92b 	bl	8008224 <__retarget_lock_release_recursive>
 8009fce:	89ab      	ldrh	r3, [r5, #12]
 8009fd0:	065b      	lsls	r3, r3, #25
 8009fd2:	f53f af1f 	bmi.w	8009e14 <_vfiprintf_r+0x44>
 8009fd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009fd8:	e71e      	b.n	8009e18 <_vfiprintf_r+0x48>
 8009fda:	ab03      	add	r3, sp, #12
 8009fdc:	9300      	str	r3, [sp, #0]
 8009fde:	462a      	mov	r2, r5
 8009fe0:	4b05      	ldr	r3, [pc, #20]	@ (8009ff8 <_vfiprintf_r+0x228>)
 8009fe2:	a904      	add	r1, sp, #16
 8009fe4:	4630      	mov	r0, r6
 8009fe6:	f7fd fe45 	bl	8007c74 <_printf_i>
 8009fea:	e7e4      	b.n	8009fb6 <_vfiprintf_r+0x1e6>
 8009fec:	0800c678 	.word	0x0800c678
 8009ff0:	0800c682 	.word	0x0800c682
 8009ff4:	08007745 	.word	0x08007745
 8009ff8:	08009dad 	.word	0x08009dad
 8009ffc:	0800c67e 	.word	0x0800c67e

0800a000 <__swbuf_r>:
 800a000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a002:	460e      	mov	r6, r1
 800a004:	4614      	mov	r4, r2
 800a006:	4605      	mov	r5, r0
 800a008:	b118      	cbz	r0, 800a012 <__swbuf_r+0x12>
 800a00a:	6a03      	ldr	r3, [r0, #32]
 800a00c:	b90b      	cbnz	r3, 800a012 <__swbuf_r+0x12>
 800a00e:	f7fd ffdd 	bl	8007fcc <__sinit>
 800a012:	69a3      	ldr	r3, [r4, #24]
 800a014:	60a3      	str	r3, [r4, #8]
 800a016:	89a3      	ldrh	r3, [r4, #12]
 800a018:	071a      	lsls	r2, r3, #28
 800a01a:	d501      	bpl.n	800a020 <__swbuf_r+0x20>
 800a01c:	6923      	ldr	r3, [r4, #16]
 800a01e:	b943      	cbnz	r3, 800a032 <__swbuf_r+0x32>
 800a020:	4621      	mov	r1, r4
 800a022:	4628      	mov	r0, r5
 800a024:	f000 f82a 	bl	800a07c <__swsetup_r>
 800a028:	b118      	cbz	r0, 800a032 <__swbuf_r+0x32>
 800a02a:	f04f 37ff 	mov.w	r7, #4294967295
 800a02e:	4638      	mov	r0, r7
 800a030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a032:	6823      	ldr	r3, [r4, #0]
 800a034:	6922      	ldr	r2, [r4, #16]
 800a036:	1a98      	subs	r0, r3, r2
 800a038:	6963      	ldr	r3, [r4, #20]
 800a03a:	b2f6      	uxtb	r6, r6
 800a03c:	4283      	cmp	r3, r0
 800a03e:	4637      	mov	r7, r6
 800a040:	dc05      	bgt.n	800a04e <__swbuf_r+0x4e>
 800a042:	4621      	mov	r1, r4
 800a044:	4628      	mov	r0, r5
 800a046:	f7ff fd99 	bl	8009b7c <_fflush_r>
 800a04a:	2800      	cmp	r0, #0
 800a04c:	d1ed      	bne.n	800a02a <__swbuf_r+0x2a>
 800a04e:	68a3      	ldr	r3, [r4, #8]
 800a050:	3b01      	subs	r3, #1
 800a052:	60a3      	str	r3, [r4, #8]
 800a054:	6823      	ldr	r3, [r4, #0]
 800a056:	1c5a      	adds	r2, r3, #1
 800a058:	6022      	str	r2, [r4, #0]
 800a05a:	701e      	strb	r6, [r3, #0]
 800a05c:	6962      	ldr	r2, [r4, #20]
 800a05e:	1c43      	adds	r3, r0, #1
 800a060:	429a      	cmp	r2, r3
 800a062:	d004      	beq.n	800a06e <__swbuf_r+0x6e>
 800a064:	89a3      	ldrh	r3, [r4, #12]
 800a066:	07db      	lsls	r3, r3, #31
 800a068:	d5e1      	bpl.n	800a02e <__swbuf_r+0x2e>
 800a06a:	2e0a      	cmp	r6, #10
 800a06c:	d1df      	bne.n	800a02e <__swbuf_r+0x2e>
 800a06e:	4621      	mov	r1, r4
 800a070:	4628      	mov	r0, r5
 800a072:	f7ff fd83 	bl	8009b7c <_fflush_r>
 800a076:	2800      	cmp	r0, #0
 800a078:	d0d9      	beq.n	800a02e <__swbuf_r+0x2e>
 800a07a:	e7d6      	b.n	800a02a <__swbuf_r+0x2a>

0800a07c <__swsetup_r>:
 800a07c:	b538      	push	{r3, r4, r5, lr}
 800a07e:	4b29      	ldr	r3, [pc, #164]	@ (800a124 <__swsetup_r+0xa8>)
 800a080:	4605      	mov	r5, r0
 800a082:	6818      	ldr	r0, [r3, #0]
 800a084:	460c      	mov	r4, r1
 800a086:	b118      	cbz	r0, 800a090 <__swsetup_r+0x14>
 800a088:	6a03      	ldr	r3, [r0, #32]
 800a08a:	b90b      	cbnz	r3, 800a090 <__swsetup_r+0x14>
 800a08c:	f7fd ff9e 	bl	8007fcc <__sinit>
 800a090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a094:	0719      	lsls	r1, r3, #28
 800a096:	d422      	bmi.n	800a0de <__swsetup_r+0x62>
 800a098:	06da      	lsls	r2, r3, #27
 800a09a:	d407      	bmi.n	800a0ac <__swsetup_r+0x30>
 800a09c:	2209      	movs	r2, #9
 800a09e:	602a      	str	r2, [r5, #0]
 800a0a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0a4:	81a3      	strh	r3, [r4, #12]
 800a0a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a0aa:	e033      	b.n	800a114 <__swsetup_r+0x98>
 800a0ac:	0758      	lsls	r0, r3, #29
 800a0ae:	d512      	bpl.n	800a0d6 <__swsetup_r+0x5a>
 800a0b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a0b2:	b141      	cbz	r1, 800a0c6 <__swsetup_r+0x4a>
 800a0b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a0b8:	4299      	cmp	r1, r3
 800a0ba:	d002      	beq.n	800a0c2 <__swsetup_r+0x46>
 800a0bc:	4628      	mov	r0, r5
 800a0be:	f7fe feff 	bl	8008ec0 <_free_r>
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	6363      	str	r3, [r4, #52]	@ 0x34
 800a0c6:	89a3      	ldrh	r3, [r4, #12]
 800a0c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a0cc:	81a3      	strh	r3, [r4, #12]
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	6063      	str	r3, [r4, #4]
 800a0d2:	6923      	ldr	r3, [r4, #16]
 800a0d4:	6023      	str	r3, [r4, #0]
 800a0d6:	89a3      	ldrh	r3, [r4, #12]
 800a0d8:	f043 0308 	orr.w	r3, r3, #8
 800a0dc:	81a3      	strh	r3, [r4, #12]
 800a0de:	6923      	ldr	r3, [r4, #16]
 800a0e0:	b94b      	cbnz	r3, 800a0f6 <__swsetup_r+0x7a>
 800a0e2:	89a3      	ldrh	r3, [r4, #12]
 800a0e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a0e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0ec:	d003      	beq.n	800a0f6 <__swsetup_r+0x7a>
 800a0ee:	4621      	mov	r1, r4
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	f000 f883 	bl	800a1fc <__smakebuf_r>
 800a0f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0fa:	f013 0201 	ands.w	r2, r3, #1
 800a0fe:	d00a      	beq.n	800a116 <__swsetup_r+0x9a>
 800a100:	2200      	movs	r2, #0
 800a102:	60a2      	str	r2, [r4, #8]
 800a104:	6962      	ldr	r2, [r4, #20]
 800a106:	4252      	negs	r2, r2
 800a108:	61a2      	str	r2, [r4, #24]
 800a10a:	6922      	ldr	r2, [r4, #16]
 800a10c:	b942      	cbnz	r2, 800a120 <__swsetup_r+0xa4>
 800a10e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a112:	d1c5      	bne.n	800a0a0 <__swsetup_r+0x24>
 800a114:	bd38      	pop	{r3, r4, r5, pc}
 800a116:	0799      	lsls	r1, r3, #30
 800a118:	bf58      	it	pl
 800a11a:	6962      	ldrpl	r2, [r4, #20]
 800a11c:	60a2      	str	r2, [r4, #8]
 800a11e:	e7f4      	b.n	800a10a <__swsetup_r+0x8e>
 800a120:	2000      	movs	r0, #0
 800a122:	e7f7      	b.n	800a114 <__swsetup_r+0x98>
 800a124:	20000024 	.word	0x20000024

0800a128 <_raise_r>:
 800a128:	291f      	cmp	r1, #31
 800a12a:	b538      	push	{r3, r4, r5, lr}
 800a12c:	4605      	mov	r5, r0
 800a12e:	460c      	mov	r4, r1
 800a130:	d904      	bls.n	800a13c <_raise_r+0x14>
 800a132:	2316      	movs	r3, #22
 800a134:	6003      	str	r3, [r0, #0]
 800a136:	f04f 30ff 	mov.w	r0, #4294967295
 800a13a:	bd38      	pop	{r3, r4, r5, pc}
 800a13c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a13e:	b112      	cbz	r2, 800a146 <_raise_r+0x1e>
 800a140:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a144:	b94b      	cbnz	r3, 800a15a <_raise_r+0x32>
 800a146:	4628      	mov	r0, r5
 800a148:	f000 f830 	bl	800a1ac <_getpid_r>
 800a14c:	4622      	mov	r2, r4
 800a14e:	4601      	mov	r1, r0
 800a150:	4628      	mov	r0, r5
 800a152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a156:	f000 b817 	b.w	800a188 <_kill_r>
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d00a      	beq.n	800a174 <_raise_r+0x4c>
 800a15e:	1c59      	adds	r1, r3, #1
 800a160:	d103      	bne.n	800a16a <_raise_r+0x42>
 800a162:	2316      	movs	r3, #22
 800a164:	6003      	str	r3, [r0, #0]
 800a166:	2001      	movs	r0, #1
 800a168:	e7e7      	b.n	800a13a <_raise_r+0x12>
 800a16a:	2100      	movs	r1, #0
 800a16c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a170:	4620      	mov	r0, r4
 800a172:	4798      	blx	r3
 800a174:	2000      	movs	r0, #0
 800a176:	e7e0      	b.n	800a13a <_raise_r+0x12>

0800a178 <raise>:
 800a178:	4b02      	ldr	r3, [pc, #8]	@ (800a184 <raise+0xc>)
 800a17a:	4601      	mov	r1, r0
 800a17c:	6818      	ldr	r0, [r3, #0]
 800a17e:	f7ff bfd3 	b.w	800a128 <_raise_r>
 800a182:	bf00      	nop
 800a184:	20000024 	.word	0x20000024

0800a188 <_kill_r>:
 800a188:	b538      	push	{r3, r4, r5, lr}
 800a18a:	4d07      	ldr	r5, [pc, #28]	@ (800a1a8 <_kill_r+0x20>)
 800a18c:	2300      	movs	r3, #0
 800a18e:	4604      	mov	r4, r0
 800a190:	4608      	mov	r0, r1
 800a192:	4611      	mov	r1, r2
 800a194:	602b      	str	r3, [r5, #0]
 800a196:	f7f9 fa89 	bl	80036ac <_kill>
 800a19a:	1c43      	adds	r3, r0, #1
 800a19c:	d102      	bne.n	800a1a4 <_kill_r+0x1c>
 800a19e:	682b      	ldr	r3, [r5, #0]
 800a1a0:	b103      	cbz	r3, 800a1a4 <_kill_r+0x1c>
 800a1a2:	6023      	str	r3, [r4, #0]
 800a1a4:	bd38      	pop	{r3, r4, r5, pc}
 800a1a6:	bf00      	nop
 800a1a8:	200009bc 	.word	0x200009bc

0800a1ac <_getpid_r>:
 800a1ac:	f7f9 ba76 	b.w	800369c <_getpid>

0800a1b0 <__swhatbuf_r>:
 800a1b0:	b570      	push	{r4, r5, r6, lr}
 800a1b2:	460c      	mov	r4, r1
 800a1b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1b8:	2900      	cmp	r1, #0
 800a1ba:	b096      	sub	sp, #88	@ 0x58
 800a1bc:	4615      	mov	r5, r2
 800a1be:	461e      	mov	r6, r3
 800a1c0:	da0d      	bge.n	800a1de <__swhatbuf_r+0x2e>
 800a1c2:	89a3      	ldrh	r3, [r4, #12]
 800a1c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a1c8:	f04f 0100 	mov.w	r1, #0
 800a1cc:	bf14      	ite	ne
 800a1ce:	2340      	movne	r3, #64	@ 0x40
 800a1d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a1d4:	2000      	movs	r0, #0
 800a1d6:	6031      	str	r1, [r6, #0]
 800a1d8:	602b      	str	r3, [r5, #0]
 800a1da:	b016      	add	sp, #88	@ 0x58
 800a1dc:	bd70      	pop	{r4, r5, r6, pc}
 800a1de:	466a      	mov	r2, sp
 800a1e0:	f000 f848 	bl	800a274 <_fstat_r>
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	dbec      	blt.n	800a1c2 <__swhatbuf_r+0x12>
 800a1e8:	9901      	ldr	r1, [sp, #4]
 800a1ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a1ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a1f2:	4259      	negs	r1, r3
 800a1f4:	4159      	adcs	r1, r3
 800a1f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1fa:	e7eb      	b.n	800a1d4 <__swhatbuf_r+0x24>

0800a1fc <__smakebuf_r>:
 800a1fc:	898b      	ldrh	r3, [r1, #12]
 800a1fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a200:	079d      	lsls	r5, r3, #30
 800a202:	4606      	mov	r6, r0
 800a204:	460c      	mov	r4, r1
 800a206:	d507      	bpl.n	800a218 <__smakebuf_r+0x1c>
 800a208:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a20c:	6023      	str	r3, [r4, #0]
 800a20e:	6123      	str	r3, [r4, #16]
 800a210:	2301      	movs	r3, #1
 800a212:	6163      	str	r3, [r4, #20]
 800a214:	b003      	add	sp, #12
 800a216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a218:	ab01      	add	r3, sp, #4
 800a21a:	466a      	mov	r2, sp
 800a21c:	f7ff ffc8 	bl	800a1b0 <__swhatbuf_r>
 800a220:	9f00      	ldr	r7, [sp, #0]
 800a222:	4605      	mov	r5, r0
 800a224:	4639      	mov	r1, r7
 800a226:	4630      	mov	r0, r6
 800a228:	f7fe febe 	bl	8008fa8 <_malloc_r>
 800a22c:	b948      	cbnz	r0, 800a242 <__smakebuf_r+0x46>
 800a22e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a232:	059a      	lsls	r2, r3, #22
 800a234:	d4ee      	bmi.n	800a214 <__smakebuf_r+0x18>
 800a236:	f023 0303 	bic.w	r3, r3, #3
 800a23a:	f043 0302 	orr.w	r3, r3, #2
 800a23e:	81a3      	strh	r3, [r4, #12]
 800a240:	e7e2      	b.n	800a208 <__smakebuf_r+0xc>
 800a242:	89a3      	ldrh	r3, [r4, #12]
 800a244:	6020      	str	r0, [r4, #0]
 800a246:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a24a:	81a3      	strh	r3, [r4, #12]
 800a24c:	9b01      	ldr	r3, [sp, #4]
 800a24e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a252:	b15b      	cbz	r3, 800a26c <__smakebuf_r+0x70>
 800a254:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a258:	4630      	mov	r0, r6
 800a25a:	f000 f81d 	bl	800a298 <_isatty_r>
 800a25e:	b128      	cbz	r0, 800a26c <__smakebuf_r+0x70>
 800a260:	89a3      	ldrh	r3, [r4, #12]
 800a262:	f023 0303 	bic.w	r3, r3, #3
 800a266:	f043 0301 	orr.w	r3, r3, #1
 800a26a:	81a3      	strh	r3, [r4, #12]
 800a26c:	89a3      	ldrh	r3, [r4, #12]
 800a26e:	431d      	orrs	r5, r3
 800a270:	81a5      	strh	r5, [r4, #12]
 800a272:	e7cf      	b.n	800a214 <__smakebuf_r+0x18>

0800a274 <_fstat_r>:
 800a274:	b538      	push	{r3, r4, r5, lr}
 800a276:	4d07      	ldr	r5, [pc, #28]	@ (800a294 <_fstat_r+0x20>)
 800a278:	2300      	movs	r3, #0
 800a27a:	4604      	mov	r4, r0
 800a27c:	4608      	mov	r0, r1
 800a27e:	4611      	mov	r1, r2
 800a280:	602b      	str	r3, [r5, #0]
 800a282:	f7f9 fa73 	bl	800376c <_fstat>
 800a286:	1c43      	adds	r3, r0, #1
 800a288:	d102      	bne.n	800a290 <_fstat_r+0x1c>
 800a28a:	682b      	ldr	r3, [r5, #0]
 800a28c:	b103      	cbz	r3, 800a290 <_fstat_r+0x1c>
 800a28e:	6023      	str	r3, [r4, #0]
 800a290:	bd38      	pop	{r3, r4, r5, pc}
 800a292:	bf00      	nop
 800a294:	200009bc 	.word	0x200009bc

0800a298 <_isatty_r>:
 800a298:	b538      	push	{r3, r4, r5, lr}
 800a29a:	4d06      	ldr	r5, [pc, #24]	@ (800a2b4 <_isatty_r+0x1c>)
 800a29c:	2300      	movs	r3, #0
 800a29e:	4604      	mov	r4, r0
 800a2a0:	4608      	mov	r0, r1
 800a2a2:	602b      	str	r3, [r5, #0]
 800a2a4:	f7f9 fa72 	bl	800378c <_isatty>
 800a2a8:	1c43      	adds	r3, r0, #1
 800a2aa:	d102      	bne.n	800a2b2 <_isatty_r+0x1a>
 800a2ac:	682b      	ldr	r3, [r5, #0]
 800a2ae:	b103      	cbz	r3, 800a2b2 <_isatty_r+0x1a>
 800a2b0:	6023      	str	r3, [r4, #0]
 800a2b2:	bd38      	pop	{r3, r4, r5, pc}
 800a2b4:	200009bc 	.word	0x200009bc

0800a2b8 <pow>:
 800a2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ba:	ed2d 8b02 	vpush	{d8}
 800a2be:	eeb0 8a40 	vmov.f32	s16, s0
 800a2c2:	eef0 8a60 	vmov.f32	s17, s1
 800a2c6:	ec55 4b11 	vmov	r4, r5, d1
 800a2ca:	f000 fb81 	bl	800a9d0 <__ieee754_pow>
 800a2ce:	4622      	mov	r2, r4
 800a2d0:	462b      	mov	r3, r5
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	4629      	mov	r1, r5
 800a2d6:	ec57 6b10 	vmov	r6, r7, d0
 800a2da:	f7f6 fc47 	bl	8000b6c <__aeabi_dcmpun>
 800a2de:	2800      	cmp	r0, #0
 800a2e0:	d13b      	bne.n	800a35a <pow+0xa2>
 800a2e2:	ec51 0b18 	vmov	r0, r1, d8
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	f7f6 fc0d 	bl	8000b08 <__aeabi_dcmpeq>
 800a2ee:	b1b8      	cbz	r0, 800a320 <pow+0x68>
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	4620      	mov	r0, r4
 800a2f6:	4629      	mov	r1, r5
 800a2f8:	f7f6 fc06 	bl	8000b08 <__aeabi_dcmpeq>
 800a2fc:	2800      	cmp	r0, #0
 800a2fe:	d146      	bne.n	800a38e <pow+0xd6>
 800a300:	ec45 4b10 	vmov	d0, r4, r5
 800a304:	f000 f8f8 	bl	800a4f8 <finite>
 800a308:	b338      	cbz	r0, 800a35a <pow+0xa2>
 800a30a:	2200      	movs	r2, #0
 800a30c:	2300      	movs	r3, #0
 800a30e:	4620      	mov	r0, r4
 800a310:	4629      	mov	r1, r5
 800a312:	f7f6 fc03 	bl	8000b1c <__aeabi_dcmplt>
 800a316:	b300      	cbz	r0, 800a35a <pow+0xa2>
 800a318:	f7fd ff58 	bl	80081cc <__errno>
 800a31c:	2322      	movs	r3, #34	@ 0x22
 800a31e:	e01b      	b.n	800a358 <pow+0xa0>
 800a320:	ec47 6b10 	vmov	d0, r6, r7
 800a324:	f000 f8e8 	bl	800a4f8 <finite>
 800a328:	b9e0      	cbnz	r0, 800a364 <pow+0xac>
 800a32a:	eeb0 0a48 	vmov.f32	s0, s16
 800a32e:	eef0 0a68 	vmov.f32	s1, s17
 800a332:	f000 f8e1 	bl	800a4f8 <finite>
 800a336:	b1a8      	cbz	r0, 800a364 <pow+0xac>
 800a338:	ec45 4b10 	vmov	d0, r4, r5
 800a33c:	f000 f8dc 	bl	800a4f8 <finite>
 800a340:	b180      	cbz	r0, 800a364 <pow+0xac>
 800a342:	4632      	mov	r2, r6
 800a344:	463b      	mov	r3, r7
 800a346:	4630      	mov	r0, r6
 800a348:	4639      	mov	r1, r7
 800a34a:	f7f6 fc0f 	bl	8000b6c <__aeabi_dcmpun>
 800a34e:	2800      	cmp	r0, #0
 800a350:	d0e2      	beq.n	800a318 <pow+0x60>
 800a352:	f7fd ff3b 	bl	80081cc <__errno>
 800a356:	2321      	movs	r3, #33	@ 0x21
 800a358:	6003      	str	r3, [r0, #0]
 800a35a:	ecbd 8b02 	vpop	{d8}
 800a35e:	ec47 6b10 	vmov	d0, r6, r7
 800a362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a364:	2200      	movs	r2, #0
 800a366:	2300      	movs	r3, #0
 800a368:	4630      	mov	r0, r6
 800a36a:	4639      	mov	r1, r7
 800a36c:	f7f6 fbcc 	bl	8000b08 <__aeabi_dcmpeq>
 800a370:	2800      	cmp	r0, #0
 800a372:	d0f2      	beq.n	800a35a <pow+0xa2>
 800a374:	eeb0 0a48 	vmov.f32	s0, s16
 800a378:	eef0 0a68 	vmov.f32	s1, s17
 800a37c:	f000 f8bc 	bl	800a4f8 <finite>
 800a380:	2800      	cmp	r0, #0
 800a382:	d0ea      	beq.n	800a35a <pow+0xa2>
 800a384:	ec45 4b10 	vmov	d0, r4, r5
 800a388:	f000 f8b6 	bl	800a4f8 <finite>
 800a38c:	e7c3      	b.n	800a316 <pow+0x5e>
 800a38e:	4f01      	ldr	r7, [pc, #4]	@ (800a394 <pow+0xdc>)
 800a390:	2600      	movs	r6, #0
 800a392:	e7e2      	b.n	800a35a <pow+0xa2>
 800a394:	3ff00000 	.word	0x3ff00000

0800a398 <cos>:
 800a398:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a39a:	ec53 2b10 	vmov	r2, r3, d0
 800a39e:	4826      	ldr	r0, [pc, #152]	@ (800a438 <cos+0xa0>)
 800a3a0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a3a4:	4281      	cmp	r1, r0
 800a3a6:	d806      	bhi.n	800a3b6 <cos+0x1e>
 800a3a8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800a430 <cos+0x98>
 800a3ac:	b005      	add	sp, #20
 800a3ae:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3b2:	f000 b989 	b.w	800a6c8 <__kernel_cos>
 800a3b6:	4821      	ldr	r0, [pc, #132]	@ (800a43c <cos+0xa4>)
 800a3b8:	4281      	cmp	r1, r0
 800a3ba:	d908      	bls.n	800a3ce <cos+0x36>
 800a3bc:	4610      	mov	r0, r2
 800a3be:	4619      	mov	r1, r3
 800a3c0:	f7f5 ff82 	bl	80002c8 <__aeabi_dsub>
 800a3c4:	ec41 0b10 	vmov	d0, r0, r1
 800a3c8:	b005      	add	sp, #20
 800a3ca:	f85d fb04 	ldr.w	pc, [sp], #4
 800a3ce:	4668      	mov	r0, sp
 800a3d0:	f001 f842 	bl	800b458 <__ieee754_rem_pio2>
 800a3d4:	f000 0003 	and.w	r0, r0, #3
 800a3d8:	2801      	cmp	r0, #1
 800a3da:	d00b      	beq.n	800a3f4 <cos+0x5c>
 800a3dc:	2802      	cmp	r0, #2
 800a3de:	d015      	beq.n	800a40c <cos+0x74>
 800a3e0:	b9d8      	cbnz	r0, 800a41a <cos+0x82>
 800a3e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a3e6:	ed9d 0b00 	vldr	d0, [sp]
 800a3ea:	f000 f96d 	bl	800a6c8 <__kernel_cos>
 800a3ee:	ec51 0b10 	vmov	r0, r1, d0
 800a3f2:	e7e7      	b.n	800a3c4 <cos+0x2c>
 800a3f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a3f8:	ed9d 0b00 	vldr	d0, [sp]
 800a3fc:	f000 fa2c 	bl	800a858 <__kernel_sin>
 800a400:	ec53 2b10 	vmov	r2, r3, d0
 800a404:	4610      	mov	r0, r2
 800a406:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a40a:	e7db      	b.n	800a3c4 <cos+0x2c>
 800a40c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a410:	ed9d 0b00 	vldr	d0, [sp]
 800a414:	f000 f958 	bl	800a6c8 <__kernel_cos>
 800a418:	e7f2      	b.n	800a400 <cos+0x68>
 800a41a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a41e:	ed9d 0b00 	vldr	d0, [sp]
 800a422:	2001      	movs	r0, #1
 800a424:	f000 fa18 	bl	800a858 <__kernel_sin>
 800a428:	e7e1      	b.n	800a3ee <cos+0x56>
 800a42a:	bf00      	nop
 800a42c:	f3af 8000 	nop.w
	...
 800a438:	3fe921fb 	.word	0x3fe921fb
 800a43c:	7fefffff 	.word	0x7fefffff

0800a440 <fabs>:
 800a440:	ec51 0b10 	vmov	r0, r1, d0
 800a444:	4602      	mov	r2, r0
 800a446:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a44a:	ec43 2b10 	vmov	d0, r2, r3
 800a44e:	4770      	bx	lr

0800a450 <sin>:
 800a450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a452:	ec53 2b10 	vmov	r2, r3, d0
 800a456:	4826      	ldr	r0, [pc, #152]	@ (800a4f0 <sin+0xa0>)
 800a458:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a45c:	4281      	cmp	r1, r0
 800a45e:	d807      	bhi.n	800a470 <sin+0x20>
 800a460:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800a4e8 <sin+0x98>
 800a464:	2000      	movs	r0, #0
 800a466:	b005      	add	sp, #20
 800a468:	f85d eb04 	ldr.w	lr, [sp], #4
 800a46c:	f000 b9f4 	b.w	800a858 <__kernel_sin>
 800a470:	4820      	ldr	r0, [pc, #128]	@ (800a4f4 <sin+0xa4>)
 800a472:	4281      	cmp	r1, r0
 800a474:	d908      	bls.n	800a488 <sin+0x38>
 800a476:	4610      	mov	r0, r2
 800a478:	4619      	mov	r1, r3
 800a47a:	f7f5 ff25 	bl	80002c8 <__aeabi_dsub>
 800a47e:	ec41 0b10 	vmov	d0, r0, r1
 800a482:	b005      	add	sp, #20
 800a484:	f85d fb04 	ldr.w	pc, [sp], #4
 800a488:	4668      	mov	r0, sp
 800a48a:	f000 ffe5 	bl	800b458 <__ieee754_rem_pio2>
 800a48e:	f000 0003 	and.w	r0, r0, #3
 800a492:	2801      	cmp	r0, #1
 800a494:	d00c      	beq.n	800a4b0 <sin+0x60>
 800a496:	2802      	cmp	r0, #2
 800a498:	d011      	beq.n	800a4be <sin+0x6e>
 800a49a:	b9e8      	cbnz	r0, 800a4d8 <sin+0x88>
 800a49c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a4a0:	ed9d 0b00 	vldr	d0, [sp]
 800a4a4:	2001      	movs	r0, #1
 800a4a6:	f000 f9d7 	bl	800a858 <__kernel_sin>
 800a4aa:	ec51 0b10 	vmov	r0, r1, d0
 800a4ae:	e7e6      	b.n	800a47e <sin+0x2e>
 800a4b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a4b4:	ed9d 0b00 	vldr	d0, [sp]
 800a4b8:	f000 f906 	bl	800a6c8 <__kernel_cos>
 800a4bc:	e7f5      	b.n	800a4aa <sin+0x5a>
 800a4be:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a4c2:	ed9d 0b00 	vldr	d0, [sp]
 800a4c6:	2001      	movs	r0, #1
 800a4c8:	f000 f9c6 	bl	800a858 <__kernel_sin>
 800a4cc:	ec53 2b10 	vmov	r2, r3, d0
 800a4d0:	4610      	mov	r0, r2
 800a4d2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a4d6:	e7d2      	b.n	800a47e <sin+0x2e>
 800a4d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a4dc:	ed9d 0b00 	vldr	d0, [sp]
 800a4e0:	f000 f8f2 	bl	800a6c8 <__kernel_cos>
 800a4e4:	e7f2      	b.n	800a4cc <sin+0x7c>
 800a4e6:	bf00      	nop
	...
 800a4f0:	3fe921fb 	.word	0x3fe921fb
 800a4f4:	7fefffff 	.word	0x7fefffff

0800a4f8 <finite>:
 800a4f8:	b082      	sub	sp, #8
 800a4fa:	ed8d 0b00 	vstr	d0, [sp]
 800a4fe:	9801      	ldr	r0, [sp, #4]
 800a500:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800a504:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800a508:	0fc0      	lsrs	r0, r0, #31
 800a50a:	b002      	add	sp, #8
 800a50c:	4770      	bx	lr
	...

0800a510 <__ieee754_sqrt>:
 800a510:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a514:	4a68      	ldr	r2, [pc, #416]	@ (800a6b8 <__ieee754_sqrt+0x1a8>)
 800a516:	ec55 4b10 	vmov	r4, r5, d0
 800a51a:	43aa      	bics	r2, r5
 800a51c:	462b      	mov	r3, r5
 800a51e:	4621      	mov	r1, r4
 800a520:	d110      	bne.n	800a544 <__ieee754_sqrt+0x34>
 800a522:	4622      	mov	r2, r4
 800a524:	4620      	mov	r0, r4
 800a526:	4629      	mov	r1, r5
 800a528:	f7f6 f886 	bl	8000638 <__aeabi_dmul>
 800a52c:	4602      	mov	r2, r0
 800a52e:	460b      	mov	r3, r1
 800a530:	4620      	mov	r0, r4
 800a532:	4629      	mov	r1, r5
 800a534:	f7f5 feca 	bl	80002cc <__adddf3>
 800a538:	4604      	mov	r4, r0
 800a53a:	460d      	mov	r5, r1
 800a53c:	ec45 4b10 	vmov	d0, r4, r5
 800a540:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a544:	2d00      	cmp	r5, #0
 800a546:	dc0e      	bgt.n	800a566 <__ieee754_sqrt+0x56>
 800a548:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a54c:	4322      	orrs	r2, r4
 800a54e:	d0f5      	beq.n	800a53c <__ieee754_sqrt+0x2c>
 800a550:	b19d      	cbz	r5, 800a57a <__ieee754_sqrt+0x6a>
 800a552:	4622      	mov	r2, r4
 800a554:	4620      	mov	r0, r4
 800a556:	4629      	mov	r1, r5
 800a558:	f7f5 feb6 	bl	80002c8 <__aeabi_dsub>
 800a55c:	4602      	mov	r2, r0
 800a55e:	460b      	mov	r3, r1
 800a560:	f7f6 f994 	bl	800088c <__aeabi_ddiv>
 800a564:	e7e8      	b.n	800a538 <__ieee754_sqrt+0x28>
 800a566:	152a      	asrs	r2, r5, #20
 800a568:	d115      	bne.n	800a596 <__ieee754_sqrt+0x86>
 800a56a:	2000      	movs	r0, #0
 800a56c:	e009      	b.n	800a582 <__ieee754_sqrt+0x72>
 800a56e:	0acb      	lsrs	r3, r1, #11
 800a570:	3a15      	subs	r2, #21
 800a572:	0549      	lsls	r1, r1, #21
 800a574:	2b00      	cmp	r3, #0
 800a576:	d0fa      	beq.n	800a56e <__ieee754_sqrt+0x5e>
 800a578:	e7f7      	b.n	800a56a <__ieee754_sqrt+0x5a>
 800a57a:	462a      	mov	r2, r5
 800a57c:	e7fa      	b.n	800a574 <__ieee754_sqrt+0x64>
 800a57e:	005b      	lsls	r3, r3, #1
 800a580:	3001      	adds	r0, #1
 800a582:	02dc      	lsls	r4, r3, #11
 800a584:	d5fb      	bpl.n	800a57e <__ieee754_sqrt+0x6e>
 800a586:	1e44      	subs	r4, r0, #1
 800a588:	1b12      	subs	r2, r2, r4
 800a58a:	f1c0 0420 	rsb	r4, r0, #32
 800a58e:	fa21 f404 	lsr.w	r4, r1, r4
 800a592:	4323      	orrs	r3, r4
 800a594:	4081      	lsls	r1, r0
 800a596:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a59a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800a59e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a5a2:	07d2      	lsls	r2, r2, #31
 800a5a4:	bf5c      	itt	pl
 800a5a6:	005b      	lslpl	r3, r3, #1
 800a5a8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800a5ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a5b0:	bf58      	it	pl
 800a5b2:	0049      	lslpl	r1, r1, #1
 800a5b4:	2600      	movs	r6, #0
 800a5b6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800a5ba:	106d      	asrs	r5, r5, #1
 800a5bc:	0049      	lsls	r1, r1, #1
 800a5be:	2016      	movs	r0, #22
 800a5c0:	4632      	mov	r2, r6
 800a5c2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800a5c6:	1917      	adds	r7, r2, r4
 800a5c8:	429f      	cmp	r7, r3
 800a5ca:	bfde      	ittt	le
 800a5cc:	193a      	addle	r2, r7, r4
 800a5ce:	1bdb      	suble	r3, r3, r7
 800a5d0:	1936      	addle	r6, r6, r4
 800a5d2:	0fcf      	lsrs	r7, r1, #31
 800a5d4:	3801      	subs	r0, #1
 800a5d6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800a5da:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a5de:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a5e2:	d1f0      	bne.n	800a5c6 <__ieee754_sqrt+0xb6>
 800a5e4:	4604      	mov	r4, r0
 800a5e6:	2720      	movs	r7, #32
 800a5e8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	eb00 0e0c 	add.w	lr, r0, ip
 800a5f2:	db02      	blt.n	800a5fa <__ieee754_sqrt+0xea>
 800a5f4:	d113      	bne.n	800a61e <__ieee754_sqrt+0x10e>
 800a5f6:	458e      	cmp	lr, r1
 800a5f8:	d811      	bhi.n	800a61e <__ieee754_sqrt+0x10e>
 800a5fa:	f1be 0f00 	cmp.w	lr, #0
 800a5fe:	eb0e 000c 	add.w	r0, lr, ip
 800a602:	da42      	bge.n	800a68a <__ieee754_sqrt+0x17a>
 800a604:	2800      	cmp	r0, #0
 800a606:	db40      	blt.n	800a68a <__ieee754_sqrt+0x17a>
 800a608:	f102 0801 	add.w	r8, r2, #1
 800a60c:	1a9b      	subs	r3, r3, r2
 800a60e:	458e      	cmp	lr, r1
 800a610:	bf88      	it	hi
 800a612:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a616:	eba1 010e 	sub.w	r1, r1, lr
 800a61a:	4464      	add	r4, ip
 800a61c:	4642      	mov	r2, r8
 800a61e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800a622:	3f01      	subs	r7, #1
 800a624:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800a628:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a62c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a630:	d1dc      	bne.n	800a5ec <__ieee754_sqrt+0xdc>
 800a632:	4319      	orrs	r1, r3
 800a634:	d01b      	beq.n	800a66e <__ieee754_sqrt+0x15e>
 800a636:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800a6bc <__ieee754_sqrt+0x1ac>
 800a63a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800a6c0 <__ieee754_sqrt+0x1b0>
 800a63e:	e9da 0100 	ldrd	r0, r1, [sl]
 800a642:	e9db 2300 	ldrd	r2, r3, [fp]
 800a646:	f7f5 fe3f 	bl	80002c8 <__aeabi_dsub>
 800a64a:	e9da 8900 	ldrd	r8, r9, [sl]
 800a64e:	4602      	mov	r2, r0
 800a650:	460b      	mov	r3, r1
 800a652:	4640      	mov	r0, r8
 800a654:	4649      	mov	r1, r9
 800a656:	f7f6 fa6b 	bl	8000b30 <__aeabi_dcmple>
 800a65a:	b140      	cbz	r0, 800a66e <__ieee754_sqrt+0x15e>
 800a65c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a660:	e9da 0100 	ldrd	r0, r1, [sl]
 800a664:	e9db 2300 	ldrd	r2, r3, [fp]
 800a668:	d111      	bne.n	800a68e <__ieee754_sqrt+0x17e>
 800a66a:	3601      	adds	r6, #1
 800a66c:	463c      	mov	r4, r7
 800a66e:	1072      	asrs	r2, r6, #1
 800a670:	0863      	lsrs	r3, r4, #1
 800a672:	07f1      	lsls	r1, r6, #31
 800a674:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800a678:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800a67c:	bf48      	it	mi
 800a67e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800a682:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800a686:	4618      	mov	r0, r3
 800a688:	e756      	b.n	800a538 <__ieee754_sqrt+0x28>
 800a68a:	4690      	mov	r8, r2
 800a68c:	e7be      	b.n	800a60c <__ieee754_sqrt+0xfc>
 800a68e:	f7f5 fe1d 	bl	80002cc <__adddf3>
 800a692:	e9da 8900 	ldrd	r8, r9, [sl]
 800a696:	4602      	mov	r2, r0
 800a698:	460b      	mov	r3, r1
 800a69a:	4640      	mov	r0, r8
 800a69c:	4649      	mov	r1, r9
 800a69e:	f7f6 fa3d 	bl	8000b1c <__aeabi_dcmplt>
 800a6a2:	b120      	cbz	r0, 800a6ae <__ieee754_sqrt+0x19e>
 800a6a4:	1ca0      	adds	r0, r4, #2
 800a6a6:	bf08      	it	eq
 800a6a8:	3601      	addeq	r6, #1
 800a6aa:	3402      	adds	r4, #2
 800a6ac:	e7df      	b.n	800a66e <__ieee754_sqrt+0x15e>
 800a6ae:	1c63      	adds	r3, r4, #1
 800a6b0:	f023 0401 	bic.w	r4, r3, #1
 800a6b4:	e7db      	b.n	800a66e <__ieee754_sqrt+0x15e>
 800a6b6:	bf00      	nop
 800a6b8:	7ff00000 	.word	0x7ff00000
 800a6bc:	200001e8 	.word	0x200001e8
 800a6c0:	200001e0 	.word	0x200001e0
 800a6c4:	00000000 	.word	0x00000000

0800a6c8 <__kernel_cos>:
 800a6c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6cc:	ec57 6b10 	vmov	r6, r7, d0
 800a6d0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a6d4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800a6d8:	ed8d 1b00 	vstr	d1, [sp]
 800a6dc:	d206      	bcs.n	800a6ec <__kernel_cos+0x24>
 800a6de:	4630      	mov	r0, r6
 800a6e0:	4639      	mov	r1, r7
 800a6e2:	f7f6 fa59 	bl	8000b98 <__aeabi_d2iz>
 800a6e6:	2800      	cmp	r0, #0
 800a6e8:	f000 8088 	beq.w	800a7fc <__kernel_cos+0x134>
 800a6ec:	4632      	mov	r2, r6
 800a6ee:	463b      	mov	r3, r7
 800a6f0:	4630      	mov	r0, r6
 800a6f2:	4639      	mov	r1, r7
 800a6f4:	f7f5 ffa0 	bl	8000638 <__aeabi_dmul>
 800a6f8:	4b51      	ldr	r3, [pc, #324]	@ (800a840 <__kernel_cos+0x178>)
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	4604      	mov	r4, r0
 800a6fe:	460d      	mov	r5, r1
 800a700:	f7f5 ff9a 	bl	8000638 <__aeabi_dmul>
 800a704:	a340      	add	r3, pc, #256	@ (adr r3, 800a808 <__kernel_cos+0x140>)
 800a706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a70a:	4682      	mov	sl, r0
 800a70c:	468b      	mov	fp, r1
 800a70e:	4620      	mov	r0, r4
 800a710:	4629      	mov	r1, r5
 800a712:	f7f5 ff91 	bl	8000638 <__aeabi_dmul>
 800a716:	a33e      	add	r3, pc, #248	@ (adr r3, 800a810 <__kernel_cos+0x148>)
 800a718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a71c:	f7f5 fdd6 	bl	80002cc <__adddf3>
 800a720:	4622      	mov	r2, r4
 800a722:	462b      	mov	r3, r5
 800a724:	f7f5 ff88 	bl	8000638 <__aeabi_dmul>
 800a728:	a33b      	add	r3, pc, #236	@ (adr r3, 800a818 <__kernel_cos+0x150>)
 800a72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72e:	f7f5 fdcb 	bl	80002c8 <__aeabi_dsub>
 800a732:	4622      	mov	r2, r4
 800a734:	462b      	mov	r3, r5
 800a736:	f7f5 ff7f 	bl	8000638 <__aeabi_dmul>
 800a73a:	a339      	add	r3, pc, #228	@ (adr r3, 800a820 <__kernel_cos+0x158>)
 800a73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a740:	f7f5 fdc4 	bl	80002cc <__adddf3>
 800a744:	4622      	mov	r2, r4
 800a746:	462b      	mov	r3, r5
 800a748:	f7f5 ff76 	bl	8000638 <__aeabi_dmul>
 800a74c:	a336      	add	r3, pc, #216	@ (adr r3, 800a828 <__kernel_cos+0x160>)
 800a74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a752:	f7f5 fdb9 	bl	80002c8 <__aeabi_dsub>
 800a756:	4622      	mov	r2, r4
 800a758:	462b      	mov	r3, r5
 800a75a:	f7f5 ff6d 	bl	8000638 <__aeabi_dmul>
 800a75e:	a334      	add	r3, pc, #208	@ (adr r3, 800a830 <__kernel_cos+0x168>)
 800a760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a764:	f7f5 fdb2 	bl	80002cc <__adddf3>
 800a768:	4622      	mov	r2, r4
 800a76a:	462b      	mov	r3, r5
 800a76c:	f7f5 ff64 	bl	8000638 <__aeabi_dmul>
 800a770:	4622      	mov	r2, r4
 800a772:	462b      	mov	r3, r5
 800a774:	f7f5 ff60 	bl	8000638 <__aeabi_dmul>
 800a778:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a77c:	4604      	mov	r4, r0
 800a77e:	460d      	mov	r5, r1
 800a780:	4630      	mov	r0, r6
 800a782:	4639      	mov	r1, r7
 800a784:	f7f5 ff58 	bl	8000638 <__aeabi_dmul>
 800a788:	460b      	mov	r3, r1
 800a78a:	4602      	mov	r2, r0
 800a78c:	4629      	mov	r1, r5
 800a78e:	4620      	mov	r0, r4
 800a790:	f7f5 fd9a 	bl	80002c8 <__aeabi_dsub>
 800a794:	4b2b      	ldr	r3, [pc, #172]	@ (800a844 <__kernel_cos+0x17c>)
 800a796:	4598      	cmp	r8, r3
 800a798:	4606      	mov	r6, r0
 800a79a:	460f      	mov	r7, r1
 800a79c:	d810      	bhi.n	800a7c0 <__kernel_cos+0xf8>
 800a79e:	4602      	mov	r2, r0
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	4650      	mov	r0, sl
 800a7a4:	4659      	mov	r1, fp
 800a7a6:	f7f5 fd8f 	bl	80002c8 <__aeabi_dsub>
 800a7aa:	460b      	mov	r3, r1
 800a7ac:	4926      	ldr	r1, [pc, #152]	@ (800a848 <__kernel_cos+0x180>)
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	2000      	movs	r0, #0
 800a7b2:	f7f5 fd89 	bl	80002c8 <__aeabi_dsub>
 800a7b6:	ec41 0b10 	vmov	d0, r0, r1
 800a7ba:	b003      	add	sp, #12
 800a7bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7c0:	4b22      	ldr	r3, [pc, #136]	@ (800a84c <__kernel_cos+0x184>)
 800a7c2:	4921      	ldr	r1, [pc, #132]	@ (800a848 <__kernel_cos+0x180>)
 800a7c4:	4598      	cmp	r8, r3
 800a7c6:	bf8c      	ite	hi
 800a7c8:	4d21      	ldrhi	r5, [pc, #132]	@ (800a850 <__kernel_cos+0x188>)
 800a7ca:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800a7ce:	2400      	movs	r4, #0
 800a7d0:	4622      	mov	r2, r4
 800a7d2:	462b      	mov	r3, r5
 800a7d4:	2000      	movs	r0, #0
 800a7d6:	f7f5 fd77 	bl	80002c8 <__aeabi_dsub>
 800a7da:	4622      	mov	r2, r4
 800a7dc:	4680      	mov	r8, r0
 800a7de:	4689      	mov	r9, r1
 800a7e0:	462b      	mov	r3, r5
 800a7e2:	4650      	mov	r0, sl
 800a7e4:	4659      	mov	r1, fp
 800a7e6:	f7f5 fd6f 	bl	80002c8 <__aeabi_dsub>
 800a7ea:	4632      	mov	r2, r6
 800a7ec:	463b      	mov	r3, r7
 800a7ee:	f7f5 fd6b 	bl	80002c8 <__aeabi_dsub>
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	460b      	mov	r3, r1
 800a7f6:	4640      	mov	r0, r8
 800a7f8:	4649      	mov	r1, r9
 800a7fa:	e7da      	b.n	800a7b2 <__kernel_cos+0xea>
 800a7fc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800a838 <__kernel_cos+0x170>
 800a800:	e7db      	b.n	800a7ba <__kernel_cos+0xf2>
 800a802:	bf00      	nop
 800a804:	f3af 8000 	nop.w
 800a808:	be8838d4 	.word	0xbe8838d4
 800a80c:	bda8fae9 	.word	0xbda8fae9
 800a810:	bdb4b1c4 	.word	0xbdb4b1c4
 800a814:	3e21ee9e 	.word	0x3e21ee9e
 800a818:	809c52ad 	.word	0x809c52ad
 800a81c:	3e927e4f 	.word	0x3e927e4f
 800a820:	19cb1590 	.word	0x19cb1590
 800a824:	3efa01a0 	.word	0x3efa01a0
 800a828:	16c15177 	.word	0x16c15177
 800a82c:	3f56c16c 	.word	0x3f56c16c
 800a830:	5555554c 	.word	0x5555554c
 800a834:	3fa55555 	.word	0x3fa55555
 800a838:	00000000 	.word	0x00000000
 800a83c:	3ff00000 	.word	0x3ff00000
 800a840:	3fe00000 	.word	0x3fe00000
 800a844:	3fd33332 	.word	0x3fd33332
 800a848:	3ff00000 	.word	0x3ff00000
 800a84c:	3fe90000 	.word	0x3fe90000
 800a850:	3fd20000 	.word	0x3fd20000
 800a854:	00000000 	.word	0x00000000

0800a858 <__kernel_sin>:
 800a858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a85c:	ec55 4b10 	vmov	r4, r5, d0
 800a860:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a864:	b085      	sub	sp, #20
 800a866:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800a86a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800a86e:	4680      	mov	r8, r0
 800a870:	d205      	bcs.n	800a87e <__kernel_sin+0x26>
 800a872:	4620      	mov	r0, r4
 800a874:	4629      	mov	r1, r5
 800a876:	f7f6 f98f 	bl	8000b98 <__aeabi_d2iz>
 800a87a:	2800      	cmp	r0, #0
 800a87c:	d052      	beq.n	800a924 <__kernel_sin+0xcc>
 800a87e:	4622      	mov	r2, r4
 800a880:	462b      	mov	r3, r5
 800a882:	4620      	mov	r0, r4
 800a884:	4629      	mov	r1, r5
 800a886:	f7f5 fed7 	bl	8000638 <__aeabi_dmul>
 800a88a:	4682      	mov	sl, r0
 800a88c:	468b      	mov	fp, r1
 800a88e:	4602      	mov	r2, r0
 800a890:	460b      	mov	r3, r1
 800a892:	4620      	mov	r0, r4
 800a894:	4629      	mov	r1, r5
 800a896:	f7f5 fecf 	bl	8000638 <__aeabi_dmul>
 800a89a:	a342      	add	r3, pc, #264	@ (adr r3, 800a9a4 <__kernel_sin+0x14c>)
 800a89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a0:	e9cd 0100 	strd	r0, r1, [sp]
 800a8a4:	4650      	mov	r0, sl
 800a8a6:	4659      	mov	r1, fp
 800a8a8:	f7f5 fec6 	bl	8000638 <__aeabi_dmul>
 800a8ac:	a33f      	add	r3, pc, #252	@ (adr r3, 800a9ac <__kernel_sin+0x154>)
 800a8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b2:	f7f5 fd09 	bl	80002c8 <__aeabi_dsub>
 800a8b6:	4652      	mov	r2, sl
 800a8b8:	465b      	mov	r3, fp
 800a8ba:	f7f5 febd 	bl	8000638 <__aeabi_dmul>
 800a8be:	a33d      	add	r3, pc, #244	@ (adr r3, 800a9b4 <__kernel_sin+0x15c>)
 800a8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c4:	f7f5 fd02 	bl	80002cc <__adddf3>
 800a8c8:	4652      	mov	r2, sl
 800a8ca:	465b      	mov	r3, fp
 800a8cc:	f7f5 feb4 	bl	8000638 <__aeabi_dmul>
 800a8d0:	a33a      	add	r3, pc, #232	@ (adr r3, 800a9bc <__kernel_sin+0x164>)
 800a8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d6:	f7f5 fcf7 	bl	80002c8 <__aeabi_dsub>
 800a8da:	4652      	mov	r2, sl
 800a8dc:	465b      	mov	r3, fp
 800a8de:	f7f5 feab 	bl	8000638 <__aeabi_dmul>
 800a8e2:	a338      	add	r3, pc, #224	@ (adr r3, 800a9c4 <__kernel_sin+0x16c>)
 800a8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e8:	f7f5 fcf0 	bl	80002cc <__adddf3>
 800a8ec:	4606      	mov	r6, r0
 800a8ee:	460f      	mov	r7, r1
 800a8f0:	f1b8 0f00 	cmp.w	r8, #0
 800a8f4:	d11b      	bne.n	800a92e <__kernel_sin+0xd6>
 800a8f6:	4602      	mov	r2, r0
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	4650      	mov	r0, sl
 800a8fc:	4659      	mov	r1, fp
 800a8fe:	f7f5 fe9b 	bl	8000638 <__aeabi_dmul>
 800a902:	a325      	add	r3, pc, #148	@ (adr r3, 800a998 <__kernel_sin+0x140>)
 800a904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a908:	f7f5 fcde 	bl	80002c8 <__aeabi_dsub>
 800a90c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a910:	f7f5 fe92 	bl	8000638 <__aeabi_dmul>
 800a914:	4602      	mov	r2, r0
 800a916:	460b      	mov	r3, r1
 800a918:	4620      	mov	r0, r4
 800a91a:	4629      	mov	r1, r5
 800a91c:	f7f5 fcd6 	bl	80002cc <__adddf3>
 800a920:	4604      	mov	r4, r0
 800a922:	460d      	mov	r5, r1
 800a924:	ec45 4b10 	vmov	d0, r4, r5
 800a928:	b005      	add	sp, #20
 800a92a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a92e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a932:	4b1b      	ldr	r3, [pc, #108]	@ (800a9a0 <__kernel_sin+0x148>)
 800a934:	2200      	movs	r2, #0
 800a936:	f7f5 fe7f 	bl	8000638 <__aeabi_dmul>
 800a93a:	4632      	mov	r2, r6
 800a93c:	4680      	mov	r8, r0
 800a93e:	4689      	mov	r9, r1
 800a940:	463b      	mov	r3, r7
 800a942:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a946:	f7f5 fe77 	bl	8000638 <__aeabi_dmul>
 800a94a:	4602      	mov	r2, r0
 800a94c:	460b      	mov	r3, r1
 800a94e:	4640      	mov	r0, r8
 800a950:	4649      	mov	r1, r9
 800a952:	f7f5 fcb9 	bl	80002c8 <__aeabi_dsub>
 800a956:	4652      	mov	r2, sl
 800a958:	465b      	mov	r3, fp
 800a95a:	f7f5 fe6d 	bl	8000638 <__aeabi_dmul>
 800a95e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a962:	f7f5 fcb1 	bl	80002c8 <__aeabi_dsub>
 800a966:	a30c      	add	r3, pc, #48	@ (adr r3, 800a998 <__kernel_sin+0x140>)
 800a968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96c:	4606      	mov	r6, r0
 800a96e:	460f      	mov	r7, r1
 800a970:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a974:	f7f5 fe60 	bl	8000638 <__aeabi_dmul>
 800a978:	4602      	mov	r2, r0
 800a97a:	460b      	mov	r3, r1
 800a97c:	4630      	mov	r0, r6
 800a97e:	4639      	mov	r1, r7
 800a980:	f7f5 fca4 	bl	80002cc <__adddf3>
 800a984:	4602      	mov	r2, r0
 800a986:	460b      	mov	r3, r1
 800a988:	4620      	mov	r0, r4
 800a98a:	4629      	mov	r1, r5
 800a98c:	f7f5 fc9c 	bl	80002c8 <__aeabi_dsub>
 800a990:	e7c6      	b.n	800a920 <__kernel_sin+0xc8>
 800a992:	bf00      	nop
 800a994:	f3af 8000 	nop.w
 800a998:	55555549 	.word	0x55555549
 800a99c:	3fc55555 	.word	0x3fc55555
 800a9a0:	3fe00000 	.word	0x3fe00000
 800a9a4:	5acfd57c 	.word	0x5acfd57c
 800a9a8:	3de5d93a 	.word	0x3de5d93a
 800a9ac:	8a2b9ceb 	.word	0x8a2b9ceb
 800a9b0:	3e5ae5e6 	.word	0x3e5ae5e6
 800a9b4:	57b1fe7d 	.word	0x57b1fe7d
 800a9b8:	3ec71de3 	.word	0x3ec71de3
 800a9bc:	19c161d5 	.word	0x19c161d5
 800a9c0:	3f2a01a0 	.word	0x3f2a01a0
 800a9c4:	1110f8a6 	.word	0x1110f8a6
 800a9c8:	3f811111 	.word	0x3f811111
 800a9cc:	00000000 	.word	0x00000000

0800a9d0 <__ieee754_pow>:
 800a9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d4:	b091      	sub	sp, #68	@ 0x44
 800a9d6:	ed8d 1b00 	vstr	d1, [sp]
 800a9da:	e9dd 1900 	ldrd	r1, r9, [sp]
 800a9de:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800a9e2:	ea5a 0001 	orrs.w	r0, sl, r1
 800a9e6:	ec57 6b10 	vmov	r6, r7, d0
 800a9ea:	d113      	bne.n	800aa14 <__ieee754_pow+0x44>
 800a9ec:	19b3      	adds	r3, r6, r6
 800a9ee:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800a9f2:	4152      	adcs	r2, r2
 800a9f4:	4298      	cmp	r0, r3
 800a9f6:	4b98      	ldr	r3, [pc, #608]	@ (800ac58 <__ieee754_pow+0x288>)
 800a9f8:	4193      	sbcs	r3, r2
 800a9fa:	f080 84ea 	bcs.w	800b3d2 <__ieee754_pow+0xa02>
 800a9fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa02:	4630      	mov	r0, r6
 800aa04:	4639      	mov	r1, r7
 800aa06:	f7f5 fc61 	bl	80002cc <__adddf3>
 800aa0a:	ec41 0b10 	vmov	d0, r0, r1
 800aa0e:	b011      	add	sp, #68	@ 0x44
 800aa10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa14:	4a91      	ldr	r2, [pc, #580]	@ (800ac5c <__ieee754_pow+0x28c>)
 800aa16:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800aa1a:	4590      	cmp	r8, r2
 800aa1c:	463d      	mov	r5, r7
 800aa1e:	4633      	mov	r3, r6
 800aa20:	d806      	bhi.n	800aa30 <__ieee754_pow+0x60>
 800aa22:	d101      	bne.n	800aa28 <__ieee754_pow+0x58>
 800aa24:	2e00      	cmp	r6, #0
 800aa26:	d1ea      	bne.n	800a9fe <__ieee754_pow+0x2e>
 800aa28:	4592      	cmp	sl, r2
 800aa2a:	d801      	bhi.n	800aa30 <__ieee754_pow+0x60>
 800aa2c:	d10e      	bne.n	800aa4c <__ieee754_pow+0x7c>
 800aa2e:	b169      	cbz	r1, 800aa4c <__ieee754_pow+0x7c>
 800aa30:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800aa34:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800aa38:	431d      	orrs	r5, r3
 800aa3a:	d1e0      	bne.n	800a9fe <__ieee754_pow+0x2e>
 800aa3c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800aa40:	18db      	adds	r3, r3, r3
 800aa42:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800aa46:	4152      	adcs	r2, r2
 800aa48:	429d      	cmp	r5, r3
 800aa4a:	e7d4      	b.n	800a9f6 <__ieee754_pow+0x26>
 800aa4c:	2d00      	cmp	r5, #0
 800aa4e:	46c3      	mov	fp, r8
 800aa50:	da3a      	bge.n	800aac8 <__ieee754_pow+0xf8>
 800aa52:	4a83      	ldr	r2, [pc, #524]	@ (800ac60 <__ieee754_pow+0x290>)
 800aa54:	4592      	cmp	sl, r2
 800aa56:	d84d      	bhi.n	800aaf4 <__ieee754_pow+0x124>
 800aa58:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800aa5c:	4592      	cmp	sl, r2
 800aa5e:	f240 84c7 	bls.w	800b3f0 <__ieee754_pow+0xa20>
 800aa62:	ea4f 522a 	mov.w	r2, sl, asr #20
 800aa66:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800aa6a:	2a14      	cmp	r2, #20
 800aa6c:	dd0f      	ble.n	800aa8e <__ieee754_pow+0xbe>
 800aa6e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800aa72:	fa21 f402 	lsr.w	r4, r1, r2
 800aa76:	fa04 f202 	lsl.w	r2, r4, r2
 800aa7a:	428a      	cmp	r2, r1
 800aa7c:	f040 84b8 	bne.w	800b3f0 <__ieee754_pow+0xa20>
 800aa80:	f004 0401 	and.w	r4, r4, #1
 800aa84:	f1c4 0402 	rsb	r4, r4, #2
 800aa88:	2900      	cmp	r1, #0
 800aa8a:	d158      	bne.n	800ab3e <__ieee754_pow+0x16e>
 800aa8c:	e00e      	b.n	800aaac <__ieee754_pow+0xdc>
 800aa8e:	2900      	cmp	r1, #0
 800aa90:	d154      	bne.n	800ab3c <__ieee754_pow+0x16c>
 800aa92:	f1c2 0214 	rsb	r2, r2, #20
 800aa96:	fa4a f402 	asr.w	r4, sl, r2
 800aa9a:	fa04 f202 	lsl.w	r2, r4, r2
 800aa9e:	4552      	cmp	r2, sl
 800aaa0:	f040 84a3 	bne.w	800b3ea <__ieee754_pow+0xa1a>
 800aaa4:	f004 0401 	and.w	r4, r4, #1
 800aaa8:	f1c4 0402 	rsb	r4, r4, #2
 800aaac:	4a6d      	ldr	r2, [pc, #436]	@ (800ac64 <__ieee754_pow+0x294>)
 800aaae:	4592      	cmp	sl, r2
 800aab0:	d12e      	bne.n	800ab10 <__ieee754_pow+0x140>
 800aab2:	f1b9 0f00 	cmp.w	r9, #0
 800aab6:	f280 8494 	bge.w	800b3e2 <__ieee754_pow+0xa12>
 800aaba:	496a      	ldr	r1, [pc, #424]	@ (800ac64 <__ieee754_pow+0x294>)
 800aabc:	4632      	mov	r2, r6
 800aabe:	463b      	mov	r3, r7
 800aac0:	2000      	movs	r0, #0
 800aac2:	f7f5 fee3 	bl	800088c <__aeabi_ddiv>
 800aac6:	e7a0      	b.n	800aa0a <__ieee754_pow+0x3a>
 800aac8:	2400      	movs	r4, #0
 800aaca:	bbc1      	cbnz	r1, 800ab3e <__ieee754_pow+0x16e>
 800aacc:	4a63      	ldr	r2, [pc, #396]	@ (800ac5c <__ieee754_pow+0x28c>)
 800aace:	4592      	cmp	sl, r2
 800aad0:	d1ec      	bne.n	800aaac <__ieee754_pow+0xdc>
 800aad2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800aad6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800aada:	431a      	orrs	r2, r3
 800aadc:	f000 8479 	beq.w	800b3d2 <__ieee754_pow+0xa02>
 800aae0:	4b61      	ldr	r3, [pc, #388]	@ (800ac68 <__ieee754_pow+0x298>)
 800aae2:	4598      	cmp	r8, r3
 800aae4:	d908      	bls.n	800aaf8 <__ieee754_pow+0x128>
 800aae6:	f1b9 0f00 	cmp.w	r9, #0
 800aaea:	f2c0 8476 	blt.w	800b3da <__ieee754_pow+0xa0a>
 800aaee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aaf2:	e78a      	b.n	800aa0a <__ieee754_pow+0x3a>
 800aaf4:	2402      	movs	r4, #2
 800aaf6:	e7e8      	b.n	800aaca <__ieee754_pow+0xfa>
 800aaf8:	f1b9 0f00 	cmp.w	r9, #0
 800aafc:	f04f 0000 	mov.w	r0, #0
 800ab00:	f04f 0100 	mov.w	r1, #0
 800ab04:	da81      	bge.n	800aa0a <__ieee754_pow+0x3a>
 800ab06:	e9dd 0300 	ldrd	r0, r3, [sp]
 800ab0a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800ab0e:	e77c      	b.n	800aa0a <__ieee754_pow+0x3a>
 800ab10:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800ab14:	d106      	bne.n	800ab24 <__ieee754_pow+0x154>
 800ab16:	4632      	mov	r2, r6
 800ab18:	463b      	mov	r3, r7
 800ab1a:	4630      	mov	r0, r6
 800ab1c:	4639      	mov	r1, r7
 800ab1e:	f7f5 fd8b 	bl	8000638 <__aeabi_dmul>
 800ab22:	e772      	b.n	800aa0a <__ieee754_pow+0x3a>
 800ab24:	4a51      	ldr	r2, [pc, #324]	@ (800ac6c <__ieee754_pow+0x29c>)
 800ab26:	4591      	cmp	r9, r2
 800ab28:	d109      	bne.n	800ab3e <__ieee754_pow+0x16e>
 800ab2a:	2d00      	cmp	r5, #0
 800ab2c:	db07      	blt.n	800ab3e <__ieee754_pow+0x16e>
 800ab2e:	ec47 6b10 	vmov	d0, r6, r7
 800ab32:	b011      	add	sp, #68	@ 0x44
 800ab34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab38:	f7ff bcea 	b.w	800a510 <__ieee754_sqrt>
 800ab3c:	2400      	movs	r4, #0
 800ab3e:	ec47 6b10 	vmov	d0, r6, r7
 800ab42:	9302      	str	r3, [sp, #8]
 800ab44:	f7ff fc7c 	bl	800a440 <fabs>
 800ab48:	9b02      	ldr	r3, [sp, #8]
 800ab4a:	ec51 0b10 	vmov	r0, r1, d0
 800ab4e:	bb53      	cbnz	r3, 800aba6 <__ieee754_pow+0x1d6>
 800ab50:	4b44      	ldr	r3, [pc, #272]	@ (800ac64 <__ieee754_pow+0x294>)
 800ab52:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d002      	beq.n	800ab60 <__ieee754_pow+0x190>
 800ab5a:	f1b8 0f00 	cmp.w	r8, #0
 800ab5e:	d122      	bne.n	800aba6 <__ieee754_pow+0x1d6>
 800ab60:	f1b9 0f00 	cmp.w	r9, #0
 800ab64:	da05      	bge.n	800ab72 <__ieee754_pow+0x1a2>
 800ab66:	4602      	mov	r2, r0
 800ab68:	460b      	mov	r3, r1
 800ab6a:	2000      	movs	r0, #0
 800ab6c:	493d      	ldr	r1, [pc, #244]	@ (800ac64 <__ieee754_pow+0x294>)
 800ab6e:	f7f5 fe8d 	bl	800088c <__aeabi_ddiv>
 800ab72:	2d00      	cmp	r5, #0
 800ab74:	f6bf af49 	bge.w	800aa0a <__ieee754_pow+0x3a>
 800ab78:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800ab7c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800ab80:	ea58 0804 	orrs.w	r8, r8, r4
 800ab84:	d108      	bne.n	800ab98 <__ieee754_pow+0x1c8>
 800ab86:	4602      	mov	r2, r0
 800ab88:	460b      	mov	r3, r1
 800ab8a:	4610      	mov	r0, r2
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	f7f5 fb9b 	bl	80002c8 <__aeabi_dsub>
 800ab92:	4602      	mov	r2, r0
 800ab94:	460b      	mov	r3, r1
 800ab96:	e794      	b.n	800aac2 <__ieee754_pow+0xf2>
 800ab98:	2c01      	cmp	r4, #1
 800ab9a:	f47f af36 	bne.w	800aa0a <__ieee754_pow+0x3a>
 800ab9e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aba2:	4619      	mov	r1, r3
 800aba4:	e731      	b.n	800aa0a <__ieee754_pow+0x3a>
 800aba6:	0feb      	lsrs	r3, r5, #31
 800aba8:	3b01      	subs	r3, #1
 800abaa:	ea53 0204 	orrs.w	r2, r3, r4
 800abae:	d102      	bne.n	800abb6 <__ieee754_pow+0x1e6>
 800abb0:	4632      	mov	r2, r6
 800abb2:	463b      	mov	r3, r7
 800abb4:	e7e9      	b.n	800ab8a <__ieee754_pow+0x1ba>
 800abb6:	3c01      	subs	r4, #1
 800abb8:	431c      	orrs	r4, r3
 800abba:	d016      	beq.n	800abea <__ieee754_pow+0x21a>
 800abbc:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800ac48 <__ieee754_pow+0x278>
 800abc0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800abc4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800abc8:	f240 8112 	bls.w	800adf0 <__ieee754_pow+0x420>
 800abcc:	4b28      	ldr	r3, [pc, #160]	@ (800ac70 <__ieee754_pow+0x2a0>)
 800abce:	459a      	cmp	sl, r3
 800abd0:	4b25      	ldr	r3, [pc, #148]	@ (800ac68 <__ieee754_pow+0x298>)
 800abd2:	d916      	bls.n	800ac02 <__ieee754_pow+0x232>
 800abd4:	4598      	cmp	r8, r3
 800abd6:	d80b      	bhi.n	800abf0 <__ieee754_pow+0x220>
 800abd8:	f1b9 0f00 	cmp.w	r9, #0
 800abdc:	da0b      	bge.n	800abf6 <__ieee754_pow+0x226>
 800abde:	2000      	movs	r0, #0
 800abe0:	b011      	add	sp, #68	@ 0x44
 800abe2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abe6:	f000 bee7 	b.w	800b9b8 <__math_oflow>
 800abea:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800ac50 <__ieee754_pow+0x280>
 800abee:	e7e7      	b.n	800abc0 <__ieee754_pow+0x1f0>
 800abf0:	f1b9 0f00 	cmp.w	r9, #0
 800abf4:	dcf3      	bgt.n	800abde <__ieee754_pow+0x20e>
 800abf6:	2000      	movs	r0, #0
 800abf8:	b011      	add	sp, #68	@ 0x44
 800abfa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abfe:	f000 bed3 	b.w	800b9a8 <__math_uflow>
 800ac02:	4598      	cmp	r8, r3
 800ac04:	d20c      	bcs.n	800ac20 <__ieee754_pow+0x250>
 800ac06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	f7f5 ff85 	bl	8000b1c <__aeabi_dcmplt>
 800ac12:	3800      	subs	r0, #0
 800ac14:	bf18      	it	ne
 800ac16:	2001      	movne	r0, #1
 800ac18:	f1b9 0f00 	cmp.w	r9, #0
 800ac1c:	daec      	bge.n	800abf8 <__ieee754_pow+0x228>
 800ac1e:	e7df      	b.n	800abe0 <__ieee754_pow+0x210>
 800ac20:	4b10      	ldr	r3, [pc, #64]	@ (800ac64 <__ieee754_pow+0x294>)
 800ac22:	4598      	cmp	r8, r3
 800ac24:	f04f 0200 	mov.w	r2, #0
 800ac28:	d924      	bls.n	800ac74 <__ieee754_pow+0x2a4>
 800ac2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac2e:	2300      	movs	r3, #0
 800ac30:	f7f5 ff74 	bl	8000b1c <__aeabi_dcmplt>
 800ac34:	3800      	subs	r0, #0
 800ac36:	bf18      	it	ne
 800ac38:	2001      	movne	r0, #1
 800ac3a:	f1b9 0f00 	cmp.w	r9, #0
 800ac3e:	dccf      	bgt.n	800abe0 <__ieee754_pow+0x210>
 800ac40:	e7da      	b.n	800abf8 <__ieee754_pow+0x228>
 800ac42:	bf00      	nop
 800ac44:	f3af 8000 	nop.w
 800ac48:	00000000 	.word	0x00000000
 800ac4c:	3ff00000 	.word	0x3ff00000
 800ac50:	00000000 	.word	0x00000000
 800ac54:	bff00000 	.word	0xbff00000
 800ac58:	fff00000 	.word	0xfff00000
 800ac5c:	7ff00000 	.word	0x7ff00000
 800ac60:	433fffff 	.word	0x433fffff
 800ac64:	3ff00000 	.word	0x3ff00000
 800ac68:	3fefffff 	.word	0x3fefffff
 800ac6c:	3fe00000 	.word	0x3fe00000
 800ac70:	43f00000 	.word	0x43f00000
 800ac74:	4b5a      	ldr	r3, [pc, #360]	@ (800ade0 <__ieee754_pow+0x410>)
 800ac76:	f7f5 fb27 	bl	80002c8 <__aeabi_dsub>
 800ac7a:	a351      	add	r3, pc, #324	@ (adr r3, 800adc0 <__ieee754_pow+0x3f0>)
 800ac7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac80:	4604      	mov	r4, r0
 800ac82:	460d      	mov	r5, r1
 800ac84:	f7f5 fcd8 	bl	8000638 <__aeabi_dmul>
 800ac88:	a34f      	add	r3, pc, #316	@ (adr r3, 800adc8 <__ieee754_pow+0x3f8>)
 800ac8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8e:	4606      	mov	r6, r0
 800ac90:	460f      	mov	r7, r1
 800ac92:	4620      	mov	r0, r4
 800ac94:	4629      	mov	r1, r5
 800ac96:	f7f5 fccf 	bl	8000638 <__aeabi_dmul>
 800ac9a:	4b52      	ldr	r3, [pc, #328]	@ (800ade4 <__ieee754_pow+0x414>)
 800ac9c:	4682      	mov	sl, r0
 800ac9e:	468b      	mov	fp, r1
 800aca0:	2200      	movs	r2, #0
 800aca2:	4620      	mov	r0, r4
 800aca4:	4629      	mov	r1, r5
 800aca6:	f7f5 fcc7 	bl	8000638 <__aeabi_dmul>
 800acaa:	4602      	mov	r2, r0
 800acac:	460b      	mov	r3, r1
 800acae:	a148      	add	r1, pc, #288	@ (adr r1, 800add0 <__ieee754_pow+0x400>)
 800acb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acb4:	f7f5 fb08 	bl	80002c8 <__aeabi_dsub>
 800acb8:	4622      	mov	r2, r4
 800acba:	462b      	mov	r3, r5
 800acbc:	f7f5 fcbc 	bl	8000638 <__aeabi_dmul>
 800acc0:	4602      	mov	r2, r0
 800acc2:	460b      	mov	r3, r1
 800acc4:	2000      	movs	r0, #0
 800acc6:	4948      	ldr	r1, [pc, #288]	@ (800ade8 <__ieee754_pow+0x418>)
 800acc8:	f7f5 fafe 	bl	80002c8 <__aeabi_dsub>
 800accc:	4622      	mov	r2, r4
 800acce:	4680      	mov	r8, r0
 800acd0:	4689      	mov	r9, r1
 800acd2:	462b      	mov	r3, r5
 800acd4:	4620      	mov	r0, r4
 800acd6:	4629      	mov	r1, r5
 800acd8:	f7f5 fcae 	bl	8000638 <__aeabi_dmul>
 800acdc:	4602      	mov	r2, r0
 800acde:	460b      	mov	r3, r1
 800ace0:	4640      	mov	r0, r8
 800ace2:	4649      	mov	r1, r9
 800ace4:	f7f5 fca8 	bl	8000638 <__aeabi_dmul>
 800ace8:	a33b      	add	r3, pc, #236	@ (adr r3, 800add8 <__ieee754_pow+0x408>)
 800acea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acee:	f7f5 fca3 	bl	8000638 <__aeabi_dmul>
 800acf2:	4602      	mov	r2, r0
 800acf4:	460b      	mov	r3, r1
 800acf6:	4650      	mov	r0, sl
 800acf8:	4659      	mov	r1, fp
 800acfa:	f7f5 fae5 	bl	80002c8 <__aeabi_dsub>
 800acfe:	4602      	mov	r2, r0
 800ad00:	460b      	mov	r3, r1
 800ad02:	4680      	mov	r8, r0
 800ad04:	4689      	mov	r9, r1
 800ad06:	4630      	mov	r0, r6
 800ad08:	4639      	mov	r1, r7
 800ad0a:	f7f5 fadf 	bl	80002cc <__adddf3>
 800ad0e:	2400      	movs	r4, #0
 800ad10:	4632      	mov	r2, r6
 800ad12:	463b      	mov	r3, r7
 800ad14:	4620      	mov	r0, r4
 800ad16:	460d      	mov	r5, r1
 800ad18:	f7f5 fad6 	bl	80002c8 <__aeabi_dsub>
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	460b      	mov	r3, r1
 800ad20:	4640      	mov	r0, r8
 800ad22:	4649      	mov	r1, r9
 800ad24:	f7f5 fad0 	bl	80002c8 <__aeabi_dsub>
 800ad28:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad2c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ad30:	2300      	movs	r3, #0
 800ad32:	9304      	str	r3, [sp, #16]
 800ad34:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800ad38:	4606      	mov	r6, r0
 800ad3a:	460f      	mov	r7, r1
 800ad3c:	4652      	mov	r2, sl
 800ad3e:	465b      	mov	r3, fp
 800ad40:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad44:	f7f5 fac0 	bl	80002c8 <__aeabi_dsub>
 800ad48:	4622      	mov	r2, r4
 800ad4a:	462b      	mov	r3, r5
 800ad4c:	f7f5 fc74 	bl	8000638 <__aeabi_dmul>
 800ad50:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad54:	4680      	mov	r8, r0
 800ad56:	4689      	mov	r9, r1
 800ad58:	4630      	mov	r0, r6
 800ad5a:	4639      	mov	r1, r7
 800ad5c:	f7f5 fc6c 	bl	8000638 <__aeabi_dmul>
 800ad60:	4602      	mov	r2, r0
 800ad62:	460b      	mov	r3, r1
 800ad64:	4640      	mov	r0, r8
 800ad66:	4649      	mov	r1, r9
 800ad68:	f7f5 fab0 	bl	80002cc <__adddf3>
 800ad6c:	4652      	mov	r2, sl
 800ad6e:	465b      	mov	r3, fp
 800ad70:	4606      	mov	r6, r0
 800ad72:	460f      	mov	r7, r1
 800ad74:	4620      	mov	r0, r4
 800ad76:	4629      	mov	r1, r5
 800ad78:	f7f5 fc5e 	bl	8000638 <__aeabi_dmul>
 800ad7c:	460b      	mov	r3, r1
 800ad7e:	4602      	mov	r2, r0
 800ad80:	4680      	mov	r8, r0
 800ad82:	4689      	mov	r9, r1
 800ad84:	4630      	mov	r0, r6
 800ad86:	4639      	mov	r1, r7
 800ad88:	f7f5 faa0 	bl	80002cc <__adddf3>
 800ad8c:	4b17      	ldr	r3, [pc, #92]	@ (800adec <__ieee754_pow+0x41c>)
 800ad8e:	4299      	cmp	r1, r3
 800ad90:	4604      	mov	r4, r0
 800ad92:	460d      	mov	r5, r1
 800ad94:	468a      	mov	sl, r1
 800ad96:	468b      	mov	fp, r1
 800ad98:	f340 82ef 	ble.w	800b37a <__ieee754_pow+0x9aa>
 800ad9c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800ada0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800ada4:	4303      	orrs	r3, r0
 800ada6:	f000 81e8 	beq.w	800b17a <__ieee754_pow+0x7aa>
 800adaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adae:	2200      	movs	r2, #0
 800adb0:	2300      	movs	r3, #0
 800adb2:	f7f5 feb3 	bl	8000b1c <__aeabi_dcmplt>
 800adb6:	3800      	subs	r0, #0
 800adb8:	bf18      	it	ne
 800adba:	2001      	movne	r0, #1
 800adbc:	e710      	b.n	800abe0 <__ieee754_pow+0x210>
 800adbe:	bf00      	nop
 800adc0:	60000000 	.word	0x60000000
 800adc4:	3ff71547 	.word	0x3ff71547
 800adc8:	f85ddf44 	.word	0xf85ddf44
 800adcc:	3e54ae0b 	.word	0x3e54ae0b
 800add0:	55555555 	.word	0x55555555
 800add4:	3fd55555 	.word	0x3fd55555
 800add8:	652b82fe 	.word	0x652b82fe
 800addc:	3ff71547 	.word	0x3ff71547
 800ade0:	3ff00000 	.word	0x3ff00000
 800ade4:	3fd00000 	.word	0x3fd00000
 800ade8:	3fe00000 	.word	0x3fe00000
 800adec:	408fffff 	.word	0x408fffff
 800adf0:	4bd5      	ldr	r3, [pc, #852]	@ (800b148 <__ieee754_pow+0x778>)
 800adf2:	402b      	ands	r3, r5
 800adf4:	2200      	movs	r2, #0
 800adf6:	b92b      	cbnz	r3, 800ae04 <__ieee754_pow+0x434>
 800adf8:	4bd4      	ldr	r3, [pc, #848]	@ (800b14c <__ieee754_pow+0x77c>)
 800adfa:	f7f5 fc1d 	bl	8000638 <__aeabi_dmul>
 800adfe:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800ae02:	468b      	mov	fp, r1
 800ae04:	ea4f 532b 	mov.w	r3, fp, asr #20
 800ae08:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800ae0c:	4413      	add	r3, r2
 800ae0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae10:	4bcf      	ldr	r3, [pc, #828]	@ (800b150 <__ieee754_pow+0x780>)
 800ae12:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800ae16:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800ae1a:	459b      	cmp	fp, r3
 800ae1c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ae20:	dd08      	ble.n	800ae34 <__ieee754_pow+0x464>
 800ae22:	4bcc      	ldr	r3, [pc, #816]	@ (800b154 <__ieee754_pow+0x784>)
 800ae24:	459b      	cmp	fp, r3
 800ae26:	f340 81a5 	ble.w	800b174 <__ieee754_pow+0x7a4>
 800ae2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae30:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800ae34:	f04f 0a00 	mov.w	sl, #0
 800ae38:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800ae3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae3e:	4bc6      	ldr	r3, [pc, #792]	@ (800b158 <__ieee754_pow+0x788>)
 800ae40:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ae44:	ed93 7b00 	vldr	d7, [r3]
 800ae48:	4629      	mov	r1, r5
 800ae4a:	ec53 2b17 	vmov	r2, r3, d7
 800ae4e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ae52:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ae56:	f7f5 fa37 	bl	80002c8 <__aeabi_dsub>
 800ae5a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ae5e:	4606      	mov	r6, r0
 800ae60:	460f      	mov	r7, r1
 800ae62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae66:	f7f5 fa31 	bl	80002cc <__adddf3>
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	460b      	mov	r3, r1
 800ae6e:	2000      	movs	r0, #0
 800ae70:	49ba      	ldr	r1, [pc, #744]	@ (800b15c <__ieee754_pow+0x78c>)
 800ae72:	f7f5 fd0b 	bl	800088c <__aeabi_ddiv>
 800ae76:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	4630      	mov	r0, r6
 800ae80:	4639      	mov	r1, r7
 800ae82:	f7f5 fbd9 	bl	8000638 <__aeabi_dmul>
 800ae86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae8a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800ae8e:	106d      	asrs	r5, r5, #1
 800ae90:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800ae94:	f04f 0b00 	mov.w	fp, #0
 800ae98:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800ae9c:	4661      	mov	r1, ip
 800ae9e:	2200      	movs	r2, #0
 800aea0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800aea4:	4658      	mov	r0, fp
 800aea6:	46e1      	mov	r9, ip
 800aea8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800aeac:	4614      	mov	r4, r2
 800aeae:	461d      	mov	r5, r3
 800aeb0:	f7f5 fbc2 	bl	8000638 <__aeabi_dmul>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	4630      	mov	r0, r6
 800aeba:	4639      	mov	r1, r7
 800aebc:	f7f5 fa04 	bl	80002c8 <__aeabi_dsub>
 800aec0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aec4:	4606      	mov	r6, r0
 800aec6:	460f      	mov	r7, r1
 800aec8:	4620      	mov	r0, r4
 800aeca:	4629      	mov	r1, r5
 800aecc:	f7f5 f9fc 	bl	80002c8 <__aeabi_dsub>
 800aed0:	4602      	mov	r2, r0
 800aed2:	460b      	mov	r3, r1
 800aed4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aed8:	f7f5 f9f6 	bl	80002c8 <__aeabi_dsub>
 800aedc:	465a      	mov	r2, fp
 800aede:	464b      	mov	r3, r9
 800aee0:	f7f5 fbaa 	bl	8000638 <__aeabi_dmul>
 800aee4:	4602      	mov	r2, r0
 800aee6:	460b      	mov	r3, r1
 800aee8:	4630      	mov	r0, r6
 800aeea:	4639      	mov	r1, r7
 800aeec:	f7f5 f9ec 	bl	80002c8 <__aeabi_dsub>
 800aef0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800aef4:	f7f5 fba0 	bl	8000638 <__aeabi_dmul>
 800aef8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aefc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800af00:	4610      	mov	r0, r2
 800af02:	4619      	mov	r1, r3
 800af04:	f7f5 fb98 	bl	8000638 <__aeabi_dmul>
 800af08:	a37d      	add	r3, pc, #500	@ (adr r3, 800b100 <__ieee754_pow+0x730>)
 800af0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0e:	4604      	mov	r4, r0
 800af10:	460d      	mov	r5, r1
 800af12:	f7f5 fb91 	bl	8000638 <__aeabi_dmul>
 800af16:	a37c      	add	r3, pc, #496	@ (adr r3, 800b108 <__ieee754_pow+0x738>)
 800af18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af1c:	f7f5 f9d6 	bl	80002cc <__adddf3>
 800af20:	4622      	mov	r2, r4
 800af22:	462b      	mov	r3, r5
 800af24:	f7f5 fb88 	bl	8000638 <__aeabi_dmul>
 800af28:	a379      	add	r3, pc, #484	@ (adr r3, 800b110 <__ieee754_pow+0x740>)
 800af2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af2e:	f7f5 f9cd 	bl	80002cc <__adddf3>
 800af32:	4622      	mov	r2, r4
 800af34:	462b      	mov	r3, r5
 800af36:	f7f5 fb7f 	bl	8000638 <__aeabi_dmul>
 800af3a:	a377      	add	r3, pc, #476	@ (adr r3, 800b118 <__ieee754_pow+0x748>)
 800af3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af40:	f7f5 f9c4 	bl	80002cc <__adddf3>
 800af44:	4622      	mov	r2, r4
 800af46:	462b      	mov	r3, r5
 800af48:	f7f5 fb76 	bl	8000638 <__aeabi_dmul>
 800af4c:	a374      	add	r3, pc, #464	@ (adr r3, 800b120 <__ieee754_pow+0x750>)
 800af4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af52:	f7f5 f9bb 	bl	80002cc <__adddf3>
 800af56:	4622      	mov	r2, r4
 800af58:	462b      	mov	r3, r5
 800af5a:	f7f5 fb6d 	bl	8000638 <__aeabi_dmul>
 800af5e:	a372      	add	r3, pc, #456	@ (adr r3, 800b128 <__ieee754_pow+0x758>)
 800af60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af64:	f7f5 f9b2 	bl	80002cc <__adddf3>
 800af68:	4622      	mov	r2, r4
 800af6a:	4606      	mov	r6, r0
 800af6c:	460f      	mov	r7, r1
 800af6e:	462b      	mov	r3, r5
 800af70:	4620      	mov	r0, r4
 800af72:	4629      	mov	r1, r5
 800af74:	f7f5 fb60 	bl	8000638 <__aeabi_dmul>
 800af78:	4602      	mov	r2, r0
 800af7a:	460b      	mov	r3, r1
 800af7c:	4630      	mov	r0, r6
 800af7e:	4639      	mov	r1, r7
 800af80:	f7f5 fb5a 	bl	8000638 <__aeabi_dmul>
 800af84:	465a      	mov	r2, fp
 800af86:	4604      	mov	r4, r0
 800af88:	460d      	mov	r5, r1
 800af8a:	464b      	mov	r3, r9
 800af8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af90:	f7f5 f99c 	bl	80002cc <__adddf3>
 800af94:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800af98:	f7f5 fb4e 	bl	8000638 <__aeabi_dmul>
 800af9c:	4622      	mov	r2, r4
 800af9e:	462b      	mov	r3, r5
 800afa0:	f7f5 f994 	bl	80002cc <__adddf3>
 800afa4:	465a      	mov	r2, fp
 800afa6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800afaa:	464b      	mov	r3, r9
 800afac:	4658      	mov	r0, fp
 800afae:	4649      	mov	r1, r9
 800afb0:	f7f5 fb42 	bl	8000638 <__aeabi_dmul>
 800afb4:	4b6a      	ldr	r3, [pc, #424]	@ (800b160 <__ieee754_pow+0x790>)
 800afb6:	2200      	movs	r2, #0
 800afb8:	4606      	mov	r6, r0
 800afba:	460f      	mov	r7, r1
 800afbc:	f7f5 f986 	bl	80002cc <__adddf3>
 800afc0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800afc4:	f7f5 f982 	bl	80002cc <__adddf3>
 800afc8:	46d8      	mov	r8, fp
 800afca:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800afce:	460d      	mov	r5, r1
 800afd0:	465a      	mov	r2, fp
 800afd2:	460b      	mov	r3, r1
 800afd4:	4640      	mov	r0, r8
 800afd6:	4649      	mov	r1, r9
 800afd8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800afdc:	f7f5 fb2c 	bl	8000638 <__aeabi_dmul>
 800afe0:	465c      	mov	r4, fp
 800afe2:	4680      	mov	r8, r0
 800afe4:	4689      	mov	r9, r1
 800afe6:	4b5e      	ldr	r3, [pc, #376]	@ (800b160 <__ieee754_pow+0x790>)
 800afe8:	2200      	movs	r2, #0
 800afea:	4620      	mov	r0, r4
 800afec:	4629      	mov	r1, r5
 800afee:	f7f5 f96b 	bl	80002c8 <__aeabi_dsub>
 800aff2:	4632      	mov	r2, r6
 800aff4:	463b      	mov	r3, r7
 800aff6:	f7f5 f967 	bl	80002c8 <__aeabi_dsub>
 800affa:	4602      	mov	r2, r0
 800affc:	460b      	mov	r3, r1
 800affe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b002:	f7f5 f961 	bl	80002c8 <__aeabi_dsub>
 800b006:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b00a:	f7f5 fb15 	bl	8000638 <__aeabi_dmul>
 800b00e:	4622      	mov	r2, r4
 800b010:	4606      	mov	r6, r0
 800b012:	460f      	mov	r7, r1
 800b014:	462b      	mov	r3, r5
 800b016:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b01a:	f7f5 fb0d 	bl	8000638 <__aeabi_dmul>
 800b01e:	4602      	mov	r2, r0
 800b020:	460b      	mov	r3, r1
 800b022:	4630      	mov	r0, r6
 800b024:	4639      	mov	r1, r7
 800b026:	f7f5 f951 	bl	80002cc <__adddf3>
 800b02a:	4606      	mov	r6, r0
 800b02c:	460f      	mov	r7, r1
 800b02e:	4602      	mov	r2, r0
 800b030:	460b      	mov	r3, r1
 800b032:	4640      	mov	r0, r8
 800b034:	4649      	mov	r1, r9
 800b036:	f7f5 f949 	bl	80002cc <__adddf3>
 800b03a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800b03e:	a33c      	add	r3, pc, #240	@ (adr r3, 800b130 <__ieee754_pow+0x760>)
 800b040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b044:	4658      	mov	r0, fp
 800b046:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800b04a:	460d      	mov	r5, r1
 800b04c:	f7f5 faf4 	bl	8000638 <__aeabi_dmul>
 800b050:	465c      	mov	r4, fp
 800b052:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b056:	4642      	mov	r2, r8
 800b058:	464b      	mov	r3, r9
 800b05a:	4620      	mov	r0, r4
 800b05c:	4629      	mov	r1, r5
 800b05e:	f7f5 f933 	bl	80002c8 <__aeabi_dsub>
 800b062:	4602      	mov	r2, r0
 800b064:	460b      	mov	r3, r1
 800b066:	4630      	mov	r0, r6
 800b068:	4639      	mov	r1, r7
 800b06a:	f7f5 f92d 	bl	80002c8 <__aeabi_dsub>
 800b06e:	a332      	add	r3, pc, #200	@ (adr r3, 800b138 <__ieee754_pow+0x768>)
 800b070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b074:	f7f5 fae0 	bl	8000638 <__aeabi_dmul>
 800b078:	a331      	add	r3, pc, #196	@ (adr r3, 800b140 <__ieee754_pow+0x770>)
 800b07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07e:	4606      	mov	r6, r0
 800b080:	460f      	mov	r7, r1
 800b082:	4620      	mov	r0, r4
 800b084:	4629      	mov	r1, r5
 800b086:	f7f5 fad7 	bl	8000638 <__aeabi_dmul>
 800b08a:	4602      	mov	r2, r0
 800b08c:	460b      	mov	r3, r1
 800b08e:	4630      	mov	r0, r6
 800b090:	4639      	mov	r1, r7
 800b092:	f7f5 f91b 	bl	80002cc <__adddf3>
 800b096:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b098:	4b32      	ldr	r3, [pc, #200]	@ (800b164 <__ieee754_pow+0x794>)
 800b09a:	4413      	add	r3, r2
 800b09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a0:	f7f5 f914 	bl	80002cc <__adddf3>
 800b0a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b0a8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b0aa:	f7f5 fa5b 	bl	8000564 <__aeabi_i2d>
 800b0ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b0b0:	4b2d      	ldr	r3, [pc, #180]	@ (800b168 <__ieee754_pow+0x798>)
 800b0b2:	4413      	add	r3, r2
 800b0b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b0b8:	4606      	mov	r6, r0
 800b0ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b0be:	460f      	mov	r7, r1
 800b0c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0c4:	f7f5 f902 	bl	80002cc <__adddf3>
 800b0c8:	4642      	mov	r2, r8
 800b0ca:	464b      	mov	r3, r9
 800b0cc:	f7f5 f8fe 	bl	80002cc <__adddf3>
 800b0d0:	4632      	mov	r2, r6
 800b0d2:	463b      	mov	r3, r7
 800b0d4:	f7f5 f8fa 	bl	80002cc <__adddf3>
 800b0d8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800b0dc:	4632      	mov	r2, r6
 800b0de:	463b      	mov	r3, r7
 800b0e0:	4658      	mov	r0, fp
 800b0e2:	460d      	mov	r5, r1
 800b0e4:	f7f5 f8f0 	bl	80002c8 <__aeabi_dsub>
 800b0e8:	4642      	mov	r2, r8
 800b0ea:	464b      	mov	r3, r9
 800b0ec:	f7f5 f8ec 	bl	80002c8 <__aeabi_dsub>
 800b0f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0f4:	f7f5 f8e8 	bl	80002c8 <__aeabi_dsub>
 800b0f8:	465c      	mov	r4, fp
 800b0fa:	4602      	mov	r2, r0
 800b0fc:	e036      	b.n	800b16c <__ieee754_pow+0x79c>
 800b0fe:	bf00      	nop
 800b100:	4a454eef 	.word	0x4a454eef
 800b104:	3fca7e28 	.word	0x3fca7e28
 800b108:	93c9db65 	.word	0x93c9db65
 800b10c:	3fcd864a 	.word	0x3fcd864a
 800b110:	a91d4101 	.word	0xa91d4101
 800b114:	3fd17460 	.word	0x3fd17460
 800b118:	518f264d 	.word	0x518f264d
 800b11c:	3fd55555 	.word	0x3fd55555
 800b120:	db6fabff 	.word	0xdb6fabff
 800b124:	3fdb6db6 	.word	0x3fdb6db6
 800b128:	33333303 	.word	0x33333303
 800b12c:	3fe33333 	.word	0x3fe33333
 800b130:	e0000000 	.word	0xe0000000
 800b134:	3feec709 	.word	0x3feec709
 800b138:	dc3a03fd 	.word	0xdc3a03fd
 800b13c:	3feec709 	.word	0x3feec709
 800b140:	145b01f5 	.word	0x145b01f5
 800b144:	be3e2fe0 	.word	0xbe3e2fe0
 800b148:	7ff00000 	.word	0x7ff00000
 800b14c:	43400000 	.word	0x43400000
 800b150:	0003988e 	.word	0x0003988e
 800b154:	000bb679 	.word	0x000bb679
 800b158:	0800c7f0 	.word	0x0800c7f0
 800b15c:	3ff00000 	.word	0x3ff00000
 800b160:	40080000 	.word	0x40080000
 800b164:	0800c7d0 	.word	0x0800c7d0
 800b168:	0800c7e0 	.word	0x0800c7e0
 800b16c:	460b      	mov	r3, r1
 800b16e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b172:	e5d7      	b.n	800ad24 <__ieee754_pow+0x354>
 800b174:	f04f 0a01 	mov.w	sl, #1
 800b178:	e65e      	b.n	800ae38 <__ieee754_pow+0x468>
 800b17a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800b44c <__ieee754_pow+0xa7c>)
 800b17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b180:	4630      	mov	r0, r6
 800b182:	4639      	mov	r1, r7
 800b184:	f7f5 f8a2 	bl	80002cc <__adddf3>
 800b188:	4642      	mov	r2, r8
 800b18a:	e9cd 0100 	strd	r0, r1, [sp]
 800b18e:	464b      	mov	r3, r9
 800b190:	4620      	mov	r0, r4
 800b192:	4629      	mov	r1, r5
 800b194:	f7f5 f898 	bl	80002c8 <__aeabi_dsub>
 800b198:	4602      	mov	r2, r0
 800b19a:	460b      	mov	r3, r1
 800b19c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b1a0:	f7f5 fcda 	bl	8000b58 <__aeabi_dcmpgt>
 800b1a4:	2800      	cmp	r0, #0
 800b1a6:	f47f ae00 	bne.w	800adaa <__ieee754_pow+0x3da>
 800b1aa:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800b1ae:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b1b2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800b1b6:	fa43 fa0a 	asr.w	sl, r3, sl
 800b1ba:	44da      	add	sl, fp
 800b1bc:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b1c0:	489d      	ldr	r0, [pc, #628]	@ (800b438 <__ieee754_pow+0xa68>)
 800b1c2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800b1c6:	4108      	asrs	r0, r1
 800b1c8:	ea00 030a 	and.w	r3, r0, sl
 800b1cc:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b1d0:	f1c1 0114 	rsb	r1, r1, #20
 800b1d4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800b1d8:	fa4a fa01 	asr.w	sl, sl, r1
 800b1dc:	f1bb 0f00 	cmp.w	fp, #0
 800b1e0:	4640      	mov	r0, r8
 800b1e2:	4649      	mov	r1, r9
 800b1e4:	f04f 0200 	mov.w	r2, #0
 800b1e8:	bfb8      	it	lt
 800b1ea:	f1ca 0a00 	rsblt	sl, sl, #0
 800b1ee:	f7f5 f86b 	bl	80002c8 <__aeabi_dsub>
 800b1f2:	4680      	mov	r8, r0
 800b1f4:	4689      	mov	r9, r1
 800b1f6:	4632      	mov	r2, r6
 800b1f8:	463b      	mov	r3, r7
 800b1fa:	4640      	mov	r0, r8
 800b1fc:	4649      	mov	r1, r9
 800b1fe:	f7f5 f865 	bl	80002cc <__adddf3>
 800b202:	2400      	movs	r4, #0
 800b204:	a37c      	add	r3, pc, #496	@ (adr r3, 800b3f8 <__ieee754_pow+0xa28>)
 800b206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20a:	4620      	mov	r0, r4
 800b20c:	460d      	mov	r5, r1
 800b20e:	f7f5 fa13 	bl	8000638 <__aeabi_dmul>
 800b212:	4642      	mov	r2, r8
 800b214:	e9cd 0100 	strd	r0, r1, [sp]
 800b218:	464b      	mov	r3, r9
 800b21a:	4620      	mov	r0, r4
 800b21c:	4629      	mov	r1, r5
 800b21e:	f7f5 f853 	bl	80002c8 <__aeabi_dsub>
 800b222:	4602      	mov	r2, r0
 800b224:	460b      	mov	r3, r1
 800b226:	4630      	mov	r0, r6
 800b228:	4639      	mov	r1, r7
 800b22a:	f7f5 f84d 	bl	80002c8 <__aeabi_dsub>
 800b22e:	a374      	add	r3, pc, #464	@ (adr r3, 800b400 <__ieee754_pow+0xa30>)
 800b230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b234:	f7f5 fa00 	bl	8000638 <__aeabi_dmul>
 800b238:	a373      	add	r3, pc, #460	@ (adr r3, 800b408 <__ieee754_pow+0xa38>)
 800b23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23e:	4680      	mov	r8, r0
 800b240:	4689      	mov	r9, r1
 800b242:	4620      	mov	r0, r4
 800b244:	4629      	mov	r1, r5
 800b246:	f7f5 f9f7 	bl	8000638 <__aeabi_dmul>
 800b24a:	4602      	mov	r2, r0
 800b24c:	460b      	mov	r3, r1
 800b24e:	4640      	mov	r0, r8
 800b250:	4649      	mov	r1, r9
 800b252:	f7f5 f83b 	bl	80002cc <__adddf3>
 800b256:	4604      	mov	r4, r0
 800b258:	460d      	mov	r5, r1
 800b25a:	4602      	mov	r2, r0
 800b25c:	460b      	mov	r3, r1
 800b25e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b262:	f7f5 f833 	bl	80002cc <__adddf3>
 800b266:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b26a:	4680      	mov	r8, r0
 800b26c:	4689      	mov	r9, r1
 800b26e:	f7f5 f82b 	bl	80002c8 <__aeabi_dsub>
 800b272:	4602      	mov	r2, r0
 800b274:	460b      	mov	r3, r1
 800b276:	4620      	mov	r0, r4
 800b278:	4629      	mov	r1, r5
 800b27a:	f7f5 f825 	bl	80002c8 <__aeabi_dsub>
 800b27e:	4642      	mov	r2, r8
 800b280:	4606      	mov	r6, r0
 800b282:	460f      	mov	r7, r1
 800b284:	464b      	mov	r3, r9
 800b286:	4640      	mov	r0, r8
 800b288:	4649      	mov	r1, r9
 800b28a:	f7f5 f9d5 	bl	8000638 <__aeabi_dmul>
 800b28e:	a360      	add	r3, pc, #384	@ (adr r3, 800b410 <__ieee754_pow+0xa40>)
 800b290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b294:	4604      	mov	r4, r0
 800b296:	460d      	mov	r5, r1
 800b298:	f7f5 f9ce 	bl	8000638 <__aeabi_dmul>
 800b29c:	a35e      	add	r3, pc, #376	@ (adr r3, 800b418 <__ieee754_pow+0xa48>)
 800b29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a2:	f7f5 f811 	bl	80002c8 <__aeabi_dsub>
 800b2a6:	4622      	mov	r2, r4
 800b2a8:	462b      	mov	r3, r5
 800b2aa:	f7f5 f9c5 	bl	8000638 <__aeabi_dmul>
 800b2ae:	a35c      	add	r3, pc, #368	@ (adr r3, 800b420 <__ieee754_pow+0xa50>)
 800b2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b4:	f7f5 f80a 	bl	80002cc <__adddf3>
 800b2b8:	4622      	mov	r2, r4
 800b2ba:	462b      	mov	r3, r5
 800b2bc:	f7f5 f9bc 	bl	8000638 <__aeabi_dmul>
 800b2c0:	a359      	add	r3, pc, #356	@ (adr r3, 800b428 <__ieee754_pow+0xa58>)
 800b2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c6:	f7f4 ffff 	bl	80002c8 <__aeabi_dsub>
 800b2ca:	4622      	mov	r2, r4
 800b2cc:	462b      	mov	r3, r5
 800b2ce:	f7f5 f9b3 	bl	8000638 <__aeabi_dmul>
 800b2d2:	a357      	add	r3, pc, #348	@ (adr r3, 800b430 <__ieee754_pow+0xa60>)
 800b2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d8:	f7f4 fff8 	bl	80002cc <__adddf3>
 800b2dc:	4622      	mov	r2, r4
 800b2de:	462b      	mov	r3, r5
 800b2e0:	f7f5 f9aa 	bl	8000638 <__aeabi_dmul>
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	460b      	mov	r3, r1
 800b2e8:	4640      	mov	r0, r8
 800b2ea:	4649      	mov	r1, r9
 800b2ec:	f7f4 ffec 	bl	80002c8 <__aeabi_dsub>
 800b2f0:	4604      	mov	r4, r0
 800b2f2:	460d      	mov	r5, r1
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	460b      	mov	r3, r1
 800b2f8:	4640      	mov	r0, r8
 800b2fa:	4649      	mov	r1, r9
 800b2fc:	f7f5 f99c 	bl	8000638 <__aeabi_dmul>
 800b300:	2200      	movs	r2, #0
 800b302:	e9cd 0100 	strd	r0, r1, [sp]
 800b306:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b30a:	4620      	mov	r0, r4
 800b30c:	4629      	mov	r1, r5
 800b30e:	f7f4 ffdb 	bl	80002c8 <__aeabi_dsub>
 800b312:	4602      	mov	r2, r0
 800b314:	460b      	mov	r3, r1
 800b316:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b31a:	f7f5 fab7 	bl	800088c <__aeabi_ddiv>
 800b31e:	4632      	mov	r2, r6
 800b320:	4604      	mov	r4, r0
 800b322:	460d      	mov	r5, r1
 800b324:	463b      	mov	r3, r7
 800b326:	4640      	mov	r0, r8
 800b328:	4649      	mov	r1, r9
 800b32a:	f7f5 f985 	bl	8000638 <__aeabi_dmul>
 800b32e:	4632      	mov	r2, r6
 800b330:	463b      	mov	r3, r7
 800b332:	f7f4 ffcb 	bl	80002cc <__adddf3>
 800b336:	4602      	mov	r2, r0
 800b338:	460b      	mov	r3, r1
 800b33a:	4620      	mov	r0, r4
 800b33c:	4629      	mov	r1, r5
 800b33e:	f7f4 ffc3 	bl	80002c8 <__aeabi_dsub>
 800b342:	4642      	mov	r2, r8
 800b344:	464b      	mov	r3, r9
 800b346:	f7f4 ffbf 	bl	80002c8 <__aeabi_dsub>
 800b34a:	460b      	mov	r3, r1
 800b34c:	4602      	mov	r2, r0
 800b34e:	493b      	ldr	r1, [pc, #236]	@ (800b43c <__ieee754_pow+0xa6c>)
 800b350:	2000      	movs	r0, #0
 800b352:	f7f4 ffb9 	bl	80002c8 <__aeabi_dsub>
 800b356:	ec41 0b10 	vmov	d0, r0, r1
 800b35a:	ee10 3a90 	vmov	r3, s1
 800b35e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b362:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b366:	da30      	bge.n	800b3ca <__ieee754_pow+0x9fa>
 800b368:	4650      	mov	r0, sl
 800b36a:	f000 fa71 	bl	800b850 <scalbn>
 800b36e:	ec51 0b10 	vmov	r0, r1, d0
 800b372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b376:	f7ff bbd2 	b.w	800ab1e <__ieee754_pow+0x14e>
 800b37a:	4c31      	ldr	r4, [pc, #196]	@ (800b440 <__ieee754_pow+0xa70>)
 800b37c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b380:	42a3      	cmp	r3, r4
 800b382:	d91a      	bls.n	800b3ba <__ieee754_pow+0x9ea>
 800b384:	4b2f      	ldr	r3, [pc, #188]	@ (800b444 <__ieee754_pow+0xa74>)
 800b386:	440b      	add	r3, r1
 800b388:	4303      	orrs	r3, r0
 800b38a:	d009      	beq.n	800b3a0 <__ieee754_pow+0x9d0>
 800b38c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b390:	2200      	movs	r2, #0
 800b392:	2300      	movs	r3, #0
 800b394:	f7f5 fbc2 	bl	8000b1c <__aeabi_dcmplt>
 800b398:	3800      	subs	r0, #0
 800b39a:	bf18      	it	ne
 800b39c:	2001      	movne	r0, #1
 800b39e:	e42b      	b.n	800abf8 <__ieee754_pow+0x228>
 800b3a0:	4642      	mov	r2, r8
 800b3a2:	464b      	mov	r3, r9
 800b3a4:	f7f4 ff90 	bl	80002c8 <__aeabi_dsub>
 800b3a8:	4632      	mov	r2, r6
 800b3aa:	463b      	mov	r3, r7
 800b3ac:	f7f5 fbca 	bl	8000b44 <__aeabi_dcmpge>
 800b3b0:	2800      	cmp	r0, #0
 800b3b2:	d1eb      	bne.n	800b38c <__ieee754_pow+0x9bc>
 800b3b4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800b454 <__ieee754_pow+0xa84>
 800b3b8:	e6f7      	b.n	800b1aa <__ieee754_pow+0x7da>
 800b3ba:	469a      	mov	sl, r3
 800b3bc:	4b22      	ldr	r3, [pc, #136]	@ (800b448 <__ieee754_pow+0xa78>)
 800b3be:	459a      	cmp	sl, r3
 800b3c0:	f63f aef3 	bhi.w	800b1aa <__ieee754_pow+0x7da>
 800b3c4:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b3c8:	e715      	b.n	800b1f6 <__ieee754_pow+0x826>
 800b3ca:	ec51 0b10 	vmov	r0, r1, d0
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	e7cf      	b.n	800b372 <__ieee754_pow+0x9a2>
 800b3d2:	491a      	ldr	r1, [pc, #104]	@ (800b43c <__ieee754_pow+0xa6c>)
 800b3d4:	2000      	movs	r0, #0
 800b3d6:	f7ff bb18 	b.w	800aa0a <__ieee754_pow+0x3a>
 800b3da:	2000      	movs	r0, #0
 800b3dc:	2100      	movs	r1, #0
 800b3de:	f7ff bb14 	b.w	800aa0a <__ieee754_pow+0x3a>
 800b3e2:	4630      	mov	r0, r6
 800b3e4:	4639      	mov	r1, r7
 800b3e6:	f7ff bb10 	b.w	800aa0a <__ieee754_pow+0x3a>
 800b3ea:	460c      	mov	r4, r1
 800b3ec:	f7ff bb5e 	b.w	800aaac <__ieee754_pow+0xdc>
 800b3f0:	2400      	movs	r4, #0
 800b3f2:	f7ff bb49 	b.w	800aa88 <__ieee754_pow+0xb8>
 800b3f6:	bf00      	nop
 800b3f8:	00000000 	.word	0x00000000
 800b3fc:	3fe62e43 	.word	0x3fe62e43
 800b400:	fefa39ef 	.word	0xfefa39ef
 800b404:	3fe62e42 	.word	0x3fe62e42
 800b408:	0ca86c39 	.word	0x0ca86c39
 800b40c:	be205c61 	.word	0xbe205c61
 800b410:	72bea4d0 	.word	0x72bea4d0
 800b414:	3e663769 	.word	0x3e663769
 800b418:	c5d26bf1 	.word	0xc5d26bf1
 800b41c:	3ebbbd41 	.word	0x3ebbbd41
 800b420:	af25de2c 	.word	0xaf25de2c
 800b424:	3f11566a 	.word	0x3f11566a
 800b428:	16bebd93 	.word	0x16bebd93
 800b42c:	3f66c16c 	.word	0x3f66c16c
 800b430:	5555553e 	.word	0x5555553e
 800b434:	3fc55555 	.word	0x3fc55555
 800b438:	fff00000 	.word	0xfff00000
 800b43c:	3ff00000 	.word	0x3ff00000
 800b440:	4090cbff 	.word	0x4090cbff
 800b444:	3f6f3400 	.word	0x3f6f3400
 800b448:	3fe00000 	.word	0x3fe00000
 800b44c:	652b82fe 	.word	0x652b82fe
 800b450:	3c971547 	.word	0x3c971547
 800b454:	4090cc00 	.word	0x4090cc00

0800b458 <__ieee754_rem_pio2>:
 800b458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b45c:	ec57 6b10 	vmov	r6, r7, d0
 800b460:	4bc5      	ldr	r3, [pc, #788]	@ (800b778 <__ieee754_rem_pio2+0x320>)
 800b462:	b08d      	sub	sp, #52	@ 0x34
 800b464:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b468:	4598      	cmp	r8, r3
 800b46a:	4604      	mov	r4, r0
 800b46c:	9704      	str	r7, [sp, #16]
 800b46e:	d807      	bhi.n	800b480 <__ieee754_rem_pio2+0x28>
 800b470:	2200      	movs	r2, #0
 800b472:	2300      	movs	r3, #0
 800b474:	ed80 0b00 	vstr	d0, [r0]
 800b478:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b47c:	2500      	movs	r5, #0
 800b47e:	e028      	b.n	800b4d2 <__ieee754_rem_pio2+0x7a>
 800b480:	4bbe      	ldr	r3, [pc, #760]	@ (800b77c <__ieee754_rem_pio2+0x324>)
 800b482:	4598      	cmp	r8, r3
 800b484:	d878      	bhi.n	800b578 <__ieee754_rem_pio2+0x120>
 800b486:	9b04      	ldr	r3, [sp, #16]
 800b488:	4dbd      	ldr	r5, [pc, #756]	@ (800b780 <__ieee754_rem_pio2+0x328>)
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	4630      	mov	r0, r6
 800b48e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800b740 <__ieee754_rem_pio2+0x2e8>)
 800b490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b494:	4639      	mov	r1, r7
 800b496:	dd38      	ble.n	800b50a <__ieee754_rem_pio2+0xb2>
 800b498:	f7f4 ff16 	bl	80002c8 <__aeabi_dsub>
 800b49c:	45a8      	cmp	r8, r5
 800b49e:	4606      	mov	r6, r0
 800b4a0:	460f      	mov	r7, r1
 800b4a2:	d01a      	beq.n	800b4da <__ieee754_rem_pio2+0x82>
 800b4a4:	a3a8      	add	r3, pc, #672	@ (adr r3, 800b748 <__ieee754_rem_pio2+0x2f0>)
 800b4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4aa:	f7f4 ff0d 	bl	80002c8 <__aeabi_dsub>
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	460b      	mov	r3, r1
 800b4b2:	4680      	mov	r8, r0
 800b4b4:	4689      	mov	r9, r1
 800b4b6:	4630      	mov	r0, r6
 800b4b8:	4639      	mov	r1, r7
 800b4ba:	f7f4 ff05 	bl	80002c8 <__aeabi_dsub>
 800b4be:	a3a2      	add	r3, pc, #648	@ (adr r3, 800b748 <__ieee754_rem_pio2+0x2f0>)
 800b4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c4:	f7f4 ff00 	bl	80002c8 <__aeabi_dsub>
 800b4c8:	e9c4 8900 	strd	r8, r9, [r4]
 800b4cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b4d0:	2501      	movs	r5, #1
 800b4d2:	4628      	mov	r0, r5
 800b4d4:	b00d      	add	sp, #52	@ 0x34
 800b4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4da:	a39d      	add	r3, pc, #628	@ (adr r3, 800b750 <__ieee754_rem_pio2+0x2f8>)
 800b4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e0:	f7f4 fef2 	bl	80002c8 <__aeabi_dsub>
 800b4e4:	a39c      	add	r3, pc, #624	@ (adr r3, 800b758 <__ieee754_rem_pio2+0x300>)
 800b4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ea:	4606      	mov	r6, r0
 800b4ec:	460f      	mov	r7, r1
 800b4ee:	f7f4 feeb 	bl	80002c8 <__aeabi_dsub>
 800b4f2:	4602      	mov	r2, r0
 800b4f4:	460b      	mov	r3, r1
 800b4f6:	4680      	mov	r8, r0
 800b4f8:	4689      	mov	r9, r1
 800b4fa:	4630      	mov	r0, r6
 800b4fc:	4639      	mov	r1, r7
 800b4fe:	f7f4 fee3 	bl	80002c8 <__aeabi_dsub>
 800b502:	a395      	add	r3, pc, #596	@ (adr r3, 800b758 <__ieee754_rem_pio2+0x300>)
 800b504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b508:	e7dc      	b.n	800b4c4 <__ieee754_rem_pio2+0x6c>
 800b50a:	f7f4 fedf 	bl	80002cc <__adddf3>
 800b50e:	45a8      	cmp	r8, r5
 800b510:	4606      	mov	r6, r0
 800b512:	460f      	mov	r7, r1
 800b514:	d018      	beq.n	800b548 <__ieee754_rem_pio2+0xf0>
 800b516:	a38c      	add	r3, pc, #560	@ (adr r3, 800b748 <__ieee754_rem_pio2+0x2f0>)
 800b518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51c:	f7f4 fed6 	bl	80002cc <__adddf3>
 800b520:	4602      	mov	r2, r0
 800b522:	460b      	mov	r3, r1
 800b524:	4680      	mov	r8, r0
 800b526:	4689      	mov	r9, r1
 800b528:	4630      	mov	r0, r6
 800b52a:	4639      	mov	r1, r7
 800b52c:	f7f4 fecc 	bl	80002c8 <__aeabi_dsub>
 800b530:	a385      	add	r3, pc, #532	@ (adr r3, 800b748 <__ieee754_rem_pio2+0x2f0>)
 800b532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b536:	f7f4 fec9 	bl	80002cc <__adddf3>
 800b53a:	f04f 35ff 	mov.w	r5, #4294967295
 800b53e:	e9c4 8900 	strd	r8, r9, [r4]
 800b542:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b546:	e7c4      	b.n	800b4d2 <__ieee754_rem_pio2+0x7a>
 800b548:	a381      	add	r3, pc, #516	@ (adr r3, 800b750 <__ieee754_rem_pio2+0x2f8>)
 800b54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b54e:	f7f4 febd 	bl	80002cc <__adddf3>
 800b552:	a381      	add	r3, pc, #516	@ (adr r3, 800b758 <__ieee754_rem_pio2+0x300>)
 800b554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b558:	4606      	mov	r6, r0
 800b55a:	460f      	mov	r7, r1
 800b55c:	f7f4 feb6 	bl	80002cc <__adddf3>
 800b560:	4602      	mov	r2, r0
 800b562:	460b      	mov	r3, r1
 800b564:	4680      	mov	r8, r0
 800b566:	4689      	mov	r9, r1
 800b568:	4630      	mov	r0, r6
 800b56a:	4639      	mov	r1, r7
 800b56c:	f7f4 feac 	bl	80002c8 <__aeabi_dsub>
 800b570:	a379      	add	r3, pc, #484	@ (adr r3, 800b758 <__ieee754_rem_pio2+0x300>)
 800b572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b576:	e7de      	b.n	800b536 <__ieee754_rem_pio2+0xde>
 800b578:	4b82      	ldr	r3, [pc, #520]	@ (800b784 <__ieee754_rem_pio2+0x32c>)
 800b57a:	4598      	cmp	r8, r3
 800b57c:	f200 80d1 	bhi.w	800b722 <__ieee754_rem_pio2+0x2ca>
 800b580:	f7fe ff5e 	bl	800a440 <fabs>
 800b584:	ec57 6b10 	vmov	r6, r7, d0
 800b588:	a375      	add	r3, pc, #468	@ (adr r3, 800b760 <__ieee754_rem_pio2+0x308>)
 800b58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b58e:	4630      	mov	r0, r6
 800b590:	4639      	mov	r1, r7
 800b592:	f7f5 f851 	bl	8000638 <__aeabi_dmul>
 800b596:	4b7c      	ldr	r3, [pc, #496]	@ (800b788 <__ieee754_rem_pio2+0x330>)
 800b598:	2200      	movs	r2, #0
 800b59a:	f7f4 fe97 	bl	80002cc <__adddf3>
 800b59e:	f7f5 fafb 	bl	8000b98 <__aeabi_d2iz>
 800b5a2:	4605      	mov	r5, r0
 800b5a4:	f7f4 ffde 	bl	8000564 <__aeabi_i2d>
 800b5a8:	4602      	mov	r2, r0
 800b5aa:	460b      	mov	r3, r1
 800b5ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b5b0:	a363      	add	r3, pc, #396	@ (adr r3, 800b740 <__ieee754_rem_pio2+0x2e8>)
 800b5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b6:	f7f5 f83f 	bl	8000638 <__aeabi_dmul>
 800b5ba:	4602      	mov	r2, r0
 800b5bc:	460b      	mov	r3, r1
 800b5be:	4630      	mov	r0, r6
 800b5c0:	4639      	mov	r1, r7
 800b5c2:	f7f4 fe81 	bl	80002c8 <__aeabi_dsub>
 800b5c6:	a360      	add	r3, pc, #384	@ (adr r3, 800b748 <__ieee754_rem_pio2+0x2f0>)
 800b5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5cc:	4682      	mov	sl, r0
 800b5ce:	468b      	mov	fp, r1
 800b5d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5d4:	f7f5 f830 	bl	8000638 <__aeabi_dmul>
 800b5d8:	2d1f      	cmp	r5, #31
 800b5da:	4606      	mov	r6, r0
 800b5dc:	460f      	mov	r7, r1
 800b5de:	dc0c      	bgt.n	800b5fa <__ieee754_rem_pio2+0x1a2>
 800b5e0:	4b6a      	ldr	r3, [pc, #424]	@ (800b78c <__ieee754_rem_pio2+0x334>)
 800b5e2:	1e6a      	subs	r2, r5, #1
 800b5e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5e8:	4543      	cmp	r3, r8
 800b5ea:	d006      	beq.n	800b5fa <__ieee754_rem_pio2+0x1a2>
 800b5ec:	4632      	mov	r2, r6
 800b5ee:	463b      	mov	r3, r7
 800b5f0:	4650      	mov	r0, sl
 800b5f2:	4659      	mov	r1, fp
 800b5f4:	f7f4 fe68 	bl	80002c8 <__aeabi_dsub>
 800b5f8:	e00e      	b.n	800b618 <__ieee754_rem_pio2+0x1c0>
 800b5fa:	463b      	mov	r3, r7
 800b5fc:	4632      	mov	r2, r6
 800b5fe:	4650      	mov	r0, sl
 800b600:	4659      	mov	r1, fp
 800b602:	f7f4 fe61 	bl	80002c8 <__aeabi_dsub>
 800b606:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b60a:	9305      	str	r3, [sp, #20]
 800b60c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b610:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800b614:	2b10      	cmp	r3, #16
 800b616:	dc02      	bgt.n	800b61e <__ieee754_rem_pio2+0x1c6>
 800b618:	e9c4 0100 	strd	r0, r1, [r4]
 800b61c:	e039      	b.n	800b692 <__ieee754_rem_pio2+0x23a>
 800b61e:	a34c      	add	r3, pc, #304	@ (adr r3, 800b750 <__ieee754_rem_pio2+0x2f8>)
 800b620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b624:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b628:	f7f5 f806 	bl	8000638 <__aeabi_dmul>
 800b62c:	4606      	mov	r6, r0
 800b62e:	460f      	mov	r7, r1
 800b630:	4602      	mov	r2, r0
 800b632:	460b      	mov	r3, r1
 800b634:	4650      	mov	r0, sl
 800b636:	4659      	mov	r1, fp
 800b638:	f7f4 fe46 	bl	80002c8 <__aeabi_dsub>
 800b63c:	4602      	mov	r2, r0
 800b63e:	460b      	mov	r3, r1
 800b640:	4680      	mov	r8, r0
 800b642:	4689      	mov	r9, r1
 800b644:	4650      	mov	r0, sl
 800b646:	4659      	mov	r1, fp
 800b648:	f7f4 fe3e 	bl	80002c8 <__aeabi_dsub>
 800b64c:	4632      	mov	r2, r6
 800b64e:	463b      	mov	r3, r7
 800b650:	f7f4 fe3a 	bl	80002c8 <__aeabi_dsub>
 800b654:	a340      	add	r3, pc, #256	@ (adr r3, 800b758 <__ieee754_rem_pio2+0x300>)
 800b656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b65a:	4606      	mov	r6, r0
 800b65c:	460f      	mov	r7, r1
 800b65e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b662:	f7f4 ffe9 	bl	8000638 <__aeabi_dmul>
 800b666:	4632      	mov	r2, r6
 800b668:	463b      	mov	r3, r7
 800b66a:	f7f4 fe2d 	bl	80002c8 <__aeabi_dsub>
 800b66e:	4602      	mov	r2, r0
 800b670:	460b      	mov	r3, r1
 800b672:	4606      	mov	r6, r0
 800b674:	460f      	mov	r7, r1
 800b676:	4640      	mov	r0, r8
 800b678:	4649      	mov	r1, r9
 800b67a:	f7f4 fe25 	bl	80002c8 <__aeabi_dsub>
 800b67e:	9a05      	ldr	r2, [sp, #20]
 800b680:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b684:	1ad3      	subs	r3, r2, r3
 800b686:	2b31      	cmp	r3, #49	@ 0x31
 800b688:	dc20      	bgt.n	800b6cc <__ieee754_rem_pio2+0x274>
 800b68a:	e9c4 0100 	strd	r0, r1, [r4]
 800b68e:	46c2      	mov	sl, r8
 800b690:	46cb      	mov	fp, r9
 800b692:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b696:	4650      	mov	r0, sl
 800b698:	4642      	mov	r2, r8
 800b69a:	464b      	mov	r3, r9
 800b69c:	4659      	mov	r1, fp
 800b69e:	f7f4 fe13 	bl	80002c8 <__aeabi_dsub>
 800b6a2:	463b      	mov	r3, r7
 800b6a4:	4632      	mov	r2, r6
 800b6a6:	f7f4 fe0f 	bl	80002c8 <__aeabi_dsub>
 800b6aa:	9b04      	ldr	r3, [sp, #16]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b6b2:	f6bf af0e 	bge.w	800b4d2 <__ieee754_rem_pio2+0x7a>
 800b6b6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800b6ba:	6063      	str	r3, [r4, #4]
 800b6bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b6c0:	f8c4 8000 	str.w	r8, [r4]
 800b6c4:	60a0      	str	r0, [r4, #8]
 800b6c6:	60e3      	str	r3, [r4, #12]
 800b6c8:	426d      	negs	r5, r5
 800b6ca:	e702      	b.n	800b4d2 <__ieee754_rem_pio2+0x7a>
 800b6cc:	a326      	add	r3, pc, #152	@ (adr r3, 800b768 <__ieee754_rem_pio2+0x310>)
 800b6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6d6:	f7f4 ffaf 	bl	8000638 <__aeabi_dmul>
 800b6da:	4606      	mov	r6, r0
 800b6dc:	460f      	mov	r7, r1
 800b6de:	4602      	mov	r2, r0
 800b6e0:	460b      	mov	r3, r1
 800b6e2:	4640      	mov	r0, r8
 800b6e4:	4649      	mov	r1, r9
 800b6e6:	f7f4 fdef 	bl	80002c8 <__aeabi_dsub>
 800b6ea:	4602      	mov	r2, r0
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	4682      	mov	sl, r0
 800b6f0:	468b      	mov	fp, r1
 800b6f2:	4640      	mov	r0, r8
 800b6f4:	4649      	mov	r1, r9
 800b6f6:	f7f4 fde7 	bl	80002c8 <__aeabi_dsub>
 800b6fa:	4632      	mov	r2, r6
 800b6fc:	463b      	mov	r3, r7
 800b6fe:	f7f4 fde3 	bl	80002c8 <__aeabi_dsub>
 800b702:	a31b      	add	r3, pc, #108	@ (adr r3, 800b770 <__ieee754_rem_pio2+0x318>)
 800b704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b708:	4606      	mov	r6, r0
 800b70a:	460f      	mov	r7, r1
 800b70c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b710:	f7f4 ff92 	bl	8000638 <__aeabi_dmul>
 800b714:	4632      	mov	r2, r6
 800b716:	463b      	mov	r3, r7
 800b718:	f7f4 fdd6 	bl	80002c8 <__aeabi_dsub>
 800b71c:	4606      	mov	r6, r0
 800b71e:	460f      	mov	r7, r1
 800b720:	e764      	b.n	800b5ec <__ieee754_rem_pio2+0x194>
 800b722:	4b1b      	ldr	r3, [pc, #108]	@ (800b790 <__ieee754_rem_pio2+0x338>)
 800b724:	4598      	cmp	r8, r3
 800b726:	d935      	bls.n	800b794 <__ieee754_rem_pio2+0x33c>
 800b728:	4632      	mov	r2, r6
 800b72a:	463b      	mov	r3, r7
 800b72c:	4630      	mov	r0, r6
 800b72e:	4639      	mov	r1, r7
 800b730:	f7f4 fdca 	bl	80002c8 <__aeabi_dsub>
 800b734:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b738:	e9c4 0100 	strd	r0, r1, [r4]
 800b73c:	e69e      	b.n	800b47c <__ieee754_rem_pio2+0x24>
 800b73e:	bf00      	nop
 800b740:	54400000 	.word	0x54400000
 800b744:	3ff921fb 	.word	0x3ff921fb
 800b748:	1a626331 	.word	0x1a626331
 800b74c:	3dd0b461 	.word	0x3dd0b461
 800b750:	1a600000 	.word	0x1a600000
 800b754:	3dd0b461 	.word	0x3dd0b461
 800b758:	2e037073 	.word	0x2e037073
 800b75c:	3ba3198a 	.word	0x3ba3198a
 800b760:	6dc9c883 	.word	0x6dc9c883
 800b764:	3fe45f30 	.word	0x3fe45f30
 800b768:	2e000000 	.word	0x2e000000
 800b76c:	3ba3198a 	.word	0x3ba3198a
 800b770:	252049c1 	.word	0x252049c1
 800b774:	397b839a 	.word	0x397b839a
 800b778:	3fe921fb 	.word	0x3fe921fb
 800b77c:	4002d97b 	.word	0x4002d97b
 800b780:	3ff921fb 	.word	0x3ff921fb
 800b784:	413921fb 	.word	0x413921fb
 800b788:	3fe00000 	.word	0x3fe00000
 800b78c:	0800c800 	.word	0x0800c800
 800b790:	7fefffff 	.word	0x7fefffff
 800b794:	ea4f 5528 	mov.w	r5, r8, asr #20
 800b798:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800b79c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800b7a0:	4630      	mov	r0, r6
 800b7a2:	460f      	mov	r7, r1
 800b7a4:	f7f5 f9f8 	bl	8000b98 <__aeabi_d2iz>
 800b7a8:	f7f4 fedc 	bl	8000564 <__aeabi_i2d>
 800b7ac:	4602      	mov	r2, r0
 800b7ae:	460b      	mov	r3, r1
 800b7b0:	4630      	mov	r0, r6
 800b7b2:	4639      	mov	r1, r7
 800b7b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b7b8:	f7f4 fd86 	bl	80002c8 <__aeabi_dsub>
 800b7bc:	4b22      	ldr	r3, [pc, #136]	@ (800b848 <__ieee754_rem_pio2+0x3f0>)
 800b7be:	2200      	movs	r2, #0
 800b7c0:	f7f4 ff3a 	bl	8000638 <__aeabi_dmul>
 800b7c4:	460f      	mov	r7, r1
 800b7c6:	4606      	mov	r6, r0
 800b7c8:	f7f5 f9e6 	bl	8000b98 <__aeabi_d2iz>
 800b7cc:	f7f4 feca 	bl	8000564 <__aeabi_i2d>
 800b7d0:	4602      	mov	r2, r0
 800b7d2:	460b      	mov	r3, r1
 800b7d4:	4630      	mov	r0, r6
 800b7d6:	4639      	mov	r1, r7
 800b7d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b7dc:	f7f4 fd74 	bl	80002c8 <__aeabi_dsub>
 800b7e0:	4b19      	ldr	r3, [pc, #100]	@ (800b848 <__ieee754_rem_pio2+0x3f0>)
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	f7f4 ff28 	bl	8000638 <__aeabi_dmul>
 800b7e8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800b7ec:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800b7f0:	f04f 0803 	mov.w	r8, #3
 800b7f4:	2600      	movs	r6, #0
 800b7f6:	2700      	movs	r7, #0
 800b7f8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800b7fc:	4632      	mov	r2, r6
 800b7fe:	463b      	mov	r3, r7
 800b800:	46c2      	mov	sl, r8
 800b802:	f108 38ff 	add.w	r8, r8, #4294967295
 800b806:	f7f5 f97f 	bl	8000b08 <__aeabi_dcmpeq>
 800b80a:	2800      	cmp	r0, #0
 800b80c:	d1f4      	bne.n	800b7f8 <__ieee754_rem_pio2+0x3a0>
 800b80e:	4b0f      	ldr	r3, [pc, #60]	@ (800b84c <__ieee754_rem_pio2+0x3f4>)
 800b810:	9301      	str	r3, [sp, #4]
 800b812:	2302      	movs	r3, #2
 800b814:	9300      	str	r3, [sp, #0]
 800b816:	462a      	mov	r2, r5
 800b818:	4653      	mov	r3, sl
 800b81a:	4621      	mov	r1, r4
 800b81c:	a806      	add	r0, sp, #24
 800b81e:	f000 f8d3 	bl	800b9c8 <__kernel_rem_pio2>
 800b822:	9b04      	ldr	r3, [sp, #16]
 800b824:	2b00      	cmp	r3, #0
 800b826:	4605      	mov	r5, r0
 800b828:	f6bf ae53 	bge.w	800b4d2 <__ieee754_rem_pio2+0x7a>
 800b82c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800b830:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b834:	e9c4 2300 	strd	r2, r3, [r4]
 800b838:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800b83c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b840:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b844:	e740      	b.n	800b6c8 <__ieee754_rem_pio2+0x270>
 800b846:	bf00      	nop
 800b848:	41700000 	.word	0x41700000
 800b84c:	0800c880 	.word	0x0800c880

0800b850 <scalbn>:
 800b850:	b570      	push	{r4, r5, r6, lr}
 800b852:	ec55 4b10 	vmov	r4, r5, d0
 800b856:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800b85a:	4606      	mov	r6, r0
 800b85c:	462b      	mov	r3, r5
 800b85e:	b991      	cbnz	r1, 800b886 <scalbn+0x36>
 800b860:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b864:	4323      	orrs	r3, r4
 800b866:	d03d      	beq.n	800b8e4 <scalbn+0x94>
 800b868:	4b35      	ldr	r3, [pc, #212]	@ (800b940 <scalbn+0xf0>)
 800b86a:	4620      	mov	r0, r4
 800b86c:	4629      	mov	r1, r5
 800b86e:	2200      	movs	r2, #0
 800b870:	f7f4 fee2 	bl	8000638 <__aeabi_dmul>
 800b874:	4b33      	ldr	r3, [pc, #204]	@ (800b944 <scalbn+0xf4>)
 800b876:	429e      	cmp	r6, r3
 800b878:	4604      	mov	r4, r0
 800b87a:	460d      	mov	r5, r1
 800b87c:	da0f      	bge.n	800b89e <scalbn+0x4e>
 800b87e:	a328      	add	r3, pc, #160	@ (adr r3, 800b920 <scalbn+0xd0>)
 800b880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b884:	e01e      	b.n	800b8c4 <scalbn+0x74>
 800b886:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800b88a:	4291      	cmp	r1, r2
 800b88c:	d10b      	bne.n	800b8a6 <scalbn+0x56>
 800b88e:	4622      	mov	r2, r4
 800b890:	4620      	mov	r0, r4
 800b892:	4629      	mov	r1, r5
 800b894:	f7f4 fd1a 	bl	80002cc <__adddf3>
 800b898:	4604      	mov	r4, r0
 800b89a:	460d      	mov	r5, r1
 800b89c:	e022      	b.n	800b8e4 <scalbn+0x94>
 800b89e:	460b      	mov	r3, r1
 800b8a0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b8a4:	3936      	subs	r1, #54	@ 0x36
 800b8a6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800b8aa:	4296      	cmp	r6, r2
 800b8ac:	dd0d      	ble.n	800b8ca <scalbn+0x7a>
 800b8ae:	2d00      	cmp	r5, #0
 800b8b0:	a11d      	add	r1, pc, #116	@ (adr r1, 800b928 <scalbn+0xd8>)
 800b8b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8b6:	da02      	bge.n	800b8be <scalbn+0x6e>
 800b8b8:	a11d      	add	r1, pc, #116	@ (adr r1, 800b930 <scalbn+0xe0>)
 800b8ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8be:	a31a      	add	r3, pc, #104	@ (adr r3, 800b928 <scalbn+0xd8>)
 800b8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c4:	f7f4 feb8 	bl	8000638 <__aeabi_dmul>
 800b8c8:	e7e6      	b.n	800b898 <scalbn+0x48>
 800b8ca:	1872      	adds	r2, r6, r1
 800b8cc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800b8d0:	428a      	cmp	r2, r1
 800b8d2:	dcec      	bgt.n	800b8ae <scalbn+0x5e>
 800b8d4:	2a00      	cmp	r2, #0
 800b8d6:	dd08      	ble.n	800b8ea <scalbn+0x9a>
 800b8d8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b8dc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b8e0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b8e4:	ec45 4b10 	vmov	d0, r4, r5
 800b8e8:	bd70      	pop	{r4, r5, r6, pc}
 800b8ea:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800b8ee:	da08      	bge.n	800b902 <scalbn+0xb2>
 800b8f0:	2d00      	cmp	r5, #0
 800b8f2:	a10b      	add	r1, pc, #44	@ (adr r1, 800b920 <scalbn+0xd0>)
 800b8f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8f8:	dac1      	bge.n	800b87e <scalbn+0x2e>
 800b8fa:	a10f      	add	r1, pc, #60	@ (adr r1, 800b938 <scalbn+0xe8>)
 800b8fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b900:	e7bd      	b.n	800b87e <scalbn+0x2e>
 800b902:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b906:	3236      	adds	r2, #54	@ 0x36
 800b908:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b90c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b910:	4620      	mov	r0, r4
 800b912:	4b0d      	ldr	r3, [pc, #52]	@ (800b948 <scalbn+0xf8>)
 800b914:	4629      	mov	r1, r5
 800b916:	2200      	movs	r2, #0
 800b918:	e7d4      	b.n	800b8c4 <scalbn+0x74>
 800b91a:	bf00      	nop
 800b91c:	f3af 8000 	nop.w
 800b920:	c2f8f359 	.word	0xc2f8f359
 800b924:	01a56e1f 	.word	0x01a56e1f
 800b928:	8800759c 	.word	0x8800759c
 800b92c:	7e37e43c 	.word	0x7e37e43c
 800b930:	8800759c 	.word	0x8800759c
 800b934:	fe37e43c 	.word	0xfe37e43c
 800b938:	c2f8f359 	.word	0xc2f8f359
 800b93c:	81a56e1f 	.word	0x81a56e1f
 800b940:	43500000 	.word	0x43500000
 800b944:	ffff3cb0 	.word	0xffff3cb0
 800b948:	3c900000 	.word	0x3c900000

0800b94c <with_errno>:
 800b94c:	b510      	push	{r4, lr}
 800b94e:	ed2d 8b02 	vpush	{d8}
 800b952:	eeb0 8a40 	vmov.f32	s16, s0
 800b956:	eef0 8a60 	vmov.f32	s17, s1
 800b95a:	4604      	mov	r4, r0
 800b95c:	f7fc fc36 	bl	80081cc <__errno>
 800b960:	eeb0 0a48 	vmov.f32	s0, s16
 800b964:	eef0 0a68 	vmov.f32	s1, s17
 800b968:	ecbd 8b02 	vpop	{d8}
 800b96c:	6004      	str	r4, [r0, #0]
 800b96e:	bd10      	pop	{r4, pc}

0800b970 <xflow>:
 800b970:	4603      	mov	r3, r0
 800b972:	b507      	push	{r0, r1, r2, lr}
 800b974:	ec51 0b10 	vmov	r0, r1, d0
 800b978:	b183      	cbz	r3, 800b99c <xflow+0x2c>
 800b97a:	4602      	mov	r2, r0
 800b97c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b980:	e9cd 2300 	strd	r2, r3, [sp]
 800b984:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b988:	f7f4 fe56 	bl	8000638 <__aeabi_dmul>
 800b98c:	ec41 0b10 	vmov	d0, r0, r1
 800b990:	2022      	movs	r0, #34	@ 0x22
 800b992:	b003      	add	sp, #12
 800b994:	f85d eb04 	ldr.w	lr, [sp], #4
 800b998:	f7ff bfd8 	b.w	800b94c <with_errno>
 800b99c:	4602      	mov	r2, r0
 800b99e:	460b      	mov	r3, r1
 800b9a0:	e7ee      	b.n	800b980 <xflow+0x10>
 800b9a2:	0000      	movs	r0, r0
 800b9a4:	0000      	movs	r0, r0
	...

0800b9a8 <__math_uflow>:
 800b9a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b9b0 <__math_uflow+0x8>
 800b9ac:	f7ff bfe0 	b.w	800b970 <xflow>
 800b9b0:	00000000 	.word	0x00000000
 800b9b4:	10000000 	.word	0x10000000

0800b9b8 <__math_oflow>:
 800b9b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b9c0 <__math_oflow+0x8>
 800b9bc:	f7ff bfd8 	b.w	800b970 <xflow>
 800b9c0:	00000000 	.word	0x00000000
 800b9c4:	70000000 	.word	0x70000000

0800b9c8 <__kernel_rem_pio2>:
 800b9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9cc:	ed2d 8b02 	vpush	{d8}
 800b9d0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800b9d4:	f112 0f14 	cmn.w	r2, #20
 800b9d8:	9306      	str	r3, [sp, #24]
 800b9da:	9104      	str	r1, [sp, #16]
 800b9dc:	4bbe      	ldr	r3, [pc, #760]	@ (800bcd8 <__kernel_rem_pio2+0x310>)
 800b9de:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800b9e0:	9008      	str	r0, [sp, #32]
 800b9e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b9e6:	9300      	str	r3, [sp, #0]
 800b9e8:	9b06      	ldr	r3, [sp, #24]
 800b9ea:	f103 33ff 	add.w	r3, r3, #4294967295
 800b9ee:	bfa8      	it	ge
 800b9f0:	1ed4      	subge	r4, r2, #3
 800b9f2:	9305      	str	r3, [sp, #20]
 800b9f4:	bfb2      	itee	lt
 800b9f6:	2400      	movlt	r4, #0
 800b9f8:	2318      	movge	r3, #24
 800b9fa:	fb94 f4f3 	sdivge	r4, r4, r3
 800b9fe:	f06f 0317 	mvn.w	r3, #23
 800ba02:	fb04 3303 	mla	r3, r4, r3, r3
 800ba06:	eb03 0b02 	add.w	fp, r3, r2
 800ba0a:	9b00      	ldr	r3, [sp, #0]
 800ba0c:	9a05      	ldr	r2, [sp, #20]
 800ba0e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800bcc8 <__kernel_rem_pio2+0x300>
 800ba12:	eb03 0802 	add.w	r8, r3, r2
 800ba16:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800ba18:	1aa7      	subs	r7, r4, r2
 800ba1a:	ae20      	add	r6, sp, #128	@ 0x80
 800ba1c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ba20:	2500      	movs	r5, #0
 800ba22:	4545      	cmp	r5, r8
 800ba24:	dd13      	ble.n	800ba4e <__kernel_rem_pio2+0x86>
 800ba26:	9b06      	ldr	r3, [sp, #24]
 800ba28:	aa20      	add	r2, sp, #128	@ 0x80
 800ba2a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ba2e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800ba32:	f04f 0800 	mov.w	r8, #0
 800ba36:	9b00      	ldr	r3, [sp, #0]
 800ba38:	4598      	cmp	r8, r3
 800ba3a:	dc31      	bgt.n	800baa0 <__kernel_rem_pio2+0xd8>
 800ba3c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800bcc8 <__kernel_rem_pio2+0x300>
 800ba40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ba44:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ba48:	462f      	mov	r7, r5
 800ba4a:	2600      	movs	r6, #0
 800ba4c:	e01b      	b.n	800ba86 <__kernel_rem_pio2+0xbe>
 800ba4e:	42ef      	cmn	r7, r5
 800ba50:	d407      	bmi.n	800ba62 <__kernel_rem_pio2+0x9a>
 800ba52:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ba56:	f7f4 fd85 	bl	8000564 <__aeabi_i2d>
 800ba5a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ba5e:	3501      	adds	r5, #1
 800ba60:	e7df      	b.n	800ba22 <__kernel_rem_pio2+0x5a>
 800ba62:	ec51 0b18 	vmov	r0, r1, d8
 800ba66:	e7f8      	b.n	800ba5a <__kernel_rem_pio2+0x92>
 800ba68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba6c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ba70:	f7f4 fde2 	bl	8000638 <__aeabi_dmul>
 800ba74:	4602      	mov	r2, r0
 800ba76:	460b      	mov	r3, r1
 800ba78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba7c:	f7f4 fc26 	bl	80002cc <__adddf3>
 800ba80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba84:	3601      	adds	r6, #1
 800ba86:	9b05      	ldr	r3, [sp, #20]
 800ba88:	429e      	cmp	r6, r3
 800ba8a:	f1a7 0708 	sub.w	r7, r7, #8
 800ba8e:	ddeb      	ble.n	800ba68 <__kernel_rem_pio2+0xa0>
 800ba90:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba94:	f108 0801 	add.w	r8, r8, #1
 800ba98:	ecaa 7b02 	vstmia	sl!, {d7}
 800ba9c:	3508      	adds	r5, #8
 800ba9e:	e7ca      	b.n	800ba36 <__kernel_rem_pio2+0x6e>
 800baa0:	9b00      	ldr	r3, [sp, #0]
 800baa2:	f8dd 8000 	ldr.w	r8, [sp]
 800baa6:	aa0c      	add	r2, sp, #48	@ 0x30
 800baa8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800baac:	930a      	str	r3, [sp, #40]	@ 0x28
 800baae:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800bab0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bab4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bab6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800baba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800babc:	ab98      	add	r3, sp, #608	@ 0x260
 800babe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bac2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800bac6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800baca:	ac0c      	add	r4, sp, #48	@ 0x30
 800bacc:	ab70      	add	r3, sp, #448	@ 0x1c0
 800bace:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800bad2:	46a1      	mov	r9, r4
 800bad4:	46c2      	mov	sl, r8
 800bad6:	f1ba 0f00 	cmp.w	sl, #0
 800bada:	f1a5 0508 	sub.w	r5, r5, #8
 800bade:	dc77      	bgt.n	800bbd0 <__kernel_rem_pio2+0x208>
 800bae0:	4658      	mov	r0, fp
 800bae2:	ed9d 0b02 	vldr	d0, [sp, #8]
 800bae6:	f7ff feb3 	bl	800b850 <scalbn>
 800baea:	ec57 6b10 	vmov	r6, r7, d0
 800baee:	2200      	movs	r2, #0
 800baf0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800baf4:	4630      	mov	r0, r6
 800baf6:	4639      	mov	r1, r7
 800baf8:	f7f4 fd9e 	bl	8000638 <__aeabi_dmul>
 800bafc:	ec41 0b10 	vmov	d0, r0, r1
 800bb00:	f000 faba 	bl	800c078 <floor>
 800bb04:	4b75      	ldr	r3, [pc, #468]	@ (800bcdc <__kernel_rem_pio2+0x314>)
 800bb06:	ec51 0b10 	vmov	r0, r1, d0
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	f7f4 fd94 	bl	8000638 <__aeabi_dmul>
 800bb10:	4602      	mov	r2, r0
 800bb12:	460b      	mov	r3, r1
 800bb14:	4630      	mov	r0, r6
 800bb16:	4639      	mov	r1, r7
 800bb18:	f7f4 fbd6 	bl	80002c8 <__aeabi_dsub>
 800bb1c:	460f      	mov	r7, r1
 800bb1e:	4606      	mov	r6, r0
 800bb20:	f7f5 f83a 	bl	8000b98 <__aeabi_d2iz>
 800bb24:	9002      	str	r0, [sp, #8]
 800bb26:	f7f4 fd1d 	bl	8000564 <__aeabi_i2d>
 800bb2a:	4602      	mov	r2, r0
 800bb2c:	460b      	mov	r3, r1
 800bb2e:	4630      	mov	r0, r6
 800bb30:	4639      	mov	r1, r7
 800bb32:	f7f4 fbc9 	bl	80002c8 <__aeabi_dsub>
 800bb36:	f1bb 0f00 	cmp.w	fp, #0
 800bb3a:	4606      	mov	r6, r0
 800bb3c:	460f      	mov	r7, r1
 800bb3e:	dd6c      	ble.n	800bc1a <__kernel_rem_pio2+0x252>
 800bb40:	f108 31ff 	add.w	r1, r8, #4294967295
 800bb44:	ab0c      	add	r3, sp, #48	@ 0x30
 800bb46:	9d02      	ldr	r5, [sp, #8]
 800bb48:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bb4c:	f1cb 0018 	rsb	r0, fp, #24
 800bb50:	fa43 f200 	asr.w	r2, r3, r0
 800bb54:	4415      	add	r5, r2
 800bb56:	4082      	lsls	r2, r0
 800bb58:	1a9b      	subs	r3, r3, r2
 800bb5a:	aa0c      	add	r2, sp, #48	@ 0x30
 800bb5c:	9502      	str	r5, [sp, #8]
 800bb5e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800bb62:	f1cb 0217 	rsb	r2, fp, #23
 800bb66:	fa43 f902 	asr.w	r9, r3, r2
 800bb6a:	f1b9 0f00 	cmp.w	r9, #0
 800bb6e:	dd64      	ble.n	800bc3a <__kernel_rem_pio2+0x272>
 800bb70:	9b02      	ldr	r3, [sp, #8]
 800bb72:	2200      	movs	r2, #0
 800bb74:	3301      	adds	r3, #1
 800bb76:	9302      	str	r3, [sp, #8]
 800bb78:	4615      	mov	r5, r2
 800bb7a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800bb7e:	4590      	cmp	r8, r2
 800bb80:	f300 80b8 	bgt.w	800bcf4 <__kernel_rem_pio2+0x32c>
 800bb84:	f1bb 0f00 	cmp.w	fp, #0
 800bb88:	dd07      	ble.n	800bb9a <__kernel_rem_pio2+0x1d2>
 800bb8a:	f1bb 0f01 	cmp.w	fp, #1
 800bb8e:	f000 80bf 	beq.w	800bd10 <__kernel_rem_pio2+0x348>
 800bb92:	f1bb 0f02 	cmp.w	fp, #2
 800bb96:	f000 80c6 	beq.w	800bd26 <__kernel_rem_pio2+0x35e>
 800bb9a:	f1b9 0f02 	cmp.w	r9, #2
 800bb9e:	d14c      	bne.n	800bc3a <__kernel_rem_pio2+0x272>
 800bba0:	4632      	mov	r2, r6
 800bba2:	463b      	mov	r3, r7
 800bba4:	494e      	ldr	r1, [pc, #312]	@ (800bce0 <__kernel_rem_pio2+0x318>)
 800bba6:	2000      	movs	r0, #0
 800bba8:	f7f4 fb8e 	bl	80002c8 <__aeabi_dsub>
 800bbac:	4606      	mov	r6, r0
 800bbae:	460f      	mov	r7, r1
 800bbb0:	2d00      	cmp	r5, #0
 800bbb2:	d042      	beq.n	800bc3a <__kernel_rem_pio2+0x272>
 800bbb4:	4658      	mov	r0, fp
 800bbb6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800bcd0 <__kernel_rem_pio2+0x308>
 800bbba:	f7ff fe49 	bl	800b850 <scalbn>
 800bbbe:	4630      	mov	r0, r6
 800bbc0:	4639      	mov	r1, r7
 800bbc2:	ec53 2b10 	vmov	r2, r3, d0
 800bbc6:	f7f4 fb7f 	bl	80002c8 <__aeabi_dsub>
 800bbca:	4606      	mov	r6, r0
 800bbcc:	460f      	mov	r7, r1
 800bbce:	e034      	b.n	800bc3a <__kernel_rem_pio2+0x272>
 800bbd0:	4b44      	ldr	r3, [pc, #272]	@ (800bce4 <__kernel_rem_pio2+0x31c>)
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbd8:	f7f4 fd2e 	bl	8000638 <__aeabi_dmul>
 800bbdc:	f7f4 ffdc 	bl	8000b98 <__aeabi_d2iz>
 800bbe0:	f7f4 fcc0 	bl	8000564 <__aeabi_i2d>
 800bbe4:	4b40      	ldr	r3, [pc, #256]	@ (800bce8 <__kernel_rem_pio2+0x320>)
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	4606      	mov	r6, r0
 800bbea:	460f      	mov	r7, r1
 800bbec:	f7f4 fd24 	bl	8000638 <__aeabi_dmul>
 800bbf0:	4602      	mov	r2, r0
 800bbf2:	460b      	mov	r3, r1
 800bbf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbf8:	f7f4 fb66 	bl	80002c8 <__aeabi_dsub>
 800bbfc:	f7f4 ffcc 	bl	8000b98 <__aeabi_d2iz>
 800bc00:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bc04:	f849 0b04 	str.w	r0, [r9], #4
 800bc08:	4639      	mov	r1, r7
 800bc0a:	4630      	mov	r0, r6
 800bc0c:	f7f4 fb5e 	bl	80002cc <__adddf3>
 800bc10:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bc14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc18:	e75d      	b.n	800bad6 <__kernel_rem_pio2+0x10e>
 800bc1a:	d107      	bne.n	800bc2c <__kernel_rem_pio2+0x264>
 800bc1c:	f108 33ff 	add.w	r3, r8, #4294967295
 800bc20:	aa0c      	add	r2, sp, #48	@ 0x30
 800bc22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc26:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800bc2a:	e79e      	b.n	800bb6a <__kernel_rem_pio2+0x1a2>
 800bc2c:	4b2f      	ldr	r3, [pc, #188]	@ (800bcec <__kernel_rem_pio2+0x324>)
 800bc2e:	2200      	movs	r2, #0
 800bc30:	f7f4 ff88 	bl	8000b44 <__aeabi_dcmpge>
 800bc34:	2800      	cmp	r0, #0
 800bc36:	d143      	bne.n	800bcc0 <__kernel_rem_pio2+0x2f8>
 800bc38:	4681      	mov	r9, r0
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	4630      	mov	r0, r6
 800bc40:	4639      	mov	r1, r7
 800bc42:	f7f4 ff61 	bl	8000b08 <__aeabi_dcmpeq>
 800bc46:	2800      	cmp	r0, #0
 800bc48:	f000 80bf 	beq.w	800bdca <__kernel_rem_pio2+0x402>
 800bc4c:	f108 33ff 	add.w	r3, r8, #4294967295
 800bc50:	2200      	movs	r2, #0
 800bc52:	9900      	ldr	r1, [sp, #0]
 800bc54:	428b      	cmp	r3, r1
 800bc56:	da6e      	bge.n	800bd36 <__kernel_rem_pio2+0x36e>
 800bc58:	2a00      	cmp	r2, #0
 800bc5a:	f000 8089 	beq.w	800bd70 <__kernel_rem_pio2+0x3a8>
 800bc5e:	f108 38ff 	add.w	r8, r8, #4294967295
 800bc62:	ab0c      	add	r3, sp, #48	@ 0x30
 800bc64:	f1ab 0b18 	sub.w	fp, fp, #24
 800bc68:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d0f6      	beq.n	800bc5e <__kernel_rem_pio2+0x296>
 800bc70:	4658      	mov	r0, fp
 800bc72:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800bcd0 <__kernel_rem_pio2+0x308>
 800bc76:	f7ff fdeb 	bl	800b850 <scalbn>
 800bc7a:	f108 0301 	add.w	r3, r8, #1
 800bc7e:	00da      	lsls	r2, r3, #3
 800bc80:	9205      	str	r2, [sp, #20]
 800bc82:	ec55 4b10 	vmov	r4, r5, d0
 800bc86:	aa70      	add	r2, sp, #448	@ 0x1c0
 800bc88:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800bce4 <__kernel_rem_pio2+0x31c>
 800bc8c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800bc90:	4646      	mov	r6, r8
 800bc92:	f04f 0a00 	mov.w	sl, #0
 800bc96:	2e00      	cmp	r6, #0
 800bc98:	f280 80cf 	bge.w	800be3a <__kernel_rem_pio2+0x472>
 800bc9c:	4644      	mov	r4, r8
 800bc9e:	2c00      	cmp	r4, #0
 800bca0:	f2c0 80fd 	blt.w	800be9e <__kernel_rem_pio2+0x4d6>
 800bca4:	4b12      	ldr	r3, [pc, #72]	@ (800bcf0 <__kernel_rem_pio2+0x328>)
 800bca6:	461f      	mov	r7, r3
 800bca8:	ab70      	add	r3, sp, #448	@ 0x1c0
 800bcaa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bcae:	9306      	str	r3, [sp, #24]
 800bcb0:	f04f 0a00 	mov.w	sl, #0
 800bcb4:	f04f 0b00 	mov.w	fp, #0
 800bcb8:	2600      	movs	r6, #0
 800bcba:	eba8 0504 	sub.w	r5, r8, r4
 800bcbe:	e0e2      	b.n	800be86 <__kernel_rem_pio2+0x4be>
 800bcc0:	f04f 0902 	mov.w	r9, #2
 800bcc4:	e754      	b.n	800bb70 <__kernel_rem_pio2+0x1a8>
 800bcc6:	bf00      	nop
	...
 800bcd4:	3ff00000 	.word	0x3ff00000
 800bcd8:	0800c9c8 	.word	0x0800c9c8
 800bcdc:	40200000 	.word	0x40200000
 800bce0:	3ff00000 	.word	0x3ff00000
 800bce4:	3e700000 	.word	0x3e700000
 800bce8:	41700000 	.word	0x41700000
 800bcec:	3fe00000 	.word	0x3fe00000
 800bcf0:	0800c988 	.word	0x0800c988
 800bcf4:	f854 3b04 	ldr.w	r3, [r4], #4
 800bcf8:	b945      	cbnz	r5, 800bd0c <__kernel_rem_pio2+0x344>
 800bcfa:	b123      	cbz	r3, 800bd06 <__kernel_rem_pio2+0x33e>
 800bcfc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800bd00:	f844 3c04 	str.w	r3, [r4, #-4]
 800bd04:	2301      	movs	r3, #1
 800bd06:	3201      	adds	r2, #1
 800bd08:	461d      	mov	r5, r3
 800bd0a:	e738      	b.n	800bb7e <__kernel_rem_pio2+0x1b6>
 800bd0c:	1acb      	subs	r3, r1, r3
 800bd0e:	e7f7      	b.n	800bd00 <__kernel_rem_pio2+0x338>
 800bd10:	f108 32ff 	add.w	r2, r8, #4294967295
 800bd14:	ab0c      	add	r3, sp, #48	@ 0x30
 800bd16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd1a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bd1e:	a90c      	add	r1, sp, #48	@ 0x30
 800bd20:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bd24:	e739      	b.n	800bb9a <__kernel_rem_pio2+0x1d2>
 800bd26:	f108 32ff 	add.w	r2, r8, #4294967295
 800bd2a:	ab0c      	add	r3, sp, #48	@ 0x30
 800bd2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd30:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bd34:	e7f3      	b.n	800bd1e <__kernel_rem_pio2+0x356>
 800bd36:	a90c      	add	r1, sp, #48	@ 0x30
 800bd38:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bd3c:	3b01      	subs	r3, #1
 800bd3e:	430a      	orrs	r2, r1
 800bd40:	e787      	b.n	800bc52 <__kernel_rem_pio2+0x28a>
 800bd42:	3401      	adds	r4, #1
 800bd44:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bd48:	2a00      	cmp	r2, #0
 800bd4a:	d0fa      	beq.n	800bd42 <__kernel_rem_pio2+0x37a>
 800bd4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd4e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bd52:	eb0d 0503 	add.w	r5, sp, r3
 800bd56:	9b06      	ldr	r3, [sp, #24]
 800bd58:	aa20      	add	r2, sp, #128	@ 0x80
 800bd5a:	4443      	add	r3, r8
 800bd5c:	f108 0701 	add.w	r7, r8, #1
 800bd60:	3d98      	subs	r5, #152	@ 0x98
 800bd62:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800bd66:	4444      	add	r4, r8
 800bd68:	42bc      	cmp	r4, r7
 800bd6a:	da04      	bge.n	800bd76 <__kernel_rem_pio2+0x3ae>
 800bd6c:	46a0      	mov	r8, r4
 800bd6e:	e6a2      	b.n	800bab6 <__kernel_rem_pio2+0xee>
 800bd70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd72:	2401      	movs	r4, #1
 800bd74:	e7e6      	b.n	800bd44 <__kernel_rem_pio2+0x37c>
 800bd76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd78:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800bd7c:	f7f4 fbf2 	bl	8000564 <__aeabi_i2d>
 800bd80:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800c048 <__kernel_rem_pio2+0x680>
 800bd84:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bd88:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bd8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bd90:	46b2      	mov	sl, r6
 800bd92:	f04f 0800 	mov.w	r8, #0
 800bd96:	9b05      	ldr	r3, [sp, #20]
 800bd98:	4598      	cmp	r8, r3
 800bd9a:	dd05      	ble.n	800bda8 <__kernel_rem_pio2+0x3e0>
 800bd9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bda0:	3701      	adds	r7, #1
 800bda2:	eca5 7b02 	vstmia	r5!, {d7}
 800bda6:	e7df      	b.n	800bd68 <__kernel_rem_pio2+0x3a0>
 800bda8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800bdac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bdb0:	f7f4 fc42 	bl	8000638 <__aeabi_dmul>
 800bdb4:	4602      	mov	r2, r0
 800bdb6:	460b      	mov	r3, r1
 800bdb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdbc:	f7f4 fa86 	bl	80002cc <__adddf3>
 800bdc0:	f108 0801 	add.w	r8, r8, #1
 800bdc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdc8:	e7e5      	b.n	800bd96 <__kernel_rem_pio2+0x3ce>
 800bdca:	f1cb 0000 	rsb	r0, fp, #0
 800bdce:	ec47 6b10 	vmov	d0, r6, r7
 800bdd2:	f7ff fd3d 	bl	800b850 <scalbn>
 800bdd6:	ec55 4b10 	vmov	r4, r5, d0
 800bdda:	4b9d      	ldr	r3, [pc, #628]	@ (800c050 <__kernel_rem_pio2+0x688>)
 800bddc:	2200      	movs	r2, #0
 800bdde:	4620      	mov	r0, r4
 800bde0:	4629      	mov	r1, r5
 800bde2:	f7f4 feaf 	bl	8000b44 <__aeabi_dcmpge>
 800bde6:	b300      	cbz	r0, 800be2a <__kernel_rem_pio2+0x462>
 800bde8:	4b9a      	ldr	r3, [pc, #616]	@ (800c054 <__kernel_rem_pio2+0x68c>)
 800bdea:	2200      	movs	r2, #0
 800bdec:	4620      	mov	r0, r4
 800bdee:	4629      	mov	r1, r5
 800bdf0:	f7f4 fc22 	bl	8000638 <__aeabi_dmul>
 800bdf4:	f7f4 fed0 	bl	8000b98 <__aeabi_d2iz>
 800bdf8:	4606      	mov	r6, r0
 800bdfa:	f7f4 fbb3 	bl	8000564 <__aeabi_i2d>
 800bdfe:	4b94      	ldr	r3, [pc, #592]	@ (800c050 <__kernel_rem_pio2+0x688>)
 800be00:	2200      	movs	r2, #0
 800be02:	f7f4 fc19 	bl	8000638 <__aeabi_dmul>
 800be06:	460b      	mov	r3, r1
 800be08:	4602      	mov	r2, r0
 800be0a:	4629      	mov	r1, r5
 800be0c:	4620      	mov	r0, r4
 800be0e:	f7f4 fa5b 	bl	80002c8 <__aeabi_dsub>
 800be12:	f7f4 fec1 	bl	8000b98 <__aeabi_d2iz>
 800be16:	ab0c      	add	r3, sp, #48	@ 0x30
 800be18:	f10b 0b18 	add.w	fp, fp, #24
 800be1c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800be20:	f108 0801 	add.w	r8, r8, #1
 800be24:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800be28:	e722      	b.n	800bc70 <__kernel_rem_pio2+0x2a8>
 800be2a:	4620      	mov	r0, r4
 800be2c:	4629      	mov	r1, r5
 800be2e:	f7f4 feb3 	bl	8000b98 <__aeabi_d2iz>
 800be32:	ab0c      	add	r3, sp, #48	@ 0x30
 800be34:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800be38:	e71a      	b.n	800bc70 <__kernel_rem_pio2+0x2a8>
 800be3a:	ab0c      	add	r3, sp, #48	@ 0x30
 800be3c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800be40:	f7f4 fb90 	bl	8000564 <__aeabi_i2d>
 800be44:	4622      	mov	r2, r4
 800be46:	462b      	mov	r3, r5
 800be48:	f7f4 fbf6 	bl	8000638 <__aeabi_dmul>
 800be4c:	4652      	mov	r2, sl
 800be4e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800be52:	465b      	mov	r3, fp
 800be54:	4620      	mov	r0, r4
 800be56:	4629      	mov	r1, r5
 800be58:	f7f4 fbee 	bl	8000638 <__aeabi_dmul>
 800be5c:	3e01      	subs	r6, #1
 800be5e:	4604      	mov	r4, r0
 800be60:	460d      	mov	r5, r1
 800be62:	e718      	b.n	800bc96 <__kernel_rem_pio2+0x2ce>
 800be64:	9906      	ldr	r1, [sp, #24]
 800be66:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800be6a:	9106      	str	r1, [sp, #24]
 800be6c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800be70:	f7f4 fbe2 	bl	8000638 <__aeabi_dmul>
 800be74:	4602      	mov	r2, r0
 800be76:	460b      	mov	r3, r1
 800be78:	4650      	mov	r0, sl
 800be7a:	4659      	mov	r1, fp
 800be7c:	f7f4 fa26 	bl	80002cc <__adddf3>
 800be80:	3601      	adds	r6, #1
 800be82:	4682      	mov	sl, r0
 800be84:	468b      	mov	fp, r1
 800be86:	9b00      	ldr	r3, [sp, #0]
 800be88:	429e      	cmp	r6, r3
 800be8a:	dc01      	bgt.n	800be90 <__kernel_rem_pio2+0x4c8>
 800be8c:	42b5      	cmp	r5, r6
 800be8e:	dae9      	bge.n	800be64 <__kernel_rem_pio2+0x49c>
 800be90:	ab48      	add	r3, sp, #288	@ 0x120
 800be92:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800be96:	e9c5 ab00 	strd	sl, fp, [r5]
 800be9a:	3c01      	subs	r4, #1
 800be9c:	e6ff      	b.n	800bc9e <__kernel_rem_pio2+0x2d6>
 800be9e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800bea0:	2b02      	cmp	r3, #2
 800bea2:	dc0b      	bgt.n	800bebc <__kernel_rem_pio2+0x4f4>
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	dc39      	bgt.n	800bf1c <__kernel_rem_pio2+0x554>
 800bea8:	d05d      	beq.n	800bf66 <__kernel_rem_pio2+0x59e>
 800beaa:	9b02      	ldr	r3, [sp, #8]
 800beac:	f003 0007 	and.w	r0, r3, #7
 800beb0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800beb4:	ecbd 8b02 	vpop	{d8}
 800beb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bebc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800bebe:	2b03      	cmp	r3, #3
 800bec0:	d1f3      	bne.n	800beaa <__kernel_rem_pio2+0x4e2>
 800bec2:	9b05      	ldr	r3, [sp, #20]
 800bec4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bec8:	eb0d 0403 	add.w	r4, sp, r3
 800becc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800bed0:	4625      	mov	r5, r4
 800bed2:	46c2      	mov	sl, r8
 800bed4:	f1ba 0f00 	cmp.w	sl, #0
 800bed8:	f1a5 0508 	sub.w	r5, r5, #8
 800bedc:	dc6b      	bgt.n	800bfb6 <__kernel_rem_pio2+0x5ee>
 800bede:	4645      	mov	r5, r8
 800bee0:	2d01      	cmp	r5, #1
 800bee2:	f1a4 0408 	sub.w	r4, r4, #8
 800bee6:	f300 8087 	bgt.w	800bff8 <__kernel_rem_pio2+0x630>
 800beea:	9c05      	ldr	r4, [sp, #20]
 800beec:	ab48      	add	r3, sp, #288	@ 0x120
 800beee:	441c      	add	r4, r3
 800bef0:	2000      	movs	r0, #0
 800bef2:	2100      	movs	r1, #0
 800bef4:	f1b8 0f01 	cmp.w	r8, #1
 800bef8:	f300 809c 	bgt.w	800c034 <__kernel_rem_pio2+0x66c>
 800befc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800bf00:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800bf04:	f1b9 0f00 	cmp.w	r9, #0
 800bf08:	f040 80a6 	bne.w	800c058 <__kernel_rem_pio2+0x690>
 800bf0c:	9b04      	ldr	r3, [sp, #16]
 800bf0e:	e9c3 7800 	strd	r7, r8, [r3]
 800bf12:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800bf16:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800bf1a:	e7c6      	b.n	800beaa <__kernel_rem_pio2+0x4e2>
 800bf1c:	9d05      	ldr	r5, [sp, #20]
 800bf1e:	ab48      	add	r3, sp, #288	@ 0x120
 800bf20:	441d      	add	r5, r3
 800bf22:	4644      	mov	r4, r8
 800bf24:	2000      	movs	r0, #0
 800bf26:	2100      	movs	r1, #0
 800bf28:	2c00      	cmp	r4, #0
 800bf2a:	da35      	bge.n	800bf98 <__kernel_rem_pio2+0x5d0>
 800bf2c:	f1b9 0f00 	cmp.w	r9, #0
 800bf30:	d038      	beq.n	800bfa4 <__kernel_rem_pio2+0x5dc>
 800bf32:	4602      	mov	r2, r0
 800bf34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bf38:	9c04      	ldr	r4, [sp, #16]
 800bf3a:	e9c4 2300 	strd	r2, r3, [r4]
 800bf3e:	4602      	mov	r2, r0
 800bf40:	460b      	mov	r3, r1
 800bf42:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800bf46:	f7f4 f9bf 	bl	80002c8 <__aeabi_dsub>
 800bf4a:	ad4a      	add	r5, sp, #296	@ 0x128
 800bf4c:	2401      	movs	r4, #1
 800bf4e:	45a0      	cmp	r8, r4
 800bf50:	da2b      	bge.n	800bfaa <__kernel_rem_pio2+0x5e2>
 800bf52:	f1b9 0f00 	cmp.w	r9, #0
 800bf56:	d002      	beq.n	800bf5e <__kernel_rem_pio2+0x596>
 800bf58:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	9b04      	ldr	r3, [sp, #16]
 800bf60:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800bf64:	e7a1      	b.n	800beaa <__kernel_rem_pio2+0x4e2>
 800bf66:	9c05      	ldr	r4, [sp, #20]
 800bf68:	ab48      	add	r3, sp, #288	@ 0x120
 800bf6a:	441c      	add	r4, r3
 800bf6c:	2000      	movs	r0, #0
 800bf6e:	2100      	movs	r1, #0
 800bf70:	f1b8 0f00 	cmp.w	r8, #0
 800bf74:	da09      	bge.n	800bf8a <__kernel_rem_pio2+0x5c2>
 800bf76:	f1b9 0f00 	cmp.w	r9, #0
 800bf7a:	d002      	beq.n	800bf82 <__kernel_rem_pio2+0x5ba>
 800bf7c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bf80:	4619      	mov	r1, r3
 800bf82:	9b04      	ldr	r3, [sp, #16]
 800bf84:	e9c3 0100 	strd	r0, r1, [r3]
 800bf88:	e78f      	b.n	800beaa <__kernel_rem_pio2+0x4e2>
 800bf8a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bf8e:	f7f4 f99d 	bl	80002cc <__adddf3>
 800bf92:	f108 38ff 	add.w	r8, r8, #4294967295
 800bf96:	e7eb      	b.n	800bf70 <__kernel_rem_pio2+0x5a8>
 800bf98:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800bf9c:	f7f4 f996 	bl	80002cc <__adddf3>
 800bfa0:	3c01      	subs	r4, #1
 800bfa2:	e7c1      	b.n	800bf28 <__kernel_rem_pio2+0x560>
 800bfa4:	4602      	mov	r2, r0
 800bfa6:	460b      	mov	r3, r1
 800bfa8:	e7c6      	b.n	800bf38 <__kernel_rem_pio2+0x570>
 800bfaa:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800bfae:	f7f4 f98d 	bl	80002cc <__adddf3>
 800bfb2:	3401      	adds	r4, #1
 800bfb4:	e7cb      	b.n	800bf4e <__kernel_rem_pio2+0x586>
 800bfb6:	ed95 7b00 	vldr	d7, [r5]
 800bfba:	ed8d 7b00 	vstr	d7, [sp]
 800bfbe:	ed95 7b02 	vldr	d7, [r5, #8]
 800bfc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bfc6:	ec53 2b17 	vmov	r2, r3, d7
 800bfca:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bfce:	f7f4 f97d 	bl	80002cc <__adddf3>
 800bfd2:	4602      	mov	r2, r0
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	4606      	mov	r6, r0
 800bfd8:	460f      	mov	r7, r1
 800bfda:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bfde:	f7f4 f973 	bl	80002c8 <__aeabi_dsub>
 800bfe2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bfe6:	f7f4 f971 	bl	80002cc <__adddf3>
 800bfea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bfee:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800bff2:	e9c5 6700 	strd	r6, r7, [r5]
 800bff6:	e76d      	b.n	800bed4 <__kernel_rem_pio2+0x50c>
 800bff8:	ed94 7b00 	vldr	d7, [r4]
 800bffc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800c000:	ec51 0b17 	vmov	r0, r1, d7
 800c004:	4652      	mov	r2, sl
 800c006:	465b      	mov	r3, fp
 800c008:	ed8d 7b00 	vstr	d7, [sp]
 800c00c:	f7f4 f95e 	bl	80002cc <__adddf3>
 800c010:	4602      	mov	r2, r0
 800c012:	460b      	mov	r3, r1
 800c014:	4606      	mov	r6, r0
 800c016:	460f      	mov	r7, r1
 800c018:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c01c:	f7f4 f954 	bl	80002c8 <__aeabi_dsub>
 800c020:	4652      	mov	r2, sl
 800c022:	465b      	mov	r3, fp
 800c024:	f7f4 f952 	bl	80002cc <__adddf3>
 800c028:	3d01      	subs	r5, #1
 800c02a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c02e:	e9c4 6700 	strd	r6, r7, [r4]
 800c032:	e755      	b.n	800bee0 <__kernel_rem_pio2+0x518>
 800c034:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c038:	f7f4 f948 	bl	80002cc <__adddf3>
 800c03c:	f108 38ff 	add.w	r8, r8, #4294967295
 800c040:	e758      	b.n	800bef4 <__kernel_rem_pio2+0x52c>
 800c042:	bf00      	nop
 800c044:	f3af 8000 	nop.w
	...
 800c050:	41700000 	.word	0x41700000
 800c054:	3e700000 	.word	0x3e700000
 800c058:	9b04      	ldr	r3, [sp, #16]
 800c05a:	9a04      	ldr	r2, [sp, #16]
 800c05c:	601f      	str	r7, [r3, #0]
 800c05e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800c062:	605c      	str	r4, [r3, #4]
 800c064:	609d      	str	r5, [r3, #8]
 800c066:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c06a:	60d3      	str	r3, [r2, #12]
 800c06c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c070:	6110      	str	r0, [r2, #16]
 800c072:	6153      	str	r3, [r2, #20]
 800c074:	e719      	b.n	800beaa <__kernel_rem_pio2+0x4e2>
 800c076:	bf00      	nop

0800c078 <floor>:
 800c078:	ec51 0b10 	vmov	r0, r1, d0
 800c07c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c084:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800c088:	2e13      	cmp	r6, #19
 800c08a:	460c      	mov	r4, r1
 800c08c:	4605      	mov	r5, r0
 800c08e:	4680      	mov	r8, r0
 800c090:	dc34      	bgt.n	800c0fc <floor+0x84>
 800c092:	2e00      	cmp	r6, #0
 800c094:	da17      	bge.n	800c0c6 <floor+0x4e>
 800c096:	a332      	add	r3, pc, #200	@ (adr r3, 800c160 <floor+0xe8>)
 800c098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09c:	f7f4 f916 	bl	80002cc <__adddf3>
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	f7f4 fd58 	bl	8000b58 <__aeabi_dcmpgt>
 800c0a8:	b150      	cbz	r0, 800c0c0 <floor+0x48>
 800c0aa:	2c00      	cmp	r4, #0
 800c0ac:	da55      	bge.n	800c15a <floor+0xe2>
 800c0ae:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800c0b2:	432c      	orrs	r4, r5
 800c0b4:	2500      	movs	r5, #0
 800c0b6:	42ac      	cmp	r4, r5
 800c0b8:	4c2b      	ldr	r4, [pc, #172]	@ (800c168 <floor+0xf0>)
 800c0ba:	bf08      	it	eq
 800c0bc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800c0c0:	4621      	mov	r1, r4
 800c0c2:	4628      	mov	r0, r5
 800c0c4:	e023      	b.n	800c10e <floor+0x96>
 800c0c6:	4f29      	ldr	r7, [pc, #164]	@ (800c16c <floor+0xf4>)
 800c0c8:	4137      	asrs	r7, r6
 800c0ca:	ea01 0307 	and.w	r3, r1, r7
 800c0ce:	4303      	orrs	r3, r0
 800c0d0:	d01d      	beq.n	800c10e <floor+0x96>
 800c0d2:	a323      	add	r3, pc, #140	@ (adr r3, 800c160 <floor+0xe8>)
 800c0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d8:	f7f4 f8f8 	bl	80002cc <__adddf3>
 800c0dc:	2200      	movs	r2, #0
 800c0de:	2300      	movs	r3, #0
 800c0e0:	f7f4 fd3a 	bl	8000b58 <__aeabi_dcmpgt>
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	d0eb      	beq.n	800c0c0 <floor+0x48>
 800c0e8:	2c00      	cmp	r4, #0
 800c0ea:	bfbe      	ittt	lt
 800c0ec:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800c0f0:	4133      	asrlt	r3, r6
 800c0f2:	18e4      	addlt	r4, r4, r3
 800c0f4:	ea24 0407 	bic.w	r4, r4, r7
 800c0f8:	2500      	movs	r5, #0
 800c0fa:	e7e1      	b.n	800c0c0 <floor+0x48>
 800c0fc:	2e33      	cmp	r6, #51	@ 0x33
 800c0fe:	dd0a      	ble.n	800c116 <floor+0x9e>
 800c100:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800c104:	d103      	bne.n	800c10e <floor+0x96>
 800c106:	4602      	mov	r2, r0
 800c108:	460b      	mov	r3, r1
 800c10a:	f7f4 f8df 	bl	80002cc <__adddf3>
 800c10e:	ec41 0b10 	vmov	d0, r0, r1
 800c112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c116:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800c11a:	f04f 37ff 	mov.w	r7, #4294967295
 800c11e:	40df      	lsrs	r7, r3
 800c120:	4207      	tst	r7, r0
 800c122:	d0f4      	beq.n	800c10e <floor+0x96>
 800c124:	a30e      	add	r3, pc, #56	@ (adr r3, 800c160 <floor+0xe8>)
 800c126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c12a:	f7f4 f8cf 	bl	80002cc <__adddf3>
 800c12e:	2200      	movs	r2, #0
 800c130:	2300      	movs	r3, #0
 800c132:	f7f4 fd11 	bl	8000b58 <__aeabi_dcmpgt>
 800c136:	2800      	cmp	r0, #0
 800c138:	d0c2      	beq.n	800c0c0 <floor+0x48>
 800c13a:	2c00      	cmp	r4, #0
 800c13c:	da0a      	bge.n	800c154 <floor+0xdc>
 800c13e:	2e14      	cmp	r6, #20
 800c140:	d101      	bne.n	800c146 <floor+0xce>
 800c142:	3401      	adds	r4, #1
 800c144:	e006      	b.n	800c154 <floor+0xdc>
 800c146:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800c14a:	2301      	movs	r3, #1
 800c14c:	40b3      	lsls	r3, r6
 800c14e:	441d      	add	r5, r3
 800c150:	4545      	cmp	r5, r8
 800c152:	d3f6      	bcc.n	800c142 <floor+0xca>
 800c154:	ea25 0507 	bic.w	r5, r5, r7
 800c158:	e7b2      	b.n	800c0c0 <floor+0x48>
 800c15a:	2500      	movs	r5, #0
 800c15c:	462c      	mov	r4, r5
 800c15e:	e7af      	b.n	800c0c0 <floor+0x48>
 800c160:	8800759c 	.word	0x8800759c
 800c164:	7e37e43c 	.word	0x7e37e43c
 800c168:	bff00000 	.word	0xbff00000
 800c16c:	000fffff 	.word	0x000fffff

0800c170 <_init>:
 800c170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c172:	bf00      	nop
 800c174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c176:	bc08      	pop	{r3}
 800c178:	469e      	mov	lr, r3
 800c17a:	4770      	bx	lr

0800c17c <_fini>:
 800c17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c17e:	bf00      	nop
 800c180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c182:	bc08      	pop	{r3}
 800c184:	469e      	mov	lr, r3
 800c186:	4770      	bx	lr
