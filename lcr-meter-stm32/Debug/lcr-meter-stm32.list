
lcr-meter-stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bea0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000808  0800c070  0800c070  0000d070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c878  0800c878  0000e1f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c878  0800c878  0000d878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c880  0800c880  0000e1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c880  0800c880  0000d880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c884  0800c884  0000d884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800c888  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007dc  200001f0  0800ca78  0000e1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009cc  0800ca78  0000e9cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a6b  00000000  00000000  0000e220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003560  00000000  00000000  00025c8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b0  00000000  00000000  000291f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001013  00000000  00000000  0002a6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000260eb  00000000  00000000  0002b6b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ea4  00000000  00000000  0005179e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4fa7  00000000  00000000  0006b642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001505e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e24  00000000  00000000  0015062c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00157450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c058 	.word	0x0800c058

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	0800c058 	.word	0x0800c058

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b98a 	b.w	8000fb4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f826 	bl	8000cf8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_f2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	f7ff fc65 	bl	8000588 <__aeabi_f2d>
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf0 <__aeabi_f2ulz+0x38>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	4606      	mov	r6, r0
 8000cc4:	460f      	mov	r7, r1
 8000cc6:	f7ff fcb7 	bl	8000638 <__aeabi_dmul>
 8000cca:	f000 f975 	bl	8000fb8 <__aeabi_d2uiz>
 8000cce:	4604      	mov	r4, r0
 8000cd0:	f7ff fc38 	bl	8000544 <__aeabi_ui2d>
 8000cd4:	4b07      	ldr	r3, [pc, #28]	@ (8000cf4 <__aeabi_f2ulz+0x3c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f7ff fcae 	bl	8000638 <__aeabi_dmul>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	460b      	mov	r3, r1
 8000ce0:	4630      	mov	r0, r6
 8000ce2:	4639      	mov	r1, r7
 8000ce4:	f7ff faf0 	bl	80002c8 <__aeabi_dsub>
 8000ce8:	f000 f966 	bl	8000fb8 <__aeabi_d2uiz>
 8000cec:	4621      	mov	r1, r4
 8000cee:	bdd0      	pop	{r4, r6, r7, pc}
 8000cf0:	3df00000 	.word	0x3df00000
 8000cf4:	41f00000 	.word	0x41f00000

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	460c      	mov	r4, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14e      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d04:	4694      	mov	ip, r2
 8000d06:	458c      	cmp	ip, r1
 8000d08:	4686      	mov	lr, r0
 8000d0a:	fab2 f282 	clz	r2, r2
 8000d0e:	d962      	bls.n	8000dd6 <__udivmoddi4+0xde>
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0320 	rsb	r3, r2, #32
 8000d16:	4091      	lsls	r1, r2
 8000d18:	fa20 f303 	lsr.w	r3, r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	4319      	orrs	r1, r3
 8000d22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2a:	fa1f f68c 	uxth.w	r6, ip
 8000d2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb07 1114 	mls	r1, r7, r4, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb04 f106 	mul.w	r1, r4, r6
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d4e:	f080 8112 	bcs.w	8000f76 <__udivmoddi4+0x27e>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 810f 	bls.w	8000f76 <__udivmoddi4+0x27e>
 8000d58:	3c02      	subs	r4, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a59      	subs	r1, r3, r1
 8000d5e:	fa1f f38e 	uxth.w	r3, lr
 8000d62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d66:	fb07 1110 	mls	r1, r7, r0, r1
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb00 f606 	mul.w	r6, r0, r6
 8000d72:	429e      	cmp	r6, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x94>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d7e:	f080 80fc 	bcs.w	8000f7a <__udivmoddi4+0x282>
 8000d82:	429e      	cmp	r6, r3
 8000d84:	f240 80f9 	bls.w	8000f7a <__udivmoddi4+0x282>
 8000d88:	4463      	add	r3, ip
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d92:	2100      	movs	r1, #0
 8000d94:	b11d      	cbz	r5, 8000d9e <__udivmoddi4+0xa6>
 8000d96:	40d3      	lsrs	r3, r2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d905      	bls.n	8000db2 <__udivmoddi4+0xba>
 8000da6:	b10d      	cbz	r5, 8000dac <__udivmoddi4+0xb4>
 8000da8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	4608      	mov	r0, r1
 8000db0:	e7f5      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000db2:	fab3 f183 	clz	r1, r3
 8000db6:	2900      	cmp	r1, #0
 8000db8:	d146      	bne.n	8000e48 <__udivmoddi4+0x150>
 8000dba:	42a3      	cmp	r3, r4
 8000dbc:	d302      	bcc.n	8000dc4 <__udivmoddi4+0xcc>
 8000dbe:	4290      	cmp	r0, r2
 8000dc0:	f0c0 80f0 	bcc.w	8000fa4 <__udivmoddi4+0x2ac>
 8000dc4:	1a86      	subs	r6, r0, r2
 8000dc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dca:	2001      	movs	r0, #1
 8000dcc:	2d00      	cmp	r5, #0
 8000dce:	d0e6      	beq.n	8000d9e <__udivmoddi4+0xa6>
 8000dd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dd4:	e7e3      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	f040 8090 	bne.w	8000efc <__udivmoddi4+0x204>
 8000ddc:	eba1 040c 	sub.w	r4, r1, ip
 8000de0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de4:	fa1f f78c 	uxth.w	r7, ip
 8000de8:	2101      	movs	r1, #1
 8000dea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000df2:	fb08 4416 	mls	r4, r8, r6, r4
 8000df6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dfa:	fb07 f006 	mul.w	r0, r7, r6
 8000dfe:	4298      	cmp	r0, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x11c>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x11a>
 8000e0c:	4298      	cmp	r0, r3
 8000e0e:	f200 80cd 	bhi.w	8000fac <__udivmoddi4+0x2b4>
 8000e12:	4626      	mov	r6, r4
 8000e14:	1a1c      	subs	r4, r3, r0
 8000e16:	fa1f f38e 	uxth.w	r3, lr
 8000e1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb00 f707 	mul.w	r7, r0, r7
 8000e2a:	429f      	cmp	r7, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x148>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x146>
 8000e38:	429f      	cmp	r7, r3
 8000e3a:	f200 80b0 	bhi.w	8000f9e <__udivmoddi4+0x2a6>
 8000e3e:	4620      	mov	r0, r4
 8000e40:	1bdb      	subs	r3, r3, r7
 8000e42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e46:	e7a5      	b.n	8000d94 <__udivmoddi4+0x9c>
 8000e48:	f1c1 0620 	rsb	r6, r1, #32
 8000e4c:	408b      	lsls	r3, r1
 8000e4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e52:	431f      	orrs	r7, r3
 8000e54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e58:	fa04 f301 	lsl.w	r3, r4, r1
 8000e5c:	ea43 030c 	orr.w	r3, r3, ip
 8000e60:	40f4      	lsrs	r4, r6
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	0c38      	lsrs	r0, r7, #16
 8000e68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e70:	fa1f fc87 	uxth.w	ip, r7
 8000e74:	fb00 441e 	mls	r4, r0, lr, r4
 8000e78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e80:	45a1      	cmp	r9, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	d90a      	bls.n	8000e9e <__udivmoddi4+0x1a6>
 8000e88:	193c      	adds	r4, r7, r4
 8000e8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e8e:	f080 8084 	bcs.w	8000f9a <__udivmoddi4+0x2a2>
 8000e92:	45a1      	cmp	r9, r4
 8000e94:	f240 8081 	bls.w	8000f9a <__udivmoddi4+0x2a2>
 8000e98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	eba4 0409 	sub.w	r4, r4, r9
 8000ea2:	fa1f f983 	uxth.w	r9, r3
 8000ea6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eaa:	fb00 4413 	mls	r4, r0, r3, r4
 8000eae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb6:	45a4      	cmp	ip, r4
 8000eb8:	d907      	bls.n	8000eca <__udivmoddi4+0x1d2>
 8000eba:	193c      	adds	r4, r7, r4
 8000ebc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ec0:	d267      	bcs.n	8000f92 <__udivmoddi4+0x29a>
 8000ec2:	45a4      	cmp	ip, r4
 8000ec4:	d965      	bls.n	8000f92 <__udivmoddi4+0x29a>
 8000ec6:	3b02      	subs	r3, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ece:	fba0 9302 	umull	r9, r3, r0, r2
 8000ed2:	eba4 040c 	sub.w	r4, r4, ip
 8000ed6:	429c      	cmp	r4, r3
 8000ed8:	46ce      	mov	lr, r9
 8000eda:	469c      	mov	ip, r3
 8000edc:	d351      	bcc.n	8000f82 <__udivmoddi4+0x28a>
 8000ede:	d04e      	beq.n	8000f7e <__udivmoddi4+0x286>
 8000ee0:	b155      	cbz	r5, 8000ef8 <__udivmoddi4+0x200>
 8000ee2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ee6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eea:	fa04 f606 	lsl.w	r6, r4, r6
 8000eee:	40cb      	lsrs	r3, r1
 8000ef0:	431e      	orrs	r6, r3
 8000ef2:	40cc      	lsrs	r4, r1
 8000ef4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef8:	2100      	movs	r1, #0
 8000efa:	e750      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000efc:	f1c2 0320 	rsb	r3, r2, #32
 8000f00:	fa20 f103 	lsr.w	r1, r0, r3
 8000f04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f08:	fa24 f303 	lsr.w	r3, r4, r3
 8000f0c:	4094      	lsls	r4, r2
 8000f0e:	430c      	orrs	r4, r1
 8000f10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f18:	fa1f f78c 	uxth.w	r7, ip
 8000f1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f20:	fb08 3110 	mls	r1, r8, r0, r3
 8000f24:	0c23      	lsrs	r3, r4, #16
 8000f26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f2a:	fb00 f107 	mul.w	r1, r0, r7
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x24c>
 8000f32:	eb1c 0303 	adds.w	r3, ip, r3
 8000f36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f3a:	d22c      	bcs.n	8000f96 <__udivmoddi4+0x29e>
 8000f3c:	4299      	cmp	r1, r3
 8000f3e:	d92a      	bls.n	8000f96 <__udivmoddi4+0x29e>
 8000f40:	3802      	subs	r0, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	1a5b      	subs	r3, r3, r1
 8000f46:	b2a4      	uxth	r4, r4
 8000f48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f54:	fb01 f307 	mul.w	r3, r1, r7
 8000f58:	42a3      	cmp	r3, r4
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x276>
 8000f5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f64:	d213      	bcs.n	8000f8e <__udivmoddi4+0x296>
 8000f66:	42a3      	cmp	r3, r4
 8000f68:	d911      	bls.n	8000f8e <__udivmoddi4+0x296>
 8000f6a:	3902      	subs	r1, #2
 8000f6c:	4464      	add	r4, ip
 8000f6e:	1ae4      	subs	r4, r4, r3
 8000f70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f74:	e739      	b.n	8000dea <__udivmoddi4+0xf2>
 8000f76:	4604      	mov	r4, r0
 8000f78:	e6f0      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e706      	b.n	8000d8c <__udivmoddi4+0x94>
 8000f7e:	45c8      	cmp	r8, r9
 8000f80:	d2ae      	bcs.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f8a:	3801      	subs	r0, #1
 8000f8c:	e7a8      	b.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f8e:	4631      	mov	r1, r6
 8000f90:	e7ed      	b.n	8000f6e <__udivmoddi4+0x276>
 8000f92:	4603      	mov	r3, r0
 8000f94:	e799      	b.n	8000eca <__udivmoddi4+0x1d2>
 8000f96:	4630      	mov	r0, r6
 8000f98:	e7d4      	b.n	8000f44 <__udivmoddi4+0x24c>
 8000f9a:	46d6      	mov	lr, sl
 8000f9c:	e77f      	b.n	8000e9e <__udivmoddi4+0x1a6>
 8000f9e:	4463      	add	r3, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e74d      	b.n	8000e40 <__udivmoddi4+0x148>
 8000fa4:	4606      	mov	r6, r0
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e70f      	b.n	8000dcc <__udivmoddi4+0xd4>
 8000fac:	3e02      	subs	r6, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	e730      	b.n	8000e14 <__udivmoddi4+0x11c>
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <__aeabi_d2uiz>:
 8000fb8:	004a      	lsls	r2, r1, #1
 8000fba:	d211      	bcs.n	8000fe0 <__aeabi_d2uiz+0x28>
 8000fbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000fc0:	d211      	bcs.n	8000fe6 <__aeabi_d2uiz+0x2e>
 8000fc2:	d50d      	bpl.n	8000fe0 <__aeabi_d2uiz+0x28>
 8000fc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000fc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fcc:	d40e      	bmi.n	8000fec <__aeabi_d2uiz+0x34>
 8000fce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fda:	fa23 f002 	lsr.w	r0, r3, r2
 8000fde:	4770      	bx	lr
 8000fe0:	f04f 0000 	mov.w	r0, #0
 8000fe4:	4770      	bx	lr
 8000fe6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000fea:	d102      	bne.n	8000ff2 <__aeabi_d2uiz+0x3a>
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff0:	4770      	bx	lr
 8000ff2:	f04f 0000 	mov.w	r0, #0
 8000ff6:	4770      	bx	lr

08000ff8 <AD9833_write>:

// MaKE SURE THIS IS DEFINED IN THE main.c FILE
extern SPI_HandleTypeDef hspi1; // SPI handle (Assuming SPI1 is used)


void AD9833_write(uint8_t data_high, uint8_t data_low) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	460a      	mov	r2, r1
 8001002:	71fb      	strb	r3, [r7, #7]
 8001004:	4613      	mov	r3, r2
 8001006:	71bb      	strb	r3, [r7, #6]
    uint8_t data_out[2] = {data_high, data_low};
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	733b      	strb	r3, [r7, #12]
 800100c:	79bb      	ldrb	r3, [r7, #6]
 800100e:	737b      	strb	r3, [r7, #13]
    

    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;  // CPOL = 1 (Clock idle high)
 8001010:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <AD9833_write+0x5c>)
 8001012:	2202      	movs	r2, #2
 8001014:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;       // CPHA = 0 (Sample on the falling edge)
 8001016:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <AD9833_write+0x5c>)
 8001018:	2200      	movs	r2, #0
 800101a:	615a      	str	r2, [r3, #20]
    HAL_SPI_Init(&hspi1); // Restart the SPI module
 800101c:	480d      	ldr	r0, [pc, #52]	@ (8001054 <AD9833_write+0x5c>)
 800101e:	f004 fbdf 	bl	80057e0 <HAL_SPI_Init>

    HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001028:	480b      	ldr	r0, [pc, #44]	@ (8001058 <AD9833_write+0x60>)
 800102a:	f003 f95b 	bl	80042e4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data_out, 2, HAL_MAX_DELAY);
 800102e:	f107 010c 	add.w	r1, r7, #12
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
 8001036:	2202      	movs	r2, #2
 8001038:	4806      	ldr	r0, [pc, #24]	@ (8001054 <AD9833_write+0x5c>)
 800103a:	f004 fc5a 	bl	80058f2 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_SET);
 800103e:	2201      	movs	r2, #1
 8001040:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001044:	4804      	ldr	r0, [pc, #16]	@ (8001058 <AD9833_write+0x60>)
 8001046:	f003 f94d 	bl	80042e4 <HAL_GPIO_WritePin>
}
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000254 	.word	0x20000254
 8001058:	40020c00 	.word	0x40020c00

0800105c <AD9833_write4>:

void AD9833_write4(uint8_t data_l_high, uint8_t data_l_low, uint8_t data_h_high, uint8_t data_h_low) {
 800105c:	b590      	push	{r4, r7, lr}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	4604      	mov	r4, r0
 8001064:	4608      	mov	r0, r1
 8001066:	4611      	mov	r1, r2
 8001068:	461a      	mov	r2, r3
 800106a:	4623      	mov	r3, r4
 800106c:	71fb      	strb	r3, [r7, #7]
 800106e:	4603      	mov	r3, r0
 8001070:	71bb      	strb	r3, [r7, #6]
 8001072:	460b      	mov	r3, r1
 8001074:	717b      	strb	r3, [r7, #5]
 8001076:	4613      	mov	r3, r2
 8001078:	713b      	strb	r3, [r7, #4]
    uint8_t data_out[4] = {data_l_high, data_l_low, data_h_high, data_h_low};
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	733b      	strb	r3, [r7, #12]
 800107e:	79bb      	ldrb	r3, [r7, #6]
 8001080:	737b      	strb	r3, [r7, #13]
 8001082:	797b      	ldrb	r3, [r7, #5]
 8001084:	73bb      	strb	r3, [r7, #14]
 8001086:	793b      	ldrb	r3, [r7, #4]
 8001088:	73fb      	strb	r3, [r7, #15]

    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;  // CPOL = 1 (Clock idle high)
 800108a:	4b10      	ldr	r3, [pc, #64]	@ (80010cc <AD9833_write4+0x70>)
 800108c:	2202      	movs	r2, #2
 800108e:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;       // CPHA = 0 (Sample on the falling edge)
 8001090:	4b0e      	ldr	r3, [pc, #56]	@ (80010cc <AD9833_write4+0x70>)
 8001092:	2200      	movs	r2, #0
 8001094:	615a      	str	r2, [r3, #20]
    HAL_SPI_Init(&hspi1); // Restart the SPI module
 8001096:	480d      	ldr	r0, [pc, #52]	@ (80010cc <AD9833_write4+0x70>)
 8001098:	f004 fba2 	bl	80057e0 <HAL_SPI_Init>

    HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010a2:	480b      	ldr	r0, [pc, #44]	@ (80010d0 <AD9833_write4+0x74>)
 80010a4:	f003 f91e 	bl	80042e4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data_out, 4, HAL_MAX_DELAY);
 80010a8:	f107 010c 	add.w	r1, r7, #12
 80010ac:	f04f 33ff 	mov.w	r3, #4294967295
 80010b0:	2204      	movs	r2, #4
 80010b2:	4806      	ldr	r0, [pc, #24]	@ (80010cc <AD9833_write4+0x70>)
 80010b4:	f004 fc1d 	bl	80058f2 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_SET);
 80010b8:	2201      	movs	r2, #1
 80010ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010be:	4804      	ldr	r0, [pc, #16]	@ (80010d0 <AD9833_write4+0x74>)
 80010c0:	f003 f910 	bl	80042e4 <HAL_GPIO_WritePin>
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd90      	pop	{r4, r7, pc}
 80010cc:	20000254 	.word	0x20000254
 80010d0:	40020c00 	.word	0x40020c00

080010d4 <AD9833_set_freq>:

void AD9833_set_freq(float f) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	ed87 0a01 	vstr	s0, [r7, #4]
    AD9833_write(0b00100000, 0b10000000); // Control reg, start reset
 80010de:	2180      	movs	r1, #128	@ 0x80
 80010e0:	2020      	movs	r0, #32
 80010e2:	f7ff ff89 	bl	8000ff8 <AD9833_write>

    uint64_t FRQREG = (uint64_t)((f * (1 << 28)) / MASTER_CLK);
 80010e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ea:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001184 <AD9833_set_freq+0xb0>
 80010ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010f2:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001188 <AD9833_set_freq+0xb4>
 80010f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80010fa:	ee16 0a90 	vmov	r0, s13
 80010fe:	f7ff fddb 	bl	8000cb8 <__aeabi_f2ulz>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // Lower bytes
    uint16_t FL = FRQREG & 0x3FFF;
 800110a:	8a3b      	ldrh	r3, [r7, #16]
 800110c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001110:	81fb      	strh	r3, [r7, #14]
    uint8_t Llb = FL & 0xFF;
 8001112:	89fb      	ldrh	r3, [r7, #14]
 8001114:	737b      	strb	r3, [r7, #13]
    uint8_t Lhb = ((FL >> 8) & 0x3F) | 0b01000000;
 8001116:	89fb      	ldrh	r3, [r7, #14]
 8001118:	0a1b      	lsrs	r3, r3, #8
 800111a:	b29b      	uxth	r3, r3
 800111c:	b25b      	sxtb	r3, r3
 800111e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001122:	b25b      	sxtb	r3, r3
 8001124:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001128:	b25b      	sxtb	r3, r3
 800112a:	733b      	strb	r3, [r7, #12]

    // Higher bytes
    uint16_t FH = (FRQREG >> 14) & 0x3FFF;
 800112c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	f04f 0300 	mov.w	r3, #0
 8001138:	0b82      	lsrs	r2, r0, #14
 800113a:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 800113e:	0b8b      	lsrs	r3, r1, #14
 8001140:	b293      	uxth	r3, r2
 8001142:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001146:	817b      	strh	r3, [r7, #10]
    uint8_t Hlb = FH & 0xFF;
 8001148:	897b      	ldrh	r3, [r7, #10]
 800114a:	727b      	strb	r3, [r7, #9]
    uint8_t Hhb = ((FH >> 8) & 0x3F) | 0b01000000;
 800114c:	897b      	ldrh	r3, [r7, #10]
 800114e:	0a1b      	lsrs	r3, r3, #8
 8001150:	b29b      	uxth	r3, r3
 8001152:	b25b      	sxtb	r3, r3
 8001154:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001158:	b25b      	sxtb	r3, r3
 800115a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800115e:	b25b      	sxtb	r3, r3
 8001160:	723b      	strb	r3, [r7, #8]

    AD9833_write4(Lhb, Llb, Hhb, Hlb);
 8001162:	7a7b      	ldrb	r3, [r7, #9]
 8001164:	7a3a      	ldrb	r2, [r7, #8]
 8001166:	7b79      	ldrb	r1, [r7, #13]
 8001168:	7b38      	ldrb	r0, [r7, #12]
 800116a:	f7ff ff77 	bl	800105c <AD9833_write4>

    AD9833_write(0b00100000, 0b00000000); // Control reg, finish reset and configure IC
 800116e:	2100      	movs	r1, #0
 8001170:	2020      	movs	r0, #32
 8001172:	f7ff ff41 	bl	8000ff8 <AD9833_write>
    HAL_Delay(1);
 8001176:	2001      	movs	r0, #1
 8001178:	f002 fb78 	bl	800386c <HAL_Delay>
}
 800117c:	bf00      	nop
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	4d800000 	.word	0x4d800000
 8001188:	4bbebc20 	.word	0x4bbebc20

0800118c <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b089      	sub	sp, #36	@ 0x24
 8001190:	af02      	add	r7, sp, #8
 8001192:	4604      	mov	r4, r0
 8001194:	4608      	mov	r0, r1
 8001196:	4611      	mov	r1, r2
 8001198:	461a      	mov	r2, r3
 800119a:	4623      	mov	r3, r4
 800119c:	71fb      	strb	r3, [r7, #7]
 800119e:	4603      	mov	r3, r0
 80011a0:	71bb      	strb	r3, [r7, #6]
 80011a2:	460b      	mov	r3, r1
 80011a4:	717b      	strb	r3, [r7, #5]
 80011a6:	4613      	mov	r3, r2
 80011a8:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 80011ae:	7dfb      	ldrb	r3, [r7, #23]
 80011b0:	2b1f      	cmp	r3, #31
 80011b2:	d802      	bhi.n	80011ba <ILI9341_Draw_Char+0x2e>
        Character = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	71fb      	strb	r3, [r7, #7]
 80011b8:	e002      	b.n	80011c0 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 80011ba:	7dfb      	ldrb	r3, [r7, #23]
 80011bc:	3b20      	subs	r3, #32
 80011be:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80011c0:	2300      	movs	r3, #0
 80011c2:	753b      	strb	r3, [r7, #20]
 80011c4:	e012      	b.n	80011ec <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 80011c6:	7dfa      	ldrb	r2, [r7, #23]
 80011c8:	7d38      	ldrb	r0, [r7, #20]
 80011ca:	7d39      	ldrb	r1, [r7, #20]
 80011cc:	4c3b      	ldr	r4, [pc, #236]	@ (80012bc <ILI9341_Draw_Char+0x130>)
 80011ce:	4613      	mov	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	4413      	add	r3, r2
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	4423      	add	r3, r4
 80011d8:	4403      	add	r3, r0
 80011da:	781a      	ldrb	r2, [r3, #0]
 80011dc:	f101 0318 	add.w	r3, r1, #24
 80011e0:	443b      	add	r3, r7
 80011e2:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80011e6:	7d3b      	ldrb	r3, [r7, #20]
 80011e8:	3301      	adds	r3, #1
 80011ea:	753b      	strb	r3, [r7, #20]
 80011ec:	7d3b      	ldrb	r3, [r7, #20]
 80011ee:	2b05      	cmp	r3, #5
 80011f0:	d9e9      	bls.n	80011c6 <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 80011f2:	79bb      	ldrb	r3, [r7, #6]
 80011f4:	b298      	uxth	r0, r3
 80011f6:	797b      	ldrb	r3, [r7, #5]
 80011f8:	b299      	uxth	r1, r3
 80011fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80011fc:	461a      	mov	r2, r3
 80011fe:	0052      	lsls	r2, r2, #1
 8001200:	4413      	add	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	b29a      	uxth	r2, r3
 8001206:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	b29c      	uxth	r4, r3
 800120c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	4623      	mov	r3, r4
 8001212:	f000 fc63 	bl	8001adc <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8001216:	2300      	movs	r3, #0
 8001218:	757b      	strb	r3, [r7, #21]
 800121a:	e047      	b.n	80012ac <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 800121c:	2300      	movs	r3, #0
 800121e:	75bb      	strb	r3, [r7, #22]
 8001220:	e03e      	b.n	80012a0 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 8001222:	7d7b      	ldrb	r3, [r7, #21]
 8001224:	3318      	adds	r3, #24
 8001226:	443b      	add	r3, r7
 8001228:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800122c:	461a      	mov	r2, r3
 800122e:	7dbb      	ldrb	r3, [r7, #22]
 8001230:	fa42 f303 	asr.w	r3, r2, r3
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	2b00      	cmp	r3, #0
 800123a:	d02e      	beq.n	800129a <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 800123c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800123e:	2b01      	cmp	r3, #1
 8001240:	d110      	bne.n	8001264 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8001242:	79bb      	ldrb	r3, [r7, #6]
 8001244:	b29a      	uxth	r2, r3
 8001246:	7d7b      	ldrb	r3, [r7, #21]
 8001248:	b29b      	uxth	r3, r3
 800124a:	4413      	add	r3, r2
 800124c:	b298      	uxth	r0, r3
 800124e:	797b      	ldrb	r3, [r7, #5]
 8001250:	b29a      	uxth	r2, r3
 8001252:	7dbb      	ldrb	r3, [r7, #22]
 8001254:	b29b      	uxth	r3, r3
 8001256:	4413      	add	r3, r2
 8001258:	b29b      	uxth	r3, r3
 800125a:	887a      	ldrh	r2, [r7, #2]
 800125c:	4619      	mov	r1, r3
 800125e:	f000 fb61 	bl	8001924 <ILI9341_Draw_Pixel>
 8001262:	e01a      	b.n	800129a <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8001264:	79bb      	ldrb	r3, [r7, #6]
 8001266:	b29a      	uxth	r2, r3
 8001268:	7d7b      	ldrb	r3, [r7, #21]
 800126a:	b29b      	uxth	r3, r3
 800126c:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 800126e:	fb11 f303 	smulbb	r3, r1, r3
 8001272:	b29b      	uxth	r3, r3
 8001274:	4413      	add	r3, r2
 8001276:	b298      	uxth	r0, r3
 8001278:	797b      	ldrb	r3, [r7, #5]
 800127a:	b29a      	uxth	r2, r3
 800127c:	7dbb      	ldrb	r3, [r7, #22]
 800127e:	b29b      	uxth	r3, r3
 8001280:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8001282:	fb11 f303 	smulbb	r3, r1, r3
 8001286:	b29b      	uxth	r3, r3
 8001288:	4413      	add	r3, r2
 800128a:	b299      	uxth	r1, r3
 800128c:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 800128e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001290:	887b      	ldrh	r3, [r7, #2]
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	4623      	mov	r3, r4
 8001296:	f000 fc21 	bl	8001adc <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 800129a:	7dbb      	ldrb	r3, [r7, #22]
 800129c:	3301      	adds	r3, #1
 800129e:	75bb      	strb	r3, [r7, #22]
 80012a0:	7dbb      	ldrb	r3, [r7, #22]
 80012a2:	2b07      	cmp	r3, #7
 80012a4:	d9bd      	bls.n	8001222 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 80012a6:	7d7b      	ldrb	r3, [r7, #21]
 80012a8:	3301      	adds	r3, #1
 80012aa:	757b      	strb	r3, [r7, #21]
 80012ac:	7d7b      	ldrb	r3, [r7, #21]
 80012ae:	2b05      	cmp	r3, #5
 80012b0:	d9b4      	bls.n	800121c <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 80012b2:	bf00      	nop
 80012b4:	bf00      	nop
 80012b6:	371c      	adds	r7, #28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd90      	pop	{r4, r7, pc}
 80012bc:	0800c0a8 	.word	0x0800c0a8

080012c0 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af02      	add	r7, sp, #8
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	4608      	mov	r0, r1
 80012ca:	4611      	mov	r1, r2
 80012cc:	461a      	mov	r2, r3
 80012ce:	4603      	mov	r3, r0
 80012d0:	70fb      	strb	r3, [r7, #3]
 80012d2:	460b      	mov	r3, r1
 80012d4:	70bb      	strb	r3, [r7, #2]
 80012d6:	4613      	mov	r3, r2
 80012d8:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 80012da:	e017      	b.n	800130c <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	1c5a      	adds	r2, r3, #1
 80012e0:	607a      	str	r2, [r7, #4]
 80012e2:	7818      	ldrb	r0, [r3, #0]
 80012e4:	883c      	ldrh	r4, [r7, #0]
 80012e6:	78ba      	ldrb	r2, [r7, #2]
 80012e8:	78f9      	ldrb	r1, [r7, #3]
 80012ea:	8bbb      	ldrh	r3, [r7, #28]
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	8b3b      	ldrh	r3, [r7, #24]
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	4623      	mov	r3, r4
 80012f4:	f7ff ff4a 	bl	800118c <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 80012f8:	8b3b      	ldrh	r3, [r7, #24]
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	461a      	mov	r2, r3
 80012fe:	0052      	lsls	r2, r2, #1
 8001300:	4413      	add	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	b2da      	uxtb	r2, r3
 8001306:	78fb      	ldrb	r3, [r7, #3]
 8001308:	4413      	add	r3, r2
 800130a:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1e3      	bne.n	80012dc <ILI9341_Draw_Text+0x1c>
    }
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	bd90      	pop	{r4, r7, pc}
	...

08001320 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
//MX_SPI3_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8001324:	2200      	movs	r2, #0
 8001326:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800132a:	4802      	ldr	r0, [pc, #8]	@ (8001334 <ILI9341_SPI_Init+0x14>)
 800132c:	f002 ffda 	bl	80042e4 <HAL_GPIO_WritePin>
}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40021800 	.word	0x40021800

08001338 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8001342:	1df9      	adds	r1, r7, #7
 8001344:	2301      	movs	r3, #1
 8001346:	2201      	movs	r2, #1
 8001348:	4803      	ldr	r0, [pc, #12]	@ (8001358 <ILI9341_SPI_Send+0x20>)
 800134a:	f004 fad2 	bl	80058f2 <HAL_SPI_Transmit>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200002ac 	.word	0x200002ac

0800135c <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800136c:	480b      	ldr	r0, [pc, #44]	@ (800139c <ILI9341_Write_Command+0x40>)
 800136e:	f002 ffb9 	bl	80042e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001372:	2200      	movs	r2, #0
 8001374:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001378:	4809      	ldr	r0, [pc, #36]	@ (80013a0 <ILI9341_Write_Command+0x44>)
 800137a:	f002 ffb3 	bl	80042e4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ffd9 	bl	8001338 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001386:	2201      	movs	r2, #1
 8001388:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800138c:	4803      	ldr	r0, [pc, #12]	@ (800139c <ILI9341_Write_Command+0x40>)
 800138e:	f002 ffa9 	bl	80042e4 <HAL_GPIO_WritePin>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40021800 	.word	0x40021800
 80013a0:	40021400 	.word	0x40021400

080013a4 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80013ae:	2201      	movs	r2, #1
 80013b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013b4:	480b      	ldr	r0, [pc, #44]	@ (80013e4 <ILI9341_Write_Data+0x40>)
 80013b6:	f002 ff95 	bl	80042e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013c0:	4809      	ldr	r0, [pc, #36]	@ (80013e8 <ILI9341_Write_Data+0x44>)
 80013c2:	f002 ff8f 	bl	80042e4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ffb5 	bl	8001338 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80013ce:	2201      	movs	r2, #1
 80013d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013d4:	4804      	ldr	r0, [pc, #16]	@ (80013e8 <ILI9341_Write_Data+0x44>)
 80013d6:	f002 ff85 	bl	80042e4 <HAL_GPIO_WritePin>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40021400 	.word	0x40021400
 80013e8:	40021800 	.word	0x40021800

080013ec <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80013ec:	b590      	push	{r4, r7, lr}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4604      	mov	r4, r0
 80013f4:	4608      	mov	r0, r1
 80013f6:	4611      	mov	r1, r2
 80013f8:	461a      	mov	r2, r3
 80013fa:	4623      	mov	r3, r4
 80013fc:	80fb      	strh	r3, [r7, #6]
 80013fe:	4603      	mov	r3, r0
 8001400:	80bb      	strh	r3, [r7, #4]
 8001402:	460b      	mov	r3, r1
 8001404:	807b      	strh	r3, [r7, #2]
 8001406:	4613      	mov	r3, r2
 8001408:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 800140a:	202a      	movs	r0, #42	@ 0x2a
 800140c:	f7ff ffa6 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	0a1b      	lsrs	r3, r3, #8
 8001414:	b29b      	uxth	r3, r3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ffc3 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff ffbe 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8001428:	887b      	ldrh	r3, [r7, #2]
 800142a:	0a1b      	lsrs	r3, r3, #8
 800142c:	b29b      	uxth	r3, r3
 800142e:	b2db      	uxtb	r3, r3
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ffb7 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8001436:	887b      	ldrh	r3, [r7, #2]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff ffb2 	bl	80013a4 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8001440:	202b      	movs	r0, #43	@ 0x2b
 8001442:	f7ff ff8b 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8001446:	88bb      	ldrh	r3, [r7, #4]
 8001448:	0a1b      	lsrs	r3, r3, #8
 800144a:	b29b      	uxth	r3, r3
 800144c:	b2db      	uxtb	r3, r3
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff ffa8 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8001454:	88bb      	ldrh	r3, [r7, #4]
 8001456:	b2db      	uxtb	r3, r3
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ffa3 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 800145e:	883b      	ldrh	r3, [r7, #0]
 8001460:	0a1b      	lsrs	r3, r3, #8
 8001462:	b29b      	uxth	r3, r3
 8001464:	b2db      	uxtb	r3, r3
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff ff9c 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 800146c:	883b      	ldrh	r3, [r7, #0]
 800146e:	b2db      	uxtb	r3, r3
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff97 	bl	80013a4 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8001476:	202c      	movs	r0, #44	@ 0x2c
 8001478:	f7ff ff70 	bl	800135c <ILI9341_Write_Command>
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	bd90      	pop	{r4, r7, pc}

08001484 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8001488:	2200      	movs	r2, #0
 800148a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800148e:	480b      	ldr	r0, [pc, #44]	@ (80014bc <ILI9341_Reset+0x38>)
 8001490:	f002 ff28 	bl	80042e4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001494:	20c8      	movs	r0, #200	@ 0xc8
 8001496:	f002 f9e9 	bl	800386c <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
 800149c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014a0:	4806      	ldr	r0, [pc, #24]	@ (80014bc <ILI9341_Reset+0x38>)
 80014a2:	f002 ff1f 	bl	80042e4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80014a6:	20c8      	movs	r0, #200	@ 0xc8
 80014a8:	f002 f9e0 	bl	800386c <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80014ac:	2201      	movs	r2, #1
 80014ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80014b2:	4802      	ldr	r0, [pc, #8]	@ (80014bc <ILI9341_Reset+0x38>)
 80014b4:	f002 ff16 	bl	80042e4 <HAL_GPIO_WritePin>
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40021800 	.word	0x40021800

080014c0 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80014ce:	2036      	movs	r0, #54	@ 0x36
 80014d0:	f7ff ff44 	bl	800135c <ILI9341_Write_Command>
HAL_Delay(1);
 80014d4:	2001      	movs	r0, #1
 80014d6:	f002 f9c9 	bl	800386c <HAL_Delay>
	
switch(screen_rotation) 
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	2b03      	cmp	r3, #3
 80014de:	d837      	bhi.n	8001550 <ILI9341_Set_Rotation+0x90>
 80014e0:	a201      	add	r2, pc, #4	@ (adr r2, 80014e8 <ILI9341_Set_Rotation+0x28>)
 80014e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e6:	bf00      	nop
 80014e8:	080014f9 	.word	0x080014f9
 80014ec:	0800150f 	.word	0x0800150f
 80014f0:	08001525 	.word	0x08001525
 80014f4:	0800153b 	.word	0x0800153b
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80014f8:	2048      	movs	r0, #72	@ 0x48
 80014fa:	f7ff ff53 	bl	80013a4 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 80014fe:	4b17      	ldr	r3, [pc, #92]	@ (800155c <ILI9341_Set_Rotation+0x9c>)
 8001500:	22f0      	movs	r2, #240	@ 0xf0
 8001502:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001504:	4b16      	ldr	r3, [pc, #88]	@ (8001560 <ILI9341_Set_Rotation+0xa0>)
 8001506:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800150a:	801a      	strh	r2, [r3, #0]
			break;
 800150c:	e021      	b.n	8001552 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 800150e:	2028      	movs	r0, #40	@ 0x28
 8001510:	f7ff ff48 	bl	80013a4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001514:	4b11      	ldr	r3, [pc, #68]	@ (800155c <ILI9341_Set_Rotation+0x9c>)
 8001516:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800151a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800151c:	4b10      	ldr	r3, [pc, #64]	@ (8001560 <ILI9341_Set_Rotation+0xa0>)
 800151e:	22f0      	movs	r2, #240	@ 0xf0
 8001520:	801a      	strh	r2, [r3, #0]
			break;
 8001522:	e016      	b.n	8001552 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8001524:	2088      	movs	r0, #136	@ 0x88
 8001526:	f7ff ff3d 	bl	80013a4 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 800152a:	4b0c      	ldr	r3, [pc, #48]	@ (800155c <ILI9341_Set_Rotation+0x9c>)
 800152c:	22f0      	movs	r2, #240	@ 0xf0
 800152e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001530:	4b0b      	ldr	r3, [pc, #44]	@ (8001560 <ILI9341_Set_Rotation+0xa0>)
 8001532:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001536:	801a      	strh	r2, [r3, #0]
			break;
 8001538:	e00b      	b.n	8001552 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 800153a:	20e8      	movs	r0, #232	@ 0xe8
 800153c:	f7ff ff32 	bl	80013a4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001540:	4b06      	ldr	r3, [pc, #24]	@ (800155c <ILI9341_Set_Rotation+0x9c>)
 8001542:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001546:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001548:	4b05      	ldr	r3, [pc, #20]	@ (8001560 <ILI9341_Set_Rotation+0xa0>)
 800154a:	22f0      	movs	r2, #240	@ 0xf0
 800154c:	801a      	strh	r2, [r3, #0]
			break;
 800154e:	e000      	b.n	8001552 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8001550:	bf00      	nop
	}
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000002 	.word	0x20000002
 8001560:	20000000 	.word	0x20000000

08001564 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8001568:	2201      	movs	r2, #1
 800156a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800156e:	4802      	ldr	r0, [pc, #8]	@ (8001578 <ILI9341_Enable+0x14>)
 8001570:	f002 feb8 	bl	80042e4 <HAL_GPIO_WritePin>
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40021800 	.word	0x40021800

0800157c <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8001580:	f7ff fff0 	bl	8001564 <ILI9341_Enable>
ILI9341_SPI_Init();
 8001584:	f7ff fecc 	bl	8001320 <ILI9341_SPI_Init>
ILI9341_Reset();
 8001588:	f7ff ff7c 	bl	8001484 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 800158c:	2001      	movs	r0, #1
 800158e:	f7ff fee5 	bl	800135c <ILI9341_Write_Command>
HAL_Delay(1000);
 8001592:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001596:	f002 f969 	bl	800386c <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 800159a:	20cb      	movs	r0, #203	@ 0xcb
 800159c:	f7ff fede 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80015a0:	2039      	movs	r0, #57	@ 0x39
 80015a2:	f7ff feff 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80015a6:	202c      	movs	r0, #44	@ 0x2c
 80015a8:	f7ff fefc 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80015ac:	2000      	movs	r0, #0
 80015ae:	f7ff fef9 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80015b2:	2034      	movs	r0, #52	@ 0x34
 80015b4:	f7ff fef6 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80015b8:	2002      	movs	r0, #2
 80015ba:	f7ff fef3 	bl	80013a4 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80015be:	20cf      	movs	r0, #207	@ 0xcf
 80015c0:	f7ff fecc 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80015c4:	2000      	movs	r0, #0
 80015c6:	f7ff feed 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80015ca:	20c1      	movs	r0, #193	@ 0xc1
 80015cc:	f7ff feea 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80015d0:	2030      	movs	r0, #48	@ 0x30
 80015d2:	f7ff fee7 	bl	80013a4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80015d6:	20e8      	movs	r0, #232	@ 0xe8
 80015d8:	f7ff fec0 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80015dc:	2085      	movs	r0, #133	@ 0x85
 80015de:	f7ff fee1 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80015e2:	2000      	movs	r0, #0
 80015e4:	f7ff fede 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80015e8:	2078      	movs	r0, #120	@ 0x78
 80015ea:	f7ff fedb 	bl	80013a4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80015ee:	20ea      	movs	r0, #234	@ 0xea
 80015f0:	f7ff feb4 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80015f4:	2000      	movs	r0, #0
 80015f6:	f7ff fed5 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80015fa:	2000      	movs	r0, #0
 80015fc:	f7ff fed2 	bl	80013a4 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8001600:	20ed      	movs	r0, #237	@ 0xed
 8001602:	f7ff feab 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8001606:	2064      	movs	r0, #100	@ 0x64
 8001608:	f7ff fecc 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800160c:	2003      	movs	r0, #3
 800160e:	f7ff fec9 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8001612:	2012      	movs	r0, #18
 8001614:	f7ff fec6 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8001618:	2081      	movs	r0, #129	@ 0x81
 800161a:	f7ff fec3 	bl	80013a4 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 800161e:	20f7      	movs	r0, #247	@ 0xf7
 8001620:	f7ff fe9c 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8001624:	2020      	movs	r0, #32
 8001626:	f7ff febd 	bl	80013a4 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 800162a:	20c0      	movs	r0, #192	@ 0xc0
 800162c:	f7ff fe96 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8001630:	2023      	movs	r0, #35	@ 0x23
 8001632:	f7ff feb7 	bl	80013a4 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8001636:	20c1      	movs	r0, #193	@ 0xc1
 8001638:	f7ff fe90 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 800163c:	2010      	movs	r0, #16
 800163e:	f7ff feb1 	bl	80013a4 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8001642:	20c5      	movs	r0, #197	@ 0xc5
 8001644:	f7ff fe8a 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8001648:	203e      	movs	r0, #62	@ 0x3e
 800164a:	f7ff feab 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 800164e:	2028      	movs	r0, #40	@ 0x28
 8001650:	f7ff fea8 	bl	80013a4 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8001654:	20c7      	movs	r0, #199	@ 0xc7
 8001656:	f7ff fe81 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 800165a:	2086      	movs	r0, #134	@ 0x86
 800165c:	f7ff fea2 	bl	80013a4 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8001660:	2036      	movs	r0, #54	@ 0x36
 8001662:	f7ff fe7b 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8001666:	2048      	movs	r0, #72	@ 0x48
 8001668:	f7ff fe9c 	bl	80013a4 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 800166c:	203a      	movs	r0, #58	@ 0x3a
 800166e:	f7ff fe75 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8001672:	2055      	movs	r0, #85	@ 0x55
 8001674:	f7ff fe96 	bl	80013a4 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8001678:	20b1      	movs	r0, #177	@ 0xb1
 800167a:	f7ff fe6f 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800167e:	2000      	movs	r0, #0
 8001680:	f7ff fe90 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8001684:	2018      	movs	r0, #24
 8001686:	f7ff fe8d 	bl	80013a4 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 800168a:	20b6      	movs	r0, #182	@ 0xb6
 800168c:	f7ff fe66 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8001690:	2008      	movs	r0, #8
 8001692:	f7ff fe87 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8001696:	2082      	movs	r0, #130	@ 0x82
 8001698:	f7ff fe84 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 800169c:	2027      	movs	r0, #39	@ 0x27
 800169e:	f7ff fe81 	bl	80013a4 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80016a2:	20f2      	movs	r0, #242	@ 0xf2
 80016a4:	f7ff fe5a 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80016a8:	2000      	movs	r0, #0
 80016aa:	f7ff fe7b 	bl	80013a4 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80016ae:	2026      	movs	r0, #38	@ 0x26
 80016b0:	f7ff fe54 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80016b4:	2001      	movs	r0, #1
 80016b6:	f7ff fe75 	bl	80013a4 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 80016ba:	20e0      	movs	r0, #224	@ 0xe0
 80016bc:	f7ff fe4e 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80016c0:	200f      	movs	r0, #15
 80016c2:	f7ff fe6f 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80016c6:	2031      	movs	r0, #49	@ 0x31
 80016c8:	f7ff fe6c 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80016cc:	202b      	movs	r0, #43	@ 0x2b
 80016ce:	f7ff fe69 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80016d2:	200c      	movs	r0, #12
 80016d4:	f7ff fe66 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80016d8:	200e      	movs	r0, #14
 80016da:	f7ff fe63 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80016de:	2008      	movs	r0, #8
 80016e0:	f7ff fe60 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80016e4:	204e      	movs	r0, #78	@ 0x4e
 80016e6:	f7ff fe5d 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80016ea:	20f1      	movs	r0, #241	@ 0xf1
 80016ec:	f7ff fe5a 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80016f0:	2037      	movs	r0, #55	@ 0x37
 80016f2:	f7ff fe57 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80016f6:	2007      	movs	r0, #7
 80016f8:	f7ff fe54 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 80016fc:	2010      	movs	r0, #16
 80016fe:	f7ff fe51 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001702:	2003      	movs	r0, #3
 8001704:	f7ff fe4e 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001708:	200e      	movs	r0, #14
 800170a:	f7ff fe4b 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 800170e:	2009      	movs	r0, #9
 8001710:	f7ff fe48 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001714:	2000      	movs	r0, #0
 8001716:	f7ff fe45 	bl	80013a4 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 800171a:	20e1      	movs	r0, #225	@ 0xe1
 800171c:	f7ff fe1e 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001720:	2000      	movs	r0, #0
 8001722:	f7ff fe3f 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001726:	200e      	movs	r0, #14
 8001728:	f7ff fe3c 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 800172c:	2014      	movs	r0, #20
 800172e:	f7ff fe39 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001732:	2003      	movs	r0, #3
 8001734:	f7ff fe36 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8001738:	2011      	movs	r0, #17
 800173a:	f7ff fe33 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800173e:	2007      	movs	r0, #7
 8001740:	f7ff fe30 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001744:	2031      	movs	r0, #49	@ 0x31
 8001746:	f7ff fe2d 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800174a:	20c1      	movs	r0, #193	@ 0xc1
 800174c:	f7ff fe2a 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8001750:	2048      	movs	r0, #72	@ 0x48
 8001752:	f7ff fe27 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001756:	2008      	movs	r0, #8
 8001758:	f7ff fe24 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 800175c:	200f      	movs	r0, #15
 800175e:	f7ff fe21 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001762:	200c      	movs	r0, #12
 8001764:	f7ff fe1e 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001768:	2031      	movs	r0, #49	@ 0x31
 800176a:	f7ff fe1b 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 800176e:	2036      	movs	r0, #54	@ 0x36
 8001770:	f7ff fe18 	bl	80013a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001774:	200f      	movs	r0, #15
 8001776:	f7ff fe15 	bl	80013a4 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 800177a:	2011      	movs	r0, #17
 800177c:	f7ff fdee 	bl	800135c <ILI9341_Write_Command>
HAL_Delay(120);
 8001780:	2078      	movs	r0, #120	@ 0x78
 8001782:	f002 f873 	bl	800386c <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8001786:	2029      	movs	r0, #41	@ 0x29
 8001788:	f7ff fde8 	bl	800135c <ILI9341_Write_Command>


//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800178c:	2000      	movs	r0, #0
 800178e:	f7ff fe97 	bl	80014c0 <ILI9341_Set_Rotation>


}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8001798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800179c:	b08d      	sub	sp, #52	@ 0x34
 800179e:	af00      	add	r7, sp, #0
 80017a0:	4603      	mov	r3, r0
 80017a2:	6039      	str	r1, [r7, #0]
 80017a4:	80fb      	strh	r3, [r7, #6]
 80017a6:	466b      	mov	r3, sp
 80017a8:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
if((Size*2) < BURST_MAX_SIZE)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80017b6:	d202      	bcs.n	80017be <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017bc:	e002      	b.n	80017c4 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 80017be:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80017c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80017c4:	2201      	movs	r2, #1
 80017c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017ca:	4840      	ldr	r0, [pc, #256]	@ (80018cc <ILI9341_Draw_Colour_Burst+0x134>)
 80017cc:	f002 fd8a 	bl	80042e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80017d0:	2200      	movs	r2, #0
 80017d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017d6:	483e      	ldr	r0, [pc, #248]	@ (80018d0 <ILI9341_Draw_Colour_Burst+0x138>)
 80017d8:	f002 fd84 	bl	80042e4 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 80017dc:	88fb      	ldrh	r3, [r7, #6]
 80017de:	0a1b      	lsrs	r3, r3, #8
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
unsigned char burst_buffer[Buffer_Size];
 80017e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80017e8:	460b      	mov	r3, r1
 80017ea:	3b01      	subs	r3, #1
 80017ec:	61fb      	str	r3, [r7, #28]
 80017ee:	2300      	movs	r3, #0
 80017f0:	4688      	mov	r8, r1
 80017f2:	4699      	mov	r9, r3
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	f04f 0300 	mov.w	r3, #0
 80017fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001800:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001804:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001808:	2300      	movs	r3, #0
 800180a:	460c      	mov	r4, r1
 800180c:	461d      	mov	r5, r3
 800180e:	f04f 0200 	mov.w	r2, #0
 8001812:	f04f 0300 	mov.w	r3, #0
 8001816:	00eb      	lsls	r3, r5, #3
 8001818:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800181c:	00e2      	lsls	r2, r4, #3
 800181e:	1dcb      	adds	r3, r1, #7
 8001820:	08db      	lsrs	r3, r3, #3
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	ebad 0d03 	sub.w	sp, sp, r3
 8001828:	466b      	mov	r3, sp
 800182a:	3300      	adds	r3, #0
 800182c:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 800182e:	2300      	movs	r3, #0
 8001830:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001832:	e00e      	b.n	8001852 <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001838:	4413      	add	r3, r2
 800183a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800183e:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8001840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001842:	3301      	adds	r3, #1
 8001844:	88fa      	ldrh	r2, [r7, #6]
 8001846:	b2d1      	uxtb	r1, r2
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 800184c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800184e:	3302      	adds	r3, #2
 8001850:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001852:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001856:	429a      	cmp	r2, r3
 8001858:	d3ec      	bcc.n	8001834 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001864:	fbb2 f3f3 	udiv	r3, r2, r3
 8001868:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800186e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001872:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001874:	fb01 f202 	mul.w	r2, r1, r2
 8001878:	1a9b      	subs	r3, r3, r2
 800187a:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d010      	beq.n	80018a4 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001882:	2300      	movs	r3, #0
 8001884:	627b      	str	r3, [r7, #36]	@ 0x24
 8001886:	e009      	b.n	800189c <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8001888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800188a:	b29a      	uxth	r2, r3
 800188c:	230a      	movs	r3, #10
 800188e:	69b9      	ldr	r1, [r7, #24]
 8001890:	4810      	ldr	r0, [pc, #64]	@ (80018d4 <ILI9341_Draw_Colour_Burst+0x13c>)
 8001892:	f004 f82e 	bl	80058f2 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001898:	3301      	adds	r3, #1
 800189a:	627b      	str	r3, [r7, #36]	@ 0x24
 800189c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d3f1      	bcc.n	8001888 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	230a      	movs	r3, #10
 80018aa:	69b9      	ldr	r1, [r7, #24]
 80018ac:	4809      	ldr	r0, [pc, #36]	@ (80018d4 <ILI9341_Draw_Colour_Burst+0x13c>)
 80018ae:	f004 f820 	bl	80058f2 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80018b2:	2201      	movs	r2, #1
 80018b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018b8:	4805      	ldr	r0, [pc, #20]	@ (80018d0 <ILI9341_Draw_Colour_Burst+0x138>)
 80018ba:	f002 fd13 	bl	80042e4 <HAL_GPIO_WritePin>
 80018be:	46b5      	mov	sp, r6
}
 80018c0:	bf00      	nop
 80018c2:	3734      	adds	r7, #52	@ 0x34
 80018c4:	46bd      	mov	sp, r7
 80018c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018ca:	bf00      	nop
 80018cc:	40021400 	.word	0x40021400
 80018d0:	40021800 	.word	0x40021800
 80018d4:	200002ac 	.word	0x200002ac

080018d8 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 80018e2:	4b0e      	ldr	r3, [pc, #56]	@ (800191c <ILI9341_Fill_Screen+0x44>)
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001920 <ILI9341_Fill_Screen+0x48>)
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	2100      	movs	r1, #0
 80018f0:	2000      	movs	r0, #0
 80018f2:	f7ff fd7b 	bl	80013ec <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 80018f6:	4b09      	ldr	r3, [pc, #36]	@ (800191c <ILI9341_Fill_Screen+0x44>)
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	461a      	mov	r2, r3
 80018fe:	4b08      	ldr	r3, [pc, #32]	@ (8001920 <ILI9341_Fill_Screen+0x48>)
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	b29b      	uxth	r3, r3
 8001904:	fb02 f303 	mul.w	r3, r2, r3
 8001908:	461a      	mov	r2, r3
 800190a:	88fb      	ldrh	r3, [r7, #6]
 800190c:	4611      	mov	r1, r2
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff ff42 	bl	8001798 <ILI9341_Draw_Colour_Burst>
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000002 	.word	0x20000002
 8001920:	20000000 	.word	0x20000000

08001924 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	80fb      	strh	r3, [r7, #6]
 800192e:	460b      	mov	r3, r1
 8001930:	80bb      	strh	r3, [r7, #4]
 8001932:	4613      	mov	r3, r2
 8001934:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001936:	4b64      	ldr	r3, [pc, #400]	@ (8001ac8 <ILI9341_Draw_Pixel+0x1a4>)
 8001938:	881b      	ldrh	r3, [r3, #0]
 800193a:	b29b      	uxth	r3, r3
 800193c:	88fa      	ldrh	r2, [r7, #6]
 800193e:	429a      	cmp	r2, r3
 8001940:	f080 80be 	bcs.w	8001ac0 <ILI9341_Draw_Pixel+0x19c>
 8001944:	4b61      	ldr	r3, [pc, #388]	@ (8001acc <ILI9341_Draw_Pixel+0x1a8>)
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	b29b      	uxth	r3, r3
 800194a:	88ba      	ldrh	r2, [r7, #4]
 800194c:	429a      	cmp	r2, r3
 800194e:	f080 80b7 	bcs.w	8001ac0 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001952:	2200      	movs	r2, #0
 8001954:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001958:	485d      	ldr	r0, [pc, #372]	@ (8001ad0 <ILI9341_Draw_Pixel+0x1ac>)
 800195a:	f002 fcc3 	bl	80042e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800195e:	2200      	movs	r2, #0
 8001960:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001964:	485b      	ldr	r0, [pc, #364]	@ (8001ad4 <ILI9341_Draw_Pixel+0x1b0>)
 8001966:	f002 fcbd 	bl	80042e4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 800196a:	202a      	movs	r0, #42	@ 0x2a
 800196c:	f7ff fce4 	bl	8001338 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001970:	2201      	movs	r2, #1
 8001972:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001976:	4856      	ldr	r0, [pc, #344]	@ (8001ad0 <ILI9341_Draw_Pixel+0x1ac>)
 8001978:	f002 fcb4 	bl	80042e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 800197c:	2201      	movs	r2, #1
 800197e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001982:	4854      	ldr	r0, [pc, #336]	@ (8001ad4 <ILI9341_Draw_Pixel+0x1b0>)
 8001984:	f002 fcae 	bl	80042e4 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001988:	2200      	movs	r2, #0
 800198a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800198e:	4851      	ldr	r0, [pc, #324]	@ (8001ad4 <ILI9341_Draw_Pixel+0x1b0>)
 8001990:	f002 fca8 	bl	80042e4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8001994:	88fb      	ldrh	r3, [r7, #6]
 8001996:	0a1b      	lsrs	r3, r3, #8
 8001998:	b29b      	uxth	r3, r3
 800199a:	b2db      	uxtb	r3, r3
 800199c:	753b      	strb	r3, [r7, #20]
 800199e:	88fb      	ldrh	r3, [r7, #6]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	757b      	strb	r3, [r7, #21]
 80019a4:	88fb      	ldrh	r3, [r7, #6]
 80019a6:	3301      	adds	r3, #1
 80019a8:	121b      	asrs	r3, r3, #8
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	75bb      	strb	r3, [r7, #22]
 80019ae:	88fb      	ldrh	r3, [r7, #6]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	3301      	adds	r3, #1
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 80019b8:	f107 0114 	add.w	r1, r7, #20
 80019bc:	2301      	movs	r3, #1
 80019be:	2204      	movs	r2, #4
 80019c0:	4845      	ldr	r0, [pc, #276]	@ (8001ad8 <ILI9341_Draw_Pixel+0x1b4>)
 80019c2:	f003 ff96 	bl	80058f2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80019c6:	2201      	movs	r2, #1
 80019c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019cc:	4841      	ldr	r0, [pc, #260]	@ (8001ad4 <ILI9341_Draw_Pixel+0x1b0>)
 80019ce:	f002 fc89 	bl	80042e4 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80019d2:	2200      	movs	r2, #0
 80019d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019d8:	483d      	ldr	r0, [pc, #244]	@ (8001ad0 <ILI9341_Draw_Pixel+0x1ac>)
 80019da:	f002 fc83 	bl	80042e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80019de:	2200      	movs	r2, #0
 80019e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019e4:	483b      	ldr	r0, [pc, #236]	@ (8001ad4 <ILI9341_Draw_Pixel+0x1b0>)
 80019e6:	f002 fc7d 	bl	80042e4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 80019ea:	202b      	movs	r0, #43	@ 0x2b
 80019ec:	f7ff fca4 	bl	8001338 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80019f0:	2201      	movs	r2, #1
 80019f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019f6:	4836      	ldr	r0, [pc, #216]	@ (8001ad0 <ILI9341_Draw_Pixel+0x1ac>)
 80019f8:	f002 fc74 	bl	80042e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80019fc:	2201      	movs	r2, #1
 80019fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a02:	4834      	ldr	r0, [pc, #208]	@ (8001ad4 <ILI9341_Draw_Pixel+0x1b0>)
 8001a04:	f002 fc6e 	bl	80042e4 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a0e:	4831      	ldr	r0, [pc, #196]	@ (8001ad4 <ILI9341_Draw_Pixel+0x1b0>)
 8001a10:	f002 fc68 	bl	80042e4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8001a14:	88bb      	ldrh	r3, [r7, #4]
 8001a16:	0a1b      	lsrs	r3, r3, #8
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	743b      	strb	r3, [r7, #16]
 8001a1e:	88bb      	ldrh	r3, [r7, #4]
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	747b      	strb	r3, [r7, #17]
 8001a24:	88bb      	ldrh	r3, [r7, #4]
 8001a26:	3301      	adds	r3, #1
 8001a28:	121b      	asrs	r3, r3, #8
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	74bb      	strb	r3, [r7, #18]
 8001a2e:	88bb      	ldrh	r3, [r7, #4]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	3301      	adds	r3, #1
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8001a38:	f107 0110 	add.w	r1, r7, #16
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	2204      	movs	r2, #4
 8001a40:	4825      	ldr	r0, [pc, #148]	@ (8001ad8 <ILI9341_Draw_Pixel+0x1b4>)
 8001a42:	f003 ff56 	bl	80058f2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001a46:	2201      	movs	r2, #1
 8001a48:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a4c:	4821      	ldr	r0, [pc, #132]	@ (8001ad4 <ILI9341_Draw_Pixel+0x1b0>)
 8001a4e:	f002 fc49 	bl	80042e4 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001a52:	2200      	movs	r2, #0
 8001a54:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a58:	481d      	ldr	r0, [pc, #116]	@ (8001ad0 <ILI9341_Draw_Pixel+0x1ac>)
 8001a5a:	f002 fc43 	bl	80042e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a64:	481b      	ldr	r0, [pc, #108]	@ (8001ad4 <ILI9341_Draw_Pixel+0x1b0>)
 8001a66:	f002 fc3d 	bl	80042e4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8001a6a:	202c      	movs	r0, #44	@ 0x2c
 8001a6c:	f7ff fc64 	bl	8001338 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8001a70:	2201      	movs	r2, #1
 8001a72:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a76:	4816      	ldr	r0, [pc, #88]	@ (8001ad0 <ILI9341_Draw_Pixel+0x1ac>)
 8001a78:	f002 fc34 	bl	80042e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a82:	4814      	ldr	r0, [pc, #80]	@ (8001ad4 <ILI9341_Draw_Pixel+0x1b0>)
 8001a84:	f002 fc2e 	bl	80042e4 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a8e:	4811      	ldr	r0, [pc, #68]	@ (8001ad4 <ILI9341_Draw_Pixel+0x1b0>)
 8001a90:	f002 fc28 	bl	80042e4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8001a94:	887b      	ldrh	r3, [r7, #2]
 8001a96:	0a1b      	lsrs	r3, r3, #8
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	733b      	strb	r3, [r7, #12]
 8001a9e:	887b      	ldrh	r3, [r7, #2]
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8001aa4:	f107 010c 	add.w	r1, r7, #12
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	2202      	movs	r2, #2
 8001aac:	480a      	ldr	r0, [pc, #40]	@ (8001ad8 <ILI9341_Draw_Pixel+0x1b4>)
 8001aae:	f003 ff20 	bl	80058f2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ab8:	4806      	ldr	r0, [pc, #24]	@ (8001ad4 <ILI9341_Draw_Pixel+0x1b0>)
 8001aba:	f002 fc13 	bl	80042e4 <HAL_GPIO_WritePin>
 8001abe:	e000      	b.n	8001ac2 <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001ac0:	bf00      	nop
	
}
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20000002 	.word	0x20000002
 8001acc:	20000000 	.word	0x20000000
 8001ad0:	40021400 	.word	0x40021400
 8001ad4:	40021800 	.word	0x40021800
 8001ad8:	200002ac 	.word	0x200002ac

08001adc <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8001adc:	b590      	push	{r4, r7, lr}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4604      	mov	r4, r0
 8001ae4:	4608      	mov	r0, r1
 8001ae6:	4611      	mov	r1, r2
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4623      	mov	r3, r4
 8001aec:	80fb      	strh	r3, [r7, #6]
 8001aee:	4603      	mov	r3, r0
 8001af0:	80bb      	strh	r3, [r7, #4]
 8001af2:	460b      	mov	r3, r1
 8001af4:	807b      	strh	r3, [r7, #2]
 8001af6:	4613      	mov	r3, r2
 8001af8:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001afa:	4b24      	ldr	r3, [pc, #144]	@ (8001b8c <ILI9341_Draw_Rectangle+0xb0>)
 8001afc:	881b      	ldrh	r3, [r3, #0]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	88fa      	ldrh	r2, [r7, #6]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d23d      	bcs.n	8001b82 <ILI9341_Draw_Rectangle+0xa6>
 8001b06:	4b22      	ldr	r3, [pc, #136]	@ (8001b90 <ILI9341_Draw_Rectangle+0xb4>)
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	88ba      	ldrh	r2, [r7, #4]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d237      	bcs.n	8001b82 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8001b12:	88fa      	ldrh	r2, [r7, #6]
 8001b14:	887b      	ldrh	r3, [r7, #2]
 8001b16:	4413      	add	r3, r2
 8001b18:	4a1c      	ldr	r2, [pc, #112]	@ (8001b8c <ILI9341_Draw_Rectangle+0xb0>)
 8001b1a:	8812      	ldrh	r2, [r2, #0]
 8001b1c:	b292      	uxth	r2, r2
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	dd05      	ble.n	8001b2e <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8001b22:	4b1a      	ldr	r3, [pc, #104]	@ (8001b8c <ILI9341_Draw_Rectangle+0xb0>)
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	88fb      	ldrh	r3, [r7, #6]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8001b2e:	88ba      	ldrh	r2, [r7, #4]
 8001b30:	883b      	ldrh	r3, [r7, #0]
 8001b32:	4413      	add	r3, r2
 8001b34:	4a16      	ldr	r2, [pc, #88]	@ (8001b90 <ILI9341_Draw_Rectangle+0xb4>)
 8001b36:	8812      	ldrh	r2, [r2, #0]
 8001b38:	b292      	uxth	r2, r2
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	dd05      	ble.n	8001b4a <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8001b3e:	4b14      	ldr	r3, [pc, #80]	@ (8001b90 <ILI9341_Draw_Rectangle+0xb4>)
 8001b40:	881b      	ldrh	r3, [r3, #0]
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	88bb      	ldrh	r3, [r7, #4]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8001b4a:	88fa      	ldrh	r2, [r7, #6]
 8001b4c:	887b      	ldrh	r3, [r7, #2]
 8001b4e:	4413      	add	r3, r2
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	3b01      	subs	r3, #1
 8001b54:	b29c      	uxth	r4, r3
 8001b56:	88ba      	ldrh	r2, [r7, #4]
 8001b58:	883b      	ldrh	r3, [r7, #0]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	88b9      	ldrh	r1, [r7, #4]
 8001b64:	88f8      	ldrh	r0, [r7, #6]
 8001b66:	4622      	mov	r2, r4
 8001b68:	f7ff fc40 	bl	80013ec <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8001b6c:	883b      	ldrh	r3, [r7, #0]
 8001b6e:	887a      	ldrh	r2, [r7, #2]
 8001b70:	fb02 f303 	mul.w	r3, r2, r3
 8001b74:	461a      	mov	r2, r3
 8001b76:	8b3b      	ldrh	r3, [r7, #24]
 8001b78:	4611      	mov	r1, r2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fe0c 	bl	8001798 <ILI9341_Draw_Colour_Burst>
 8001b80:	e000      	b.n	8001b84 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001b82:	bf00      	nop
}
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd90      	pop	{r4, r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000002 	.word	0x20000002
 8001b90:	20000000 	.word	0x20000000

08001b94 <ADC_Channel0>:

// MaKE SURE THIS IS DEFINED IN THE main.c FILE
extern SPI_HandleTypeDef hspi1; // SPI handle (Assuming SPI1 is used)

// Function to read from ADC Channel 0 (CH0)
float ADC_Channel0(void) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af02      	add	r7, sp, #8
    uint8_t data_out[2] = { MCP3202_CH0, 0x00 };
 8001b9a:	23d0      	movs	r3, #208	@ 0xd0
 8001b9c:	80bb      	strh	r3, [r7, #4]
    uint8_t data_in[2] = { 0x00, 0x00 };
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	803b      	strh	r3, [r7, #0]


    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;   // CPOL = 0 (Clock idle Low)
 8001ba2:	4b20      	ldr	r3, [pc, #128]	@ (8001c24 <ADC_Channel0+0x90>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;       // CPHA = 0 (Sample on the falling edge)
 8001ba8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c24 <ADC_Channel0+0x90>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	615a      	str	r2, [r3, #20]
    HAL_SPI_Init(&hspi1); // Restart the SPI module
 8001bae:	481d      	ldr	r0, [pc, #116]	@ (8001c24 <ADC_Channel0+0x90>)
 8001bb0:	f003 fe16 	bl	80057e0 <HAL_SPI_Init>

    // Transmit and receive data via SPI
    HAL_GPIO_WritePin(MCP3202_NCS_GPIO_Port, MCP3202_NCS_Pin, GPIO_PIN_RESET);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bba:	481b      	ldr	r0, [pc, #108]	@ (8001c28 <ADC_Channel0+0x94>)
 8001bbc:	f002 fb92 	bl	80042e4 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, data_out, data_in, 2, HAL_MAX_DELAY);
 8001bc0:	463a      	mov	r2, r7
 8001bc2:	1d39      	adds	r1, r7, #4
 8001bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	2302      	movs	r3, #2
 8001bcc:	4815      	ldr	r0, [pc, #84]	@ (8001c24 <ADC_Channel0+0x90>)
 8001bce:	f003 ffd4 	bl	8005b7a <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(MCP3202_NCS_GPIO_Port, MCP3202_NCS_Pin, GPIO_PIN_SET);
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bd8:	4813      	ldr	r0, [pc, #76]	@ (8001c28 <ADC_Channel0+0x94>)
 8001bda:	f002 fb83 	bl	80042e4 <HAL_GPIO_WritePin>

    // Combine the received bytes to form the 12-bit ADC value
    uint16_t adc_value = ((data_in[0] & 0x0F) << 8) | data_in[1];
 8001bde:	783b      	ldrb	r3, [r7, #0]
 8001be0:	021b      	lsls	r3, r3, #8
 8001be2:	b21b      	sxth	r3, r3
 8001be4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001be8:	b21a      	sxth	r2, r3
 8001bea:	787b      	ldrb	r3, [r7, #1]
 8001bec:	b21b      	sxth	r3, r3
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	b21b      	sxth	r3, r3
 8001bf2:	81fb      	strh	r3, [r7, #14]

    // Calculate the voltage based on the 3.3V reference and 12-bit ADC resolution
    float voltage = 3.3f * adc_value / (float)(1 << 11); // 12-bit resolution (2^12)
 8001bf4:	89fb      	ldrh	r3, [r7, #14]
 8001bf6:	ee07 3a90 	vmov	s15, r3
 8001bfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bfe:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001c2c <ADC_Channel0+0x98>
 8001c02:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c06:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8001c30 <ADC_Channel0+0x9c>
 8001c0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c0e:	edc7 7a02 	vstr	s15, [r7, #8]

    return voltage;
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	ee07 3a90 	vmov	s15, r3
}
 8001c18:	eeb0 0a67 	vmov.f32	s0, s15
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000254 	.word	0x20000254
 8001c28:	40020c00 	.word	0x40020c00
 8001c2c:	40533333 	.word	0x40533333
 8001c30:	45000000 	.word	0x45000000

08001c34 <ADC_Channel1>:

// Function to read from ADC Channel 1 (CH1)
float ADC_Channel1(void) {
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af02      	add	r7, sp, #8
    uint8_t data_out[2] = { MCP3202_CH1, 0x00 };
 8001c3a:	23f0      	movs	r3, #240	@ 0xf0
 8001c3c:	80bb      	strh	r3, [r7, #4]
    uint8_t data_in[2] = { 0x00, 0x00 };
 8001c3e:	2300      	movs	r3, #0
 8001c40:	803b      	strh	r3, [r7, #0]


    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;   // CPOL = 0 (Clock idle Low)
 8001c42:	4b20      	ldr	r3, [pc, #128]	@ (8001cc4 <ADC_Channel1+0x90>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;       // CPHA = 0 (Sample on the falling edge)
 8001c48:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc4 <ADC_Channel1+0x90>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	615a      	str	r2, [r3, #20]
    HAL_SPI_Init(&hspi1); // Restart the SPI module
 8001c4e:	481d      	ldr	r0, [pc, #116]	@ (8001cc4 <ADC_Channel1+0x90>)
 8001c50:	f003 fdc6 	bl	80057e0 <HAL_SPI_Init>

    // Transmit and receive data via SPI
    HAL_GPIO_WritePin(MCP3202_NCS_GPIO_Port, MCP3202_NCS_Pin, GPIO_PIN_RESET);
 8001c54:	2200      	movs	r2, #0
 8001c56:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c5a:	481b      	ldr	r0, [pc, #108]	@ (8001cc8 <ADC_Channel1+0x94>)
 8001c5c:	f002 fb42 	bl	80042e4 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, data_out, data_in, 2, HAL_MAX_DELAY);
 8001c60:	463a      	mov	r2, r7
 8001c62:	1d39      	adds	r1, r7, #4
 8001c64:	f04f 33ff 	mov.w	r3, #4294967295
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	4815      	ldr	r0, [pc, #84]	@ (8001cc4 <ADC_Channel1+0x90>)
 8001c6e:	f003 ff84 	bl	8005b7a <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(MCP3202_NCS_GPIO_Port, MCP3202_NCS_Pin, GPIO_PIN_SET);
 8001c72:	2201      	movs	r2, #1
 8001c74:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c78:	4813      	ldr	r0, [pc, #76]	@ (8001cc8 <ADC_Channel1+0x94>)
 8001c7a:	f002 fb33 	bl	80042e4 <HAL_GPIO_WritePin>

    // Combine the received bytes to form the 12-bit ADC value
    uint16_t adc_value = ((data_in[0] & 0x0F) << 8) | data_in[1];
 8001c7e:	783b      	ldrb	r3, [r7, #0]
 8001c80:	021b      	lsls	r3, r3, #8
 8001c82:	b21b      	sxth	r3, r3
 8001c84:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001c88:	b21a      	sxth	r2, r3
 8001c8a:	787b      	ldrb	r3, [r7, #1]
 8001c8c:	b21b      	sxth	r3, r3
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	b21b      	sxth	r3, r3
 8001c92:	81fb      	strh	r3, [r7, #14]

    // Calculate the voltage based on the 3.3V reference and 12-bit ADC resolution
    float voltage = 3.3f * adc_value / (float)(1 << 11); // 12-bit resolution (2^12)
 8001c94:	89fb      	ldrh	r3, [r7, #14]
 8001c96:	ee07 3a90 	vmov	s15, r3
 8001c9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c9e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001ccc <ADC_Channel1+0x98>
 8001ca2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ca6:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8001cd0 <ADC_Channel1+0x9c>
 8001caa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cae:	edc7 7a02 	vstr	s15, [r7, #8]

    return voltage;
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	ee07 3a90 	vmov	s15, r3
}
 8001cb8:	eeb0 0a67 	vmov.f32	s0, s15
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000254 	.word	0x20000254
 8001cc8:	40020c00 	.word	0x40020c00
 8001ccc:	40533333 	.word	0x40533333
 8001cd0:	45000000 	.word	0x45000000
 8001cd4:	00000000 	.word	0x00000000

08001cd8 <Show_Stats>:
/* USER CODE BEGIN 0 */

uint32_t frequency = 1000;
int FREQ_UPDATE_NEEDED = 1; // Flag to tell the system that it needs to update the test frequency.

void Show_Stats(float reactance, float resistance, float frequency){
 8001cd8:	b5b0      	push	{r4, r5, r7, lr}
 8001cda:	b09a      	sub	sp, #104	@ 0x68
 8001cdc:	af02      	add	r7, sp, #8
 8001cde:	ed87 0a03 	vstr	s0, [r7, #12]
 8001ce2:	edc7 0a02 	vstr	s1, [r7, #8]
 8001ce6:	ed87 1a01 	vstr	s2, [r7, #4]
	ILI9341_Fill_Screen(WHITE);
 8001cea:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001cee:	f7ff fdf3 	bl	80018d8 <ILI9341_Fill_Screen>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001cf2:	2003      	movs	r0, #3
 8001cf4:	f7ff fbe4 	bl	80014c0 <ILI9341_Set_Rotation>

	double X = (double) reactance;
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f7fe fc45 	bl	8000588 <__aeabi_f2d>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	double R = (double) resistance;
 8001d06:	68b8      	ldr	r0, [r7, #8]
 8001d08:	f7fe fc3e 	bl	8000588 <__aeabi_f2d>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

	// Make sure in project properties to add the linker flag -u _printf_float

    char buffer[50]; // Buffer to hold the formatted string
	if (X < 0){
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001d20:	f7fe fefc 	bl	8000b1c <__aeabi_dcmplt>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d038      	beq.n	8001d9c <Show_Stats+0xc4>
		float capacitance = -1e9 / (2 * M_PI * frequency * X);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7fe fc2c 	bl	8000588 <__aeabi_f2d>
 8001d30:	a357      	add	r3, pc, #348	@ (adr r3, 8001e90 <Show_Stats+0x1b8>)
 8001d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d36:	f7fe fc7f 	bl	8000638 <__aeabi_dmul>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4610      	mov	r0, r2
 8001d40:	4619      	mov	r1, r3
 8001d42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001d46:	f7fe fc77 	bl	8000638 <__aeabi_dmul>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	a157      	add	r1, pc, #348	@ (adr r1, 8001eac <Show_Stats+0x1d4>)
 8001d50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d54:	f7fe fd9a 	bl	800088c <__aeabi_ddiv>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f7fe ff42 	bl	8000be8 <__aeabi_d2f>
 8001d64:	4603      	mov	r3, r0
 8001d66:	64bb      	str	r3, [r7, #72]	@ 0x48
		snprintf(buffer, sizeof(buffer), "Cs: %.2f nF", capacitance);
 8001d68:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001d6a:	f7fe fc0d 	bl	8000588 <__aeabi_f2d>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	f107 0014 	add.w	r0, r7, #20
 8001d76:	e9cd 2300 	strd	r2, r3, [sp]
 8001d7a:	4a47      	ldr	r2, [pc, #284]	@ (8001e98 <Show_Stats+0x1c0>)
 8001d7c:	2132      	movs	r1, #50	@ 0x32
 8001d7e:	f006 f8cf 	bl	8007f20 <sniprintf>
		ILI9341_Draw_Text(buffer, 10, 60, BLACK, 2, WHITE);
 8001d82:	f107 0014 	add.w	r0, r7, #20
 8001d86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d8a:	9301      	str	r3, [sp, #4]
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	2300      	movs	r3, #0
 8001d92:	223c      	movs	r2, #60	@ 0x3c
 8001d94:	210a      	movs	r1, #10
 8001d96:	f7ff fa93 	bl	80012c0 <ILI9341_Draw_Text>
 8001d9a:	e039      	b.n	8001e10 <Show_Stats+0x138>
	} else {
        float inductance = X * 1e6 / (2 * M_PI * frequency);
 8001d9c:	a33a      	add	r3, pc, #232	@ (adr r3, 8001e88 <Show_Stats+0x1b0>)
 8001d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001da6:	f7fe fc47 	bl	8000638 <__aeabi_dmul>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	4614      	mov	r4, r2
 8001db0:	461d      	mov	r5, r3
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7fe fbe8 	bl	8000588 <__aeabi_f2d>
 8001db8:	a335      	add	r3, pc, #212	@ (adr r3, 8001e90 <Show_Stats+0x1b8>)
 8001dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dbe:	f7fe fc3b 	bl	8000638 <__aeabi_dmul>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4620      	mov	r0, r4
 8001dc8:	4629      	mov	r1, r5
 8001dca:	f7fe fd5f 	bl	800088c <__aeabi_ddiv>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f7fe ff07 	bl	8000be8 <__aeabi_d2f>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
        snprintf(buffer, sizeof(buffer), "Ls: %.2f uH", inductance);
 8001dde:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001de0:	f7fe fbd2 	bl	8000588 <__aeabi_f2d>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	f107 0014 	add.w	r0, r7, #20
 8001dec:	e9cd 2300 	strd	r2, r3, [sp]
 8001df0:	4a2a      	ldr	r2, [pc, #168]	@ (8001e9c <Show_Stats+0x1c4>)
 8001df2:	2132      	movs	r1, #50	@ 0x32
 8001df4:	f006 f894 	bl	8007f20 <sniprintf>
        ILI9341_Draw_Text(buffer, 10, 60, BLACK, 2, WHITE);
 8001df8:	f107 0014 	add.w	r0, r7, #20
 8001dfc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e00:	9301      	str	r3, [sp, #4]
 8001e02:	2302      	movs	r3, #2
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	2300      	movs	r3, #0
 8001e08:	223c      	movs	r2, #60	@ 0x3c
 8001e0a:	210a      	movs	r1, #10
 8001e0c:	f7ff fa58 	bl	80012c0 <ILI9341_Draw_Text>
	}

	snprintf(buffer, sizeof(buffer), "ESR: %.2f Ohms", R);
 8001e10:	f107 0014 	add.w	r0, r7, #20
 8001e14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001e18:	e9cd 2300 	strd	r2, r3, [sp]
 8001e1c:	4a20      	ldr	r2, [pc, #128]	@ (8001ea0 <Show_Stats+0x1c8>)
 8001e1e:	2132      	movs	r1, #50	@ 0x32
 8001e20:	f006 f87e 	bl	8007f20 <sniprintf>
	ILI9341_Draw_Text(buffer, 10, 120, BLACK, 2, WHITE);
 8001e24:	f107 0014 	add.w	r0, r7, #20
 8001e28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e2c:	9301      	str	r3, [sp, #4]
 8001e2e:	2302      	movs	r3, #2
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	2300      	movs	r3, #0
 8001e34:	2278      	movs	r2, #120	@ 0x78
 8001e36:	210a      	movs	r1, #10
 8001e38:	f7ff fa42 	bl	80012c0 <ILI9341_Draw_Text>


	snprintf(buffer, sizeof(buffer), "Freq: %.2f kHz", frequency / 1000);
 8001e3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e40:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001ea4 <Show_Stats+0x1cc>
 8001e44:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e48:	ee16 0a90 	vmov	r0, s13
 8001e4c:	f7fe fb9c 	bl	8000588 <__aeabi_f2d>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	f107 0014 	add.w	r0, r7, #20
 8001e58:	e9cd 2300 	strd	r2, r3, [sp]
 8001e5c:	4a12      	ldr	r2, [pc, #72]	@ (8001ea8 <Show_Stats+0x1d0>)
 8001e5e:	2132      	movs	r1, #50	@ 0x32
 8001e60:	f006 f85e 	bl	8007f20 <sniprintf>
	ILI9341_Draw_Text(buffer, 10, 180, BLACK, 2, WHITE);
 8001e64:	f107 0014 	add.w	r0, r7, #20
 8001e68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	2302      	movs	r3, #2
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	2300      	movs	r3, #0
 8001e74:	22b4      	movs	r2, #180	@ 0xb4
 8001e76:	210a      	movs	r1, #10
 8001e78:	f7ff fa22 	bl	80012c0 <ILI9341_Draw_Text>
}
 8001e7c:	bf00      	nop
 8001e7e:	3760      	adds	r7, #96	@ 0x60
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bdb0      	pop	{r4, r5, r7, pc}
 8001e84:	f3af 8000 	nop.w
 8001e88:	00000000 	.word	0x00000000
 8001e8c:	412e8480 	.word	0x412e8480
 8001e90:	54442d18 	.word	0x54442d18
 8001e94:	401921fb 	.word	0x401921fb
 8001e98:	0800c070 	.word	0x0800c070
 8001e9c:	0800c07c 	.word	0x0800c07c
 8001ea0:	0800c088 	.word	0x0800c088
 8001ea4:	447a0000 	.word	0x447a0000
 8001ea8:	0800c098 	.word	0x0800c098
 8001eac:	00000000 	.word	0x00000000
 8001eb0:	c1cdcd65 	.word	0xc1cdcd65

08001eb4 <Get_Time_us>:

uint32_t Get_Time_us(void) {
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim2); // Read timer
 8001eb8:	4b03      	ldr	r3, [pc, #12]	@ (8001ec8 <Get_Time_us+0x14>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	20000304 	.word	0x20000304
 8001ecc:	00000000 	.word	0x00000000

08001ed0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ed4:	b0aa      	sub	sp, #168	@ 0xa8
 8001ed6:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ed8:	f001 fc56 	bl	8003788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001edc:	f000 fab6 	bl	800244c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ee0:	f000 fc82 	bl	80027e8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001ee4:	f000 fc28 	bl	8002738 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001ee8:	f000 fc50 	bl	800278c <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8001eec:	f000 fb1a 	bl	8002524 <MX_ADC1_Init>
  MX_SPI1_Init();
 8001ef0:	f000 fb6a 	bl	80025c8 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001ef4:	f000 fbd4 	bl	80026a0 <MX_TIM2_Init>
  MX_SPI3_Init();
 8001ef8:	f000 fb9c 	bl	8002634 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */


  int n_points = 1000;
 8001efc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  int sample_delay = 1;
 8001f04:	2301      	movs	r3, #1
 8001f06:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

  uint32_t start_time;

  int i = 0; // Array index counter
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	67fb      	str	r3, [r7, #124]	@ 0x7c

  // All the data must be floating point, as the nucleo board I'm using doesn't have enough memory for double.
  float ch0_data[n_points];
 8001f0e:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001f12:	1e4b      	subs	r3, r1, #1
 8001f14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001f16:	460a      	mov	r2, r1
 8001f18:	2300      	movs	r3, #0
 8001f1a:	4614      	mov	r4, r2
 8001f1c:	461d      	mov	r5, r3
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	f04f 0300 	mov.w	r3, #0
 8001f26:	016b      	lsls	r3, r5, #5
 8001f28:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001f2c:	0162      	lsls	r2, r4, #5
 8001f2e:	460a      	mov	r2, r1
 8001f30:	2300      	movs	r3, #0
 8001f32:	4690      	mov	r8, r2
 8001f34:	4699      	mov	r9, r3
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	f04f 0300 	mov.w	r3, #0
 8001f3e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001f42:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001f46:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	3307      	adds	r3, #7
 8001f50:	08db      	lsrs	r3, r3, #3
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	ebad 0d03 	sub.w	sp, sp, r3
 8001f58:	ab02      	add	r3, sp, #8
 8001f5a:	3303      	adds	r3, #3
 8001f5c:	089b      	lsrs	r3, r3, #2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	677b      	str	r3, [r7, #116]	@ 0x74
  float ch0_time[n_points];
 8001f62:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001f66:	1e4b      	subs	r3, r1, #1
 8001f68:	673b      	str	r3, [r7, #112]	@ 0x70
 8001f6a:	460a      	mov	r2, r1
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	4692      	mov	sl, r2
 8001f70:	469b      	mov	fp, r3
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	f04f 0300 	mov.w	r3, #0
 8001f7a:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8001f7e:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8001f82:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8001f86:	460a      	mov	r2, r1
 8001f88:	2300      	movs	r3, #0
 8001f8a:	623a      	str	r2, [r7, #32]
 8001f8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f8e:	f04f 0200 	mov.w	r2, #0
 8001f92:	f04f 0300 	mov.w	r3, #0
 8001f96:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001f9a:	4628      	mov	r0, r5
 8001f9c:	0143      	lsls	r3, r0, #5
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	0142      	lsls	r2, r0, #5
 8001fa8:	460b      	mov	r3, r1
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	3307      	adds	r3, #7
 8001fae:	08db      	lsrs	r3, r3, #3
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	ebad 0d03 	sub.w	sp, sp, r3
 8001fb6:	ab02      	add	r3, sp, #8
 8001fb8:	3303      	adds	r3, #3
 8001fba:	089b      	lsrs	r3, r3, #2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  memset(ch0_data, 0, n_points);  // Set all bytes in the array to 0
 8001fc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001fca:	f006 f820 	bl	800800e <memset>
  memset(ch0_time, 0, n_points);  // Set all bytes in the array to 0
 8001fce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001fd8:	f006 f819 	bl	800800e <memset>

  float ch1_data[n_points];
 8001fdc:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001fe0:	1e4b      	subs	r3, r1, #1
 8001fe2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001fe4:	460a      	mov	r2, r1
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61ba      	str	r2, [r7, #24]
 8001fea:	61fb      	str	r3, [r7, #28]
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	f04f 0300 	mov.w	r3, #0
 8001ff4:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001ff8:	4628      	mov	r0, r5
 8001ffa:	0143      	lsls	r3, r0, #5
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002002:	4620      	mov	r0, r4
 8002004:	0142      	lsls	r2, r0, #5
 8002006:	460a      	mov	r2, r1
 8002008:	2300      	movs	r3, #0
 800200a:	613a      	str	r2, [r7, #16]
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	f04f 0200 	mov.w	r2, #0
 8002012:	f04f 0300 	mov.w	r3, #0
 8002016:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800201a:	4628      	mov	r0, r5
 800201c:	0143      	lsls	r3, r0, #5
 800201e:	4620      	mov	r0, r4
 8002020:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002024:	4620      	mov	r0, r4
 8002026:	0142      	lsls	r2, r0, #5
 8002028:	460b      	mov	r3, r1
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	3307      	adds	r3, #7
 800202e:	08db      	lsrs	r3, r3, #3
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	ebad 0d03 	sub.w	sp, sp, r3
 8002036:	ab02      	add	r3, sp, #8
 8002038:	3303      	adds	r3, #3
 800203a:	089b      	lsrs	r3, r3, #2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	667b      	str	r3, [r7, #100]	@ 0x64
  float ch1_time[n_points];
 8002040:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002044:	1e4b      	subs	r3, r1, #1
 8002046:	663b      	str	r3, [r7, #96]	@ 0x60
 8002048:	460a      	mov	r2, r1
 800204a:	2300      	movs	r3, #0
 800204c:	60ba      	str	r2, [r7, #8]
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	f04f 0300 	mov.w	r3, #0
 8002058:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800205c:	4628      	mov	r0, r5
 800205e:	0143      	lsls	r3, r0, #5
 8002060:	4620      	mov	r0, r4
 8002062:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002066:	4620      	mov	r0, r4
 8002068:	0142      	lsls	r2, r0, #5
 800206a:	460a      	mov	r2, r1
 800206c:	2300      	movs	r3, #0
 800206e:	603a      	str	r2, [r7, #0]
 8002070:	607b      	str	r3, [r7, #4]
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	f04f 0300 	mov.w	r3, #0
 800207a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800207e:	4628      	mov	r0, r5
 8002080:	0143      	lsls	r3, r0, #5
 8002082:	4620      	mov	r0, r4
 8002084:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002088:	4620      	mov	r0, r4
 800208a:	0142      	lsls	r2, r0, #5
 800208c:	460b      	mov	r3, r1
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	3307      	adds	r3, #7
 8002092:	08db      	lsrs	r3, r3, #3
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	ebad 0d03 	sub.w	sp, sp, r3
 800209a:	ab02      	add	r3, sp, #8
 800209c:	3303      	adds	r3, #3
 800209e:	089b      	lsrs	r3, r3, #2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  memset(ch1_time, 0, n_points);  // Set all bytes in the array to 0
 80020a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80020a8:	461a      	mov	r2, r3
 80020aa:	2100      	movs	r1, #0
 80020ac:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80020ae:	f005 ffae 	bl	800800e <memset>
  memset(ch1_data, 0, n_points);  // Set all bytes in the array to 0
 80020b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80020b6:	461a      	mov	r2, r3
 80020b8:	2100      	movs	r1, #0
 80020ba:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80020bc:	f005 ffa7 	bl	800800e <memset>


  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80020c0:	4b27      	ldr	r3, [pc, #156]	@ (8002160 <main+0x290>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2200      	movs	r2, #0
 80020c6:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start(&htim2);
 80020c8:	4825      	ldr	r0, [pc, #148]	@ (8002160 <main+0x290>)
 80020ca:	f004 f82b 	bl	8006124 <HAL_TIM_Base_Start>


  start_time = Get_Time_us();
 80020ce:	f7ff fef1 	bl	8001eb4 <Get_Time_us>
 80020d2:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

  float load_amplitude = 0;
 80020d6:	f04f 0300 	mov.w	r3, #0
 80020da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float load_phase = 0;
 80020dc:	f04f 0300 	mov.w	r3, #0
 80020e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  float load_offset = 0;
 80020e2:	f04f 0300 	mov.w	r3, #0
 80020e6:	637b      	str	r3, [r7, #52]	@ 0x34

  float shunt_amplitude = 0;
 80020e8:	f04f 0300 	mov.w	r3, #0
 80020ec:	633b      	str	r3, [r7, #48]	@ 0x30
  float shunt_phase = 0;
 80020ee:	f04f 0300 	mov.w	r3, #0
 80020f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  float shunt_offset = 0;
 80020f4:	f04f 0300 	mov.w	r3, #0
 80020f8:	62bb      	str	r3, [r7, #40]	@ 0x28


  ILI9341_Init(); // This messses with somthing, which causxes the signal generation to be incorrect
 80020fa:	f7ff fa3f 	bl	800157c <ILI9341_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if (FREQ_UPDATE_NEEDED > 0) {
 80020fe:	4b19      	ldr	r3, [pc, #100]	@ (8002164 <main+0x294>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	dd16      	ble.n	8002134 <main+0x264>
		  AD9833_set_freq(frequency);
 8002106:	4b18      	ldr	r3, [pc, #96]	@ (8002168 <main+0x298>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	ee07 3a90 	vmov	s15, r3
 800210e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002112:	eeb0 0a67 	vmov.f32	s0, s15
 8002116:	f7fe ffdd 	bl	80010d4 <AD9833_set_freq>
		  AD9833_set_freq(frequency);
 800211a:	4b13      	ldr	r3, [pc, #76]	@ (8002168 <main+0x298>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	ee07 3a90 	vmov	s15, r3
 8002122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002126:	eeb0 0a67 	vmov.f32	s0, s15
 800212a:	f7fe ffd3 	bl	80010d4 <AD9833_set_freq>
		  // for some reason can't be changed by just reconfiguring the SPI bus (as I am doing in the
		  // AD9833 driver) but rather actually requires an spi transfer to initiate the correct
		  // Polarity clock for the start of the next transfer. This is required because the AD9833
		  // Requires the clock to idle HIGH before the CS/FSYNC pin goes low. I'm too lazy to figure
		  // out how to fix this easily. This works, so I'm keeping it.
		  FREQ_UPDATE_NEEDED = 0; // clear flag
 800212e:	4b0d      	ldr	r3, [pc, #52]	@ (8002164 <main+0x294>)
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
	  }

	  float sampleF = frequency; // samples and hold the frequency to ensure it won't change while in the middle of gathering smaples
 8002134:	4b0c      	ldr	r3, [pc, #48]	@ (8002168 <main+0x298>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	ee07 3a90 	vmov	s15, r3
 800213c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002140:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
	  float avgX = 0;
 8002144:	f04f 0300 	mov.w	r3, #0
 8002148:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	  float avgR = 0;
 800214c:	f04f 0300 	mov.w	r3, #0
 8002150:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	  int cycles = 10;
 8002154:	230a      	movs	r3, #10
 8002156:	657b      	str	r3, [r7, #84]	@ 0x54
	  for (int i = 0; i < cycles; i++) {
 8002158:	2300      	movs	r3, #0
 800215a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800215e:	e13d      	b.n	80023dc <main+0x50c>
 8002160:	20000304 	.word	0x20000304
 8002164:	20000008 	.word	0x20000008
 8002168:	20000004 	.word	0x20000004
		  int samples = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		  uint32_t s = Get_Time_us();
 8002172:	f7ff fe9f 	bl	8001eb4 <Get_Time_us>
 8002176:	6538      	str	r0, [r7, #80]	@ 0x50
		  do { // Ensures that sample time is no longer than one period of a sine wave
			  //	  HAL_Delay(sample_delay);

			  ch0_data[samples] = ADC_Channel0();
 8002178:	f7ff fd0c 	bl	8001b94 <ADC_Channel0>
 800217c:	eef0 7a40 	vmov.f32	s15, s0
 8002180:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002182:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	edc3 7a00 	vstr	s15, [r3]
			  ch0_time[samples] = ((double)(Get_Time_us() - start_time)) / 1e6;
 800218e:	f7ff fe91 	bl	8001eb4 <Get_Time_us>
 8002192:	4602      	mov	r2, r0
 8002194:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe f9d2 	bl	8000544 <__aeabi_ui2d>
 80021a0:	a3a1      	add	r3, pc, #644	@ (adr r3, 8002428 <main+0x558>)
 80021a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a6:	f7fe fb71 	bl	800088c <__aeabi_ddiv>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	4610      	mov	r0, r2
 80021b0:	4619      	mov	r1, r3
 80021b2:	f7fe fd19 	bl	8000be8 <__aeabi_d2f>
 80021b6:	4601      	mov	r1, r0
 80021b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80021ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	6019      	str	r1, [r3, #0]
		//	  HAL_Delay(sample_delay);
			  ch1_data[samples] = ADC_Channel1();
 80021c4:	f7ff fd36 	bl	8001c34 <ADC_Channel1>
 80021c8:	eef0 7a40 	vmov.f32	s15, s0
 80021cc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80021ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	edc3 7a00 	vstr	s15, [r3]
			  ch1_time[samples] = ((double)(Get_Time_us() - start_time)) / 1e6;
 80021da:	f7ff fe6b 	bl	8001eb4 <Get_Time_us>
 80021de:	4602      	mov	r2, r0
 80021e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe f9ac 	bl	8000544 <__aeabi_ui2d>
 80021ec:	a38e      	add	r3, pc, #568	@ (adr r3, 8002428 <main+0x558>)
 80021ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f2:	f7fe fb4b 	bl	800088c <__aeabi_ddiv>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	4610      	mov	r0, r2
 80021fc:	4619      	mov	r1, r3
 80021fe:	f7fe fcf3 	bl	8000be8 <__aeabi_d2f>
 8002202:	4601      	mov	r1, r0
 8002204:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002206:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	6019      	str	r1, [r3, #0]

			  samples++;
 8002210:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002214:	3301      	adds	r3, #1
 8002216:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		  } while((float)(Get_Time_us() - s) < 1 * 1e6 / frequency);
 800221a:	f7ff fe4b 	bl	8001eb4 <Get_Time_us>
 800221e:	4602      	mov	r2, r0
 8002220:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	ee07 3a90 	vmov	s15, r3
 8002228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800222c:	ee17 0a90 	vmov	r0, s15
 8002230:	f7fe f9aa 	bl	8000588 <__aeabi_f2d>
 8002234:	4604      	mov	r4, r0
 8002236:	460d      	mov	r5, r1
 8002238:	4b81      	ldr	r3, [pc, #516]	@ (8002440 <main+0x570>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f7fe f981 	bl	8000544 <__aeabi_ui2d>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	a178      	add	r1, pc, #480	@ (adr r1, 8002428 <main+0x558>)
 8002248:	e9d1 0100 	ldrd	r0, r1, [r1]
 800224c:	f7fe fb1e 	bl	800088c <__aeabi_ddiv>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	4620      	mov	r0, r4
 8002256:	4629      	mov	r1, r5
 8002258:	f7fe fc60 	bl	8000b1c <__aeabi_dcmplt>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d18a      	bne.n	8002178 <main+0x2a8>

		  fitSineWave(ch0_data, ch0_time, samples, sampleF, &load_amplitude, &load_phase, &load_offset);
 8002262:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8002266:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	4613      	mov	r3, r2
 8002274:	ed97 0a16 	vldr	s0, [r7, #88]	@ 0x58
 8002278:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800227c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800227e:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002280:	f000 fd16 	bl	8002cb0 <fitSineWave>
		  fitSineWave(ch1_data, ch1_time, samples, sampleF, &shunt_amplitude, &shunt_phase, &shunt_offset);
 8002284:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8002288:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800228c:	9301      	str	r3, [sp, #4]
 800228e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	4613      	mov	r3, r2
 8002296:	ed97 0a16 	vldr	s0, [r7, #88]	@ 0x58
 800229a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800229e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80022a0:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80022a2:	f000 fd05 	bl	8002cb0 <fitSineWave>

		  float shunt_resistance = 994.5;
 80022a6:	4b67      	ldr	r3, [pc, #412]	@ (8002444 <main+0x574>)
 80022a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
		  float impedance_magnitude = (load_amplitude / (shunt_amplitude / shunt_resistance));
 80022aa:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 80022ae:	ed97 6a0c 	vldr	s12, [r7, #48]	@ 0x30
 80022b2:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80022b6:	ee86 7a27 	vdiv.f32	s14, s12, s15
 80022ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022be:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
		  float impedance_angle = (load_phase - shunt_phase);
 80022c2:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80022c6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80022ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022ce:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
		  if (impedance_angle > M_PI) {
 80022d2:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80022d6:	f7fe f957 	bl	8000588 <__aeabi_f2d>
 80022da:	a355      	add	r3, pc, #340	@ (adr r3, 8002430 <main+0x560>)
 80022dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e0:	f7fe fc3a 	bl	8000b58 <__aeabi_dcmpgt>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d011      	beq.n	800230e <main+0x43e>
			  impedance_angle -= 2 * M_PI;
 80022ea:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80022ee:	f7fe f94b 	bl	8000588 <__aeabi_f2d>
 80022f2:	a351      	add	r3, pc, #324	@ (adr r3, 8002438 <main+0x568>)
 80022f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f8:	f7fd ffe6 	bl	80002c8 <__aeabi_dsub>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	4610      	mov	r0, r2
 8002302:	4619      	mov	r1, r3
 8002304:	f7fe fc70 	bl	8000be8 <__aeabi_d2f>
 8002308:	4603      	mov	r3, r0
 800230a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		  }
		  float resistance = impedance_magnitude * cos(impedance_angle) - shunt_resistance;
 800230e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002310:	f7fe f93a 	bl	8000588 <__aeabi_f2d>
 8002314:	4604      	mov	r4, r0
 8002316:	460d      	mov	r5, r1
 8002318:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800231c:	f7fe f934 	bl	8000588 <__aeabi_f2d>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	ec43 2b10 	vmov	d0, r2, r3
 8002328:	f007 ffaa 	bl	800a280 <cos>
 800232c:	ec53 2b10 	vmov	r2, r3, d0
 8002330:	4620      	mov	r0, r4
 8002332:	4629      	mov	r1, r5
 8002334:	f7fe f980 	bl	8000638 <__aeabi_dmul>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	4614      	mov	r4, r2
 800233e:	461d      	mov	r5, r3
 8002340:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002342:	f7fe f921 	bl	8000588 <__aeabi_f2d>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4620      	mov	r0, r4
 800234c:	4629      	mov	r1, r5
 800234e:	f7fd ffbb 	bl	80002c8 <__aeabi_dsub>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4610      	mov	r0, r2
 8002358:	4619      	mov	r1, r3
 800235a:	f7fe fc45 	bl	8000be8 <__aeabi_d2f>
 800235e:	4603      	mov	r3, r0
 8002360:	647b      	str	r3, [r7, #68]	@ 0x44
		  float reactance = impedance_magnitude * sin(impedance_angle);
 8002362:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002364:	f7fe f910 	bl	8000588 <__aeabi_f2d>
 8002368:	4604      	mov	r4, r0
 800236a:	460d      	mov	r5, r1
 800236c:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8002370:	f7fe f90a 	bl	8000588 <__aeabi_f2d>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	ec43 2b10 	vmov	d0, r2, r3
 800237c:	f007 ffdc 	bl	800a338 <sin>
 8002380:	ec53 2b10 	vmov	r2, r3, d0
 8002384:	4620      	mov	r0, r4
 8002386:	4629      	mov	r1, r5
 8002388:	f7fe f956 	bl	8000638 <__aeabi_dmul>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4610      	mov	r0, r2
 8002392:	4619      	mov	r1, r3
 8002394:	f7fe fc28 	bl	8000be8 <__aeabi_d2f>
 8002398:	4603      	mov	r3, r0
 800239a:	643b      	str	r3, [r7, #64]	@ 0x40

		  samples = 0;
 800239c:	2300      	movs	r3, #0
 800239e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80023a2:	4b29      	ldr	r3, [pc, #164]	@ (8002448 <main+0x578>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2200      	movs	r2, #0
 80023a8:	625a      	str	r2, [r3, #36]	@ 0x24
		  start_time = Get_Time_us();
 80023aa:	f7ff fd83 	bl	8001eb4 <Get_Time_us>
 80023ae:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
		  avgX += reactance;
 80023b2:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 80023b6:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80023ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023be:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
		  avgR += resistance;
 80023c2:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 80023c6:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80023ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ce:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
	  for (int i = 0; i < cycles; i++) {
 80023d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80023d6:	3301      	adds	r3, #1
 80023d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80023dc:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80023e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023e2:	429a      	cmp	r2, r3
 80023e4:	f6ff aec2 	blt.w	800216c <main+0x29c>
	  }
	  avgX = avgX / cycles;
 80023e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023ea:	ee07 3a90 	vmov	s15, r3
 80023ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023f2:	edd7 6a26 	vldr	s13, [r7, #152]	@ 0x98
 80023f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023fa:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
	  avgR = avgR / cycles;
 80023fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002400:	ee07 3a90 	vmov	s15, r3
 8002404:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002408:	edd7 6a25 	vldr	s13, [r7, #148]	@ 0x94
 800240c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002410:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94

	  Show_Stats(avgX, avgR, sampleF);
 8002414:	ed97 1a16 	vldr	s2, [r7, #88]	@ 0x58
 8002418:	edd7 0a25 	vldr	s1, [r7, #148]	@ 0x94
 800241c:	ed97 0a26 	vldr	s0, [r7, #152]	@ 0x98
 8002420:	f7ff fc5a 	bl	8001cd8 <Show_Stats>
  {
 8002424:	e66b      	b.n	80020fe <main+0x22e>
 8002426:	bf00      	nop
 8002428:	00000000 	.word	0x00000000
 800242c:	412e8480 	.word	0x412e8480
 8002430:	54442d18 	.word	0x54442d18
 8002434:	400921fb 	.word	0x400921fb
 8002438:	54442d18 	.word	0x54442d18
 800243c:	401921fb 	.word	0x401921fb
 8002440:	20000004 	.word	0x20000004
 8002444:	4478a000 	.word	0x4478a000
 8002448:	20000304 	.word	0x20000304

0800244c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b094      	sub	sp, #80	@ 0x50
 8002450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002452:	f107 031c 	add.w	r3, r7, #28
 8002456:	2234      	movs	r2, #52	@ 0x34
 8002458:	2100      	movs	r1, #0
 800245a:	4618      	mov	r0, r3
 800245c:	f005 fdd7 	bl	800800e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002460:	f107 0308 	add.w	r3, r7, #8
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002470:	2300      	movs	r3, #0
 8002472:	607b      	str	r3, [r7, #4]
 8002474:	4b29      	ldr	r3, [pc, #164]	@ (800251c <SystemClock_Config+0xd0>)
 8002476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002478:	4a28      	ldr	r2, [pc, #160]	@ (800251c <SystemClock_Config+0xd0>)
 800247a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800247e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002480:	4b26      	ldr	r3, [pc, #152]	@ (800251c <SystemClock_Config+0xd0>)
 8002482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002484:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002488:	607b      	str	r3, [r7, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800248c:	2300      	movs	r3, #0
 800248e:	603b      	str	r3, [r7, #0]
 8002490:	4b23      	ldr	r3, [pc, #140]	@ (8002520 <SystemClock_Config+0xd4>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a22      	ldr	r2, [pc, #136]	@ (8002520 <SystemClock_Config+0xd4>)
 8002496:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	4b20      	ldr	r3, [pc, #128]	@ (8002520 <SystemClock_Config+0xd4>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80024a4:	603b      	str	r3, [r7, #0]
 80024a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024a8:	2301      	movs	r3, #1
 80024aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80024ac:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80024b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024b2:	2302      	movs	r3, #2
 80024b4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80024ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80024bc:	2304      	movs	r3, #4
 80024be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80024c0:	23a8      	movs	r3, #168	@ 0xa8
 80024c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024c4:	2302      	movs	r3, #2
 80024c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80024c8:	2307      	movs	r3, #7
 80024ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80024cc:	2302      	movs	r3, #2
 80024ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024d0:	f107 031c 	add.w	r3, r7, #28
 80024d4:	4618      	mov	r0, r3
 80024d6:	f002 fee5 	bl	80052a4 <HAL_RCC_OscConfig>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80024e0:	f000 faaa 	bl	8002a38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024e4:	230f      	movs	r3, #15
 80024e6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024e8:	2302      	movs	r3, #2
 80024ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024ec:	2300      	movs	r3, #0
 80024ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80024f0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80024f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80024f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024fa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80024fc:	f107 0308 	add.w	r3, r7, #8
 8002500:	2105      	movs	r1, #5
 8002502:	4618      	mov	r0, r3
 8002504:	f002 f85a 	bl	80045bc <HAL_RCC_ClockConfig>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800250e:	f000 fa93 	bl	8002a38 <Error_Handler>
  }
}
 8002512:	bf00      	nop
 8002514:	3750      	adds	r7, #80	@ 0x50
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40023800 	.word	0x40023800
 8002520:	40007000 	.word	0x40007000

08002524 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800252a:	463b      	mov	r3, r7
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002536:	4b21      	ldr	r3, [pc, #132]	@ (80025bc <MX_ADC1_Init+0x98>)
 8002538:	4a21      	ldr	r2, [pc, #132]	@ (80025c0 <MX_ADC1_Init+0x9c>)
 800253a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800253c:	4b1f      	ldr	r3, [pc, #124]	@ (80025bc <MX_ADC1_Init+0x98>)
 800253e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002542:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002544:	4b1d      	ldr	r3, [pc, #116]	@ (80025bc <MX_ADC1_Init+0x98>)
 8002546:	2200      	movs	r2, #0
 8002548:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800254a:	4b1c      	ldr	r3, [pc, #112]	@ (80025bc <MX_ADC1_Init+0x98>)
 800254c:	2200      	movs	r2, #0
 800254e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002550:	4b1a      	ldr	r3, [pc, #104]	@ (80025bc <MX_ADC1_Init+0x98>)
 8002552:	2200      	movs	r2, #0
 8002554:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002556:	4b19      	ldr	r3, [pc, #100]	@ (80025bc <MX_ADC1_Init+0x98>)
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800255e:	4b17      	ldr	r3, [pc, #92]	@ (80025bc <MX_ADC1_Init+0x98>)
 8002560:	2200      	movs	r2, #0
 8002562:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002564:	4b15      	ldr	r3, [pc, #84]	@ (80025bc <MX_ADC1_Init+0x98>)
 8002566:	4a17      	ldr	r2, [pc, #92]	@ (80025c4 <MX_ADC1_Init+0xa0>)
 8002568:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800256a:	4b14      	ldr	r3, [pc, #80]	@ (80025bc <MX_ADC1_Init+0x98>)
 800256c:	2200      	movs	r2, #0
 800256e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002570:	4b12      	ldr	r3, [pc, #72]	@ (80025bc <MX_ADC1_Init+0x98>)
 8002572:	2201      	movs	r2, #1
 8002574:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002576:	4b11      	ldr	r3, [pc, #68]	@ (80025bc <MX_ADC1_Init+0x98>)
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800257e:	4b0f      	ldr	r3, [pc, #60]	@ (80025bc <MX_ADC1_Init+0x98>)
 8002580:	2201      	movs	r2, #1
 8002582:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002584:	480d      	ldr	r0, [pc, #52]	@ (80025bc <MX_ADC1_Init+0x98>)
 8002586:	f001 f995 	bl	80038b4 <HAL_ADC_Init>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002590:	f000 fa52 	bl	8002a38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002594:	2309      	movs	r3, #9
 8002596:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002598:	2301      	movs	r3, #1
 800259a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800259c:	2300      	movs	r3, #0
 800259e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025a0:	463b      	mov	r3, r7
 80025a2:	4619      	mov	r1, r3
 80025a4:	4805      	ldr	r0, [pc, #20]	@ (80025bc <MX_ADC1_Init+0x98>)
 80025a6:	f001 f9c9 	bl	800393c <HAL_ADC_ConfigChannel>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80025b0:	f000 fa42 	bl	8002a38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80025b4:	bf00      	nop
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	2000020c 	.word	0x2000020c
 80025c0:	40012000 	.word	0x40012000
 80025c4:	0f000001 	.word	0x0f000001

080025c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80025cc:	4b17      	ldr	r3, [pc, #92]	@ (800262c <MX_SPI1_Init+0x64>)
 80025ce:	4a18      	ldr	r2, [pc, #96]	@ (8002630 <MX_SPI1_Init+0x68>)
 80025d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025d2:	4b16      	ldr	r3, [pc, #88]	@ (800262c <MX_SPI1_Init+0x64>)
 80025d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80025d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025da:	4b14      	ldr	r3, [pc, #80]	@ (800262c <MX_SPI1_Init+0x64>)
 80025dc:	2200      	movs	r2, #0
 80025de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025e0:	4b12      	ldr	r3, [pc, #72]	@ (800262c <MX_SPI1_Init+0x64>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80025e6:	4b11      	ldr	r3, [pc, #68]	@ (800262c <MX_SPI1_Init+0x64>)
 80025e8:	2202      	movs	r2, #2
 80025ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025ec:	4b0f      	ldr	r3, [pc, #60]	@ (800262c <MX_SPI1_Init+0x64>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025f2:	4b0e      	ldr	r3, [pc, #56]	@ (800262c <MX_SPI1_Init+0x64>)
 80025f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80025fa:	4b0c      	ldr	r3, [pc, #48]	@ (800262c <MX_SPI1_Init+0x64>)
 80025fc:	2228      	movs	r2, #40	@ 0x28
 80025fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002600:	4b0a      	ldr	r3, [pc, #40]	@ (800262c <MX_SPI1_Init+0x64>)
 8002602:	2200      	movs	r2, #0
 8002604:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002606:	4b09      	ldr	r3, [pc, #36]	@ (800262c <MX_SPI1_Init+0x64>)
 8002608:	2200      	movs	r2, #0
 800260a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800260c:	4b07      	ldr	r3, [pc, #28]	@ (800262c <MX_SPI1_Init+0x64>)
 800260e:	2200      	movs	r2, #0
 8002610:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002612:	4b06      	ldr	r3, [pc, #24]	@ (800262c <MX_SPI1_Init+0x64>)
 8002614:	220a      	movs	r2, #10
 8002616:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002618:	4804      	ldr	r0, [pc, #16]	@ (800262c <MX_SPI1_Init+0x64>)
 800261a:	f003 f8e1 	bl	80057e0 <HAL_SPI_Init>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002624:	f000 fa08 	bl	8002a38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002628:	bf00      	nop
 800262a:	bd80      	pop	{r7, pc}
 800262c:	20000254 	.word	0x20000254
 8002630:	40013000 	.word	0x40013000

08002634 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002638:	4b17      	ldr	r3, [pc, #92]	@ (8002698 <MX_SPI3_Init+0x64>)
 800263a:	4a18      	ldr	r2, [pc, #96]	@ (800269c <MX_SPI3_Init+0x68>)
 800263c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800263e:	4b16      	ldr	r3, [pc, #88]	@ (8002698 <MX_SPI3_Init+0x64>)
 8002640:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002644:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002646:	4b14      	ldr	r3, [pc, #80]	@ (8002698 <MX_SPI3_Init+0x64>)
 8002648:	2200      	movs	r2, #0
 800264a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800264c:	4b12      	ldr	r3, [pc, #72]	@ (8002698 <MX_SPI3_Init+0x64>)
 800264e:	2200      	movs	r2, #0
 8002650:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002652:	4b11      	ldr	r3, [pc, #68]	@ (8002698 <MX_SPI3_Init+0x64>)
 8002654:	2200      	movs	r2, #0
 8002656:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002658:	4b0f      	ldr	r3, [pc, #60]	@ (8002698 <MX_SPI3_Init+0x64>)
 800265a:	2200      	movs	r2, #0
 800265c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800265e:	4b0e      	ldr	r3, [pc, #56]	@ (8002698 <MX_SPI3_Init+0x64>)
 8002660:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002664:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002666:	4b0c      	ldr	r3, [pc, #48]	@ (8002698 <MX_SPI3_Init+0x64>)
 8002668:	2200      	movs	r2, #0
 800266a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800266c:	4b0a      	ldr	r3, [pc, #40]	@ (8002698 <MX_SPI3_Init+0x64>)
 800266e:	2200      	movs	r2, #0
 8002670:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002672:	4b09      	ldr	r3, [pc, #36]	@ (8002698 <MX_SPI3_Init+0x64>)
 8002674:	2200      	movs	r2, #0
 8002676:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002678:	4b07      	ldr	r3, [pc, #28]	@ (8002698 <MX_SPI3_Init+0x64>)
 800267a:	2200      	movs	r2, #0
 800267c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800267e:	4b06      	ldr	r3, [pc, #24]	@ (8002698 <MX_SPI3_Init+0x64>)
 8002680:	220a      	movs	r2, #10
 8002682:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002684:	4804      	ldr	r0, [pc, #16]	@ (8002698 <MX_SPI3_Init+0x64>)
 8002686:	f003 f8ab 	bl	80057e0 <HAL_SPI_Init>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002690:	f000 f9d2 	bl	8002a38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002694:	bf00      	nop
 8002696:	bd80      	pop	{r7, pc}
 8002698:	200002ac 	.word	0x200002ac
 800269c:	40003c00 	.word	0x40003c00

080026a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026a6:	f107 0308 	add.w	r3, r7, #8
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	605a      	str	r2, [r3, #4]
 80026b0:	609a      	str	r2, [r3, #8]
 80026b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026b4:	463b      	mov	r3, r7
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002734 <MX_TIM2_Init+0x94>)
 80026be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80026c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80026c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002734 <MX_TIM2_Init+0x94>)
 80026c6:	2253      	movs	r2, #83	@ 0x53
 80026c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002734 <MX_TIM2_Init+0x94>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80026d0:	4b18      	ldr	r3, [pc, #96]	@ (8002734 <MX_TIM2_Init+0x94>)
 80026d2:	f04f 32ff 	mov.w	r2, #4294967295
 80026d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026d8:	4b16      	ldr	r3, [pc, #88]	@ (8002734 <MX_TIM2_Init+0x94>)
 80026da:	2200      	movs	r2, #0
 80026dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026de:	4b15      	ldr	r3, [pc, #84]	@ (8002734 <MX_TIM2_Init+0x94>)
 80026e0:	2280      	movs	r2, #128	@ 0x80
 80026e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026e4:	4813      	ldr	r0, [pc, #76]	@ (8002734 <MX_TIM2_Init+0x94>)
 80026e6:	f003 fccd 	bl	8006084 <HAL_TIM_Base_Init>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80026f0:	f000 f9a2 	bl	8002a38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026fa:	f107 0308 	add.w	r3, r7, #8
 80026fe:	4619      	mov	r1, r3
 8002700:	480c      	ldr	r0, [pc, #48]	@ (8002734 <MX_TIM2_Init+0x94>)
 8002702:	f003 fe67 	bl	80063d4 <HAL_TIM_ConfigClockSource>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800270c:	f000 f994 	bl	8002a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002710:	2300      	movs	r3, #0
 8002712:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002714:	2300      	movs	r3, #0
 8002716:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002718:	463b      	mov	r3, r7
 800271a:	4619      	mov	r1, r3
 800271c:	4805      	ldr	r0, [pc, #20]	@ (8002734 <MX_TIM2_Init+0x94>)
 800271e:	f004 f899 	bl	8006854 <HAL_TIMEx_MasterConfigSynchronization>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002728:	f000 f986 	bl	8002a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800272c:	bf00      	nop
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	20000304 	.word	0x20000304

08002738 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800273c:	4b11      	ldr	r3, [pc, #68]	@ (8002784 <MX_USART3_UART_Init+0x4c>)
 800273e:	4a12      	ldr	r2, [pc, #72]	@ (8002788 <MX_USART3_UART_Init+0x50>)
 8002740:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002742:	4b10      	ldr	r3, [pc, #64]	@ (8002784 <MX_USART3_UART_Init+0x4c>)
 8002744:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002748:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800274a:	4b0e      	ldr	r3, [pc, #56]	@ (8002784 <MX_USART3_UART_Init+0x4c>)
 800274c:	2200      	movs	r2, #0
 800274e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002750:	4b0c      	ldr	r3, [pc, #48]	@ (8002784 <MX_USART3_UART_Init+0x4c>)
 8002752:	2200      	movs	r2, #0
 8002754:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002756:	4b0b      	ldr	r3, [pc, #44]	@ (8002784 <MX_USART3_UART_Init+0x4c>)
 8002758:	2200      	movs	r2, #0
 800275a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800275c:	4b09      	ldr	r3, [pc, #36]	@ (8002784 <MX_USART3_UART_Init+0x4c>)
 800275e:	220c      	movs	r2, #12
 8002760:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002762:	4b08      	ldr	r3, [pc, #32]	@ (8002784 <MX_USART3_UART_Init+0x4c>)
 8002764:	2200      	movs	r2, #0
 8002766:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002768:	4b06      	ldr	r3, [pc, #24]	@ (8002784 <MX_USART3_UART_Init+0x4c>)
 800276a:	2200      	movs	r2, #0
 800276c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800276e:	4805      	ldr	r0, [pc, #20]	@ (8002784 <MX_USART3_UART_Init+0x4c>)
 8002770:	f004 f900 	bl	8006974 <HAL_UART_Init>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800277a:	f000 f95d 	bl	8002a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	2000034c 	.word	0x2000034c
 8002788:	40004800 	.word	0x40004800

0800278c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002790:	4b14      	ldr	r3, [pc, #80]	@ (80027e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002792:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002796:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002798:	4b12      	ldr	r3, [pc, #72]	@ (80027e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800279a:	2206      	movs	r2, #6
 800279c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800279e:	4b11      	ldr	r3, [pc, #68]	@ (80027e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027a0:	2202      	movs	r2, #2
 80027a2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80027a4:	4b0f      	ldr	r3, [pc, #60]	@ (80027e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80027aa:	4b0e      	ldr	r3, [pc, #56]	@ (80027e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027ac:	2202      	movs	r2, #2
 80027ae:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80027b0:	4b0c      	ldr	r3, [pc, #48]	@ (80027e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027b2:	2201      	movs	r2, #1
 80027b4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80027b6:	4b0b      	ldr	r3, [pc, #44]	@ (80027e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80027bc:	4b09      	ldr	r3, [pc, #36]	@ (80027e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027be:	2200      	movs	r2, #0
 80027c0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80027c2:	4b08      	ldr	r3, [pc, #32]	@ (80027e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80027c8:	4b06      	ldr	r3, [pc, #24]	@ (80027e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80027ce:	4805      	ldr	r0, [pc, #20]	@ (80027e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027d0:	f001 fdba 	bl	8004348 <HAL_PCD_Init>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80027da:	f000 f92d 	bl	8002a38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	20000394 	.word	0x20000394

080027e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08c      	sub	sp, #48	@ 0x30
 80027ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ee:	f107 031c 	add.w	r3, r7, #28
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	605a      	str	r2, [r3, #4]
 80027f8:	609a      	str	r2, [r3, #8]
 80027fa:	60da      	str	r2, [r3, #12]
 80027fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	61bb      	str	r3, [r7, #24]
 8002802:	4b76      	ldr	r3, [pc, #472]	@ (80029dc <MX_GPIO_Init+0x1f4>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002806:	4a75      	ldr	r2, [pc, #468]	@ (80029dc <MX_GPIO_Init+0x1f4>)
 8002808:	f043 0304 	orr.w	r3, r3, #4
 800280c:	6313      	str	r3, [r2, #48]	@ 0x30
 800280e:	4b73      	ldr	r3, [pc, #460]	@ (80029dc <MX_GPIO_Init+0x1f4>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002812:	f003 0304 	and.w	r3, r3, #4
 8002816:	61bb      	str	r3, [r7, #24]
 8002818:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
 800281e:	4b6f      	ldr	r3, [pc, #444]	@ (80029dc <MX_GPIO_Init+0x1f4>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002822:	4a6e      	ldr	r2, [pc, #440]	@ (80029dc <MX_GPIO_Init+0x1f4>)
 8002824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002828:	6313      	str	r3, [r2, #48]	@ 0x30
 800282a:	4b6c      	ldr	r3, [pc, #432]	@ (80029dc <MX_GPIO_Init+0x1f4>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	4b68      	ldr	r3, [pc, #416]	@ (80029dc <MX_GPIO_Init+0x1f4>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	4a67      	ldr	r2, [pc, #412]	@ (80029dc <MX_GPIO_Init+0x1f4>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	6313      	str	r3, [r2, #48]	@ 0x30
 8002846:	4b65      	ldr	r3, [pc, #404]	@ (80029dc <MX_GPIO_Init+0x1f4>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	4b61      	ldr	r3, [pc, #388]	@ (80029dc <MX_GPIO_Init+0x1f4>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285a:	4a60      	ldr	r2, [pc, #384]	@ (80029dc <MX_GPIO_Init+0x1f4>)
 800285c:	f043 0302 	orr.w	r3, r3, #2
 8002860:	6313      	str	r3, [r2, #48]	@ 0x30
 8002862:	4b5e      	ldr	r3, [pc, #376]	@ (80029dc <MX_GPIO_Init+0x1f4>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	4b5a      	ldr	r3, [pc, #360]	@ (80029dc <MX_GPIO_Init+0x1f4>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002876:	4a59      	ldr	r2, [pc, #356]	@ (80029dc <MX_GPIO_Init+0x1f4>)
 8002878:	f043 0320 	orr.w	r3, r3, #32
 800287c:	6313      	str	r3, [r2, #48]	@ 0x30
 800287e:	4b57      	ldr	r3, [pc, #348]	@ (80029dc <MX_GPIO_Init+0x1f4>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002882:	f003 0320 	and.w	r3, r3, #32
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	607b      	str	r3, [r7, #4]
 800288e:	4b53      	ldr	r3, [pc, #332]	@ (80029dc <MX_GPIO_Init+0x1f4>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002892:	4a52      	ldr	r2, [pc, #328]	@ (80029dc <MX_GPIO_Init+0x1f4>)
 8002894:	f043 0308 	orr.w	r3, r3, #8
 8002898:	6313      	str	r3, [r2, #48]	@ 0x30
 800289a:	4b50      	ldr	r3, [pc, #320]	@ (80029dc <MX_GPIO_Init+0x1f4>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	607b      	str	r3, [r7, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	603b      	str	r3, [r7, #0]
 80028aa:	4b4c      	ldr	r3, [pc, #304]	@ (80029dc <MX_GPIO_Init+0x1f4>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ae:	4a4b      	ldr	r2, [pc, #300]	@ (80029dc <MX_GPIO_Init+0x1f4>)
 80028b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028b6:	4b49      	ldr	r3, [pc, #292]	@ (80029dc <MX_GPIO_Init+0x1f4>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028be:	603b      	str	r3, [r7, #0]
 80028c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80028c2:	2200      	movs	r2, #0
 80028c4:	f244 0181 	movw	r1, #16513	@ 0x4081
 80028c8:	4845      	ldr	r0, [pc, #276]	@ (80029e0 <MX_GPIO_Init+0x1f8>)
 80028ca:	f001 fd0b 	bl	80042e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80028ce:	2201      	movs	r2, #1
 80028d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028d4:	4843      	ldr	r0, [pc, #268]	@ (80029e4 <MX_GPIO_Init+0x1fc>)
 80028d6:	f001 fd05 	bl	80042e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, AD9833_NCS_Pin|MCP3202_NCS_Pin, GPIO_PIN_SET);
 80028da:	2201      	movs	r2, #1
 80028dc:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80028e0:	4841      	ldr	r0, [pc, #260]	@ (80029e8 <MX_GPIO_Init+0x200>)
 80028e2:	f001 fcff 	bl	80042e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2140      	movs	r1, #64	@ 0x40
 80028ea:	4840      	ldr	r0, [pc, #256]	@ (80029ec <MX_GPIO_Init+0x204>)
 80028ec:	f001 fcfa 	bl	80042e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_NCS_Pin|LCD_RST_Pin, GPIO_PIN_SET);
 80028f0:	2201      	movs	r2, #1
 80028f2:	f44f 4184 	mov.w	r1, #16896	@ 0x4200
 80028f6:	483d      	ldr	r0, [pc, #244]	@ (80029ec <MX_GPIO_Init+0x204>)
 80028f8:	f001 fcf4 	bl	80042e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80028fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002902:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002908:	2300      	movs	r3, #0
 800290a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800290c:	f107 031c 	add.w	r3, r7, #28
 8002910:	4619      	mov	r1, r3
 8002912:	4837      	ldr	r0, [pc, #220]	@ (80029f0 <MX_GPIO_Init+0x208>)
 8002914:	f001 fb52 	bl	8003fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002918:	f244 0381 	movw	r3, #16513	@ 0x4081
 800291c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800291e:	2301      	movs	r3, #1
 8002920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002922:	2300      	movs	r3, #0
 8002924:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002926:	2300      	movs	r3, #0
 8002928:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800292a:	f107 031c 	add.w	r3, r7, #28
 800292e:	4619      	mov	r1, r3
 8002930:	482b      	ldr	r0, [pc, #172]	@ (80029e0 <MX_GPIO_Init+0x1f8>)
 8002932:	f001 fb43 	bl	8003fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8002936:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800293a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800293c:	2301      	movs	r3, #1
 800293e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	2300      	movs	r3, #0
 8002942:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002944:	2303      	movs	r3, #3
 8002946:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8002948:	f107 031c 	add.w	r3, r7, #28
 800294c:	4619      	mov	r1, r3
 800294e:	4825      	ldr	r0, [pc, #148]	@ (80029e4 <MX_GPIO_Init+0x1fc>)
 8002950:	f001 fb34 	bl	8003fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : AD9833_NCS_Pin MCP3202_NCS_Pin */
  GPIO_InitStruct.Pin = AD9833_NCS_Pin|MCP3202_NCS_Pin;
 8002954:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800295a:	2301      	movs	r3, #1
 800295c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295e:	2300      	movs	r3, #0
 8002960:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002962:	2303      	movs	r3, #3
 8002964:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002966:	f107 031c 	add.w	r3, r7, #28
 800296a:	4619      	mov	r1, r3
 800296c:	481e      	ldr	r0, [pc, #120]	@ (80029e8 <MX_GPIO_Init+0x200>)
 800296e:	f001 fb25 	bl	8003fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002972:	2340      	movs	r3, #64	@ 0x40
 8002974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002976:	2301      	movs	r3, #1
 8002978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297a:	2300      	movs	r3, #0
 800297c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800297e:	2300      	movs	r3, #0
 8002980:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002982:	f107 031c 	add.w	r3, r7, #28
 8002986:	4619      	mov	r1, r3
 8002988:	4818      	ldr	r0, [pc, #96]	@ (80029ec <MX_GPIO_Init+0x204>)
 800298a:	f001 fb17 	bl	8003fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800298e:	2380      	movs	r3, #128	@ 0x80
 8002990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002992:	2300      	movs	r3, #0
 8002994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002996:	2300      	movs	r3, #0
 8002998:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800299a:	f107 031c 	add.w	r3, r7, #28
 800299e:	4619      	mov	r1, r3
 80029a0:	4812      	ldr	r0, [pc, #72]	@ (80029ec <MX_GPIO_Init+0x204>)
 80029a2:	f001 fb0b 	bl	8003fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_NCS_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_NCS_Pin|LCD_RST_Pin;
 80029a6:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 80029aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ac:	2301      	movs	r3, #1
 80029ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b4:	2303      	movs	r3, #3
 80029b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029b8:	f107 031c 	add.w	r3, r7, #28
 80029bc:	4619      	mov	r1, r3
 80029be:	480b      	ldr	r0, [pc, #44]	@ (80029ec <MX_GPIO_Init+0x204>)
 80029c0:	f001 fafc 	bl	8003fbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80029c4:	2200      	movs	r2, #0
 80029c6:	2100      	movs	r1, #0
 80029c8:	2028      	movs	r0, #40	@ 0x28
 80029ca:	f001 fac0 	bl	8003f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80029ce:	2028      	movs	r0, #40	@ 0x28
 80029d0:	f001 fad9 	bl	8003f86 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80029d4:	bf00      	nop
 80029d6:	3730      	adds	r7, #48	@ 0x30
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40023800 	.word	0x40023800
 80029e0:	40020400 	.word	0x40020400
 80029e4:	40021400 	.word	0x40021400
 80029e8:	40020c00 	.word	0x40020c00
 80029ec:	40021800 	.word	0x40021800
 80029f0:	40020800 	.word	0x40020800

080029f4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	80fb      	strh	r3, [r7, #6]
//	HAL_GPIO_TogglePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin);
//	int frequency = 0;
	frequency = frequency + 1000;
 80029fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002a30 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002a06:	4a0a      	ldr	r2, [pc, #40]	@ (8002a30 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002a08:	6013      	str	r3, [r2, #0]
	if (frequency > 5000) {
 8002a0a:	4b09      	ldr	r3, [pc, #36]	@ (8002a30 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d903      	bls.n	8002a1e <HAL_GPIO_EXTI_Callback+0x2a>
		frequency = 1000;
 8002a16:	4b06      	ldr	r3, [pc, #24]	@ (8002a30 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002a18:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a1c:	601a      	str	r2, [r3, #0]
	}
	FREQ_UPDATE_NEEDED = 1;
 8002a1e:	4b05      	ldr	r3, [pc, #20]	@ (8002a34 <HAL_GPIO_EXTI_Callback+0x40>)
 8002a20:	2201      	movs	r2, #1
 8002a22:	601a      	str	r2, [r3, #0]
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	20000004 	.word	0x20000004
 8002a34:	20000008 	.word	0x20000008

08002a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a3c:	b672      	cpsid	i
}
 8002a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a40:	bf00      	nop
 8002a42:	e7fd      	b.n	8002a40 <Error_Handler+0x8>
 8002a44:	0000      	movs	r0, r0
	...

08002a48 <calculateError>:
#include <float.h>
#include <stdbool.h>

// Function to calculate the error between the input data and a sine wave
float calculateError(const float data[], const float timestamps[], int dataLength,
                      float amplitude, float phase, float offset, float frequency) {
 8002a48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a4c:	b08e      	sub	sp, #56	@ 0x38
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	61f8      	str	r0, [r7, #28]
 8002a52:	61b9      	str	r1, [r7, #24]
 8002a54:	617a      	str	r2, [r7, #20]
 8002a56:	ed87 0a04 	vstr	s0, [r7, #16]
 8002a5a:	edc7 0a03 	vstr	s1, [r7, #12]
 8002a5e:	ed87 1a02 	vstr	s2, [r7, #8]
 8002a62:	edc7 1a01 	vstr	s3, [r7, #4]
    double error = 0.0;
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    for (int i = 0; i < dataLength; i++) {
 8002a72:	2300      	movs	r3, #0
 8002a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a76:	e071      	b.n	8002b5c <calculateError+0x114>
        float sineValue = amplitude * sin(2 * M_PI * frequency * timestamps[i] + phase) + offset;
 8002a78:	6938      	ldr	r0, [r7, #16]
 8002a7a:	f7fd fd85 	bl	8000588 <__aeabi_f2d>
 8002a7e:	4604      	mov	r4, r0
 8002a80:	460d      	mov	r5, r1
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7fd fd80 	bl	8000588 <__aeabi_f2d>
 8002a88:	a33d      	add	r3, pc, #244	@ (adr r3, 8002b80 <calculateError+0x138>)
 8002a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8e:	f7fd fdd3 	bl	8000638 <__aeabi_dmul>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4690      	mov	r8, r2
 8002a98:	4699      	mov	r9, r3
 8002a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fd fd6f 	bl	8000588 <__aeabi_f2d>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	4640      	mov	r0, r8
 8002ab0:	4649      	mov	r1, r9
 8002ab2:	f7fd fdc1 	bl	8000638 <__aeabi_dmul>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	4690      	mov	r8, r2
 8002abc:	4699      	mov	r9, r3
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f7fd fd62 	bl	8000588 <__aeabi_f2d>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4640      	mov	r0, r8
 8002aca:	4649      	mov	r1, r9
 8002acc:	f7fd fbfe 	bl	80002cc <__adddf3>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	ec43 2b17 	vmov	d7, r2, r3
 8002ad8:	eeb0 0a47 	vmov.f32	s0, s14
 8002adc:	eef0 0a67 	vmov.f32	s1, s15
 8002ae0:	f007 fc2a 	bl	800a338 <sin>
 8002ae4:	ec53 2b10 	vmov	r2, r3, d0
 8002ae8:	4620      	mov	r0, r4
 8002aea:	4629      	mov	r1, r5
 8002aec:	f7fd fda4 	bl	8000638 <__aeabi_dmul>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4614      	mov	r4, r2
 8002af6:	461d      	mov	r5, r3
 8002af8:	68b8      	ldr	r0, [r7, #8]
 8002afa:	f7fd fd45 	bl	8000588 <__aeabi_f2d>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	4620      	mov	r0, r4
 8002b04:	4629      	mov	r1, r5
 8002b06:	f7fd fbe1 	bl	80002cc <__adddf3>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	4610      	mov	r0, r2
 8002b10:	4619      	mov	r1, r3
 8002b12:	f7fe f869 	bl	8000be8 <__aeabi_d2f>
 8002b16:	4603      	mov	r3, r0
 8002b18:	62bb      	str	r3, [r7, #40]	@ 0x28
        float difference = sineValue - data[i];
 8002b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	69fa      	ldr	r2, [r7, #28]
 8002b20:	4413      	add	r3, r2
 8002b22:	edd3 7a00 	vldr	s15, [r3]
 8002b26:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002b2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b2e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        error += difference * difference; // Squared error
 8002b32:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002b36:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002b3a:	ee17 0a90 	vmov	r0, s15
 8002b3e:	f7fd fd23 	bl	8000588 <__aeabi_f2d>
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002b4a:	f7fd fbbf 	bl	80002cc <__adddf3>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    for (int i = 0; i < dataLength; i++) {
 8002b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b58:	3301      	adds	r3, #1
 8002b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	db89      	blt.n	8002a78 <calculateError+0x30>
    }
    return error;
 8002b64:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002b68:	f7fe f83e 	bl	8000be8 <__aeabi_d2f>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	ee07 3a90 	vmov	s15, r3
}
 8002b72:	eeb0 0a67 	vmov.f32	s0, s15
 8002b76:	3738      	adds	r7, #56	@ 0x38
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b7e:	bf00      	nop
 8002b80:	54442d18 	.word	0x54442d18
 8002b84:	401921fb 	.word	0x401921fb

08002b88 <max>:


float max(float data[], int dataLength) {
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
	float max = 0.0f;
 8002b92:	f04f 0300 	mov.w	r3, #0
 8002b96:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < dataLength; i++) {
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60bb      	str	r3, [r7, #8]
 8002b9c:	e015      	b.n	8002bca <max+0x42>
		if (data[i] > max) {
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	edd3 7a00 	vldr	s15, [r3]
 8002baa:	ed97 7a03 	vldr	s14, [r7, #12]
 8002bae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb6:	d505      	bpl.n	8002bc4 <max+0x3c>
			max = data[i];
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < dataLength; i++) {
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	dbe5      	blt.n	8002b9e <max+0x16>
		}
	}
	return max;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	ee07 3a90 	vmov	s15, r3
}
 8002bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <min>:


float min(float data[], int dataLength) {
 8002be6:	b480      	push	{r7}
 8002be8:	b085      	sub	sp, #20
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	6039      	str	r1, [r7, #0]
	float min = data[0];
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < dataLength; i++) {
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	e015      	b.n	8002c28 <min+0x42>
		if (data[i] < min) {
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	4413      	add	r3, r2
 8002c04:	edd3 7a00 	vldr	s15, [r3]
 8002c08:	ed97 7a03 	vldr	s14, [r7, #12]
 8002c0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c14:	dd05      	ble.n	8002c22 <min+0x3c>
			min = data[i];
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < dataLength; i++) {
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	3301      	adds	r3, #1
 8002c26:	60bb      	str	r3, [r7, #8]
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	dbe5      	blt.n	8002bfc <min+0x16>
		}
	}
	return min;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	ee07 3a90 	vmov	s15, r3
}
 8002c36:	eeb0 0a67 	vmov.f32	s0, s15
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <find_offset>:
			}
		}
	}
}

float find_offset(float data[], int dataLength) {
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
	float total = 0;
 8002c4e:	f04f 0300 	mov.w	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < dataLength; i++) {
 8002c54:	2300      	movs	r3, #0
 8002c56:	60bb      	str	r3, [r7, #8]
 8002c58:	e00e      	b.n	8002c78 <find_offset+0x34>
		total += data[i];
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	4413      	add	r3, r2
 8002c62:	edd3 7a00 	vldr	s15, [r3]
 8002c66:	ed97 7a03 	vldr	s14, [r7, #12]
 8002c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c6e:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i = 0; i < dataLength; i++) {
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	3301      	adds	r3, #1
 8002c76:	60bb      	str	r3, [r7, #8]
 8002c78:	68ba      	ldr	r2, [r7, #8]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	dbec      	blt.n	8002c5a <find_offset+0x16>
	}
	total = total / dataLength;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	ee07 3a90 	vmov	s15, r3
 8002c86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c8a:	edd7 6a03 	vldr	s13, [r7, #12]
 8002c8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c92:	edc7 7a03 	vstr	s15, [r7, #12]
	return total;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	ee07 3a90 	vmov	s15, r3
}
 8002c9c:	eeb0 0a67 	vmov.f32	s0, s15
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	0000      	movs	r0, r0
 8002cac:	0000      	movs	r0, r0
	...

08002cb0 <fitSineWave>:

// Function to fit sine wave to the data by sweeping amplitude, phase, and offset
void fitSineWave(const float data[], const float timestamps[], int dataLength, float frequency,
				float* bestAmplitude, float* bestPhase, float* bestOffset) {
 8002cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cb4:	ed2d 8b02 	vpush	{d8}
 8002cb8:	b09e      	sub	sp, #120	@ 0x78
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6178      	str	r0, [r7, #20]
 8002cbe:	6139      	str	r1, [r7, #16]
 8002cc0:	60fa      	str	r2, [r7, #12]
 8002cc2:	ed87 0a02 	vstr	s0, [r7, #8]
 8002cc6:	607b      	str	r3, [r7, #4]

    float amplitudeMin = 0.01, amplitudeMax = 1.0, amplitudeStepLarge = 0.01;
 8002cc8:	4bc9      	ldr	r3, [pc, #804]	@ (8002ff0 <fitSineWave+0x340>)
 8002cca:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ccc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002cd0:	653b      	str	r3, [r7, #80]	@ 0x50
 8002cd2:	4bc7      	ldr	r3, [pc, #796]	@ (8002ff0 <fitSineWave+0x340>)
 8002cd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    float phaseMin = - M_PI, phaseMax = M_PI, phaseStepLarge = 1;
 8002cd6:	4bc7      	ldr	r3, [pc, #796]	@ (8002ff4 <fitSineWave+0x344>)
 8002cd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cda:	4bc7      	ldr	r3, [pc, #796]	@ (8002ff8 <fitSineWave+0x348>)
 8002cdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cde:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002ce2:	643b      	str	r3, [r7, #64]	@ 0x40
    float offsetMin = 0.5, offsetMax = 2.0, offsetStep = 0.01;
 8002ce4:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8002ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002cee:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002cf0:	4bbf      	ldr	r3, [pc, #764]	@ (8002ff0 <fitSineWave+0x340>)
 8002cf2:	637b      	str	r3, [r7, #52]	@ 0x34

    int cycleSteps = 5;
 8002cf4:	2305      	movs	r3, #5
 8002cf6:	633b      	str	r3, [r7, #48]	@ 0x30
    // SImplest (worst) method for sine fitting.
    // Bad guesses for amplitude and offset, then recursively find the phase angle.
    float A = (max(data, dataLength) - min(data, dataLength)) / 2;
 8002cf8:	68f9      	ldr	r1, [r7, #12]
 8002cfa:	6978      	ldr	r0, [r7, #20]
 8002cfc:	f7ff ff44 	bl	8002b88 <max>
 8002d00:	eeb0 8a40 	vmov.f32	s16, s0
 8002d04:	68f9      	ldr	r1, [r7, #12]
 8002d06:	6978      	ldr	r0, [r7, #20]
 8002d08:	f7ff ff6d 	bl	8002be6 <min>
 8002d0c:	eef0 7a40 	vmov.f32	s15, s0
 8002d10:	ee38 7a67 	vsub.f32	s14, s16, s15
 8002d14:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002d18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d1c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
//    float O = (max(data, dataLength) + min(data, dataLength)) / 2;
    float O = find_offset(data, dataLength);
 8002d20:	68f9      	ldr	r1, [r7, #12]
 8002d22:	6978      	ldr	r0, [r7, #20]
 8002d24:	f7ff ff8e 	bl	8002c44 <find_offset>
 8002d28:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    *bestOffset = O;
 8002d2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d32:	601a      	str	r2, [r3, #0]



    float minError = FLT_MAX; // Initialize with the largest possible number
 8002d34:	4bb1      	ldr	r3, [pc, #708]	@ (8002ffc <fitSineWave+0x34c>)
 8002d36:	677b      	str	r3, [r7, #116]	@ 0x74

    // Start by finding a quick estimate
    for (float phase = phaseMin; phase <= phaseMax; phase += phaseStepLarge) {
 8002d38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d3a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d3c:	e025      	b.n	8002d8a <fitSineWave+0xda>
		// Calculate the error for the current combination of parameters
		float error = calculateError(data, timestamps, dataLength, A, phase, O, frequency);
 8002d3e:	edd7 1a02 	vldr	s3, [r7, #8]
 8002d42:	ed97 1a0a 	vldr	s2, [r7, #40]	@ 0x28
 8002d46:	edd7 0a1c 	vldr	s1, [r7, #112]	@ 0x70
 8002d4a:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	6939      	ldr	r1, [r7, #16]
 8002d52:	6978      	ldr	r0, [r7, #20]
 8002d54:	f7ff fe78 	bl	8002a48 <calculateError>
 8002d58:	ed87 0a06 	vstr	s0, [r7, #24]

		// If this combination gives a smaller error, update the best parameters
		if (error < minError) {
 8002d5c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002d60:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8002d64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d6c:	d505      	bpl.n	8002d7a <fitSineWave+0xca>
			minError = error;
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	677b      	str	r3, [r7, #116]	@ 0x74
			*bestPhase = phase;
 8002d72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002d76:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002d78:	601a      	str	r2, [r3, #0]
    for (float phase = phaseMin; phase <= phaseMax; phase += phaseStepLarge) {
 8002d7a:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8002d7e:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002d82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d86:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
 8002d8a:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8002d8e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002d92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9a:	d9d0      	bls.n	8002d3e <fitSineWave+0x8e>
		}
	}

    // from here on out, recursively sweep to find a more and more ideal phase estimation.
    for(int i = 1; i < cycleSteps; i++ ) {
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002da0:	e0ae      	b.n	8002f00 <fitSineWave+0x250>
		// At this point it should be an alright value of the phase. Get closer to the real one.
		for (float phase = *bestPhase - phaseStepLarge / pow(10, i-1);
 8002da2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fd fbed 	bl	8000588 <__aeabi_f2d>
 8002dae:	4604      	mov	r4, r0
 8002db0:	460d      	mov	r5, r1
 8002db2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002db4:	f7fd fbe8 	bl	8000588 <__aeabi_f2d>
 8002db8:	4680      	mov	r8, r0
 8002dba:	4689      	mov	r9, r1
 8002dbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fd fbcf 	bl	8000564 <__aeabi_i2d>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	ec43 2b11 	vmov	d1, r2, r3
 8002dce:	ed9f 0b86 	vldr	d0, [pc, #536]	@ 8002fe8 <fitSineWave+0x338>
 8002dd2:	f007 f9e5 	bl	800a1a0 <pow>
 8002dd6:	ec53 2b10 	vmov	r2, r3, d0
 8002dda:	4640      	mov	r0, r8
 8002ddc:	4649      	mov	r1, r9
 8002dde:	f7fd fd55 	bl	800088c <__aeabi_ddiv>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4620      	mov	r0, r4
 8002de8:	4629      	mov	r1, r5
 8002dea:	f7fd fa6d 	bl	80002c8 <__aeabi_dsub>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	4610      	mov	r0, r2
 8002df4:	4619      	mov	r1, r3
 8002df6:	f7fd fef7 	bl	8000be8 <__aeabi_d2f>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002dfe:	e048      	b.n	8002e92 <fitSineWave+0x1e2>
				phase <= *bestPhase + phaseStepLarge / pow(10, i-1);
				phase += phaseStepLarge / pow(10, i)) {
			// Calculate the error for the current combination of parameters
			float error = calculateError(data, timestamps, dataLength, A, phase, O, frequency);
 8002e00:	edd7 1a02 	vldr	s3, [r7, #8]
 8002e04:	ed97 1a0a 	vldr	s2, [r7, #40]	@ 0x28
 8002e08:	edd7 0a1a 	vldr	s1, [r7, #104]	@ 0x68
 8002e0c:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	6939      	ldr	r1, [r7, #16]
 8002e14:	6978      	ldr	r0, [r7, #20]
 8002e16:	f7ff fe17 	bl	8002a48 <calculateError>
 8002e1a:	ed87 0a07 	vstr	s0, [r7, #28]

			// If this combination gives a smaller error, update the best parameters
			if (error < minError) {
 8002e1e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002e22:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8002e26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2e:	d505      	bpl.n	8002e3c <fitSineWave+0x18c>
				minError = error;
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	677b      	str	r3, [r7, #116]	@ 0x74
				*bestPhase = phase;
 8002e34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e38:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002e3a:	601a      	str	r2, [r3, #0]
				phase += phaseStepLarge / pow(10, i)) {
 8002e3c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002e3e:	f7fd fba3 	bl	8000588 <__aeabi_f2d>
 8002e42:	4604      	mov	r4, r0
 8002e44:	460d      	mov	r5, r1
 8002e46:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002e48:	f7fd fb8c 	bl	8000564 <__aeabi_i2d>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	ec43 2b11 	vmov	d1, r2, r3
 8002e54:	ed9f 0b64 	vldr	d0, [pc, #400]	@ 8002fe8 <fitSineWave+0x338>
 8002e58:	f007 f9a2 	bl	800a1a0 <pow>
 8002e5c:	ec53 2b10 	vmov	r2, r3, d0
 8002e60:	4620      	mov	r0, r4
 8002e62:	4629      	mov	r1, r5
 8002e64:	f7fd fd12 	bl	800088c <__aeabi_ddiv>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	4614      	mov	r4, r2
 8002e6e:	461d      	mov	r5, r3
 8002e70:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002e72:	f7fd fb89 	bl	8000588 <__aeabi_f2d>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	4620      	mov	r0, r4
 8002e7c:	4629      	mov	r1, r5
 8002e7e:	f7fd fa25 	bl	80002cc <__adddf3>
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	4610      	mov	r0, r2
 8002e88:	4619      	mov	r1, r3
 8002e8a:	f7fd fead 	bl	8000be8 <__aeabi_d2f>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	66bb      	str	r3, [r7, #104]	@ 0x68
				phase <= *bestPhase + phaseStepLarge / pow(10, i-1);
 8002e92:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002e94:	f7fd fb78 	bl	8000588 <__aeabi_f2d>
 8002e98:	4604      	mov	r4, r0
 8002e9a:	460d      	mov	r5, r1
 8002e9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fd fb70 	bl	8000588 <__aeabi_f2d>
 8002ea8:	4680      	mov	r8, r0
 8002eaa:	4689      	mov	r9, r1
 8002eac:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002eae:	f7fd fb6b 	bl	8000588 <__aeabi_f2d>
 8002eb2:	4682      	mov	sl, r0
 8002eb4:	468b      	mov	fp, r1
 8002eb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fd fb52 	bl	8000564 <__aeabi_i2d>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	ec43 2b11 	vmov	d1, r2, r3
 8002ec8:	ed9f 0b47 	vldr	d0, [pc, #284]	@ 8002fe8 <fitSineWave+0x338>
 8002ecc:	f007 f968 	bl	800a1a0 <pow>
 8002ed0:	ec53 2b10 	vmov	r2, r3, d0
 8002ed4:	4650      	mov	r0, sl
 8002ed6:	4659      	mov	r1, fp
 8002ed8:	f7fd fcd8 	bl	800088c <__aeabi_ddiv>
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	4640      	mov	r0, r8
 8002ee2:	4649      	mov	r1, r9
 8002ee4:	f7fd f9f2 	bl	80002cc <__adddf3>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	4620      	mov	r0, r4
 8002eee:	4629      	mov	r1, r5
 8002ef0:	f7fd fe1e 	bl	8000b30 <__aeabi_dcmple>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d182      	bne.n	8002e00 <fitSineWave+0x150>
    for(int i = 1; i < cycleSteps; i++ ) {
 8002efa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002efc:	3301      	adds	r3, #1
 8002efe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f00:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f04:	429a      	cmp	r2, r3
 8002f06:	f6ff af4c 	blt.w	8002da2 <fitSineWave+0xf2>
			}
		}
    }

    float ampError = FLT_MAX;
 8002f0a:	4b3c      	ldr	r3, [pc, #240]	@ (8002ffc <fitSineWave+0x34c>)
 8002f0c:	667b      	str	r3, [r7, #100]	@ 0x64
    for (float amplitude = amplitudeMin; amplitude <= amplitudeMax; amplitude += amplitudeStepLarge) {
 8002f0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f10:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f12:	e02c      	b.n	8002f6e <fitSineWave+0x2be>
		// Calculate the error for the current combination of parameters
		float error = calculateError(data, timestamps, dataLength, amplitude, *bestPhase, *bestOffset, frequency);
 8002f14:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f18:	edd3 7a00 	vldr	s15, [r3]
 8002f1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f20:	ed93 7a00 	vldr	s14, [r3]
 8002f24:	edd7 1a02 	vldr	s3, [r7, #8]
 8002f28:	eeb0 1a47 	vmov.f32	s2, s14
 8002f2c:	eef0 0a67 	vmov.f32	s1, s15
 8002f30:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	6939      	ldr	r1, [r7, #16]
 8002f38:	6978      	ldr	r0, [r7, #20]
 8002f3a:	f7ff fd85 	bl	8002a48 <calculateError>
 8002f3e:	ed87 0a08 	vstr	s0, [r7, #32]

		// If this combination gives a smaller error, update the best parameters
		if (error < ampError) {
 8002f42:	ed97 7a08 	vldr	s14, [r7, #32]
 8002f46:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002f4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f52:	d504      	bpl.n	8002f5e <fitSineWave+0x2ae>
			ampError = error;
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	667b      	str	r3, [r7, #100]	@ 0x64
			*bestAmplitude = amplitude;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002f5c:	601a      	str	r2, [r3, #0]
    for (float amplitude = amplitudeMin; amplitude <= amplitudeMax; amplitude += amplitudeStepLarge) {
 8002f5e:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8002f62:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f6a:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
 8002f6e:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8002f72:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8002f76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f7e:	d9c9      	bls.n	8002f14 <fitSineWave+0x264>
		}
	}

	// from here on out, recursively sweep to find a more and more ideal phase estimation.
	for(int i = 1; i < cycleSteps; i++ ) {
 8002f80:	2301      	movs	r3, #1
 8002f82:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f84:	e0c3      	b.n	800310e <fitSineWave+0x45e>
		// At this point it should be an alright value of the phase. Get closer to the real one.
		for (float amplitude = *bestAmplitude - amplitudeStepLarge / pow(10, i-1);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fd fafc 	bl	8000588 <__aeabi_f2d>
 8002f90:	4604      	mov	r4, r0
 8002f92:	460d      	mov	r5, r1
 8002f94:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002f96:	f7fd faf7 	bl	8000588 <__aeabi_f2d>
 8002f9a:	4680      	mov	r8, r0
 8002f9c:	4689      	mov	r9, r1
 8002f9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7fd fade 	bl	8000564 <__aeabi_i2d>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	ec43 2b11 	vmov	d1, r2, r3
 8002fb0:	ed9f 0b0d 	vldr	d0, [pc, #52]	@ 8002fe8 <fitSineWave+0x338>
 8002fb4:	f007 f8f4 	bl	800a1a0 <pow>
 8002fb8:	ec53 2b10 	vmov	r2, r3, d0
 8002fbc:	4640      	mov	r0, r8
 8002fbe:	4649      	mov	r1, r9
 8002fc0:	f7fd fc64 	bl	800088c <__aeabi_ddiv>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	4620      	mov	r0, r4
 8002fca:	4629      	mov	r1, r5
 8002fcc:	f7fd f97c 	bl	80002c8 <__aeabi_dsub>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	f7fd fe06 	bl	8000be8 <__aeabi_d2f>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002fe0:	e05e      	b.n	80030a0 <fitSineWave+0x3f0>
 8002fe2:	bf00      	nop
 8002fe4:	f3af 8000 	nop.w
 8002fe8:	00000000 	.word	0x00000000
 8002fec:	40240000 	.word	0x40240000
 8002ff0:	3c23d70a 	.word	0x3c23d70a
 8002ff4:	c0490fdb 	.word	0xc0490fdb
 8002ff8:	40490fdb 	.word	0x40490fdb
 8002ffc:	7f7fffff 	.word	0x7f7fffff
				amplitude <= *bestAmplitude + amplitudeStepLarge / pow(10, i-1);
				amplitude += amplitudeStepLarge / pow(10, i)) {
			// Calculate the error for the current combination of parameters
			float error = calculateError(data, timestamps, dataLength, amplitude, *bestPhase, *bestOffset, frequency);
 8003000:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003004:	edd3 7a00 	vldr	s15, [r3]
 8003008:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800300c:	ed93 7a00 	vldr	s14, [r3]
 8003010:	edd7 1a02 	vldr	s3, [r7, #8]
 8003014:	eeb0 1a47 	vmov.f32	s2, s14
 8003018:	eef0 0a67 	vmov.f32	s1, s15
 800301c:	ed97 0a16 	vldr	s0, [r7, #88]	@ 0x58
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	6939      	ldr	r1, [r7, #16]
 8003024:	6978      	ldr	r0, [r7, #20]
 8003026:	f7ff fd0f 	bl	8002a48 <calculateError>
 800302a:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

			// If this combination gives a smaller error, update the best parameters
			if (error < ampError) {
 800302e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003032:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8003036:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800303a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800303e:	d504      	bpl.n	800304a <fitSineWave+0x39a>
				ampError = error;
 8003040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003042:	667b      	str	r3, [r7, #100]	@ 0x64
				*bestAmplitude = amplitude;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003048:	601a      	str	r2, [r3, #0]
				amplitude += amplitudeStepLarge / pow(10, i)) {
 800304a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800304c:	f7fd fa9c 	bl	8000588 <__aeabi_f2d>
 8003050:	4604      	mov	r4, r0
 8003052:	460d      	mov	r5, r1
 8003054:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8003056:	f7fd fa85 	bl	8000564 <__aeabi_i2d>
 800305a:	4602      	mov	r2, r0
 800305c:	460b      	mov	r3, r1
 800305e:	ec43 2b11 	vmov	d1, r2, r3
 8003062:	ed9f 0b31 	vldr	d0, [pc, #196]	@ 8003128 <fitSineWave+0x478>
 8003066:	f007 f89b 	bl	800a1a0 <pow>
 800306a:	ec53 2b10 	vmov	r2, r3, d0
 800306e:	4620      	mov	r0, r4
 8003070:	4629      	mov	r1, r5
 8003072:	f7fd fc0b 	bl	800088c <__aeabi_ddiv>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	4614      	mov	r4, r2
 800307c:	461d      	mov	r5, r3
 800307e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003080:	f7fd fa82 	bl	8000588 <__aeabi_f2d>
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	4620      	mov	r0, r4
 800308a:	4629      	mov	r1, r5
 800308c:	f7fd f91e 	bl	80002cc <__adddf3>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	4610      	mov	r0, r2
 8003096:	4619      	mov	r1, r3
 8003098:	f7fd fda6 	bl	8000be8 <__aeabi_d2f>
 800309c:	4603      	mov	r3, r0
 800309e:	65bb      	str	r3, [r7, #88]	@ 0x58
				amplitude <= *bestAmplitude + amplitudeStepLarge / pow(10, i-1);
 80030a0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80030a2:	f7fd fa71 	bl	8000588 <__aeabi_f2d>
 80030a6:	4604      	mov	r4, r0
 80030a8:	460d      	mov	r5, r1
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fd fa6a 	bl	8000588 <__aeabi_f2d>
 80030b4:	4680      	mov	r8, r0
 80030b6:	4689      	mov	r9, r1
 80030b8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80030ba:	f7fd fa65 	bl	8000588 <__aeabi_f2d>
 80030be:	4682      	mov	sl, r0
 80030c0:	468b      	mov	fp, r1
 80030c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030c4:	3b01      	subs	r3, #1
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fd fa4c 	bl	8000564 <__aeabi_i2d>
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	ec43 2b11 	vmov	d1, r2, r3
 80030d4:	ed9f 0b14 	vldr	d0, [pc, #80]	@ 8003128 <fitSineWave+0x478>
 80030d8:	f007 f862 	bl	800a1a0 <pow>
 80030dc:	ec53 2b10 	vmov	r2, r3, d0
 80030e0:	4650      	mov	r0, sl
 80030e2:	4659      	mov	r1, fp
 80030e4:	f7fd fbd2 	bl	800088c <__aeabi_ddiv>
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	4640      	mov	r0, r8
 80030ee:	4649      	mov	r1, r9
 80030f0:	f7fd f8ec 	bl	80002cc <__adddf3>
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	4620      	mov	r0, r4
 80030fa:	4629      	mov	r1, r5
 80030fc:	f7fd fd18 	bl	8000b30 <__aeabi_dcmple>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	f47f af7c 	bne.w	8003000 <fitSineWave+0x350>
	for(int i = 1; i < cycleSteps; i++ ) {
 8003108:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800310a:	3301      	adds	r3, #1
 800310c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800310e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003112:	429a      	cmp	r2, r3
 8003114:	f6ff af37 	blt.w	8002f86 <fitSineWave+0x2d6>
			}
		}
	}
}
 8003118:	bf00      	nop
 800311a:	bf00      	nop
 800311c:	3778      	adds	r7, #120	@ 0x78
 800311e:	46bd      	mov	sp, r7
 8003120:	ecbd 8b02 	vpop	{d8}
 8003124:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003128:	00000000 	.word	0x00000000
 800312c:	40240000 	.word	0x40240000

08003130 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	607b      	str	r3, [r7, #4]
 800313a:	4b10      	ldr	r3, [pc, #64]	@ (800317c <HAL_MspInit+0x4c>)
 800313c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800313e:	4a0f      	ldr	r2, [pc, #60]	@ (800317c <HAL_MspInit+0x4c>)
 8003140:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003144:	6453      	str	r3, [r2, #68]	@ 0x44
 8003146:	4b0d      	ldr	r3, [pc, #52]	@ (800317c <HAL_MspInit+0x4c>)
 8003148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800314a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800314e:	607b      	str	r3, [r7, #4]
 8003150:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003152:	2300      	movs	r3, #0
 8003154:	603b      	str	r3, [r7, #0]
 8003156:	4b09      	ldr	r3, [pc, #36]	@ (800317c <HAL_MspInit+0x4c>)
 8003158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315a:	4a08      	ldr	r2, [pc, #32]	@ (800317c <HAL_MspInit+0x4c>)
 800315c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003160:	6413      	str	r3, [r2, #64]	@ 0x40
 8003162:	4b06      	ldr	r3, [pc, #24]	@ (800317c <HAL_MspInit+0x4c>)
 8003164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800316a:	603b      	str	r3, [r7, #0]
 800316c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	40023800 	.word	0x40023800

08003180 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b08a      	sub	sp, #40	@ 0x28
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003188:	f107 0314 	add.w	r3, r7, #20
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	605a      	str	r2, [r3, #4]
 8003192:	609a      	str	r2, [r3, #8]
 8003194:	60da      	str	r2, [r3, #12]
 8003196:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a17      	ldr	r2, [pc, #92]	@ (80031fc <HAL_ADC_MspInit+0x7c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d127      	bne.n	80031f2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80031a2:	2300      	movs	r3, #0
 80031a4:	613b      	str	r3, [r7, #16]
 80031a6:	4b16      	ldr	r3, [pc, #88]	@ (8003200 <HAL_ADC_MspInit+0x80>)
 80031a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031aa:	4a15      	ldr	r2, [pc, #84]	@ (8003200 <HAL_ADC_MspInit+0x80>)
 80031ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80031b2:	4b13      	ldr	r3, [pc, #76]	@ (8003200 <HAL_ADC_MspInit+0x80>)
 80031b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ba:	613b      	str	r3, [r7, #16]
 80031bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031be:	2300      	movs	r3, #0
 80031c0:	60fb      	str	r3, [r7, #12]
 80031c2:	4b0f      	ldr	r3, [pc, #60]	@ (8003200 <HAL_ADC_MspInit+0x80>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c6:	4a0e      	ldr	r2, [pc, #56]	@ (8003200 <HAL_ADC_MspInit+0x80>)
 80031c8:	f043 0302 	orr.w	r3, r3, #2
 80031cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80031ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003200 <HAL_ADC_MspInit+0x80>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80031da:	2302      	movs	r3, #2
 80031dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031de:	2303      	movs	r3, #3
 80031e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e2:	2300      	movs	r3, #0
 80031e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031e6:	f107 0314 	add.w	r3, r7, #20
 80031ea:	4619      	mov	r1, r3
 80031ec:	4805      	ldr	r0, [pc, #20]	@ (8003204 <HAL_ADC_MspInit+0x84>)
 80031ee:	f000 fee5 	bl	8003fbc <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80031f2:	bf00      	nop
 80031f4:	3728      	adds	r7, #40	@ 0x28
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40012000 	.word	0x40012000
 8003200:	40023800 	.word	0x40023800
 8003204:	40020400 	.word	0x40020400

08003208 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08c      	sub	sp, #48	@ 0x30
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003210:	f107 031c 	add.w	r3, r7, #28
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	605a      	str	r2, [r3, #4]
 800321a:	609a      	str	r2, [r3, #8]
 800321c:	60da      	str	r2, [r3, #12]
 800321e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a41      	ldr	r2, [pc, #260]	@ (800332c <HAL_SPI_MspInit+0x124>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d12c      	bne.n	8003284 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	61bb      	str	r3, [r7, #24]
 800322e:	4b40      	ldr	r3, [pc, #256]	@ (8003330 <HAL_SPI_MspInit+0x128>)
 8003230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003232:	4a3f      	ldr	r2, [pc, #252]	@ (8003330 <HAL_SPI_MspInit+0x128>)
 8003234:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003238:	6453      	str	r3, [r2, #68]	@ 0x44
 800323a:	4b3d      	ldr	r3, [pc, #244]	@ (8003330 <HAL_SPI_MspInit+0x128>)
 800323c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800323e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003242:	61bb      	str	r3, [r7, #24]
 8003244:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003246:	2300      	movs	r3, #0
 8003248:	617b      	str	r3, [r7, #20]
 800324a:	4b39      	ldr	r3, [pc, #228]	@ (8003330 <HAL_SPI_MspInit+0x128>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324e:	4a38      	ldr	r2, [pc, #224]	@ (8003330 <HAL_SPI_MspInit+0x128>)
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	6313      	str	r3, [r2, #48]	@ 0x30
 8003256:	4b36      	ldr	r3, [pc, #216]	@ (8003330 <HAL_SPI_MspInit+0x128>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003262:	23e0      	movs	r3, #224	@ 0xe0
 8003264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003266:	2302      	movs	r3, #2
 8003268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326a:	2300      	movs	r3, #0
 800326c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800326e:	2303      	movs	r3, #3
 8003270:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003272:	2305      	movs	r3, #5
 8003274:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003276:	f107 031c 	add.w	r3, r7, #28
 800327a:	4619      	mov	r1, r3
 800327c:	482d      	ldr	r0, [pc, #180]	@ (8003334 <HAL_SPI_MspInit+0x12c>)
 800327e:	f000 fe9d 	bl	8003fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003282:	e04f      	b.n	8003324 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI3)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a2b      	ldr	r2, [pc, #172]	@ (8003338 <HAL_SPI_MspInit+0x130>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d14a      	bne.n	8003324 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800328e:	2300      	movs	r3, #0
 8003290:	613b      	str	r3, [r7, #16]
 8003292:	4b27      	ldr	r3, [pc, #156]	@ (8003330 <HAL_SPI_MspInit+0x128>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003296:	4a26      	ldr	r2, [pc, #152]	@ (8003330 <HAL_SPI_MspInit+0x128>)
 8003298:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800329c:	6413      	str	r3, [r2, #64]	@ 0x40
 800329e:	4b24      	ldr	r3, [pc, #144]	@ (8003330 <HAL_SPI_MspInit+0x128>)
 80032a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032a6:	613b      	str	r3, [r7, #16]
 80032a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032aa:	2300      	movs	r3, #0
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	4b20      	ldr	r3, [pc, #128]	@ (8003330 <HAL_SPI_MspInit+0x128>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b2:	4a1f      	ldr	r2, [pc, #124]	@ (8003330 <HAL_SPI_MspInit+0x128>)
 80032b4:	f043 0302 	orr.w	r3, r3, #2
 80032b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003330 <HAL_SPI_MspInit+0x128>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032c6:	2300      	movs	r3, #0
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	4b19      	ldr	r3, [pc, #100]	@ (8003330 <HAL_SPI_MspInit+0x128>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ce:	4a18      	ldr	r2, [pc, #96]	@ (8003330 <HAL_SPI_MspInit+0x128>)
 80032d0:	f043 0304 	orr.w	r3, r3, #4
 80032d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80032d6:	4b16      	ldr	r3, [pc, #88]	@ (8003330 <HAL_SPI_MspInit+0x128>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032da:	f003 0304 	and.w	r3, r3, #4
 80032de:	60bb      	str	r3, [r7, #8]
 80032e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80032e2:	2304      	movs	r3, #4
 80032e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e6:	2302      	movs	r3, #2
 80032e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ea:	2300      	movs	r3, #0
 80032ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ee:	2303      	movs	r3, #3
 80032f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80032f2:	2307      	movs	r3, #7
 80032f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032f6:	f107 031c 	add.w	r3, r7, #28
 80032fa:	4619      	mov	r1, r3
 80032fc:	480f      	ldr	r0, [pc, #60]	@ (800333c <HAL_SPI_MspInit+0x134>)
 80032fe:	f000 fe5d 	bl	8003fbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003302:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003308:	2302      	movs	r3, #2
 800330a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330c:	2300      	movs	r3, #0
 800330e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003310:	2303      	movs	r3, #3
 8003312:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003314:	2306      	movs	r3, #6
 8003316:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003318:	f107 031c 	add.w	r3, r7, #28
 800331c:	4619      	mov	r1, r3
 800331e:	4808      	ldr	r0, [pc, #32]	@ (8003340 <HAL_SPI_MspInit+0x138>)
 8003320:	f000 fe4c 	bl	8003fbc <HAL_GPIO_Init>
}
 8003324:	bf00      	nop
 8003326:	3730      	adds	r7, #48	@ 0x30
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40013000 	.word	0x40013000
 8003330:	40023800 	.word	0x40023800
 8003334:	40020000 	.word	0x40020000
 8003338:	40003c00 	.word	0x40003c00
 800333c:	40020400 	.word	0x40020400
 8003340:	40020800 	.word	0x40020800

08003344 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003354:	d115      	bne.n	8003382 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	60fb      	str	r3, [r7, #12]
 800335a:	4b0c      	ldr	r3, [pc, #48]	@ (800338c <HAL_TIM_Base_MspInit+0x48>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335e:	4a0b      	ldr	r2, [pc, #44]	@ (800338c <HAL_TIM_Base_MspInit+0x48>)
 8003360:	f043 0301 	orr.w	r3, r3, #1
 8003364:	6413      	str	r3, [r2, #64]	@ 0x40
 8003366:	4b09      	ldr	r3, [pc, #36]	@ (800338c <HAL_TIM_Base_MspInit+0x48>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003372:	2200      	movs	r2, #0
 8003374:	2100      	movs	r1, #0
 8003376:	201c      	movs	r0, #28
 8003378:	f000 fde9 	bl	8003f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800337c:	201c      	movs	r0, #28
 800337e:	f000 fe02 	bl	8003f86 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8003382:	bf00      	nop
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40023800 	.word	0x40023800

08003390 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b08a      	sub	sp, #40	@ 0x28
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003398:	f107 0314 	add.w	r3, r7, #20
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	605a      	str	r2, [r3, #4]
 80033a2:	609a      	str	r2, [r3, #8]
 80033a4:	60da      	str	r2, [r3, #12]
 80033a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a19      	ldr	r2, [pc, #100]	@ (8003414 <HAL_UART_MspInit+0x84>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d12c      	bne.n	800340c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80033b2:	2300      	movs	r3, #0
 80033b4:	613b      	str	r3, [r7, #16]
 80033b6:	4b18      	ldr	r3, [pc, #96]	@ (8003418 <HAL_UART_MspInit+0x88>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ba:	4a17      	ldr	r2, [pc, #92]	@ (8003418 <HAL_UART_MspInit+0x88>)
 80033bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033c2:	4b15      	ldr	r3, [pc, #84]	@ (8003418 <HAL_UART_MspInit+0x88>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033ca:	613b      	str	r3, [r7, #16]
 80033cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033ce:	2300      	movs	r3, #0
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	4b11      	ldr	r3, [pc, #68]	@ (8003418 <HAL_UART_MspInit+0x88>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d6:	4a10      	ldr	r2, [pc, #64]	@ (8003418 <HAL_UART_MspInit+0x88>)
 80033d8:	f043 0308 	orr.w	r3, r3, #8
 80033dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80033de:	4b0e      	ldr	r3, [pc, #56]	@ (8003418 <HAL_UART_MspInit+0x88>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80033ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80033ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f0:	2302      	movs	r3, #2
 80033f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f4:	2300      	movs	r3, #0
 80033f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033f8:	2303      	movs	r3, #3
 80033fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80033fc:	2307      	movs	r3, #7
 80033fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003400:	f107 0314 	add.w	r3, r7, #20
 8003404:	4619      	mov	r1, r3
 8003406:	4805      	ldr	r0, [pc, #20]	@ (800341c <HAL_UART_MspInit+0x8c>)
 8003408:	f000 fdd8 	bl	8003fbc <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800340c:	bf00      	nop
 800340e:	3728      	adds	r7, #40	@ 0x28
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40004800 	.word	0x40004800
 8003418:	40023800 	.word	0x40023800
 800341c:	40020c00 	.word	0x40020c00

08003420 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b0a0      	sub	sp, #128	@ 0x80
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003428:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	605a      	str	r2, [r3, #4]
 8003432:	609a      	str	r2, [r3, #8]
 8003434:	60da      	str	r2, [r3, #12]
 8003436:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003438:	f107 0310 	add.w	r3, r7, #16
 800343c:	225c      	movs	r2, #92	@ 0x5c
 800343e:	2100      	movs	r1, #0
 8003440:	4618      	mov	r0, r3
 8003442:	f004 fde4 	bl	800800e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800344e:	d14e      	bne.n	80034ee <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003450:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003454:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8003456:	2300      	movs	r3, #0
 8003458:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800345a:	f107 0310 	add.w	r3, r7, #16
 800345e:	4618      	mov	r0, r3
 8003460:	f001 f9c6 	bl	80047f0 <HAL_RCCEx_PeriphCLKConfig>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800346a:	f7ff fae5 	bl	8002a38 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800346e:	2300      	movs	r3, #0
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	4b21      	ldr	r3, [pc, #132]	@ (80034f8 <HAL_PCD_MspInit+0xd8>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003476:	4a20      	ldr	r2, [pc, #128]	@ (80034f8 <HAL_PCD_MspInit+0xd8>)
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	6313      	str	r3, [r2, #48]	@ 0x30
 800347e:	4b1e      	ldr	r3, [pc, #120]	@ (80034f8 <HAL_PCD_MspInit+0xd8>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800348a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800348e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003490:	2302      	movs	r3, #2
 8003492:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003494:	2300      	movs	r3, #0
 8003496:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003498:	2303      	movs	r3, #3
 800349a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800349c:	230a      	movs	r3, #10
 800349e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034a0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80034a4:	4619      	mov	r1, r3
 80034a6:	4815      	ldr	r0, [pc, #84]	@ (80034fc <HAL_PCD_MspInit+0xdc>)
 80034a8:	f000 fd88 	bl	8003fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80034ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80034b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034b2:	2300      	movs	r3, #0
 80034b4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80034ba:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80034be:	4619      	mov	r1, r3
 80034c0:	480e      	ldr	r0, [pc, #56]	@ (80034fc <HAL_PCD_MspInit+0xdc>)
 80034c2:	f000 fd7b 	bl	8003fbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80034c6:	4b0c      	ldr	r3, [pc, #48]	@ (80034f8 <HAL_PCD_MspInit+0xd8>)
 80034c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ca:	4a0b      	ldr	r2, [pc, #44]	@ (80034f8 <HAL_PCD_MspInit+0xd8>)
 80034cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034d0:	6353      	str	r3, [r2, #52]	@ 0x34
 80034d2:	2300      	movs	r3, #0
 80034d4:	60bb      	str	r3, [r7, #8]
 80034d6:	4b08      	ldr	r3, [pc, #32]	@ (80034f8 <HAL_PCD_MspInit+0xd8>)
 80034d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034da:	4a07      	ldr	r2, [pc, #28]	@ (80034f8 <HAL_PCD_MspInit+0xd8>)
 80034dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80034e2:	4b05      	ldr	r3, [pc, #20]	@ (80034f8 <HAL_PCD_MspInit+0xd8>)
 80034e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034ea:	60bb      	str	r3, [r7, #8]
 80034ec:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80034ee:	bf00      	nop
 80034f0:	3780      	adds	r7, #128	@ 0x80
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40023800 	.word	0x40023800
 80034fc:	40020000 	.word	0x40020000

08003500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003504:	bf00      	nop
 8003506:	e7fd      	b.n	8003504 <NMI_Handler+0x4>

08003508 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800350c:	bf00      	nop
 800350e:	e7fd      	b.n	800350c <HardFault_Handler+0x4>

08003510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003514:	bf00      	nop
 8003516:	e7fd      	b.n	8003514 <MemManage_Handler+0x4>

08003518 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800351c:	bf00      	nop
 800351e:	e7fd      	b.n	800351c <BusFault_Handler+0x4>

08003520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003524:	bf00      	nop
 8003526:	e7fd      	b.n	8003524 <UsageFault_Handler+0x4>

08003528 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800352c:	bf00      	nop
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003536:	b480      	push	{r7}
 8003538:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800353a:	bf00      	nop
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003548:	bf00      	nop
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003556:	f000 f969 	bl	800382c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800355a:	bf00      	nop
 800355c:	bd80      	pop	{r7, pc}
	...

08003560 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003564:	4802      	ldr	r0, [pc, #8]	@ (8003570 <TIM2_IRQHandler+0x10>)
 8003566:	f002 fe45 	bl	80061f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800356a:	bf00      	nop
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	20000304 	.word	0x20000304

08003574 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8003578:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800357c:	f000 fecc 	bl	8004318 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003580:	bf00      	nop
 8003582:	bd80      	pop	{r7, pc}

08003584 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  return 1;
 8003588:	2301      	movs	r3, #1
}
 800358a:	4618      	mov	r0, r3
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <_kill>:

int _kill(int pid, int sig)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800359e:	f004 fd89 	bl	80080b4 <__errno>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2216      	movs	r2, #22
 80035a6:	601a      	str	r2, [r3, #0]
  return -1;
 80035a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <_exit>:

void _exit (int status)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80035bc:	f04f 31ff 	mov.w	r1, #4294967295
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7ff ffe7 	bl	8003594 <_kill>
  while (1) {}    /* Make sure we hang here */
 80035c6:	bf00      	nop
 80035c8:	e7fd      	b.n	80035c6 <_exit+0x12>

080035ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b086      	sub	sp, #24
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	60f8      	str	r0, [r7, #12]
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035d6:	2300      	movs	r3, #0
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	e00a      	b.n	80035f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80035dc:	f3af 8000 	nop.w
 80035e0:	4601      	mov	r1, r0
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	1c5a      	adds	r2, r3, #1
 80035e6:	60ba      	str	r2, [r7, #8]
 80035e8:	b2ca      	uxtb	r2, r1
 80035ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	3301      	adds	r3, #1
 80035f0:	617b      	str	r3, [r7, #20]
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	dbf0      	blt.n	80035dc <_read+0x12>
  }

  return len;
 80035fa:	687b      	ldr	r3, [r7, #4]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003610:	2300      	movs	r3, #0
 8003612:	617b      	str	r3, [r7, #20]
 8003614:	e009      	b.n	800362a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	60ba      	str	r2, [r7, #8]
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	3301      	adds	r3, #1
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	429a      	cmp	r2, r3
 8003630:	dbf1      	blt.n	8003616 <_write+0x12>
  }
  return len;
 8003632:	687b      	ldr	r3, [r7, #4]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <_close>:

int _close(int file)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003644:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003648:	4618      	mov	r0, r3
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003664:	605a      	str	r2, [r3, #4]
  return 0;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <_isatty>:

int _isatty(int file)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800367c:	2301      	movs	r3, #1
}
 800367e:	4618      	mov	r0, r3
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800368a:	b480      	push	{r7}
 800368c:	b085      	sub	sp, #20
 800368e:	af00      	add	r7, sp, #0
 8003690:	60f8      	str	r0, [r7, #12]
 8003692:	60b9      	str	r1, [r7, #8]
 8003694:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036ac:	4a14      	ldr	r2, [pc, #80]	@ (8003700 <_sbrk+0x5c>)
 80036ae:	4b15      	ldr	r3, [pc, #84]	@ (8003704 <_sbrk+0x60>)
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036b8:	4b13      	ldr	r3, [pc, #76]	@ (8003708 <_sbrk+0x64>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d102      	bne.n	80036c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036c0:	4b11      	ldr	r3, [pc, #68]	@ (8003708 <_sbrk+0x64>)
 80036c2:	4a12      	ldr	r2, [pc, #72]	@ (800370c <_sbrk+0x68>)
 80036c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036c6:	4b10      	ldr	r3, [pc, #64]	@ (8003708 <_sbrk+0x64>)
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4413      	add	r3, r2
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d207      	bcs.n	80036e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036d4:	f004 fcee 	bl	80080b4 <__errno>
 80036d8:	4603      	mov	r3, r0
 80036da:	220c      	movs	r2, #12
 80036dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036de:	f04f 33ff 	mov.w	r3, #4294967295
 80036e2:	e009      	b.n	80036f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036e4:	4b08      	ldr	r3, [pc, #32]	@ (8003708 <_sbrk+0x64>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036ea:	4b07      	ldr	r3, [pc, #28]	@ (8003708 <_sbrk+0x64>)
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4413      	add	r3, r2
 80036f2:	4a05      	ldr	r2, [pc, #20]	@ (8003708 <_sbrk+0x64>)
 80036f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036f6:	68fb      	ldr	r3, [r7, #12]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	20020000 	.word	0x20020000
 8003704:	00000400 	.word	0x00000400
 8003708:	20000878 	.word	0x20000878
 800370c:	200009d0 	.word	0x200009d0

08003710 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003714:	4b06      	ldr	r3, [pc, #24]	@ (8003730 <SystemInit+0x20>)
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800371a:	4a05      	ldr	r2, [pc, #20]	@ (8003730 <SystemInit+0x20>)
 800371c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003720:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003724:	bf00      	nop
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	e000ed00 	.word	0xe000ed00

08003734 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003734:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800376c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003738:	f7ff ffea 	bl	8003710 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800373c:	480c      	ldr	r0, [pc, #48]	@ (8003770 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800373e:	490d      	ldr	r1, [pc, #52]	@ (8003774 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003740:	4a0d      	ldr	r2, [pc, #52]	@ (8003778 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003744:	e002      	b.n	800374c <LoopCopyDataInit>

08003746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800374a:	3304      	adds	r3, #4

0800374c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800374c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800374e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003750:	d3f9      	bcc.n	8003746 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003752:	4a0a      	ldr	r2, [pc, #40]	@ (800377c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003754:	4c0a      	ldr	r4, [pc, #40]	@ (8003780 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003758:	e001      	b.n	800375e <LoopFillZerobss>

0800375a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800375a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800375c:	3204      	adds	r2, #4

0800375e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800375e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003760:	d3fb      	bcc.n	800375a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003762:	f004 fcad 	bl	80080c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003766:	f7fe fbb3 	bl	8001ed0 <main>
  bx  lr    
 800376a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800376c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003774:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003778:	0800c888 	.word	0x0800c888
  ldr r2, =_sbss
 800377c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003780:	200009cc 	.word	0x200009cc

08003784 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003784:	e7fe      	b.n	8003784 <ADC_IRQHandler>
	...

08003788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800378c:	4b0e      	ldr	r3, [pc, #56]	@ (80037c8 <HAL_Init+0x40>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a0d      	ldr	r2, [pc, #52]	@ (80037c8 <HAL_Init+0x40>)
 8003792:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003796:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003798:	4b0b      	ldr	r3, [pc, #44]	@ (80037c8 <HAL_Init+0x40>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a0a      	ldr	r2, [pc, #40]	@ (80037c8 <HAL_Init+0x40>)
 800379e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037a4:	4b08      	ldr	r3, [pc, #32]	@ (80037c8 <HAL_Init+0x40>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a07      	ldr	r2, [pc, #28]	@ (80037c8 <HAL_Init+0x40>)
 80037aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037b0:	2003      	movs	r0, #3
 80037b2:	f000 fbc1 	bl	8003f38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037b6:	2000      	movs	r0, #0
 80037b8:	f000 f808 	bl	80037cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037bc:	f7ff fcb8 	bl	8003130 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40023c00 	.word	0x40023c00

080037cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037d4:	4b12      	ldr	r3, [pc, #72]	@ (8003820 <HAL_InitTick+0x54>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	4b12      	ldr	r3, [pc, #72]	@ (8003824 <HAL_InitTick+0x58>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	4619      	mov	r1, r3
 80037de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80037e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 fbd9 	bl	8003fa2 <HAL_SYSTICK_Config>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e00e      	b.n	8003818 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b0f      	cmp	r3, #15
 80037fe:	d80a      	bhi.n	8003816 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003800:	2200      	movs	r2, #0
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	f04f 30ff 	mov.w	r0, #4294967295
 8003808:	f000 fba1 	bl	8003f4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800380c:	4a06      	ldr	r2, [pc, #24]	@ (8003828 <HAL_InitTick+0x5c>)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003812:	2300      	movs	r3, #0
 8003814:	e000      	b.n	8003818 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
}
 8003818:	4618      	mov	r0, r3
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	2000000c 	.word	0x2000000c
 8003824:	20000014 	.word	0x20000014
 8003828:	20000010 	.word	0x20000010

0800382c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003830:	4b06      	ldr	r3, [pc, #24]	@ (800384c <HAL_IncTick+0x20>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	461a      	mov	r2, r3
 8003836:	4b06      	ldr	r3, [pc, #24]	@ (8003850 <HAL_IncTick+0x24>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4413      	add	r3, r2
 800383c:	4a04      	ldr	r2, [pc, #16]	@ (8003850 <HAL_IncTick+0x24>)
 800383e:	6013      	str	r3, [r2, #0]
}
 8003840:	bf00      	nop
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	20000014 	.word	0x20000014
 8003850:	2000087c 	.word	0x2000087c

08003854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  return uwTick;
 8003858:	4b03      	ldr	r3, [pc, #12]	@ (8003868 <HAL_GetTick+0x14>)
 800385a:	681b      	ldr	r3, [r3, #0]
}
 800385c:	4618      	mov	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	2000087c 	.word	0x2000087c

0800386c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003874:	f7ff ffee 	bl	8003854 <HAL_GetTick>
 8003878:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003884:	d005      	beq.n	8003892 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003886:	4b0a      	ldr	r3, [pc, #40]	@ (80038b0 <HAL_Delay+0x44>)
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4413      	add	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003892:	bf00      	nop
 8003894:	f7ff ffde 	bl	8003854 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d8f7      	bhi.n	8003894 <HAL_Delay+0x28>
  {
  }
}
 80038a4:	bf00      	nop
 80038a6:	bf00      	nop
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	20000014 	.word	0x20000014

080038b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e033      	b.n	8003932 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d109      	bne.n	80038e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7ff fc54 	bl	8003180 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ea:	f003 0310 	and.w	r3, r3, #16
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d118      	bne.n	8003924 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80038fa:	f023 0302 	bic.w	r3, r3, #2
 80038fe:	f043 0202 	orr.w	r2, r3, #2
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f94a 	bl	8003ba0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003916:	f023 0303 	bic.w	r3, r3, #3
 800391a:	f043 0201 	orr.w	r2, r3, #1
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	641a      	str	r2, [r3, #64]	@ 0x40
 8003922:	e001      	b.n	8003928 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003930:	7bfb      	ldrb	r3, [r7, #15]
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003946:	2300      	movs	r3, #0
 8003948:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003950:	2b01      	cmp	r3, #1
 8003952:	d101      	bne.n	8003958 <HAL_ADC_ConfigChannel+0x1c>
 8003954:	2302      	movs	r3, #2
 8003956:	e113      	b.n	8003b80 <HAL_ADC_ConfigChannel+0x244>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b09      	cmp	r3, #9
 8003966:	d925      	bls.n	80039b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68d9      	ldr	r1, [r3, #12]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	b29b      	uxth	r3, r3
 8003974:	461a      	mov	r2, r3
 8003976:	4613      	mov	r3, r2
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	4413      	add	r3, r2
 800397c:	3b1e      	subs	r3, #30
 800397e:	2207      	movs	r2, #7
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	43da      	mvns	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	400a      	ands	r2, r1
 800398c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68d9      	ldr	r1, [r3, #12]
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	b29b      	uxth	r3, r3
 800399e:	4618      	mov	r0, r3
 80039a0:	4603      	mov	r3, r0
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	4403      	add	r3, r0
 80039a6:	3b1e      	subs	r3, #30
 80039a8:	409a      	lsls	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	60da      	str	r2, [r3, #12]
 80039b2:	e022      	b.n	80039fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6919      	ldr	r1, [r3, #16]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	b29b      	uxth	r3, r3
 80039c0:	461a      	mov	r2, r3
 80039c2:	4613      	mov	r3, r2
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	4413      	add	r3, r2
 80039c8:	2207      	movs	r2, #7
 80039ca:	fa02 f303 	lsl.w	r3, r2, r3
 80039ce:	43da      	mvns	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	400a      	ands	r2, r1
 80039d6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6919      	ldr	r1, [r3, #16]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	689a      	ldr	r2, [r3, #8]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	4618      	mov	r0, r3
 80039ea:	4603      	mov	r3, r0
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	4403      	add	r3, r0
 80039f0:	409a      	lsls	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	2b06      	cmp	r3, #6
 8003a00:	d824      	bhi.n	8003a4c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	3b05      	subs	r3, #5
 8003a14:	221f      	movs	r2, #31
 8003a16:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1a:	43da      	mvns	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	400a      	ands	r2, r1
 8003a22:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	4618      	mov	r0, r3
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	4613      	mov	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4413      	add	r3, r2
 8003a3c:	3b05      	subs	r3, #5
 8003a3e:	fa00 f203 	lsl.w	r2, r0, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a4a:	e04c      	b.n	8003ae6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b0c      	cmp	r3, #12
 8003a52:	d824      	bhi.n	8003a9e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4413      	add	r3, r2
 8003a64:	3b23      	subs	r3, #35	@ 0x23
 8003a66:	221f      	movs	r2, #31
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	43da      	mvns	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	400a      	ands	r2, r1
 8003a74:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	4618      	mov	r0, r3
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	3b23      	subs	r3, #35	@ 0x23
 8003a90:	fa00 f203 	lsl.w	r2, r0, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a9c:	e023      	b.n	8003ae6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	3b41      	subs	r3, #65	@ 0x41
 8003ab0:	221f      	movs	r2, #31
 8003ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab6:	43da      	mvns	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	400a      	ands	r2, r1
 8003abe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	4618      	mov	r0, r3
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	3b41      	subs	r3, #65	@ 0x41
 8003ada:	fa00 f203 	lsl.w	r2, r0, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ae6:	4b29      	ldr	r3, [pc, #164]	@ (8003b8c <HAL_ADC_ConfigChannel+0x250>)
 8003ae8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a28      	ldr	r2, [pc, #160]	@ (8003b90 <HAL_ADC_ConfigChannel+0x254>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d10f      	bne.n	8003b14 <HAL_ADC_ConfigChannel+0x1d8>
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b12      	cmp	r3, #18
 8003afa:	d10b      	bne.n	8003b14 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a1d      	ldr	r2, [pc, #116]	@ (8003b90 <HAL_ADC_ConfigChannel+0x254>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d12b      	bne.n	8003b76 <HAL_ADC_ConfigChannel+0x23a>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a1c      	ldr	r2, [pc, #112]	@ (8003b94 <HAL_ADC_ConfigChannel+0x258>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d003      	beq.n	8003b30 <HAL_ADC_ConfigChannel+0x1f4>
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b11      	cmp	r3, #17
 8003b2e:	d122      	bne.n	8003b76 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a11      	ldr	r2, [pc, #68]	@ (8003b94 <HAL_ADC_ConfigChannel+0x258>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d111      	bne.n	8003b76 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b52:	4b11      	ldr	r3, [pc, #68]	@ (8003b98 <HAL_ADC_ConfigChannel+0x25c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a11      	ldr	r2, [pc, #68]	@ (8003b9c <HAL_ADC_ConfigChannel+0x260>)
 8003b58:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5c:	0c9a      	lsrs	r2, r3, #18
 8003b5e:	4613      	mov	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003b68:	e002      	b.n	8003b70 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1f9      	bne.n	8003b6a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3714      	adds	r7, #20
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	40012300 	.word	0x40012300
 8003b90:	40012000 	.word	0x40012000
 8003b94:	10000012 	.word	0x10000012
 8003b98:	2000000c 	.word	0x2000000c
 8003b9c:	431bde83 	.word	0x431bde83

08003ba0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ba8:	4b79      	ldr	r3, [pc, #484]	@ (8003d90 <ADC_Init+0x1f0>)
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6859      	ldr	r1, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	021a      	lsls	r2, r3, #8
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003bf8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6859      	ldr	r1, [r3, #4]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689a      	ldr	r2, [r3, #8]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6899      	ldr	r1, [r3, #8]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68da      	ldr	r2, [r3, #12]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c32:	4a58      	ldr	r2, [pc, #352]	@ (8003d94 <ADC_Init+0x1f4>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d022      	beq.n	8003c7e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689a      	ldr	r2, [r3, #8]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6899      	ldr	r1, [r3, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003c68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6899      	ldr	r1, [r3, #8]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	609a      	str	r2, [r3, #8]
 8003c7c:	e00f      	b.n	8003c9e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003c9c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0202 	bic.w	r2, r2, #2
 8003cac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6899      	ldr	r1, [r3, #8]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	7e1b      	ldrb	r3, [r3, #24]
 8003cb8:	005a      	lsls	r2, r3, #1
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d01b      	beq.n	8003d04 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cda:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003cea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6859      	ldr	r1, [r3, #4]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	035a      	lsls	r2, r3, #13
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	605a      	str	r2, [r3, #4]
 8003d02:	e007      	b.n	8003d14 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d12:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003d22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	051a      	lsls	r2, r3, #20
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003d48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6899      	ldr	r1, [r3, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003d56:	025a      	lsls	r2, r3, #9
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6899      	ldr	r1, [r3, #8]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	029a      	lsls	r2, r3, #10
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	609a      	str	r2, [r3, #8]
}
 8003d84:	bf00      	nop
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	40012300 	.word	0x40012300
 8003d94:	0f000001 	.word	0x0f000001

08003d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f003 0307 	and.w	r3, r3, #7
 8003da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003da8:	4b0c      	ldr	r3, [pc, #48]	@ (8003ddc <__NVIC_SetPriorityGrouping+0x44>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003db4:	4013      	ands	r3, r2
 8003db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003dc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dca:	4a04      	ldr	r2, [pc, #16]	@ (8003ddc <__NVIC_SetPriorityGrouping+0x44>)
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	60d3      	str	r3, [r2, #12]
}
 8003dd0:	bf00      	nop
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	e000ed00 	.word	0xe000ed00

08003de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003de4:	4b04      	ldr	r3, [pc, #16]	@ (8003df8 <__NVIC_GetPriorityGrouping+0x18>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	0a1b      	lsrs	r3, r3, #8
 8003dea:	f003 0307 	and.w	r3, r3, #7
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	e000ed00 	.word	0xe000ed00

08003dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	4603      	mov	r3, r0
 8003e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	db0b      	blt.n	8003e26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e0e:	79fb      	ldrb	r3, [r7, #7]
 8003e10:	f003 021f 	and.w	r2, r3, #31
 8003e14:	4907      	ldr	r1, [pc, #28]	@ (8003e34 <__NVIC_EnableIRQ+0x38>)
 8003e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e1a:	095b      	lsrs	r3, r3, #5
 8003e1c:	2001      	movs	r0, #1
 8003e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	e000e100 	.word	0xe000e100

08003e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	6039      	str	r1, [r7, #0]
 8003e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	db0a      	blt.n	8003e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	b2da      	uxtb	r2, r3
 8003e50:	490c      	ldr	r1, [pc, #48]	@ (8003e84 <__NVIC_SetPriority+0x4c>)
 8003e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e56:	0112      	lsls	r2, r2, #4
 8003e58:	b2d2      	uxtb	r2, r2
 8003e5a:	440b      	add	r3, r1
 8003e5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e60:	e00a      	b.n	8003e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	4908      	ldr	r1, [pc, #32]	@ (8003e88 <__NVIC_SetPriority+0x50>)
 8003e68:	79fb      	ldrb	r3, [r7, #7]
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	3b04      	subs	r3, #4
 8003e70:	0112      	lsls	r2, r2, #4
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	440b      	add	r3, r1
 8003e76:	761a      	strb	r2, [r3, #24]
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	e000e100 	.word	0xe000e100
 8003e88:	e000ed00 	.word	0xe000ed00

08003e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b089      	sub	sp, #36	@ 0x24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	f1c3 0307 	rsb	r3, r3, #7
 8003ea6:	2b04      	cmp	r3, #4
 8003ea8:	bf28      	it	cs
 8003eaa:	2304      	movcs	r3, #4
 8003eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	2b06      	cmp	r3, #6
 8003eb4:	d902      	bls.n	8003ebc <NVIC_EncodePriority+0x30>
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	3b03      	subs	r3, #3
 8003eba:	e000      	b.n	8003ebe <NVIC_EncodePriority+0x32>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	43da      	mvns	r2, r3
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	401a      	ands	r2, r3
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	fa01 f303 	lsl.w	r3, r1, r3
 8003ede:	43d9      	mvns	r1, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ee4:	4313      	orrs	r3, r2
         );
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3724      	adds	r7, #36	@ 0x24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
	...

08003ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f04:	d301      	bcc.n	8003f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f06:	2301      	movs	r3, #1
 8003f08:	e00f      	b.n	8003f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f34 <SysTick_Config+0x40>)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f12:	210f      	movs	r1, #15
 8003f14:	f04f 30ff 	mov.w	r0, #4294967295
 8003f18:	f7ff ff8e 	bl	8003e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f1c:	4b05      	ldr	r3, [pc, #20]	@ (8003f34 <SysTick_Config+0x40>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f22:	4b04      	ldr	r3, [pc, #16]	@ (8003f34 <SysTick_Config+0x40>)
 8003f24:	2207      	movs	r2, #7
 8003f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	e000e010 	.word	0xe000e010

08003f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f7ff ff29 	bl	8003d98 <__NVIC_SetPriorityGrouping>
}
 8003f46:	bf00      	nop
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b086      	sub	sp, #24
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	4603      	mov	r3, r0
 8003f56:	60b9      	str	r1, [r7, #8]
 8003f58:	607a      	str	r2, [r7, #4]
 8003f5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f60:	f7ff ff3e 	bl	8003de0 <__NVIC_GetPriorityGrouping>
 8003f64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	68b9      	ldr	r1, [r7, #8]
 8003f6a:	6978      	ldr	r0, [r7, #20]
 8003f6c:	f7ff ff8e 	bl	8003e8c <NVIC_EncodePriority>
 8003f70:	4602      	mov	r2, r0
 8003f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f76:	4611      	mov	r1, r2
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7ff ff5d 	bl	8003e38 <__NVIC_SetPriority>
}
 8003f7e:	bf00      	nop
 8003f80:	3718      	adds	r7, #24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b082      	sub	sp, #8
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7ff ff31 	bl	8003dfc <__NVIC_EnableIRQ>
}
 8003f9a:	bf00      	nop
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b082      	sub	sp, #8
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7ff ffa2 	bl	8003ef4 <SysTick_Config>
 8003fb0:	4603      	mov	r3, r0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
	...

08003fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b089      	sub	sp, #36	@ 0x24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61fb      	str	r3, [r7, #28]
 8003fd6:	e165      	b.n	80042a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fd8:	2201      	movs	r2, #1
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	f040 8154 	bne.w	800429e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f003 0303 	and.w	r3, r3, #3
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d005      	beq.n	800400e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800400a:	2b02      	cmp	r3, #2
 800400c:	d130      	bne.n	8004070 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	2203      	movs	r2, #3
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	43db      	mvns	r3, r3
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	4013      	ands	r3, r2
 8004024:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	fa02 f303 	lsl.w	r3, r2, r3
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	4313      	orrs	r3, r2
 8004036:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004044:	2201      	movs	r2, #1
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	43db      	mvns	r3, r3
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	4013      	ands	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	091b      	lsrs	r3, r3, #4
 800405a:	f003 0201 	and.w	r2, r3, #1
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	4313      	orrs	r3, r2
 8004068:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f003 0303 	and.w	r3, r3, #3
 8004078:	2b03      	cmp	r3, #3
 800407a:	d017      	beq.n	80040ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	2203      	movs	r2, #3
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	43db      	mvns	r3, r3
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	4013      	ands	r3, r2
 8004092:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f003 0303 	and.w	r3, r3, #3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d123      	bne.n	8004100 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	08da      	lsrs	r2, r3, #3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3208      	adds	r2, #8
 80040c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	220f      	movs	r2, #15
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	43db      	mvns	r3, r3
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	4013      	ands	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	691a      	ldr	r2, [r3, #16]
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	08da      	lsrs	r2, r3, #3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	3208      	adds	r2, #8
 80040fa:	69b9      	ldr	r1, [r7, #24]
 80040fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	2203      	movs	r2, #3
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	43db      	mvns	r3, r3
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4013      	ands	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f003 0203 	and.w	r2, r3, #3
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	4313      	orrs	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 80ae 	beq.w	800429e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004142:	2300      	movs	r3, #0
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	4b5d      	ldr	r3, [pc, #372]	@ (80042bc <HAL_GPIO_Init+0x300>)
 8004148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414a:	4a5c      	ldr	r2, [pc, #368]	@ (80042bc <HAL_GPIO_Init+0x300>)
 800414c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004150:	6453      	str	r3, [r2, #68]	@ 0x44
 8004152:	4b5a      	ldr	r3, [pc, #360]	@ (80042bc <HAL_GPIO_Init+0x300>)
 8004154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004156:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800415e:	4a58      	ldr	r2, [pc, #352]	@ (80042c0 <HAL_GPIO_Init+0x304>)
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	089b      	lsrs	r3, r3, #2
 8004164:	3302      	adds	r3, #2
 8004166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800416a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	f003 0303 	and.w	r3, r3, #3
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	220f      	movs	r2, #15
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	43db      	mvns	r3, r3
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	4013      	ands	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a4f      	ldr	r2, [pc, #316]	@ (80042c4 <HAL_GPIO_Init+0x308>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d025      	beq.n	80041d6 <HAL_GPIO_Init+0x21a>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a4e      	ldr	r2, [pc, #312]	@ (80042c8 <HAL_GPIO_Init+0x30c>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d01f      	beq.n	80041d2 <HAL_GPIO_Init+0x216>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a4d      	ldr	r2, [pc, #308]	@ (80042cc <HAL_GPIO_Init+0x310>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d019      	beq.n	80041ce <HAL_GPIO_Init+0x212>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a4c      	ldr	r2, [pc, #304]	@ (80042d0 <HAL_GPIO_Init+0x314>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d013      	beq.n	80041ca <HAL_GPIO_Init+0x20e>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a4b      	ldr	r2, [pc, #300]	@ (80042d4 <HAL_GPIO_Init+0x318>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d00d      	beq.n	80041c6 <HAL_GPIO_Init+0x20a>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a4a      	ldr	r2, [pc, #296]	@ (80042d8 <HAL_GPIO_Init+0x31c>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d007      	beq.n	80041c2 <HAL_GPIO_Init+0x206>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a49      	ldr	r2, [pc, #292]	@ (80042dc <HAL_GPIO_Init+0x320>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d101      	bne.n	80041be <HAL_GPIO_Init+0x202>
 80041ba:	2306      	movs	r3, #6
 80041bc:	e00c      	b.n	80041d8 <HAL_GPIO_Init+0x21c>
 80041be:	2307      	movs	r3, #7
 80041c0:	e00a      	b.n	80041d8 <HAL_GPIO_Init+0x21c>
 80041c2:	2305      	movs	r3, #5
 80041c4:	e008      	b.n	80041d8 <HAL_GPIO_Init+0x21c>
 80041c6:	2304      	movs	r3, #4
 80041c8:	e006      	b.n	80041d8 <HAL_GPIO_Init+0x21c>
 80041ca:	2303      	movs	r3, #3
 80041cc:	e004      	b.n	80041d8 <HAL_GPIO_Init+0x21c>
 80041ce:	2302      	movs	r3, #2
 80041d0:	e002      	b.n	80041d8 <HAL_GPIO_Init+0x21c>
 80041d2:	2301      	movs	r3, #1
 80041d4:	e000      	b.n	80041d8 <HAL_GPIO_Init+0x21c>
 80041d6:	2300      	movs	r3, #0
 80041d8:	69fa      	ldr	r2, [r7, #28]
 80041da:	f002 0203 	and.w	r2, r2, #3
 80041de:	0092      	lsls	r2, r2, #2
 80041e0:	4093      	lsls	r3, r2
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041e8:	4935      	ldr	r1, [pc, #212]	@ (80042c0 <HAL_GPIO_Init+0x304>)
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	089b      	lsrs	r3, r3, #2
 80041ee:	3302      	adds	r3, #2
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041f6:	4b3a      	ldr	r3, [pc, #232]	@ (80042e0 <HAL_GPIO_Init+0x324>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	43db      	mvns	r3, r3
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	4013      	ands	r3, r2
 8004204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	4313      	orrs	r3, r2
 8004218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800421a:	4a31      	ldr	r2, [pc, #196]	@ (80042e0 <HAL_GPIO_Init+0x324>)
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004220:	4b2f      	ldr	r3, [pc, #188]	@ (80042e0 <HAL_GPIO_Init+0x324>)
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	43db      	mvns	r3, r3
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	4013      	ands	r3, r2
 800422e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	4313      	orrs	r3, r2
 8004242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004244:	4a26      	ldr	r2, [pc, #152]	@ (80042e0 <HAL_GPIO_Init+0x324>)
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800424a:	4b25      	ldr	r3, [pc, #148]	@ (80042e0 <HAL_GPIO_Init+0x324>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	43db      	mvns	r3, r3
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	4013      	ands	r3, r2
 8004258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	4313      	orrs	r3, r2
 800426c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800426e:	4a1c      	ldr	r2, [pc, #112]	@ (80042e0 <HAL_GPIO_Init+0x324>)
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004274:	4b1a      	ldr	r3, [pc, #104]	@ (80042e0 <HAL_GPIO_Init+0x324>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	43db      	mvns	r3, r3
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	4013      	ands	r3, r2
 8004282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d003      	beq.n	8004298 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004298:	4a11      	ldr	r2, [pc, #68]	@ (80042e0 <HAL_GPIO_Init+0x324>)
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	3301      	adds	r3, #1
 80042a2:	61fb      	str	r3, [r7, #28]
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	2b0f      	cmp	r3, #15
 80042a8:	f67f ae96 	bls.w	8003fd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042ac:	bf00      	nop
 80042ae:	bf00      	nop
 80042b0:	3724      	adds	r7, #36	@ 0x24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	40023800 	.word	0x40023800
 80042c0:	40013800 	.word	0x40013800
 80042c4:	40020000 	.word	0x40020000
 80042c8:	40020400 	.word	0x40020400
 80042cc:	40020800 	.word	0x40020800
 80042d0:	40020c00 	.word	0x40020c00
 80042d4:	40021000 	.word	0x40021000
 80042d8:	40021400 	.word	0x40021400
 80042dc:	40021800 	.word	0x40021800
 80042e0:	40013c00 	.word	0x40013c00

080042e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	460b      	mov	r3, r1
 80042ee:	807b      	strh	r3, [r7, #2]
 80042f0:	4613      	mov	r3, r2
 80042f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042f4:	787b      	ldrb	r3, [r7, #1]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042fa:	887a      	ldrh	r2, [r7, #2]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004300:	e003      	b.n	800430a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004302:	887b      	ldrh	r3, [r7, #2]
 8004304:	041a      	lsls	r2, r3, #16
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	619a      	str	r2, [r3, #24]
}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
	...

08004318 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	4603      	mov	r3, r0
 8004320:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004322:	4b08      	ldr	r3, [pc, #32]	@ (8004344 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004324:	695a      	ldr	r2, [r3, #20]
 8004326:	88fb      	ldrh	r3, [r7, #6]
 8004328:	4013      	ands	r3, r2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d006      	beq.n	800433c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800432e:	4a05      	ldr	r2, [pc, #20]	@ (8004344 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004330:	88fb      	ldrh	r3, [r7, #6]
 8004332:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004334:	88fb      	ldrh	r3, [r7, #6]
 8004336:	4618      	mov	r0, r3
 8004338:	f7fe fb5c 	bl	80029f4 <HAL_GPIO_EXTI_Callback>
  }
}
 800433c:	bf00      	nop
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40013c00 	.word	0x40013c00

08004348 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af02      	add	r7, sp, #8
 800434e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e108      	b.n	800456c <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	d106      	bne.n	800437a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7ff f853 	bl	8003420 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2203      	movs	r2, #3
 800437e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004388:	d102      	bne.n	8004390 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4618      	mov	r0, r3
 8004396:	f002 fe15 	bl	8006fc4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6818      	ldr	r0, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	7c1a      	ldrb	r2, [r3, #16]
 80043a2:	f88d 2000 	strb.w	r2, [sp]
 80043a6:	3304      	adds	r3, #4
 80043a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043aa:	f002 fda7 	bl	8006efc <USB_CoreInit>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d005      	beq.n	80043c0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e0d5      	b.n	800456c <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2100      	movs	r1, #0
 80043c6:	4618      	mov	r0, r3
 80043c8:	f002 fe0d 	bl	8006fe6 <USB_SetCurrentMode>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d005      	beq.n	80043de <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2202      	movs	r2, #2
 80043d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e0c6      	b.n	800456c <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043de:	2300      	movs	r3, #0
 80043e0:	73fb      	strb	r3, [r7, #15]
 80043e2:	e04a      	b.n	800447a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80043e4:	7bfa      	ldrb	r2, [r7, #15]
 80043e6:	6879      	ldr	r1, [r7, #4]
 80043e8:	4613      	mov	r3, r2
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	4413      	add	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	440b      	add	r3, r1
 80043f2:	3315      	adds	r3, #21
 80043f4:	2201      	movs	r2, #1
 80043f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80043f8:	7bfa      	ldrb	r2, [r7, #15]
 80043fa:	6879      	ldr	r1, [r7, #4]
 80043fc:	4613      	mov	r3, r2
 80043fe:	00db      	lsls	r3, r3, #3
 8004400:	4413      	add	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	440b      	add	r3, r1
 8004406:	3314      	adds	r3, #20
 8004408:	7bfa      	ldrb	r2, [r7, #15]
 800440a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800440c:	7bfa      	ldrb	r2, [r7, #15]
 800440e:	7bfb      	ldrb	r3, [r7, #15]
 8004410:	b298      	uxth	r0, r3
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	4613      	mov	r3, r2
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	4413      	add	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	332e      	adds	r3, #46	@ 0x2e
 8004420:	4602      	mov	r2, r0
 8004422:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004424:	7bfa      	ldrb	r2, [r7, #15]
 8004426:	6879      	ldr	r1, [r7, #4]
 8004428:	4613      	mov	r3, r2
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	4413      	add	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	3318      	adds	r3, #24
 8004434:	2200      	movs	r2, #0
 8004436:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004438:	7bfa      	ldrb	r2, [r7, #15]
 800443a:	6879      	ldr	r1, [r7, #4]
 800443c:	4613      	mov	r3, r2
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	4413      	add	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	440b      	add	r3, r1
 8004446:	331c      	adds	r3, #28
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800444c:	7bfa      	ldrb	r2, [r7, #15]
 800444e:	6879      	ldr	r1, [r7, #4]
 8004450:	4613      	mov	r3, r2
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	4413      	add	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	440b      	add	r3, r1
 800445a:	3320      	adds	r3, #32
 800445c:	2200      	movs	r2, #0
 800445e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004460:	7bfa      	ldrb	r2, [r7, #15]
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	4613      	mov	r3, r2
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	4413      	add	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	440b      	add	r3, r1
 800446e:	3324      	adds	r3, #36	@ 0x24
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004474:	7bfb      	ldrb	r3, [r7, #15]
 8004476:	3301      	adds	r3, #1
 8004478:	73fb      	strb	r3, [r7, #15]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	791b      	ldrb	r3, [r3, #4]
 800447e:	7bfa      	ldrb	r2, [r7, #15]
 8004480:	429a      	cmp	r2, r3
 8004482:	d3af      	bcc.n	80043e4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004484:	2300      	movs	r3, #0
 8004486:	73fb      	strb	r3, [r7, #15]
 8004488:	e044      	b.n	8004514 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800448a:	7bfa      	ldrb	r2, [r7, #15]
 800448c:	6879      	ldr	r1, [r7, #4]
 800448e:	4613      	mov	r3, r2
 8004490:	00db      	lsls	r3, r3, #3
 8004492:	4413      	add	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	440b      	add	r3, r1
 8004498:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800449c:	2200      	movs	r2, #0
 800449e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80044a0:	7bfa      	ldrb	r2, [r7, #15]
 80044a2:	6879      	ldr	r1, [r7, #4]
 80044a4:	4613      	mov	r3, r2
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	4413      	add	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	440b      	add	r3, r1
 80044ae:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80044b2:	7bfa      	ldrb	r2, [r7, #15]
 80044b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80044b6:	7bfa      	ldrb	r2, [r7, #15]
 80044b8:	6879      	ldr	r1, [r7, #4]
 80044ba:	4613      	mov	r3, r2
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	4413      	add	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	440b      	add	r3, r1
 80044c4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80044c8:	2200      	movs	r2, #0
 80044ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80044cc:	7bfa      	ldrb	r2, [r7, #15]
 80044ce:	6879      	ldr	r1, [r7, #4]
 80044d0:	4613      	mov	r3, r2
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	4413      	add	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	440b      	add	r3, r1
 80044da:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80044de:	2200      	movs	r2, #0
 80044e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80044e2:	7bfa      	ldrb	r2, [r7, #15]
 80044e4:	6879      	ldr	r1, [r7, #4]
 80044e6:	4613      	mov	r3, r2
 80044e8:	00db      	lsls	r3, r3, #3
 80044ea:	4413      	add	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	440b      	add	r3, r1
 80044f0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80044f4:	2200      	movs	r2, #0
 80044f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80044f8:	7bfa      	ldrb	r2, [r7, #15]
 80044fa:	6879      	ldr	r1, [r7, #4]
 80044fc:	4613      	mov	r3, r2
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	4413      	add	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	440b      	add	r3, r1
 8004506:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800450a:	2200      	movs	r2, #0
 800450c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800450e:	7bfb      	ldrb	r3, [r7, #15]
 8004510:	3301      	adds	r3, #1
 8004512:	73fb      	strb	r3, [r7, #15]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	791b      	ldrb	r3, [r3, #4]
 8004518:	7bfa      	ldrb	r2, [r7, #15]
 800451a:	429a      	cmp	r2, r3
 800451c:	d3b5      	bcc.n	800448a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6818      	ldr	r0, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	7c1a      	ldrb	r2, [r3, #16]
 8004526:	f88d 2000 	strb.w	r2, [sp]
 800452a:	3304      	adds	r3, #4
 800452c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800452e:	f002 fda7 	bl	8007080 <USB_DevInit>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d005      	beq.n	8004544 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2202      	movs	r2, #2
 800453c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e013      	b.n	800456c <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	7b1b      	ldrb	r3, [r3, #12]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d102      	bne.n	8004560 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f80a 	bl	8004574 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4618      	mov	r0, r3
 8004566:	f002 ff62 	bl	800742e <USB_DevDisconnect>

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045a6:	f043 0303 	orr.w	r3, r3, #3
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3714      	adds	r7, #20
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e0cc      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045d0:	4b68      	ldr	r3, [pc, #416]	@ (8004774 <HAL_RCC_ClockConfig+0x1b8>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 030f 	and.w	r3, r3, #15
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d90c      	bls.n	80045f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045de:	4b65      	ldr	r3, [pc, #404]	@ (8004774 <HAL_RCC_ClockConfig+0x1b8>)
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045e6:	4b63      	ldr	r3, [pc, #396]	@ (8004774 <HAL_RCC_ClockConfig+0x1b8>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 030f 	and.w	r3, r3, #15
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d001      	beq.n	80045f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e0b8      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d020      	beq.n	8004646 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b00      	cmp	r3, #0
 800460e:	d005      	beq.n	800461c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004610:	4b59      	ldr	r3, [pc, #356]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	4a58      	ldr	r2, [pc, #352]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 8004616:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800461a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0308 	and.w	r3, r3, #8
 8004624:	2b00      	cmp	r3, #0
 8004626:	d005      	beq.n	8004634 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004628:	4b53      	ldr	r3, [pc, #332]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	4a52      	ldr	r2, [pc, #328]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800462e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004632:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004634:	4b50      	ldr	r3, [pc, #320]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	494d      	ldr	r1, [pc, #308]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 8004642:	4313      	orrs	r3, r2
 8004644:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d044      	beq.n	80046dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d107      	bne.n	800466a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800465a:	4b47      	ldr	r3, [pc, #284]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d119      	bne.n	800469a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e07f      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	2b02      	cmp	r3, #2
 8004670:	d003      	beq.n	800467a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004676:	2b03      	cmp	r3, #3
 8004678:	d107      	bne.n	800468a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800467a:	4b3f      	ldr	r3, [pc, #252]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d109      	bne.n	800469a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e06f      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800468a:	4b3b      	ldr	r3, [pc, #236]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e067      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800469a:	4b37      	ldr	r3, [pc, #220]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f023 0203 	bic.w	r2, r3, #3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	4934      	ldr	r1, [pc, #208]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046ac:	f7ff f8d2 	bl	8003854 <HAL_GetTick>
 80046b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b2:	e00a      	b.n	80046ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b4:	f7ff f8ce 	bl	8003854 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e04f      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ca:	4b2b      	ldr	r3, [pc, #172]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 020c 	and.w	r2, r3, #12
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	429a      	cmp	r2, r3
 80046da:	d1eb      	bne.n	80046b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046dc:	4b25      	ldr	r3, [pc, #148]	@ (8004774 <HAL_RCC_ClockConfig+0x1b8>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 030f 	and.w	r3, r3, #15
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d20c      	bcs.n	8004704 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ea:	4b22      	ldr	r3, [pc, #136]	@ (8004774 <HAL_RCC_ClockConfig+0x1b8>)
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f2:	4b20      	ldr	r3, [pc, #128]	@ (8004774 <HAL_RCC_ClockConfig+0x1b8>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d001      	beq.n	8004704 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e032      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	d008      	beq.n	8004722 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004710:	4b19      	ldr	r3, [pc, #100]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	4916      	ldr	r1, [pc, #88]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800471e:	4313      	orrs	r3, r2
 8004720:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	2b00      	cmp	r3, #0
 800472c:	d009      	beq.n	8004742 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800472e:	4b12      	ldr	r3, [pc, #72]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	490e      	ldr	r1, [pc, #56]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800473e:	4313      	orrs	r3, r2
 8004740:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004742:	f000 fb7f 	bl	8004e44 <HAL_RCC_GetSysClockFreq>
 8004746:	4602      	mov	r2, r0
 8004748:	4b0b      	ldr	r3, [pc, #44]	@ (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	091b      	lsrs	r3, r3, #4
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	490a      	ldr	r1, [pc, #40]	@ (800477c <HAL_RCC_ClockConfig+0x1c0>)
 8004754:	5ccb      	ldrb	r3, [r1, r3]
 8004756:	fa22 f303 	lsr.w	r3, r2, r3
 800475a:	4a09      	ldr	r2, [pc, #36]	@ (8004780 <HAL_RCC_ClockConfig+0x1c4>)
 800475c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800475e:	4b09      	ldr	r3, [pc, #36]	@ (8004784 <HAL_RCC_ClockConfig+0x1c8>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4618      	mov	r0, r3
 8004764:	f7ff f832 	bl	80037cc <HAL_InitTick>

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	40023c00 	.word	0x40023c00
 8004778:	40023800 	.word	0x40023800
 800477c:	0800c2e8 	.word	0x0800c2e8
 8004780:	2000000c 	.word	0x2000000c
 8004784:	20000010 	.word	0x20000010

08004788 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800478c:	4b03      	ldr	r3, [pc, #12]	@ (800479c <HAL_RCC_GetHCLKFreq+0x14>)
 800478e:	681b      	ldr	r3, [r3, #0]
}
 8004790:	4618      	mov	r0, r3
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	2000000c 	.word	0x2000000c

080047a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047a4:	f7ff fff0 	bl	8004788 <HAL_RCC_GetHCLKFreq>
 80047a8:	4602      	mov	r2, r0
 80047aa:	4b05      	ldr	r3, [pc, #20]	@ (80047c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	0a9b      	lsrs	r3, r3, #10
 80047b0:	f003 0307 	and.w	r3, r3, #7
 80047b4:	4903      	ldr	r1, [pc, #12]	@ (80047c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047b6:	5ccb      	ldrb	r3, [r1, r3]
 80047b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047bc:	4618      	mov	r0, r3
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	40023800 	.word	0x40023800
 80047c4:	0800c2f8 	.word	0x0800c2f8

080047c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80047cc:	f7ff ffdc 	bl	8004788 <HAL_RCC_GetHCLKFreq>
 80047d0:	4602      	mov	r2, r0
 80047d2:	4b05      	ldr	r3, [pc, #20]	@ (80047e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	0b5b      	lsrs	r3, r3, #13
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	4903      	ldr	r1, [pc, #12]	@ (80047ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80047de:	5ccb      	ldrb	r3, [r1, r3]
 80047e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	40023800 	.word	0x40023800
 80047ec:	0800c2f8 	.word	0x0800c2f8

080047f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b08c      	sub	sp, #48	@ 0x30
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80047fc:	2300      	movs	r3, #0
 80047fe:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004800:	2300      	movs	r3, #0
 8004802:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800480c:	2300      	movs	r3, #0
 800480e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004810:	2300      	movs	r3, #0
 8004812:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004814:	2300      	movs	r3, #0
 8004816:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8004818:	2300      	movs	r3, #0
 800481a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	2b00      	cmp	r3, #0
 8004826:	d010      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004828:	4b6f      	ldr	r3, [pc, #444]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800482a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800482e:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004836:	496c      	ldr	r1, [pc, #432]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004846:	2301      	movs	r3, #1
 8004848:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d010      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004856:	4b64      	ldr	r3, [pc, #400]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004858:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800485c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004864:	4960      	ldr	r1, [pc, #384]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004866:	4313      	orrs	r3, r2
 8004868:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004874:	2301      	movs	r3, #1
 8004876:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0304 	and.w	r3, r3, #4
 8004880:	2b00      	cmp	r3, #0
 8004882:	d017      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004884:	4b58      	ldr	r3, [pc, #352]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004886:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800488a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004892:	4955      	ldr	r1, [pc, #340]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004894:	4313      	orrs	r3, r2
 8004896:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800489e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048a2:	d101      	bne.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80048a4:	2301      	movs	r3, #1
 80048a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80048b0:	2301      	movs	r3, #1
 80048b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0308 	and.w	r3, r3, #8
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d017      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80048c0:	4b49      	ldr	r3, [pc, #292]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80048c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048c6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ce:	4946      	ldr	r1, [pc, #280]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048de:	d101      	bne.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80048e0:	2301      	movs	r3, #1
 80048e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80048ec:	2301      	movs	r3, #1
 80048ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0320 	and.w	r3, r3, #32
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 808a 	beq.w	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80048fe:	2300      	movs	r3, #0
 8004900:	60bb      	str	r3, [r7, #8]
 8004902:	4b39      	ldr	r3, [pc, #228]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004906:	4a38      	ldr	r2, [pc, #224]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800490c:	6413      	str	r3, [r2, #64]	@ 0x40
 800490e:	4b36      	ldr	r3, [pc, #216]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004916:	60bb      	str	r3, [r7, #8]
 8004918:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800491a:	4b34      	ldr	r3, [pc, #208]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a33      	ldr	r2, [pc, #204]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004920:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004924:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004926:	f7fe ff95 	bl	8003854 <HAL_GetTick>
 800492a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800492c:	e008      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800492e:	f7fe ff91 	bl	8003854 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d901      	bls.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e278      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004940:	4b2a      	ldr	r3, [pc, #168]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0f0      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800494c:	4b26      	ldr	r3, [pc, #152]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800494e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004950:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004954:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004956:	6a3b      	ldr	r3, [r7, #32]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d02f      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004960:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004964:	6a3a      	ldr	r2, [r7, #32]
 8004966:	429a      	cmp	r2, r3
 8004968:	d028      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800496a:	4b1f      	ldr	r3, [pc, #124]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800496c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800496e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004972:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004974:	4b1e      	ldr	r3, [pc, #120]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004976:	2201      	movs	r2, #1
 8004978:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800497a:	4b1d      	ldr	r3, [pc, #116]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800497c:	2200      	movs	r2, #0
 800497e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004980:	4a19      	ldr	r2, [pc, #100]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004986:	4b18      	ldr	r3, [pc, #96]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b01      	cmp	r3, #1
 8004990:	d114      	bne.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004992:	f7fe ff5f 	bl	8003854 <HAL_GetTick>
 8004996:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004998:	e00a      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800499a:	f7fe ff5b 	bl	8003854 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d901      	bls.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e240      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049b0:	4b0d      	ldr	r3, [pc, #52]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80049b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d0ee      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049c8:	d114      	bne.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80049ca:	4b07      	ldr	r3, [pc, #28]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80049da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049de:	4902      	ldr	r1, [pc, #8]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	608b      	str	r3, [r1, #8]
 80049e4:	e00c      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80049e6:	bf00      	nop
 80049e8:	40023800 	.word	0x40023800
 80049ec:	40007000 	.word	0x40007000
 80049f0:	42470e40 	.word	0x42470e40
 80049f4:	4b4a      	ldr	r3, [pc, #296]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	4a49      	ldr	r2, [pc, #292]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80049fa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80049fe:	6093      	str	r3, [r2, #8]
 8004a00:	4b47      	ldr	r3, [pc, #284]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004a02:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a0c:	4944      	ldr	r1, [pc, #272]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0310 	and.w	r3, r3, #16
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d004      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8004a24:	4b3f      	ldr	r3, [pc, #252]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004a26:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00a      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004a34:	4b3a      	ldr	r3, [pc, #232]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a3a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a42:	4937      	ldr	r1, [pc, #220]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00a      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a56:	4b32      	ldr	r3, [pc, #200]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a5c:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a64:	492e      	ldr	r1, [pc, #184]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d011      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004a78:	4b29      	ldr	r3, [pc, #164]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a7e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a86:	4926      	ldr	r1, [pc, #152]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a96:	d101      	bne.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00a      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004aae:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab6:	491a      	ldr	r1, [pc, #104]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d011      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8004aca:	4b15      	ldr	r3, [pc, #84]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ad0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ad8:	4911      	ldr	r1, [pc, #68]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ae4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ae8:	d101      	bne.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8004aea:	2301      	movs	r3, #1
 8004aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d005      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004afc:	f040 80ff 	bne.w	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b00:	4b09      	ldr	r3, [pc, #36]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b06:	f7fe fea5 	bl	8003854 <HAL_GetTick>
 8004b0a:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b0c:	e00e      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b0e:	f7fe fea1 	bl	8003854 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d907      	bls.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e188      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004b20:	40023800 	.word	0x40023800
 8004b24:	424711e0 	.word	0x424711e0
 8004b28:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b2c:	4b7e      	ldr	r3, [pc, #504]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1ea      	bne.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d003      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d009      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d028      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d124      	bne.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004b60:	4b71      	ldr	r3, [pc, #452]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004b62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b66:	0c1b      	lsrs	r3, r3, #16
 8004b68:	f003 0303 	and.w	r3, r3, #3
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b72:	4b6d      	ldr	r3, [pc, #436]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b78:	0e1b      	lsrs	r3, r3, #24
 8004b7a:	f003 030f 	and.w	r3, r3, #15
 8004b7e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	019b      	lsls	r3, r3, #6
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	085b      	lsrs	r3, r3, #1
 8004b90:	3b01      	subs	r3, #1
 8004b92:	041b      	lsls	r3, r3, #16
 8004b94:	431a      	orrs	r2, r3
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	061b      	lsls	r3, r3, #24
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	071b      	lsls	r3, r3, #28
 8004ba2:	4961      	ldr	r1, [pc, #388]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0304 	and.w	r3, r3, #4
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d004      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bbe:	d00a      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d035      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bd4:	d130      	bne.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004bd6:	4b54      	ldr	r3, [pc, #336]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bdc:	0c1b      	lsrs	r3, r3, #16
 8004bde:	f003 0303 	and.w	r3, r3, #3
 8004be2:	3301      	adds	r3, #1
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004be8:	4b4f      	ldr	r3, [pc, #316]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004bea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bee:	0f1b      	lsrs	r3, r3, #28
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	019b      	lsls	r3, r3, #6
 8004c00:	431a      	orrs	r2, r3
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	085b      	lsrs	r3, r3, #1
 8004c06:	3b01      	subs	r3, #1
 8004c08:	041b      	lsls	r3, r3, #16
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	061b      	lsls	r3, r3, #24
 8004c12:	431a      	orrs	r2, r3
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	071b      	lsls	r3, r3, #28
 8004c18:	4943      	ldr	r1, [pc, #268]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004c20:	4b41      	ldr	r3, [pc, #260]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004c22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c26:	f023 021f 	bic.w	r2, r3, #31
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	493d      	ldr	r1, [pc, #244]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d029      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c4c:	d124      	bne.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004c4e:	4b36      	ldr	r3, [pc, #216]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c54:	0c1b      	lsrs	r3, r3, #16
 8004c56:	f003 0303 	and.w	r3, r3, #3
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c60:	4b31      	ldr	r3, [pc, #196]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c66:	0f1b      	lsrs	r3, r3, #28
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	019b      	lsls	r3, r3, #6
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	085b      	lsrs	r3, r3, #1
 8004c80:	3b01      	subs	r3, #1
 8004c82:	041b      	lsls	r3, r3, #16
 8004c84:	431a      	orrs	r2, r3
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	061b      	lsls	r3, r3, #24
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	071b      	lsls	r3, r3, #28
 8004c90:	4925      	ldr	r1, [pc, #148]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d016      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	019b      	lsls	r3, r3, #6
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	085b      	lsrs	r3, r3, #1
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	041b      	lsls	r3, r3, #16
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	061b      	lsls	r3, r3, #24
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	071b      	lsls	r3, r3, #28
 8004cca:	4917      	ldr	r1, [pc, #92]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cd2:	4b16      	ldr	r3, [pc, #88]	@ (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cd8:	f7fe fdbc 	bl	8003854 <HAL_GetTick>
 8004cdc:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ce0:	f7fe fdb8 	bl	8003854 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e09f      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d0f0      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8004cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	f040 8095 	bne.w	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d06:	4b0a      	ldr	r3, [pc, #40]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d0c:	f7fe fda2 	bl	8003854 <HAL_GetTick>
 8004d10:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d12:	e00f      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d14:	f7fe fd9e 	bl	8003854 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d908      	bls.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e085      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004d26:	bf00      	nop
 8004d28:	40023800 	.word	0x40023800
 8004d2c:	42470068 	.word	0x42470068
 8004d30:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d34:	4b41      	ldr	r3, [pc, #260]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d40:	d0e8      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0304 	and.w	r3, r3, #4
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d009      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d02b      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d127      	bne.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004d6a:	4b34      	ldr	r3, [pc, #208]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d70:	0c1b      	lsrs	r3, r3, #16
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	3301      	adds	r3, #1
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	699a      	ldr	r2, [r3, #24]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	69db      	ldr	r3, [r3, #28]
 8004d84:	019b      	lsls	r3, r3, #6
 8004d86:	431a      	orrs	r2, r3
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	085b      	lsrs	r3, r3, #1
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	041b      	lsls	r3, r3, #16
 8004d90:	431a      	orrs	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d96:	061b      	lsls	r3, r3, #24
 8004d98:	4928      	ldr	r1, [pc, #160]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004da0:	4b26      	ldr	r3, [pc, #152]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004da2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004da6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dae:	3b01      	subs	r3, #1
 8004db0:	021b      	lsls	r3, r3, #8
 8004db2:	4922      	ldr	r1, [pc, #136]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d01d      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004dce:	d118      	bne.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dd6:	0e1b      	lsrs	r3, r3, #24
 8004dd8:	f003 030f 	and.w	r3, r3, #15
 8004ddc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	699a      	ldr	r2, [r3, #24]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	019b      	lsls	r3, r3, #6
 8004de8:	431a      	orrs	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	085b      	lsrs	r3, r3, #1
 8004df0:	3b01      	subs	r3, #1
 8004df2:	041b      	lsls	r3, r3, #16
 8004df4:	431a      	orrs	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	061b      	lsls	r3, r3, #24
 8004dfa:	4910      	ldr	r1, [pc, #64]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004e02:	4b0f      	ldr	r3, [pc, #60]	@ (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004e04:	2201      	movs	r2, #1
 8004e06:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e08:	f7fe fd24 	bl	8003854 <HAL_GetTick>
 8004e0c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e0e:	e008      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e10:	f7fe fd20 	bl	8003854 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e007      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e22:	4b06      	ldr	r3, [pc, #24]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e2e:	d1ef      	bne.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3730      	adds	r7, #48	@ 0x30
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	40023800 	.word	0x40023800
 8004e40:	42470070 	.word	0x42470070

08004e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e48:	b0ae      	sub	sp, #184	@ 0xb8
 8004e4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e6a:	4bcb      	ldr	r3, [pc, #812]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 030c 	and.w	r3, r3, #12
 8004e72:	2b0c      	cmp	r3, #12
 8004e74:	f200 8206 	bhi.w	8005284 <HAL_RCC_GetSysClockFreq+0x440>
 8004e78:	a201      	add	r2, pc, #4	@ (adr r2, 8004e80 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7e:	bf00      	nop
 8004e80:	08004eb5 	.word	0x08004eb5
 8004e84:	08005285 	.word	0x08005285
 8004e88:	08005285 	.word	0x08005285
 8004e8c:	08005285 	.word	0x08005285
 8004e90:	08004ebd 	.word	0x08004ebd
 8004e94:	08005285 	.word	0x08005285
 8004e98:	08005285 	.word	0x08005285
 8004e9c:	08005285 	.word	0x08005285
 8004ea0:	08004ec5 	.word	0x08004ec5
 8004ea4:	08005285 	.word	0x08005285
 8004ea8:	08005285 	.word	0x08005285
 8004eac:	08005285 	.word	0x08005285
 8004eb0:	080050b5 	.word	0x080050b5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004eb4:	4bb9      	ldr	r3, [pc, #740]	@ (800519c <HAL_RCC_GetSysClockFreq+0x358>)
 8004eb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004eba:	e1e7      	b.n	800528c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ebc:	4bb8      	ldr	r3, [pc, #736]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004ebe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004ec2:	e1e3      	b.n	800528c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ec4:	4bb4      	ldr	r3, [pc, #720]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ecc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ed0:	4bb1      	ldr	r3, [pc, #708]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d071      	beq.n	8004fc0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004edc:	4bae      	ldr	r3, [pc, #696]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	099b      	lsrs	r3, r3, #6
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ee8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004eec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ef4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ef8:	2300      	movs	r3, #0
 8004efa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004efe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004f02:	4622      	mov	r2, r4
 8004f04:	462b      	mov	r3, r5
 8004f06:	f04f 0000 	mov.w	r0, #0
 8004f0a:	f04f 0100 	mov.w	r1, #0
 8004f0e:	0159      	lsls	r1, r3, #5
 8004f10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f14:	0150      	lsls	r0, r2, #5
 8004f16:	4602      	mov	r2, r0
 8004f18:	460b      	mov	r3, r1
 8004f1a:	4621      	mov	r1, r4
 8004f1c:	1a51      	subs	r1, r2, r1
 8004f1e:	6439      	str	r1, [r7, #64]	@ 0x40
 8004f20:	4629      	mov	r1, r5
 8004f22:	eb63 0301 	sbc.w	r3, r3, r1
 8004f26:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f28:	f04f 0200 	mov.w	r2, #0
 8004f2c:	f04f 0300 	mov.w	r3, #0
 8004f30:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004f34:	4649      	mov	r1, r9
 8004f36:	018b      	lsls	r3, r1, #6
 8004f38:	4641      	mov	r1, r8
 8004f3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f3e:	4641      	mov	r1, r8
 8004f40:	018a      	lsls	r2, r1, #6
 8004f42:	4641      	mov	r1, r8
 8004f44:	1a51      	subs	r1, r2, r1
 8004f46:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004f48:	4649      	mov	r1, r9
 8004f4a:	eb63 0301 	sbc.w	r3, r3, r1
 8004f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f50:	f04f 0200 	mov.w	r2, #0
 8004f54:	f04f 0300 	mov.w	r3, #0
 8004f58:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004f5c:	4649      	mov	r1, r9
 8004f5e:	00cb      	lsls	r3, r1, #3
 8004f60:	4641      	mov	r1, r8
 8004f62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f66:	4641      	mov	r1, r8
 8004f68:	00ca      	lsls	r2, r1, #3
 8004f6a:	4610      	mov	r0, r2
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	4603      	mov	r3, r0
 8004f70:	4622      	mov	r2, r4
 8004f72:	189b      	adds	r3, r3, r2
 8004f74:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f76:	462b      	mov	r3, r5
 8004f78:	460a      	mov	r2, r1
 8004f7a:	eb42 0303 	adc.w	r3, r2, r3
 8004f7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f80:	f04f 0200 	mov.w	r2, #0
 8004f84:	f04f 0300 	mov.w	r3, #0
 8004f88:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004f8c:	4629      	mov	r1, r5
 8004f8e:	024b      	lsls	r3, r1, #9
 8004f90:	4621      	mov	r1, r4
 8004f92:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f96:	4621      	mov	r1, r4
 8004f98:	024a      	lsls	r2, r1, #9
 8004f9a:	4610      	mov	r0, r2
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004fa8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004fac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004fb0:	f7fb fe6a 	bl	8000c88 <__aeabi_uldivmod>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4613      	mov	r3, r2
 8004fba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004fbe:	e067      	b.n	8005090 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fc0:	4b75      	ldr	r3, [pc, #468]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x354>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	099b      	lsrs	r3, r3, #6
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004fcc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004fd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fd8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004fda:	2300      	movs	r3, #0
 8004fdc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004fde:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004fe2:	4622      	mov	r2, r4
 8004fe4:	462b      	mov	r3, r5
 8004fe6:	f04f 0000 	mov.w	r0, #0
 8004fea:	f04f 0100 	mov.w	r1, #0
 8004fee:	0159      	lsls	r1, r3, #5
 8004ff0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ff4:	0150      	lsls	r0, r2, #5
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	4621      	mov	r1, r4
 8004ffc:	1a51      	subs	r1, r2, r1
 8004ffe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005000:	4629      	mov	r1, r5
 8005002:	eb63 0301 	sbc.w	r3, r3, r1
 8005006:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005008:	f04f 0200 	mov.w	r2, #0
 800500c:	f04f 0300 	mov.w	r3, #0
 8005010:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005014:	4649      	mov	r1, r9
 8005016:	018b      	lsls	r3, r1, #6
 8005018:	4641      	mov	r1, r8
 800501a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800501e:	4641      	mov	r1, r8
 8005020:	018a      	lsls	r2, r1, #6
 8005022:	4641      	mov	r1, r8
 8005024:	ebb2 0a01 	subs.w	sl, r2, r1
 8005028:	4649      	mov	r1, r9
 800502a:	eb63 0b01 	sbc.w	fp, r3, r1
 800502e:	f04f 0200 	mov.w	r2, #0
 8005032:	f04f 0300 	mov.w	r3, #0
 8005036:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800503a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800503e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005042:	4692      	mov	sl, r2
 8005044:	469b      	mov	fp, r3
 8005046:	4623      	mov	r3, r4
 8005048:	eb1a 0303 	adds.w	r3, sl, r3
 800504c:	623b      	str	r3, [r7, #32]
 800504e:	462b      	mov	r3, r5
 8005050:	eb4b 0303 	adc.w	r3, fp, r3
 8005054:	627b      	str	r3, [r7, #36]	@ 0x24
 8005056:	f04f 0200 	mov.w	r2, #0
 800505a:	f04f 0300 	mov.w	r3, #0
 800505e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005062:	4629      	mov	r1, r5
 8005064:	028b      	lsls	r3, r1, #10
 8005066:	4621      	mov	r1, r4
 8005068:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800506c:	4621      	mov	r1, r4
 800506e:	028a      	lsls	r2, r1, #10
 8005070:	4610      	mov	r0, r2
 8005072:	4619      	mov	r1, r3
 8005074:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005078:	2200      	movs	r2, #0
 800507a:	673b      	str	r3, [r7, #112]	@ 0x70
 800507c:	677a      	str	r2, [r7, #116]	@ 0x74
 800507e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005082:	f7fb fe01 	bl	8000c88 <__aeabi_uldivmod>
 8005086:	4602      	mov	r2, r0
 8005088:	460b      	mov	r3, r1
 800508a:	4613      	mov	r3, r2
 800508c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005090:	4b41      	ldr	r3, [pc, #260]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x354>)
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	0c1b      	lsrs	r3, r3, #16
 8005096:	f003 0303 	and.w	r3, r3, #3
 800509a:	3301      	adds	r3, #1
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80050a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80050a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80050aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80050b2:	e0eb      	b.n	800528c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050b4:	4b38      	ldr	r3, [pc, #224]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x354>)
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050c0:	4b35      	ldr	r3, [pc, #212]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x354>)
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d06b      	beq.n	80051a4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050cc:	4b32      	ldr	r3, [pc, #200]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x354>)
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	099b      	lsrs	r3, r3, #6
 80050d2:	2200      	movs	r2, #0
 80050d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80050d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050de:	663b      	str	r3, [r7, #96]	@ 0x60
 80050e0:	2300      	movs	r3, #0
 80050e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80050e4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80050e8:	4622      	mov	r2, r4
 80050ea:	462b      	mov	r3, r5
 80050ec:	f04f 0000 	mov.w	r0, #0
 80050f0:	f04f 0100 	mov.w	r1, #0
 80050f4:	0159      	lsls	r1, r3, #5
 80050f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050fa:	0150      	lsls	r0, r2, #5
 80050fc:	4602      	mov	r2, r0
 80050fe:	460b      	mov	r3, r1
 8005100:	4621      	mov	r1, r4
 8005102:	1a51      	subs	r1, r2, r1
 8005104:	61b9      	str	r1, [r7, #24]
 8005106:	4629      	mov	r1, r5
 8005108:	eb63 0301 	sbc.w	r3, r3, r1
 800510c:	61fb      	str	r3, [r7, #28]
 800510e:	f04f 0200 	mov.w	r2, #0
 8005112:	f04f 0300 	mov.w	r3, #0
 8005116:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800511a:	4659      	mov	r1, fp
 800511c:	018b      	lsls	r3, r1, #6
 800511e:	4651      	mov	r1, sl
 8005120:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005124:	4651      	mov	r1, sl
 8005126:	018a      	lsls	r2, r1, #6
 8005128:	4651      	mov	r1, sl
 800512a:	ebb2 0801 	subs.w	r8, r2, r1
 800512e:	4659      	mov	r1, fp
 8005130:	eb63 0901 	sbc.w	r9, r3, r1
 8005134:	f04f 0200 	mov.w	r2, #0
 8005138:	f04f 0300 	mov.w	r3, #0
 800513c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005140:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005144:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005148:	4690      	mov	r8, r2
 800514a:	4699      	mov	r9, r3
 800514c:	4623      	mov	r3, r4
 800514e:	eb18 0303 	adds.w	r3, r8, r3
 8005152:	613b      	str	r3, [r7, #16]
 8005154:	462b      	mov	r3, r5
 8005156:	eb49 0303 	adc.w	r3, r9, r3
 800515a:	617b      	str	r3, [r7, #20]
 800515c:	f04f 0200 	mov.w	r2, #0
 8005160:	f04f 0300 	mov.w	r3, #0
 8005164:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005168:	4629      	mov	r1, r5
 800516a:	024b      	lsls	r3, r1, #9
 800516c:	4621      	mov	r1, r4
 800516e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005172:	4621      	mov	r1, r4
 8005174:	024a      	lsls	r2, r1, #9
 8005176:	4610      	mov	r0, r2
 8005178:	4619      	mov	r1, r3
 800517a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800517e:	2200      	movs	r2, #0
 8005180:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005182:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005184:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005188:	f7fb fd7e 	bl	8000c88 <__aeabi_uldivmod>
 800518c:	4602      	mov	r2, r0
 800518e:	460b      	mov	r3, r1
 8005190:	4613      	mov	r3, r2
 8005192:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005196:	e065      	b.n	8005264 <HAL_RCC_GetSysClockFreq+0x420>
 8005198:	40023800 	.word	0x40023800
 800519c:	00f42400 	.word	0x00f42400
 80051a0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051a4:	4b3d      	ldr	r3, [pc, #244]	@ (800529c <HAL_RCC_GetSysClockFreq+0x458>)
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	099b      	lsrs	r3, r3, #6
 80051aa:	2200      	movs	r2, #0
 80051ac:	4618      	mov	r0, r3
 80051ae:	4611      	mov	r1, r2
 80051b0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80051b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80051b6:	2300      	movs	r3, #0
 80051b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80051ba:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80051be:	4642      	mov	r2, r8
 80051c0:	464b      	mov	r3, r9
 80051c2:	f04f 0000 	mov.w	r0, #0
 80051c6:	f04f 0100 	mov.w	r1, #0
 80051ca:	0159      	lsls	r1, r3, #5
 80051cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051d0:	0150      	lsls	r0, r2, #5
 80051d2:	4602      	mov	r2, r0
 80051d4:	460b      	mov	r3, r1
 80051d6:	4641      	mov	r1, r8
 80051d8:	1a51      	subs	r1, r2, r1
 80051da:	60b9      	str	r1, [r7, #8]
 80051dc:	4649      	mov	r1, r9
 80051de:	eb63 0301 	sbc.w	r3, r3, r1
 80051e2:	60fb      	str	r3, [r7, #12]
 80051e4:	f04f 0200 	mov.w	r2, #0
 80051e8:	f04f 0300 	mov.w	r3, #0
 80051ec:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80051f0:	4659      	mov	r1, fp
 80051f2:	018b      	lsls	r3, r1, #6
 80051f4:	4651      	mov	r1, sl
 80051f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051fa:	4651      	mov	r1, sl
 80051fc:	018a      	lsls	r2, r1, #6
 80051fe:	4651      	mov	r1, sl
 8005200:	1a54      	subs	r4, r2, r1
 8005202:	4659      	mov	r1, fp
 8005204:	eb63 0501 	sbc.w	r5, r3, r1
 8005208:	f04f 0200 	mov.w	r2, #0
 800520c:	f04f 0300 	mov.w	r3, #0
 8005210:	00eb      	lsls	r3, r5, #3
 8005212:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005216:	00e2      	lsls	r2, r4, #3
 8005218:	4614      	mov	r4, r2
 800521a:	461d      	mov	r5, r3
 800521c:	4643      	mov	r3, r8
 800521e:	18e3      	adds	r3, r4, r3
 8005220:	603b      	str	r3, [r7, #0]
 8005222:	464b      	mov	r3, r9
 8005224:	eb45 0303 	adc.w	r3, r5, r3
 8005228:	607b      	str	r3, [r7, #4]
 800522a:	f04f 0200 	mov.w	r2, #0
 800522e:	f04f 0300 	mov.w	r3, #0
 8005232:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005236:	4629      	mov	r1, r5
 8005238:	028b      	lsls	r3, r1, #10
 800523a:	4621      	mov	r1, r4
 800523c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005240:	4621      	mov	r1, r4
 8005242:	028a      	lsls	r2, r1, #10
 8005244:	4610      	mov	r0, r2
 8005246:	4619      	mov	r1, r3
 8005248:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800524c:	2200      	movs	r2, #0
 800524e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005250:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005252:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005256:	f7fb fd17 	bl	8000c88 <__aeabi_uldivmod>
 800525a:	4602      	mov	r2, r0
 800525c:	460b      	mov	r3, r1
 800525e:	4613      	mov	r3, r2
 8005260:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005264:	4b0d      	ldr	r3, [pc, #52]	@ (800529c <HAL_RCC_GetSysClockFreq+0x458>)
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	0f1b      	lsrs	r3, r3, #28
 800526a:	f003 0307 	and.w	r3, r3, #7
 800526e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8005272:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005276:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800527a:	fbb2 f3f3 	udiv	r3, r2, r3
 800527e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005282:	e003      	b.n	800528c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005284:	4b06      	ldr	r3, [pc, #24]	@ (80052a0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005286:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800528a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800528c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005290:	4618      	mov	r0, r3
 8005292:	37b8      	adds	r7, #184	@ 0xb8
 8005294:	46bd      	mov	sp, r7
 8005296:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800529a:	bf00      	nop
 800529c:	40023800 	.word	0x40023800
 80052a0:	00f42400 	.word	0x00f42400

080052a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e28d      	b.n	80057d2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f000 8083 	beq.w	80053ca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80052c4:	4b94      	ldr	r3, [pc, #592]	@ (8005518 <HAL_RCC_OscConfig+0x274>)
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f003 030c 	and.w	r3, r3, #12
 80052cc:	2b04      	cmp	r3, #4
 80052ce:	d019      	beq.n	8005304 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80052d0:	4b91      	ldr	r3, [pc, #580]	@ (8005518 <HAL_RCC_OscConfig+0x274>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f003 030c 	and.w	r3, r3, #12
        || \
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d106      	bne.n	80052ea <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80052dc:	4b8e      	ldr	r3, [pc, #568]	@ (8005518 <HAL_RCC_OscConfig+0x274>)
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052e8:	d00c      	beq.n	8005304 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052ea:	4b8b      	ldr	r3, [pc, #556]	@ (8005518 <HAL_RCC_OscConfig+0x274>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80052f2:	2b0c      	cmp	r3, #12
 80052f4:	d112      	bne.n	800531c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052f6:	4b88      	ldr	r3, [pc, #544]	@ (8005518 <HAL_RCC_OscConfig+0x274>)
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005302:	d10b      	bne.n	800531c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005304:	4b84      	ldr	r3, [pc, #528]	@ (8005518 <HAL_RCC_OscConfig+0x274>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d05b      	beq.n	80053c8 <HAL_RCC_OscConfig+0x124>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d157      	bne.n	80053c8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e25a      	b.n	80057d2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005324:	d106      	bne.n	8005334 <HAL_RCC_OscConfig+0x90>
 8005326:	4b7c      	ldr	r3, [pc, #496]	@ (8005518 <HAL_RCC_OscConfig+0x274>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a7b      	ldr	r2, [pc, #492]	@ (8005518 <HAL_RCC_OscConfig+0x274>)
 800532c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005330:	6013      	str	r3, [r2, #0]
 8005332:	e01d      	b.n	8005370 <HAL_RCC_OscConfig+0xcc>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800533c:	d10c      	bne.n	8005358 <HAL_RCC_OscConfig+0xb4>
 800533e:	4b76      	ldr	r3, [pc, #472]	@ (8005518 <HAL_RCC_OscConfig+0x274>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a75      	ldr	r2, [pc, #468]	@ (8005518 <HAL_RCC_OscConfig+0x274>)
 8005344:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005348:	6013      	str	r3, [r2, #0]
 800534a:	4b73      	ldr	r3, [pc, #460]	@ (8005518 <HAL_RCC_OscConfig+0x274>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a72      	ldr	r2, [pc, #456]	@ (8005518 <HAL_RCC_OscConfig+0x274>)
 8005350:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005354:	6013      	str	r3, [r2, #0]
 8005356:	e00b      	b.n	8005370 <HAL_RCC_OscConfig+0xcc>
 8005358:	4b6f      	ldr	r3, [pc, #444]	@ (8005518 <HAL_RCC_OscConfig+0x274>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a6e      	ldr	r2, [pc, #440]	@ (8005518 <HAL_RCC_OscConfig+0x274>)
 800535e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005362:	6013      	str	r3, [r2, #0]
 8005364:	4b6c      	ldr	r3, [pc, #432]	@ (8005518 <HAL_RCC_OscConfig+0x274>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a6b      	ldr	r2, [pc, #428]	@ (8005518 <HAL_RCC_OscConfig+0x274>)
 800536a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800536e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d013      	beq.n	80053a0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005378:	f7fe fa6c 	bl	8003854 <HAL_GetTick>
 800537c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800537e:	e008      	b.n	8005392 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005380:	f7fe fa68 	bl	8003854 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b64      	cmp	r3, #100	@ 0x64
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e21f      	b.n	80057d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005392:	4b61      	ldr	r3, [pc, #388]	@ (8005518 <HAL_RCC_OscConfig+0x274>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d0f0      	beq.n	8005380 <HAL_RCC_OscConfig+0xdc>
 800539e:	e014      	b.n	80053ca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a0:	f7fe fa58 	bl	8003854 <HAL_GetTick>
 80053a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053a6:	e008      	b.n	80053ba <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053a8:	f7fe fa54 	bl	8003854 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b64      	cmp	r3, #100	@ 0x64
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e20b      	b.n	80057d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ba:	4b57      	ldr	r3, [pc, #348]	@ (8005518 <HAL_RCC_OscConfig+0x274>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1f0      	bne.n	80053a8 <HAL_RCC_OscConfig+0x104>
 80053c6:	e000      	b.n	80053ca <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d06f      	beq.n	80054b6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80053d6:	4b50      	ldr	r3, [pc, #320]	@ (8005518 <HAL_RCC_OscConfig+0x274>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 030c 	and.w	r3, r3, #12
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d017      	beq.n	8005412 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80053e2:	4b4d      	ldr	r3, [pc, #308]	@ (8005518 <HAL_RCC_OscConfig+0x274>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f003 030c 	and.w	r3, r3, #12
        || \
 80053ea:	2b08      	cmp	r3, #8
 80053ec:	d105      	bne.n	80053fa <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80053ee:	4b4a      	ldr	r3, [pc, #296]	@ (8005518 <HAL_RCC_OscConfig+0x274>)
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00b      	beq.n	8005412 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053fa:	4b47      	ldr	r3, [pc, #284]	@ (8005518 <HAL_RCC_OscConfig+0x274>)
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005402:	2b0c      	cmp	r3, #12
 8005404:	d11c      	bne.n	8005440 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005406:	4b44      	ldr	r3, [pc, #272]	@ (8005518 <HAL_RCC_OscConfig+0x274>)
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d116      	bne.n	8005440 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005412:	4b41      	ldr	r3, [pc, #260]	@ (8005518 <HAL_RCC_OscConfig+0x274>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d005      	beq.n	800542a <HAL_RCC_OscConfig+0x186>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d001      	beq.n	800542a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e1d3      	b.n	80057d2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800542a:	4b3b      	ldr	r3, [pc, #236]	@ (8005518 <HAL_RCC_OscConfig+0x274>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	00db      	lsls	r3, r3, #3
 8005438:	4937      	ldr	r1, [pc, #220]	@ (8005518 <HAL_RCC_OscConfig+0x274>)
 800543a:	4313      	orrs	r3, r2
 800543c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800543e:	e03a      	b.n	80054b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d020      	beq.n	800548a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005448:	4b34      	ldr	r3, [pc, #208]	@ (800551c <HAL_RCC_OscConfig+0x278>)
 800544a:	2201      	movs	r2, #1
 800544c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800544e:	f7fe fa01 	bl	8003854 <HAL_GetTick>
 8005452:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005454:	e008      	b.n	8005468 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005456:	f7fe f9fd 	bl	8003854 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	2b02      	cmp	r3, #2
 8005462:	d901      	bls.n	8005468 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e1b4      	b.n	80057d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005468:	4b2b      	ldr	r3, [pc, #172]	@ (8005518 <HAL_RCC_OscConfig+0x274>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	2b00      	cmp	r3, #0
 8005472:	d0f0      	beq.n	8005456 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005474:	4b28      	ldr	r3, [pc, #160]	@ (8005518 <HAL_RCC_OscConfig+0x274>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	00db      	lsls	r3, r3, #3
 8005482:	4925      	ldr	r1, [pc, #148]	@ (8005518 <HAL_RCC_OscConfig+0x274>)
 8005484:	4313      	orrs	r3, r2
 8005486:	600b      	str	r3, [r1, #0]
 8005488:	e015      	b.n	80054b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800548a:	4b24      	ldr	r3, [pc, #144]	@ (800551c <HAL_RCC_OscConfig+0x278>)
 800548c:	2200      	movs	r2, #0
 800548e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005490:	f7fe f9e0 	bl	8003854 <HAL_GetTick>
 8005494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005496:	e008      	b.n	80054aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005498:	f7fe f9dc 	bl	8003854 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e193      	b.n	80057d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054aa:	4b1b      	ldr	r3, [pc, #108]	@ (8005518 <HAL_RCC_OscConfig+0x274>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1f0      	bne.n	8005498 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0308 	and.w	r3, r3, #8
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d036      	beq.n	8005530 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d016      	beq.n	80054f8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054ca:	4b15      	ldr	r3, [pc, #84]	@ (8005520 <HAL_RCC_OscConfig+0x27c>)
 80054cc:	2201      	movs	r2, #1
 80054ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054d0:	f7fe f9c0 	bl	8003854 <HAL_GetTick>
 80054d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054d6:	e008      	b.n	80054ea <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054d8:	f7fe f9bc 	bl	8003854 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e173      	b.n	80057d2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005518 <HAL_RCC_OscConfig+0x274>)
 80054ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0f0      	beq.n	80054d8 <HAL_RCC_OscConfig+0x234>
 80054f6:	e01b      	b.n	8005530 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054f8:	4b09      	ldr	r3, [pc, #36]	@ (8005520 <HAL_RCC_OscConfig+0x27c>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054fe:	f7fe f9a9 	bl	8003854 <HAL_GetTick>
 8005502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005504:	e00e      	b.n	8005524 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005506:	f7fe f9a5 	bl	8003854 <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	2b02      	cmp	r3, #2
 8005512:	d907      	bls.n	8005524 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e15c      	b.n	80057d2 <HAL_RCC_OscConfig+0x52e>
 8005518:	40023800 	.word	0x40023800
 800551c:	42470000 	.word	0x42470000
 8005520:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005524:	4b8a      	ldr	r3, [pc, #552]	@ (8005750 <HAL_RCC_OscConfig+0x4ac>)
 8005526:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1ea      	bne.n	8005506 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0304 	and.w	r3, r3, #4
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 8097 	beq.w	800566c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800553e:	2300      	movs	r3, #0
 8005540:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005542:	4b83      	ldr	r3, [pc, #524]	@ (8005750 <HAL_RCC_OscConfig+0x4ac>)
 8005544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10f      	bne.n	800556e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800554e:	2300      	movs	r3, #0
 8005550:	60bb      	str	r3, [r7, #8]
 8005552:	4b7f      	ldr	r3, [pc, #508]	@ (8005750 <HAL_RCC_OscConfig+0x4ac>)
 8005554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005556:	4a7e      	ldr	r2, [pc, #504]	@ (8005750 <HAL_RCC_OscConfig+0x4ac>)
 8005558:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800555c:	6413      	str	r3, [r2, #64]	@ 0x40
 800555e:	4b7c      	ldr	r3, [pc, #496]	@ (8005750 <HAL_RCC_OscConfig+0x4ac>)
 8005560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005566:	60bb      	str	r3, [r7, #8]
 8005568:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800556a:	2301      	movs	r3, #1
 800556c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800556e:	4b79      	ldr	r3, [pc, #484]	@ (8005754 <HAL_RCC_OscConfig+0x4b0>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005576:	2b00      	cmp	r3, #0
 8005578:	d118      	bne.n	80055ac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800557a:	4b76      	ldr	r3, [pc, #472]	@ (8005754 <HAL_RCC_OscConfig+0x4b0>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a75      	ldr	r2, [pc, #468]	@ (8005754 <HAL_RCC_OscConfig+0x4b0>)
 8005580:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005584:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005586:	f7fe f965 	bl	8003854 <HAL_GetTick>
 800558a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800558c:	e008      	b.n	80055a0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800558e:	f7fe f961 	bl	8003854 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d901      	bls.n	80055a0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e118      	b.n	80057d2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055a0:	4b6c      	ldr	r3, [pc, #432]	@ (8005754 <HAL_RCC_OscConfig+0x4b0>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d0f0      	beq.n	800558e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d106      	bne.n	80055c2 <HAL_RCC_OscConfig+0x31e>
 80055b4:	4b66      	ldr	r3, [pc, #408]	@ (8005750 <HAL_RCC_OscConfig+0x4ac>)
 80055b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055b8:	4a65      	ldr	r2, [pc, #404]	@ (8005750 <HAL_RCC_OscConfig+0x4ac>)
 80055ba:	f043 0301 	orr.w	r3, r3, #1
 80055be:	6713      	str	r3, [r2, #112]	@ 0x70
 80055c0:	e01c      	b.n	80055fc <HAL_RCC_OscConfig+0x358>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	2b05      	cmp	r3, #5
 80055c8:	d10c      	bne.n	80055e4 <HAL_RCC_OscConfig+0x340>
 80055ca:	4b61      	ldr	r3, [pc, #388]	@ (8005750 <HAL_RCC_OscConfig+0x4ac>)
 80055cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ce:	4a60      	ldr	r2, [pc, #384]	@ (8005750 <HAL_RCC_OscConfig+0x4ac>)
 80055d0:	f043 0304 	orr.w	r3, r3, #4
 80055d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80055d6:	4b5e      	ldr	r3, [pc, #376]	@ (8005750 <HAL_RCC_OscConfig+0x4ac>)
 80055d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055da:	4a5d      	ldr	r2, [pc, #372]	@ (8005750 <HAL_RCC_OscConfig+0x4ac>)
 80055dc:	f043 0301 	orr.w	r3, r3, #1
 80055e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80055e2:	e00b      	b.n	80055fc <HAL_RCC_OscConfig+0x358>
 80055e4:	4b5a      	ldr	r3, [pc, #360]	@ (8005750 <HAL_RCC_OscConfig+0x4ac>)
 80055e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055e8:	4a59      	ldr	r2, [pc, #356]	@ (8005750 <HAL_RCC_OscConfig+0x4ac>)
 80055ea:	f023 0301 	bic.w	r3, r3, #1
 80055ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80055f0:	4b57      	ldr	r3, [pc, #348]	@ (8005750 <HAL_RCC_OscConfig+0x4ac>)
 80055f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055f4:	4a56      	ldr	r2, [pc, #344]	@ (8005750 <HAL_RCC_OscConfig+0x4ac>)
 80055f6:	f023 0304 	bic.w	r3, r3, #4
 80055fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d015      	beq.n	8005630 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005604:	f7fe f926 	bl	8003854 <HAL_GetTick>
 8005608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800560a:	e00a      	b.n	8005622 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800560c:	f7fe f922 	bl	8003854 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	f241 3288 	movw	r2, #5000	@ 0x1388
 800561a:	4293      	cmp	r3, r2
 800561c:	d901      	bls.n	8005622 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e0d7      	b.n	80057d2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005622:	4b4b      	ldr	r3, [pc, #300]	@ (8005750 <HAL_RCC_OscConfig+0x4ac>)
 8005624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d0ee      	beq.n	800560c <HAL_RCC_OscConfig+0x368>
 800562e:	e014      	b.n	800565a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005630:	f7fe f910 	bl	8003854 <HAL_GetTick>
 8005634:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005636:	e00a      	b.n	800564e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005638:	f7fe f90c 	bl	8003854 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005646:	4293      	cmp	r3, r2
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e0c1      	b.n	80057d2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800564e:	4b40      	ldr	r3, [pc, #256]	@ (8005750 <HAL_RCC_OscConfig+0x4ac>)
 8005650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1ee      	bne.n	8005638 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800565a:	7dfb      	ldrb	r3, [r7, #23]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d105      	bne.n	800566c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005660:	4b3b      	ldr	r3, [pc, #236]	@ (8005750 <HAL_RCC_OscConfig+0x4ac>)
 8005662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005664:	4a3a      	ldr	r2, [pc, #232]	@ (8005750 <HAL_RCC_OscConfig+0x4ac>)
 8005666:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800566a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 80ad 	beq.w	80057d0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005676:	4b36      	ldr	r3, [pc, #216]	@ (8005750 <HAL_RCC_OscConfig+0x4ac>)
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f003 030c 	and.w	r3, r3, #12
 800567e:	2b08      	cmp	r3, #8
 8005680:	d060      	beq.n	8005744 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	2b02      	cmp	r3, #2
 8005688:	d145      	bne.n	8005716 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800568a:	4b33      	ldr	r3, [pc, #204]	@ (8005758 <HAL_RCC_OscConfig+0x4b4>)
 800568c:	2200      	movs	r2, #0
 800568e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005690:	f7fe f8e0 	bl	8003854 <HAL_GetTick>
 8005694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005696:	e008      	b.n	80056aa <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005698:	f7fe f8dc 	bl	8003854 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e093      	b.n	80057d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056aa:	4b29      	ldr	r3, [pc, #164]	@ (8005750 <HAL_RCC_OscConfig+0x4ac>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1f0      	bne.n	8005698 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	69da      	ldr	r2, [r3, #28]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	431a      	orrs	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c4:	019b      	lsls	r3, r3, #6
 80056c6:	431a      	orrs	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056cc:	085b      	lsrs	r3, r3, #1
 80056ce:	3b01      	subs	r3, #1
 80056d0:	041b      	lsls	r3, r3, #16
 80056d2:	431a      	orrs	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d8:	061b      	lsls	r3, r3, #24
 80056da:	431a      	orrs	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e0:	071b      	lsls	r3, r3, #28
 80056e2:	491b      	ldr	r1, [pc, #108]	@ (8005750 <HAL_RCC_OscConfig+0x4ac>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005758 <HAL_RCC_OscConfig+0x4b4>)
 80056ea:	2201      	movs	r2, #1
 80056ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ee:	f7fe f8b1 	bl	8003854 <HAL_GetTick>
 80056f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056f4:	e008      	b.n	8005708 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056f6:	f7fe f8ad 	bl	8003854 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	2b02      	cmp	r3, #2
 8005702:	d901      	bls.n	8005708 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e064      	b.n	80057d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005708:	4b11      	ldr	r3, [pc, #68]	@ (8005750 <HAL_RCC_OscConfig+0x4ac>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d0f0      	beq.n	80056f6 <HAL_RCC_OscConfig+0x452>
 8005714:	e05c      	b.n	80057d0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005716:	4b10      	ldr	r3, [pc, #64]	@ (8005758 <HAL_RCC_OscConfig+0x4b4>)
 8005718:	2200      	movs	r2, #0
 800571a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800571c:	f7fe f89a 	bl	8003854 <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005722:	e008      	b.n	8005736 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005724:	f7fe f896 	bl	8003854 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b02      	cmp	r3, #2
 8005730:	d901      	bls.n	8005736 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e04d      	b.n	80057d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005736:	4b06      	ldr	r3, [pc, #24]	@ (8005750 <HAL_RCC_OscConfig+0x4ac>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1f0      	bne.n	8005724 <HAL_RCC_OscConfig+0x480>
 8005742:	e045      	b.n	80057d0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d107      	bne.n	800575c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e040      	b.n	80057d2 <HAL_RCC_OscConfig+0x52e>
 8005750:	40023800 	.word	0x40023800
 8005754:	40007000 	.word	0x40007000
 8005758:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800575c:	4b1f      	ldr	r3, [pc, #124]	@ (80057dc <HAL_RCC_OscConfig+0x538>)
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d030      	beq.n	80057cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005774:	429a      	cmp	r2, r3
 8005776:	d129      	bne.n	80057cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005782:	429a      	cmp	r2, r3
 8005784:	d122      	bne.n	80057cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800578c:	4013      	ands	r3, r2
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005792:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005794:	4293      	cmp	r3, r2
 8005796:	d119      	bne.n	80057cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a2:	085b      	lsrs	r3, r3, #1
 80057a4:	3b01      	subs	r3, #1
 80057a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d10f      	bne.n	80057cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d107      	bne.n	80057cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d001      	beq.n	80057d0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e000      	b.n	80057d2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3718      	adds	r7, #24
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	40023800 	.word	0x40023800

080057e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e07b      	b.n	80058ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d108      	bne.n	800580c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005802:	d009      	beq.n	8005818 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	61da      	str	r2, [r3, #28]
 800580a:	e005      	b.n	8005818 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d106      	bne.n	8005838 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7fd fce8 	bl	8003208 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2202      	movs	r2, #2
 800583c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800584e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005860:	431a      	orrs	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800586a:	431a      	orrs	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	431a      	orrs	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	431a      	orrs	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005888:	431a      	orrs	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005892:	431a      	orrs	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800589c:	ea42 0103 	orr.w	r1, r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	0c1b      	lsrs	r3, r3, #16
 80058b6:	f003 0104 	and.w	r1, r3, #4
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058be:	f003 0210 	and.w	r2, r3, #16
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	430a      	orrs	r2, r1
 80058c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	69da      	ldr	r2, [r3, #28]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3708      	adds	r7, #8
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b088      	sub	sp, #32
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	60f8      	str	r0, [r7, #12]
 80058fa:	60b9      	str	r1, [r7, #8]
 80058fc:	603b      	str	r3, [r7, #0]
 80058fe:	4613      	mov	r3, r2
 8005900:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005902:	f7fd ffa7 	bl	8003854 <HAL_GetTick>
 8005906:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005908:	88fb      	ldrh	r3, [r7, #6]
 800590a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b01      	cmp	r3, #1
 8005916:	d001      	beq.n	800591c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005918:	2302      	movs	r3, #2
 800591a:	e12a      	b.n	8005b72 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d002      	beq.n	8005928 <HAL_SPI_Transmit+0x36>
 8005922:	88fb      	ldrh	r3, [r7, #6]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d101      	bne.n	800592c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e122      	b.n	8005b72 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005932:	2b01      	cmp	r3, #1
 8005934:	d101      	bne.n	800593a <HAL_SPI_Transmit+0x48>
 8005936:	2302      	movs	r3, #2
 8005938:	e11b      	b.n	8005b72 <HAL_SPI_Transmit+0x280>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2203      	movs	r2, #3
 8005946:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	88fa      	ldrh	r2, [r7, #6]
 800595a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	88fa      	ldrh	r2, [r7, #6]
 8005960:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005988:	d10f      	bne.n	80059aa <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005998:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059b4:	2b40      	cmp	r3, #64	@ 0x40
 80059b6:	d007      	beq.n	80059c8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059d0:	d152      	bne.n	8005a78 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <HAL_SPI_Transmit+0xee>
 80059da:	8b7b      	ldrh	r3, [r7, #26]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d145      	bne.n	8005a6c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059e4:	881a      	ldrh	r2, [r3, #0]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f0:	1c9a      	adds	r2, r3, #2
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	3b01      	subs	r3, #1
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a04:	e032      	b.n	8005a6c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f003 0302 	and.w	r3, r3, #2
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d112      	bne.n	8005a3a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a18:	881a      	ldrh	r2, [r3, #0]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a24:	1c9a      	adds	r2, r3, #2
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	3b01      	subs	r3, #1
 8005a32:	b29a      	uxth	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005a38:	e018      	b.n	8005a6c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a3a:	f7fd ff0b 	bl	8003854 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d803      	bhi.n	8005a52 <HAL_SPI_Transmit+0x160>
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a50:	d102      	bne.n	8005a58 <HAL_SPI_Transmit+0x166>
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d109      	bne.n	8005a6c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e082      	b.n	8005b72 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1c7      	bne.n	8005a06 <HAL_SPI_Transmit+0x114>
 8005a76:	e053      	b.n	8005b20 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d002      	beq.n	8005a86 <HAL_SPI_Transmit+0x194>
 8005a80:	8b7b      	ldrh	r3, [r7, #26]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d147      	bne.n	8005b16 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	330c      	adds	r3, #12
 8005a90:	7812      	ldrb	r2, [r2, #0]
 8005a92:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a98:	1c5a      	adds	r2, r3, #1
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005aac:	e033      	b.n	8005b16 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f003 0302 	and.w	r3, r3, #2
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d113      	bne.n	8005ae4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	330c      	adds	r3, #12
 8005ac6:	7812      	ldrb	r2, [r2, #0]
 8005ac8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ace:	1c5a      	adds	r2, r3, #1
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	3b01      	subs	r3, #1
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005ae2:	e018      	b.n	8005b16 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ae4:	f7fd feb6 	bl	8003854 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	683a      	ldr	r2, [r7, #0]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d803      	bhi.n	8005afc <HAL_SPI_Transmit+0x20a>
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005afa:	d102      	bne.n	8005b02 <HAL_SPI_Transmit+0x210>
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d109      	bne.n	8005b16 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e02d      	b.n	8005b72 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1c6      	bne.n	8005aae <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b20:	69fa      	ldr	r2, [r7, #28]
 8005b22:	6839      	ldr	r1, [r7, #0]
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f000 fa59 	bl	8005fdc <SPI_EndRxTxTransaction>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d002      	beq.n	8005b36 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2220      	movs	r2, #32
 8005b34:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10a      	bne.n	8005b54 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b3e:	2300      	movs	r3, #0
 8005b40:	617b      	str	r3, [r7, #20]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	617b      	str	r3, [r7, #20]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	617b      	str	r3, [r7, #20]
 8005b52:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e000      	b.n	8005b72 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005b70:	2300      	movs	r3, #0
  }
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3720      	adds	r7, #32
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b08a      	sub	sp, #40	@ 0x28
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	60f8      	str	r0, [r7, #12]
 8005b82:	60b9      	str	r1, [r7, #8]
 8005b84:	607a      	str	r2, [r7, #4]
 8005b86:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b8c:	f7fd fe62 	bl	8003854 <HAL_GetTick>
 8005b90:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b98:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005ba0:	887b      	ldrh	r3, [r7, #2]
 8005ba2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ba4:	7ffb      	ldrb	r3, [r7, #31]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d00c      	beq.n	8005bc4 <HAL_SPI_TransmitReceive+0x4a>
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bb0:	d106      	bne.n	8005bc0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d102      	bne.n	8005bc0 <HAL_SPI_TransmitReceive+0x46>
 8005bba:	7ffb      	ldrb	r3, [r7, #31]
 8005bbc:	2b04      	cmp	r3, #4
 8005bbe:	d001      	beq.n	8005bc4 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	e17f      	b.n	8005ec4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d005      	beq.n	8005bd6 <HAL_SPI_TransmitReceive+0x5c>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <HAL_SPI_TransmitReceive+0x5c>
 8005bd0:	887b      	ldrh	r3, [r7, #2]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e174      	b.n	8005ec4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d101      	bne.n	8005be8 <HAL_SPI_TransmitReceive+0x6e>
 8005be4:	2302      	movs	r3, #2
 8005be6:	e16d      	b.n	8005ec4 <HAL_SPI_TransmitReceive+0x34a>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2b04      	cmp	r3, #4
 8005bfa:	d003      	beq.n	8005c04 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2205      	movs	r2, #5
 8005c00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	887a      	ldrh	r2, [r7, #2]
 8005c14:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	887a      	ldrh	r2, [r7, #2]
 8005c1a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	887a      	ldrh	r2, [r7, #2]
 8005c26:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	887a      	ldrh	r2, [r7, #2]
 8005c2c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c44:	2b40      	cmp	r3, #64	@ 0x40
 8005c46:	d007      	beq.n	8005c58 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c60:	d17e      	bne.n	8005d60 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d002      	beq.n	8005c70 <HAL_SPI_TransmitReceive+0xf6>
 8005c6a:	8afb      	ldrh	r3, [r7, #22]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d16c      	bne.n	8005d4a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c74:	881a      	ldrh	r2, [r3, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c80:	1c9a      	adds	r2, r3, #2
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c94:	e059      	b.n	8005d4a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d11b      	bne.n	8005cdc <HAL_SPI_TransmitReceive+0x162>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d016      	beq.n	8005cdc <HAL_SPI_TransmitReceive+0x162>
 8005cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d113      	bne.n	8005cdc <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cb8:	881a      	ldrh	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc4:	1c9a      	adds	r2, r3, #2
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d119      	bne.n	8005d1e <HAL_SPI_TransmitReceive+0x1a4>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d014      	beq.n	8005d1e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cfe:	b292      	uxth	r2, r2
 8005d00:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d06:	1c9a      	adds	r2, r3, #2
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	3b01      	subs	r3, #1
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d1e:	f7fd fd99 	bl	8003854 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d80d      	bhi.n	8005d4a <HAL_SPI_TransmitReceive+0x1d0>
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d34:	d009      	beq.n	8005d4a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e0bc      	b.n	8005ec4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1a0      	bne.n	8005c96 <HAL_SPI_TransmitReceive+0x11c>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d19b      	bne.n	8005c96 <HAL_SPI_TransmitReceive+0x11c>
 8005d5e:	e082      	b.n	8005e66 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d002      	beq.n	8005d6e <HAL_SPI_TransmitReceive+0x1f4>
 8005d68:	8afb      	ldrh	r3, [r7, #22]
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d171      	bne.n	8005e52 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	330c      	adds	r3, #12
 8005d78:	7812      	ldrb	r2, [r2, #0]
 8005d7a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d80:	1c5a      	adds	r2, r3, #1
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d94:	e05d      	b.n	8005e52 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d11c      	bne.n	8005dde <HAL_SPI_TransmitReceive+0x264>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d017      	beq.n	8005dde <HAL_SPI_TransmitReceive+0x264>
 8005dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d114      	bne.n	8005dde <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	330c      	adds	r3, #12
 8005dbe:	7812      	ldrb	r2, [r2, #0]
 8005dc0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dc6:	1c5a      	adds	r2, r3, #1
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d119      	bne.n	8005e20 <HAL_SPI_TransmitReceive+0x2a6>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d014      	beq.n	8005e20 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68da      	ldr	r2, [r3, #12]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e00:	b2d2      	uxtb	r2, r2
 8005e02:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e08:	1c5a      	adds	r2, r3, #1
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	3b01      	subs	r3, #1
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005e20:	f7fd fd18 	bl	8003854 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	6a3b      	ldr	r3, [r7, #32]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d803      	bhi.n	8005e38 <HAL_SPI_TransmitReceive+0x2be>
 8005e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e36:	d102      	bne.n	8005e3e <HAL_SPI_TransmitReceive+0x2c4>
 8005e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d109      	bne.n	8005e52 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e038      	b.n	8005ec4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d19c      	bne.n	8005d96 <HAL_SPI_TransmitReceive+0x21c>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d197      	bne.n	8005d96 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e66:	6a3a      	ldr	r2, [r7, #32]
 8005e68:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f000 f8b6 	bl	8005fdc <SPI_EndRxTxTransaction>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d008      	beq.n	8005e88 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2220      	movs	r2, #32
 8005e7a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e01d      	b.n	8005ec4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10a      	bne.n	8005ea6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e90:	2300      	movs	r3, #0
 8005e92:	613b      	str	r3, [r7, #16]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	613b      	str	r3, [r7, #16]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	613b      	str	r3, [r7, #16]
 8005ea4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d001      	beq.n	8005ec2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e000      	b.n	8005ec4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
  }
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3728      	adds	r7, #40	@ 0x28
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b088      	sub	sp, #32
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	603b      	str	r3, [r7, #0]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005edc:	f7fd fcba 	bl	8003854 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee4:	1a9b      	subs	r3, r3, r2
 8005ee6:	683a      	ldr	r2, [r7, #0]
 8005ee8:	4413      	add	r3, r2
 8005eea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005eec:	f7fd fcb2 	bl	8003854 <HAL_GetTick>
 8005ef0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ef2:	4b39      	ldr	r3, [pc, #228]	@ (8005fd8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	015b      	lsls	r3, r3, #5
 8005ef8:	0d1b      	lsrs	r3, r3, #20
 8005efa:	69fa      	ldr	r2, [r7, #28]
 8005efc:	fb02 f303 	mul.w	r3, r2, r3
 8005f00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f02:	e054      	b.n	8005fae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0a:	d050      	beq.n	8005fae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f0c:	f7fd fca2 	bl	8003854 <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	69fa      	ldr	r2, [r7, #28]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d902      	bls.n	8005f22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d13d      	bne.n	8005f9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005f30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f3a:	d111      	bne.n	8005f60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f44:	d004      	beq.n	8005f50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f4e:	d107      	bne.n	8005f60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f68:	d10f      	bne.n	8005f8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f78:	601a      	str	r2, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e017      	b.n	8005fce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	3b01      	subs	r3, #1
 8005fac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	689a      	ldr	r2, [r3, #8]
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	bf0c      	ite	eq
 8005fbe:	2301      	moveq	r3, #1
 8005fc0:	2300      	movne	r3, #0
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	79fb      	ldrb	r3, [r7, #7]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d19b      	bne.n	8005f04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3720      	adds	r7, #32
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	2000000c 	.word	0x2000000c

08005fdc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b088      	sub	sp, #32
 8005fe0:	af02      	add	r7, sp, #8
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	9300      	str	r3, [sp, #0]
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	2102      	movs	r1, #2
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f7ff ff6a 	bl	8005ecc <SPI_WaitFlagStateUntilTimeout>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d007      	beq.n	800600e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006002:	f043 0220 	orr.w	r2, r3, #32
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e032      	b.n	8006074 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800600e:	4b1b      	ldr	r3, [pc, #108]	@ (800607c <SPI_EndRxTxTransaction+0xa0>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a1b      	ldr	r2, [pc, #108]	@ (8006080 <SPI_EndRxTxTransaction+0xa4>)
 8006014:	fba2 2303 	umull	r2, r3, r2, r3
 8006018:	0d5b      	lsrs	r3, r3, #21
 800601a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800601e:	fb02 f303 	mul.w	r3, r2, r3
 8006022:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800602c:	d112      	bne.n	8006054 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	2200      	movs	r2, #0
 8006036:	2180      	movs	r1, #128	@ 0x80
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f7ff ff47 	bl	8005ecc <SPI_WaitFlagStateUntilTimeout>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d016      	beq.n	8006072 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006048:	f043 0220 	orr.w	r2, r3, #32
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e00f      	b.n	8006074 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00a      	beq.n	8006070 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	3b01      	subs	r3, #1
 800605e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800606a:	2b80      	cmp	r3, #128	@ 0x80
 800606c:	d0f2      	beq.n	8006054 <SPI_EndRxTxTransaction+0x78>
 800606e:	e000      	b.n	8006072 <SPI_EndRxTxTransaction+0x96>
        break;
 8006070:	bf00      	nop
  }

  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3718      	adds	r7, #24
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	2000000c 	.word	0x2000000c
 8006080:	165e9f81 	.word	0x165e9f81

08006084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e041      	b.n	800611a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d106      	bne.n	80060b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7fd f94a 	bl	8003344 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2202      	movs	r2, #2
 80060b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	3304      	adds	r3, #4
 80060c0:	4619      	mov	r1, r3
 80060c2:	4610      	mov	r0, r2
 80060c4:	f000 fa80 	bl	80065c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
	...

08006124 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006132:	b2db      	uxtb	r3, r3
 8006134:	2b01      	cmp	r3, #1
 8006136:	d001      	beq.n	800613c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e046      	b.n	80061ca <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2202      	movs	r2, #2
 8006140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a23      	ldr	r2, [pc, #140]	@ (80061d8 <HAL_TIM_Base_Start+0xb4>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d022      	beq.n	8006194 <HAL_TIM_Base_Start+0x70>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006156:	d01d      	beq.n	8006194 <HAL_TIM_Base_Start+0x70>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a1f      	ldr	r2, [pc, #124]	@ (80061dc <HAL_TIM_Base_Start+0xb8>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d018      	beq.n	8006194 <HAL_TIM_Base_Start+0x70>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a1e      	ldr	r2, [pc, #120]	@ (80061e0 <HAL_TIM_Base_Start+0xbc>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d013      	beq.n	8006194 <HAL_TIM_Base_Start+0x70>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a1c      	ldr	r2, [pc, #112]	@ (80061e4 <HAL_TIM_Base_Start+0xc0>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d00e      	beq.n	8006194 <HAL_TIM_Base_Start+0x70>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a1b      	ldr	r2, [pc, #108]	@ (80061e8 <HAL_TIM_Base_Start+0xc4>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d009      	beq.n	8006194 <HAL_TIM_Base_Start+0x70>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a19      	ldr	r2, [pc, #100]	@ (80061ec <HAL_TIM_Base_Start+0xc8>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d004      	beq.n	8006194 <HAL_TIM_Base_Start+0x70>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a18      	ldr	r2, [pc, #96]	@ (80061f0 <HAL_TIM_Base_Start+0xcc>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d111      	bne.n	80061b8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f003 0307 	and.w	r3, r3, #7
 800619e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2b06      	cmp	r3, #6
 80061a4:	d010      	beq.n	80061c8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f042 0201 	orr.w	r2, r2, #1
 80061b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061b6:	e007      	b.n	80061c8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f042 0201 	orr.w	r2, r2, #1
 80061c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3714      	adds	r7, #20
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	40010000 	.word	0x40010000
 80061dc:	40000400 	.word	0x40000400
 80061e0:	40000800 	.word	0x40000800
 80061e4:	40000c00 	.word	0x40000c00
 80061e8:	40010400 	.word	0x40010400
 80061ec:	40014000 	.word	0x40014000
 80061f0:	40001800 	.word	0x40001800

080061f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	2b00      	cmp	r3, #0
 8006214:	d020      	beq.n	8006258 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b00      	cmp	r3, #0
 800621e:	d01b      	beq.n	8006258 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f06f 0202 	mvn.w	r2, #2
 8006228:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	f003 0303 	and.w	r3, r3, #3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f9a3 	bl	800658a <HAL_TIM_IC_CaptureCallback>
 8006244:	e005      	b.n	8006252 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f995 	bl	8006576 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 f9a6 	bl	800659e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	f003 0304 	and.w	r3, r3, #4
 800625e:	2b00      	cmp	r3, #0
 8006260:	d020      	beq.n	80062a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f003 0304 	and.w	r3, r3, #4
 8006268:	2b00      	cmp	r3, #0
 800626a:	d01b      	beq.n	80062a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f06f 0204 	mvn.w	r2, #4
 8006274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2202      	movs	r2, #2
 800627a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006286:	2b00      	cmp	r3, #0
 8006288:	d003      	beq.n	8006292 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f97d 	bl	800658a <HAL_TIM_IC_CaptureCallback>
 8006290:	e005      	b.n	800629e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f96f 	bl	8006576 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 f980 	bl	800659e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	f003 0308 	and.w	r3, r3, #8
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d020      	beq.n	80062f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f003 0308 	and.w	r3, r3, #8
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d01b      	beq.n	80062f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f06f 0208 	mvn.w	r2, #8
 80062c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2204      	movs	r2, #4
 80062c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	f003 0303 	and.w	r3, r3, #3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d003      	beq.n	80062de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f957 	bl	800658a <HAL_TIM_IC_CaptureCallback>
 80062dc:	e005      	b.n	80062ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f949 	bl	8006576 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f95a 	bl	800659e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	f003 0310 	and.w	r3, r3, #16
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d020      	beq.n	800633c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f003 0310 	and.w	r3, r3, #16
 8006300:	2b00      	cmp	r3, #0
 8006302:	d01b      	beq.n	800633c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f06f 0210 	mvn.w	r2, #16
 800630c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2208      	movs	r2, #8
 8006312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	69db      	ldr	r3, [r3, #28]
 800631a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800631e:	2b00      	cmp	r3, #0
 8006320:	d003      	beq.n	800632a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 f931 	bl	800658a <HAL_TIM_IC_CaptureCallback>
 8006328:	e005      	b.n	8006336 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f923 	bl	8006576 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 f934 	bl	800659e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00c      	beq.n	8006360 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f003 0301 	and.w	r3, r3, #1
 800634c:	2b00      	cmp	r3, #0
 800634e:	d007      	beq.n	8006360 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f06f 0201 	mvn.w	r2, #1
 8006358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f901 	bl	8006562 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00c      	beq.n	8006384 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006370:	2b00      	cmp	r3, #0
 8006372:	d007      	beq.n	8006384 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800637c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 faee 	bl	8006960 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00c      	beq.n	80063a8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006394:	2b00      	cmp	r3, #0
 8006396:	d007      	beq.n	80063a8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80063a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f905 	bl	80065b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	f003 0320 	and.w	r3, r3, #32
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00c      	beq.n	80063cc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f003 0320 	and.w	r3, r3, #32
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d007      	beq.n	80063cc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f06f 0220 	mvn.w	r2, #32
 80063c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 fac0 	bl	800694c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063cc:	bf00      	nop
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063de:	2300      	movs	r3, #0
 80063e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d101      	bne.n	80063f0 <HAL_TIM_ConfigClockSource+0x1c>
 80063ec:	2302      	movs	r3, #2
 80063ee:	e0b4      	b.n	800655a <HAL_TIM_ConfigClockSource+0x186>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2202      	movs	r2, #2
 80063fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800640e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006416:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006428:	d03e      	beq.n	80064a8 <HAL_TIM_ConfigClockSource+0xd4>
 800642a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800642e:	f200 8087 	bhi.w	8006540 <HAL_TIM_ConfigClockSource+0x16c>
 8006432:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006436:	f000 8086 	beq.w	8006546 <HAL_TIM_ConfigClockSource+0x172>
 800643a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800643e:	d87f      	bhi.n	8006540 <HAL_TIM_ConfigClockSource+0x16c>
 8006440:	2b70      	cmp	r3, #112	@ 0x70
 8006442:	d01a      	beq.n	800647a <HAL_TIM_ConfigClockSource+0xa6>
 8006444:	2b70      	cmp	r3, #112	@ 0x70
 8006446:	d87b      	bhi.n	8006540 <HAL_TIM_ConfigClockSource+0x16c>
 8006448:	2b60      	cmp	r3, #96	@ 0x60
 800644a:	d050      	beq.n	80064ee <HAL_TIM_ConfigClockSource+0x11a>
 800644c:	2b60      	cmp	r3, #96	@ 0x60
 800644e:	d877      	bhi.n	8006540 <HAL_TIM_ConfigClockSource+0x16c>
 8006450:	2b50      	cmp	r3, #80	@ 0x50
 8006452:	d03c      	beq.n	80064ce <HAL_TIM_ConfigClockSource+0xfa>
 8006454:	2b50      	cmp	r3, #80	@ 0x50
 8006456:	d873      	bhi.n	8006540 <HAL_TIM_ConfigClockSource+0x16c>
 8006458:	2b40      	cmp	r3, #64	@ 0x40
 800645a:	d058      	beq.n	800650e <HAL_TIM_ConfigClockSource+0x13a>
 800645c:	2b40      	cmp	r3, #64	@ 0x40
 800645e:	d86f      	bhi.n	8006540 <HAL_TIM_ConfigClockSource+0x16c>
 8006460:	2b30      	cmp	r3, #48	@ 0x30
 8006462:	d064      	beq.n	800652e <HAL_TIM_ConfigClockSource+0x15a>
 8006464:	2b30      	cmp	r3, #48	@ 0x30
 8006466:	d86b      	bhi.n	8006540 <HAL_TIM_ConfigClockSource+0x16c>
 8006468:	2b20      	cmp	r3, #32
 800646a:	d060      	beq.n	800652e <HAL_TIM_ConfigClockSource+0x15a>
 800646c:	2b20      	cmp	r3, #32
 800646e:	d867      	bhi.n	8006540 <HAL_TIM_ConfigClockSource+0x16c>
 8006470:	2b00      	cmp	r3, #0
 8006472:	d05c      	beq.n	800652e <HAL_TIM_ConfigClockSource+0x15a>
 8006474:	2b10      	cmp	r3, #16
 8006476:	d05a      	beq.n	800652e <HAL_TIM_ConfigClockSource+0x15a>
 8006478:	e062      	b.n	8006540 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800648a:	f000 f9c3 	bl	8006814 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800649c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	609a      	str	r2, [r3, #8]
      break;
 80064a6:	e04f      	b.n	8006548 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064b8:	f000 f9ac 	bl	8006814 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	689a      	ldr	r2, [r3, #8]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80064ca:	609a      	str	r2, [r3, #8]
      break;
 80064cc:	e03c      	b.n	8006548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064da:	461a      	mov	r2, r3
 80064dc:	f000 f920 	bl	8006720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2150      	movs	r1, #80	@ 0x50
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 f979 	bl	80067de <TIM_ITRx_SetConfig>
      break;
 80064ec:	e02c      	b.n	8006548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064fa:	461a      	mov	r2, r3
 80064fc:	f000 f93f 	bl	800677e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2160      	movs	r1, #96	@ 0x60
 8006506:	4618      	mov	r0, r3
 8006508:	f000 f969 	bl	80067de <TIM_ITRx_SetConfig>
      break;
 800650c:	e01c      	b.n	8006548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800651a:	461a      	mov	r2, r3
 800651c:	f000 f900 	bl	8006720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2140      	movs	r1, #64	@ 0x40
 8006526:	4618      	mov	r0, r3
 8006528:	f000 f959 	bl	80067de <TIM_ITRx_SetConfig>
      break;
 800652c:	e00c      	b.n	8006548 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4619      	mov	r1, r3
 8006538:	4610      	mov	r0, r2
 800653a:	f000 f950 	bl	80067de <TIM_ITRx_SetConfig>
      break;
 800653e:	e003      	b.n	8006548 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	73fb      	strb	r3, [r7, #15]
      break;
 8006544:	e000      	b.n	8006548 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006546:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006558:	7bfb      	ldrb	r3, [r7, #15]
}
 800655a:	4618      	mov	r0, r3
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006562:	b480      	push	{r7}
 8006564:	b083      	sub	sp, #12
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800656a:	bf00      	nop
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006576:	b480      	push	{r7}
 8006578:	b083      	sub	sp, #12
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800657e:	bf00      	nop
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr

0800658a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800658a:	b480      	push	{r7}
 800658c:	b083      	sub	sp, #12
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006592:	bf00      	nop
 8006594:	370c      	adds	r7, #12
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr

0800659e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800659e:	b480      	push	{r7}
 80065a0:	b083      	sub	sp, #12
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065a6:	bf00      	nop
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b083      	sub	sp, #12
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065ba:	bf00      	nop
 80065bc:	370c      	adds	r7, #12
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
	...

080065c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a46      	ldr	r2, [pc, #280]	@ (80066f4 <TIM_Base_SetConfig+0x12c>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d013      	beq.n	8006608 <TIM_Base_SetConfig+0x40>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065e6:	d00f      	beq.n	8006608 <TIM_Base_SetConfig+0x40>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a43      	ldr	r2, [pc, #268]	@ (80066f8 <TIM_Base_SetConfig+0x130>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d00b      	beq.n	8006608 <TIM_Base_SetConfig+0x40>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a42      	ldr	r2, [pc, #264]	@ (80066fc <TIM_Base_SetConfig+0x134>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d007      	beq.n	8006608 <TIM_Base_SetConfig+0x40>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a41      	ldr	r2, [pc, #260]	@ (8006700 <TIM_Base_SetConfig+0x138>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d003      	beq.n	8006608 <TIM_Base_SetConfig+0x40>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a40      	ldr	r2, [pc, #256]	@ (8006704 <TIM_Base_SetConfig+0x13c>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d108      	bne.n	800661a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800660e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	4313      	orrs	r3, r2
 8006618:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a35      	ldr	r2, [pc, #212]	@ (80066f4 <TIM_Base_SetConfig+0x12c>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d02b      	beq.n	800667a <TIM_Base_SetConfig+0xb2>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006628:	d027      	beq.n	800667a <TIM_Base_SetConfig+0xb2>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a32      	ldr	r2, [pc, #200]	@ (80066f8 <TIM_Base_SetConfig+0x130>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d023      	beq.n	800667a <TIM_Base_SetConfig+0xb2>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a31      	ldr	r2, [pc, #196]	@ (80066fc <TIM_Base_SetConfig+0x134>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d01f      	beq.n	800667a <TIM_Base_SetConfig+0xb2>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a30      	ldr	r2, [pc, #192]	@ (8006700 <TIM_Base_SetConfig+0x138>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d01b      	beq.n	800667a <TIM_Base_SetConfig+0xb2>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a2f      	ldr	r2, [pc, #188]	@ (8006704 <TIM_Base_SetConfig+0x13c>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d017      	beq.n	800667a <TIM_Base_SetConfig+0xb2>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a2e      	ldr	r2, [pc, #184]	@ (8006708 <TIM_Base_SetConfig+0x140>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d013      	beq.n	800667a <TIM_Base_SetConfig+0xb2>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a2d      	ldr	r2, [pc, #180]	@ (800670c <TIM_Base_SetConfig+0x144>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d00f      	beq.n	800667a <TIM_Base_SetConfig+0xb2>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a2c      	ldr	r2, [pc, #176]	@ (8006710 <TIM_Base_SetConfig+0x148>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d00b      	beq.n	800667a <TIM_Base_SetConfig+0xb2>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a2b      	ldr	r2, [pc, #172]	@ (8006714 <TIM_Base_SetConfig+0x14c>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d007      	beq.n	800667a <TIM_Base_SetConfig+0xb2>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a2a      	ldr	r2, [pc, #168]	@ (8006718 <TIM_Base_SetConfig+0x150>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d003      	beq.n	800667a <TIM_Base_SetConfig+0xb2>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a29      	ldr	r2, [pc, #164]	@ (800671c <TIM_Base_SetConfig+0x154>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d108      	bne.n	800668c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006680:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	4313      	orrs	r3, r2
 800668a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	4313      	orrs	r3, r2
 8006698:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	689a      	ldr	r2, [r3, #8]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a10      	ldr	r2, [pc, #64]	@ (80066f4 <TIM_Base_SetConfig+0x12c>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d003      	beq.n	80066c0 <TIM_Base_SetConfig+0xf8>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a12      	ldr	r2, [pc, #72]	@ (8006704 <TIM_Base_SetConfig+0x13c>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d103      	bne.n	80066c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	691a      	ldr	r2, [r3, #16]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d105      	bne.n	80066e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	f023 0201 	bic.w	r2, r3, #1
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	611a      	str	r2, [r3, #16]
  }
}
 80066e6:	bf00      	nop
 80066e8:	3714      	adds	r7, #20
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	40010000 	.word	0x40010000
 80066f8:	40000400 	.word	0x40000400
 80066fc:	40000800 	.word	0x40000800
 8006700:	40000c00 	.word	0x40000c00
 8006704:	40010400 	.word	0x40010400
 8006708:	40014000 	.word	0x40014000
 800670c:	40014400 	.word	0x40014400
 8006710:	40014800 	.word	0x40014800
 8006714:	40001800 	.word	0x40001800
 8006718:	40001c00 	.word	0x40001c00
 800671c:	40002000 	.word	0x40002000

08006720 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006720:	b480      	push	{r7}
 8006722:	b087      	sub	sp, #28
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6a1b      	ldr	r3, [r3, #32]
 8006730:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	f023 0201 	bic.w	r2, r3, #1
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800674a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	011b      	lsls	r3, r3, #4
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	4313      	orrs	r3, r2
 8006754:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f023 030a 	bic.w	r3, r3, #10
 800675c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	4313      	orrs	r3, r2
 8006764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	621a      	str	r2, [r3, #32]
}
 8006772:	bf00      	nop
 8006774:	371c      	adds	r7, #28
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr

0800677e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800677e:	b480      	push	{r7}
 8006780:	b087      	sub	sp, #28
 8006782:	af00      	add	r7, sp, #0
 8006784:	60f8      	str	r0, [r7, #12]
 8006786:	60b9      	str	r1, [r7, #8]
 8006788:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6a1b      	ldr	r3, [r3, #32]
 8006794:	f023 0210 	bic.w	r2, r3, #16
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80067a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	031b      	lsls	r3, r3, #12
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80067ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	011b      	lsls	r3, r3, #4
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	621a      	str	r2, [r3, #32]
}
 80067d2:	bf00      	nop
 80067d4:	371c      	adds	r7, #28
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067de:	b480      	push	{r7}
 80067e0:	b085      	sub	sp, #20
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	f043 0307 	orr.w	r3, r3, #7
 8006800:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	609a      	str	r2, [r3, #8]
}
 8006808:	bf00      	nop
 800680a:	3714      	adds	r7, #20
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006814:	b480      	push	{r7}
 8006816:	b087      	sub	sp, #28
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
 8006820:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800682e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	021a      	lsls	r2, r3, #8
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	431a      	orrs	r2, r3
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	4313      	orrs	r3, r2
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	4313      	orrs	r3, r2
 8006840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	609a      	str	r2, [r3, #8]
}
 8006848:	bf00      	nop
 800684a:	371c      	adds	r7, #28
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006864:	2b01      	cmp	r3, #1
 8006866:	d101      	bne.n	800686c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006868:	2302      	movs	r3, #2
 800686a:	e05a      	b.n	8006922 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2202      	movs	r2, #2
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006892:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	4313      	orrs	r3, r2
 800689c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a21      	ldr	r2, [pc, #132]	@ (8006930 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d022      	beq.n	80068f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068b8:	d01d      	beq.n	80068f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a1d      	ldr	r2, [pc, #116]	@ (8006934 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d018      	beq.n	80068f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a1b      	ldr	r2, [pc, #108]	@ (8006938 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d013      	beq.n	80068f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a1a      	ldr	r2, [pc, #104]	@ (800693c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d00e      	beq.n	80068f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a18      	ldr	r2, [pc, #96]	@ (8006940 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d009      	beq.n	80068f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a17      	ldr	r2, [pc, #92]	@ (8006944 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d004      	beq.n	80068f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a15      	ldr	r2, [pc, #84]	@ (8006948 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d10c      	bne.n	8006910 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	4313      	orrs	r3, r2
 8006906:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	40010000 	.word	0x40010000
 8006934:	40000400 	.word	0x40000400
 8006938:	40000800 	.word	0x40000800
 800693c:	40000c00 	.word	0x40000c00
 8006940:	40010400 	.word	0x40010400
 8006944:	40014000 	.word	0x40014000
 8006948:	40001800 	.word	0x40001800

0800694c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d101      	bne.n	8006986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e042      	b.n	8006a0c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d106      	bne.n	80069a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7fc fcf8 	bl	8003390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2224      	movs	r2, #36	@ 0x24
 80069a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68da      	ldr	r2, [r3, #12]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80069b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f82b 	bl	8006a14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	691a      	ldr	r2, [r3, #16]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80069cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	695a      	ldr	r2, [r3, #20]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80069dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68da      	ldr	r2, [r3, #12]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80069ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2220      	movs	r2, #32
 80069f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2220      	movs	r2, #32
 8006a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3708      	adds	r7, #8
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a18:	b0c0      	sub	sp, #256	@ 0x100
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a30:	68d9      	ldr	r1, [r3, #12]
 8006a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	ea40 0301 	orr.w	r3, r0, r1
 8006a3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a42:	689a      	ldr	r2, [r3, #8]
 8006a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	431a      	orrs	r2, r3
 8006a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	431a      	orrs	r2, r3
 8006a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a58:	69db      	ldr	r3, [r3, #28]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006a6c:	f021 010c 	bic.w	r1, r1, #12
 8006a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006a7a:	430b      	orrs	r3, r1
 8006a7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a8e:	6999      	ldr	r1, [r3, #24]
 8006a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	ea40 0301 	orr.w	r3, r0, r1
 8006a9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	4b8f      	ldr	r3, [pc, #572]	@ (8006ce0 <UART_SetConfig+0x2cc>)
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d005      	beq.n	8006ab4 <UART_SetConfig+0xa0>
 8006aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	4b8d      	ldr	r3, [pc, #564]	@ (8006ce4 <UART_SetConfig+0x2d0>)
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d104      	bne.n	8006abe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ab4:	f7fd fe88 	bl	80047c8 <HAL_RCC_GetPCLK2Freq>
 8006ab8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006abc:	e003      	b.n	8006ac6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006abe:	f7fd fe6f 	bl	80047a0 <HAL_RCC_GetPCLK1Freq>
 8006ac2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aca:	69db      	ldr	r3, [r3, #28]
 8006acc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ad0:	f040 810c 	bne.w	8006cec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ad4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006ade:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006ae2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006ae6:	4622      	mov	r2, r4
 8006ae8:	462b      	mov	r3, r5
 8006aea:	1891      	adds	r1, r2, r2
 8006aec:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006aee:	415b      	adcs	r3, r3
 8006af0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006af2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006af6:	4621      	mov	r1, r4
 8006af8:	eb12 0801 	adds.w	r8, r2, r1
 8006afc:	4629      	mov	r1, r5
 8006afe:	eb43 0901 	adc.w	r9, r3, r1
 8006b02:	f04f 0200 	mov.w	r2, #0
 8006b06:	f04f 0300 	mov.w	r3, #0
 8006b0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b16:	4690      	mov	r8, r2
 8006b18:	4699      	mov	r9, r3
 8006b1a:	4623      	mov	r3, r4
 8006b1c:	eb18 0303 	adds.w	r3, r8, r3
 8006b20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006b24:	462b      	mov	r3, r5
 8006b26:	eb49 0303 	adc.w	r3, r9, r3
 8006b2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006b3a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006b3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006b42:	460b      	mov	r3, r1
 8006b44:	18db      	adds	r3, r3, r3
 8006b46:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b48:	4613      	mov	r3, r2
 8006b4a:	eb42 0303 	adc.w	r3, r2, r3
 8006b4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006b54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006b58:	f7fa f896 	bl	8000c88 <__aeabi_uldivmod>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	460b      	mov	r3, r1
 8006b60:	4b61      	ldr	r3, [pc, #388]	@ (8006ce8 <UART_SetConfig+0x2d4>)
 8006b62:	fba3 2302 	umull	r2, r3, r3, r2
 8006b66:	095b      	lsrs	r3, r3, #5
 8006b68:	011c      	lsls	r4, r3, #4
 8006b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b74:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006b78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006b7c:	4642      	mov	r2, r8
 8006b7e:	464b      	mov	r3, r9
 8006b80:	1891      	adds	r1, r2, r2
 8006b82:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006b84:	415b      	adcs	r3, r3
 8006b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006b8c:	4641      	mov	r1, r8
 8006b8e:	eb12 0a01 	adds.w	sl, r2, r1
 8006b92:	4649      	mov	r1, r9
 8006b94:	eb43 0b01 	adc.w	fp, r3, r1
 8006b98:	f04f 0200 	mov.w	r2, #0
 8006b9c:	f04f 0300 	mov.w	r3, #0
 8006ba0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ba4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ba8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006bac:	4692      	mov	sl, r2
 8006bae:	469b      	mov	fp, r3
 8006bb0:	4643      	mov	r3, r8
 8006bb2:	eb1a 0303 	adds.w	r3, sl, r3
 8006bb6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006bba:	464b      	mov	r3, r9
 8006bbc:	eb4b 0303 	adc.w	r3, fp, r3
 8006bc0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006bd0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006bd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006bd8:	460b      	mov	r3, r1
 8006bda:	18db      	adds	r3, r3, r3
 8006bdc:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bde:	4613      	mov	r3, r2
 8006be0:	eb42 0303 	adc.w	r3, r2, r3
 8006be4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006be6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006bea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006bee:	f7fa f84b 	bl	8000c88 <__aeabi_uldivmod>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	4611      	mov	r1, r2
 8006bf8:	4b3b      	ldr	r3, [pc, #236]	@ (8006ce8 <UART_SetConfig+0x2d4>)
 8006bfa:	fba3 2301 	umull	r2, r3, r3, r1
 8006bfe:	095b      	lsrs	r3, r3, #5
 8006c00:	2264      	movs	r2, #100	@ 0x64
 8006c02:	fb02 f303 	mul.w	r3, r2, r3
 8006c06:	1acb      	subs	r3, r1, r3
 8006c08:	00db      	lsls	r3, r3, #3
 8006c0a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006c0e:	4b36      	ldr	r3, [pc, #216]	@ (8006ce8 <UART_SetConfig+0x2d4>)
 8006c10:	fba3 2302 	umull	r2, r3, r3, r2
 8006c14:	095b      	lsrs	r3, r3, #5
 8006c16:	005b      	lsls	r3, r3, #1
 8006c18:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006c1c:	441c      	add	r4, r3
 8006c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c22:	2200      	movs	r2, #0
 8006c24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c28:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006c2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006c30:	4642      	mov	r2, r8
 8006c32:	464b      	mov	r3, r9
 8006c34:	1891      	adds	r1, r2, r2
 8006c36:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006c38:	415b      	adcs	r3, r3
 8006c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006c40:	4641      	mov	r1, r8
 8006c42:	1851      	adds	r1, r2, r1
 8006c44:	6339      	str	r1, [r7, #48]	@ 0x30
 8006c46:	4649      	mov	r1, r9
 8006c48:	414b      	adcs	r3, r1
 8006c4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c4c:	f04f 0200 	mov.w	r2, #0
 8006c50:	f04f 0300 	mov.w	r3, #0
 8006c54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006c58:	4659      	mov	r1, fp
 8006c5a:	00cb      	lsls	r3, r1, #3
 8006c5c:	4651      	mov	r1, sl
 8006c5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c62:	4651      	mov	r1, sl
 8006c64:	00ca      	lsls	r2, r1, #3
 8006c66:	4610      	mov	r0, r2
 8006c68:	4619      	mov	r1, r3
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	4642      	mov	r2, r8
 8006c6e:	189b      	adds	r3, r3, r2
 8006c70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c74:	464b      	mov	r3, r9
 8006c76:	460a      	mov	r2, r1
 8006c78:	eb42 0303 	adc.w	r3, r2, r3
 8006c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006c8c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006c90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006c94:	460b      	mov	r3, r1
 8006c96:	18db      	adds	r3, r3, r3
 8006c98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	eb42 0303 	adc.w	r3, r2, r3
 8006ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ca2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006ca6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006caa:	f7f9 ffed 	bl	8000c88 <__aeabi_uldivmod>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ce8 <UART_SetConfig+0x2d4>)
 8006cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8006cb8:	095b      	lsrs	r3, r3, #5
 8006cba:	2164      	movs	r1, #100	@ 0x64
 8006cbc:	fb01 f303 	mul.w	r3, r1, r3
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	00db      	lsls	r3, r3, #3
 8006cc4:	3332      	adds	r3, #50	@ 0x32
 8006cc6:	4a08      	ldr	r2, [pc, #32]	@ (8006ce8 <UART_SetConfig+0x2d4>)
 8006cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8006ccc:	095b      	lsrs	r3, r3, #5
 8006cce:	f003 0207 	and.w	r2, r3, #7
 8006cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4422      	add	r2, r4
 8006cda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006cdc:	e106      	b.n	8006eec <UART_SetConfig+0x4d8>
 8006cde:	bf00      	nop
 8006ce0:	40011000 	.word	0x40011000
 8006ce4:	40011400 	.word	0x40011400
 8006ce8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006cf6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006cfa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006cfe:	4642      	mov	r2, r8
 8006d00:	464b      	mov	r3, r9
 8006d02:	1891      	adds	r1, r2, r2
 8006d04:	6239      	str	r1, [r7, #32]
 8006d06:	415b      	adcs	r3, r3
 8006d08:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006d0e:	4641      	mov	r1, r8
 8006d10:	1854      	adds	r4, r2, r1
 8006d12:	4649      	mov	r1, r9
 8006d14:	eb43 0501 	adc.w	r5, r3, r1
 8006d18:	f04f 0200 	mov.w	r2, #0
 8006d1c:	f04f 0300 	mov.w	r3, #0
 8006d20:	00eb      	lsls	r3, r5, #3
 8006d22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d26:	00e2      	lsls	r2, r4, #3
 8006d28:	4614      	mov	r4, r2
 8006d2a:	461d      	mov	r5, r3
 8006d2c:	4643      	mov	r3, r8
 8006d2e:	18e3      	adds	r3, r4, r3
 8006d30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006d34:	464b      	mov	r3, r9
 8006d36:	eb45 0303 	adc.w	r3, r5, r3
 8006d3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006d4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006d4e:	f04f 0200 	mov.w	r2, #0
 8006d52:	f04f 0300 	mov.w	r3, #0
 8006d56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006d5a:	4629      	mov	r1, r5
 8006d5c:	008b      	lsls	r3, r1, #2
 8006d5e:	4621      	mov	r1, r4
 8006d60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d64:	4621      	mov	r1, r4
 8006d66:	008a      	lsls	r2, r1, #2
 8006d68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006d6c:	f7f9 ff8c 	bl	8000c88 <__aeabi_uldivmod>
 8006d70:	4602      	mov	r2, r0
 8006d72:	460b      	mov	r3, r1
 8006d74:	4b60      	ldr	r3, [pc, #384]	@ (8006ef8 <UART_SetConfig+0x4e4>)
 8006d76:	fba3 2302 	umull	r2, r3, r3, r2
 8006d7a:	095b      	lsrs	r3, r3, #5
 8006d7c:	011c      	lsls	r4, r3, #4
 8006d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d82:	2200      	movs	r2, #0
 8006d84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d88:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006d8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006d90:	4642      	mov	r2, r8
 8006d92:	464b      	mov	r3, r9
 8006d94:	1891      	adds	r1, r2, r2
 8006d96:	61b9      	str	r1, [r7, #24]
 8006d98:	415b      	adcs	r3, r3
 8006d9a:	61fb      	str	r3, [r7, #28]
 8006d9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006da0:	4641      	mov	r1, r8
 8006da2:	1851      	adds	r1, r2, r1
 8006da4:	6139      	str	r1, [r7, #16]
 8006da6:	4649      	mov	r1, r9
 8006da8:	414b      	adcs	r3, r1
 8006daa:	617b      	str	r3, [r7, #20]
 8006dac:	f04f 0200 	mov.w	r2, #0
 8006db0:	f04f 0300 	mov.w	r3, #0
 8006db4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006db8:	4659      	mov	r1, fp
 8006dba:	00cb      	lsls	r3, r1, #3
 8006dbc:	4651      	mov	r1, sl
 8006dbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dc2:	4651      	mov	r1, sl
 8006dc4:	00ca      	lsls	r2, r1, #3
 8006dc6:	4610      	mov	r0, r2
 8006dc8:	4619      	mov	r1, r3
 8006dca:	4603      	mov	r3, r0
 8006dcc:	4642      	mov	r2, r8
 8006dce:	189b      	adds	r3, r3, r2
 8006dd0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006dd4:	464b      	mov	r3, r9
 8006dd6:	460a      	mov	r2, r1
 8006dd8:	eb42 0303 	adc.w	r3, r2, r3
 8006ddc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006dea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006dec:	f04f 0200 	mov.w	r2, #0
 8006df0:	f04f 0300 	mov.w	r3, #0
 8006df4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006df8:	4649      	mov	r1, r9
 8006dfa:	008b      	lsls	r3, r1, #2
 8006dfc:	4641      	mov	r1, r8
 8006dfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e02:	4641      	mov	r1, r8
 8006e04:	008a      	lsls	r2, r1, #2
 8006e06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006e0a:	f7f9 ff3d 	bl	8000c88 <__aeabi_uldivmod>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	460b      	mov	r3, r1
 8006e12:	4611      	mov	r1, r2
 8006e14:	4b38      	ldr	r3, [pc, #224]	@ (8006ef8 <UART_SetConfig+0x4e4>)
 8006e16:	fba3 2301 	umull	r2, r3, r3, r1
 8006e1a:	095b      	lsrs	r3, r3, #5
 8006e1c:	2264      	movs	r2, #100	@ 0x64
 8006e1e:	fb02 f303 	mul.w	r3, r2, r3
 8006e22:	1acb      	subs	r3, r1, r3
 8006e24:	011b      	lsls	r3, r3, #4
 8006e26:	3332      	adds	r3, #50	@ 0x32
 8006e28:	4a33      	ldr	r2, [pc, #204]	@ (8006ef8 <UART_SetConfig+0x4e4>)
 8006e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e2e:	095b      	lsrs	r3, r3, #5
 8006e30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006e34:	441c      	add	r4, r3
 8006e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	673b      	str	r3, [r7, #112]	@ 0x70
 8006e3e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006e40:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006e44:	4642      	mov	r2, r8
 8006e46:	464b      	mov	r3, r9
 8006e48:	1891      	adds	r1, r2, r2
 8006e4a:	60b9      	str	r1, [r7, #8]
 8006e4c:	415b      	adcs	r3, r3
 8006e4e:	60fb      	str	r3, [r7, #12]
 8006e50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e54:	4641      	mov	r1, r8
 8006e56:	1851      	adds	r1, r2, r1
 8006e58:	6039      	str	r1, [r7, #0]
 8006e5a:	4649      	mov	r1, r9
 8006e5c:	414b      	adcs	r3, r1
 8006e5e:	607b      	str	r3, [r7, #4]
 8006e60:	f04f 0200 	mov.w	r2, #0
 8006e64:	f04f 0300 	mov.w	r3, #0
 8006e68:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e6c:	4659      	mov	r1, fp
 8006e6e:	00cb      	lsls	r3, r1, #3
 8006e70:	4651      	mov	r1, sl
 8006e72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e76:	4651      	mov	r1, sl
 8006e78:	00ca      	lsls	r2, r1, #3
 8006e7a:	4610      	mov	r0, r2
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	4603      	mov	r3, r0
 8006e80:	4642      	mov	r2, r8
 8006e82:	189b      	adds	r3, r3, r2
 8006e84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e86:	464b      	mov	r3, r9
 8006e88:	460a      	mov	r2, r1
 8006e8a:	eb42 0303 	adc.w	r3, r2, r3
 8006e8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e9a:	667a      	str	r2, [r7, #100]	@ 0x64
 8006e9c:	f04f 0200 	mov.w	r2, #0
 8006ea0:	f04f 0300 	mov.w	r3, #0
 8006ea4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006ea8:	4649      	mov	r1, r9
 8006eaa:	008b      	lsls	r3, r1, #2
 8006eac:	4641      	mov	r1, r8
 8006eae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006eb2:	4641      	mov	r1, r8
 8006eb4:	008a      	lsls	r2, r1, #2
 8006eb6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006eba:	f7f9 fee5 	bl	8000c88 <__aeabi_uldivmod>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ef8 <UART_SetConfig+0x4e4>)
 8006ec4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ec8:	095b      	lsrs	r3, r3, #5
 8006eca:	2164      	movs	r1, #100	@ 0x64
 8006ecc:	fb01 f303 	mul.w	r3, r1, r3
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	011b      	lsls	r3, r3, #4
 8006ed4:	3332      	adds	r3, #50	@ 0x32
 8006ed6:	4a08      	ldr	r2, [pc, #32]	@ (8006ef8 <UART_SetConfig+0x4e4>)
 8006ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8006edc:	095b      	lsrs	r3, r3, #5
 8006ede:	f003 020f 	and.w	r2, r3, #15
 8006ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4422      	add	r2, r4
 8006eea:	609a      	str	r2, [r3, #8]
}
 8006eec:	bf00      	nop
 8006eee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ef8:	51eb851f 	.word	0x51eb851f

08006efc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006efc:	b084      	sub	sp, #16
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b084      	sub	sp, #16
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
 8006f06:	f107 001c 	add.w	r0, r7, #28
 8006f0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f0e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d123      	bne.n	8006f5e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f1a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006f2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006f3e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d105      	bne.n	8006f52 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fa9a 	bl	800748c <USB_CoreReset>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	73fb      	strb	r3, [r7, #15]
 8006f5c:	e01b      	b.n	8006f96 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 fa8e 	bl	800748c <USB_CoreReset>
 8006f70:	4603      	mov	r3, r0
 8006f72:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006f74:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d106      	bne.n	8006f8a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f80:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	639a      	str	r2, [r3, #56]	@ 0x38
 8006f88:	e005      	b.n	8006f96 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f8e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006f96:	7fbb      	ldrb	r3, [r7, #30]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d10b      	bne.n	8006fb4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f043 0206 	orr.w	r2, r3, #6
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	f043 0220 	orr.w	r2, r3, #32
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fc0:	b004      	add	sp, #16
 8006fc2:	4770      	bx	lr

08006fc4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	f023 0201 	bic.w	r2, r3, #1
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	370c      	adds	r7, #12
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b084      	sub	sp, #16
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	460b      	mov	r3, r1
 8006ff0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007002:	78fb      	ldrb	r3, [r7, #3]
 8007004:	2b01      	cmp	r3, #1
 8007006:	d115      	bne.n	8007034 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007014:	200a      	movs	r0, #10
 8007016:	f7fc fc29 	bl	800386c <HAL_Delay>
      ms += 10U;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	330a      	adds	r3, #10
 800701e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 fa25 	bl	8007470 <USB_GetMode>
 8007026:	4603      	mov	r3, r0
 8007028:	2b01      	cmp	r3, #1
 800702a:	d01e      	beq.n	800706a <USB_SetCurrentMode+0x84>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007030:	d9f0      	bls.n	8007014 <USB_SetCurrentMode+0x2e>
 8007032:	e01a      	b.n	800706a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007034:	78fb      	ldrb	r3, [r7, #3]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d115      	bne.n	8007066 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007046:	200a      	movs	r0, #10
 8007048:	f7fc fc10 	bl	800386c <HAL_Delay>
      ms += 10U;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	330a      	adds	r3, #10
 8007050:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 fa0c 	bl	8007470 <USB_GetMode>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d005      	beq.n	800706a <USB_SetCurrentMode+0x84>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2bc7      	cmp	r3, #199	@ 0xc7
 8007062:	d9f0      	bls.n	8007046 <USB_SetCurrentMode+0x60>
 8007064:	e001      	b.n	800706a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e005      	b.n	8007076 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2bc8      	cmp	r3, #200	@ 0xc8
 800706e:	d101      	bne.n	8007074 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	e000      	b.n	8007076 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
	...

08007080 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007080:	b084      	sub	sp, #16
 8007082:	b580      	push	{r7, lr}
 8007084:	b086      	sub	sp, #24
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
 800708a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800708e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007092:	2300      	movs	r3, #0
 8007094:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800709a:	2300      	movs	r3, #0
 800709c:	613b      	str	r3, [r7, #16]
 800709e:	e009      	b.n	80070b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	3340      	adds	r3, #64	@ 0x40
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	4413      	add	r3, r2
 80070aa:	2200      	movs	r2, #0
 80070ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	3301      	adds	r3, #1
 80070b2:	613b      	str	r3, [r7, #16]
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	2b0e      	cmp	r3, #14
 80070b8:	d9f2      	bls.n	80070a0 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80070ba:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d11c      	bne.n	80070fc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070d0:	f043 0302 	orr.w	r3, r3, #2
 80070d4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070da:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	601a      	str	r2, [r3, #0]
 80070fa:	e005      	b.n	8007108 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007100:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800710e:	461a      	mov	r2, r3
 8007110:	2300      	movs	r3, #0
 8007112:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007114:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007118:	2b01      	cmp	r3, #1
 800711a:	d10d      	bne.n	8007138 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800711c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007120:	2b00      	cmp	r3, #0
 8007122:	d104      	bne.n	800712e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007124:	2100      	movs	r1, #0
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f968 	bl	80073fc <USB_SetDevSpeed>
 800712c:	e008      	b.n	8007140 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800712e:	2101      	movs	r1, #1
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 f963 	bl	80073fc <USB_SetDevSpeed>
 8007136:	e003      	b.n	8007140 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007138:	2103      	movs	r1, #3
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 f95e 	bl	80073fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007140:	2110      	movs	r1, #16
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f8fa 	bl	800733c <USB_FlushTxFifo>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d001      	beq.n	8007152 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f924 	bl	80073a0 <USB_FlushRxFifo>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d001      	beq.n	8007162 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007168:	461a      	mov	r2, r3
 800716a:	2300      	movs	r3, #0
 800716c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007174:	461a      	mov	r2, r3
 8007176:	2300      	movs	r3, #0
 8007178:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007180:	461a      	mov	r2, r3
 8007182:	2300      	movs	r3, #0
 8007184:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007186:	2300      	movs	r3, #0
 8007188:	613b      	str	r3, [r7, #16]
 800718a:	e043      	b.n	8007214 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	4413      	add	r3, r2
 8007194:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800719e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071a2:	d118      	bne.n	80071d6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10a      	bne.n	80071c0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	015a      	lsls	r2, r3, #5
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	4413      	add	r3, r2
 80071b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071b6:	461a      	mov	r2, r3
 80071b8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80071bc:	6013      	str	r3, [r2, #0]
 80071be:	e013      	b.n	80071e8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	015a      	lsls	r2, r3, #5
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	4413      	add	r3, r2
 80071c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071cc:	461a      	mov	r2, r3
 80071ce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80071d2:	6013      	str	r3, [r2, #0]
 80071d4:	e008      	b.n	80071e8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	015a      	lsls	r2, r3, #5
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	4413      	add	r3, r2
 80071de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071e2:	461a      	mov	r2, r3
 80071e4:	2300      	movs	r3, #0
 80071e6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	015a      	lsls	r2, r3, #5
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	4413      	add	r3, r2
 80071f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071f4:	461a      	mov	r2, r3
 80071f6:	2300      	movs	r3, #0
 80071f8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	015a      	lsls	r2, r3, #5
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	4413      	add	r3, r2
 8007202:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007206:	461a      	mov	r2, r3
 8007208:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800720c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	3301      	adds	r3, #1
 8007212:	613b      	str	r3, [r7, #16]
 8007214:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007218:	461a      	mov	r2, r3
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	4293      	cmp	r3, r2
 800721e:	d3b5      	bcc.n	800718c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007220:	2300      	movs	r3, #0
 8007222:	613b      	str	r3, [r7, #16]
 8007224:	e043      	b.n	80072ae <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	4413      	add	r3, r2
 800722e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007238:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800723c:	d118      	bne.n	8007270 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10a      	bne.n	800725a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	4413      	add	r3, r2
 800724c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007250:	461a      	mov	r2, r3
 8007252:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007256:	6013      	str	r3, [r2, #0]
 8007258:	e013      	b.n	8007282 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	015a      	lsls	r2, r3, #5
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	4413      	add	r3, r2
 8007262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007266:	461a      	mov	r2, r3
 8007268:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800726c:	6013      	str	r3, [r2, #0]
 800726e:	e008      	b.n	8007282 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	015a      	lsls	r2, r3, #5
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	4413      	add	r3, r2
 8007278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800727c:	461a      	mov	r2, r3
 800727e:	2300      	movs	r3, #0
 8007280:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	015a      	lsls	r2, r3, #5
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	4413      	add	r3, r2
 800728a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800728e:	461a      	mov	r2, r3
 8007290:	2300      	movs	r3, #0
 8007292:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	015a      	lsls	r2, r3, #5
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	4413      	add	r3, r2
 800729c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072a0:	461a      	mov	r2, r3
 80072a2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80072a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	3301      	adds	r3, #1
 80072ac:	613b      	str	r3, [r7, #16]
 80072ae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80072b2:	461a      	mov	r2, r3
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d3b5      	bcc.n	8007226 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072cc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80072da:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80072dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d105      	bne.n	80072f0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	f043 0210 	orr.w	r2, r3, #16
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	699a      	ldr	r2, [r3, #24]
 80072f4:	4b10      	ldr	r3, [pc, #64]	@ (8007338 <USB_DevInit+0x2b8>)
 80072f6:	4313      	orrs	r3, r2
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80072fc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007300:	2b00      	cmp	r3, #0
 8007302:	d005      	beq.n	8007310 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	699b      	ldr	r3, [r3, #24]
 8007308:	f043 0208 	orr.w	r2, r3, #8
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007310:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007314:	2b01      	cmp	r3, #1
 8007316:	d107      	bne.n	8007328 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	699b      	ldr	r3, [r3, #24]
 800731c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007320:	f043 0304 	orr.w	r3, r3, #4
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007328:	7dfb      	ldrb	r3, [r7, #23]
}
 800732a:	4618      	mov	r0, r3
 800732c:	3718      	adds	r7, #24
 800732e:	46bd      	mov	sp, r7
 8007330:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007334:	b004      	add	sp, #16
 8007336:	4770      	bx	lr
 8007338:	803c3800 	.word	0x803c3800

0800733c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800733c:	b480      	push	{r7}
 800733e:	b085      	sub	sp, #20
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007346:	2300      	movs	r3, #0
 8007348:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	3301      	adds	r3, #1
 800734e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007356:	d901      	bls.n	800735c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	e01b      	b.n	8007394 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	2b00      	cmp	r3, #0
 8007362:	daf2      	bge.n	800734a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007364:	2300      	movs	r3, #0
 8007366:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	019b      	lsls	r3, r3, #6
 800736c:	f043 0220 	orr.w	r2, r3, #32
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	3301      	adds	r3, #1
 8007378:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007380:	d901      	bls.n	8007386 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007382:	2303      	movs	r3, #3
 8007384:	e006      	b.n	8007394 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	f003 0320 	and.w	r3, r3, #32
 800738e:	2b20      	cmp	r3, #32
 8007390:	d0f0      	beq.n	8007374 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073a8:	2300      	movs	r3, #0
 80073aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	3301      	adds	r3, #1
 80073b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80073b8:	d901      	bls.n	80073be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80073ba:	2303      	movs	r3, #3
 80073bc:	e018      	b.n	80073f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	daf2      	bge.n	80073ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80073c6:	2300      	movs	r3, #0
 80073c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2210      	movs	r2, #16
 80073ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	3301      	adds	r3, #1
 80073d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80073dc:	d901      	bls.n	80073e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e006      	b.n	80073f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	f003 0310 	and.w	r3, r3, #16
 80073ea:	2b10      	cmp	r3, #16
 80073ec:	d0f0      	beq.n	80073d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3714      	adds	r7, #20
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	460b      	mov	r3, r1
 8007406:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	78fb      	ldrb	r3, [r7, #3]
 8007416:	68f9      	ldr	r1, [r7, #12]
 8007418:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800741c:	4313      	orrs	r3, r2
 800741e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3714      	adds	r7, #20
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr

0800742e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800742e:	b480      	push	{r7}
 8007430:	b085      	sub	sp, #20
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007448:	f023 0303 	bic.w	r3, r3, #3
 800744c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800745c:	f043 0302 	orr.w	r3, r3, #2
 8007460:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3714      	adds	r7, #20
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	695b      	ldr	r3, [r3, #20]
 800747c:	f003 0301 	and.w	r3, r3, #1
}
 8007480:	4618      	mov	r0, r3
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007494:	2300      	movs	r3, #0
 8007496:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	3301      	adds	r3, #1
 800749c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074a4:	d901      	bls.n	80074aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80074a6:	2303      	movs	r3, #3
 80074a8:	e01b      	b.n	80074e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	daf2      	bge.n	8007498 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80074b2:	2300      	movs	r3, #0
 80074b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	f043 0201 	orr.w	r2, r3, #1
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	3301      	adds	r3, #1
 80074c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074ce:	d901      	bls.n	80074d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e006      	b.n	80074e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	691b      	ldr	r3, [r3, #16]
 80074d8:	f003 0301 	and.w	r3, r3, #1
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d0f0      	beq.n	80074c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3714      	adds	r7, #20
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr

080074ee <__cvt>:
 80074ee:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074f2:	ec57 6b10 	vmov	r6, r7, d0
 80074f6:	2f00      	cmp	r7, #0
 80074f8:	460c      	mov	r4, r1
 80074fa:	4619      	mov	r1, r3
 80074fc:	463b      	mov	r3, r7
 80074fe:	bfbb      	ittet	lt
 8007500:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007504:	461f      	movlt	r7, r3
 8007506:	2300      	movge	r3, #0
 8007508:	232d      	movlt	r3, #45	@ 0x2d
 800750a:	700b      	strb	r3, [r1, #0]
 800750c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800750e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007512:	4691      	mov	r9, r2
 8007514:	f023 0820 	bic.w	r8, r3, #32
 8007518:	bfbc      	itt	lt
 800751a:	4632      	movlt	r2, r6
 800751c:	4616      	movlt	r6, r2
 800751e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007522:	d005      	beq.n	8007530 <__cvt+0x42>
 8007524:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007528:	d100      	bne.n	800752c <__cvt+0x3e>
 800752a:	3401      	adds	r4, #1
 800752c:	2102      	movs	r1, #2
 800752e:	e000      	b.n	8007532 <__cvt+0x44>
 8007530:	2103      	movs	r1, #3
 8007532:	ab03      	add	r3, sp, #12
 8007534:	9301      	str	r3, [sp, #4]
 8007536:	ab02      	add	r3, sp, #8
 8007538:	9300      	str	r3, [sp, #0]
 800753a:	ec47 6b10 	vmov	d0, r6, r7
 800753e:	4653      	mov	r3, sl
 8007540:	4622      	mov	r2, r4
 8007542:	f000 fe6d 	bl	8008220 <_dtoa_r>
 8007546:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800754a:	4605      	mov	r5, r0
 800754c:	d119      	bne.n	8007582 <__cvt+0x94>
 800754e:	f019 0f01 	tst.w	r9, #1
 8007552:	d00e      	beq.n	8007572 <__cvt+0x84>
 8007554:	eb00 0904 	add.w	r9, r0, r4
 8007558:	2200      	movs	r2, #0
 800755a:	2300      	movs	r3, #0
 800755c:	4630      	mov	r0, r6
 800755e:	4639      	mov	r1, r7
 8007560:	f7f9 fad2 	bl	8000b08 <__aeabi_dcmpeq>
 8007564:	b108      	cbz	r0, 800756a <__cvt+0x7c>
 8007566:	f8cd 900c 	str.w	r9, [sp, #12]
 800756a:	2230      	movs	r2, #48	@ 0x30
 800756c:	9b03      	ldr	r3, [sp, #12]
 800756e:	454b      	cmp	r3, r9
 8007570:	d31e      	bcc.n	80075b0 <__cvt+0xc2>
 8007572:	9b03      	ldr	r3, [sp, #12]
 8007574:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007576:	1b5b      	subs	r3, r3, r5
 8007578:	4628      	mov	r0, r5
 800757a:	6013      	str	r3, [r2, #0]
 800757c:	b004      	add	sp, #16
 800757e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007582:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007586:	eb00 0904 	add.w	r9, r0, r4
 800758a:	d1e5      	bne.n	8007558 <__cvt+0x6a>
 800758c:	7803      	ldrb	r3, [r0, #0]
 800758e:	2b30      	cmp	r3, #48	@ 0x30
 8007590:	d10a      	bne.n	80075a8 <__cvt+0xba>
 8007592:	2200      	movs	r2, #0
 8007594:	2300      	movs	r3, #0
 8007596:	4630      	mov	r0, r6
 8007598:	4639      	mov	r1, r7
 800759a:	f7f9 fab5 	bl	8000b08 <__aeabi_dcmpeq>
 800759e:	b918      	cbnz	r0, 80075a8 <__cvt+0xba>
 80075a0:	f1c4 0401 	rsb	r4, r4, #1
 80075a4:	f8ca 4000 	str.w	r4, [sl]
 80075a8:	f8da 3000 	ldr.w	r3, [sl]
 80075ac:	4499      	add	r9, r3
 80075ae:	e7d3      	b.n	8007558 <__cvt+0x6a>
 80075b0:	1c59      	adds	r1, r3, #1
 80075b2:	9103      	str	r1, [sp, #12]
 80075b4:	701a      	strb	r2, [r3, #0]
 80075b6:	e7d9      	b.n	800756c <__cvt+0x7e>

080075b8 <__exponent>:
 80075b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075ba:	2900      	cmp	r1, #0
 80075bc:	bfba      	itte	lt
 80075be:	4249      	neglt	r1, r1
 80075c0:	232d      	movlt	r3, #45	@ 0x2d
 80075c2:	232b      	movge	r3, #43	@ 0x2b
 80075c4:	2909      	cmp	r1, #9
 80075c6:	7002      	strb	r2, [r0, #0]
 80075c8:	7043      	strb	r3, [r0, #1]
 80075ca:	dd29      	ble.n	8007620 <__exponent+0x68>
 80075cc:	f10d 0307 	add.w	r3, sp, #7
 80075d0:	461d      	mov	r5, r3
 80075d2:	270a      	movs	r7, #10
 80075d4:	461a      	mov	r2, r3
 80075d6:	fbb1 f6f7 	udiv	r6, r1, r7
 80075da:	fb07 1416 	mls	r4, r7, r6, r1
 80075de:	3430      	adds	r4, #48	@ 0x30
 80075e0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80075e4:	460c      	mov	r4, r1
 80075e6:	2c63      	cmp	r4, #99	@ 0x63
 80075e8:	f103 33ff 	add.w	r3, r3, #4294967295
 80075ec:	4631      	mov	r1, r6
 80075ee:	dcf1      	bgt.n	80075d4 <__exponent+0x1c>
 80075f0:	3130      	adds	r1, #48	@ 0x30
 80075f2:	1e94      	subs	r4, r2, #2
 80075f4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80075f8:	1c41      	adds	r1, r0, #1
 80075fa:	4623      	mov	r3, r4
 80075fc:	42ab      	cmp	r3, r5
 80075fe:	d30a      	bcc.n	8007616 <__exponent+0x5e>
 8007600:	f10d 0309 	add.w	r3, sp, #9
 8007604:	1a9b      	subs	r3, r3, r2
 8007606:	42ac      	cmp	r4, r5
 8007608:	bf88      	it	hi
 800760a:	2300      	movhi	r3, #0
 800760c:	3302      	adds	r3, #2
 800760e:	4403      	add	r3, r0
 8007610:	1a18      	subs	r0, r3, r0
 8007612:	b003      	add	sp, #12
 8007614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007616:	f813 6b01 	ldrb.w	r6, [r3], #1
 800761a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800761e:	e7ed      	b.n	80075fc <__exponent+0x44>
 8007620:	2330      	movs	r3, #48	@ 0x30
 8007622:	3130      	adds	r1, #48	@ 0x30
 8007624:	7083      	strb	r3, [r0, #2]
 8007626:	70c1      	strb	r1, [r0, #3]
 8007628:	1d03      	adds	r3, r0, #4
 800762a:	e7f1      	b.n	8007610 <__exponent+0x58>

0800762c <_printf_float>:
 800762c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007630:	b08d      	sub	sp, #52	@ 0x34
 8007632:	460c      	mov	r4, r1
 8007634:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007638:	4616      	mov	r6, r2
 800763a:	461f      	mov	r7, r3
 800763c:	4605      	mov	r5, r0
 800763e:	f000 fcef 	bl	8008020 <_localeconv_r>
 8007642:	6803      	ldr	r3, [r0, #0]
 8007644:	9304      	str	r3, [sp, #16]
 8007646:	4618      	mov	r0, r3
 8007648:	f7f8 fe32 	bl	80002b0 <strlen>
 800764c:	2300      	movs	r3, #0
 800764e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007650:	f8d8 3000 	ldr.w	r3, [r8]
 8007654:	9005      	str	r0, [sp, #20]
 8007656:	3307      	adds	r3, #7
 8007658:	f023 0307 	bic.w	r3, r3, #7
 800765c:	f103 0208 	add.w	r2, r3, #8
 8007660:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007664:	f8d4 b000 	ldr.w	fp, [r4]
 8007668:	f8c8 2000 	str.w	r2, [r8]
 800766c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007670:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007674:	9307      	str	r3, [sp, #28]
 8007676:	f8cd 8018 	str.w	r8, [sp, #24]
 800767a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800767e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007682:	4b9c      	ldr	r3, [pc, #624]	@ (80078f4 <_printf_float+0x2c8>)
 8007684:	f04f 32ff 	mov.w	r2, #4294967295
 8007688:	f7f9 fa70 	bl	8000b6c <__aeabi_dcmpun>
 800768c:	bb70      	cbnz	r0, 80076ec <_printf_float+0xc0>
 800768e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007692:	4b98      	ldr	r3, [pc, #608]	@ (80078f4 <_printf_float+0x2c8>)
 8007694:	f04f 32ff 	mov.w	r2, #4294967295
 8007698:	f7f9 fa4a 	bl	8000b30 <__aeabi_dcmple>
 800769c:	bb30      	cbnz	r0, 80076ec <_printf_float+0xc0>
 800769e:	2200      	movs	r2, #0
 80076a0:	2300      	movs	r3, #0
 80076a2:	4640      	mov	r0, r8
 80076a4:	4649      	mov	r1, r9
 80076a6:	f7f9 fa39 	bl	8000b1c <__aeabi_dcmplt>
 80076aa:	b110      	cbz	r0, 80076b2 <_printf_float+0x86>
 80076ac:	232d      	movs	r3, #45	@ 0x2d
 80076ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076b2:	4a91      	ldr	r2, [pc, #580]	@ (80078f8 <_printf_float+0x2cc>)
 80076b4:	4b91      	ldr	r3, [pc, #580]	@ (80078fc <_printf_float+0x2d0>)
 80076b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80076ba:	bf94      	ite	ls
 80076bc:	4690      	movls	r8, r2
 80076be:	4698      	movhi	r8, r3
 80076c0:	2303      	movs	r3, #3
 80076c2:	6123      	str	r3, [r4, #16]
 80076c4:	f02b 0304 	bic.w	r3, fp, #4
 80076c8:	6023      	str	r3, [r4, #0]
 80076ca:	f04f 0900 	mov.w	r9, #0
 80076ce:	9700      	str	r7, [sp, #0]
 80076d0:	4633      	mov	r3, r6
 80076d2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80076d4:	4621      	mov	r1, r4
 80076d6:	4628      	mov	r0, r5
 80076d8:	f000 f9d2 	bl	8007a80 <_printf_common>
 80076dc:	3001      	adds	r0, #1
 80076de:	f040 808d 	bne.w	80077fc <_printf_float+0x1d0>
 80076e2:	f04f 30ff 	mov.w	r0, #4294967295
 80076e6:	b00d      	add	sp, #52	@ 0x34
 80076e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ec:	4642      	mov	r2, r8
 80076ee:	464b      	mov	r3, r9
 80076f0:	4640      	mov	r0, r8
 80076f2:	4649      	mov	r1, r9
 80076f4:	f7f9 fa3a 	bl	8000b6c <__aeabi_dcmpun>
 80076f8:	b140      	cbz	r0, 800770c <_printf_float+0xe0>
 80076fa:	464b      	mov	r3, r9
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	bfbc      	itt	lt
 8007700:	232d      	movlt	r3, #45	@ 0x2d
 8007702:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007706:	4a7e      	ldr	r2, [pc, #504]	@ (8007900 <_printf_float+0x2d4>)
 8007708:	4b7e      	ldr	r3, [pc, #504]	@ (8007904 <_printf_float+0x2d8>)
 800770a:	e7d4      	b.n	80076b6 <_printf_float+0x8a>
 800770c:	6863      	ldr	r3, [r4, #4]
 800770e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007712:	9206      	str	r2, [sp, #24]
 8007714:	1c5a      	adds	r2, r3, #1
 8007716:	d13b      	bne.n	8007790 <_printf_float+0x164>
 8007718:	2306      	movs	r3, #6
 800771a:	6063      	str	r3, [r4, #4]
 800771c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007720:	2300      	movs	r3, #0
 8007722:	6022      	str	r2, [r4, #0]
 8007724:	9303      	str	r3, [sp, #12]
 8007726:	ab0a      	add	r3, sp, #40	@ 0x28
 8007728:	e9cd a301 	strd	sl, r3, [sp, #4]
 800772c:	ab09      	add	r3, sp, #36	@ 0x24
 800772e:	9300      	str	r3, [sp, #0]
 8007730:	6861      	ldr	r1, [r4, #4]
 8007732:	ec49 8b10 	vmov	d0, r8, r9
 8007736:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800773a:	4628      	mov	r0, r5
 800773c:	f7ff fed7 	bl	80074ee <__cvt>
 8007740:	9b06      	ldr	r3, [sp, #24]
 8007742:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007744:	2b47      	cmp	r3, #71	@ 0x47
 8007746:	4680      	mov	r8, r0
 8007748:	d129      	bne.n	800779e <_printf_float+0x172>
 800774a:	1cc8      	adds	r0, r1, #3
 800774c:	db02      	blt.n	8007754 <_printf_float+0x128>
 800774e:	6863      	ldr	r3, [r4, #4]
 8007750:	4299      	cmp	r1, r3
 8007752:	dd41      	ble.n	80077d8 <_printf_float+0x1ac>
 8007754:	f1aa 0a02 	sub.w	sl, sl, #2
 8007758:	fa5f fa8a 	uxtb.w	sl, sl
 800775c:	3901      	subs	r1, #1
 800775e:	4652      	mov	r2, sl
 8007760:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007764:	9109      	str	r1, [sp, #36]	@ 0x24
 8007766:	f7ff ff27 	bl	80075b8 <__exponent>
 800776a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800776c:	1813      	adds	r3, r2, r0
 800776e:	2a01      	cmp	r2, #1
 8007770:	4681      	mov	r9, r0
 8007772:	6123      	str	r3, [r4, #16]
 8007774:	dc02      	bgt.n	800777c <_printf_float+0x150>
 8007776:	6822      	ldr	r2, [r4, #0]
 8007778:	07d2      	lsls	r2, r2, #31
 800777a:	d501      	bpl.n	8007780 <_printf_float+0x154>
 800777c:	3301      	adds	r3, #1
 800777e:	6123      	str	r3, [r4, #16]
 8007780:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007784:	2b00      	cmp	r3, #0
 8007786:	d0a2      	beq.n	80076ce <_printf_float+0xa2>
 8007788:	232d      	movs	r3, #45	@ 0x2d
 800778a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800778e:	e79e      	b.n	80076ce <_printf_float+0xa2>
 8007790:	9a06      	ldr	r2, [sp, #24]
 8007792:	2a47      	cmp	r2, #71	@ 0x47
 8007794:	d1c2      	bne.n	800771c <_printf_float+0xf0>
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1c0      	bne.n	800771c <_printf_float+0xf0>
 800779a:	2301      	movs	r3, #1
 800779c:	e7bd      	b.n	800771a <_printf_float+0xee>
 800779e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80077a2:	d9db      	bls.n	800775c <_printf_float+0x130>
 80077a4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80077a8:	d118      	bne.n	80077dc <_printf_float+0x1b0>
 80077aa:	2900      	cmp	r1, #0
 80077ac:	6863      	ldr	r3, [r4, #4]
 80077ae:	dd0b      	ble.n	80077c8 <_printf_float+0x19c>
 80077b0:	6121      	str	r1, [r4, #16]
 80077b2:	b913      	cbnz	r3, 80077ba <_printf_float+0x18e>
 80077b4:	6822      	ldr	r2, [r4, #0]
 80077b6:	07d0      	lsls	r0, r2, #31
 80077b8:	d502      	bpl.n	80077c0 <_printf_float+0x194>
 80077ba:	3301      	adds	r3, #1
 80077bc:	440b      	add	r3, r1
 80077be:	6123      	str	r3, [r4, #16]
 80077c0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80077c2:	f04f 0900 	mov.w	r9, #0
 80077c6:	e7db      	b.n	8007780 <_printf_float+0x154>
 80077c8:	b913      	cbnz	r3, 80077d0 <_printf_float+0x1a4>
 80077ca:	6822      	ldr	r2, [r4, #0]
 80077cc:	07d2      	lsls	r2, r2, #31
 80077ce:	d501      	bpl.n	80077d4 <_printf_float+0x1a8>
 80077d0:	3302      	adds	r3, #2
 80077d2:	e7f4      	b.n	80077be <_printf_float+0x192>
 80077d4:	2301      	movs	r3, #1
 80077d6:	e7f2      	b.n	80077be <_printf_float+0x192>
 80077d8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80077dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077de:	4299      	cmp	r1, r3
 80077e0:	db05      	blt.n	80077ee <_printf_float+0x1c2>
 80077e2:	6823      	ldr	r3, [r4, #0]
 80077e4:	6121      	str	r1, [r4, #16]
 80077e6:	07d8      	lsls	r0, r3, #31
 80077e8:	d5ea      	bpl.n	80077c0 <_printf_float+0x194>
 80077ea:	1c4b      	adds	r3, r1, #1
 80077ec:	e7e7      	b.n	80077be <_printf_float+0x192>
 80077ee:	2900      	cmp	r1, #0
 80077f0:	bfd4      	ite	le
 80077f2:	f1c1 0202 	rsble	r2, r1, #2
 80077f6:	2201      	movgt	r2, #1
 80077f8:	4413      	add	r3, r2
 80077fa:	e7e0      	b.n	80077be <_printf_float+0x192>
 80077fc:	6823      	ldr	r3, [r4, #0]
 80077fe:	055a      	lsls	r2, r3, #21
 8007800:	d407      	bmi.n	8007812 <_printf_float+0x1e6>
 8007802:	6923      	ldr	r3, [r4, #16]
 8007804:	4642      	mov	r2, r8
 8007806:	4631      	mov	r1, r6
 8007808:	4628      	mov	r0, r5
 800780a:	47b8      	blx	r7
 800780c:	3001      	adds	r0, #1
 800780e:	d12b      	bne.n	8007868 <_printf_float+0x23c>
 8007810:	e767      	b.n	80076e2 <_printf_float+0xb6>
 8007812:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007816:	f240 80dd 	bls.w	80079d4 <_printf_float+0x3a8>
 800781a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800781e:	2200      	movs	r2, #0
 8007820:	2300      	movs	r3, #0
 8007822:	f7f9 f971 	bl	8000b08 <__aeabi_dcmpeq>
 8007826:	2800      	cmp	r0, #0
 8007828:	d033      	beq.n	8007892 <_printf_float+0x266>
 800782a:	4a37      	ldr	r2, [pc, #220]	@ (8007908 <_printf_float+0x2dc>)
 800782c:	2301      	movs	r3, #1
 800782e:	4631      	mov	r1, r6
 8007830:	4628      	mov	r0, r5
 8007832:	47b8      	blx	r7
 8007834:	3001      	adds	r0, #1
 8007836:	f43f af54 	beq.w	80076e2 <_printf_float+0xb6>
 800783a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800783e:	4543      	cmp	r3, r8
 8007840:	db02      	blt.n	8007848 <_printf_float+0x21c>
 8007842:	6823      	ldr	r3, [r4, #0]
 8007844:	07d8      	lsls	r0, r3, #31
 8007846:	d50f      	bpl.n	8007868 <_printf_float+0x23c>
 8007848:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800784c:	4631      	mov	r1, r6
 800784e:	4628      	mov	r0, r5
 8007850:	47b8      	blx	r7
 8007852:	3001      	adds	r0, #1
 8007854:	f43f af45 	beq.w	80076e2 <_printf_float+0xb6>
 8007858:	f04f 0900 	mov.w	r9, #0
 800785c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007860:	f104 0a1a 	add.w	sl, r4, #26
 8007864:	45c8      	cmp	r8, r9
 8007866:	dc09      	bgt.n	800787c <_printf_float+0x250>
 8007868:	6823      	ldr	r3, [r4, #0]
 800786a:	079b      	lsls	r3, r3, #30
 800786c:	f100 8103 	bmi.w	8007a76 <_printf_float+0x44a>
 8007870:	68e0      	ldr	r0, [r4, #12]
 8007872:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007874:	4298      	cmp	r0, r3
 8007876:	bfb8      	it	lt
 8007878:	4618      	movlt	r0, r3
 800787a:	e734      	b.n	80076e6 <_printf_float+0xba>
 800787c:	2301      	movs	r3, #1
 800787e:	4652      	mov	r2, sl
 8007880:	4631      	mov	r1, r6
 8007882:	4628      	mov	r0, r5
 8007884:	47b8      	blx	r7
 8007886:	3001      	adds	r0, #1
 8007888:	f43f af2b 	beq.w	80076e2 <_printf_float+0xb6>
 800788c:	f109 0901 	add.w	r9, r9, #1
 8007890:	e7e8      	b.n	8007864 <_printf_float+0x238>
 8007892:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007894:	2b00      	cmp	r3, #0
 8007896:	dc39      	bgt.n	800790c <_printf_float+0x2e0>
 8007898:	4a1b      	ldr	r2, [pc, #108]	@ (8007908 <_printf_float+0x2dc>)
 800789a:	2301      	movs	r3, #1
 800789c:	4631      	mov	r1, r6
 800789e:	4628      	mov	r0, r5
 80078a0:	47b8      	blx	r7
 80078a2:	3001      	adds	r0, #1
 80078a4:	f43f af1d 	beq.w	80076e2 <_printf_float+0xb6>
 80078a8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80078ac:	ea59 0303 	orrs.w	r3, r9, r3
 80078b0:	d102      	bne.n	80078b8 <_printf_float+0x28c>
 80078b2:	6823      	ldr	r3, [r4, #0]
 80078b4:	07d9      	lsls	r1, r3, #31
 80078b6:	d5d7      	bpl.n	8007868 <_printf_float+0x23c>
 80078b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078bc:	4631      	mov	r1, r6
 80078be:	4628      	mov	r0, r5
 80078c0:	47b8      	blx	r7
 80078c2:	3001      	adds	r0, #1
 80078c4:	f43f af0d 	beq.w	80076e2 <_printf_float+0xb6>
 80078c8:	f04f 0a00 	mov.w	sl, #0
 80078cc:	f104 0b1a 	add.w	fp, r4, #26
 80078d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078d2:	425b      	negs	r3, r3
 80078d4:	4553      	cmp	r3, sl
 80078d6:	dc01      	bgt.n	80078dc <_printf_float+0x2b0>
 80078d8:	464b      	mov	r3, r9
 80078da:	e793      	b.n	8007804 <_printf_float+0x1d8>
 80078dc:	2301      	movs	r3, #1
 80078de:	465a      	mov	r2, fp
 80078e0:	4631      	mov	r1, r6
 80078e2:	4628      	mov	r0, r5
 80078e4:	47b8      	blx	r7
 80078e6:	3001      	adds	r0, #1
 80078e8:	f43f aefb 	beq.w	80076e2 <_printf_float+0xb6>
 80078ec:	f10a 0a01 	add.w	sl, sl, #1
 80078f0:	e7ee      	b.n	80078d0 <_printf_float+0x2a4>
 80078f2:	bf00      	nop
 80078f4:	7fefffff 	.word	0x7fefffff
 80078f8:	0800c300 	.word	0x0800c300
 80078fc:	0800c304 	.word	0x0800c304
 8007900:	0800c308 	.word	0x0800c308
 8007904:	0800c30c 	.word	0x0800c30c
 8007908:	0800c310 	.word	0x0800c310
 800790c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800790e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007912:	4553      	cmp	r3, sl
 8007914:	bfa8      	it	ge
 8007916:	4653      	movge	r3, sl
 8007918:	2b00      	cmp	r3, #0
 800791a:	4699      	mov	r9, r3
 800791c:	dc36      	bgt.n	800798c <_printf_float+0x360>
 800791e:	f04f 0b00 	mov.w	fp, #0
 8007922:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007926:	f104 021a 	add.w	r2, r4, #26
 800792a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800792c:	9306      	str	r3, [sp, #24]
 800792e:	eba3 0309 	sub.w	r3, r3, r9
 8007932:	455b      	cmp	r3, fp
 8007934:	dc31      	bgt.n	800799a <_printf_float+0x36e>
 8007936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007938:	459a      	cmp	sl, r3
 800793a:	dc3a      	bgt.n	80079b2 <_printf_float+0x386>
 800793c:	6823      	ldr	r3, [r4, #0]
 800793e:	07da      	lsls	r2, r3, #31
 8007940:	d437      	bmi.n	80079b2 <_printf_float+0x386>
 8007942:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007944:	ebaa 0903 	sub.w	r9, sl, r3
 8007948:	9b06      	ldr	r3, [sp, #24]
 800794a:	ebaa 0303 	sub.w	r3, sl, r3
 800794e:	4599      	cmp	r9, r3
 8007950:	bfa8      	it	ge
 8007952:	4699      	movge	r9, r3
 8007954:	f1b9 0f00 	cmp.w	r9, #0
 8007958:	dc33      	bgt.n	80079c2 <_printf_float+0x396>
 800795a:	f04f 0800 	mov.w	r8, #0
 800795e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007962:	f104 0b1a 	add.w	fp, r4, #26
 8007966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007968:	ebaa 0303 	sub.w	r3, sl, r3
 800796c:	eba3 0309 	sub.w	r3, r3, r9
 8007970:	4543      	cmp	r3, r8
 8007972:	f77f af79 	ble.w	8007868 <_printf_float+0x23c>
 8007976:	2301      	movs	r3, #1
 8007978:	465a      	mov	r2, fp
 800797a:	4631      	mov	r1, r6
 800797c:	4628      	mov	r0, r5
 800797e:	47b8      	blx	r7
 8007980:	3001      	adds	r0, #1
 8007982:	f43f aeae 	beq.w	80076e2 <_printf_float+0xb6>
 8007986:	f108 0801 	add.w	r8, r8, #1
 800798a:	e7ec      	b.n	8007966 <_printf_float+0x33a>
 800798c:	4642      	mov	r2, r8
 800798e:	4631      	mov	r1, r6
 8007990:	4628      	mov	r0, r5
 8007992:	47b8      	blx	r7
 8007994:	3001      	adds	r0, #1
 8007996:	d1c2      	bne.n	800791e <_printf_float+0x2f2>
 8007998:	e6a3      	b.n	80076e2 <_printf_float+0xb6>
 800799a:	2301      	movs	r3, #1
 800799c:	4631      	mov	r1, r6
 800799e:	4628      	mov	r0, r5
 80079a0:	9206      	str	r2, [sp, #24]
 80079a2:	47b8      	blx	r7
 80079a4:	3001      	adds	r0, #1
 80079a6:	f43f ae9c 	beq.w	80076e2 <_printf_float+0xb6>
 80079aa:	9a06      	ldr	r2, [sp, #24]
 80079ac:	f10b 0b01 	add.w	fp, fp, #1
 80079b0:	e7bb      	b.n	800792a <_printf_float+0x2fe>
 80079b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079b6:	4631      	mov	r1, r6
 80079b8:	4628      	mov	r0, r5
 80079ba:	47b8      	blx	r7
 80079bc:	3001      	adds	r0, #1
 80079be:	d1c0      	bne.n	8007942 <_printf_float+0x316>
 80079c0:	e68f      	b.n	80076e2 <_printf_float+0xb6>
 80079c2:	9a06      	ldr	r2, [sp, #24]
 80079c4:	464b      	mov	r3, r9
 80079c6:	4442      	add	r2, r8
 80079c8:	4631      	mov	r1, r6
 80079ca:	4628      	mov	r0, r5
 80079cc:	47b8      	blx	r7
 80079ce:	3001      	adds	r0, #1
 80079d0:	d1c3      	bne.n	800795a <_printf_float+0x32e>
 80079d2:	e686      	b.n	80076e2 <_printf_float+0xb6>
 80079d4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80079d8:	f1ba 0f01 	cmp.w	sl, #1
 80079dc:	dc01      	bgt.n	80079e2 <_printf_float+0x3b6>
 80079de:	07db      	lsls	r3, r3, #31
 80079e0:	d536      	bpl.n	8007a50 <_printf_float+0x424>
 80079e2:	2301      	movs	r3, #1
 80079e4:	4642      	mov	r2, r8
 80079e6:	4631      	mov	r1, r6
 80079e8:	4628      	mov	r0, r5
 80079ea:	47b8      	blx	r7
 80079ec:	3001      	adds	r0, #1
 80079ee:	f43f ae78 	beq.w	80076e2 <_printf_float+0xb6>
 80079f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079f6:	4631      	mov	r1, r6
 80079f8:	4628      	mov	r0, r5
 80079fa:	47b8      	blx	r7
 80079fc:	3001      	adds	r0, #1
 80079fe:	f43f ae70 	beq.w	80076e2 <_printf_float+0xb6>
 8007a02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007a06:	2200      	movs	r2, #0
 8007a08:	2300      	movs	r3, #0
 8007a0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a0e:	f7f9 f87b 	bl	8000b08 <__aeabi_dcmpeq>
 8007a12:	b9c0      	cbnz	r0, 8007a46 <_printf_float+0x41a>
 8007a14:	4653      	mov	r3, sl
 8007a16:	f108 0201 	add.w	r2, r8, #1
 8007a1a:	4631      	mov	r1, r6
 8007a1c:	4628      	mov	r0, r5
 8007a1e:	47b8      	blx	r7
 8007a20:	3001      	adds	r0, #1
 8007a22:	d10c      	bne.n	8007a3e <_printf_float+0x412>
 8007a24:	e65d      	b.n	80076e2 <_printf_float+0xb6>
 8007a26:	2301      	movs	r3, #1
 8007a28:	465a      	mov	r2, fp
 8007a2a:	4631      	mov	r1, r6
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	47b8      	blx	r7
 8007a30:	3001      	adds	r0, #1
 8007a32:	f43f ae56 	beq.w	80076e2 <_printf_float+0xb6>
 8007a36:	f108 0801 	add.w	r8, r8, #1
 8007a3a:	45d0      	cmp	r8, sl
 8007a3c:	dbf3      	blt.n	8007a26 <_printf_float+0x3fa>
 8007a3e:	464b      	mov	r3, r9
 8007a40:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007a44:	e6df      	b.n	8007806 <_printf_float+0x1da>
 8007a46:	f04f 0800 	mov.w	r8, #0
 8007a4a:	f104 0b1a 	add.w	fp, r4, #26
 8007a4e:	e7f4      	b.n	8007a3a <_printf_float+0x40e>
 8007a50:	2301      	movs	r3, #1
 8007a52:	4642      	mov	r2, r8
 8007a54:	e7e1      	b.n	8007a1a <_printf_float+0x3ee>
 8007a56:	2301      	movs	r3, #1
 8007a58:	464a      	mov	r2, r9
 8007a5a:	4631      	mov	r1, r6
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	47b8      	blx	r7
 8007a60:	3001      	adds	r0, #1
 8007a62:	f43f ae3e 	beq.w	80076e2 <_printf_float+0xb6>
 8007a66:	f108 0801 	add.w	r8, r8, #1
 8007a6a:	68e3      	ldr	r3, [r4, #12]
 8007a6c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a6e:	1a5b      	subs	r3, r3, r1
 8007a70:	4543      	cmp	r3, r8
 8007a72:	dcf0      	bgt.n	8007a56 <_printf_float+0x42a>
 8007a74:	e6fc      	b.n	8007870 <_printf_float+0x244>
 8007a76:	f04f 0800 	mov.w	r8, #0
 8007a7a:	f104 0919 	add.w	r9, r4, #25
 8007a7e:	e7f4      	b.n	8007a6a <_printf_float+0x43e>

08007a80 <_printf_common>:
 8007a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a84:	4616      	mov	r6, r2
 8007a86:	4698      	mov	r8, r3
 8007a88:	688a      	ldr	r2, [r1, #8]
 8007a8a:	690b      	ldr	r3, [r1, #16]
 8007a8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a90:	4293      	cmp	r3, r2
 8007a92:	bfb8      	it	lt
 8007a94:	4613      	movlt	r3, r2
 8007a96:	6033      	str	r3, [r6, #0]
 8007a98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007a9c:	4607      	mov	r7, r0
 8007a9e:	460c      	mov	r4, r1
 8007aa0:	b10a      	cbz	r2, 8007aa6 <_printf_common+0x26>
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	6033      	str	r3, [r6, #0]
 8007aa6:	6823      	ldr	r3, [r4, #0]
 8007aa8:	0699      	lsls	r1, r3, #26
 8007aaa:	bf42      	ittt	mi
 8007aac:	6833      	ldrmi	r3, [r6, #0]
 8007aae:	3302      	addmi	r3, #2
 8007ab0:	6033      	strmi	r3, [r6, #0]
 8007ab2:	6825      	ldr	r5, [r4, #0]
 8007ab4:	f015 0506 	ands.w	r5, r5, #6
 8007ab8:	d106      	bne.n	8007ac8 <_printf_common+0x48>
 8007aba:	f104 0a19 	add.w	sl, r4, #25
 8007abe:	68e3      	ldr	r3, [r4, #12]
 8007ac0:	6832      	ldr	r2, [r6, #0]
 8007ac2:	1a9b      	subs	r3, r3, r2
 8007ac4:	42ab      	cmp	r3, r5
 8007ac6:	dc26      	bgt.n	8007b16 <_printf_common+0x96>
 8007ac8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007acc:	6822      	ldr	r2, [r4, #0]
 8007ace:	3b00      	subs	r3, #0
 8007ad0:	bf18      	it	ne
 8007ad2:	2301      	movne	r3, #1
 8007ad4:	0692      	lsls	r2, r2, #26
 8007ad6:	d42b      	bmi.n	8007b30 <_printf_common+0xb0>
 8007ad8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007adc:	4641      	mov	r1, r8
 8007ade:	4638      	mov	r0, r7
 8007ae0:	47c8      	blx	r9
 8007ae2:	3001      	adds	r0, #1
 8007ae4:	d01e      	beq.n	8007b24 <_printf_common+0xa4>
 8007ae6:	6823      	ldr	r3, [r4, #0]
 8007ae8:	6922      	ldr	r2, [r4, #16]
 8007aea:	f003 0306 	and.w	r3, r3, #6
 8007aee:	2b04      	cmp	r3, #4
 8007af0:	bf02      	ittt	eq
 8007af2:	68e5      	ldreq	r5, [r4, #12]
 8007af4:	6833      	ldreq	r3, [r6, #0]
 8007af6:	1aed      	subeq	r5, r5, r3
 8007af8:	68a3      	ldr	r3, [r4, #8]
 8007afa:	bf0c      	ite	eq
 8007afc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b00:	2500      	movne	r5, #0
 8007b02:	4293      	cmp	r3, r2
 8007b04:	bfc4      	itt	gt
 8007b06:	1a9b      	subgt	r3, r3, r2
 8007b08:	18ed      	addgt	r5, r5, r3
 8007b0a:	2600      	movs	r6, #0
 8007b0c:	341a      	adds	r4, #26
 8007b0e:	42b5      	cmp	r5, r6
 8007b10:	d11a      	bne.n	8007b48 <_printf_common+0xc8>
 8007b12:	2000      	movs	r0, #0
 8007b14:	e008      	b.n	8007b28 <_printf_common+0xa8>
 8007b16:	2301      	movs	r3, #1
 8007b18:	4652      	mov	r2, sl
 8007b1a:	4641      	mov	r1, r8
 8007b1c:	4638      	mov	r0, r7
 8007b1e:	47c8      	blx	r9
 8007b20:	3001      	adds	r0, #1
 8007b22:	d103      	bne.n	8007b2c <_printf_common+0xac>
 8007b24:	f04f 30ff 	mov.w	r0, #4294967295
 8007b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b2c:	3501      	adds	r5, #1
 8007b2e:	e7c6      	b.n	8007abe <_printf_common+0x3e>
 8007b30:	18e1      	adds	r1, r4, r3
 8007b32:	1c5a      	adds	r2, r3, #1
 8007b34:	2030      	movs	r0, #48	@ 0x30
 8007b36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007b3a:	4422      	add	r2, r4
 8007b3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007b40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007b44:	3302      	adds	r3, #2
 8007b46:	e7c7      	b.n	8007ad8 <_printf_common+0x58>
 8007b48:	2301      	movs	r3, #1
 8007b4a:	4622      	mov	r2, r4
 8007b4c:	4641      	mov	r1, r8
 8007b4e:	4638      	mov	r0, r7
 8007b50:	47c8      	blx	r9
 8007b52:	3001      	adds	r0, #1
 8007b54:	d0e6      	beq.n	8007b24 <_printf_common+0xa4>
 8007b56:	3601      	adds	r6, #1
 8007b58:	e7d9      	b.n	8007b0e <_printf_common+0x8e>
	...

08007b5c <_printf_i>:
 8007b5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b60:	7e0f      	ldrb	r7, [r1, #24]
 8007b62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007b64:	2f78      	cmp	r7, #120	@ 0x78
 8007b66:	4691      	mov	r9, r2
 8007b68:	4680      	mov	r8, r0
 8007b6a:	460c      	mov	r4, r1
 8007b6c:	469a      	mov	sl, r3
 8007b6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007b72:	d807      	bhi.n	8007b84 <_printf_i+0x28>
 8007b74:	2f62      	cmp	r7, #98	@ 0x62
 8007b76:	d80a      	bhi.n	8007b8e <_printf_i+0x32>
 8007b78:	2f00      	cmp	r7, #0
 8007b7a:	f000 80d2 	beq.w	8007d22 <_printf_i+0x1c6>
 8007b7e:	2f58      	cmp	r7, #88	@ 0x58
 8007b80:	f000 80b9 	beq.w	8007cf6 <_printf_i+0x19a>
 8007b84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007b8c:	e03a      	b.n	8007c04 <_printf_i+0xa8>
 8007b8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007b92:	2b15      	cmp	r3, #21
 8007b94:	d8f6      	bhi.n	8007b84 <_printf_i+0x28>
 8007b96:	a101      	add	r1, pc, #4	@ (adr r1, 8007b9c <_printf_i+0x40>)
 8007b98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b9c:	08007bf5 	.word	0x08007bf5
 8007ba0:	08007c09 	.word	0x08007c09
 8007ba4:	08007b85 	.word	0x08007b85
 8007ba8:	08007b85 	.word	0x08007b85
 8007bac:	08007b85 	.word	0x08007b85
 8007bb0:	08007b85 	.word	0x08007b85
 8007bb4:	08007c09 	.word	0x08007c09
 8007bb8:	08007b85 	.word	0x08007b85
 8007bbc:	08007b85 	.word	0x08007b85
 8007bc0:	08007b85 	.word	0x08007b85
 8007bc4:	08007b85 	.word	0x08007b85
 8007bc8:	08007d09 	.word	0x08007d09
 8007bcc:	08007c33 	.word	0x08007c33
 8007bd0:	08007cc3 	.word	0x08007cc3
 8007bd4:	08007b85 	.word	0x08007b85
 8007bd8:	08007b85 	.word	0x08007b85
 8007bdc:	08007d2b 	.word	0x08007d2b
 8007be0:	08007b85 	.word	0x08007b85
 8007be4:	08007c33 	.word	0x08007c33
 8007be8:	08007b85 	.word	0x08007b85
 8007bec:	08007b85 	.word	0x08007b85
 8007bf0:	08007ccb 	.word	0x08007ccb
 8007bf4:	6833      	ldr	r3, [r6, #0]
 8007bf6:	1d1a      	adds	r2, r3, #4
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	6032      	str	r2, [r6, #0]
 8007bfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007c04:	2301      	movs	r3, #1
 8007c06:	e09d      	b.n	8007d44 <_printf_i+0x1e8>
 8007c08:	6833      	ldr	r3, [r6, #0]
 8007c0a:	6820      	ldr	r0, [r4, #0]
 8007c0c:	1d19      	adds	r1, r3, #4
 8007c0e:	6031      	str	r1, [r6, #0]
 8007c10:	0606      	lsls	r6, r0, #24
 8007c12:	d501      	bpl.n	8007c18 <_printf_i+0xbc>
 8007c14:	681d      	ldr	r5, [r3, #0]
 8007c16:	e003      	b.n	8007c20 <_printf_i+0xc4>
 8007c18:	0645      	lsls	r5, r0, #25
 8007c1a:	d5fb      	bpl.n	8007c14 <_printf_i+0xb8>
 8007c1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007c20:	2d00      	cmp	r5, #0
 8007c22:	da03      	bge.n	8007c2c <_printf_i+0xd0>
 8007c24:	232d      	movs	r3, #45	@ 0x2d
 8007c26:	426d      	negs	r5, r5
 8007c28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c2c:	4859      	ldr	r0, [pc, #356]	@ (8007d94 <_printf_i+0x238>)
 8007c2e:	230a      	movs	r3, #10
 8007c30:	e011      	b.n	8007c56 <_printf_i+0xfa>
 8007c32:	6821      	ldr	r1, [r4, #0]
 8007c34:	6833      	ldr	r3, [r6, #0]
 8007c36:	0608      	lsls	r0, r1, #24
 8007c38:	f853 5b04 	ldr.w	r5, [r3], #4
 8007c3c:	d402      	bmi.n	8007c44 <_printf_i+0xe8>
 8007c3e:	0649      	lsls	r1, r1, #25
 8007c40:	bf48      	it	mi
 8007c42:	b2ad      	uxthmi	r5, r5
 8007c44:	2f6f      	cmp	r7, #111	@ 0x6f
 8007c46:	4853      	ldr	r0, [pc, #332]	@ (8007d94 <_printf_i+0x238>)
 8007c48:	6033      	str	r3, [r6, #0]
 8007c4a:	bf14      	ite	ne
 8007c4c:	230a      	movne	r3, #10
 8007c4e:	2308      	moveq	r3, #8
 8007c50:	2100      	movs	r1, #0
 8007c52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007c56:	6866      	ldr	r6, [r4, #4]
 8007c58:	60a6      	str	r6, [r4, #8]
 8007c5a:	2e00      	cmp	r6, #0
 8007c5c:	bfa2      	ittt	ge
 8007c5e:	6821      	ldrge	r1, [r4, #0]
 8007c60:	f021 0104 	bicge.w	r1, r1, #4
 8007c64:	6021      	strge	r1, [r4, #0]
 8007c66:	b90d      	cbnz	r5, 8007c6c <_printf_i+0x110>
 8007c68:	2e00      	cmp	r6, #0
 8007c6a:	d04b      	beq.n	8007d04 <_printf_i+0x1a8>
 8007c6c:	4616      	mov	r6, r2
 8007c6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c72:	fb03 5711 	mls	r7, r3, r1, r5
 8007c76:	5dc7      	ldrb	r7, [r0, r7]
 8007c78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c7c:	462f      	mov	r7, r5
 8007c7e:	42bb      	cmp	r3, r7
 8007c80:	460d      	mov	r5, r1
 8007c82:	d9f4      	bls.n	8007c6e <_printf_i+0x112>
 8007c84:	2b08      	cmp	r3, #8
 8007c86:	d10b      	bne.n	8007ca0 <_printf_i+0x144>
 8007c88:	6823      	ldr	r3, [r4, #0]
 8007c8a:	07df      	lsls	r7, r3, #31
 8007c8c:	d508      	bpl.n	8007ca0 <_printf_i+0x144>
 8007c8e:	6923      	ldr	r3, [r4, #16]
 8007c90:	6861      	ldr	r1, [r4, #4]
 8007c92:	4299      	cmp	r1, r3
 8007c94:	bfde      	ittt	le
 8007c96:	2330      	movle	r3, #48	@ 0x30
 8007c98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ca0:	1b92      	subs	r2, r2, r6
 8007ca2:	6122      	str	r2, [r4, #16]
 8007ca4:	f8cd a000 	str.w	sl, [sp]
 8007ca8:	464b      	mov	r3, r9
 8007caa:	aa03      	add	r2, sp, #12
 8007cac:	4621      	mov	r1, r4
 8007cae:	4640      	mov	r0, r8
 8007cb0:	f7ff fee6 	bl	8007a80 <_printf_common>
 8007cb4:	3001      	adds	r0, #1
 8007cb6:	d14a      	bne.n	8007d4e <_printf_i+0x1f2>
 8007cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cbc:	b004      	add	sp, #16
 8007cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cc2:	6823      	ldr	r3, [r4, #0]
 8007cc4:	f043 0320 	orr.w	r3, r3, #32
 8007cc8:	6023      	str	r3, [r4, #0]
 8007cca:	4833      	ldr	r0, [pc, #204]	@ (8007d98 <_printf_i+0x23c>)
 8007ccc:	2778      	movs	r7, #120	@ 0x78
 8007cce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007cd2:	6823      	ldr	r3, [r4, #0]
 8007cd4:	6831      	ldr	r1, [r6, #0]
 8007cd6:	061f      	lsls	r7, r3, #24
 8007cd8:	f851 5b04 	ldr.w	r5, [r1], #4
 8007cdc:	d402      	bmi.n	8007ce4 <_printf_i+0x188>
 8007cde:	065f      	lsls	r7, r3, #25
 8007ce0:	bf48      	it	mi
 8007ce2:	b2ad      	uxthmi	r5, r5
 8007ce4:	6031      	str	r1, [r6, #0]
 8007ce6:	07d9      	lsls	r1, r3, #31
 8007ce8:	bf44      	itt	mi
 8007cea:	f043 0320 	orrmi.w	r3, r3, #32
 8007cee:	6023      	strmi	r3, [r4, #0]
 8007cf0:	b11d      	cbz	r5, 8007cfa <_printf_i+0x19e>
 8007cf2:	2310      	movs	r3, #16
 8007cf4:	e7ac      	b.n	8007c50 <_printf_i+0xf4>
 8007cf6:	4827      	ldr	r0, [pc, #156]	@ (8007d94 <_printf_i+0x238>)
 8007cf8:	e7e9      	b.n	8007cce <_printf_i+0x172>
 8007cfa:	6823      	ldr	r3, [r4, #0]
 8007cfc:	f023 0320 	bic.w	r3, r3, #32
 8007d00:	6023      	str	r3, [r4, #0]
 8007d02:	e7f6      	b.n	8007cf2 <_printf_i+0x196>
 8007d04:	4616      	mov	r6, r2
 8007d06:	e7bd      	b.n	8007c84 <_printf_i+0x128>
 8007d08:	6833      	ldr	r3, [r6, #0]
 8007d0a:	6825      	ldr	r5, [r4, #0]
 8007d0c:	6961      	ldr	r1, [r4, #20]
 8007d0e:	1d18      	adds	r0, r3, #4
 8007d10:	6030      	str	r0, [r6, #0]
 8007d12:	062e      	lsls	r6, r5, #24
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	d501      	bpl.n	8007d1c <_printf_i+0x1c0>
 8007d18:	6019      	str	r1, [r3, #0]
 8007d1a:	e002      	b.n	8007d22 <_printf_i+0x1c6>
 8007d1c:	0668      	lsls	r0, r5, #25
 8007d1e:	d5fb      	bpl.n	8007d18 <_printf_i+0x1bc>
 8007d20:	8019      	strh	r1, [r3, #0]
 8007d22:	2300      	movs	r3, #0
 8007d24:	6123      	str	r3, [r4, #16]
 8007d26:	4616      	mov	r6, r2
 8007d28:	e7bc      	b.n	8007ca4 <_printf_i+0x148>
 8007d2a:	6833      	ldr	r3, [r6, #0]
 8007d2c:	1d1a      	adds	r2, r3, #4
 8007d2e:	6032      	str	r2, [r6, #0]
 8007d30:	681e      	ldr	r6, [r3, #0]
 8007d32:	6862      	ldr	r2, [r4, #4]
 8007d34:	2100      	movs	r1, #0
 8007d36:	4630      	mov	r0, r6
 8007d38:	f7f8 fa6a 	bl	8000210 <memchr>
 8007d3c:	b108      	cbz	r0, 8007d42 <_printf_i+0x1e6>
 8007d3e:	1b80      	subs	r0, r0, r6
 8007d40:	6060      	str	r0, [r4, #4]
 8007d42:	6863      	ldr	r3, [r4, #4]
 8007d44:	6123      	str	r3, [r4, #16]
 8007d46:	2300      	movs	r3, #0
 8007d48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d4c:	e7aa      	b.n	8007ca4 <_printf_i+0x148>
 8007d4e:	6923      	ldr	r3, [r4, #16]
 8007d50:	4632      	mov	r2, r6
 8007d52:	4649      	mov	r1, r9
 8007d54:	4640      	mov	r0, r8
 8007d56:	47d0      	blx	sl
 8007d58:	3001      	adds	r0, #1
 8007d5a:	d0ad      	beq.n	8007cb8 <_printf_i+0x15c>
 8007d5c:	6823      	ldr	r3, [r4, #0]
 8007d5e:	079b      	lsls	r3, r3, #30
 8007d60:	d413      	bmi.n	8007d8a <_printf_i+0x22e>
 8007d62:	68e0      	ldr	r0, [r4, #12]
 8007d64:	9b03      	ldr	r3, [sp, #12]
 8007d66:	4298      	cmp	r0, r3
 8007d68:	bfb8      	it	lt
 8007d6a:	4618      	movlt	r0, r3
 8007d6c:	e7a6      	b.n	8007cbc <_printf_i+0x160>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	4632      	mov	r2, r6
 8007d72:	4649      	mov	r1, r9
 8007d74:	4640      	mov	r0, r8
 8007d76:	47d0      	blx	sl
 8007d78:	3001      	adds	r0, #1
 8007d7a:	d09d      	beq.n	8007cb8 <_printf_i+0x15c>
 8007d7c:	3501      	adds	r5, #1
 8007d7e:	68e3      	ldr	r3, [r4, #12]
 8007d80:	9903      	ldr	r1, [sp, #12]
 8007d82:	1a5b      	subs	r3, r3, r1
 8007d84:	42ab      	cmp	r3, r5
 8007d86:	dcf2      	bgt.n	8007d6e <_printf_i+0x212>
 8007d88:	e7eb      	b.n	8007d62 <_printf_i+0x206>
 8007d8a:	2500      	movs	r5, #0
 8007d8c:	f104 0619 	add.w	r6, r4, #25
 8007d90:	e7f5      	b.n	8007d7e <_printf_i+0x222>
 8007d92:	bf00      	nop
 8007d94:	0800c312 	.word	0x0800c312
 8007d98:	0800c323 	.word	0x0800c323

08007d9c <std>:
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	b510      	push	{r4, lr}
 8007da0:	4604      	mov	r4, r0
 8007da2:	e9c0 3300 	strd	r3, r3, [r0]
 8007da6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007daa:	6083      	str	r3, [r0, #8]
 8007dac:	8181      	strh	r1, [r0, #12]
 8007dae:	6643      	str	r3, [r0, #100]	@ 0x64
 8007db0:	81c2      	strh	r2, [r0, #14]
 8007db2:	6183      	str	r3, [r0, #24]
 8007db4:	4619      	mov	r1, r3
 8007db6:	2208      	movs	r2, #8
 8007db8:	305c      	adds	r0, #92	@ 0x5c
 8007dba:	f000 f928 	bl	800800e <memset>
 8007dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8007df4 <std+0x58>)
 8007dc0:	6263      	str	r3, [r4, #36]	@ 0x24
 8007dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8007df8 <std+0x5c>)
 8007dc4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8007dfc <std+0x60>)
 8007dc8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007dca:	4b0d      	ldr	r3, [pc, #52]	@ (8007e00 <std+0x64>)
 8007dcc:	6323      	str	r3, [r4, #48]	@ 0x30
 8007dce:	4b0d      	ldr	r3, [pc, #52]	@ (8007e04 <std+0x68>)
 8007dd0:	6224      	str	r4, [r4, #32]
 8007dd2:	429c      	cmp	r4, r3
 8007dd4:	d006      	beq.n	8007de4 <std+0x48>
 8007dd6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007dda:	4294      	cmp	r4, r2
 8007ddc:	d002      	beq.n	8007de4 <std+0x48>
 8007dde:	33d0      	adds	r3, #208	@ 0xd0
 8007de0:	429c      	cmp	r4, r3
 8007de2:	d105      	bne.n	8007df0 <std+0x54>
 8007de4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dec:	f000 b98c 	b.w	8008108 <__retarget_lock_init_recursive>
 8007df0:	bd10      	pop	{r4, pc}
 8007df2:	bf00      	nop
 8007df4:	08007f89 	.word	0x08007f89
 8007df8:	08007fab 	.word	0x08007fab
 8007dfc:	08007fe3 	.word	0x08007fe3
 8007e00:	08008007 	.word	0x08008007
 8007e04:	20000880 	.word	0x20000880

08007e08 <stdio_exit_handler>:
 8007e08:	4a02      	ldr	r2, [pc, #8]	@ (8007e14 <stdio_exit_handler+0xc>)
 8007e0a:	4903      	ldr	r1, [pc, #12]	@ (8007e18 <stdio_exit_handler+0x10>)
 8007e0c:	4803      	ldr	r0, [pc, #12]	@ (8007e1c <stdio_exit_handler+0x14>)
 8007e0e:	f000 b869 	b.w	8007ee4 <_fwalk_sglue>
 8007e12:	bf00      	nop
 8007e14:	20000018 	.word	0x20000018
 8007e18:	08009a65 	.word	0x08009a65
 8007e1c:	20000028 	.word	0x20000028

08007e20 <cleanup_stdio>:
 8007e20:	6841      	ldr	r1, [r0, #4]
 8007e22:	4b0c      	ldr	r3, [pc, #48]	@ (8007e54 <cleanup_stdio+0x34>)
 8007e24:	4299      	cmp	r1, r3
 8007e26:	b510      	push	{r4, lr}
 8007e28:	4604      	mov	r4, r0
 8007e2a:	d001      	beq.n	8007e30 <cleanup_stdio+0x10>
 8007e2c:	f001 fe1a 	bl	8009a64 <_fflush_r>
 8007e30:	68a1      	ldr	r1, [r4, #8]
 8007e32:	4b09      	ldr	r3, [pc, #36]	@ (8007e58 <cleanup_stdio+0x38>)
 8007e34:	4299      	cmp	r1, r3
 8007e36:	d002      	beq.n	8007e3e <cleanup_stdio+0x1e>
 8007e38:	4620      	mov	r0, r4
 8007e3a:	f001 fe13 	bl	8009a64 <_fflush_r>
 8007e3e:	68e1      	ldr	r1, [r4, #12]
 8007e40:	4b06      	ldr	r3, [pc, #24]	@ (8007e5c <cleanup_stdio+0x3c>)
 8007e42:	4299      	cmp	r1, r3
 8007e44:	d004      	beq.n	8007e50 <cleanup_stdio+0x30>
 8007e46:	4620      	mov	r0, r4
 8007e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e4c:	f001 be0a 	b.w	8009a64 <_fflush_r>
 8007e50:	bd10      	pop	{r4, pc}
 8007e52:	bf00      	nop
 8007e54:	20000880 	.word	0x20000880
 8007e58:	200008e8 	.word	0x200008e8
 8007e5c:	20000950 	.word	0x20000950

08007e60 <global_stdio_init.part.0>:
 8007e60:	b510      	push	{r4, lr}
 8007e62:	4b0b      	ldr	r3, [pc, #44]	@ (8007e90 <global_stdio_init.part.0+0x30>)
 8007e64:	4c0b      	ldr	r4, [pc, #44]	@ (8007e94 <global_stdio_init.part.0+0x34>)
 8007e66:	4a0c      	ldr	r2, [pc, #48]	@ (8007e98 <global_stdio_init.part.0+0x38>)
 8007e68:	601a      	str	r2, [r3, #0]
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	2104      	movs	r1, #4
 8007e70:	f7ff ff94 	bl	8007d9c <std>
 8007e74:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007e78:	2201      	movs	r2, #1
 8007e7a:	2109      	movs	r1, #9
 8007e7c:	f7ff ff8e 	bl	8007d9c <std>
 8007e80:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007e84:	2202      	movs	r2, #2
 8007e86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e8a:	2112      	movs	r1, #18
 8007e8c:	f7ff bf86 	b.w	8007d9c <std>
 8007e90:	200009b8 	.word	0x200009b8
 8007e94:	20000880 	.word	0x20000880
 8007e98:	08007e09 	.word	0x08007e09

08007e9c <__sfp_lock_acquire>:
 8007e9c:	4801      	ldr	r0, [pc, #4]	@ (8007ea4 <__sfp_lock_acquire+0x8>)
 8007e9e:	f000 b934 	b.w	800810a <__retarget_lock_acquire_recursive>
 8007ea2:	bf00      	nop
 8007ea4:	200009c1 	.word	0x200009c1

08007ea8 <__sfp_lock_release>:
 8007ea8:	4801      	ldr	r0, [pc, #4]	@ (8007eb0 <__sfp_lock_release+0x8>)
 8007eaa:	f000 b92f 	b.w	800810c <__retarget_lock_release_recursive>
 8007eae:	bf00      	nop
 8007eb0:	200009c1 	.word	0x200009c1

08007eb4 <__sinit>:
 8007eb4:	b510      	push	{r4, lr}
 8007eb6:	4604      	mov	r4, r0
 8007eb8:	f7ff fff0 	bl	8007e9c <__sfp_lock_acquire>
 8007ebc:	6a23      	ldr	r3, [r4, #32]
 8007ebe:	b11b      	cbz	r3, 8007ec8 <__sinit+0x14>
 8007ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ec4:	f7ff bff0 	b.w	8007ea8 <__sfp_lock_release>
 8007ec8:	4b04      	ldr	r3, [pc, #16]	@ (8007edc <__sinit+0x28>)
 8007eca:	6223      	str	r3, [r4, #32]
 8007ecc:	4b04      	ldr	r3, [pc, #16]	@ (8007ee0 <__sinit+0x2c>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d1f5      	bne.n	8007ec0 <__sinit+0xc>
 8007ed4:	f7ff ffc4 	bl	8007e60 <global_stdio_init.part.0>
 8007ed8:	e7f2      	b.n	8007ec0 <__sinit+0xc>
 8007eda:	bf00      	nop
 8007edc:	08007e21 	.word	0x08007e21
 8007ee0:	200009b8 	.word	0x200009b8

08007ee4 <_fwalk_sglue>:
 8007ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ee8:	4607      	mov	r7, r0
 8007eea:	4688      	mov	r8, r1
 8007eec:	4614      	mov	r4, r2
 8007eee:	2600      	movs	r6, #0
 8007ef0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ef4:	f1b9 0901 	subs.w	r9, r9, #1
 8007ef8:	d505      	bpl.n	8007f06 <_fwalk_sglue+0x22>
 8007efa:	6824      	ldr	r4, [r4, #0]
 8007efc:	2c00      	cmp	r4, #0
 8007efe:	d1f7      	bne.n	8007ef0 <_fwalk_sglue+0xc>
 8007f00:	4630      	mov	r0, r6
 8007f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f06:	89ab      	ldrh	r3, [r5, #12]
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d907      	bls.n	8007f1c <_fwalk_sglue+0x38>
 8007f0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f10:	3301      	adds	r3, #1
 8007f12:	d003      	beq.n	8007f1c <_fwalk_sglue+0x38>
 8007f14:	4629      	mov	r1, r5
 8007f16:	4638      	mov	r0, r7
 8007f18:	47c0      	blx	r8
 8007f1a:	4306      	orrs	r6, r0
 8007f1c:	3568      	adds	r5, #104	@ 0x68
 8007f1e:	e7e9      	b.n	8007ef4 <_fwalk_sglue+0x10>

08007f20 <sniprintf>:
 8007f20:	b40c      	push	{r2, r3}
 8007f22:	b530      	push	{r4, r5, lr}
 8007f24:	4b17      	ldr	r3, [pc, #92]	@ (8007f84 <sniprintf+0x64>)
 8007f26:	1e0c      	subs	r4, r1, #0
 8007f28:	681d      	ldr	r5, [r3, #0]
 8007f2a:	b09d      	sub	sp, #116	@ 0x74
 8007f2c:	da08      	bge.n	8007f40 <sniprintf+0x20>
 8007f2e:	238b      	movs	r3, #139	@ 0x8b
 8007f30:	602b      	str	r3, [r5, #0]
 8007f32:	f04f 30ff 	mov.w	r0, #4294967295
 8007f36:	b01d      	add	sp, #116	@ 0x74
 8007f38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f3c:	b002      	add	sp, #8
 8007f3e:	4770      	bx	lr
 8007f40:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007f44:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007f48:	bf14      	ite	ne
 8007f4a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007f4e:	4623      	moveq	r3, r4
 8007f50:	9304      	str	r3, [sp, #16]
 8007f52:	9307      	str	r3, [sp, #28]
 8007f54:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007f58:	9002      	str	r0, [sp, #8]
 8007f5a:	9006      	str	r0, [sp, #24]
 8007f5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007f60:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007f62:	ab21      	add	r3, sp, #132	@ 0x84
 8007f64:	a902      	add	r1, sp, #8
 8007f66:	4628      	mov	r0, r5
 8007f68:	9301      	str	r3, [sp, #4]
 8007f6a:	f001 fbfb 	bl	8009764 <_svfiprintf_r>
 8007f6e:	1c43      	adds	r3, r0, #1
 8007f70:	bfbc      	itt	lt
 8007f72:	238b      	movlt	r3, #139	@ 0x8b
 8007f74:	602b      	strlt	r3, [r5, #0]
 8007f76:	2c00      	cmp	r4, #0
 8007f78:	d0dd      	beq.n	8007f36 <sniprintf+0x16>
 8007f7a:	9b02      	ldr	r3, [sp, #8]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	701a      	strb	r2, [r3, #0]
 8007f80:	e7d9      	b.n	8007f36 <sniprintf+0x16>
 8007f82:	bf00      	nop
 8007f84:	20000024 	.word	0x20000024

08007f88 <__sread>:
 8007f88:	b510      	push	{r4, lr}
 8007f8a:	460c      	mov	r4, r1
 8007f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f90:	f000 f86c 	bl	800806c <_read_r>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	bfab      	itete	ge
 8007f98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007f9a:	89a3      	ldrhlt	r3, [r4, #12]
 8007f9c:	181b      	addge	r3, r3, r0
 8007f9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007fa2:	bfac      	ite	ge
 8007fa4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007fa6:	81a3      	strhlt	r3, [r4, #12]
 8007fa8:	bd10      	pop	{r4, pc}

08007faa <__swrite>:
 8007faa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fae:	461f      	mov	r7, r3
 8007fb0:	898b      	ldrh	r3, [r1, #12]
 8007fb2:	05db      	lsls	r3, r3, #23
 8007fb4:	4605      	mov	r5, r0
 8007fb6:	460c      	mov	r4, r1
 8007fb8:	4616      	mov	r6, r2
 8007fba:	d505      	bpl.n	8007fc8 <__swrite+0x1e>
 8007fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fc0:	2302      	movs	r3, #2
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f000 f840 	bl	8008048 <_lseek_r>
 8007fc8:	89a3      	ldrh	r3, [r4, #12]
 8007fca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007fd2:	81a3      	strh	r3, [r4, #12]
 8007fd4:	4632      	mov	r2, r6
 8007fd6:	463b      	mov	r3, r7
 8007fd8:	4628      	mov	r0, r5
 8007fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fde:	f000 b857 	b.w	8008090 <_write_r>

08007fe2 <__sseek>:
 8007fe2:	b510      	push	{r4, lr}
 8007fe4:	460c      	mov	r4, r1
 8007fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fea:	f000 f82d 	bl	8008048 <_lseek_r>
 8007fee:	1c43      	adds	r3, r0, #1
 8007ff0:	89a3      	ldrh	r3, [r4, #12]
 8007ff2:	bf15      	itete	ne
 8007ff4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007ff6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007ffa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007ffe:	81a3      	strheq	r3, [r4, #12]
 8008000:	bf18      	it	ne
 8008002:	81a3      	strhne	r3, [r4, #12]
 8008004:	bd10      	pop	{r4, pc}

08008006 <__sclose>:
 8008006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800800a:	f000 b80d 	b.w	8008028 <_close_r>

0800800e <memset>:
 800800e:	4402      	add	r2, r0
 8008010:	4603      	mov	r3, r0
 8008012:	4293      	cmp	r3, r2
 8008014:	d100      	bne.n	8008018 <memset+0xa>
 8008016:	4770      	bx	lr
 8008018:	f803 1b01 	strb.w	r1, [r3], #1
 800801c:	e7f9      	b.n	8008012 <memset+0x4>
	...

08008020 <_localeconv_r>:
 8008020:	4800      	ldr	r0, [pc, #0]	@ (8008024 <_localeconv_r+0x4>)
 8008022:	4770      	bx	lr
 8008024:	20000164 	.word	0x20000164

08008028 <_close_r>:
 8008028:	b538      	push	{r3, r4, r5, lr}
 800802a:	4d06      	ldr	r5, [pc, #24]	@ (8008044 <_close_r+0x1c>)
 800802c:	2300      	movs	r3, #0
 800802e:	4604      	mov	r4, r0
 8008030:	4608      	mov	r0, r1
 8008032:	602b      	str	r3, [r5, #0]
 8008034:	f7fb fb02 	bl	800363c <_close>
 8008038:	1c43      	adds	r3, r0, #1
 800803a:	d102      	bne.n	8008042 <_close_r+0x1a>
 800803c:	682b      	ldr	r3, [r5, #0]
 800803e:	b103      	cbz	r3, 8008042 <_close_r+0x1a>
 8008040:	6023      	str	r3, [r4, #0]
 8008042:	bd38      	pop	{r3, r4, r5, pc}
 8008044:	200009bc 	.word	0x200009bc

08008048 <_lseek_r>:
 8008048:	b538      	push	{r3, r4, r5, lr}
 800804a:	4d07      	ldr	r5, [pc, #28]	@ (8008068 <_lseek_r+0x20>)
 800804c:	4604      	mov	r4, r0
 800804e:	4608      	mov	r0, r1
 8008050:	4611      	mov	r1, r2
 8008052:	2200      	movs	r2, #0
 8008054:	602a      	str	r2, [r5, #0]
 8008056:	461a      	mov	r2, r3
 8008058:	f7fb fb17 	bl	800368a <_lseek>
 800805c:	1c43      	adds	r3, r0, #1
 800805e:	d102      	bne.n	8008066 <_lseek_r+0x1e>
 8008060:	682b      	ldr	r3, [r5, #0]
 8008062:	b103      	cbz	r3, 8008066 <_lseek_r+0x1e>
 8008064:	6023      	str	r3, [r4, #0]
 8008066:	bd38      	pop	{r3, r4, r5, pc}
 8008068:	200009bc 	.word	0x200009bc

0800806c <_read_r>:
 800806c:	b538      	push	{r3, r4, r5, lr}
 800806e:	4d07      	ldr	r5, [pc, #28]	@ (800808c <_read_r+0x20>)
 8008070:	4604      	mov	r4, r0
 8008072:	4608      	mov	r0, r1
 8008074:	4611      	mov	r1, r2
 8008076:	2200      	movs	r2, #0
 8008078:	602a      	str	r2, [r5, #0]
 800807a:	461a      	mov	r2, r3
 800807c:	f7fb faa5 	bl	80035ca <_read>
 8008080:	1c43      	adds	r3, r0, #1
 8008082:	d102      	bne.n	800808a <_read_r+0x1e>
 8008084:	682b      	ldr	r3, [r5, #0]
 8008086:	b103      	cbz	r3, 800808a <_read_r+0x1e>
 8008088:	6023      	str	r3, [r4, #0]
 800808a:	bd38      	pop	{r3, r4, r5, pc}
 800808c:	200009bc 	.word	0x200009bc

08008090 <_write_r>:
 8008090:	b538      	push	{r3, r4, r5, lr}
 8008092:	4d07      	ldr	r5, [pc, #28]	@ (80080b0 <_write_r+0x20>)
 8008094:	4604      	mov	r4, r0
 8008096:	4608      	mov	r0, r1
 8008098:	4611      	mov	r1, r2
 800809a:	2200      	movs	r2, #0
 800809c:	602a      	str	r2, [r5, #0]
 800809e:	461a      	mov	r2, r3
 80080a0:	f7fb fab0 	bl	8003604 <_write>
 80080a4:	1c43      	adds	r3, r0, #1
 80080a6:	d102      	bne.n	80080ae <_write_r+0x1e>
 80080a8:	682b      	ldr	r3, [r5, #0]
 80080aa:	b103      	cbz	r3, 80080ae <_write_r+0x1e>
 80080ac:	6023      	str	r3, [r4, #0]
 80080ae:	bd38      	pop	{r3, r4, r5, pc}
 80080b0:	200009bc 	.word	0x200009bc

080080b4 <__errno>:
 80080b4:	4b01      	ldr	r3, [pc, #4]	@ (80080bc <__errno+0x8>)
 80080b6:	6818      	ldr	r0, [r3, #0]
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	20000024 	.word	0x20000024

080080c0 <__libc_init_array>:
 80080c0:	b570      	push	{r4, r5, r6, lr}
 80080c2:	4d0d      	ldr	r5, [pc, #52]	@ (80080f8 <__libc_init_array+0x38>)
 80080c4:	4c0d      	ldr	r4, [pc, #52]	@ (80080fc <__libc_init_array+0x3c>)
 80080c6:	1b64      	subs	r4, r4, r5
 80080c8:	10a4      	asrs	r4, r4, #2
 80080ca:	2600      	movs	r6, #0
 80080cc:	42a6      	cmp	r6, r4
 80080ce:	d109      	bne.n	80080e4 <__libc_init_array+0x24>
 80080d0:	4d0b      	ldr	r5, [pc, #44]	@ (8008100 <__libc_init_array+0x40>)
 80080d2:	4c0c      	ldr	r4, [pc, #48]	@ (8008104 <__libc_init_array+0x44>)
 80080d4:	f003 ffc0 	bl	800c058 <_init>
 80080d8:	1b64      	subs	r4, r4, r5
 80080da:	10a4      	asrs	r4, r4, #2
 80080dc:	2600      	movs	r6, #0
 80080de:	42a6      	cmp	r6, r4
 80080e0:	d105      	bne.n	80080ee <__libc_init_array+0x2e>
 80080e2:	bd70      	pop	{r4, r5, r6, pc}
 80080e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80080e8:	4798      	blx	r3
 80080ea:	3601      	adds	r6, #1
 80080ec:	e7ee      	b.n	80080cc <__libc_init_array+0xc>
 80080ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80080f2:	4798      	blx	r3
 80080f4:	3601      	adds	r6, #1
 80080f6:	e7f2      	b.n	80080de <__libc_init_array+0x1e>
 80080f8:	0800c880 	.word	0x0800c880
 80080fc:	0800c880 	.word	0x0800c880
 8008100:	0800c880 	.word	0x0800c880
 8008104:	0800c884 	.word	0x0800c884

08008108 <__retarget_lock_init_recursive>:
 8008108:	4770      	bx	lr

0800810a <__retarget_lock_acquire_recursive>:
 800810a:	4770      	bx	lr

0800810c <__retarget_lock_release_recursive>:
 800810c:	4770      	bx	lr

0800810e <quorem>:
 800810e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008112:	6903      	ldr	r3, [r0, #16]
 8008114:	690c      	ldr	r4, [r1, #16]
 8008116:	42a3      	cmp	r3, r4
 8008118:	4607      	mov	r7, r0
 800811a:	db7e      	blt.n	800821a <quorem+0x10c>
 800811c:	3c01      	subs	r4, #1
 800811e:	f101 0814 	add.w	r8, r1, #20
 8008122:	00a3      	lsls	r3, r4, #2
 8008124:	f100 0514 	add.w	r5, r0, #20
 8008128:	9300      	str	r3, [sp, #0]
 800812a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800812e:	9301      	str	r3, [sp, #4]
 8008130:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008134:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008138:	3301      	adds	r3, #1
 800813a:	429a      	cmp	r2, r3
 800813c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008140:	fbb2 f6f3 	udiv	r6, r2, r3
 8008144:	d32e      	bcc.n	80081a4 <quorem+0x96>
 8008146:	f04f 0a00 	mov.w	sl, #0
 800814a:	46c4      	mov	ip, r8
 800814c:	46ae      	mov	lr, r5
 800814e:	46d3      	mov	fp, sl
 8008150:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008154:	b298      	uxth	r0, r3
 8008156:	fb06 a000 	mla	r0, r6, r0, sl
 800815a:	0c02      	lsrs	r2, r0, #16
 800815c:	0c1b      	lsrs	r3, r3, #16
 800815e:	fb06 2303 	mla	r3, r6, r3, r2
 8008162:	f8de 2000 	ldr.w	r2, [lr]
 8008166:	b280      	uxth	r0, r0
 8008168:	b292      	uxth	r2, r2
 800816a:	1a12      	subs	r2, r2, r0
 800816c:	445a      	add	r2, fp
 800816e:	f8de 0000 	ldr.w	r0, [lr]
 8008172:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008176:	b29b      	uxth	r3, r3
 8008178:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800817c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008180:	b292      	uxth	r2, r2
 8008182:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008186:	45e1      	cmp	r9, ip
 8008188:	f84e 2b04 	str.w	r2, [lr], #4
 800818c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008190:	d2de      	bcs.n	8008150 <quorem+0x42>
 8008192:	9b00      	ldr	r3, [sp, #0]
 8008194:	58eb      	ldr	r3, [r5, r3]
 8008196:	b92b      	cbnz	r3, 80081a4 <quorem+0x96>
 8008198:	9b01      	ldr	r3, [sp, #4]
 800819a:	3b04      	subs	r3, #4
 800819c:	429d      	cmp	r5, r3
 800819e:	461a      	mov	r2, r3
 80081a0:	d32f      	bcc.n	8008202 <quorem+0xf4>
 80081a2:	613c      	str	r4, [r7, #16]
 80081a4:	4638      	mov	r0, r7
 80081a6:	f001 f979 	bl	800949c <__mcmp>
 80081aa:	2800      	cmp	r0, #0
 80081ac:	db25      	blt.n	80081fa <quorem+0xec>
 80081ae:	4629      	mov	r1, r5
 80081b0:	2000      	movs	r0, #0
 80081b2:	f858 2b04 	ldr.w	r2, [r8], #4
 80081b6:	f8d1 c000 	ldr.w	ip, [r1]
 80081ba:	fa1f fe82 	uxth.w	lr, r2
 80081be:	fa1f f38c 	uxth.w	r3, ip
 80081c2:	eba3 030e 	sub.w	r3, r3, lr
 80081c6:	4403      	add	r3, r0
 80081c8:	0c12      	lsrs	r2, r2, #16
 80081ca:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80081ce:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081d8:	45c1      	cmp	r9, r8
 80081da:	f841 3b04 	str.w	r3, [r1], #4
 80081de:	ea4f 4022 	mov.w	r0, r2, asr #16
 80081e2:	d2e6      	bcs.n	80081b2 <quorem+0xa4>
 80081e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081ec:	b922      	cbnz	r2, 80081f8 <quorem+0xea>
 80081ee:	3b04      	subs	r3, #4
 80081f0:	429d      	cmp	r5, r3
 80081f2:	461a      	mov	r2, r3
 80081f4:	d30b      	bcc.n	800820e <quorem+0x100>
 80081f6:	613c      	str	r4, [r7, #16]
 80081f8:	3601      	adds	r6, #1
 80081fa:	4630      	mov	r0, r6
 80081fc:	b003      	add	sp, #12
 80081fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008202:	6812      	ldr	r2, [r2, #0]
 8008204:	3b04      	subs	r3, #4
 8008206:	2a00      	cmp	r2, #0
 8008208:	d1cb      	bne.n	80081a2 <quorem+0x94>
 800820a:	3c01      	subs	r4, #1
 800820c:	e7c6      	b.n	800819c <quorem+0x8e>
 800820e:	6812      	ldr	r2, [r2, #0]
 8008210:	3b04      	subs	r3, #4
 8008212:	2a00      	cmp	r2, #0
 8008214:	d1ef      	bne.n	80081f6 <quorem+0xe8>
 8008216:	3c01      	subs	r4, #1
 8008218:	e7ea      	b.n	80081f0 <quorem+0xe2>
 800821a:	2000      	movs	r0, #0
 800821c:	e7ee      	b.n	80081fc <quorem+0xee>
	...

08008220 <_dtoa_r>:
 8008220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008224:	69c7      	ldr	r7, [r0, #28]
 8008226:	b099      	sub	sp, #100	@ 0x64
 8008228:	ed8d 0b02 	vstr	d0, [sp, #8]
 800822c:	ec55 4b10 	vmov	r4, r5, d0
 8008230:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008232:	9109      	str	r1, [sp, #36]	@ 0x24
 8008234:	4683      	mov	fp, r0
 8008236:	920e      	str	r2, [sp, #56]	@ 0x38
 8008238:	9313      	str	r3, [sp, #76]	@ 0x4c
 800823a:	b97f      	cbnz	r7, 800825c <_dtoa_r+0x3c>
 800823c:	2010      	movs	r0, #16
 800823e:	f000 fdfd 	bl	8008e3c <malloc>
 8008242:	4602      	mov	r2, r0
 8008244:	f8cb 001c 	str.w	r0, [fp, #28]
 8008248:	b920      	cbnz	r0, 8008254 <_dtoa_r+0x34>
 800824a:	4ba7      	ldr	r3, [pc, #668]	@ (80084e8 <_dtoa_r+0x2c8>)
 800824c:	21ef      	movs	r1, #239	@ 0xef
 800824e:	48a7      	ldr	r0, [pc, #668]	@ (80084ec <_dtoa_r+0x2cc>)
 8008250:	f001 fc68 	bl	8009b24 <__assert_func>
 8008254:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008258:	6007      	str	r7, [r0, #0]
 800825a:	60c7      	str	r7, [r0, #12]
 800825c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008260:	6819      	ldr	r1, [r3, #0]
 8008262:	b159      	cbz	r1, 800827c <_dtoa_r+0x5c>
 8008264:	685a      	ldr	r2, [r3, #4]
 8008266:	604a      	str	r2, [r1, #4]
 8008268:	2301      	movs	r3, #1
 800826a:	4093      	lsls	r3, r2
 800826c:	608b      	str	r3, [r1, #8]
 800826e:	4658      	mov	r0, fp
 8008270:	f000 feda 	bl	8009028 <_Bfree>
 8008274:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008278:	2200      	movs	r2, #0
 800827a:	601a      	str	r2, [r3, #0]
 800827c:	1e2b      	subs	r3, r5, #0
 800827e:	bfb9      	ittee	lt
 8008280:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008284:	9303      	strlt	r3, [sp, #12]
 8008286:	2300      	movge	r3, #0
 8008288:	6033      	strge	r3, [r6, #0]
 800828a:	9f03      	ldr	r7, [sp, #12]
 800828c:	4b98      	ldr	r3, [pc, #608]	@ (80084f0 <_dtoa_r+0x2d0>)
 800828e:	bfbc      	itt	lt
 8008290:	2201      	movlt	r2, #1
 8008292:	6032      	strlt	r2, [r6, #0]
 8008294:	43bb      	bics	r3, r7
 8008296:	d112      	bne.n	80082be <_dtoa_r+0x9e>
 8008298:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800829a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800829e:	6013      	str	r3, [r2, #0]
 80082a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80082a4:	4323      	orrs	r3, r4
 80082a6:	f000 854d 	beq.w	8008d44 <_dtoa_r+0xb24>
 80082aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80082ac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008504 <_dtoa_r+0x2e4>
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f000 854f 	beq.w	8008d54 <_dtoa_r+0xb34>
 80082b6:	f10a 0303 	add.w	r3, sl, #3
 80082ba:	f000 bd49 	b.w	8008d50 <_dtoa_r+0xb30>
 80082be:	ed9d 7b02 	vldr	d7, [sp, #8]
 80082c2:	2200      	movs	r2, #0
 80082c4:	ec51 0b17 	vmov	r0, r1, d7
 80082c8:	2300      	movs	r3, #0
 80082ca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80082ce:	f7f8 fc1b 	bl	8000b08 <__aeabi_dcmpeq>
 80082d2:	4680      	mov	r8, r0
 80082d4:	b158      	cbz	r0, 80082ee <_dtoa_r+0xce>
 80082d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80082d8:	2301      	movs	r3, #1
 80082da:	6013      	str	r3, [r2, #0]
 80082dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80082de:	b113      	cbz	r3, 80082e6 <_dtoa_r+0xc6>
 80082e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80082e2:	4b84      	ldr	r3, [pc, #528]	@ (80084f4 <_dtoa_r+0x2d4>)
 80082e4:	6013      	str	r3, [r2, #0]
 80082e6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008508 <_dtoa_r+0x2e8>
 80082ea:	f000 bd33 	b.w	8008d54 <_dtoa_r+0xb34>
 80082ee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80082f2:	aa16      	add	r2, sp, #88	@ 0x58
 80082f4:	a917      	add	r1, sp, #92	@ 0x5c
 80082f6:	4658      	mov	r0, fp
 80082f8:	f001 f980 	bl	80095fc <__d2b>
 80082fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008300:	4681      	mov	r9, r0
 8008302:	2e00      	cmp	r6, #0
 8008304:	d077      	beq.n	80083f6 <_dtoa_r+0x1d6>
 8008306:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008308:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800830c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008310:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008314:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008318:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800831c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008320:	4619      	mov	r1, r3
 8008322:	2200      	movs	r2, #0
 8008324:	4b74      	ldr	r3, [pc, #464]	@ (80084f8 <_dtoa_r+0x2d8>)
 8008326:	f7f7 ffcf 	bl	80002c8 <__aeabi_dsub>
 800832a:	a369      	add	r3, pc, #420	@ (adr r3, 80084d0 <_dtoa_r+0x2b0>)
 800832c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008330:	f7f8 f982 	bl	8000638 <__aeabi_dmul>
 8008334:	a368      	add	r3, pc, #416	@ (adr r3, 80084d8 <_dtoa_r+0x2b8>)
 8008336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833a:	f7f7 ffc7 	bl	80002cc <__adddf3>
 800833e:	4604      	mov	r4, r0
 8008340:	4630      	mov	r0, r6
 8008342:	460d      	mov	r5, r1
 8008344:	f7f8 f90e 	bl	8000564 <__aeabi_i2d>
 8008348:	a365      	add	r3, pc, #404	@ (adr r3, 80084e0 <_dtoa_r+0x2c0>)
 800834a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834e:	f7f8 f973 	bl	8000638 <__aeabi_dmul>
 8008352:	4602      	mov	r2, r0
 8008354:	460b      	mov	r3, r1
 8008356:	4620      	mov	r0, r4
 8008358:	4629      	mov	r1, r5
 800835a:	f7f7 ffb7 	bl	80002cc <__adddf3>
 800835e:	4604      	mov	r4, r0
 8008360:	460d      	mov	r5, r1
 8008362:	f7f8 fc19 	bl	8000b98 <__aeabi_d2iz>
 8008366:	2200      	movs	r2, #0
 8008368:	4607      	mov	r7, r0
 800836a:	2300      	movs	r3, #0
 800836c:	4620      	mov	r0, r4
 800836e:	4629      	mov	r1, r5
 8008370:	f7f8 fbd4 	bl	8000b1c <__aeabi_dcmplt>
 8008374:	b140      	cbz	r0, 8008388 <_dtoa_r+0x168>
 8008376:	4638      	mov	r0, r7
 8008378:	f7f8 f8f4 	bl	8000564 <__aeabi_i2d>
 800837c:	4622      	mov	r2, r4
 800837e:	462b      	mov	r3, r5
 8008380:	f7f8 fbc2 	bl	8000b08 <__aeabi_dcmpeq>
 8008384:	b900      	cbnz	r0, 8008388 <_dtoa_r+0x168>
 8008386:	3f01      	subs	r7, #1
 8008388:	2f16      	cmp	r7, #22
 800838a:	d851      	bhi.n	8008430 <_dtoa_r+0x210>
 800838c:	4b5b      	ldr	r3, [pc, #364]	@ (80084fc <_dtoa_r+0x2dc>)
 800838e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008396:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800839a:	f7f8 fbbf 	bl	8000b1c <__aeabi_dcmplt>
 800839e:	2800      	cmp	r0, #0
 80083a0:	d048      	beq.n	8008434 <_dtoa_r+0x214>
 80083a2:	3f01      	subs	r7, #1
 80083a4:	2300      	movs	r3, #0
 80083a6:	9312      	str	r3, [sp, #72]	@ 0x48
 80083a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80083aa:	1b9b      	subs	r3, r3, r6
 80083ac:	1e5a      	subs	r2, r3, #1
 80083ae:	bf44      	itt	mi
 80083b0:	f1c3 0801 	rsbmi	r8, r3, #1
 80083b4:	2300      	movmi	r3, #0
 80083b6:	9208      	str	r2, [sp, #32]
 80083b8:	bf54      	ite	pl
 80083ba:	f04f 0800 	movpl.w	r8, #0
 80083be:	9308      	strmi	r3, [sp, #32]
 80083c0:	2f00      	cmp	r7, #0
 80083c2:	db39      	blt.n	8008438 <_dtoa_r+0x218>
 80083c4:	9b08      	ldr	r3, [sp, #32]
 80083c6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80083c8:	443b      	add	r3, r7
 80083ca:	9308      	str	r3, [sp, #32]
 80083cc:	2300      	movs	r3, #0
 80083ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80083d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083d2:	2b09      	cmp	r3, #9
 80083d4:	d864      	bhi.n	80084a0 <_dtoa_r+0x280>
 80083d6:	2b05      	cmp	r3, #5
 80083d8:	bfc4      	itt	gt
 80083da:	3b04      	subgt	r3, #4
 80083dc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80083de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083e0:	f1a3 0302 	sub.w	r3, r3, #2
 80083e4:	bfcc      	ite	gt
 80083e6:	2400      	movgt	r4, #0
 80083e8:	2401      	movle	r4, #1
 80083ea:	2b03      	cmp	r3, #3
 80083ec:	d863      	bhi.n	80084b6 <_dtoa_r+0x296>
 80083ee:	e8df f003 	tbb	[pc, r3]
 80083f2:	372a      	.short	0x372a
 80083f4:	5535      	.short	0x5535
 80083f6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80083fa:	441e      	add	r6, r3
 80083fc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008400:	2b20      	cmp	r3, #32
 8008402:	bfc1      	itttt	gt
 8008404:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008408:	409f      	lslgt	r7, r3
 800840a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800840e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008412:	bfd6      	itet	le
 8008414:	f1c3 0320 	rsble	r3, r3, #32
 8008418:	ea47 0003 	orrgt.w	r0, r7, r3
 800841c:	fa04 f003 	lslle.w	r0, r4, r3
 8008420:	f7f8 f890 	bl	8000544 <__aeabi_ui2d>
 8008424:	2201      	movs	r2, #1
 8008426:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800842a:	3e01      	subs	r6, #1
 800842c:	9214      	str	r2, [sp, #80]	@ 0x50
 800842e:	e777      	b.n	8008320 <_dtoa_r+0x100>
 8008430:	2301      	movs	r3, #1
 8008432:	e7b8      	b.n	80083a6 <_dtoa_r+0x186>
 8008434:	9012      	str	r0, [sp, #72]	@ 0x48
 8008436:	e7b7      	b.n	80083a8 <_dtoa_r+0x188>
 8008438:	427b      	negs	r3, r7
 800843a:	930a      	str	r3, [sp, #40]	@ 0x28
 800843c:	2300      	movs	r3, #0
 800843e:	eba8 0807 	sub.w	r8, r8, r7
 8008442:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008444:	e7c4      	b.n	80083d0 <_dtoa_r+0x1b0>
 8008446:	2300      	movs	r3, #0
 8008448:	930b      	str	r3, [sp, #44]	@ 0x2c
 800844a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800844c:	2b00      	cmp	r3, #0
 800844e:	dc35      	bgt.n	80084bc <_dtoa_r+0x29c>
 8008450:	2301      	movs	r3, #1
 8008452:	9300      	str	r3, [sp, #0]
 8008454:	9307      	str	r3, [sp, #28]
 8008456:	461a      	mov	r2, r3
 8008458:	920e      	str	r2, [sp, #56]	@ 0x38
 800845a:	e00b      	b.n	8008474 <_dtoa_r+0x254>
 800845c:	2301      	movs	r3, #1
 800845e:	e7f3      	b.n	8008448 <_dtoa_r+0x228>
 8008460:	2300      	movs	r3, #0
 8008462:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008464:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008466:	18fb      	adds	r3, r7, r3
 8008468:	9300      	str	r3, [sp, #0]
 800846a:	3301      	adds	r3, #1
 800846c:	2b01      	cmp	r3, #1
 800846e:	9307      	str	r3, [sp, #28]
 8008470:	bfb8      	it	lt
 8008472:	2301      	movlt	r3, #1
 8008474:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008478:	2100      	movs	r1, #0
 800847a:	2204      	movs	r2, #4
 800847c:	f102 0514 	add.w	r5, r2, #20
 8008480:	429d      	cmp	r5, r3
 8008482:	d91f      	bls.n	80084c4 <_dtoa_r+0x2a4>
 8008484:	6041      	str	r1, [r0, #4]
 8008486:	4658      	mov	r0, fp
 8008488:	f000 fd8e 	bl	8008fa8 <_Balloc>
 800848c:	4682      	mov	sl, r0
 800848e:	2800      	cmp	r0, #0
 8008490:	d13c      	bne.n	800850c <_dtoa_r+0x2ec>
 8008492:	4b1b      	ldr	r3, [pc, #108]	@ (8008500 <_dtoa_r+0x2e0>)
 8008494:	4602      	mov	r2, r0
 8008496:	f240 11af 	movw	r1, #431	@ 0x1af
 800849a:	e6d8      	b.n	800824e <_dtoa_r+0x2e>
 800849c:	2301      	movs	r3, #1
 800849e:	e7e0      	b.n	8008462 <_dtoa_r+0x242>
 80084a0:	2401      	movs	r4, #1
 80084a2:	2300      	movs	r3, #0
 80084a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80084a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80084a8:	f04f 33ff 	mov.w	r3, #4294967295
 80084ac:	9300      	str	r3, [sp, #0]
 80084ae:	9307      	str	r3, [sp, #28]
 80084b0:	2200      	movs	r2, #0
 80084b2:	2312      	movs	r3, #18
 80084b4:	e7d0      	b.n	8008458 <_dtoa_r+0x238>
 80084b6:	2301      	movs	r3, #1
 80084b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084ba:	e7f5      	b.n	80084a8 <_dtoa_r+0x288>
 80084bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084be:	9300      	str	r3, [sp, #0]
 80084c0:	9307      	str	r3, [sp, #28]
 80084c2:	e7d7      	b.n	8008474 <_dtoa_r+0x254>
 80084c4:	3101      	adds	r1, #1
 80084c6:	0052      	lsls	r2, r2, #1
 80084c8:	e7d8      	b.n	800847c <_dtoa_r+0x25c>
 80084ca:	bf00      	nop
 80084cc:	f3af 8000 	nop.w
 80084d0:	636f4361 	.word	0x636f4361
 80084d4:	3fd287a7 	.word	0x3fd287a7
 80084d8:	8b60c8b3 	.word	0x8b60c8b3
 80084dc:	3fc68a28 	.word	0x3fc68a28
 80084e0:	509f79fb 	.word	0x509f79fb
 80084e4:	3fd34413 	.word	0x3fd34413
 80084e8:	0800c341 	.word	0x0800c341
 80084ec:	0800c358 	.word	0x0800c358
 80084f0:	7ff00000 	.word	0x7ff00000
 80084f4:	0800c311 	.word	0x0800c311
 80084f8:	3ff80000 	.word	0x3ff80000
 80084fc:	0800c450 	.word	0x0800c450
 8008500:	0800c3b0 	.word	0x0800c3b0
 8008504:	0800c33d 	.word	0x0800c33d
 8008508:	0800c310 	.word	0x0800c310
 800850c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008510:	6018      	str	r0, [r3, #0]
 8008512:	9b07      	ldr	r3, [sp, #28]
 8008514:	2b0e      	cmp	r3, #14
 8008516:	f200 80a4 	bhi.w	8008662 <_dtoa_r+0x442>
 800851a:	2c00      	cmp	r4, #0
 800851c:	f000 80a1 	beq.w	8008662 <_dtoa_r+0x442>
 8008520:	2f00      	cmp	r7, #0
 8008522:	dd33      	ble.n	800858c <_dtoa_r+0x36c>
 8008524:	4bad      	ldr	r3, [pc, #692]	@ (80087dc <_dtoa_r+0x5bc>)
 8008526:	f007 020f 	and.w	r2, r7, #15
 800852a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800852e:	ed93 7b00 	vldr	d7, [r3]
 8008532:	05f8      	lsls	r0, r7, #23
 8008534:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008538:	ea4f 1427 	mov.w	r4, r7, asr #4
 800853c:	d516      	bpl.n	800856c <_dtoa_r+0x34c>
 800853e:	4ba8      	ldr	r3, [pc, #672]	@ (80087e0 <_dtoa_r+0x5c0>)
 8008540:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008544:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008548:	f7f8 f9a0 	bl	800088c <__aeabi_ddiv>
 800854c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008550:	f004 040f 	and.w	r4, r4, #15
 8008554:	2603      	movs	r6, #3
 8008556:	4da2      	ldr	r5, [pc, #648]	@ (80087e0 <_dtoa_r+0x5c0>)
 8008558:	b954      	cbnz	r4, 8008570 <_dtoa_r+0x350>
 800855a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800855e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008562:	f7f8 f993 	bl	800088c <__aeabi_ddiv>
 8008566:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800856a:	e028      	b.n	80085be <_dtoa_r+0x39e>
 800856c:	2602      	movs	r6, #2
 800856e:	e7f2      	b.n	8008556 <_dtoa_r+0x336>
 8008570:	07e1      	lsls	r1, r4, #31
 8008572:	d508      	bpl.n	8008586 <_dtoa_r+0x366>
 8008574:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008578:	e9d5 2300 	ldrd	r2, r3, [r5]
 800857c:	f7f8 f85c 	bl	8000638 <__aeabi_dmul>
 8008580:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008584:	3601      	adds	r6, #1
 8008586:	1064      	asrs	r4, r4, #1
 8008588:	3508      	adds	r5, #8
 800858a:	e7e5      	b.n	8008558 <_dtoa_r+0x338>
 800858c:	f000 80d2 	beq.w	8008734 <_dtoa_r+0x514>
 8008590:	427c      	negs	r4, r7
 8008592:	4b92      	ldr	r3, [pc, #584]	@ (80087dc <_dtoa_r+0x5bc>)
 8008594:	4d92      	ldr	r5, [pc, #584]	@ (80087e0 <_dtoa_r+0x5c0>)
 8008596:	f004 020f 	and.w	r2, r4, #15
 800859a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800859e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085a6:	f7f8 f847 	bl	8000638 <__aeabi_dmul>
 80085aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085ae:	1124      	asrs	r4, r4, #4
 80085b0:	2300      	movs	r3, #0
 80085b2:	2602      	movs	r6, #2
 80085b4:	2c00      	cmp	r4, #0
 80085b6:	f040 80b2 	bne.w	800871e <_dtoa_r+0x4fe>
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1d3      	bne.n	8008566 <_dtoa_r+0x346>
 80085be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80085c0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	f000 80b7 	beq.w	8008738 <_dtoa_r+0x518>
 80085ca:	4b86      	ldr	r3, [pc, #536]	@ (80087e4 <_dtoa_r+0x5c4>)
 80085cc:	2200      	movs	r2, #0
 80085ce:	4620      	mov	r0, r4
 80085d0:	4629      	mov	r1, r5
 80085d2:	f7f8 faa3 	bl	8000b1c <__aeabi_dcmplt>
 80085d6:	2800      	cmp	r0, #0
 80085d8:	f000 80ae 	beq.w	8008738 <_dtoa_r+0x518>
 80085dc:	9b07      	ldr	r3, [sp, #28]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	f000 80aa 	beq.w	8008738 <_dtoa_r+0x518>
 80085e4:	9b00      	ldr	r3, [sp, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	dd37      	ble.n	800865a <_dtoa_r+0x43a>
 80085ea:	1e7b      	subs	r3, r7, #1
 80085ec:	9304      	str	r3, [sp, #16]
 80085ee:	4620      	mov	r0, r4
 80085f0:	4b7d      	ldr	r3, [pc, #500]	@ (80087e8 <_dtoa_r+0x5c8>)
 80085f2:	2200      	movs	r2, #0
 80085f4:	4629      	mov	r1, r5
 80085f6:	f7f8 f81f 	bl	8000638 <__aeabi_dmul>
 80085fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085fe:	9c00      	ldr	r4, [sp, #0]
 8008600:	3601      	adds	r6, #1
 8008602:	4630      	mov	r0, r6
 8008604:	f7f7 ffae 	bl	8000564 <__aeabi_i2d>
 8008608:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800860c:	f7f8 f814 	bl	8000638 <__aeabi_dmul>
 8008610:	4b76      	ldr	r3, [pc, #472]	@ (80087ec <_dtoa_r+0x5cc>)
 8008612:	2200      	movs	r2, #0
 8008614:	f7f7 fe5a 	bl	80002cc <__adddf3>
 8008618:	4605      	mov	r5, r0
 800861a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800861e:	2c00      	cmp	r4, #0
 8008620:	f040 808d 	bne.w	800873e <_dtoa_r+0x51e>
 8008624:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008628:	4b71      	ldr	r3, [pc, #452]	@ (80087f0 <_dtoa_r+0x5d0>)
 800862a:	2200      	movs	r2, #0
 800862c:	f7f7 fe4c 	bl	80002c8 <__aeabi_dsub>
 8008630:	4602      	mov	r2, r0
 8008632:	460b      	mov	r3, r1
 8008634:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008638:	462a      	mov	r2, r5
 800863a:	4633      	mov	r3, r6
 800863c:	f7f8 fa8c 	bl	8000b58 <__aeabi_dcmpgt>
 8008640:	2800      	cmp	r0, #0
 8008642:	f040 828b 	bne.w	8008b5c <_dtoa_r+0x93c>
 8008646:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800864a:	462a      	mov	r2, r5
 800864c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008650:	f7f8 fa64 	bl	8000b1c <__aeabi_dcmplt>
 8008654:	2800      	cmp	r0, #0
 8008656:	f040 8128 	bne.w	80088aa <_dtoa_r+0x68a>
 800865a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800865e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008662:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008664:	2b00      	cmp	r3, #0
 8008666:	f2c0 815a 	blt.w	800891e <_dtoa_r+0x6fe>
 800866a:	2f0e      	cmp	r7, #14
 800866c:	f300 8157 	bgt.w	800891e <_dtoa_r+0x6fe>
 8008670:	4b5a      	ldr	r3, [pc, #360]	@ (80087dc <_dtoa_r+0x5bc>)
 8008672:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008676:	ed93 7b00 	vldr	d7, [r3]
 800867a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800867c:	2b00      	cmp	r3, #0
 800867e:	ed8d 7b00 	vstr	d7, [sp]
 8008682:	da03      	bge.n	800868c <_dtoa_r+0x46c>
 8008684:	9b07      	ldr	r3, [sp, #28]
 8008686:	2b00      	cmp	r3, #0
 8008688:	f340 8101 	ble.w	800888e <_dtoa_r+0x66e>
 800868c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008690:	4656      	mov	r6, sl
 8008692:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008696:	4620      	mov	r0, r4
 8008698:	4629      	mov	r1, r5
 800869a:	f7f8 f8f7 	bl	800088c <__aeabi_ddiv>
 800869e:	f7f8 fa7b 	bl	8000b98 <__aeabi_d2iz>
 80086a2:	4680      	mov	r8, r0
 80086a4:	f7f7 ff5e 	bl	8000564 <__aeabi_i2d>
 80086a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086ac:	f7f7 ffc4 	bl	8000638 <__aeabi_dmul>
 80086b0:	4602      	mov	r2, r0
 80086b2:	460b      	mov	r3, r1
 80086b4:	4620      	mov	r0, r4
 80086b6:	4629      	mov	r1, r5
 80086b8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80086bc:	f7f7 fe04 	bl	80002c8 <__aeabi_dsub>
 80086c0:	f806 4b01 	strb.w	r4, [r6], #1
 80086c4:	9d07      	ldr	r5, [sp, #28]
 80086c6:	eba6 040a 	sub.w	r4, r6, sl
 80086ca:	42a5      	cmp	r5, r4
 80086cc:	4602      	mov	r2, r0
 80086ce:	460b      	mov	r3, r1
 80086d0:	f040 8117 	bne.w	8008902 <_dtoa_r+0x6e2>
 80086d4:	f7f7 fdfa 	bl	80002cc <__adddf3>
 80086d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086dc:	4604      	mov	r4, r0
 80086de:	460d      	mov	r5, r1
 80086e0:	f7f8 fa3a 	bl	8000b58 <__aeabi_dcmpgt>
 80086e4:	2800      	cmp	r0, #0
 80086e6:	f040 80f9 	bne.w	80088dc <_dtoa_r+0x6bc>
 80086ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086ee:	4620      	mov	r0, r4
 80086f0:	4629      	mov	r1, r5
 80086f2:	f7f8 fa09 	bl	8000b08 <__aeabi_dcmpeq>
 80086f6:	b118      	cbz	r0, 8008700 <_dtoa_r+0x4e0>
 80086f8:	f018 0f01 	tst.w	r8, #1
 80086fc:	f040 80ee 	bne.w	80088dc <_dtoa_r+0x6bc>
 8008700:	4649      	mov	r1, r9
 8008702:	4658      	mov	r0, fp
 8008704:	f000 fc90 	bl	8009028 <_Bfree>
 8008708:	2300      	movs	r3, #0
 800870a:	7033      	strb	r3, [r6, #0]
 800870c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800870e:	3701      	adds	r7, #1
 8008710:	601f      	str	r7, [r3, #0]
 8008712:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008714:	2b00      	cmp	r3, #0
 8008716:	f000 831d 	beq.w	8008d54 <_dtoa_r+0xb34>
 800871a:	601e      	str	r6, [r3, #0]
 800871c:	e31a      	b.n	8008d54 <_dtoa_r+0xb34>
 800871e:	07e2      	lsls	r2, r4, #31
 8008720:	d505      	bpl.n	800872e <_dtoa_r+0x50e>
 8008722:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008726:	f7f7 ff87 	bl	8000638 <__aeabi_dmul>
 800872a:	3601      	adds	r6, #1
 800872c:	2301      	movs	r3, #1
 800872e:	1064      	asrs	r4, r4, #1
 8008730:	3508      	adds	r5, #8
 8008732:	e73f      	b.n	80085b4 <_dtoa_r+0x394>
 8008734:	2602      	movs	r6, #2
 8008736:	e742      	b.n	80085be <_dtoa_r+0x39e>
 8008738:	9c07      	ldr	r4, [sp, #28]
 800873a:	9704      	str	r7, [sp, #16]
 800873c:	e761      	b.n	8008602 <_dtoa_r+0x3e2>
 800873e:	4b27      	ldr	r3, [pc, #156]	@ (80087dc <_dtoa_r+0x5bc>)
 8008740:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008742:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008746:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800874a:	4454      	add	r4, sl
 800874c:	2900      	cmp	r1, #0
 800874e:	d053      	beq.n	80087f8 <_dtoa_r+0x5d8>
 8008750:	4928      	ldr	r1, [pc, #160]	@ (80087f4 <_dtoa_r+0x5d4>)
 8008752:	2000      	movs	r0, #0
 8008754:	f7f8 f89a 	bl	800088c <__aeabi_ddiv>
 8008758:	4633      	mov	r3, r6
 800875a:	462a      	mov	r2, r5
 800875c:	f7f7 fdb4 	bl	80002c8 <__aeabi_dsub>
 8008760:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008764:	4656      	mov	r6, sl
 8008766:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800876a:	f7f8 fa15 	bl	8000b98 <__aeabi_d2iz>
 800876e:	4605      	mov	r5, r0
 8008770:	f7f7 fef8 	bl	8000564 <__aeabi_i2d>
 8008774:	4602      	mov	r2, r0
 8008776:	460b      	mov	r3, r1
 8008778:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800877c:	f7f7 fda4 	bl	80002c8 <__aeabi_dsub>
 8008780:	3530      	adds	r5, #48	@ 0x30
 8008782:	4602      	mov	r2, r0
 8008784:	460b      	mov	r3, r1
 8008786:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800878a:	f806 5b01 	strb.w	r5, [r6], #1
 800878e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008792:	f7f8 f9c3 	bl	8000b1c <__aeabi_dcmplt>
 8008796:	2800      	cmp	r0, #0
 8008798:	d171      	bne.n	800887e <_dtoa_r+0x65e>
 800879a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800879e:	4911      	ldr	r1, [pc, #68]	@ (80087e4 <_dtoa_r+0x5c4>)
 80087a0:	2000      	movs	r0, #0
 80087a2:	f7f7 fd91 	bl	80002c8 <__aeabi_dsub>
 80087a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80087aa:	f7f8 f9b7 	bl	8000b1c <__aeabi_dcmplt>
 80087ae:	2800      	cmp	r0, #0
 80087b0:	f040 8095 	bne.w	80088de <_dtoa_r+0x6be>
 80087b4:	42a6      	cmp	r6, r4
 80087b6:	f43f af50 	beq.w	800865a <_dtoa_r+0x43a>
 80087ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80087be:	4b0a      	ldr	r3, [pc, #40]	@ (80087e8 <_dtoa_r+0x5c8>)
 80087c0:	2200      	movs	r2, #0
 80087c2:	f7f7 ff39 	bl	8000638 <__aeabi_dmul>
 80087c6:	4b08      	ldr	r3, [pc, #32]	@ (80087e8 <_dtoa_r+0x5c8>)
 80087c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80087cc:	2200      	movs	r2, #0
 80087ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087d2:	f7f7 ff31 	bl	8000638 <__aeabi_dmul>
 80087d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087da:	e7c4      	b.n	8008766 <_dtoa_r+0x546>
 80087dc:	0800c450 	.word	0x0800c450
 80087e0:	0800c428 	.word	0x0800c428
 80087e4:	3ff00000 	.word	0x3ff00000
 80087e8:	40240000 	.word	0x40240000
 80087ec:	401c0000 	.word	0x401c0000
 80087f0:	40140000 	.word	0x40140000
 80087f4:	3fe00000 	.word	0x3fe00000
 80087f8:	4631      	mov	r1, r6
 80087fa:	4628      	mov	r0, r5
 80087fc:	f7f7 ff1c 	bl	8000638 <__aeabi_dmul>
 8008800:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008804:	9415      	str	r4, [sp, #84]	@ 0x54
 8008806:	4656      	mov	r6, sl
 8008808:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800880c:	f7f8 f9c4 	bl	8000b98 <__aeabi_d2iz>
 8008810:	4605      	mov	r5, r0
 8008812:	f7f7 fea7 	bl	8000564 <__aeabi_i2d>
 8008816:	4602      	mov	r2, r0
 8008818:	460b      	mov	r3, r1
 800881a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800881e:	f7f7 fd53 	bl	80002c8 <__aeabi_dsub>
 8008822:	3530      	adds	r5, #48	@ 0x30
 8008824:	f806 5b01 	strb.w	r5, [r6], #1
 8008828:	4602      	mov	r2, r0
 800882a:	460b      	mov	r3, r1
 800882c:	42a6      	cmp	r6, r4
 800882e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008832:	f04f 0200 	mov.w	r2, #0
 8008836:	d124      	bne.n	8008882 <_dtoa_r+0x662>
 8008838:	4bac      	ldr	r3, [pc, #688]	@ (8008aec <_dtoa_r+0x8cc>)
 800883a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800883e:	f7f7 fd45 	bl	80002cc <__adddf3>
 8008842:	4602      	mov	r2, r0
 8008844:	460b      	mov	r3, r1
 8008846:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800884a:	f7f8 f985 	bl	8000b58 <__aeabi_dcmpgt>
 800884e:	2800      	cmp	r0, #0
 8008850:	d145      	bne.n	80088de <_dtoa_r+0x6be>
 8008852:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008856:	49a5      	ldr	r1, [pc, #660]	@ (8008aec <_dtoa_r+0x8cc>)
 8008858:	2000      	movs	r0, #0
 800885a:	f7f7 fd35 	bl	80002c8 <__aeabi_dsub>
 800885e:	4602      	mov	r2, r0
 8008860:	460b      	mov	r3, r1
 8008862:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008866:	f7f8 f959 	bl	8000b1c <__aeabi_dcmplt>
 800886a:	2800      	cmp	r0, #0
 800886c:	f43f aef5 	beq.w	800865a <_dtoa_r+0x43a>
 8008870:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008872:	1e73      	subs	r3, r6, #1
 8008874:	9315      	str	r3, [sp, #84]	@ 0x54
 8008876:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800887a:	2b30      	cmp	r3, #48	@ 0x30
 800887c:	d0f8      	beq.n	8008870 <_dtoa_r+0x650>
 800887e:	9f04      	ldr	r7, [sp, #16]
 8008880:	e73e      	b.n	8008700 <_dtoa_r+0x4e0>
 8008882:	4b9b      	ldr	r3, [pc, #620]	@ (8008af0 <_dtoa_r+0x8d0>)
 8008884:	f7f7 fed8 	bl	8000638 <__aeabi_dmul>
 8008888:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800888c:	e7bc      	b.n	8008808 <_dtoa_r+0x5e8>
 800888e:	d10c      	bne.n	80088aa <_dtoa_r+0x68a>
 8008890:	4b98      	ldr	r3, [pc, #608]	@ (8008af4 <_dtoa_r+0x8d4>)
 8008892:	2200      	movs	r2, #0
 8008894:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008898:	f7f7 fece 	bl	8000638 <__aeabi_dmul>
 800889c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088a0:	f7f8 f950 	bl	8000b44 <__aeabi_dcmpge>
 80088a4:	2800      	cmp	r0, #0
 80088a6:	f000 8157 	beq.w	8008b58 <_dtoa_r+0x938>
 80088aa:	2400      	movs	r4, #0
 80088ac:	4625      	mov	r5, r4
 80088ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088b0:	43db      	mvns	r3, r3
 80088b2:	9304      	str	r3, [sp, #16]
 80088b4:	4656      	mov	r6, sl
 80088b6:	2700      	movs	r7, #0
 80088b8:	4621      	mov	r1, r4
 80088ba:	4658      	mov	r0, fp
 80088bc:	f000 fbb4 	bl	8009028 <_Bfree>
 80088c0:	2d00      	cmp	r5, #0
 80088c2:	d0dc      	beq.n	800887e <_dtoa_r+0x65e>
 80088c4:	b12f      	cbz	r7, 80088d2 <_dtoa_r+0x6b2>
 80088c6:	42af      	cmp	r7, r5
 80088c8:	d003      	beq.n	80088d2 <_dtoa_r+0x6b2>
 80088ca:	4639      	mov	r1, r7
 80088cc:	4658      	mov	r0, fp
 80088ce:	f000 fbab 	bl	8009028 <_Bfree>
 80088d2:	4629      	mov	r1, r5
 80088d4:	4658      	mov	r0, fp
 80088d6:	f000 fba7 	bl	8009028 <_Bfree>
 80088da:	e7d0      	b.n	800887e <_dtoa_r+0x65e>
 80088dc:	9704      	str	r7, [sp, #16]
 80088de:	4633      	mov	r3, r6
 80088e0:	461e      	mov	r6, r3
 80088e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088e6:	2a39      	cmp	r2, #57	@ 0x39
 80088e8:	d107      	bne.n	80088fa <_dtoa_r+0x6da>
 80088ea:	459a      	cmp	sl, r3
 80088ec:	d1f8      	bne.n	80088e0 <_dtoa_r+0x6c0>
 80088ee:	9a04      	ldr	r2, [sp, #16]
 80088f0:	3201      	adds	r2, #1
 80088f2:	9204      	str	r2, [sp, #16]
 80088f4:	2230      	movs	r2, #48	@ 0x30
 80088f6:	f88a 2000 	strb.w	r2, [sl]
 80088fa:	781a      	ldrb	r2, [r3, #0]
 80088fc:	3201      	adds	r2, #1
 80088fe:	701a      	strb	r2, [r3, #0]
 8008900:	e7bd      	b.n	800887e <_dtoa_r+0x65e>
 8008902:	4b7b      	ldr	r3, [pc, #492]	@ (8008af0 <_dtoa_r+0x8d0>)
 8008904:	2200      	movs	r2, #0
 8008906:	f7f7 fe97 	bl	8000638 <__aeabi_dmul>
 800890a:	2200      	movs	r2, #0
 800890c:	2300      	movs	r3, #0
 800890e:	4604      	mov	r4, r0
 8008910:	460d      	mov	r5, r1
 8008912:	f7f8 f8f9 	bl	8000b08 <__aeabi_dcmpeq>
 8008916:	2800      	cmp	r0, #0
 8008918:	f43f aebb 	beq.w	8008692 <_dtoa_r+0x472>
 800891c:	e6f0      	b.n	8008700 <_dtoa_r+0x4e0>
 800891e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008920:	2a00      	cmp	r2, #0
 8008922:	f000 80db 	beq.w	8008adc <_dtoa_r+0x8bc>
 8008926:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008928:	2a01      	cmp	r2, #1
 800892a:	f300 80bf 	bgt.w	8008aac <_dtoa_r+0x88c>
 800892e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008930:	2a00      	cmp	r2, #0
 8008932:	f000 80b7 	beq.w	8008aa4 <_dtoa_r+0x884>
 8008936:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800893a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800893c:	4646      	mov	r6, r8
 800893e:	9a08      	ldr	r2, [sp, #32]
 8008940:	2101      	movs	r1, #1
 8008942:	441a      	add	r2, r3
 8008944:	4658      	mov	r0, fp
 8008946:	4498      	add	r8, r3
 8008948:	9208      	str	r2, [sp, #32]
 800894a:	f000 fc21 	bl	8009190 <__i2b>
 800894e:	4605      	mov	r5, r0
 8008950:	b15e      	cbz	r6, 800896a <_dtoa_r+0x74a>
 8008952:	9b08      	ldr	r3, [sp, #32]
 8008954:	2b00      	cmp	r3, #0
 8008956:	dd08      	ble.n	800896a <_dtoa_r+0x74a>
 8008958:	42b3      	cmp	r3, r6
 800895a:	9a08      	ldr	r2, [sp, #32]
 800895c:	bfa8      	it	ge
 800895e:	4633      	movge	r3, r6
 8008960:	eba8 0803 	sub.w	r8, r8, r3
 8008964:	1af6      	subs	r6, r6, r3
 8008966:	1ad3      	subs	r3, r2, r3
 8008968:	9308      	str	r3, [sp, #32]
 800896a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800896c:	b1f3      	cbz	r3, 80089ac <_dtoa_r+0x78c>
 800896e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008970:	2b00      	cmp	r3, #0
 8008972:	f000 80b7 	beq.w	8008ae4 <_dtoa_r+0x8c4>
 8008976:	b18c      	cbz	r4, 800899c <_dtoa_r+0x77c>
 8008978:	4629      	mov	r1, r5
 800897a:	4622      	mov	r2, r4
 800897c:	4658      	mov	r0, fp
 800897e:	f000 fcc7 	bl	8009310 <__pow5mult>
 8008982:	464a      	mov	r2, r9
 8008984:	4601      	mov	r1, r0
 8008986:	4605      	mov	r5, r0
 8008988:	4658      	mov	r0, fp
 800898a:	f000 fc17 	bl	80091bc <__multiply>
 800898e:	4649      	mov	r1, r9
 8008990:	9004      	str	r0, [sp, #16]
 8008992:	4658      	mov	r0, fp
 8008994:	f000 fb48 	bl	8009028 <_Bfree>
 8008998:	9b04      	ldr	r3, [sp, #16]
 800899a:	4699      	mov	r9, r3
 800899c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800899e:	1b1a      	subs	r2, r3, r4
 80089a0:	d004      	beq.n	80089ac <_dtoa_r+0x78c>
 80089a2:	4649      	mov	r1, r9
 80089a4:	4658      	mov	r0, fp
 80089a6:	f000 fcb3 	bl	8009310 <__pow5mult>
 80089aa:	4681      	mov	r9, r0
 80089ac:	2101      	movs	r1, #1
 80089ae:	4658      	mov	r0, fp
 80089b0:	f000 fbee 	bl	8009190 <__i2b>
 80089b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089b6:	4604      	mov	r4, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f000 81cf 	beq.w	8008d5c <_dtoa_r+0xb3c>
 80089be:	461a      	mov	r2, r3
 80089c0:	4601      	mov	r1, r0
 80089c2:	4658      	mov	r0, fp
 80089c4:	f000 fca4 	bl	8009310 <__pow5mult>
 80089c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	4604      	mov	r4, r0
 80089ce:	f300 8095 	bgt.w	8008afc <_dtoa_r+0x8dc>
 80089d2:	9b02      	ldr	r3, [sp, #8]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f040 8087 	bne.w	8008ae8 <_dtoa_r+0x8c8>
 80089da:	9b03      	ldr	r3, [sp, #12]
 80089dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f040 8089 	bne.w	8008af8 <_dtoa_r+0x8d8>
 80089e6:	9b03      	ldr	r3, [sp, #12]
 80089e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80089ec:	0d1b      	lsrs	r3, r3, #20
 80089ee:	051b      	lsls	r3, r3, #20
 80089f0:	b12b      	cbz	r3, 80089fe <_dtoa_r+0x7de>
 80089f2:	9b08      	ldr	r3, [sp, #32]
 80089f4:	3301      	adds	r3, #1
 80089f6:	9308      	str	r3, [sp, #32]
 80089f8:	f108 0801 	add.w	r8, r8, #1
 80089fc:	2301      	movs	r3, #1
 80089fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f000 81b0 	beq.w	8008d68 <_dtoa_r+0xb48>
 8008a08:	6923      	ldr	r3, [r4, #16]
 8008a0a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008a0e:	6918      	ldr	r0, [r3, #16]
 8008a10:	f000 fb72 	bl	80090f8 <__hi0bits>
 8008a14:	f1c0 0020 	rsb	r0, r0, #32
 8008a18:	9b08      	ldr	r3, [sp, #32]
 8008a1a:	4418      	add	r0, r3
 8008a1c:	f010 001f 	ands.w	r0, r0, #31
 8008a20:	d077      	beq.n	8008b12 <_dtoa_r+0x8f2>
 8008a22:	f1c0 0320 	rsb	r3, r0, #32
 8008a26:	2b04      	cmp	r3, #4
 8008a28:	dd6b      	ble.n	8008b02 <_dtoa_r+0x8e2>
 8008a2a:	9b08      	ldr	r3, [sp, #32]
 8008a2c:	f1c0 001c 	rsb	r0, r0, #28
 8008a30:	4403      	add	r3, r0
 8008a32:	4480      	add	r8, r0
 8008a34:	4406      	add	r6, r0
 8008a36:	9308      	str	r3, [sp, #32]
 8008a38:	f1b8 0f00 	cmp.w	r8, #0
 8008a3c:	dd05      	ble.n	8008a4a <_dtoa_r+0x82a>
 8008a3e:	4649      	mov	r1, r9
 8008a40:	4642      	mov	r2, r8
 8008a42:	4658      	mov	r0, fp
 8008a44:	f000 fcbe 	bl	80093c4 <__lshift>
 8008a48:	4681      	mov	r9, r0
 8008a4a:	9b08      	ldr	r3, [sp, #32]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	dd05      	ble.n	8008a5c <_dtoa_r+0x83c>
 8008a50:	4621      	mov	r1, r4
 8008a52:	461a      	mov	r2, r3
 8008a54:	4658      	mov	r0, fp
 8008a56:	f000 fcb5 	bl	80093c4 <__lshift>
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d059      	beq.n	8008b16 <_dtoa_r+0x8f6>
 8008a62:	4621      	mov	r1, r4
 8008a64:	4648      	mov	r0, r9
 8008a66:	f000 fd19 	bl	800949c <__mcmp>
 8008a6a:	2800      	cmp	r0, #0
 8008a6c:	da53      	bge.n	8008b16 <_dtoa_r+0x8f6>
 8008a6e:	1e7b      	subs	r3, r7, #1
 8008a70:	9304      	str	r3, [sp, #16]
 8008a72:	4649      	mov	r1, r9
 8008a74:	2300      	movs	r3, #0
 8008a76:	220a      	movs	r2, #10
 8008a78:	4658      	mov	r0, fp
 8008a7a:	f000 faf7 	bl	800906c <__multadd>
 8008a7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a80:	4681      	mov	r9, r0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	f000 8172 	beq.w	8008d6c <_dtoa_r+0xb4c>
 8008a88:	2300      	movs	r3, #0
 8008a8a:	4629      	mov	r1, r5
 8008a8c:	220a      	movs	r2, #10
 8008a8e:	4658      	mov	r0, fp
 8008a90:	f000 faec 	bl	800906c <__multadd>
 8008a94:	9b00      	ldr	r3, [sp, #0]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	4605      	mov	r5, r0
 8008a9a:	dc67      	bgt.n	8008b6c <_dtoa_r+0x94c>
 8008a9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	dc41      	bgt.n	8008b26 <_dtoa_r+0x906>
 8008aa2:	e063      	b.n	8008b6c <_dtoa_r+0x94c>
 8008aa4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008aa6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008aaa:	e746      	b.n	800893a <_dtoa_r+0x71a>
 8008aac:	9b07      	ldr	r3, [sp, #28]
 8008aae:	1e5c      	subs	r4, r3, #1
 8008ab0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ab2:	42a3      	cmp	r3, r4
 8008ab4:	bfbf      	itttt	lt
 8008ab6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008ab8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008aba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008abc:	1ae3      	sublt	r3, r4, r3
 8008abe:	bfb4      	ite	lt
 8008ac0:	18d2      	addlt	r2, r2, r3
 8008ac2:	1b1c      	subge	r4, r3, r4
 8008ac4:	9b07      	ldr	r3, [sp, #28]
 8008ac6:	bfbc      	itt	lt
 8008ac8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008aca:	2400      	movlt	r4, #0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	bfb5      	itete	lt
 8008ad0:	eba8 0603 	sublt.w	r6, r8, r3
 8008ad4:	9b07      	ldrge	r3, [sp, #28]
 8008ad6:	2300      	movlt	r3, #0
 8008ad8:	4646      	movge	r6, r8
 8008ada:	e730      	b.n	800893e <_dtoa_r+0x71e>
 8008adc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008ade:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008ae0:	4646      	mov	r6, r8
 8008ae2:	e735      	b.n	8008950 <_dtoa_r+0x730>
 8008ae4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ae6:	e75c      	b.n	80089a2 <_dtoa_r+0x782>
 8008ae8:	2300      	movs	r3, #0
 8008aea:	e788      	b.n	80089fe <_dtoa_r+0x7de>
 8008aec:	3fe00000 	.word	0x3fe00000
 8008af0:	40240000 	.word	0x40240000
 8008af4:	40140000 	.word	0x40140000
 8008af8:	9b02      	ldr	r3, [sp, #8]
 8008afa:	e780      	b.n	80089fe <_dtoa_r+0x7de>
 8008afc:	2300      	movs	r3, #0
 8008afe:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b00:	e782      	b.n	8008a08 <_dtoa_r+0x7e8>
 8008b02:	d099      	beq.n	8008a38 <_dtoa_r+0x818>
 8008b04:	9a08      	ldr	r2, [sp, #32]
 8008b06:	331c      	adds	r3, #28
 8008b08:	441a      	add	r2, r3
 8008b0a:	4498      	add	r8, r3
 8008b0c:	441e      	add	r6, r3
 8008b0e:	9208      	str	r2, [sp, #32]
 8008b10:	e792      	b.n	8008a38 <_dtoa_r+0x818>
 8008b12:	4603      	mov	r3, r0
 8008b14:	e7f6      	b.n	8008b04 <_dtoa_r+0x8e4>
 8008b16:	9b07      	ldr	r3, [sp, #28]
 8008b18:	9704      	str	r7, [sp, #16]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	dc20      	bgt.n	8008b60 <_dtoa_r+0x940>
 8008b1e:	9300      	str	r3, [sp, #0]
 8008b20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	dd1e      	ble.n	8008b64 <_dtoa_r+0x944>
 8008b26:	9b00      	ldr	r3, [sp, #0]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	f47f aec0 	bne.w	80088ae <_dtoa_r+0x68e>
 8008b2e:	4621      	mov	r1, r4
 8008b30:	2205      	movs	r2, #5
 8008b32:	4658      	mov	r0, fp
 8008b34:	f000 fa9a 	bl	800906c <__multadd>
 8008b38:	4601      	mov	r1, r0
 8008b3a:	4604      	mov	r4, r0
 8008b3c:	4648      	mov	r0, r9
 8008b3e:	f000 fcad 	bl	800949c <__mcmp>
 8008b42:	2800      	cmp	r0, #0
 8008b44:	f77f aeb3 	ble.w	80088ae <_dtoa_r+0x68e>
 8008b48:	4656      	mov	r6, sl
 8008b4a:	2331      	movs	r3, #49	@ 0x31
 8008b4c:	f806 3b01 	strb.w	r3, [r6], #1
 8008b50:	9b04      	ldr	r3, [sp, #16]
 8008b52:	3301      	adds	r3, #1
 8008b54:	9304      	str	r3, [sp, #16]
 8008b56:	e6ae      	b.n	80088b6 <_dtoa_r+0x696>
 8008b58:	9c07      	ldr	r4, [sp, #28]
 8008b5a:	9704      	str	r7, [sp, #16]
 8008b5c:	4625      	mov	r5, r4
 8008b5e:	e7f3      	b.n	8008b48 <_dtoa_r+0x928>
 8008b60:	9b07      	ldr	r3, [sp, #28]
 8008b62:	9300      	str	r3, [sp, #0]
 8008b64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	f000 8104 	beq.w	8008d74 <_dtoa_r+0xb54>
 8008b6c:	2e00      	cmp	r6, #0
 8008b6e:	dd05      	ble.n	8008b7c <_dtoa_r+0x95c>
 8008b70:	4629      	mov	r1, r5
 8008b72:	4632      	mov	r2, r6
 8008b74:	4658      	mov	r0, fp
 8008b76:	f000 fc25 	bl	80093c4 <__lshift>
 8008b7a:	4605      	mov	r5, r0
 8008b7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d05a      	beq.n	8008c38 <_dtoa_r+0xa18>
 8008b82:	6869      	ldr	r1, [r5, #4]
 8008b84:	4658      	mov	r0, fp
 8008b86:	f000 fa0f 	bl	8008fa8 <_Balloc>
 8008b8a:	4606      	mov	r6, r0
 8008b8c:	b928      	cbnz	r0, 8008b9a <_dtoa_r+0x97a>
 8008b8e:	4b84      	ldr	r3, [pc, #528]	@ (8008da0 <_dtoa_r+0xb80>)
 8008b90:	4602      	mov	r2, r0
 8008b92:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008b96:	f7ff bb5a 	b.w	800824e <_dtoa_r+0x2e>
 8008b9a:	692a      	ldr	r2, [r5, #16]
 8008b9c:	3202      	adds	r2, #2
 8008b9e:	0092      	lsls	r2, r2, #2
 8008ba0:	f105 010c 	add.w	r1, r5, #12
 8008ba4:	300c      	adds	r0, #12
 8008ba6:	f000 ffaf 	bl	8009b08 <memcpy>
 8008baa:	2201      	movs	r2, #1
 8008bac:	4631      	mov	r1, r6
 8008bae:	4658      	mov	r0, fp
 8008bb0:	f000 fc08 	bl	80093c4 <__lshift>
 8008bb4:	f10a 0301 	add.w	r3, sl, #1
 8008bb8:	9307      	str	r3, [sp, #28]
 8008bba:	9b00      	ldr	r3, [sp, #0]
 8008bbc:	4453      	add	r3, sl
 8008bbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008bc0:	9b02      	ldr	r3, [sp, #8]
 8008bc2:	f003 0301 	and.w	r3, r3, #1
 8008bc6:	462f      	mov	r7, r5
 8008bc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bca:	4605      	mov	r5, r0
 8008bcc:	9b07      	ldr	r3, [sp, #28]
 8008bce:	4621      	mov	r1, r4
 8008bd0:	3b01      	subs	r3, #1
 8008bd2:	4648      	mov	r0, r9
 8008bd4:	9300      	str	r3, [sp, #0]
 8008bd6:	f7ff fa9a 	bl	800810e <quorem>
 8008bda:	4639      	mov	r1, r7
 8008bdc:	9002      	str	r0, [sp, #8]
 8008bde:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008be2:	4648      	mov	r0, r9
 8008be4:	f000 fc5a 	bl	800949c <__mcmp>
 8008be8:	462a      	mov	r2, r5
 8008bea:	9008      	str	r0, [sp, #32]
 8008bec:	4621      	mov	r1, r4
 8008bee:	4658      	mov	r0, fp
 8008bf0:	f000 fc70 	bl	80094d4 <__mdiff>
 8008bf4:	68c2      	ldr	r2, [r0, #12]
 8008bf6:	4606      	mov	r6, r0
 8008bf8:	bb02      	cbnz	r2, 8008c3c <_dtoa_r+0xa1c>
 8008bfa:	4601      	mov	r1, r0
 8008bfc:	4648      	mov	r0, r9
 8008bfe:	f000 fc4d 	bl	800949c <__mcmp>
 8008c02:	4602      	mov	r2, r0
 8008c04:	4631      	mov	r1, r6
 8008c06:	4658      	mov	r0, fp
 8008c08:	920e      	str	r2, [sp, #56]	@ 0x38
 8008c0a:	f000 fa0d 	bl	8009028 <_Bfree>
 8008c0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c12:	9e07      	ldr	r6, [sp, #28]
 8008c14:	ea43 0102 	orr.w	r1, r3, r2
 8008c18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c1a:	4319      	orrs	r1, r3
 8008c1c:	d110      	bne.n	8008c40 <_dtoa_r+0xa20>
 8008c1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c22:	d029      	beq.n	8008c78 <_dtoa_r+0xa58>
 8008c24:	9b08      	ldr	r3, [sp, #32]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	dd02      	ble.n	8008c30 <_dtoa_r+0xa10>
 8008c2a:	9b02      	ldr	r3, [sp, #8]
 8008c2c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008c30:	9b00      	ldr	r3, [sp, #0]
 8008c32:	f883 8000 	strb.w	r8, [r3]
 8008c36:	e63f      	b.n	80088b8 <_dtoa_r+0x698>
 8008c38:	4628      	mov	r0, r5
 8008c3a:	e7bb      	b.n	8008bb4 <_dtoa_r+0x994>
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	e7e1      	b.n	8008c04 <_dtoa_r+0x9e4>
 8008c40:	9b08      	ldr	r3, [sp, #32]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	db04      	blt.n	8008c50 <_dtoa_r+0xa30>
 8008c46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008c48:	430b      	orrs	r3, r1
 8008c4a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008c4c:	430b      	orrs	r3, r1
 8008c4e:	d120      	bne.n	8008c92 <_dtoa_r+0xa72>
 8008c50:	2a00      	cmp	r2, #0
 8008c52:	dded      	ble.n	8008c30 <_dtoa_r+0xa10>
 8008c54:	4649      	mov	r1, r9
 8008c56:	2201      	movs	r2, #1
 8008c58:	4658      	mov	r0, fp
 8008c5a:	f000 fbb3 	bl	80093c4 <__lshift>
 8008c5e:	4621      	mov	r1, r4
 8008c60:	4681      	mov	r9, r0
 8008c62:	f000 fc1b 	bl	800949c <__mcmp>
 8008c66:	2800      	cmp	r0, #0
 8008c68:	dc03      	bgt.n	8008c72 <_dtoa_r+0xa52>
 8008c6a:	d1e1      	bne.n	8008c30 <_dtoa_r+0xa10>
 8008c6c:	f018 0f01 	tst.w	r8, #1
 8008c70:	d0de      	beq.n	8008c30 <_dtoa_r+0xa10>
 8008c72:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c76:	d1d8      	bne.n	8008c2a <_dtoa_r+0xa0a>
 8008c78:	9a00      	ldr	r2, [sp, #0]
 8008c7a:	2339      	movs	r3, #57	@ 0x39
 8008c7c:	7013      	strb	r3, [r2, #0]
 8008c7e:	4633      	mov	r3, r6
 8008c80:	461e      	mov	r6, r3
 8008c82:	3b01      	subs	r3, #1
 8008c84:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008c88:	2a39      	cmp	r2, #57	@ 0x39
 8008c8a:	d052      	beq.n	8008d32 <_dtoa_r+0xb12>
 8008c8c:	3201      	adds	r2, #1
 8008c8e:	701a      	strb	r2, [r3, #0]
 8008c90:	e612      	b.n	80088b8 <_dtoa_r+0x698>
 8008c92:	2a00      	cmp	r2, #0
 8008c94:	dd07      	ble.n	8008ca6 <_dtoa_r+0xa86>
 8008c96:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c9a:	d0ed      	beq.n	8008c78 <_dtoa_r+0xa58>
 8008c9c:	9a00      	ldr	r2, [sp, #0]
 8008c9e:	f108 0301 	add.w	r3, r8, #1
 8008ca2:	7013      	strb	r3, [r2, #0]
 8008ca4:	e608      	b.n	80088b8 <_dtoa_r+0x698>
 8008ca6:	9b07      	ldr	r3, [sp, #28]
 8008ca8:	9a07      	ldr	r2, [sp, #28]
 8008caa:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008cae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d028      	beq.n	8008d06 <_dtoa_r+0xae6>
 8008cb4:	4649      	mov	r1, r9
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	220a      	movs	r2, #10
 8008cba:	4658      	mov	r0, fp
 8008cbc:	f000 f9d6 	bl	800906c <__multadd>
 8008cc0:	42af      	cmp	r7, r5
 8008cc2:	4681      	mov	r9, r0
 8008cc4:	f04f 0300 	mov.w	r3, #0
 8008cc8:	f04f 020a 	mov.w	r2, #10
 8008ccc:	4639      	mov	r1, r7
 8008cce:	4658      	mov	r0, fp
 8008cd0:	d107      	bne.n	8008ce2 <_dtoa_r+0xac2>
 8008cd2:	f000 f9cb 	bl	800906c <__multadd>
 8008cd6:	4607      	mov	r7, r0
 8008cd8:	4605      	mov	r5, r0
 8008cda:	9b07      	ldr	r3, [sp, #28]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	9307      	str	r3, [sp, #28]
 8008ce0:	e774      	b.n	8008bcc <_dtoa_r+0x9ac>
 8008ce2:	f000 f9c3 	bl	800906c <__multadd>
 8008ce6:	4629      	mov	r1, r5
 8008ce8:	4607      	mov	r7, r0
 8008cea:	2300      	movs	r3, #0
 8008cec:	220a      	movs	r2, #10
 8008cee:	4658      	mov	r0, fp
 8008cf0:	f000 f9bc 	bl	800906c <__multadd>
 8008cf4:	4605      	mov	r5, r0
 8008cf6:	e7f0      	b.n	8008cda <_dtoa_r+0xaba>
 8008cf8:	9b00      	ldr	r3, [sp, #0]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	bfcc      	ite	gt
 8008cfe:	461e      	movgt	r6, r3
 8008d00:	2601      	movle	r6, #1
 8008d02:	4456      	add	r6, sl
 8008d04:	2700      	movs	r7, #0
 8008d06:	4649      	mov	r1, r9
 8008d08:	2201      	movs	r2, #1
 8008d0a:	4658      	mov	r0, fp
 8008d0c:	f000 fb5a 	bl	80093c4 <__lshift>
 8008d10:	4621      	mov	r1, r4
 8008d12:	4681      	mov	r9, r0
 8008d14:	f000 fbc2 	bl	800949c <__mcmp>
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	dcb0      	bgt.n	8008c7e <_dtoa_r+0xa5e>
 8008d1c:	d102      	bne.n	8008d24 <_dtoa_r+0xb04>
 8008d1e:	f018 0f01 	tst.w	r8, #1
 8008d22:	d1ac      	bne.n	8008c7e <_dtoa_r+0xa5e>
 8008d24:	4633      	mov	r3, r6
 8008d26:	461e      	mov	r6, r3
 8008d28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d2c:	2a30      	cmp	r2, #48	@ 0x30
 8008d2e:	d0fa      	beq.n	8008d26 <_dtoa_r+0xb06>
 8008d30:	e5c2      	b.n	80088b8 <_dtoa_r+0x698>
 8008d32:	459a      	cmp	sl, r3
 8008d34:	d1a4      	bne.n	8008c80 <_dtoa_r+0xa60>
 8008d36:	9b04      	ldr	r3, [sp, #16]
 8008d38:	3301      	adds	r3, #1
 8008d3a:	9304      	str	r3, [sp, #16]
 8008d3c:	2331      	movs	r3, #49	@ 0x31
 8008d3e:	f88a 3000 	strb.w	r3, [sl]
 8008d42:	e5b9      	b.n	80088b8 <_dtoa_r+0x698>
 8008d44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008d46:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008da4 <_dtoa_r+0xb84>
 8008d4a:	b11b      	cbz	r3, 8008d54 <_dtoa_r+0xb34>
 8008d4c:	f10a 0308 	add.w	r3, sl, #8
 8008d50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008d52:	6013      	str	r3, [r2, #0]
 8008d54:	4650      	mov	r0, sl
 8008d56:	b019      	add	sp, #100	@ 0x64
 8008d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	f77f ae37 	ble.w	80089d2 <_dtoa_r+0x7b2>
 8008d64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d66:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d68:	2001      	movs	r0, #1
 8008d6a:	e655      	b.n	8008a18 <_dtoa_r+0x7f8>
 8008d6c:	9b00      	ldr	r3, [sp, #0]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	f77f aed6 	ble.w	8008b20 <_dtoa_r+0x900>
 8008d74:	4656      	mov	r6, sl
 8008d76:	4621      	mov	r1, r4
 8008d78:	4648      	mov	r0, r9
 8008d7a:	f7ff f9c8 	bl	800810e <quorem>
 8008d7e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008d82:	f806 8b01 	strb.w	r8, [r6], #1
 8008d86:	9b00      	ldr	r3, [sp, #0]
 8008d88:	eba6 020a 	sub.w	r2, r6, sl
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	ddb3      	ble.n	8008cf8 <_dtoa_r+0xad8>
 8008d90:	4649      	mov	r1, r9
 8008d92:	2300      	movs	r3, #0
 8008d94:	220a      	movs	r2, #10
 8008d96:	4658      	mov	r0, fp
 8008d98:	f000 f968 	bl	800906c <__multadd>
 8008d9c:	4681      	mov	r9, r0
 8008d9e:	e7ea      	b.n	8008d76 <_dtoa_r+0xb56>
 8008da0:	0800c3b0 	.word	0x0800c3b0
 8008da4:	0800c334 	.word	0x0800c334

08008da8 <_free_r>:
 8008da8:	b538      	push	{r3, r4, r5, lr}
 8008daa:	4605      	mov	r5, r0
 8008dac:	2900      	cmp	r1, #0
 8008dae:	d041      	beq.n	8008e34 <_free_r+0x8c>
 8008db0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008db4:	1f0c      	subs	r4, r1, #4
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	bfb8      	it	lt
 8008dba:	18e4      	addlt	r4, r4, r3
 8008dbc:	f000 f8e8 	bl	8008f90 <__malloc_lock>
 8008dc0:	4a1d      	ldr	r2, [pc, #116]	@ (8008e38 <_free_r+0x90>)
 8008dc2:	6813      	ldr	r3, [r2, #0]
 8008dc4:	b933      	cbnz	r3, 8008dd4 <_free_r+0x2c>
 8008dc6:	6063      	str	r3, [r4, #4]
 8008dc8:	6014      	str	r4, [r2, #0]
 8008dca:	4628      	mov	r0, r5
 8008dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dd0:	f000 b8e4 	b.w	8008f9c <__malloc_unlock>
 8008dd4:	42a3      	cmp	r3, r4
 8008dd6:	d908      	bls.n	8008dea <_free_r+0x42>
 8008dd8:	6820      	ldr	r0, [r4, #0]
 8008dda:	1821      	adds	r1, r4, r0
 8008ddc:	428b      	cmp	r3, r1
 8008dde:	bf01      	itttt	eq
 8008de0:	6819      	ldreq	r1, [r3, #0]
 8008de2:	685b      	ldreq	r3, [r3, #4]
 8008de4:	1809      	addeq	r1, r1, r0
 8008de6:	6021      	streq	r1, [r4, #0]
 8008de8:	e7ed      	b.n	8008dc6 <_free_r+0x1e>
 8008dea:	461a      	mov	r2, r3
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	b10b      	cbz	r3, 8008df4 <_free_r+0x4c>
 8008df0:	42a3      	cmp	r3, r4
 8008df2:	d9fa      	bls.n	8008dea <_free_r+0x42>
 8008df4:	6811      	ldr	r1, [r2, #0]
 8008df6:	1850      	adds	r0, r2, r1
 8008df8:	42a0      	cmp	r0, r4
 8008dfa:	d10b      	bne.n	8008e14 <_free_r+0x6c>
 8008dfc:	6820      	ldr	r0, [r4, #0]
 8008dfe:	4401      	add	r1, r0
 8008e00:	1850      	adds	r0, r2, r1
 8008e02:	4283      	cmp	r3, r0
 8008e04:	6011      	str	r1, [r2, #0]
 8008e06:	d1e0      	bne.n	8008dca <_free_r+0x22>
 8008e08:	6818      	ldr	r0, [r3, #0]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	6053      	str	r3, [r2, #4]
 8008e0e:	4408      	add	r0, r1
 8008e10:	6010      	str	r0, [r2, #0]
 8008e12:	e7da      	b.n	8008dca <_free_r+0x22>
 8008e14:	d902      	bls.n	8008e1c <_free_r+0x74>
 8008e16:	230c      	movs	r3, #12
 8008e18:	602b      	str	r3, [r5, #0]
 8008e1a:	e7d6      	b.n	8008dca <_free_r+0x22>
 8008e1c:	6820      	ldr	r0, [r4, #0]
 8008e1e:	1821      	adds	r1, r4, r0
 8008e20:	428b      	cmp	r3, r1
 8008e22:	bf04      	itt	eq
 8008e24:	6819      	ldreq	r1, [r3, #0]
 8008e26:	685b      	ldreq	r3, [r3, #4]
 8008e28:	6063      	str	r3, [r4, #4]
 8008e2a:	bf04      	itt	eq
 8008e2c:	1809      	addeq	r1, r1, r0
 8008e2e:	6021      	streq	r1, [r4, #0]
 8008e30:	6054      	str	r4, [r2, #4]
 8008e32:	e7ca      	b.n	8008dca <_free_r+0x22>
 8008e34:	bd38      	pop	{r3, r4, r5, pc}
 8008e36:	bf00      	nop
 8008e38:	200009c8 	.word	0x200009c8

08008e3c <malloc>:
 8008e3c:	4b02      	ldr	r3, [pc, #8]	@ (8008e48 <malloc+0xc>)
 8008e3e:	4601      	mov	r1, r0
 8008e40:	6818      	ldr	r0, [r3, #0]
 8008e42:	f000 b825 	b.w	8008e90 <_malloc_r>
 8008e46:	bf00      	nop
 8008e48:	20000024 	.word	0x20000024

08008e4c <sbrk_aligned>:
 8008e4c:	b570      	push	{r4, r5, r6, lr}
 8008e4e:	4e0f      	ldr	r6, [pc, #60]	@ (8008e8c <sbrk_aligned+0x40>)
 8008e50:	460c      	mov	r4, r1
 8008e52:	6831      	ldr	r1, [r6, #0]
 8008e54:	4605      	mov	r5, r0
 8008e56:	b911      	cbnz	r1, 8008e5e <sbrk_aligned+0x12>
 8008e58:	f000 fe46 	bl	8009ae8 <_sbrk_r>
 8008e5c:	6030      	str	r0, [r6, #0]
 8008e5e:	4621      	mov	r1, r4
 8008e60:	4628      	mov	r0, r5
 8008e62:	f000 fe41 	bl	8009ae8 <_sbrk_r>
 8008e66:	1c43      	adds	r3, r0, #1
 8008e68:	d103      	bne.n	8008e72 <sbrk_aligned+0x26>
 8008e6a:	f04f 34ff 	mov.w	r4, #4294967295
 8008e6e:	4620      	mov	r0, r4
 8008e70:	bd70      	pop	{r4, r5, r6, pc}
 8008e72:	1cc4      	adds	r4, r0, #3
 8008e74:	f024 0403 	bic.w	r4, r4, #3
 8008e78:	42a0      	cmp	r0, r4
 8008e7a:	d0f8      	beq.n	8008e6e <sbrk_aligned+0x22>
 8008e7c:	1a21      	subs	r1, r4, r0
 8008e7e:	4628      	mov	r0, r5
 8008e80:	f000 fe32 	bl	8009ae8 <_sbrk_r>
 8008e84:	3001      	adds	r0, #1
 8008e86:	d1f2      	bne.n	8008e6e <sbrk_aligned+0x22>
 8008e88:	e7ef      	b.n	8008e6a <sbrk_aligned+0x1e>
 8008e8a:	bf00      	nop
 8008e8c:	200009c4 	.word	0x200009c4

08008e90 <_malloc_r>:
 8008e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e94:	1ccd      	adds	r5, r1, #3
 8008e96:	f025 0503 	bic.w	r5, r5, #3
 8008e9a:	3508      	adds	r5, #8
 8008e9c:	2d0c      	cmp	r5, #12
 8008e9e:	bf38      	it	cc
 8008ea0:	250c      	movcc	r5, #12
 8008ea2:	2d00      	cmp	r5, #0
 8008ea4:	4606      	mov	r6, r0
 8008ea6:	db01      	blt.n	8008eac <_malloc_r+0x1c>
 8008ea8:	42a9      	cmp	r1, r5
 8008eaa:	d904      	bls.n	8008eb6 <_malloc_r+0x26>
 8008eac:	230c      	movs	r3, #12
 8008eae:	6033      	str	r3, [r6, #0]
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008f8c <_malloc_r+0xfc>
 8008eba:	f000 f869 	bl	8008f90 <__malloc_lock>
 8008ebe:	f8d8 3000 	ldr.w	r3, [r8]
 8008ec2:	461c      	mov	r4, r3
 8008ec4:	bb44      	cbnz	r4, 8008f18 <_malloc_r+0x88>
 8008ec6:	4629      	mov	r1, r5
 8008ec8:	4630      	mov	r0, r6
 8008eca:	f7ff ffbf 	bl	8008e4c <sbrk_aligned>
 8008ece:	1c43      	adds	r3, r0, #1
 8008ed0:	4604      	mov	r4, r0
 8008ed2:	d158      	bne.n	8008f86 <_malloc_r+0xf6>
 8008ed4:	f8d8 4000 	ldr.w	r4, [r8]
 8008ed8:	4627      	mov	r7, r4
 8008eda:	2f00      	cmp	r7, #0
 8008edc:	d143      	bne.n	8008f66 <_malloc_r+0xd6>
 8008ede:	2c00      	cmp	r4, #0
 8008ee0:	d04b      	beq.n	8008f7a <_malloc_r+0xea>
 8008ee2:	6823      	ldr	r3, [r4, #0]
 8008ee4:	4639      	mov	r1, r7
 8008ee6:	4630      	mov	r0, r6
 8008ee8:	eb04 0903 	add.w	r9, r4, r3
 8008eec:	f000 fdfc 	bl	8009ae8 <_sbrk_r>
 8008ef0:	4581      	cmp	r9, r0
 8008ef2:	d142      	bne.n	8008f7a <_malloc_r+0xea>
 8008ef4:	6821      	ldr	r1, [r4, #0]
 8008ef6:	1a6d      	subs	r5, r5, r1
 8008ef8:	4629      	mov	r1, r5
 8008efa:	4630      	mov	r0, r6
 8008efc:	f7ff ffa6 	bl	8008e4c <sbrk_aligned>
 8008f00:	3001      	adds	r0, #1
 8008f02:	d03a      	beq.n	8008f7a <_malloc_r+0xea>
 8008f04:	6823      	ldr	r3, [r4, #0]
 8008f06:	442b      	add	r3, r5
 8008f08:	6023      	str	r3, [r4, #0]
 8008f0a:	f8d8 3000 	ldr.w	r3, [r8]
 8008f0e:	685a      	ldr	r2, [r3, #4]
 8008f10:	bb62      	cbnz	r2, 8008f6c <_malloc_r+0xdc>
 8008f12:	f8c8 7000 	str.w	r7, [r8]
 8008f16:	e00f      	b.n	8008f38 <_malloc_r+0xa8>
 8008f18:	6822      	ldr	r2, [r4, #0]
 8008f1a:	1b52      	subs	r2, r2, r5
 8008f1c:	d420      	bmi.n	8008f60 <_malloc_r+0xd0>
 8008f1e:	2a0b      	cmp	r2, #11
 8008f20:	d917      	bls.n	8008f52 <_malloc_r+0xc2>
 8008f22:	1961      	adds	r1, r4, r5
 8008f24:	42a3      	cmp	r3, r4
 8008f26:	6025      	str	r5, [r4, #0]
 8008f28:	bf18      	it	ne
 8008f2a:	6059      	strne	r1, [r3, #4]
 8008f2c:	6863      	ldr	r3, [r4, #4]
 8008f2e:	bf08      	it	eq
 8008f30:	f8c8 1000 	streq.w	r1, [r8]
 8008f34:	5162      	str	r2, [r4, r5]
 8008f36:	604b      	str	r3, [r1, #4]
 8008f38:	4630      	mov	r0, r6
 8008f3a:	f000 f82f 	bl	8008f9c <__malloc_unlock>
 8008f3e:	f104 000b 	add.w	r0, r4, #11
 8008f42:	1d23      	adds	r3, r4, #4
 8008f44:	f020 0007 	bic.w	r0, r0, #7
 8008f48:	1ac2      	subs	r2, r0, r3
 8008f4a:	bf1c      	itt	ne
 8008f4c:	1a1b      	subne	r3, r3, r0
 8008f4e:	50a3      	strne	r3, [r4, r2]
 8008f50:	e7af      	b.n	8008eb2 <_malloc_r+0x22>
 8008f52:	6862      	ldr	r2, [r4, #4]
 8008f54:	42a3      	cmp	r3, r4
 8008f56:	bf0c      	ite	eq
 8008f58:	f8c8 2000 	streq.w	r2, [r8]
 8008f5c:	605a      	strne	r2, [r3, #4]
 8008f5e:	e7eb      	b.n	8008f38 <_malloc_r+0xa8>
 8008f60:	4623      	mov	r3, r4
 8008f62:	6864      	ldr	r4, [r4, #4]
 8008f64:	e7ae      	b.n	8008ec4 <_malloc_r+0x34>
 8008f66:	463c      	mov	r4, r7
 8008f68:	687f      	ldr	r7, [r7, #4]
 8008f6a:	e7b6      	b.n	8008eda <_malloc_r+0x4a>
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	42a3      	cmp	r3, r4
 8008f72:	d1fb      	bne.n	8008f6c <_malloc_r+0xdc>
 8008f74:	2300      	movs	r3, #0
 8008f76:	6053      	str	r3, [r2, #4]
 8008f78:	e7de      	b.n	8008f38 <_malloc_r+0xa8>
 8008f7a:	230c      	movs	r3, #12
 8008f7c:	6033      	str	r3, [r6, #0]
 8008f7e:	4630      	mov	r0, r6
 8008f80:	f000 f80c 	bl	8008f9c <__malloc_unlock>
 8008f84:	e794      	b.n	8008eb0 <_malloc_r+0x20>
 8008f86:	6005      	str	r5, [r0, #0]
 8008f88:	e7d6      	b.n	8008f38 <_malloc_r+0xa8>
 8008f8a:	bf00      	nop
 8008f8c:	200009c8 	.word	0x200009c8

08008f90 <__malloc_lock>:
 8008f90:	4801      	ldr	r0, [pc, #4]	@ (8008f98 <__malloc_lock+0x8>)
 8008f92:	f7ff b8ba 	b.w	800810a <__retarget_lock_acquire_recursive>
 8008f96:	bf00      	nop
 8008f98:	200009c0 	.word	0x200009c0

08008f9c <__malloc_unlock>:
 8008f9c:	4801      	ldr	r0, [pc, #4]	@ (8008fa4 <__malloc_unlock+0x8>)
 8008f9e:	f7ff b8b5 	b.w	800810c <__retarget_lock_release_recursive>
 8008fa2:	bf00      	nop
 8008fa4:	200009c0 	.word	0x200009c0

08008fa8 <_Balloc>:
 8008fa8:	b570      	push	{r4, r5, r6, lr}
 8008faa:	69c6      	ldr	r6, [r0, #28]
 8008fac:	4604      	mov	r4, r0
 8008fae:	460d      	mov	r5, r1
 8008fb0:	b976      	cbnz	r6, 8008fd0 <_Balloc+0x28>
 8008fb2:	2010      	movs	r0, #16
 8008fb4:	f7ff ff42 	bl	8008e3c <malloc>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	61e0      	str	r0, [r4, #28]
 8008fbc:	b920      	cbnz	r0, 8008fc8 <_Balloc+0x20>
 8008fbe:	4b18      	ldr	r3, [pc, #96]	@ (8009020 <_Balloc+0x78>)
 8008fc0:	4818      	ldr	r0, [pc, #96]	@ (8009024 <_Balloc+0x7c>)
 8008fc2:	216b      	movs	r1, #107	@ 0x6b
 8008fc4:	f000 fdae 	bl	8009b24 <__assert_func>
 8008fc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fcc:	6006      	str	r6, [r0, #0]
 8008fce:	60c6      	str	r6, [r0, #12]
 8008fd0:	69e6      	ldr	r6, [r4, #28]
 8008fd2:	68f3      	ldr	r3, [r6, #12]
 8008fd4:	b183      	cbz	r3, 8008ff8 <_Balloc+0x50>
 8008fd6:	69e3      	ldr	r3, [r4, #28]
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008fde:	b9b8      	cbnz	r0, 8009010 <_Balloc+0x68>
 8008fe0:	2101      	movs	r1, #1
 8008fe2:	fa01 f605 	lsl.w	r6, r1, r5
 8008fe6:	1d72      	adds	r2, r6, #5
 8008fe8:	0092      	lsls	r2, r2, #2
 8008fea:	4620      	mov	r0, r4
 8008fec:	f000 fdb8 	bl	8009b60 <_calloc_r>
 8008ff0:	b160      	cbz	r0, 800900c <_Balloc+0x64>
 8008ff2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ff6:	e00e      	b.n	8009016 <_Balloc+0x6e>
 8008ff8:	2221      	movs	r2, #33	@ 0x21
 8008ffa:	2104      	movs	r1, #4
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	f000 fdaf 	bl	8009b60 <_calloc_r>
 8009002:	69e3      	ldr	r3, [r4, #28]
 8009004:	60f0      	str	r0, [r6, #12]
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d1e4      	bne.n	8008fd6 <_Balloc+0x2e>
 800900c:	2000      	movs	r0, #0
 800900e:	bd70      	pop	{r4, r5, r6, pc}
 8009010:	6802      	ldr	r2, [r0, #0]
 8009012:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009016:	2300      	movs	r3, #0
 8009018:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800901c:	e7f7      	b.n	800900e <_Balloc+0x66>
 800901e:	bf00      	nop
 8009020:	0800c341 	.word	0x0800c341
 8009024:	0800c3c1 	.word	0x0800c3c1

08009028 <_Bfree>:
 8009028:	b570      	push	{r4, r5, r6, lr}
 800902a:	69c6      	ldr	r6, [r0, #28]
 800902c:	4605      	mov	r5, r0
 800902e:	460c      	mov	r4, r1
 8009030:	b976      	cbnz	r6, 8009050 <_Bfree+0x28>
 8009032:	2010      	movs	r0, #16
 8009034:	f7ff ff02 	bl	8008e3c <malloc>
 8009038:	4602      	mov	r2, r0
 800903a:	61e8      	str	r0, [r5, #28]
 800903c:	b920      	cbnz	r0, 8009048 <_Bfree+0x20>
 800903e:	4b09      	ldr	r3, [pc, #36]	@ (8009064 <_Bfree+0x3c>)
 8009040:	4809      	ldr	r0, [pc, #36]	@ (8009068 <_Bfree+0x40>)
 8009042:	218f      	movs	r1, #143	@ 0x8f
 8009044:	f000 fd6e 	bl	8009b24 <__assert_func>
 8009048:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800904c:	6006      	str	r6, [r0, #0]
 800904e:	60c6      	str	r6, [r0, #12]
 8009050:	b13c      	cbz	r4, 8009062 <_Bfree+0x3a>
 8009052:	69eb      	ldr	r3, [r5, #28]
 8009054:	6862      	ldr	r2, [r4, #4]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800905c:	6021      	str	r1, [r4, #0]
 800905e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009062:	bd70      	pop	{r4, r5, r6, pc}
 8009064:	0800c341 	.word	0x0800c341
 8009068:	0800c3c1 	.word	0x0800c3c1

0800906c <__multadd>:
 800906c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009070:	690d      	ldr	r5, [r1, #16]
 8009072:	4607      	mov	r7, r0
 8009074:	460c      	mov	r4, r1
 8009076:	461e      	mov	r6, r3
 8009078:	f101 0c14 	add.w	ip, r1, #20
 800907c:	2000      	movs	r0, #0
 800907e:	f8dc 3000 	ldr.w	r3, [ip]
 8009082:	b299      	uxth	r1, r3
 8009084:	fb02 6101 	mla	r1, r2, r1, r6
 8009088:	0c1e      	lsrs	r6, r3, #16
 800908a:	0c0b      	lsrs	r3, r1, #16
 800908c:	fb02 3306 	mla	r3, r2, r6, r3
 8009090:	b289      	uxth	r1, r1
 8009092:	3001      	adds	r0, #1
 8009094:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009098:	4285      	cmp	r5, r0
 800909a:	f84c 1b04 	str.w	r1, [ip], #4
 800909e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80090a2:	dcec      	bgt.n	800907e <__multadd+0x12>
 80090a4:	b30e      	cbz	r6, 80090ea <__multadd+0x7e>
 80090a6:	68a3      	ldr	r3, [r4, #8]
 80090a8:	42ab      	cmp	r3, r5
 80090aa:	dc19      	bgt.n	80090e0 <__multadd+0x74>
 80090ac:	6861      	ldr	r1, [r4, #4]
 80090ae:	4638      	mov	r0, r7
 80090b0:	3101      	adds	r1, #1
 80090b2:	f7ff ff79 	bl	8008fa8 <_Balloc>
 80090b6:	4680      	mov	r8, r0
 80090b8:	b928      	cbnz	r0, 80090c6 <__multadd+0x5a>
 80090ba:	4602      	mov	r2, r0
 80090bc:	4b0c      	ldr	r3, [pc, #48]	@ (80090f0 <__multadd+0x84>)
 80090be:	480d      	ldr	r0, [pc, #52]	@ (80090f4 <__multadd+0x88>)
 80090c0:	21ba      	movs	r1, #186	@ 0xba
 80090c2:	f000 fd2f 	bl	8009b24 <__assert_func>
 80090c6:	6922      	ldr	r2, [r4, #16]
 80090c8:	3202      	adds	r2, #2
 80090ca:	f104 010c 	add.w	r1, r4, #12
 80090ce:	0092      	lsls	r2, r2, #2
 80090d0:	300c      	adds	r0, #12
 80090d2:	f000 fd19 	bl	8009b08 <memcpy>
 80090d6:	4621      	mov	r1, r4
 80090d8:	4638      	mov	r0, r7
 80090da:	f7ff ffa5 	bl	8009028 <_Bfree>
 80090de:	4644      	mov	r4, r8
 80090e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80090e4:	3501      	adds	r5, #1
 80090e6:	615e      	str	r6, [r3, #20]
 80090e8:	6125      	str	r5, [r4, #16]
 80090ea:	4620      	mov	r0, r4
 80090ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090f0:	0800c3b0 	.word	0x0800c3b0
 80090f4:	0800c3c1 	.word	0x0800c3c1

080090f8 <__hi0bits>:
 80090f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80090fc:	4603      	mov	r3, r0
 80090fe:	bf36      	itet	cc
 8009100:	0403      	lslcc	r3, r0, #16
 8009102:	2000      	movcs	r0, #0
 8009104:	2010      	movcc	r0, #16
 8009106:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800910a:	bf3c      	itt	cc
 800910c:	021b      	lslcc	r3, r3, #8
 800910e:	3008      	addcc	r0, #8
 8009110:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009114:	bf3c      	itt	cc
 8009116:	011b      	lslcc	r3, r3, #4
 8009118:	3004      	addcc	r0, #4
 800911a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800911e:	bf3c      	itt	cc
 8009120:	009b      	lslcc	r3, r3, #2
 8009122:	3002      	addcc	r0, #2
 8009124:	2b00      	cmp	r3, #0
 8009126:	db05      	blt.n	8009134 <__hi0bits+0x3c>
 8009128:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800912c:	f100 0001 	add.w	r0, r0, #1
 8009130:	bf08      	it	eq
 8009132:	2020      	moveq	r0, #32
 8009134:	4770      	bx	lr

08009136 <__lo0bits>:
 8009136:	6803      	ldr	r3, [r0, #0]
 8009138:	4602      	mov	r2, r0
 800913a:	f013 0007 	ands.w	r0, r3, #7
 800913e:	d00b      	beq.n	8009158 <__lo0bits+0x22>
 8009140:	07d9      	lsls	r1, r3, #31
 8009142:	d421      	bmi.n	8009188 <__lo0bits+0x52>
 8009144:	0798      	lsls	r0, r3, #30
 8009146:	bf49      	itett	mi
 8009148:	085b      	lsrmi	r3, r3, #1
 800914a:	089b      	lsrpl	r3, r3, #2
 800914c:	2001      	movmi	r0, #1
 800914e:	6013      	strmi	r3, [r2, #0]
 8009150:	bf5c      	itt	pl
 8009152:	6013      	strpl	r3, [r2, #0]
 8009154:	2002      	movpl	r0, #2
 8009156:	4770      	bx	lr
 8009158:	b299      	uxth	r1, r3
 800915a:	b909      	cbnz	r1, 8009160 <__lo0bits+0x2a>
 800915c:	0c1b      	lsrs	r3, r3, #16
 800915e:	2010      	movs	r0, #16
 8009160:	b2d9      	uxtb	r1, r3
 8009162:	b909      	cbnz	r1, 8009168 <__lo0bits+0x32>
 8009164:	3008      	adds	r0, #8
 8009166:	0a1b      	lsrs	r3, r3, #8
 8009168:	0719      	lsls	r1, r3, #28
 800916a:	bf04      	itt	eq
 800916c:	091b      	lsreq	r3, r3, #4
 800916e:	3004      	addeq	r0, #4
 8009170:	0799      	lsls	r1, r3, #30
 8009172:	bf04      	itt	eq
 8009174:	089b      	lsreq	r3, r3, #2
 8009176:	3002      	addeq	r0, #2
 8009178:	07d9      	lsls	r1, r3, #31
 800917a:	d403      	bmi.n	8009184 <__lo0bits+0x4e>
 800917c:	085b      	lsrs	r3, r3, #1
 800917e:	f100 0001 	add.w	r0, r0, #1
 8009182:	d003      	beq.n	800918c <__lo0bits+0x56>
 8009184:	6013      	str	r3, [r2, #0]
 8009186:	4770      	bx	lr
 8009188:	2000      	movs	r0, #0
 800918a:	4770      	bx	lr
 800918c:	2020      	movs	r0, #32
 800918e:	4770      	bx	lr

08009190 <__i2b>:
 8009190:	b510      	push	{r4, lr}
 8009192:	460c      	mov	r4, r1
 8009194:	2101      	movs	r1, #1
 8009196:	f7ff ff07 	bl	8008fa8 <_Balloc>
 800919a:	4602      	mov	r2, r0
 800919c:	b928      	cbnz	r0, 80091aa <__i2b+0x1a>
 800919e:	4b05      	ldr	r3, [pc, #20]	@ (80091b4 <__i2b+0x24>)
 80091a0:	4805      	ldr	r0, [pc, #20]	@ (80091b8 <__i2b+0x28>)
 80091a2:	f240 1145 	movw	r1, #325	@ 0x145
 80091a6:	f000 fcbd 	bl	8009b24 <__assert_func>
 80091aa:	2301      	movs	r3, #1
 80091ac:	6144      	str	r4, [r0, #20]
 80091ae:	6103      	str	r3, [r0, #16]
 80091b0:	bd10      	pop	{r4, pc}
 80091b2:	bf00      	nop
 80091b4:	0800c3b0 	.word	0x0800c3b0
 80091b8:	0800c3c1 	.word	0x0800c3c1

080091bc <__multiply>:
 80091bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c0:	4614      	mov	r4, r2
 80091c2:	690a      	ldr	r2, [r1, #16]
 80091c4:	6923      	ldr	r3, [r4, #16]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	bfa8      	it	ge
 80091ca:	4623      	movge	r3, r4
 80091cc:	460f      	mov	r7, r1
 80091ce:	bfa4      	itt	ge
 80091d0:	460c      	movge	r4, r1
 80091d2:	461f      	movge	r7, r3
 80091d4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80091d8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80091dc:	68a3      	ldr	r3, [r4, #8]
 80091de:	6861      	ldr	r1, [r4, #4]
 80091e0:	eb0a 0609 	add.w	r6, sl, r9
 80091e4:	42b3      	cmp	r3, r6
 80091e6:	b085      	sub	sp, #20
 80091e8:	bfb8      	it	lt
 80091ea:	3101      	addlt	r1, #1
 80091ec:	f7ff fedc 	bl	8008fa8 <_Balloc>
 80091f0:	b930      	cbnz	r0, 8009200 <__multiply+0x44>
 80091f2:	4602      	mov	r2, r0
 80091f4:	4b44      	ldr	r3, [pc, #272]	@ (8009308 <__multiply+0x14c>)
 80091f6:	4845      	ldr	r0, [pc, #276]	@ (800930c <__multiply+0x150>)
 80091f8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80091fc:	f000 fc92 	bl	8009b24 <__assert_func>
 8009200:	f100 0514 	add.w	r5, r0, #20
 8009204:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009208:	462b      	mov	r3, r5
 800920a:	2200      	movs	r2, #0
 800920c:	4543      	cmp	r3, r8
 800920e:	d321      	bcc.n	8009254 <__multiply+0x98>
 8009210:	f107 0114 	add.w	r1, r7, #20
 8009214:	f104 0214 	add.w	r2, r4, #20
 8009218:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800921c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009220:	9302      	str	r3, [sp, #8]
 8009222:	1b13      	subs	r3, r2, r4
 8009224:	3b15      	subs	r3, #21
 8009226:	f023 0303 	bic.w	r3, r3, #3
 800922a:	3304      	adds	r3, #4
 800922c:	f104 0715 	add.w	r7, r4, #21
 8009230:	42ba      	cmp	r2, r7
 8009232:	bf38      	it	cc
 8009234:	2304      	movcc	r3, #4
 8009236:	9301      	str	r3, [sp, #4]
 8009238:	9b02      	ldr	r3, [sp, #8]
 800923a:	9103      	str	r1, [sp, #12]
 800923c:	428b      	cmp	r3, r1
 800923e:	d80c      	bhi.n	800925a <__multiply+0x9e>
 8009240:	2e00      	cmp	r6, #0
 8009242:	dd03      	ble.n	800924c <__multiply+0x90>
 8009244:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009248:	2b00      	cmp	r3, #0
 800924a:	d05b      	beq.n	8009304 <__multiply+0x148>
 800924c:	6106      	str	r6, [r0, #16]
 800924e:	b005      	add	sp, #20
 8009250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009254:	f843 2b04 	str.w	r2, [r3], #4
 8009258:	e7d8      	b.n	800920c <__multiply+0x50>
 800925a:	f8b1 a000 	ldrh.w	sl, [r1]
 800925e:	f1ba 0f00 	cmp.w	sl, #0
 8009262:	d024      	beq.n	80092ae <__multiply+0xf2>
 8009264:	f104 0e14 	add.w	lr, r4, #20
 8009268:	46a9      	mov	r9, r5
 800926a:	f04f 0c00 	mov.w	ip, #0
 800926e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009272:	f8d9 3000 	ldr.w	r3, [r9]
 8009276:	fa1f fb87 	uxth.w	fp, r7
 800927a:	b29b      	uxth	r3, r3
 800927c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009280:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009284:	f8d9 7000 	ldr.w	r7, [r9]
 8009288:	4463      	add	r3, ip
 800928a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800928e:	fb0a c70b 	mla	r7, sl, fp, ip
 8009292:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009296:	b29b      	uxth	r3, r3
 8009298:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800929c:	4572      	cmp	r2, lr
 800929e:	f849 3b04 	str.w	r3, [r9], #4
 80092a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80092a6:	d8e2      	bhi.n	800926e <__multiply+0xb2>
 80092a8:	9b01      	ldr	r3, [sp, #4]
 80092aa:	f845 c003 	str.w	ip, [r5, r3]
 80092ae:	9b03      	ldr	r3, [sp, #12]
 80092b0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80092b4:	3104      	adds	r1, #4
 80092b6:	f1b9 0f00 	cmp.w	r9, #0
 80092ba:	d021      	beq.n	8009300 <__multiply+0x144>
 80092bc:	682b      	ldr	r3, [r5, #0]
 80092be:	f104 0c14 	add.w	ip, r4, #20
 80092c2:	46ae      	mov	lr, r5
 80092c4:	f04f 0a00 	mov.w	sl, #0
 80092c8:	f8bc b000 	ldrh.w	fp, [ip]
 80092cc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80092d0:	fb09 770b 	mla	r7, r9, fp, r7
 80092d4:	4457      	add	r7, sl
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80092dc:	f84e 3b04 	str.w	r3, [lr], #4
 80092e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80092e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80092e8:	f8be 3000 	ldrh.w	r3, [lr]
 80092ec:	fb09 330a 	mla	r3, r9, sl, r3
 80092f0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80092f4:	4562      	cmp	r2, ip
 80092f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80092fa:	d8e5      	bhi.n	80092c8 <__multiply+0x10c>
 80092fc:	9f01      	ldr	r7, [sp, #4]
 80092fe:	51eb      	str	r3, [r5, r7]
 8009300:	3504      	adds	r5, #4
 8009302:	e799      	b.n	8009238 <__multiply+0x7c>
 8009304:	3e01      	subs	r6, #1
 8009306:	e79b      	b.n	8009240 <__multiply+0x84>
 8009308:	0800c3b0 	.word	0x0800c3b0
 800930c:	0800c3c1 	.word	0x0800c3c1

08009310 <__pow5mult>:
 8009310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009314:	4615      	mov	r5, r2
 8009316:	f012 0203 	ands.w	r2, r2, #3
 800931a:	4607      	mov	r7, r0
 800931c:	460e      	mov	r6, r1
 800931e:	d007      	beq.n	8009330 <__pow5mult+0x20>
 8009320:	4c25      	ldr	r4, [pc, #148]	@ (80093b8 <__pow5mult+0xa8>)
 8009322:	3a01      	subs	r2, #1
 8009324:	2300      	movs	r3, #0
 8009326:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800932a:	f7ff fe9f 	bl	800906c <__multadd>
 800932e:	4606      	mov	r6, r0
 8009330:	10ad      	asrs	r5, r5, #2
 8009332:	d03d      	beq.n	80093b0 <__pow5mult+0xa0>
 8009334:	69fc      	ldr	r4, [r7, #28]
 8009336:	b97c      	cbnz	r4, 8009358 <__pow5mult+0x48>
 8009338:	2010      	movs	r0, #16
 800933a:	f7ff fd7f 	bl	8008e3c <malloc>
 800933e:	4602      	mov	r2, r0
 8009340:	61f8      	str	r0, [r7, #28]
 8009342:	b928      	cbnz	r0, 8009350 <__pow5mult+0x40>
 8009344:	4b1d      	ldr	r3, [pc, #116]	@ (80093bc <__pow5mult+0xac>)
 8009346:	481e      	ldr	r0, [pc, #120]	@ (80093c0 <__pow5mult+0xb0>)
 8009348:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800934c:	f000 fbea 	bl	8009b24 <__assert_func>
 8009350:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009354:	6004      	str	r4, [r0, #0]
 8009356:	60c4      	str	r4, [r0, #12]
 8009358:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800935c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009360:	b94c      	cbnz	r4, 8009376 <__pow5mult+0x66>
 8009362:	f240 2171 	movw	r1, #625	@ 0x271
 8009366:	4638      	mov	r0, r7
 8009368:	f7ff ff12 	bl	8009190 <__i2b>
 800936c:	2300      	movs	r3, #0
 800936e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009372:	4604      	mov	r4, r0
 8009374:	6003      	str	r3, [r0, #0]
 8009376:	f04f 0900 	mov.w	r9, #0
 800937a:	07eb      	lsls	r3, r5, #31
 800937c:	d50a      	bpl.n	8009394 <__pow5mult+0x84>
 800937e:	4631      	mov	r1, r6
 8009380:	4622      	mov	r2, r4
 8009382:	4638      	mov	r0, r7
 8009384:	f7ff ff1a 	bl	80091bc <__multiply>
 8009388:	4631      	mov	r1, r6
 800938a:	4680      	mov	r8, r0
 800938c:	4638      	mov	r0, r7
 800938e:	f7ff fe4b 	bl	8009028 <_Bfree>
 8009392:	4646      	mov	r6, r8
 8009394:	106d      	asrs	r5, r5, #1
 8009396:	d00b      	beq.n	80093b0 <__pow5mult+0xa0>
 8009398:	6820      	ldr	r0, [r4, #0]
 800939a:	b938      	cbnz	r0, 80093ac <__pow5mult+0x9c>
 800939c:	4622      	mov	r2, r4
 800939e:	4621      	mov	r1, r4
 80093a0:	4638      	mov	r0, r7
 80093a2:	f7ff ff0b 	bl	80091bc <__multiply>
 80093a6:	6020      	str	r0, [r4, #0]
 80093a8:	f8c0 9000 	str.w	r9, [r0]
 80093ac:	4604      	mov	r4, r0
 80093ae:	e7e4      	b.n	800937a <__pow5mult+0x6a>
 80093b0:	4630      	mov	r0, r6
 80093b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093b6:	bf00      	nop
 80093b8:	0800c41c 	.word	0x0800c41c
 80093bc:	0800c341 	.word	0x0800c341
 80093c0:	0800c3c1 	.word	0x0800c3c1

080093c4 <__lshift>:
 80093c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093c8:	460c      	mov	r4, r1
 80093ca:	6849      	ldr	r1, [r1, #4]
 80093cc:	6923      	ldr	r3, [r4, #16]
 80093ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80093d2:	68a3      	ldr	r3, [r4, #8]
 80093d4:	4607      	mov	r7, r0
 80093d6:	4691      	mov	r9, r2
 80093d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80093dc:	f108 0601 	add.w	r6, r8, #1
 80093e0:	42b3      	cmp	r3, r6
 80093e2:	db0b      	blt.n	80093fc <__lshift+0x38>
 80093e4:	4638      	mov	r0, r7
 80093e6:	f7ff fddf 	bl	8008fa8 <_Balloc>
 80093ea:	4605      	mov	r5, r0
 80093ec:	b948      	cbnz	r0, 8009402 <__lshift+0x3e>
 80093ee:	4602      	mov	r2, r0
 80093f0:	4b28      	ldr	r3, [pc, #160]	@ (8009494 <__lshift+0xd0>)
 80093f2:	4829      	ldr	r0, [pc, #164]	@ (8009498 <__lshift+0xd4>)
 80093f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80093f8:	f000 fb94 	bl	8009b24 <__assert_func>
 80093fc:	3101      	adds	r1, #1
 80093fe:	005b      	lsls	r3, r3, #1
 8009400:	e7ee      	b.n	80093e0 <__lshift+0x1c>
 8009402:	2300      	movs	r3, #0
 8009404:	f100 0114 	add.w	r1, r0, #20
 8009408:	f100 0210 	add.w	r2, r0, #16
 800940c:	4618      	mov	r0, r3
 800940e:	4553      	cmp	r3, sl
 8009410:	db33      	blt.n	800947a <__lshift+0xb6>
 8009412:	6920      	ldr	r0, [r4, #16]
 8009414:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009418:	f104 0314 	add.w	r3, r4, #20
 800941c:	f019 091f 	ands.w	r9, r9, #31
 8009420:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009424:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009428:	d02b      	beq.n	8009482 <__lshift+0xbe>
 800942a:	f1c9 0e20 	rsb	lr, r9, #32
 800942e:	468a      	mov	sl, r1
 8009430:	2200      	movs	r2, #0
 8009432:	6818      	ldr	r0, [r3, #0]
 8009434:	fa00 f009 	lsl.w	r0, r0, r9
 8009438:	4310      	orrs	r0, r2
 800943a:	f84a 0b04 	str.w	r0, [sl], #4
 800943e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009442:	459c      	cmp	ip, r3
 8009444:	fa22 f20e 	lsr.w	r2, r2, lr
 8009448:	d8f3      	bhi.n	8009432 <__lshift+0x6e>
 800944a:	ebac 0304 	sub.w	r3, ip, r4
 800944e:	3b15      	subs	r3, #21
 8009450:	f023 0303 	bic.w	r3, r3, #3
 8009454:	3304      	adds	r3, #4
 8009456:	f104 0015 	add.w	r0, r4, #21
 800945a:	4584      	cmp	ip, r0
 800945c:	bf38      	it	cc
 800945e:	2304      	movcc	r3, #4
 8009460:	50ca      	str	r2, [r1, r3]
 8009462:	b10a      	cbz	r2, 8009468 <__lshift+0xa4>
 8009464:	f108 0602 	add.w	r6, r8, #2
 8009468:	3e01      	subs	r6, #1
 800946a:	4638      	mov	r0, r7
 800946c:	612e      	str	r6, [r5, #16]
 800946e:	4621      	mov	r1, r4
 8009470:	f7ff fdda 	bl	8009028 <_Bfree>
 8009474:	4628      	mov	r0, r5
 8009476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800947a:	f842 0f04 	str.w	r0, [r2, #4]!
 800947e:	3301      	adds	r3, #1
 8009480:	e7c5      	b.n	800940e <__lshift+0x4a>
 8009482:	3904      	subs	r1, #4
 8009484:	f853 2b04 	ldr.w	r2, [r3], #4
 8009488:	f841 2f04 	str.w	r2, [r1, #4]!
 800948c:	459c      	cmp	ip, r3
 800948e:	d8f9      	bhi.n	8009484 <__lshift+0xc0>
 8009490:	e7ea      	b.n	8009468 <__lshift+0xa4>
 8009492:	bf00      	nop
 8009494:	0800c3b0 	.word	0x0800c3b0
 8009498:	0800c3c1 	.word	0x0800c3c1

0800949c <__mcmp>:
 800949c:	690a      	ldr	r2, [r1, #16]
 800949e:	4603      	mov	r3, r0
 80094a0:	6900      	ldr	r0, [r0, #16]
 80094a2:	1a80      	subs	r0, r0, r2
 80094a4:	b530      	push	{r4, r5, lr}
 80094a6:	d10e      	bne.n	80094c6 <__mcmp+0x2a>
 80094a8:	3314      	adds	r3, #20
 80094aa:	3114      	adds	r1, #20
 80094ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80094b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80094b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80094b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80094bc:	4295      	cmp	r5, r2
 80094be:	d003      	beq.n	80094c8 <__mcmp+0x2c>
 80094c0:	d205      	bcs.n	80094ce <__mcmp+0x32>
 80094c2:	f04f 30ff 	mov.w	r0, #4294967295
 80094c6:	bd30      	pop	{r4, r5, pc}
 80094c8:	42a3      	cmp	r3, r4
 80094ca:	d3f3      	bcc.n	80094b4 <__mcmp+0x18>
 80094cc:	e7fb      	b.n	80094c6 <__mcmp+0x2a>
 80094ce:	2001      	movs	r0, #1
 80094d0:	e7f9      	b.n	80094c6 <__mcmp+0x2a>
	...

080094d4 <__mdiff>:
 80094d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094d8:	4689      	mov	r9, r1
 80094da:	4606      	mov	r6, r0
 80094dc:	4611      	mov	r1, r2
 80094de:	4648      	mov	r0, r9
 80094e0:	4614      	mov	r4, r2
 80094e2:	f7ff ffdb 	bl	800949c <__mcmp>
 80094e6:	1e05      	subs	r5, r0, #0
 80094e8:	d112      	bne.n	8009510 <__mdiff+0x3c>
 80094ea:	4629      	mov	r1, r5
 80094ec:	4630      	mov	r0, r6
 80094ee:	f7ff fd5b 	bl	8008fa8 <_Balloc>
 80094f2:	4602      	mov	r2, r0
 80094f4:	b928      	cbnz	r0, 8009502 <__mdiff+0x2e>
 80094f6:	4b3f      	ldr	r3, [pc, #252]	@ (80095f4 <__mdiff+0x120>)
 80094f8:	f240 2137 	movw	r1, #567	@ 0x237
 80094fc:	483e      	ldr	r0, [pc, #248]	@ (80095f8 <__mdiff+0x124>)
 80094fe:	f000 fb11 	bl	8009b24 <__assert_func>
 8009502:	2301      	movs	r3, #1
 8009504:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009508:	4610      	mov	r0, r2
 800950a:	b003      	add	sp, #12
 800950c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009510:	bfbc      	itt	lt
 8009512:	464b      	movlt	r3, r9
 8009514:	46a1      	movlt	r9, r4
 8009516:	4630      	mov	r0, r6
 8009518:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800951c:	bfba      	itte	lt
 800951e:	461c      	movlt	r4, r3
 8009520:	2501      	movlt	r5, #1
 8009522:	2500      	movge	r5, #0
 8009524:	f7ff fd40 	bl	8008fa8 <_Balloc>
 8009528:	4602      	mov	r2, r0
 800952a:	b918      	cbnz	r0, 8009534 <__mdiff+0x60>
 800952c:	4b31      	ldr	r3, [pc, #196]	@ (80095f4 <__mdiff+0x120>)
 800952e:	f240 2145 	movw	r1, #581	@ 0x245
 8009532:	e7e3      	b.n	80094fc <__mdiff+0x28>
 8009534:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009538:	6926      	ldr	r6, [r4, #16]
 800953a:	60c5      	str	r5, [r0, #12]
 800953c:	f109 0310 	add.w	r3, r9, #16
 8009540:	f109 0514 	add.w	r5, r9, #20
 8009544:	f104 0e14 	add.w	lr, r4, #20
 8009548:	f100 0b14 	add.w	fp, r0, #20
 800954c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009550:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009554:	9301      	str	r3, [sp, #4]
 8009556:	46d9      	mov	r9, fp
 8009558:	f04f 0c00 	mov.w	ip, #0
 800955c:	9b01      	ldr	r3, [sp, #4]
 800955e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009562:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009566:	9301      	str	r3, [sp, #4]
 8009568:	fa1f f38a 	uxth.w	r3, sl
 800956c:	4619      	mov	r1, r3
 800956e:	b283      	uxth	r3, r0
 8009570:	1acb      	subs	r3, r1, r3
 8009572:	0c00      	lsrs	r0, r0, #16
 8009574:	4463      	add	r3, ip
 8009576:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800957a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800957e:	b29b      	uxth	r3, r3
 8009580:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009584:	4576      	cmp	r6, lr
 8009586:	f849 3b04 	str.w	r3, [r9], #4
 800958a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800958e:	d8e5      	bhi.n	800955c <__mdiff+0x88>
 8009590:	1b33      	subs	r3, r6, r4
 8009592:	3b15      	subs	r3, #21
 8009594:	f023 0303 	bic.w	r3, r3, #3
 8009598:	3415      	adds	r4, #21
 800959a:	3304      	adds	r3, #4
 800959c:	42a6      	cmp	r6, r4
 800959e:	bf38      	it	cc
 80095a0:	2304      	movcc	r3, #4
 80095a2:	441d      	add	r5, r3
 80095a4:	445b      	add	r3, fp
 80095a6:	461e      	mov	r6, r3
 80095a8:	462c      	mov	r4, r5
 80095aa:	4544      	cmp	r4, r8
 80095ac:	d30e      	bcc.n	80095cc <__mdiff+0xf8>
 80095ae:	f108 0103 	add.w	r1, r8, #3
 80095b2:	1b49      	subs	r1, r1, r5
 80095b4:	f021 0103 	bic.w	r1, r1, #3
 80095b8:	3d03      	subs	r5, #3
 80095ba:	45a8      	cmp	r8, r5
 80095bc:	bf38      	it	cc
 80095be:	2100      	movcc	r1, #0
 80095c0:	440b      	add	r3, r1
 80095c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80095c6:	b191      	cbz	r1, 80095ee <__mdiff+0x11a>
 80095c8:	6117      	str	r7, [r2, #16]
 80095ca:	e79d      	b.n	8009508 <__mdiff+0x34>
 80095cc:	f854 1b04 	ldr.w	r1, [r4], #4
 80095d0:	46e6      	mov	lr, ip
 80095d2:	0c08      	lsrs	r0, r1, #16
 80095d4:	fa1c fc81 	uxtah	ip, ip, r1
 80095d8:	4471      	add	r1, lr
 80095da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80095de:	b289      	uxth	r1, r1
 80095e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80095e4:	f846 1b04 	str.w	r1, [r6], #4
 80095e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80095ec:	e7dd      	b.n	80095aa <__mdiff+0xd6>
 80095ee:	3f01      	subs	r7, #1
 80095f0:	e7e7      	b.n	80095c2 <__mdiff+0xee>
 80095f2:	bf00      	nop
 80095f4:	0800c3b0 	.word	0x0800c3b0
 80095f8:	0800c3c1 	.word	0x0800c3c1

080095fc <__d2b>:
 80095fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009600:	460f      	mov	r7, r1
 8009602:	2101      	movs	r1, #1
 8009604:	ec59 8b10 	vmov	r8, r9, d0
 8009608:	4616      	mov	r6, r2
 800960a:	f7ff fccd 	bl	8008fa8 <_Balloc>
 800960e:	4604      	mov	r4, r0
 8009610:	b930      	cbnz	r0, 8009620 <__d2b+0x24>
 8009612:	4602      	mov	r2, r0
 8009614:	4b23      	ldr	r3, [pc, #140]	@ (80096a4 <__d2b+0xa8>)
 8009616:	4824      	ldr	r0, [pc, #144]	@ (80096a8 <__d2b+0xac>)
 8009618:	f240 310f 	movw	r1, #783	@ 0x30f
 800961c:	f000 fa82 	bl	8009b24 <__assert_func>
 8009620:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009624:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009628:	b10d      	cbz	r5, 800962e <__d2b+0x32>
 800962a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800962e:	9301      	str	r3, [sp, #4]
 8009630:	f1b8 0300 	subs.w	r3, r8, #0
 8009634:	d023      	beq.n	800967e <__d2b+0x82>
 8009636:	4668      	mov	r0, sp
 8009638:	9300      	str	r3, [sp, #0]
 800963a:	f7ff fd7c 	bl	8009136 <__lo0bits>
 800963e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009642:	b1d0      	cbz	r0, 800967a <__d2b+0x7e>
 8009644:	f1c0 0320 	rsb	r3, r0, #32
 8009648:	fa02 f303 	lsl.w	r3, r2, r3
 800964c:	430b      	orrs	r3, r1
 800964e:	40c2      	lsrs	r2, r0
 8009650:	6163      	str	r3, [r4, #20]
 8009652:	9201      	str	r2, [sp, #4]
 8009654:	9b01      	ldr	r3, [sp, #4]
 8009656:	61a3      	str	r3, [r4, #24]
 8009658:	2b00      	cmp	r3, #0
 800965a:	bf0c      	ite	eq
 800965c:	2201      	moveq	r2, #1
 800965e:	2202      	movne	r2, #2
 8009660:	6122      	str	r2, [r4, #16]
 8009662:	b1a5      	cbz	r5, 800968e <__d2b+0x92>
 8009664:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009668:	4405      	add	r5, r0
 800966a:	603d      	str	r5, [r7, #0]
 800966c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009670:	6030      	str	r0, [r6, #0]
 8009672:	4620      	mov	r0, r4
 8009674:	b003      	add	sp, #12
 8009676:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800967a:	6161      	str	r1, [r4, #20]
 800967c:	e7ea      	b.n	8009654 <__d2b+0x58>
 800967e:	a801      	add	r0, sp, #4
 8009680:	f7ff fd59 	bl	8009136 <__lo0bits>
 8009684:	9b01      	ldr	r3, [sp, #4]
 8009686:	6163      	str	r3, [r4, #20]
 8009688:	3020      	adds	r0, #32
 800968a:	2201      	movs	r2, #1
 800968c:	e7e8      	b.n	8009660 <__d2b+0x64>
 800968e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009692:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009696:	6038      	str	r0, [r7, #0]
 8009698:	6918      	ldr	r0, [r3, #16]
 800969a:	f7ff fd2d 	bl	80090f8 <__hi0bits>
 800969e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80096a2:	e7e5      	b.n	8009670 <__d2b+0x74>
 80096a4:	0800c3b0 	.word	0x0800c3b0
 80096a8:	0800c3c1 	.word	0x0800c3c1

080096ac <__ssputs_r>:
 80096ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096b0:	688e      	ldr	r6, [r1, #8]
 80096b2:	461f      	mov	r7, r3
 80096b4:	42be      	cmp	r6, r7
 80096b6:	680b      	ldr	r3, [r1, #0]
 80096b8:	4682      	mov	sl, r0
 80096ba:	460c      	mov	r4, r1
 80096bc:	4690      	mov	r8, r2
 80096be:	d82d      	bhi.n	800971c <__ssputs_r+0x70>
 80096c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80096c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80096c8:	d026      	beq.n	8009718 <__ssputs_r+0x6c>
 80096ca:	6965      	ldr	r5, [r4, #20]
 80096cc:	6909      	ldr	r1, [r1, #16]
 80096ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80096d2:	eba3 0901 	sub.w	r9, r3, r1
 80096d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80096da:	1c7b      	adds	r3, r7, #1
 80096dc:	444b      	add	r3, r9
 80096de:	106d      	asrs	r5, r5, #1
 80096e0:	429d      	cmp	r5, r3
 80096e2:	bf38      	it	cc
 80096e4:	461d      	movcc	r5, r3
 80096e6:	0553      	lsls	r3, r2, #21
 80096e8:	d527      	bpl.n	800973a <__ssputs_r+0x8e>
 80096ea:	4629      	mov	r1, r5
 80096ec:	f7ff fbd0 	bl	8008e90 <_malloc_r>
 80096f0:	4606      	mov	r6, r0
 80096f2:	b360      	cbz	r0, 800974e <__ssputs_r+0xa2>
 80096f4:	6921      	ldr	r1, [r4, #16]
 80096f6:	464a      	mov	r2, r9
 80096f8:	f000 fa06 	bl	8009b08 <memcpy>
 80096fc:	89a3      	ldrh	r3, [r4, #12]
 80096fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009702:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009706:	81a3      	strh	r3, [r4, #12]
 8009708:	6126      	str	r6, [r4, #16]
 800970a:	6165      	str	r5, [r4, #20]
 800970c:	444e      	add	r6, r9
 800970e:	eba5 0509 	sub.w	r5, r5, r9
 8009712:	6026      	str	r6, [r4, #0]
 8009714:	60a5      	str	r5, [r4, #8]
 8009716:	463e      	mov	r6, r7
 8009718:	42be      	cmp	r6, r7
 800971a:	d900      	bls.n	800971e <__ssputs_r+0x72>
 800971c:	463e      	mov	r6, r7
 800971e:	6820      	ldr	r0, [r4, #0]
 8009720:	4632      	mov	r2, r6
 8009722:	4641      	mov	r1, r8
 8009724:	f000 f9c6 	bl	8009ab4 <memmove>
 8009728:	68a3      	ldr	r3, [r4, #8]
 800972a:	1b9b      	subs	r3, r3, r6
 800972c:	60a3      	str	r3, [r4, #8]
 800972e:	6823      	ldr	r3, [r4, #0]
 8009730:	4433      	add	r3, r6
 8009732:	6023      	str	r3, [r4, #0]
 8009734:	2000      	movs	r0, #0
 8009736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800973a:	462a      	mov	r2, r5
 800973c:	f000 fa36 	bl	8009bac <_realloc_r>
 8009740:	4606      	mov	r6, r0
 8009742:	2800      	cmp	r0, #0
 8009744:	d1e0      	bne.n	8009708 <__ssputs_r+0x5c>
 8009746:	6921      	ldr	r1, [r4, #16]
 8009748:	4650      	mov	r0, sl
 800974a:	f7ff fb2d 	bl	8008da8 <_free_r>
 800974e:	230c      	movs	r3, #12
 8009750:	f8ca 3000 	str.w	r3, [sl]
 8009754:	89a3      	ldrh	r3, [r4, #12]
 8009756:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800975a:	81a3      	strh	r3, [r4, #12]
 800975c:	f04f 30ff 	mov.w	r0, #4294967295
 8009760:	e7e9      	b.n	8009736 <__ssputs_r+0x8a>
	...

08009764 <_svfiprintf_r>:
 8009764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009768:	4698      	mov	r8, r3
 800976a:	898b      	ldrh	r3, [r1, #12]
 800976c:	061b      	lsls	r3, r3, #24
 800976e:	b09d      	sub	sp, #116	@ 0x74
 8009770:	4607      	mov	r7, r0
 8009772:	460d      	mov	r5, r1
 8009774:	4614      	mov	r4, r2
 8009776:	d510      	bpl.n	800979a <_svfiprintf_r+0x36>
 8009778:	690b      	ldr	r3, [r1, #16]
 800977a:	b973      	cbnz	r3, 800979a <_svfiprintf_r+0x36>
 800977c:	2140      	movs	r1, #64	@ 0x40
 800977e:	f7ff fb87 	bl	8008e90 <_malloc_r>
 8009782:	6028      	str	r0, [r5, #0]
 8009784:	6128      	str	r0, [r5, #16]
 8009786:	b930      	cbnz	r0, 8009796 <_svfiprintf_r+0x32>
 8009788:	230c      	movs	r3, #12
 800978a:	603b      	str	r3, [r7, #0]
 800978c:	f04f 30ff 	mov.w	r0, #4294967295
 8009790:	b01d      	add	sp, #116	@ 0x74
 8009792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009796:	2340      	movs	r3, #64	@ 0x40
 8009798:	616b      	str	r3, [r5, #20]
 800979a:	2300      	movs	r3, #0
 800979c:	9309      	str	r3, [sp, #36]	@ 0x24
 800979e:	2320      	movs	r3, #32
 80097a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80097a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80097a8:	2330      	movs	r3, #48	@ 0x30
 80097aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009948 <_svfiprintf_r+0x1e4>
 80097ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80097b2:	f04f 0901 	mov.w	r9, #1
 80097b6:	4623      	mov	r3, r4
 80097b8:	469a      	mov	sl, r3
 80097ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097be:	b10a      	cbz	r2, 80097c4 <_svfiprintf_r+0x60>
 80097c0:	2a25      	cmp	r2, #37	@ 0x25
 80097c2:	d1f9      	bne.n	80097b8 <_svfiprintf_r+0x54>
 80097c4:	ebba 0b04 	subs.w	fp, sl, r4
 80097c8:	d00b      	beq.n	80097e2 <_svfiprintf_r+0x7e>
 80097ca:	465b      	mov	r3, fp
 80097cc:	4622      	mov	r2, r4
 80097ce:	4629      	mov	r1, r5
 80097d0:	4638      	mov	r0, r7
 80097d2:	f7ff ff6b 	bl	80096ac <__ssputs_r>
 80097d6:	3001      	adds	r0, #1
 80097d8:	f000 80a7 	beq.w	800992a <_svfiprintf_r+0x1c6>
 80097dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097de:	445a      	add	r2, fp
 80097e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80097e2:	f89a 3000 	ldrb.w	r3, [sl]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	f000 809f 	beq.w	800992a <_svfiprintf_r+0x1c6>
 80097ec:	2300      	movs	r3, #0
 80097ee:	f04f 32ff 	mov.w	r2, #4294967295
 80097f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097f6:	f10a 0a01 	add.w	sl, sl, #1
 80097fa:	9304      	str	r3, [sp, #16]
 80097fc:	9307      	str	r3, [sp, #28]
 80097fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009802:	931a      	str	r3, [sp, #104]	@ 0x68
 8009804:	4654      	mov	r4, sl
 8009806:	2205      	movs	r2, #5
 8009808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800980c:	484e      	ldr	r0, [pc, #312]	@ (8009948 <_svfiprintf_r+0x1e4>)
 800980e:	f7f6 fcff 	bl	8000210 <memchr>
 8009812:	9a04      	ldr	r2, [sp, #16]
 8009814:	b9d8      	cbnz	r0, 800984e <_svfiprintf_r+0xea>
 8009816:	06d0      	lsls	r0, r2, #27
 8009818:	bf44      	itt	mi
 800981a:	2320      	movmi	r3, #32
 800981c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009820:	0711      	lsls	r1, r2, #28
 8009822:	bf44      	itt	mi
 8009824:	232b      	movmi	r3, #43	@ 0x2b
 8009826:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800982a:	f89a 3000 	ldrb.w	r3, [sl]
 800982e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009830:	d015      	beq.n	800985e <_svfiprintf_r+0xfa>
 8009832:	9a07      	ldr	r2, [sp, #28]
 8009834:	4654      	mov	r4, sl
 8009836:	2000      	movs	r0, #0
 8009838:	f04f 0c0a 	mov.w	ip, #10
 800983c:	4621      	mov	r1, r4
 800983e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009842:	3b30      	subs	r3, #48	@ 0x30
 8009844:	2b09      	cmp	r3, #9
 8009846:	d94b      	bls.n	80098e0 <_svfiprintf_r+0x17c>
 8009848:	b1b0      	cbz	r0, 8009878 <_svfiprintf_r+0x114>
 800984a:	9207      	str	r2, [sp, #28]
 800984c:	e014      	b.n	8009878 <_svfiprintf_r+0x114>
 800984e:	eba0 0308 	sub.w	r3, r0, r8
 8009852:	fa09 f303 	lsl.w	r3, r9, r3
 8009856:	4313      	orrs	r3, r2
 8009858:	9304      	str	r3, [sp, #16]
 800985a:	46a2      	mov	sl, r4
 800985c:	e7d2      	b.n	8009804 <_svfiprintf_r+0xa0>
 800985e:	9b03      	ldr	r3, [sp, #12]
 8009860:	1d19      	adds	r1, r3, #4
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	9103      	str	r1, [sp, #12]
 8009866:	2b00      	cmp	r3, #0
 8009868:	bfbb      	ittet	lt
 800986a:	425b      	neglt	r3, r3
 800986c:	f042 0202 	orrlt.w	r2, r2, #2
 8009870:	9307      	strge	r3, [sp, #28]
 8009872:	9307      	strlt	r3, [sp, #28]
 8009874:	bfb8      	it	lt
 8009876:	9204      	strlt	r2, [sp, #16]
 8009878:	7823      	ldrb	r3, [r4, #0]
 800987a:	2b2e      	cmp	r3, #46	@ 0x2e
 800987c:	d10a      	bne.n	8009894 <_svfiprintf_r+0x130>
 800987e:	7863      	ldrb	r3, [r4, #1]
 8009880:	2b2a      	cmp	r3, #42	@ 0x2a
 8009882:	d132      	bne.n	80098ea <_svfiprintf_r+0x186>
 8009884:	9b03      	ldr	r3, [sp, #12]
 8009886:	1d1a      	adds	r2, r3, #4
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	9203      	str	r2, [sp, #12]
 800988c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009890:	3402      	adds	r4, #2
 8009892:	9305      	str	r3, [sp, #20]
 8009894:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009958 <_svfiprintf_r+0x1f4>
 8009898:	7821      	ldrb	r1, [r4, #0]
 800989a:	2203      	movs	r2, #3
 800989c:	4650      	mov	r0, sl
 800989e:	f7f6 fcb7 	bl	8000210 <memchr>
 80098a2:	b138      	cbz	r0, 80098b4 <_svfiprintf_r+0x150>
 80098a4:	9b04      	ldr	r3, [sp, #16]
 80098a6:	eba0 000a 	sub.w	r0, r0, sl
 80098aa:	2240      	movs	r2, #64	@ 0x40
 80098ac:	4082      	lsls	r2, r0
 80098ae:	4313      	orrs	r3, r2
 80098b0:	3401      	adds	r4, #1
 80098b2:	9304      	str	r3, [sp, #16]
 80098b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098b8:	4824      	ldr	r0, [pc, #144]	@ (800994c <_svfiprintf_r+0x1e8>)
 80098ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80098be:	2206      	movs	r2, #6
 80098c0:	f7f6 fca6 	bl	8000210 <memchr>
 80098c4:	2800      	cmp	r0, #0
 80098c6:	d036      	beq.n	8009936 <_svfiprintf_r+0x1d2>
 80098c8:	4b21      	ldr	r3, [pc, #132]	@ (8009950 <_svfiprintf_r+0x1ec>)
 80098ca:	bb1b      	cbnz	r3, 8009914 <_svfiprintf_r+0x1b0>
 80098cc:	9b03      	ldr	r3, [sp, #12]
 80098ce:	3307      	adds	r3, #7
 80098d0:	f023 0307 	bic.w	r3, r3, #7
 80098d4:	3308      	adds	r3, #8
 80098d6:	9303      	str	r3, [sp, #12]
 80098d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098da:	4433      	add	r3, r6
 80098dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80098de:	e76a      	b.n	80097b6 <_svfiprintf_r+0x52>
 80098e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80098e4:	460c      	mov	r4, r1
 80098e6:	2001      	movs	r0, #1
 80098e8:	e7a8      	b.n	800983c <_svfiprintf_r+0xd8>
 80098ea:	2300      	movs	r3, #0
 80098ec:	3401      	adds	r4, #1
 80098ee:	9305      	str	r3, [sp, #20]
 80098f0:	4619      	mov	r1, r3
 80098f2:	f04f 0c0a 	mov.w	ip, #10
 80098f6:	4620      	mov	r0, r4
 80098f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098fc:	3a30      	subs	r2, #48	@ 0x30
 80098fe:	2a09      	cmp	r2, #9
 8009900:	d903      	bls.n	800990a <_svfiprintf_r+0x1a6>
 8009902:	2b00      	cmp	r3, #0
 8009904:	d0c6      	beq.n	8009894 <_svfiprintf_r+0x130>
 8009906:	9105      	str	r1, [sp, #20]
 8009908:	e7c4      	b.n	8009894 <_svfiprintf_r+0x130>
 800990a:	fb0c 2101 	mla	r1, ip, r1, r2
 800990e:	4604      	mov	r4, r0
 8009910:	2301      	movs	r3, #1
 8009912:	e7f0      	b.n	80098f6 <_svfiprintf_r+0x192>
 8009914:	ab03      	add	r3, sp, #12
 8009916:	9300      	str	r3, [sp, #0]
 8009918:	462a      	mov	r2, r5
 800991a:	4b0e      	ldr	r3, [pc, #56]	@ (8009954 <_svfiprintf_r+0x1f0>)
 800991c:	a904      	add	r1, sp, #16
 800991e:	4638      	mov	r0, r7
 8009920:	f7fd fe84 	bl	800762c <_printf_float>
 8009924:	1c42      	adds	r2, r0, #1
 8009926:	4606      	mov	r6, r0
 8009928:	d1d6      	bne.n	80098d8 <_svfiprintf_r+0x174>
 800992a:	89ab      	ldrh	r3, [r5, #12]
 800992c:	065b      	lsls	r3, r3, #25
 800992e:	f53f af2d 	bmi.w	800978c <_svfiprintf_r+0x28>
 8009932:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009934:	e72c      	b.n	8009790 <_svfiprintf_r+0x2c>
 8009936:	ab03      	add	r3, sp, #12
 8009938:	9300      	str	r3, [sp, #0]
 800993a:	462a      	mov	r2, r5
 800993c:	4b05      	ldr	r3, [pc, #20]	@ (8009954 <_svfiprintf_r+0x1f0>)
 800993e:	a904      	add	r1, sp, #16
 8009940:	4638      	mov	r0, r7
 8009942:	f7fe f90b 	bl	8007b5c <_printf_i>
 8009946:	e7ed      	b.n	8009924 <_svfiprintf_r+0x1c0>
 8009948:	0800c518 	.word	0x0800c518
 800994c:	0800c522 	.word	0x0800c522
 8009950:	0800762d 	.word	0x0800762d
 8009954:	080096ad 	.word	0x080096ad
 8009958:	0800c51e 	.word	0x0800c51e

0800995c <__sflush_r>:
 800995c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009964:	0716      	lsls	r6, r2, #28
 8009966:	4605      	mov	r5, r0
 8009968:	460c      	mov	r4, r1
 800996a:	d454      	bmi.n	8009a16 <__sflush_r+0xba>
 800996c:	684b      	ldr	r3, [r1, #4]
 800996e:	2b00      	cmp	r3, #0
 8009970:	dc02      	bgt.n	8009978 <__sflush_r+0x1c>
 8009972:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009974:	2b00      	cmp	r3, #0
 8009976:	dd48      	ble.n	8009a0a <__sflush_r+0xae>
 8009978:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800997a:	2e00      	cmp	r6, #0
 800997c:	d045      	beq.n	8009a0a <__sflush_r+0xae>
 800997e:	2300      	movs	r3, #0
 8009980:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009984:	682f      	ldr	r7, [r5, #0]
 8009986:	6a21      	ldr	r1, [r4, #32]
 8009988:	602b      	str	r3, [r5, #0]
 800998a:	d030      	beq.n	80099ee <__sflush_r+0x92>
 800998c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800998e:	89a3      	ldrh	r3, [r4, #12]
 8009990:	0759      	lsls	r1, r3, #29
 8009992:	d505      	bpl.n	80099a0 <__sflush_r+0x44>
 8009994:	6863      	ldr	r3, [r4, #4]
 8009996:	1ad2      	subs	r2, r2, r3
 8009998:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800999a:	b10b      	cbz	r3, 80099a0 <__sflush_r+0x44>
 800999c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800999e:	1ad2      	subs	r2, r2, r3
 80099a0:	2300      	movs	r3, #0
 80099a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80099a4:	6a21      	ldr	r1, [r4, #32]
 80099a6:	4628      	mov	r0, r5
 80099a8:	47b0      	blx	r6
 80099aa:	1c43      	adds	r3, r0, #1
 80099ac:	89a3      	ldrh	r3, [r4, #12]
 80099ae:	d106      	bne.n	80099be <__sflush_r+0x62>
 80099b0:	6829      	ldr	r1, [r5, #0]
 80099b2:	291d      	cmp	r1, #29
 80099b4:	d82b      	bhi.n	8009a0e <__sflush_r+0xb2>
 80099b6:	4a2a      	ldr	r2, [pc, #168]	@ (8009a60 <__sflush_r+0x104>)
 80099b8:	410a      	asrs	r2, r1
 80099ba:	07d6      	lsls	r6, r2, #31
 80099bc:	d427      	bmi.n	8009a0e <__sflush_r+0xb2>
 80099be:	2200      	movs	r2, #0
 80099c0:	6062      	str	r2, [r4, #4]
 80099c2:	04d9      	lsls	r1, r3, #19
 80099c4:	6922      	ldr	r2, [r4, #16]
 80099c6:	6022      	str	r2, [r4, #0]
 80099c8:	d504      	bpl.n	80099d4 <__sflush_r+0x78>
 80099ca:	1c42      	adds	r2, r0, #1
 80099cc:	d101      	bne.n	80099d2 <__sflush_r+0x76>
 80099ce:	682b      	ldr	r3, [r5, #0]
 80099d0:	b903      	cbnz	r3, 80099d4 <__sflush_r+0x78>
 80099d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80099d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80099d6:	602f      	str	r7, [r5, #0]
 80099d8:	b1b9      	cbz	r1, 8009a0a <__sflush_r+0xae>
 80099da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80099de:	4299      	cmp	r1, r3
 80099e0:	d002      	beq.n	80099e8 <__sflush_r+0x8c>
 80099e2:	4628      	mov	r0, r5
 80099e4:	f7ff f9e0 	bl	8008da8 <_free_r>
 80099e8:	2300      	movs	r3, #0
 80099ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80099ec:	e00d      	b.n	8009a0a <__sflush_r+0xae>
 80099ee:	2301      	movs	r3, #1
 80099f0:	4628      	mov	r0, r5
 80099f2:	47b0      	blx	r6
 80099f4:	4602      	mov	r2, r0
 80099f6:	1c50      	adds	r0, r2, #1
 80099f8:	d1c9      	bne.n	800998e <__sflush_r+0x32>
 80099fa:	682b      	ldr	r3, [r5, #0]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d0c6      	beq.n	800998e <__sflush_r+0x32>
 8009a00:	2b1d      	cmp	r3, #29
 8009a02:	d001      	beq.n	8009a08 <__sflush_r+0xac>
 8009a04:	2b16      	cmp	r3, #22
 8009a06:	d11e      	bne.n	8009a46 <__sflush_r+0xea>
 8009a08:	602f      	str	r7, [r5, #0]
 8009a0a:	2000      	movs	r0, #0
 8009a0c:	e022      	b.n	8009a54 <__sflush_r+0xf8>
 8009a0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a12:	b21b      	sxth	r3, r3
 8009a14:	e01b      	b.n	8009a4e <__sflush_r+0xf2>
 8009a16:	690f      	ldr	r7, [r1, #16]
 8009a18:	2f00      	cmp	r7, #0
 8009a1a:	d0f6      	beq.n	8009a0a <__sflush_r+0xae>
 8009a1c:	0793      	lsls	r3, r2, #30
 8009a1e:	680e      	ldr	r6, [r1, #0]
 8009a20:	bf08      	it	eq
 8009a22:	694b      	ldreq	r3, [r1, #20]
 8009a24:	600f      	str	r7, [r1, #0]
 8009a26:	bf18      	it	ne
 8009a28:	2300      	movne	r3, #0
 8009a2a:	eba6 0807 	sub.w	r8, r6, r7
 8009a2e:	608b      	str	r3, [r1, #8]
 8009a30:	f1b8 0f00 	cmp.w	r8, #0
 8009a34:	dde9      	ble.n	8009a0a <__sflush_r+0xae>
 8009a36:	6a21      	ldr	r1, [r4, #32]
 8009a38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009a3a:	4643      	mov	r3, r8
 8009a3c:	463a      	mov	r2, r7
 8009a3e:	4628      	mov	r0, r5
 8009a40:	47b0      	blx	r6
 8009a42:	2800      	cmp	r0, #0
 8009a44:	dc08      	bgt.n	8009a58 <__sflush_r+0xfc>
 8009a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a4e:	81a3      	strh	r3, [r4, #12]
 8009a50:	f04f 30ff 	mov.w	r0, #4294967295
 8009a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a58:	4407      	add	r7, r0
 8009a5a:	eba8 0800 	sub.w	r8, r8, r0
 8009a5e:	e7e7      	b.n	8009a30 <__sflush_r+0xd4>
 8009a60:	dfbffffe 	.word	0xdfbffffe

08009a64 <_fflush_r>:
 8009a64:	b538      	push	{r3, r4, r5, lr}
 8009a66:	690b      	ldr	r3, [r1, #16]
 8009a68:	4605      	mov	r5, r0
 8009a6a:	460c      	mov	r4, r1
 8009a6c:	b913      	cbnz	r3, 8009a74 <_fflush_r+0x10>
 8009a6e:	2500      	movs	r5, #0
 8009a70:	4628      	mov	r0, r5
 8009a72:	bd38      	pop	{r3, r4, r5, pc}
 8009a74:	b118      	cbz	r0, 8009a7e <_fflush_r+0x1a>
 8009a76:	6a03      	ldr	r3, [r0, #32]
 8009a78:	b90b      	cbnz	r3, 8009a7e <_fflush_r+0x1a>
 8009a7a:	f7fe fa1b 	bl	8007eb4 <__sinit>
 8009a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d0f3      	beq.n	8009a6e <_fflush_r+0xa>
 8009a86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009a88:	07d0      	lsls	r0, r2, #31
 8009a8a:	d404      	bmi.n	8009a96 <_fflush_r+0x32>
 8009a8c:	0599      	lsls	r1, r3, #22
 8009a8e:	d402      	bmi.n	8009a96 <_fflush_r+0x32>
 8009a90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a92:	f7fe fb3a 	bl	800810a <__retarget_lock_acquire_recursive>
 8009a96:	4628      	mov	r0, r5
 8009a98:	4621      	mov	r1, r4
 8009a9a:	f7ff ff5f 	bl	800995c <__sflush_r>
 8009a9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009aa0:	07da      	lsls	r2, r3, #31
 8009aa2:	4605      	mov	r5, r0
 8009aa4:	d4e4      	bmi.n	8009a70 <_fflush_r+0xc>
 8009aa6:	89a3      	ldrh	r3, [r4, #12]
 8009aa8:	059b      	lsls	r3, r3, #22
 8009aaa:	d4e1      	bmi.n	8009a70 <_fflush_r+0xc>
 8009aac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009aae:	f7fe fb2d 	bl	800810c <__retarget_lock_release_recursive>
 8009ab2:	e7dd      	b.n	8009a70 <_fflush_r+0xc>

08009ab4 <memmove>:
 8009ab4:	4288      	cmp	r0, r1
 8009ab6:	b510      	push	{r4, lr}
 8009ab8:	eb01 0402 	add.w	r4, r1, r2
 8009abc:	d902      	bls.n	8009ac4 <memmove+0x10>
 8009abe:	4284      	cmp	r4, r0
 8009ac0:	4623      	mov	r3, r4
 8009ac2:	d807      	bhi.n	8009ad4 <memmove+0x20>
 8009ac4:	1e43      	subs	r3, r0, #1
 8009ac6:	42a1      	cmp	r1, r4
 8009ac8:	d008      	beq.n	8009adc <memmove+0x28>
 8009aca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ace:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ad2:	e7f8      	b.n	8009ac6 <memmove+0x12>
 8009ad4:	4402      	add	r2, r0
 8009ad6:	4601      	mov	r1, r0
 8009ad8:	428a      	cmp	r2, r1
 8009ada:	d100      	bne.n	8009ade <memmove+0x2a>
 8009adc:	bd10      	pop	{r4, pc}
 8009ade:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ae2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ae6:	e7f7      	b.n	8009ad8 <memmove+0x24>

08009ae8 <_sbrk_r>:
 8009ae8:	b538      	push	{r3, r4, r5, lr}
 8009aea:	4d06      	ldr	r5, [pc, #24]	@ (8009b04 <_sbrk_r+0x1c>)
 8009aec:	2300      	movs	r3, #0
 8009aee:	4604      	mov	r4, r0
 8009af0:	4608      	mov	r0, r1
 8009af2:	602b      	str	r3, [r5, #0]
 8009af4:	f7f9 fdd6 	bl	80036a4 <_sbrk>
 8009af8:	1c43      	adds	r3, r0, #1
 8009afa:	d102      	bne.n	8009b02 <_sbrk_r+0x1a>
 8009afc:	682b      	ldr	r3, [r5, #0]
 8009afe:	b103      	cbz	r3, 8009b02 <_sbrk_r+0x1a>
 8009b00:	6023      	str	r3, [r4, #0]
 8009b02:	bd38      	pop	{r3, r4, r5, pc}
 8009b04:	200009bc 	.word	0x200009bc

08009b08 <memcpy>:
 8009b08:	440a      	add	r2, r1
 8009b0a:	4291      	cmp	r1, r2
 8009b0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b10:	d100      	bne.n	8009b14 <memcpy+0xc>
 8009b12:	4770      	bx	lr
 8009b14:	b510      	push	{r4, lr}
 8009b16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b1e:	4291      	cmp	r1, r2
 8009b20:	d1f9      	bne.n	8009b16 <memcpy+0xe>
 8009b22:	bd10      	pop	{r4, pc}

08009b24 <__assert_func>:
 8009b24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b26:	4614      	mov	r4, r2
 8009b28:	461a      	mov	r2, r3
 8009b2a:	4b09      	ldr	r3, [pc, #36]	@ (8009b50 <__assert_func+0x2c>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4605      	mov	r5, r0
 8009b30:	68d8      	ldr	r0, [r3, #12]
 8009b32:	b954      	cbnz	r4, 8009b4a <__assert_func+0x26>
 8009b34:	4b07      	ldr	r3, [pc, #28]	@ (8009b54 <__assert_func+0x30>)
 8009b36:	461c      	mov	r4, r3
 8009b38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b3c:	9100      	str	r1, [sp, #0]
 8009b3e:	462b      	mov	r3, r5
 8009b40:	4905      	ldr	r1, [pc, #20]	@ (8009b58 <__assert_func+0x34>)
 8009b42:	f000 f86f 	bl	8009c24 <fiprintf>
 8009b46:	f000 f87f 	bl	8009c48 <abort>
 8009b4a:	4b04      	ldr	r3, [pc, #16]	@ (8009b5c <__assert_func+0x38>)
 8009b4c:	e7f4      	b.n	8009b38 <__assert_func+0x14>
 8009b4e:	bf00      	nop
 8009b50:	20000024 	.word	0x20000024
 8009b54:	0800c56e 	.word	0x0800c56e
 8009b58:	0800c540 	.word	0x0800c540
 8009b5c:	0800c533 	.word	0x0800c533

08009b60 <_calloc_r>:
 8009b60:	b570      	push	{r4, r5, r6, lr}
 8009b62:	fba1 5402 	umull	r5, r4, r1, r2
 8009b66:	b93c      	cbnz	r4, 8009b78 <_calloc_r+0x18>
 8009b68:	4629      	mov	r1, r5
 8009b6a:	f7ff f991 	bl	8008e90 <_malloc_r>
 8009b6e:	4606      	mov	r6, r0
 8009b70:	b928      	cbnz	r0, 8009b7e <_calloc_r+0x1e>
 8009b72:	2600      	movs	r6, #0
 8009b74:	4630      	mov	r0, r6
 8009b76:	bd70      	pop	{r4, r5, r6, pc}
 8009b78:	220c      	movs	r2, #12
 8009b7a:	6002      	str	r2, [r0, #0]
 8009b7c:	e7f9      	b.n	8009b72 <_calloc_r+0x12>
 8009b7e:	462a      	mov	r2, r5
 8009b80:	4621      	mov	r1, r4
 8009b82:	f7fe fa44 	bl	800800e <memset>
 8009b86:	e7f5      	b.n	8009b74 <_calloc_r+0x14>

08009b88 <__ascii_mbtowc>:
 8009b88:	b082      	sub	sp, #8
 8009b8a:	b901      	cbnz	r1, 8009b8e <__ascii_mbtowc+0x6>
 8009b8c:	a901      	add	r1, sp, #4
 8009b8e:	b142      	cbz	r2, 8009ba2 <__ascii_mbtowc+0x1a>
 8009b90:	b14b      	cbz	r3, 8009ba6 <__ascii_mbtowc+0x1e>
 8009b92:	7813      	ldrb	r3, [r2, #0]
 8009b94:	600b      	str	r3, [r1, #0]
 8009b96:	7812      	ldrb	r2, [r2, #0]
 8009b98:	1e10      	subs	r0, r2, #0
 8009b9a:	bf18      	it	ne
 8009b9c:	2001      	movne	r0, #1
 8009b9e:	b002      	add	sp, #8
 8009ba0:	4770      	bx	lr
 8009ba2:	4610      	mov	r0, r2
 8009ba4:	e7fb      	b.n	8009b9e <__ascii_mbtowc+0x16>
 8009ba6:	f06f 0001 	mvn.w	r0, #1
 8009baa:	e7f8      	b.n	8009b9e <__ascii_mbtowc+0x16>

08009bac <_realloc_r>:
 8009bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bb0:	4680      	mov	r8, r0
 8009bb2:	4615      	mov	r5, r2
 8009bb4:	460c      	mov	r4, r1
 8009bb6:	b921      	cbnz	r1, 8009bc2 <_realloc_r+0x16>
 8009bb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bbc:	4611      	mov	r1, r2
 8009bbe:	f7ff b967 	b.w	8008e90 <_malloc_r>
 8009bc2:	b92a      	cbnz	r2, 8009bd0 <_realloc_r+0x24>
 8009bc4:	f7ff f8f0 	bl	8008da8 <_free_r>
 8009bc8:	2400      	movs	r4, #0
 8009bca:	4620      	mov	r0, r4
 8009bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bd0:	f000 f841 	bl	8009c56 <_malloc_usable_size_r>
 8009bd4:	4285      	cmp	r5, r0
 8009bd6:	4606      	mov	r6, r0
 8009bd8:	d802      	bhi.n	8009be0 <_realloc_r+0x34>
 8009bda:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009bde:	d8f4      	bhi.n	8009bca <_realloc_r+0x1e>
 8009be0:	4629      	mov	r1, r5
 8009be2:	4640      	mov	r0, r8
 8009be4:	f7ff f954 	bl	8008e90 <_malloc_r>
 8009be8:	4607      	mov	r7, r0
 8009bea:	2800      	cmp	r0, #0
 8009bec:	d0ec      	beq.n	8009bc8 <_realloc_r+0x1c>
 8009bee:	42b5      	cmp	r5, r6
 8009bf0:	462a      	mov	r2, r5
 8009bf2:	4621      	mov	r1, r4
 8009bf4:	bf28      	it	cs
 8009bf6:	4632      	movcs	r2, r6
 8009bf8:	f7ff ff86 	bl	8009b08 <memcpy>
 8009bfc:	4621      	mov	r1, r4
 8009bfe:	4640      	mov	r0, r8
 8009c00:	f7ff f8d2 	bl	8008da8 <_free_r>
 8009c04:	463c      	mov	r4, r7
 8009c06:	e7e0      	b.n	8009bca <_realloc_r+0x1e>

08009c08 <__ascii_wctomb>:
 8009c08:	4603      	mov	r3, r0
 8009c0a:	4608      	mov	r0, r1
 8009c0c:	b141      	cbz	r1, 8009c20 <__ascii_wctomb+0x18>
 8009c0e:	2aff      	cmp	r2, #255	@ 0xff
 8009c10:	d904      	bls.n	8009c1c <__ascii_wctomb+0x14>
 8009c12:	228a      	movs	r2, #138	@ 0x8a
 8009c14:	601a      	str	r2, [r3, #0]
 8009c16:	f04f 30ff 	mov.w	r0, #4294967295
 8009c1a:	4770      	bx	lr
 8009c1c:	700a      	strb	r2, [r1, #0]
 8009c1e:	2001      	movs	r0, #1
 8009c20:	4770      	bx	lr
	...

08009c24 <fiprintf>:
 8009c24:	b40e      	push	{r1, r2, r3}
 8009c26:	b503      	push	{r0, r1, lr}
 8009c28:	4601      	mov	r1, r0
 8009c2a:	ab03      	add	r3, sp, #12
 8009c2c:	4805      	ldr	r0, [pc, #20]	@ (8009c44 <fiprintf+0x20>)
 8009c2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c32:	6800      	ldr	r0, [r0, #0]
 8009c34:	9301      	str	r3, [sp, #4]
 8009c36:	f000 f83f 	bl	8009cb8 <_vfiprintf_r>
 8009c3a:	b002      	add	sp, #8
 8009c3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c40:	b003      	add	sp, #12
 8009c42:	4770      	bx	lr
 8009c44:	20000024 	.word	0x20000024

08009c48 <abort>:
 8009c48:	b508      	push	{r3, lr}
 8009c4a:	2006      	movs	r0, #6
 8009c4c:	f000 fa08 	bl	800a060 <raise>
 8009c50:	2001      	movs	r0, #1
 8009c52:	f7f9 fcaf 	bl	80035b4 <_exit>

08009c56 <_malloc_usable_size_r>:
 8009c56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c5a:	1f18      	subs	r0, r3, #4
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	bfbc      	itt	lt
 8009c60:	580b      	ldrlt	r3, [r1, r0]
 8009c62:	18c0      	addlt	r0, r0, r3
 8009c64:	4770      	bx	lr

08009c66 <__sfputc_r>:
 8009c66:	6893      	ldr	r3, [r2, #8]
 8009c68:	3b01      	subs	r3, #1
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	b410      	push	{r4}
 8009c6e:	6093      	str	r3, [r2, #8]
 8009c70:	da08      	bge.n	8009c84 <__sfputc_r+0x1e>
 8009c72:	6994      	ldr	r4, [r2, #24]
 8009c74:	42a3      	cmp	r3, r4
 8009c76:	db01      	blt.n	8009c7c <__sfputc_r+0x16>
 8009c78:	290a      	cmp	r1, #10
 8009c7a:	d103      	bne.n	8009c84 <__sfputc_r+0x1e>
 8009c7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c80:	f000 b932 	b.w	8009ee8 <__swbuf_r>
 8009c84:	6813      	ldr	r3, [r2, #0]
 8009c86:	1c58      	adds	r0, r3, #1
 8009c88:	6010      	str	r0, [r2, #0]
 8009c8a:	7019      	strb	r1, [r3, #0]
 8009c8c:	4608      	mov	r0, r1
 8009c8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c92:	4770      	bx	lr

08009c94 <__sfputs_r>:
 8009c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c96:	4606      	mov	r6, r0
 8009c98:	460f      	mov	r7, r1
 8009c9a:	4614      	mov	r4, r2
 8009c9c:	18d5      	adds	r5, r2, r3
 8009c9e:	42ac      	cmp	r4, r5
 8009ca0:	d101      	bne.n	8009ca6 <__sfputs_r+0x12>
 8009ca2:	2000      	movs	r0, #0
 8009ca4:	e007      	b.n	8009cb6 <__sfputs_r+0x22>
 8009ca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009caa:	463a      	mov	r2, r7
 8009cac:	4630      	mov	r0, r6
 8009cae:	f7ff ffda 	bl	8009c66 <__sfputc_r>
 8009cb2:	1c43      	adds	r3, r0, #1
 8009cb4:	d1f3      	bne.n	8009c9e <__sfputs_r+0xa>
 8009cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009cb8 <_vfiprintf_r>:
 8009cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cbc:	460d      	mov	r5, r1
 8009cbe:	b09d      	sub	sp, #116	@ 0x74
 8009cc0:	4614      	mov	r4, r2
 8009cc2:	4698      	mov	r8, r3
 8009cc4:	4606      	mov	r6, r0
 8009cc6:	b118      	cbz	r0, 8009cd0 <_vfiprintf_r+0x18>
 8009cc8:	6a03      	ldr	r3, [r0, #32]
 8009cca:	b90b      	cbnz	r3, 8009cd0 <_vfiprintf_r+0x18>
 8009ccc:	f7fe f8f2 	bl	8007eb4 <__sinit>
 8009cd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009cd2:	07d9      	lsls	r1, r3, #31
 8009cd4:	d405      	bmi.n	8009ce2 <_vfiprintf_r+0x2a>
 8009cd6:	89ab      	ldrh	r3, [r5, #12]
 8009cd8:	059a      	lsls	r2, r3, #22
 8009cda:	d402      	bmi.n	8009ce2 <_vfiprintf_r+0x2a>
 8009cdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009cde:	f7fe fa14 	bl	800810a <__retarget_lock_acquire_recursive>
 8009ce2:	89ab      	ldrh	r3, [r5, #12]
 8009ce4:	071b      	lsls	r3, r3, #28
 8009ce6:	d501      	bpl.n	8009cec <_vfiprintf_r+0x34>
 8009ce8:	692b      	ldr	r3, [r5, #16]
 8009cea:	b99b      	cbnz	r3, 8009d14 <_vfiprintf_r+0x5c>
 8009cec:	4629      	mov	r1, r5
 8009cee:	4630      	mov	r0, r6
 8009cf0:	f000 f938 	bl	8009f64 <__swsetup_r>
 8009cf4:	b170      	cbz	r0, 8009d14 <_vfiprintf_r+0x5c>
 8009cf6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009cf8:	07dc      	lsls	r4, r3, #31
 8009cfa:	d504      	bpl.n	8009d06 <_vfiprintf_r+0x4e>
 8009cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8009d00:	b01d      	add	sp, #116	@ 0x74
 8009d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d06:	89ab      	ldrh	r3, [r5, #12]
 8009d08:	0598      	lsls	r0, r3, #22
 8009d0a:	d4f7      	bmi.n	8009cfc <_vfiprintf_r+0x44>
 8009d0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d0e:	f7fe f9fd 	bl	800810c <__retarget_lock_release_recursive>
 8009d12:	e7f3      	b.n	8009cfc <_vfiprintf_r+0x44>
 8009d14:	2300      	movs	r3, #0
 8009d16:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d18:	2320      	movs	r3, #32
 8009d1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d22:	2330      	movs	r3, #48	@ 0x30
 8009d24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009ed4 <_vfiprintf_r+0x21c>
 8009d28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d2c:	f04f 0901 	mov.w	r9, #1
 8009d30:	4623      	mov	r3, r4
 8009d32:	469a      	mov	sl, r3
 8009d34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d38:	b10a      	cbz	r2, 8009d3e <_vfiprintf_r+0x86>
 8009d3a:	2a25      	cmp	r2, #37	@ 0x25
 8009d3c:	d1f9      	bne.n	8009d32 <_vfiprintf_r+0x7a>
 8009d3e:	ebba 0b04 	subs.w	fp, sl, r4
 8009d42:	d00b      	beq.n	8009d5c <_vfiprintf_r+0xa4>
 8009d44:	465b      	mov	r3, fp
 8009d46:	4622      	mov	r2, r4
 8009d48:	4629      	mov	r1, r5
 8009d4a:	4630      	mov	r0, r6
 8009d4c:	f7ff ffa2 	bl	8009c94 <__sfputs_r>
 8009d50:	3001      	adds	r0, #1
 8009d52:	f000 80a7 	beq.w	8009ea4 <_vfiprintf_r+0x1ec>
 8009d56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d58:	445a      	add	r2, fp
 8009d5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d5c:	f89a 3000 	ldrb.w	r3, [sl]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	f000 809f 	beq.w	8009ea4 <_vfiprintf_r+0x1ec>
 8009d66:	2300      	movs	r3, #0
 8009d68:	f04f 32ff 	mov.w	r2, #4294967295
 8009d6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d70:	f10a 0a01 	add.w	sl, sl, #1
 8009d74:	9304      	str	r3, [sp, #16]
 8009d76:	9307      	str	r3, [sp, #28]
 8009d78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d7c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d7e:	4654      	mov	r4, sl
 8009d80:	2205      	movs	r2, #5
 8009d82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d86:	4853      	ldr	r0, [pc, #332]	@ (8009ed4 <_vfiprintf_r+0x21c>)
 8009d88:	f7f6 fa42 	bl	8000210 <memchr>
 8009d8c:	9a04      	ldr	r2, [sp, #16]
 8009d8e:	b9d8      	cbnz	r0, 8009dc8 <_vfiprintf_r+0x110>
 8009d90:	06d1      	lsls	r1, r2, #27
 8009d92:	bf44      	itt	mi
 8009d94:	2320      	movmi	r3, #32
 8009d96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d9a:	0713      	lsls	r3, r2, #28
 8009d9c:	bf44      	itt	mi
 8009d9e:	232b      	movmi	r3, #43	@ 0x2b
 8009da0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009da4:	f89a 3000 	ldrb.w	r3, [sl]
 8009da8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009daa:	d015      	beq.n	8009dd8 <_vfiprintf_r+0x120>
 8009dac:	9a07      	ldr	r2, [sp, #28]
 8009dae:	4654      	mov	r4, sl
 8009db0:	2000      	movs	r0, #0
 8009db2:	f04f 0c0a 	mov.w	ip, #10
 8009db6:	4621      	mov	r1, r4
 8009db8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dbc:	3b30      	subs	r3, #48	@ 0x30
 8009dbe:	2b09      	cmp	r3, #9
 8009dc0:	d94b      	bls.n	8009e5a <_vfiprintf_r+0x1a2>
 8009dc2:	b1b0      	cbz	r0, 8009df2 <_vfiprintf_r+0x13a>
 8009dc4:	9207      	str	r2, [sp, #28]
 8009dc6:	e014      	b.n	8009df2 <_vfiprintf_r+0x13a>
 8009dc8:	eba0 0308 	sub.w	r3, r0, r8
 8009dcc:	fa09 f303 	lsl.w	r3, r9, r3
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	9304      	str	r3, [sp, #16]
 8009dd4:	46a2      	mov	sl, r4
 8009dd6:	e7d2      	b.n	8009d7e <_vfiprintf_r+0xc6>
 8009dd8:	9b03      	ldr	r3, [sp, #12]
 8009dda:	1d19      	adds	r1, r3, #4
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	9103      	str	r1, [sp, #12]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	bfbb      	ittet	lt
 8009de4:	425b      	neglt	r3, r3
 8009de6:	f042 0202 	orrlt.w	r2, r2, #2
 8009dea:	9307      	strge	r3, [sp, #28]
 8009dec:	9307      	strlt	r3, [sp, #28]
 8009dee:	bfb8      	it	lt
 8009df0:	9204      	strlt	r2, [sp, #16]
 8009df2:	7823      	ldrb	r3, [r4, #0]
 8009df4:	2b2e      	cmp	r3, #46	@ 0x2e
 8009df6:	d10a      	bne.n	8009e0e <_vfiprintf_r+0x156>
 8009df8:	7863      	ldrb	r3, [r4, #1]
 8009dfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8009dfc:	d132      	bne.n	8009e64 <_vfiprintf_r+0x1ac>
 8009dfe:	9b03      	ldr	r3, [sp, #12]
 8009e00:	1d1a      	adds	r2, r3, #4
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	9203      	str	r2, [sp, #12]
 8009e06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e0a:	3402      	adds	r4, #2
 8009e0c:	9305      	str	r3, [sp, #20]
 8009e0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009ee4 <_vfiprintf_r+0x22c>
 8009e12:	7821      	ldrb	r1, [r4, #0]
 8009e14:	2203      	movs	r2, #3
 8009e16:	4650      	mov	r0, sl
 8009e18:	f7f6 f9fa 	bl	8000210 <memchr>
 8009e1c:	b138      	cbz	r0, 8009e2e <_vfiprintf_r+0x176>
 8009e1e:	9b04      	ldr	r3, [sp, #16]
 8009e20:	eba0 000a 	sub.w	r0, r0, sl
 8009e24:	2240      	movs	r2, #64	@ 0x40
 8009e26:	4082      	lsls	r2, r0
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	3401      	adds	r4, #1
 8009e2c:	9304      	str	r3, [sp, #16]
 8009e2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e32:	4829      	ldr	r0, [pc, #164]	@ (8009ed8 <_vfiprintf_r+0x220>)
 8009e34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e38:	2206      	movs	r2, #6
 8009e3a:	f7f6 f9e9 	bl	8000210 <memchr>
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	d03f      	beq.n	8009ec2 <_vfiprintf_r+0x20a>
 8009e42:	4b26      	ldr	r3, [pc, #152]	@ (8009edc <_vfiprintf_r+0x224>)
 8009e44:	bb1b      	cbnz	r3, 8009e8e <_vfiprintf_r+0x1d6>
 8009e46:	9b03      	ldr	r3, [sp, #12]
 8009e48:	3307      	adds	r3, #7
 8009e4a:	f023 0307 	bic.w	r3, r3, #7
 8009e4e:	3308      	adds	r3, #8
 8009e50:	9303      	str	r3, [sp, #12]
 8009e52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e54:	443b      	add	r3, r7
 8009e56:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e58:	e76a      	b.n	8009d30 <_vfiprintf_r+0x78>
 8009e5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e5e:	460c      	mov	r4, r1
 8009e60:	2001      	movs	r0, #1
 8009e62:	e7a8      	b.n	8009db6 <_vfiprintf_r+0xfe>
 8009e64:	2300      	movs	r3, #0
 8009e66:	3401      	adds	r4, #1
 8009e68:	9305      	str	r3, [sp, #20]
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	f04f 0c0a 	mov.w	ip, #10
 8009e70:	4620      	mov	r0, r4
 8009e72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e76:	3a30      	subs	r2, #48	@ 0x30
 8009e78:	2a09      	cmp	r2, #9
 8009e7a:	d903      	bls.n	8009e84 <_vfiprintf_r+0x1cc>
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d0c6      	beq.n	8009e0e <_vfiprintf_r+0x156>
 8009e80:	9105      	str	r1, [sp, #20]
 8009e82:	e7c4      	b.n	8009e0e <_vfiprintf_r+0x156>
 8009e84:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e88:	4604      	mov	r4, r0
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e7f0      	b.n	8009e70 <_vfiprintf_r+0x1b8>
 8009e8e:	ab03      	add	r3, sp, #12
 8009e90:	9300      	str	r3, [sp, #0]
 8009e92:	462a      	mov	r2, r5
 8009e94:	4b12      	ldr	r3, [pc, #72]	@ (8009ee0 <_vfiprintf_r+0x228>)
 8009e96:	a904      	add	r1, sp, #16
 8009e98:	4630      	mov	r0, r6
 8009e9a:	f7fd fbc7 	bl	800762c <_printf_float>
 8009e9e:	4607      	mov	r7, r0
 8009ea0:	1c78      	adds	r0, r7, #1
 8009ea2:	d1d6      	bne.n	8009e52 <_vfiprintf_r+0x19a>
 8009ea4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ea6:	07d9      	lsls	r1, r3, #31
 8009ea8:	d405      	bmi.n	8009eb6 <_vfiprintf_r+0x1fe>
 8009eaa:	89ab      	ldrh	r3, [r5, #12]
 8009eac:	059a      	lsls	r2, r3, #22
 8009eae:	d402      	bmi.n	8009eb6 <_vfiprintf_r+0x1fe>
 8009eb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009eb2:	f7fe f92b 	bl	800810c <__retarget_lock_release_recursive>
 8009eb6:	89ab      	ldrh	r3, [r5, #12]
 8009eb8:	065b      	lsls	r3, r3, #25
 8009eba:	f53f af1f 	bmi.w	8009cfc <_vfiprintf_r+0x44>
 8009ebe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ec0:	e71e      	b.n	8009d00 <_vfiprintf_r+0x48>
 8009ec2:	ab03      	add	r3, sp, #12
 8009ec4:	9300      	str	r3, [sp, #0]
 8009ec6:	462a      	mov	r2, r5
 8009ec8:	4b05      	ldr	r3, [pc, #20]	@ (8009ee0 <_vfiprintf_r+0x228>)
 8009eca:	a904      	add	r1, sp, #16
 8009ecc:	4630      	mov	r0, r6
 8009ece:	f7fd fe45 	bl	8007b5c <_printf_i>
 8009ed2:	e7e4      	b.n	8009e9e <_vfiprintf_r+0x1e6>
 8009ed4:	0800c518 	.word	0x0800c518
 8009ed8:	0800c522 	.word	0x0800c522
 8009edc:	0800762d 	.word	0x0800762d
 8009ee0:	08009c95 	.word	0x08009c95
 8009ee4:	0800c51e 	.word	0x0800c51e

08009ee8 <__swbuf_r>:
 8009ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eea:	460e      	mov	r6, r1
 8009eec:	4614      	mov	r4, r2
 8009eee:	4605      	mov	r5, r0
 8009ef0:	b118      	cbz	r0, 8009efa <__swbuf_r+0x12>
 8009ef2:	6a03      	ldr	r3, [r0, #32]
 8009ef4:	b90b      	cbnz	r3, 8009efa <__swbuf_r+0x12>
 8009ef6:	f7fd ffdd 	bl	8007eb4 <__sinit>
 8009efa:	69a3      	ldr	r3, [r4, #24]
 8009efc:	60a3      	str	r3, [r4, #8]
 8009efe:	89a3      	ldrh	r3, [r4, #12]
 8009f00:	071a      	lsls	r2, r3, #28
 8009f02:	d501      	bpl.n	8009f08 <__swbuf_r+0x20>
 8009f04:	6923      	ldr	r3, [r4, #16]
 8009f06:	b943      	cbnz	r3, 8009f1a <__swbuf_r+0x32>
 8009f08:	4621      	mov	r1, r4
 8009f0a:	4628      	mov	r0, r5
 8009f0c:	f000 f82a 	bl	8009f64 <__swsetup_r>
 8009f10:	b118      	cbz	r0, 8009f1a <__swbuf_r+0x32>
 8009f12:	f04f 37ff 	mov.w	r7, #4294967295
 8009f16:	4638      	mov	r0, r7
 8009f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f1a:	6823      	ldr	r3, [r4, #0]
 8009f1c:	6922      	ldr	r2, [r4, #16]
 8009f1e:	1a98      	subs	r0, r3, r2
 8009f20:	6963      	ldr	r3, [r4, #20]
 8009f22:	b2f6      	uxtb	r6, r6
 8009f24:	4283      	cmp	r3, r0
 8009f26:	4637      	mov	r7, r6
 8009f28:	dc05      	bgt.n	8009f36 <__swbuf_r+0x4e>
 8009f2a:	4621      	mov	r1, r4
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	f7ff fd99 	bl	8009a64 <_fflush_r>
 8009f32:	2800      	cmp	r0, #0
 8009f34:	d1ed      	bne.n	8009f12 <__swbuf_r+0x2a>
 8009f36:	68a3      	ldr	r3, [r4, #8]
 8009f38:	3b01      	subs	r3, #1
 8009f3a:	60a3      	str	r3, [r4, #8]
 8009f3c:	6823      	ldr	r3, [r4, #0]
 8009f3e:	1c5a      	adds	r2, r3, #1
 8009f40:	6022      	str	r2, [r4, #0]
 8009f42:	701e      	strb	r6, [r3, #0]
 8009f44:	6962      	ldr	r2, [r4, #20]
 8009f46:	1c43      	adds	r3, r0, #1
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d004      	beq.n	8009f56 <__swbuf_r+0x6e>
 8009f4c:	89a3      	ldrh	r3, [r4, #12]
 8009f4e:	07db      	lsls	r3, r3, #31
 8009f50:	d5e1      	bpl.n	8009f16 <__swbuf_r+0x2e>
 8009f52:	2e0a      	cmp	r6, #10
 8009f54:	d1df      	bne.n	8009f16 <__swbuf_r+0x2e>
 8009f56:	4621      	mov	r1, r4
 8009f58:	4628      	mov	r0, r5
 8009f5a:	f7ff fd83 	bl	8009a64 <_fflush_r>
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	d0d9      	beq.n	8009f16 <__swbuf_r+0x2e>
 8009f62:	e7d6      	b.n	8009f12 <__swbuf_r+0x2a>

08009f64 <__swsetup_r>:
 8009f64:	b538      	push	{r3, r4, r5, lr}
 8009f66:	4b29      	ldr	r3, [pc, #164]	@ (800a00c <__swsetup_r+0xa8>)
 8009f68:	4605      	mov	r5, r0
 8009f6a:	6818      	ldr	r0, [r3, #0]
 8009f6c:	460c      	mov	r4, r1
 8009f6e:	b118      	cbz	r0, 8009f78 <__swsetup_r+0x14>
 8009f70:	6a03      	ldr	r3, [r0, #32]
 8009f72:	b90b      	cbnz	r3, 8009f78 <__swsetup_r+0x14>
 8009f74:	f7fd ff9e 	bl	8007eb4 <__sinit>
 8009f78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f7c:	0719      	lsls	r1, r3, #28
 8009f7e:	d422      	bmi.n	8009fc6 <__swsetup_r+0x62>
 8009f80:	06da      	lsls	r2, r3, #27
 8009f82:	d407      	bmi.n	8009f94 <__swsetup_r+0x30>
 8009f84:	2209      	movs	r2, #9
 8009f86:	602a      	str	r2, [r5, #0]
 8009f88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f8c:	81a3      	strh	r3, [r4, #12]
 8009f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f92:	e033      	b.n	8009ffc <__swsetup_r+0x98>
 8009f94:	0758      	lsls	r0, r3, #29
 8009f96:	d512      	bpl.n	8009fbe <__swsetup_r+0x5a>
 8009f98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f9a:	b141      	cbz	r1, 8009fae <__swsetup_r+0x4a>
 8009f9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009fa0:	4299      	cmp	r1, r3
 8009fa2:	d002      	beq.n	8009faa <__swsetup_r+0x46>
 8009fa4:	4628      	mov	r0, r5
 8009fa6:	f7fe feff 	bl	8008da8 <_free_r>
 8009faa:	2300      	movs	r3, #0
 8009fac:	6363      	str	r3, [r4, #52]	@ 0x34
 8009fae:	89a3      	ldrh	r3, [r4, #12]
 8009fb0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009fb4:	81a3      	strh	r3, [r4, #12]
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	6063      	str	r3, [r4, #4]
 8009fba:	6923      	ldr	r3, [r4, #16]
 8009fbc:	6023      	str	r3, [r4, #0]
 8009fbe:	89a3      	ldrh	r3, [r4, #12]
 8009fc0:	f043 0308 	orr.w	r3, r3, #8
 8009fc4:	81a3      	strh	r3, [r4, #12]
 8009fc6:	6923      	ldr	r3, [r4, #16]
 8009fc8:	b94b      	cbnz	r3, 8009fde <__swsetup_r+0x7a>
 8009fca:	89a3      	ldrh	r3, [r4, #12]
 8009fcc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009fd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fd4:	d003      	beq.n	8009fde <__swsetup_r+0x7a>
 8009fd6:	4621      	mov	r1, r4
 8009fd8:	4628      	mov	r0, r5
 8009fda:	f000 f883 	bl	800a0e4 <__smakebuf_r>
 8009fde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fe2:	f013 0201 	ands.w	r2, r3, #1
 8009fe6:	d00a      	beq.n	8009ffe <__swsetup_r+0x9a>
 8009fe8:	2200      	movs	r2, #0
 8009fea:	60a2      	str	r2, [r4, #8]
 8009fec:	6962      	ldr	r2, [r4, #20]
 8009fee:	4252      	negs	r2, r2
 8009ff0:	61a2      	str	r2, [r4, #24]
 8009ff2:	6922      	ldr	r2, [r4, #16]
 8009ff4:	b942      	cbnz	r2, 800a008 <__swsetup_r+0xa4>
 8009ff6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009ffa:	d1c5      	bne.n	8009f88 <__swsetup_r+0x24>
 8009ffc:	bd38      	pop	{r3, r4, r5, pc}
 8009ffe:	0799      	lsls	r1, r3, #30
 800a000:	bf58      	it	pl
 800a002:	6962      	ldrpl	r2, [r4, #20]
 800a004:	60a2      	str	r2, [r4, #8]
 800a006:	e7f4      	b.n	8009ff2 <__swsetup_r+0x8e>
 800a008:	2000      	movs	r0, #0
 800a00a:	e7f7      	b.n	8009ffc <__swsetup_r+0x98>
 800a00c:	20000024 	.word	0x20000024

0800a010 <_raise_r>:
 800a010:	291f      	cmp	r1, #31
 800a012:	b538      	push	{r3, r4, r5, lr}
 800a014:	4605      	mov	r5, r0
 800a016:	460c      	mov	r4, r1
 800a018:	d904      	bls.n	800a024 <_raise_r+0x14>
 800a01a:	2316      	movs	r3, #22
 800a01c:	6003      	str	r3, [r0, #0]
 800a01e:	f04f 30ff 	mov.w	r0, #4294967295
 800a022:	bd38      	pop	{r3, r4, r5, pc}
 800a024:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a026:	b112      	cbz	r2, 800a02e <_raise_r+0x1e>
 800a028:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a02c:	b94b      	cbnz	r3, 800a042 <_raise_r+0x32>
 800a02e:	4628      	mov	r0, r5
 800a030:	f000 f830 	bl	800a094 <_getpid_r>
 800a034:	4622      	mov	r2, r4
 800a036:	4601      	mov	r1, r0
 800a038:	4628      	mov	r0, r5
 800a03a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a03e:	f000 b817 	b.w	800a070 <_kill_r>
 800a042:	2b01      	cmp	r3, #1
 800a044:	d00a      	beq.n	800a05c <_raise_r+0x4c>
 800a046:	1c59      	adds	r1, r3, #1
 800a048:	d103      	bne.n	800a052 <_raise_r+0x42>
 800a04a:	2316      	movs	r3, #22
 800a04c:	6003      	str	r3, [r0, #0]
 800a04e:	2001      	movs	r0, #1
 800a050:	e7e7      	b.n	800a022 <_raise_r+0x12>
 800a052:	2100      	movs	r1, #0
 800a054:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a058:	4620      	mov	r0, r4
 800a05a:	4798      	blx	r3
 800a05c:	2000      	movs	r0, #0
 800a05e:	e7e0      	b.n	800a022 <_raise_r+0x12>

0800a060 <raise>:
 800a060:	4b02      	ldr	r3, [pc, #8]	@ (800a06c <raise+0xc>)
 800a062:	4601      	mov	r1, r0
 800a064:	6818      	ldr	r0, [r3, #0]
 800a066:	f7ff bfd3 	b.w	800a010 <_raise_r>
 800a06a:	bf00      	nop
 800a06c:	20000024 	.word	0x20000024

0800a070 <_kill_r>:
 800a070:	b538      	push	{r3, r4, r5, lr}
 800a072:	4d07      	ldr	r5, [pc, #28]	@ (800a090 <_kill_r+0x20>)
 800a074:	2300      	movs	r3, #0
 800a076:	4604      	mov	r4, r0
 800a078:	4608      	mov	r0, r1
 800a07a:	4611      	mov	r1, r2
 800a07c:	602b      	str	r3, [r5, #0]
 800a07e:	f7f9 fa89 	bl	8003594 <_kill>
 800a082:	1c43      	adds	r3, r0, #1
 800a084:	d102      	bne.n	800a08c <_kill_r+0x1c>
 800a086:	682b      	ldr	r3, [r5, #0]
 800a088:	b103      	cbz	r3, 800a08c <_kill_r+0x1c>
 800a08a:	6023      	str	r3, [r4, #0]
 800a08c:	bd38      	pop	{r3, r4, r5, pc}
 800a08e:	bf00      	nop
 800a090:	200009bc 	.word	0x200009bc

0800a094 <_getpid_r>:
 800a094:	f7f9 ba76 	b.w	8003584 <_getpid>

0800a098 <__swhatbuf_r>:
 800a098:	b570      	push	{r4, r5, r6, lr}
 800a09a:	460c      	mov	r4, r1
 800a09c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0a0:	2900      	cmp	r1, #0
 800a0a2:	b096      	sub	sp, #88	@ 0x58
 800a0a4:	4615      	mov	r5, r2
 800a0a6:	461e      	mov	r6, r3
 800a0a8:	da0d      	bge.n	800a0c6 <__swhatbuf_r+0x2e>
 800a0aa:	89a3      	ldrh	r3, [r4, #12]
 800a0ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a0b0:	f04f 0100 	mov.w	r1, #0
 800a0b4:	bf14      	ite	ne
 800a0b6:	2340      	movne	r3, #64	@ 0x40
 800a0b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a0bc:	2000      	movs	r0, #0
 800a0be:	6031      	str	r1, [r6, #0]
 800a0c0:	602b      	str	r3, [r5, #0]
 800a0c2:	b016      	add	sp, #88	@ 0x58
 800a0c4:	bd70      	pop	{r4, r5, r6, pc}
 800a0c6:	466a      	mov	r2, sp
 800a0c8:	f000 f848 	bl	800a15c <_fstat_r>
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	dbec      	blt.n	800a0aa <__swhatbuf_r+0x12>
 800a0d0:	9901      	ldr	r1, [sp, #4]
 800a0d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a0d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a0da:	4259      	negs	r1, r3
 800a0dc:	4159      	adcs	r1, r3
 800a0de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a0e2:	e7eb      	b.n	800a0bc <__swhatbuf_r+0x24>

0800a0e4 <__smakebuf_r>:
 800a0e4:	898b      	ldrh	r3, [r1, #12]
 800a0e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0e8:	079d      	lsls	r5, r3, #30
 800a0ea:	4606      	mov	r6, r0
 800a0ec:	460c      	mov	r4, r1
 800a0ee:	d507      	bpl.n	800a100 <__smakebuf_r+0x1c>
 800a0f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a0f4:	6023      	str	r3, [r4, #0]
 800a0f6:	6123      	str	r3, [r4, #16]
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	6163      	str	r3, [r4, #20]
 800a0fc:	b003      	add	sp, #12
 800a0fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a100:	ab01      	add	r3, sp, #4
 800a102:	466a      	mov	r2, sp
 800a104:	f7ff ffc8 	bl	800a098 <__swhatbuf_r>
 800a108:	9f00      	ldr	r7, [sp, #0]
 800a10a:	4605      	mov	r5, r0
 800a10c:	4639      	mov	r1, r7
 800a10e:	4630      	mov	r0, r6
 800a110:	f7fe febe 	bl	8008e90 <_malloc_r>
 800a114:	b948      	cbnz	r0, 800a12a <__smakebuf_r+0x46>
 800a116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a11a:	059a      	lsls	r2, r3, #22
 800a11c:	d4ee      	bmi.n	800a0fc <__smakebuf_r+0x18>
 800a11e:	f023 0303 	bic.w	r3, r3, #3
 800a122:	f043 0302 	orr.w	r3, r3, #2
 800a126:	81a3      	strh	r3, [r4, #12]
 800a128:	e7e2      	b.n	800a0f0 <__smakebuf_r+0xc>
 800a12a:	89a3      	ldrh	r3, [r4, #12]
 800a12c:	6020      	str	r0, [r4, #0]
 800a12e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a132:	81a3      	strh	r3, [r4, #12]
 800a134:	9b01      	ldr	r3, [sp, #4]
 800a136:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a13a:	b15b      	cbz	r3, 800a154 <__smakebuf_r+0x70>
 800a13c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a140:	4630      	mov	r0, r6
 800a142:	f000 f81d 	bl	800a180 <_isatty_r>
 800a146:	b128      	cbz	r0, 800a154 <__smakebuf_r+0x70>
 800a148:	89a3      	ldrh	r3, [r4, #12]
 800a14a:	f023 0303 	bic.w	r3, r3, #3
 800a14e:	f043 0301 	orr.w	r3, r3, #1
 800a152:	81a3      	strh	r3, [r4, #12]
 800a154:	89a3      	ldrh	r3, [r4, #12]
 800a156:	431d      	orrs	r5, r3
 800a158:	81a5      	strh	r5, [r4, #12]
 800a15a:	e7cf      	b.n	800a0fc <__smakebuf_r+0x18>

0800a15c <_fstat_r>:
 800a15c:	b538      	push	{r3, r4, r5, lr}
 800a15e:	4d07      	ldr	r5, [pc, #28]	@ (800a17c <_fstat_r+0x20>)
 800a160:	2300      	movs	r3, #0
 800a162:	4604      	mov	r4, r0
 800a164:	4608      	mov	r0, r1
 800a166:	4611      	mov	r1, r2
 800a168:	602b      	str	r3, [r5, #0]
 800a16a:	f7f9 fa73 	bl	8003654 <_fstat>
 800a16e:	1c43      	adds	r3, r0, #1
 800a170:	d102      	bne.n	800a178 <_fstat_r+0x1c>
 800a172:	682b      	ldr	r3, [r5, #0]
 800a174:	b103      	cbz	r3, 800a178 <_fstat_r+0x1c>
 800a176:	6023      	str	r3, [r4, #0]
 800a178:	bd38      	pop	{r3, r4, r5, pc}
 800a17a:	bf00      	nop
 800a17c:	200009bc 	.word	0x200009bc

0800a180 <_isatty_r>:
 800a180:	b538      	push	{r3, r4, r5, lr}
 800a182:	4d06      	ldr	r5, [pc, #24]	@ (800a19c <_isatty_r+0x1c>)
 800a184:	2300      	movs	r3, #0
 800a186:	4604      	mov	r4, r0
 800a188:	4608      	mov	r0, r1
 800a18a:	602b      	str	r3, [r5, #0]
 800a18c:	f7f9 fa72 	bl	8003674 <_isatty>
 800a190:	1c43      	adds	r3, r0, #1
 800a192:	d102      	bne.n	800a19a <_isatty_r+0x1a>
 800a194:	682b      	ldr	r3, [r5, #0]
 800a196:	b103      	cbz	r3, 800a19a <_isatty_r+0x1a>
 800a198:	6023      	str	r3, [r4, #0]
 800a19a:	bd38      	pop	{r3, r4, r5, pc}
 800a19c:	200009bc 	.word	0x200009bc

0800a1a0 <pow>:
 800a1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1a2:	ed2d 8b02 	vpush	{d8}
 800a1a6:	eeb0 8a40 	vmov.f32	s16, s0
 800a1aa:	eef0 8a60 	vmov.f32	s17, s1
 800a1ae:	ec55 4b11 	vmov	r4, r5, d1
 800a1b2:	f000 fb81 	bl	800a8b8 <__ieee754_pow>
 800a1b6:	4622      	mov	r2, r4
 800a1b8:	462b      	mov	r3, r5
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	4629      	mov	r1, r5
 800a1be:	ec57 6b10 	vmov	r6, r7, d0
 800a1c2:	f7f6 fcd3 	bl	8000b6c <__aeabi_dcmpun>
 800a1c6:	2800      	cmp	r0, #0
 800a1c8:	d13b      	bne.n	800a242 <pow+0xa2>
 800a1ca:	ec51 0b18 	vmov	r0, r1, d8
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	f7f6 fc99 	bl	8000b08 <__aeabi_dcmpeq>
 800a1d6:	b1b8      	cbz	r0, 800a208 <pow+0x68>
 800a1d8:	2200      	movs	r2, #0
 800a1da:	2300      	movs	r3, #0
 800a1dc:	4620      	mov	r0, r4
 800a1de:	4629      	mov	r1, r5
 800a1e0:	f7f6 fc92 	bl	8000b08 <__aeabi_dcmpeq>
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	d146      	bne.n	800a276 <pow+0xd6>
 800a1e8:	ec45 4b10 	vmov	d0, r4, r5
 800a1ec:	f000 f8f8 	bl	800a3e0 <finite>
 800a1f0:	b338      	cbz	r0, 800a242 <pow+0xa2>
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	4629      	mov	r1, r5
 800a1fa:	f7f6 fc8f 	bl	8000b1c <__aeabi_dcmplt>
 800a1fe:	b300      	cbz	r0, 800a242 <pow+0xa2>
 800a200:	f7fd ff58 	bl	80080b4 <__errno>
 800a204:	2322      	movs	r3, #34	@ 0x22
 800a206:	e01b      	b.n	800a240 <pow+0xa0>
 800a208:	ec47 6b10 	vmov	d0, r6, r7
 800a20c:	f000 f8e8 	bl	800a3e0 <finite>
 800a210:	b9e0      	cbnz	r0, 800a24c <pow+0xac>
 800a212:	eeb0 0a48 	vmov.f32	s0, s16
 800a216:	eef0 0a68 	vmov.f32	s1, s17
 800a21a:	f000 f8e1 	bl	800a3e0 <finite>
 800a21e:	b1a8      	cbz	r0, 800a24c <pow+0xac>
 800a220:	ec45 4b10 	vmov	d0, r4, r5
 800a224:	f000 f8dc 	bl	800a3e0 <finite>
 800a228:	b180      	cbz	r0, 800a24c <pow+0xac>
 800a22a:	4632      	mov	r2, r6
 800a22c:	463b      	mov	r3, r7
 800a22e:	4630      	mov	r0, r6
 800a230:	4639      	mov	r1, r7
 800a232:	f7f6 fc9b 	bl	8000b6c <__aeabi_dcmpun>
 800a236:	2800      	cmp	r0, #0
 800a238:	d0e2      	beq.n	800a200 <pow+0x60>
 800a23a:	f7fd ff3b 	bl	80080b4 <__errno>
 800a23e:	2321      	movs	r3, #33	@ 0x21
 800a240:	6003      	str	r3, [r0, #0]
 800a242:	ecbd 8b02 	vpop	{d8}
 800a246:	ec47 6b10 	vmov	d0, r6, r7
 800a24a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a24c:	2200      	movs	r2, #0
 800a24e:	2300      	movs	r3, #0
 800a250:	4630      	mov	r0, r6
 800a252:	4639      	mov	r1, r7
 800a254:	f7f6 fc58 	bl	8000b08 <__aeabi_dcmpeq>
 800a258:	2800      	cmp	r0, #0
 800a25a:	d0f2      	beq.n	800a242 <pow+0xa2>
 800a25c:	eeb0 0a48 	vmov.f32	s0, s16
 800a260:	eef0 0a68 	vmov.f32	s1, s17
 800a264:	f000 f8bc 	bl	800a3e0 <finite>
 800a268:	2800      	cmp	r0, #0
 800a26a:	d0ea      	beq.n	800a242 <pow+0xa2>
 800a26c:	ec45 4b10 	vmov	d0, r4, r5
 800a270:	f000 f8b6 	bl	800a3e0 <finite>
 800a274:	e7c3      	b.n	800a1fe <pow+0x5e>
 800a276:	4f01      	ldr	r7, [pc, #4]	@ (800a27c <pow+0xdc>)
 800a278:	2600      	movs	r6, #0
 800a27a:	e7e2      	b.n	800a242 <pow+0xa2>
 800a27c:	3ff00000 	.word	0x3ff00000

0800a280 <cos>:
 800a280:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a282:	ec53 2b10 	vmov	r2, r3, d0
 800a286:	4826      	ldr	r0, [pc, #152]	@ (800a320 <cos+0xa0>)
 800a288:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a28c:	4281      	cmp	r1, r0
 800a28e:	d806      	bhi.n	800a29e <cos+0x1e>
 800a290:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800a318 <cos+0x98>
 800a294:	b005      	add	sp, #20
 800a296:	f85d eb04 	ldr.w	lr, [sp], #4
 800a29a:	f000 b989 	b.w	800a5b0 <__kernel_cos>
 800a29e:	4821      	ldr	r0, [pc, #132]	@ (800a324 <cos+0xa4>)
 800a2a0:	4281      	cmp	r1, r0
 800a2a2:	d908      	bls.n	800a2b6 <cos+0x36>
 800a2a4:	4610      	mov	r0, r2
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	f7f6 f80e 	bl	80002c8 <__aeabi_dsub>
 800a2ac:	ec41 0b10 	vmov	d0, r0, r1
 800a2b0:	b005      	add	sp, #20
 800a2b2:	f85d fb04 	ldr.w	pc, [sp], #4
 800a2b6:	4668      	mov	r0, sp
 800a2b8:	f001 f842 	bl	800b340 <__ieee754_rem_pio2>
 800a2bc:	f000 0003 	and.w	r0, r0, #3
 800a2c0:	2801      	cmp	r0, #1
 800a2c2:	d00b      	beq.n	800a2dc <cos+0x5c>
 800a2c4:	2802      	cmp	r0, #2
 800a2c6:	d015      	beq.n	800a2f4 <cos+0x74>
 800a2c8:	b9d8      	cbnz	r0, 800a302 <cos+0x82>
 800a2ca:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a2ce:	ed9d 0b00 	vldr	d0, [sp]
 800a2d2:	f000 f96d 	bl	800a5b0 <__kernel_cos>
 800a2d6:	ec51 0b10 	vmov	r0, r1, d0
 800a2da:	e7e7      	b.n	800a2ac <cos+0x2c>
 800a2dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a2e0:	ed9d 0b00 	vldr	d0, [sp]
 800a2e4:	f000 fa2c 	bl	800a740 <__kernel_sin>
 800a2e8:	ec53 2b10 	vmov	r2, r3, d0
 800a2ec:	4610      	mov	r0, r2
 800a2ee:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a2f2:	e7db      	b.n	800a2ac <cos+0x2c>
 800a2f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a2f8:	ed9d 0b00 	vldr	d0, [sp]
 800a2fc:	f000 f958 	bl	800a5b0 <__kernel_cos>
 800a300:	e7f2      	b.n	800a2e8 <cos+0x68>
 800a302:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a306:	ed9d 0b00 	vldr	d0, [sp]
 800a30a:	2001      	movs	r0, #1
 800a30c:	f000 fa18 	bl	800a740 <__kernel_sin>
 800a310:	e7e1      	b.n	800a2d6 <cos+0x56>
 800a312:	bf00      	nop
 800a314:	f3af 8000 	nop.w
	...
 800a320:	3fe921fb 	.word	0x3fe921fb
 800a324:	7fefffff 	.word	0x7fefffff

0800a328 <fabs>:
 800a328:	ec51 0b10 	vmov	r0, r1, d0
 800a32c:	4602      	mov	r2, r0
 800a32e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a332:	ec43 2b10 	vmov	d0, r2, r3
 800a336:	4770      	bx	lr

0800a338 <sin>:
 800a338:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a33a:	ec53 2b10 	vmov	r2, r3, d0
 800a33e:	4826      	ldr	r0, [pc, #152]	@ (800a3d8 <sin+0xa0>)
 800a340:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a344:	4281      	cmp	r1, r0
 800a346:	d807      	bhi.n	800a358 <sin+0x20>
 800a348:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800a3d0 <sin+0x98>
 800a34c:	2000      	movs	r0, #0
 800a34e:	b005      	add	sp, #20
 800a350:	f85d eb04 	ldr.w	lr, [sp], #4
 800a354:	f000 b9f4 	b.w	800a740 <__kernel_sin>
 800a358:	4820      	ldr	r0, [pc, #128]	@ (800a3dc <sin+0xa4>)
 800a35a:	4281      	cmp	r1, r0
 800a35c:	d908      	bls.n	800a370 <sin+0x38>
 800a35e:	4610      	mov	r0, r2
 800a360:	4619      	mov	r1, r3
 800a362:	f7f5 ffb1 	bl	80002c8 <__aeabi_dsub>
 800a366:	ec41 0b10 	vmov	d0, r0, r1
 800a36a:	b005      	add	sp, #20
 800a36c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a370:	4668      	mov	r0, sp
 800a372:	f000 ffe5 	bl	800b340 <__ieee754_rem_pio2>
 800a376:	f000 0003 	and.w	r0, r0, #3
 800a37a:	2801      	cmp	r0, #1
 800a37c:	d00c      	beq.n	800a398 <sin+0x60>
 800a37e:	2802      	cmp	r0, #2
 800a380:	d011      	beq.n	800a3a6 <sin+0x6e>
 800a382:	b9e8      	cbnz	r0, 800a3c0 <sin+0x88>
 800a384:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a388:	ed9d 0b00 	vldr	d0, [sp]
 800a38c:	2001      	movs	r0, #1
 800a38e:	f000 f9d7 	bl	800a740 <__kernel_sin>
 800a392:	ec51 0b10 	vmov	r0, r1, d0
 800a396:	e7e6      	b.n	800a366 <sin+0x2e>
 800a398:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a39c:	ed9d 0b00 	vldr	d0, [sp]
 800a3a0:	f000 f906 	bl	800a5b0 <__kernel_cos>
 800a3a4:	e7f5      	b.n	800a392 <sin+0x5a>
 800a3a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a3aa:	ed9d 0b00 	vldr	d0, [sp]
 800a3ae:	2001      	movs	r0, #1
 800a3b0:	f000 f9c6 	bl	800a740 <__kernel_sin>
 800a3b4:	ec53 2b10 	vmov	r2, r3, d0
 800a3b8:	4610      	mov	r0, r2
 800a3ba:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a3be:	e7d2      	b.n	800a366 <sin+0x2e>
 800a3c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a3c4:	ed9d 0b00 	vldr	d0, [sp]
 800a3c8:	f000 f8f2 	bl	800a5b0 <__kernel_cos>
 800a3cc:	e7f2      	b.n	800a3b4 <sin+0x7c>
 800a3ce:	bf00      	nop
	...
 800a3d8:	3fe921fb 	.word	0x3fe921fb
 800a3dc:	7fefffff 	.word	0x7fefffff

0800a3e0 <finite>:
 800a3e0:	b082      	sub	sp, #8
 800a3e2:	ed8d 0b00 	vstr	d0, [sp]
 800a3e6:	9801      	ldr	r0, [sp, #4]
 800a3e8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800a3ec:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800a3f0:	0fc0      	lsrs	r0, r0, #31
 800a3f2:	b002      	add	sp, #8
 800a3f4:	4770      	bx	lr
	...

0800a3f8 <__ieee754_sqrt>:
 800a3f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3fc:	4a68      	ldr	r2, [pc, #416]	@ (800a5a0 <__ieee754_sqrt+0x1a8>)
 800a3fe:	ec55 4b10 	vmov	r4, r5, d0
 800a402:	43aa      	bics	r2, r5
 800a404:	462b      	mov	r3, r5
 800a406:	4621      	mov	r1, r4
 800a408:	d110      	bne.n	800a42c <__ieee754_sqrt+0x34>
 800a40a:	4622      	mov	r2, r4
 800a40c:	4620      	mov	r0, r4
 800a40e:	4629      	mov	r1, r5
 800a410:	f7f6 f912 	bl	8000638 <__aeabi_dmul>
 800a414:	4602      	mov	r2, r0
 800a416:	460b      	mov	r3, r1
 800a418:	4620      	mov	r0, r4
 800a41a:	4629      	mov	r1, r5
 800a41c:	f7f5 ff56 	bl	80002cc <__adddf3>
 800a420:	4604      	mov	r4, r0
 800a422:	460d      	mov	r5, r1
 800a424:	ec45 4b10 	vmov	d0, r4, r5
 800a428:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a42c:	2d00      	cmp	r5, #0
 800a42e:	dc0e      	bgt.n	800a44e <__ieee754_sqrt+0x56>
 800a430:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a434:	4322      	orrs	r2, r4
 800a436:	d0f5      	beq.n	800a424 <__ieee754_sqrt+0x2c>
 800a438:	b19d      	cbz	r5, 800a462 <__ieee754_sqrt+0x6a>
 800a43a:	4622      	mov	r2, r4
 800a43c:	4620      	mov	r0, r4
 800a43e:	4629      	mov	r1, r5
 800a440:	f7f5 ff42 	bl	80002c8 <__aeabi_dsub>
 800a444:	4602      	mov	r2, r0
 800a446:	460b      	mov	r3, r1
 800a448:	f7f6 fa20 	bl	800088c <__aeabi_ddiv>
 800a44c:	e7e8      	b.n	800a420 <__ieee754_sqrt+0x28>
 800a44e:	152a      	asrs	r2, r5, #20
 800a450:	d115      	bne.n	800a47e <__ieee754_sqrt+0x86>
 800a452:	2000      	movs	r0, #0
 800a454:	e009      	b.n	800a46a <__ieee754_sqrt+0x72>
 800a456:	0acb      	lsrs	r3, r1, #11
 800a458:	3a15      	subs	r2, #21
 800a45a:	0549      	lsls	r1, r1, #21
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d0fa      	beq.n	800a456 <__ieee754_sqrt+0x5e>
 800a460:	e7f7      	b.n	800a452 <__ieee754_sqrt+0x5a>
 800a462:	462a      	mov	r2, r5
 800a464:	e7fa      	b.n	800a45c <__ieee754_sqrt+0x64>
 800a466:	005b      	lsls	r3, r3, #1
 800a468:	3001      	adds	r0, #1
 800a46a:	02dc      	lsls	r4, r3, #11
 800a46c:	d5fb      	bpl.n	800a466 <__ieee754_sqrt+0x6e>
 800a46e:	1e44      	subs	r4, r0, #1
 800a470:	1b12      	subs	r2, r2, r4
 800a472:	f1c0 0420 	rsb	r4, r0, #32
 800a476:	fa21 f404 	lsr.w	r4, r1, r4
 800a47a:	4323      	orrs	r3, r4
 800a47c:	4081      	lsls	r1, r0
 800a47e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a482:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800a486:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a48a:	07d2      	lsls	r2, r2, #31
 800a48c:	bf5c      	itt	pl
 800a48e:	005b      	lslpl	r3, r3, #1
 800a490:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800a494:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a498:	bf58      	it	pl
 800a49a:	0049      	lslpl	r1, r1, #1
 800a49c:	2600      	movs	r6, #0
 800a49e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800a4a2:	106d      	asrs	r5, r5, #1
 800a4a4:	0049      	lsls	r1, r1, #1
 800a4a6:	2016      	movs	r0, #22
 800a4a8:	4632      	mov	r2, r6
 800a4aa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800a4ae:	1917      	adds	r7, r2, r4
 800a4b0:	429f      	cmp	r7, r3
 800a4b2:	bfde      	ittt	le
 800a4b4:	193a      	addle	r2, r7, r4
 800a4b6:	1bdb      	suble	r3, r3, r7
 800a4b8:	1936      	addle	r6, r6, r4
 800a4ba:	0fcf      	lsrs	r7, r1, #31
 800a4bc:	3801      	subs	r0, #1
 800a4be:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800a4c2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a4c6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a4ca:	d1f0      	bne.n	800a4ae <__ieee754_sqrt+0xb6>
 800a4cc:	4604      	mov	r4, r0
 800a4ce:	2720      	movs	r7, #32
 800a4d0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	eb00 0e0c 	add.w	lr, r0, ip
 800a4da:	db02      	blt.n	800a4e2 <__ieee754_sqrt+0xea>
 800a4dc:	d113      	bne.n	800a506 <__ieee754_sqrt+0x10e>
 800a4de:	458e      	cmp	lr, r1
 800a4e0:	d811      	bhi.n	800a506 <__ieee754_sqrt+0x10e>
 800a4e2:	f1be 0f00 	cmp.w	lr, #0
 800a4e6:	eb0e 000c 	add.w	r0, lr, ip
 800a4ea:	da42      	bge.n	800a572 <__ieee754_sqrt+0x17a>
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	db40      	blt.n	800a572 <__ieee754_sqrt+0x17a>
 800a4f0:	f102 0801 	add.w	r8, r2, #1
 800a4f4:	1a9b      	subs	r3, r3, r2
 800a4f6:	458e      	cmp	lr, r1
 800a4f8:	bf88      	it	hi
 800a4fa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a4fe:	eba1 010e 	sub.w	r1, r1, lr
 800a502:	4464      	add	r4, ip
 800a504:	4642      	mov	r2, r8
 800a506:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800a50a:	3f01      	subs	r7, #1
 800a50c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800a510:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a514:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a518:	d1dc      	bne.n	800a4d4 <__ieee754_sqrt+0xdc>
 800a51a:	4319      	orrs	r1, r3
 800a51c:	d01b      	beq.n	800a556 <__ieee754_sqrt+0x15e>
 800a51e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800a5a4 <__ieee754_sqrt+0x1ac>
 800a522:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800a5a8 <__ieee754_sqrt+0x1b0>
 800a526:	e9da 0100 	ldrd	r0, r1, [sl]
 800a52a:	e9db 2300 	ldrd	r2, r3, [fp]
 800a52e:	f7f5 fecb 	bl	80002c8 <__aeabi_dsub>
 800a532:	e9da 8900 	ldrd	r8, r9, [sl]
 800a536:	4602      	mov	r2, r0
 800a538:	460b      	mov	r3, r1
 800a53a:	4640      	mov	r0, r8
 800a53c:	4649      	mov	r1, r9
 800a53e:	f7f6 faf7 	bl	8000b30 <__aeabi_dcmple>
 800a542:	b140      	cbz	r0, 800a556 <__ieee754_sqrt+0x15e>
 800a544:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a548:	e9da 0100 	ldrd	r0, r1, [sl]
 800a54c:	e9db 2300 	ldrd	r2, r3, [fp]
 800a550:	d111      	bne.n	800a576 <__ieee754_sqrt+0x17e>
 800a552:	3601      	adds	r6, #1
 800a554:	463c      	mov	r4, r7
 800a556:	1072      	asrs	r2, r6, #1
 800a558:	0863      	lsrs	r3, r4, #1
 800a55a:	07f1      	lsls	r1, r6, #31
 800a55c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800a560:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800a564:	bf48      	it	mi
 800a566:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800a56a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800a56e:	4618      	mov	r0, r3
 800a570:	e756      	b.n	800a420 <__ieee754_sqrt+0x28>
 800a572:	4690      	mov	r8, r2
 800a574:	e7be      	b.n	800a4f4 <__ieee754_sqrt+0xfc>
 800a576:	f7f5 fea9 	bl	80002cc <__adddf3>
 800a57a:	e9da 8900 	ldrd	r8, r9, [sl]
 800a57e:	4602      	mov	r2, r0
 800a580:	460b      	mov	r3, r1
 800a582:	4640      	mov	r0, r8
 800a584:	4649      	mov	r1, r9
 800a586:	f7f6 fac9 	bl	8000b1c <__aeabi_dcmplt>
 800a58a:	b120      	cbz	r0, 800a596 <__ieee754_sqrt+0x19e>
 800a58c:	1ca0      	adds	r0, r4, #2
 800a58e:	bf08      	it	eq
 800a590:	3601      	addeq	r6, #1
 800a592:	3402      	adds	r4, #2
 800a594:	e7df      	b.n	800a556 <__ieee754_sqrt+0x15e>
 800a596:	1c63      	adds	r3, r4, #1
 800a598:	f023 0401 	bic.w	r4, r3, #1
 800a59c:	e7db      	b.n	800a556 <__ieee754_sqrt+0x15e>
 800a59e:	bf00      	nop
 800a5a0:	7ff00000 	.word	0x7ff00000
 800a5a4:	200001e8 	.word	0x200001e8
 800a5a8:	200001e0 	.word	0x200001e0
 800a5ac:	00000000 	.word	0x00000000

0800a5b0 <__kernel_cos>:
 800a5b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b4:	ec57 6b10 	vmov	r6, r7, d0
 800a5b8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a5bc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800a5c0:	ed8d 1b00 	vstr	d1, [sp]
 800a5c4:	d206      	bcs.n	800a5d4 <__kernel_cos+0x24>
 800a5c6:	4630      	mov	r0, r6
 800a5c8:	4639      	mov	r1, r7
 800a5ca:	f7f6 fae5 	bl	8000b98 <__aeabi_d2iz>
 800a5ce:	2800      	cmp	r0, #0
 800a5d0:	f000 8088 	beq.w	800a6e4 <__kernel_cos+0x134>
 800a5d4:	4632      	mov	r2, r6
 800a5d6:	463b      	mov	r3, r7
 800a5d8:	4630      	mov	r0, r6
 800a5da:	4639      	mov	r1, r7
 800a5dc:	f7f6 f82c 	bl	8000638 <__aeabi_dmul>
 800a5e0:	4b51      	ldr	r3, [pc, #324]	@ (800a728 <__kernel_cos+0x178>)
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	4604      	mov	r4, r0
 800a5e6:	460d      	mov	r5, r1
 800a5e8:	f7f6 f826 	bl	8000638 <__aeabi_dmul>
 800a5ec:	a340      	add	r3, pc, #256	@ (adr r3, 800a6f0 <__kernel_cos+0x140>)
 800a5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f2:	4682      	mov	sl, r0
 800a5f4:	468b      	mov	fp, r1
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	4629      	mov	r1, r5
 800a5fa:	f7f6 f81d 	bl	8000638 <__aeabi_dmul>
 800a5fe:	a33e      	add	r3, pc, #248	@ (adr r3, 800a6f8 <__kernel_cos+0x148>)
 800a600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a604:	f7f5 fe62 	bl	80002cc <__adddf3>
 800a608:	4622      	mov	r2, r4
 800a60a:	462b      	mov	r3, r5
 800a60c:	f7f6 f814 	bl	8000638 <__aeabi_dmul>
 800a610:	a33b      	add	r3, pc, #236	@ (adr r3, 800a700 <__kernel_cos+0x150>)
 800a612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a616:	f7f5 fe57 	bl	80002c8 <__aeabi_dsub>
 800a61a:	4622      	mov	r2, r4
 800a61c:	462b      	mov	r3, r5
 800a61e:	f7f6 f80b 	bl	8000638 <__aeabi_dmul>
 800a622:	a339      	add	r3, pc, #228	@ (adr r3, 800a708 <__kernel_cos+0x158>)
 800a624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a628:	f7f5 fe50 	bl	80002cc <__adddf3>
 800a62c:	4622      	mov	r2, r4
 800a62e:	462b      	mov	r3, r5
 800a630:	f7f6 f802 	bl	8000638 <__aeabi_dmul>
 800a634:	a336      	add	r3, pc, #216	@ (adr r3, 800a710 <__kernel_cos+0x160>)
 800a636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a63a:	f7f5 fe45 	bl	80002c8 <__aeabi_dsub>
 800a63e:	4622      	mov	r2, r4
 800a640:	462b      	mov	r3, r5
 800a642:	f7f5 fff9 	bl	8000638 <__aeabi_dmul>
 800a646:	a334      	add	r3, pc, #208	@ (adr r3, 800a718 <__kernel_cos+0x168>)
 800a648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a64c:	f7f5 fe3e 	bl	80002cc <__adddf3>
 800a650:	4622      	mov	r2, r4
 800a652:	462b      	mov	r3, r5
 800a654:	f7f5 fff0 	bl	8000638 <__aeabi_dmul>
 800a658:	4622      	mov	r2, r4
 800a65a:	462b      	mov	r3, r5
 800a65c:	f7f5 ffec 	bl	8000638 <__aeabi_dmul>
 800a660:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a664:	4604      	mov	r4, r0
 800a666:	460d      	mov	r5, r1
 800a668:	4630      	mov	r0, r6
 800a66a:	4639      	mov	r1, r7
 800a66c:	f7f5 ffe4 	bl	8000638 <__aeabi_dmul>
 800a670:	460b      	mov	r3, r1
 800a672:	4602      	mov	r2, r0
 800a674:	4629      	mov	r1, r5
 800a676:	4620      	mov	r0, r4
 800a678:	f7f5 fe26 	bl	80002c8 <__aeabi_dsub>
 800a67c:	4b2b      	ldr	r3, [pc, #172]	@ (800a72c <__kernel_cos+0x17c>)
 800a67e:	4598      	cmp	r8, r3
 800a680:	4606      	mov	r6, r0
 800a682:	460f      	mov	r7, r1
 800a684:	d810      	bhi.n	800a6a8 <__kernel_cos+0xf8>
 800a686:	4602      	mov	r2, r0
 800a688:	460b      	mov	r3, r1
 800a68a:	4650      	mov	r0, sl
 800a68c:	4659      	mov	r1, fp
 800a68e:	f7f5 fe1b 	bl	80002c8 <__aeabi_dsub>
 800a692:	460b      	mov	r3, r1
 800a694:	4926      	ldr	r1, [pc, #152]	@ (800a730 <__kernel_cos+0x180>)
 800a696:	4602      	mov	r2, r0
 800a698:	2000      	movs	r0, #0
 800a69a:	f7f5 fe15 	bl	80002c8 <__aeabi_dsub>
 800a69e:	ec41 0b10 	vmov	d0, r0, r1
 800a6a2:	b003      	add	sp, #12
 800a6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6a8:	4b22      	ldr	r3, [pc, #136]	@ (800a734 <__kernel_cos+0x184>)
 800a6aa:	4921      	ldr	r1, [pc, #132]	@ (800a730 <__kernel_cos+0x180>)
 800a6ac:	4598      	cmp	r8, r3
 800a6ae:	bf8c      	ite	hi
 800a6b0:	4d21      	ldrhi	r5, [pc, #132]	@ (800a738 <__kernel_cos+0x188>)
 800a6b2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800a6b6:	2400      	movs	r4, #0
 800a6b8:	4622      	mov	r2, r4
 800a6ba:	462b      	mov	r3, r5
 800a6bc:	2000      	movs	r0, #0
 800a6be:	f7f5 fe03 	bl	80002c8 <__aeabi_dsub>
 800a6c2:	4622      	mov	r2, r4
 800a6c4:	4680      	mov	r8, r0
 800a6c6:	4689      	mov	r9, r1
 800a6c8:	462b      	mov	r3, r5
 800a6ca:	4650      	mov	r0, sl
 800a6cc:	4659      	mov	r1, fp
 800a6ce:	f7f5 fdfb 	bl	80002c8 <__aeabi_dsub>
 800a6d2:	4632      	mov	r2, r6
 800a6d4:	463b      	mov	r3, r7
 800a6d6:	f7f5 fdf7 	bl	80002c8 <__aeabi_dsub>
 800a6da:	4602      	mov	r2, r0
 800a6dc:	460b      	mov	r3, r1
 800a6de:	4640      	mov	r0, r8
 800a6e0:	4649      	mov	r1, r9
 800a6e2:	e7da      	b.n	800a69a <__kernel_cos+0xea>
 800a6e4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800a720 <__kernel_cos+0x170>
 800a6e8:	e7db      	b.n	800a6a2 <__kernel_cos+0xf2>
 800a6ea:	bf00      	nop
 800a6ec:	f3af 8000 	nop.w
 800a6f0:	be8838d4 	.word	0xbe8838d4
 800a6f4:	bda8fae9 	.word	0xbda8fae9
 800a6f8:	bdb4b1c4 	.word	0xbdb4b1c4
 800a6fc:	3e21ee9e 	.word	0x3e21ee9e
 800a700:	809c52ad 	.word	0x809c52ad
 800a704:	3e927e4f 	.word	0x3e927e4f
 800a708:	19cb1590 	.word	0x19cb1590
 800a70c:	3efa01a0 	.word	0x3efa01a0
 800a710:	16c15177 	.word	0x16c15177
 800a714:	3f56c16c 	.word	0x3f56c16c
 800a718:	5555554c 	.word	0x5555554c
 800a71c:	3fa55555 	.word	0x3fa55555
 800a720:	00000000 	.word	0x00000000
 800a724:	3ff00000 	.word	0x3ff00000
 800a728:	3fe00000 	.word	0x3fe00000
 800a72c:	3fd33332 	.word	0x3fd33332
 800a730:	3ff00000 	.word	0x3ff00000
 800a734:	3fe90000 	.word	0x3fe90000
 800a738:	3fd20000 	.word	0x3fd20000
 800a73c:	00000000 	.word	0x00000000

0800a740 <__kernel_sin>:
 800a740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a744:	ec55 4b10 	vmov	r4, r5, d0
 800a748:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a74c:	b085      	sub	sp, #20
 800a74e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800a752:	ed8d 1b02 	vstr	d1, [sp, #8]
 800a756:	4680      	mov	r8, r0
 800a758:	d205      	bcs.n	800a766 <__kernel_sin+0x26>
 800a75a:	4620      	mov	r0, r4
 800a75c:	4629      	mov	r1, r5
 800a75e:	f7f6 fa1b 	bl	8000b98 <__aeabi_d2iz>
 800a762:	2800      	cmp	r0, #0
 800a764:	d052      	beq.n	800a80c <__kernel_sin+0xcc>
 800a766:	4622      	mov	r2, r4
 800a768:	462b      	mov	r3, r5
 800a76a:	4620      	mov	r0, r4
 800a76c:	4629      	mov	r1, r5
 800a76e:	f7f5 ff63 	bl	8000638 <__aeabi_dmul>
 800a772:	4682      	mov	sl, r0
 800a774:	468b      	mov	fp, r1
 800a776:	4602      	mov	r2, r0
 800a778:	460b      	mov	r3, r1
 800a77a:	4620      	mov	r0, r4
 800a77c:	4629      	mov	r1, r5
 800a77e:	f7f5 ff5b 	bl	8000638 <__aeabi_dmul>
 800a782:	a342      	add	r3, pc, #264	@ (adr r3, 800a88c <__kernel_sin+0x14c>)
 800a784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a788:	e9cd 0100 	strd	r0, r1, [sp]
 800a78c:	4650      	mov	r0, sl
 800a78e:	4659      	mov	r1, fp
 800a790:	f7f5 ff52 	bl	8000638 <__aeabi_dmul>
 800a794:	a33f      	add	r3, pc, #252	@ (adr r3, 800a894 <__kernel_sin+0x154>)
 800a796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79a:	f7f5 fd95 	bl	80002c8 <__aeabi_dsub>
 800a79e:	4652      	mov	r2, sl
 800a7a0:	465b      	mov	r3, fp
 800a7a2:	f7f5 ff49 	bl	8000638 <__aeabi_dmul>
 800a7a6:	a33d      	add	r3, pc, #244	@ (adr r3, 800a89c <__kernel_sin+0x15c>)
 800a7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ac:	f7f5 fd8e 	bl	80002cc <__adddf3>
 800a7b0:	4652      	mov	r2, sl
 800a7b2:	465b      	mov	r3, fp
 800a7b4:	f7f5 ff40 	bl	8000638 <__aeabi_dmul>
 800a7b8:	a33a      	add	r3, pc, #232	@ (adr r3, 800a8a4 <__kernel_sin+0x164>)
 800a7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7be:	f7f5 fd83 	bl	80002c8 <__aeabi_dsub>
 800a7c2:	4652      	mov	r2, sl
 800a7c4:	465b      	mov	r3, fp
 800a7c6:	f7f5 ff37 	bl	8000638 <__aeabi_dmul>
 800a7ca:	a338      	add	r3, pc, #224	@ (adr r3, 800a8ac <__kernel_sin+0x16c>)
 800a7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d0:	f7f5 fd7c 	bl	80002cc <__adddf3>
 800a7d4:	4606      	mov	r6, r0
 800a7d6:	460f      	mov	r7, r1
 800a7d8:	f1b8 0f00 	cmp.w	r8, #0
 800a7dc:	d11b      	bne.n	800a816 <__kernel_sin+0xd6>
 800a7de:	4602      	mov	r2, r0
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	4650      	mov	r0, sl
 800a7e4:	4659      	mov	r1, fp
 800a7e6:	f7f5 ff27 	bl	8000638 <__aeabi_dmul>
 800a7ea:	a325      	add	r3, pc, #148	@ (adr r3, 800a880 <__kernel_sin+0x140>)
 800a7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f0:	f7f5 fd6a 	bl	80002c8 <__aeabi_dsub>
 800a7f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a7f8:	f7f5 ff1e 	bl	8000638 <__aeabi_dmul>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	460b      	mov	r3, r1
 800a800:	4620      	mov	r0, r4
 800a802:	4629      	mov	r1, r5
 800a804:	f7f5 fd62 	bl	80002cc <__adddf3>
 800a808:	4604      	mov	r4, r0
 800a80a:	460d      	mov	r5, r1
 800a80c:	ec45 4b10 	vmov	d0, r4, r5
 800a810:	b005      	add	sp, #20
 800a812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a816:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a81a:	4b1b      	ldr	r3, [pc, #108]	@ (800a888 <__kernel_sin+0x148>)
 800a81c:	2200      	movs	r2, #0
 800a81e:	f7f5 ff0b 	bl	8000638 <__aeabi_dmul>
 800a822:	4632      	mov	r2, r6
 800a824:	4680      	mov	r8, r0
 800a826:	4689      	mov	r9, r1
 800a828:	463b      	mov	r3, r7
 800a82a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a82e:	f7f5 ff03 	bl	8000638 <__aeabi_dmul>
 800a832:	4602      	mov	r2, r0
 800a834:	460b      	mov	r3, r1
 800a836:	4640      	mov	r0, r8
 800a838:	4649      	mov	r1, r9
 800a83a:	f7f5 fd45 	bl	80002c8 <__aeabi_dsub>
 800a83e:	4652      	mov	r2, sl
 800a840:	465b      	mov	r3, fp
 800a842:	f7f5 fef9 	bl	8000638 <__aeabi_dmul>
 800a846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a84a:	f7f5 fd3d 	bl	80002c8 <__aeabi_dsub>
 800a84e:	a30c      	add	r3, pc, #48	@ (adr r3, 800a880 <__kernel_sin+0x140>)
 800a850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a854:	4606      	mov	r6, r0
 800a856:	460f      	mov	r7, r1
 800a858:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a85c:	f7f5 feec 	bl	8000638 <__aeabi_dmul>
 800a860:	4602      	mov	r2, r0
 800a862:	460b      	mov	r3, r1
 800a864:	4630      	mov	r0, r6
 800a866:	4639      	mov	r1, r7
 800a868:	f7f5 fd30 	bl	80002cc <__adddf3>
 800a86c:	4602      	mov	r2, r0
 800a86e:	460b      	mov	r3, r1
 800a870:	4620      	mov	r0, r4
 800a872:	4629      	mov	r1, r5
 800a874:	f7f5 fd28 	bl	80002c8 <__aeabi_dsub>
 800a878:	e7c6      	b.n	800a808 <__kernel_sin+0xc8>
 800a87a:	bf00      	nop
 800a87c:	f3af 8000 	nop.w
 800a880:	55555549 	.word	0x55555549
 800a884:	3fc55555 	.word	0x3fc55555
 800a888:	3fe00000 	.word	0x3fe00000
 800a88c:	5acfd57c 	.word	0x5acfd57c
 800a890:	3de5d93a 	.word	0x3de5d93a
 800a894:	8a2b9ceb 	.word	0x8a2b9ceb
 800a898:	3e5ae5e6 	.word	0x3e5ae5e6
 800a89c:	57b1fe7d 	.word	0x57b1fe7d
 800a8a0:	3ec71de3 	.word	0x3ec71de3
 800a8a4:	19c161d5 	.word	0x19c161d5
 800a8a8:	3f2a01a0 	.word	0x3f2a01a0
 800a8ac:	1110f8a6 	.word	0x1110f8a6
 800a8b0:	3f811111 	.word	0x3f811111
 800a8b4:	00000000 	.word	0x00000000

0800a8b8 <__ieee754_pow>:
 800a8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8bc:	b091      	sub	sp, #68	@ 0x44
 800a8be:	ed8d 1b00 	vstr	d1, [sp]
 800a8c2:	e9dd 1900 	ldrd	r1, r9, [sp]
 800a8c6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800a8ca:	ea5a 0001 	orrs.w	r0, sl, r1
 800a8ce:	ec57 6b10 	vmov	r6, r7, d0
 800a8d2:	d113      	bne.n	800a8fc <__ieee754_pow+0x44>
 800a8d4:	19b3      	adds	r3, r6, r6
 800a8d6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800a8da:	4152      	adcs	r2, r2
 800a8dc:	4298      	cmp	r0, r3
 800a8de:	4b98      	ldr	r3, [pc, #608]	@ (800ab40 <__ieee754_pow+0x288>)
 800a8e0:	4193      	sbcs	r3, r2
 800a8e2:	f080 84ea 	bcs.w	800b2ba <__ieee754_pow+0xa02>
 800a8e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8ea:	4630      	mov	r0, r6
 800a8ec:	4639      	mov	r1, r7
 800a8ee:	f7f5 fced 	bl	80002cc <__adddf3>
 800a8f2:	ec41 0b10 	vmov	d0, r0, r1
 800a8f6:	b011      	add	sp, #68	@ 0x44
 800a8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8fc:	4a91      	ldr	r2, [pc, #580]	@ (800ab44 <__ieee754_pow+0x28c>)
 800a8fe:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a902:	4590      	cmp	r8, r2
 800a904:	463d      	mov	r5, r7
 800a906:	4633      	mov	r3, r6
 800a908:	d806      	bhi.n	800a918 <__ieee754_pow+0x60>
 800a90a:	d101      	bne.n	800a910 <__ieee754_pow+0x58>
 800a90c:	2e00      	cmp	r6, #0
 800a90e:	d1ea      	bne.n	800a8e6 <__ieee754_pow+0x2e>
 800a910:	4592      	cmp	sl, r2
 800a912:	d801      	bhi.n	800a918 <__ieee754_pow+0x60>
 800a914:	d10e      	bne.n	800a934 <__ieee754_pow+0x7c>
 800a916:	b169      	cbz	r1, 800a934 <__ieee754_pow+0x7c>
 800a918:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800a91c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800a920:	431d      	orrs	r5, r3
 800a922:	d1e0      	bne.n	800a8e6 <__ieee754_pow+0x2e>
 800a924:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a928:	18db      	adds	r3, r3, r3
 800a92a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800a92e:	4152      	adcs	r2, r2
 800a930:	429d      	cmp	r5, r3
 800a932:	e7d4      	b.n	800a8de <__ieee754_pow+0x26>
 800a934:	2d00      	cmp	r5, #0
 800a936:	46c3      	mov	fp, r8
 800a938:	da3a      	bge.n	800a9b0 <__ieee754_pow+0xf8>
 800a93a:	4a83      	ldr	r2, [pc, #524]	@ (800ab48 <__ieee754_pow+0x290>)
 800a93c:	4592      	cmp	sl, r2
 800a93e:	d84d      	bhi.n	800a9dc <__ieee754_pow+0x124>
 800a940:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800a944:	4592      	cmp	sl, r2
 800a946:	f240 84c7 	bls.w	800b2d8 <__ieee754_pow+0xa20>
 800a94a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800a94e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a952:	2a14      	cmp	r2, #20
 800a954:	dd0f      	ble.n	800a976 <__ieee754_pow+0xbe>
 800a956:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800a95a:	fa21 f402 	lsr.w	r4, r1, r2
 800a95e:	fa04 f202 	lsl.w	r2, r4, r2
 800a962:	428a      	cmp	r2, r1
 800a964:	f040 84b8 	bne.w	800b2d8 <__ieee754_pow+0xa20>
 800a968:	f004 0401 	and.w	r4, r4, #1
 800a96c:	f1c4 0402 	rsb	r4, r4, #2
 800a970:	2900      	cmp	r1, #0
 800a972:	d158      	bne.n	800aa26 <__ieee754_pow+0x16e>
 800a974:	e00e      	b.n	800a994 <__ieee754_pow+0xdc>
 800a976:	2900      	cmp	r1, #0
 800a978:	d154      	bne.n	800aa24 <__ieee754_pow+0x16c>
 800a97a:	f1c2 0214 	rsb	r2, r2, #20
 800a97e:	fa4a f402 	asr.w	r4, sl, r2
 800a982:	fa04 f202 	lsl.w	r2, r4, r2
 800a986:	4552      	cmp	r2, sl
 800a988:	f040 84a3 	bne.w	800b2d2 <__ieee754_pow+0xa1a>
 800a98c:	f004 0401 	and.w	r4, r4, #1
 800a990:	f1c4 0402 	rsb	r4, r4, #2
 800a994:	4a6d      	ldr	r2, [pc, #436]	@ (800ab4c <__ieee754_pow+0x294>)
 800a996:	4592      	cmp	sl, r2
 800a998:	d12e      	bne.n	800a9f8 <__ieee754_pow+0x140>
 800a99a:	f1b9 0f00 	cmp.w	r9, #0
 800a99e:	f280 8494 	bge.w	800b2ca <__ieee754_pow+0xa12>
 800a9a2:	496a      	ldr	r1, [pc, #424]	@ (800ab4c <__ieee754_pow+0x294>)
 800a9a4:	4632      	mov	r2, r6
 800a9a6:	463b      	mov	r3, r7
 800a9a8:	2000      	movs	r0, #0
 800a9aa:	f7f5 ff6f 	bl	800088c <__aeabi_ddiv>
 800a9ae:	e7a0      	b.n	800a8f2 <__ieee754_pow+0x3a>
 800a9b0:	2400      	movs	r4, #0
 800a9b2:	bbc1      	cbnz	r1, 800aa26 <__ieee754_pow+0x16e>
 800a9b4:	4a63      	ldr	r2, [pc, #396]	@ (800ab44 <__ieee754_pow+0x28c>)
 800a9b6:	4592      	cmp	sl, r2
 800a9b8:	d1ec      	bne.n	800a994 <__ieee754_pow+0xdc>
 800a9ba:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800a9be:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800a9c2:	431a      	orrs	r2, r3
 800a9c4:	f000 8479 	beq.w	800b2ba <__ieee754_pow+0xa02>
 800a9c8:	4b61      	ldr	r3, [pc, #388]	@ (800ab50 <__ieee754_pow+0x298>)
 800a9ca:	4598      	cmp	r8, r3
 800a9cc:	d908      	bls.n	800a9e0 <__ieee754_pow+0x128>
 800a9ce:	f1b9 0f00 	cmp.w	r9, #0
 800a9d2:	f2c0 8476 	blt.w	800b2c2 <__ieee754_pow+0xa0a>
 800a9d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9da:	e78a      	b.n	800a8f2 <__ieee754_pow+0x3a>
 800a9dc:	2402      	movs	r4, #2
 800a9de:	e7e8      	b.n	800a9b2 <__ieee754_pow+0xfa>
 800a9e0:	f1b9 0f00 	cmp.w	r9, #0
 800a9e4:	f04f 0000 	mov.w	r0, #0
 800a9e8:	f04f 0100 	mov.w	r1, #0
 800a9ec:	da81      	bge.n	800a8f2 <__ieee754_pow+0x3a>
 800a9ee:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a9f2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a9f6:	e77c      	b.n	800a8f2 <__ieee754_pow+0x3a>
 800a9f8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800a9fc:	d106      	bne.n	800aa0c <__ieee754_pow+0x154>
 800a9fe:	4632      	mov	r2, r6
 800aa00:	463b      	mov	r3, r7
 800aa02:	4630      	mov	r0, r6
 800aa04:	4639      	mov	r1, r7
 800aa06:	f7f5 fe17 	bl	8000638 <__aeabi_dmul>
 800aa0a:	e772      	b.n	800a8f2 <__ieee754_pow+0x3a>
 800aa0c:	4a51      	ldr	r2, [pc, #324]	@ (800ab54 <__ieee754_pow+0x29c>)
 800aa0e:	4591      	cmp	r9, r2
 800aa10:	d109      	bne.n	800aa26 <__ieee754_pow+0x16e>
 800aa12:	2d00      	cmp	r5, #0
 800aa14:	db07      	blt.n	800aa26 <__ieee754_pow+0x16e>
 800aa16:	ec47 6b10 	vmov	d0, r6, r7
 800aa1a:	b011      	add	sp, #68	@ 0x44
 800aa1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa20:	f7ff bcea 	b.w	800a3f8 <__ieee754_sqrt>
 800aa24:	2400      	movs	r4, #0
 800aa26:	ec47 6b10 	vmov	d0, r6, r7
 800aa2a:	9302      	str	r3, [sp, #8]
 800aa2c:	f7ff fc7c 	bl	800a328 <fabs>
 800aa30:	9b02      	ldr	r3, [sp, #8]
 800aa32:	ec51 0b10 	vmov	r0, r1, d0
 800aa36:	bb53      	cbnz	r3, 800aa8e <__ieee754_pow+0x1d6>
 800aa38:	4b44      	ldr	r3, [pc, #272]	@ (800ab4c <__ieee754_pow+0x294>)
 800aa3a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d002      	beq.n	800aa48 <__ieee754_pow+0x190>
 800aa42:	f1b8 0f00 	cmp.w	r8, #0
 800aa46:	d122      	bne.n	800aa8e <__ieee754_pow+0x1d6>
 800aa48:	f1b9 0f00 	cmp.w	r9, #0
 800aa4c:	da05      	bge.n	800aa5a <__ieee754_pow+0x1a2>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	460b      	mov	r3, r1
 800aa52:	2000      	movs	r0, #0
 800aa54:	493d      	ldr	r1, [pc, #244]	@ (800ab4c <__ieee754_pow+0x294>)
 800aa56:	f7f5 ff19 	bl	800088c <__aeabi_ddiv>
 800aa5a:	2d00      	cmp	r5, #0
 800aa5c:	f6bf af49 	bge.w	800a8f2 <__ieee754_pow+0x3a>
 800aa60:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800aa64:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800aa68:	ea58 0804 	orrs.w	r8, r8, r4
 800aa6c:	d108      	bne.n	800aa80 <__ieee754_pow+0x1c8>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	460b      	mov	r3, r1
 800aa72:	4610      	mov	r0, r2
 800aa74:	4619      	mov	r1, r3
 800aa76:	f7f5 fc27 	bl	80002c8 <__aeabi_dsub>
 800aa7a:	4602      	mov	r2, r0
 800aa7c:	460b      	mov	r3, r1
 800aa7e:	e794      	b.n	800a9aa <__ieee754_pow+0xf2>
 800aa80:	2c01      	cmp	r4, #1
 800aa82:	f47f af36 	bne.w	800a8f2 <__ieee754_pow+0x3a>
 800aa86:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aa8a:	4619      	mov	r1, r3
 800aa8c:	e731      	b.n	800a8f2 <__ieee754_pow+0x3a>
 800aa8e:	0feb      	lsrs	r3, r5, #31
 800aa90:	3b01      	subs	r3, #1
 800aa92:	ea53 0204 	orrs.w	r2, r3, r4
 800aa96:	d102      	bne.n	800aa9e <__ieee754_pow+0x1e6>
 800aa98:	4632      	mov	r2, r6
 800aa9a:	463b      	mov	r3, r7
 800aa9c:	e7e9      	b.n	800aa72 <__ieee754_pow+0x1ba>
 800aa9e:	3c01      	subs	r4, #1
 800aaa0:	431c      	orrs	r4, r3
 800aaa2:	d016      	beq.n	800aad2 <__ieee754_pow+0x21a>
 800aaa4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800ab30 <__ieee754_pow+0x278>
 800aaa8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800aaac:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aab0:	f240 8112 	bls.w	800acd8 <__ieee754_pow+0x420>
 800aab4:	4b28      	ldr	r3, [pc, #160]	@ (800ab58 <__ieee754_pow+0x2a0>)
 800aab6:	459a      	cmp	sl, r3
 800aab8:	4b25      	ldr	r3, [pc, #148]	@ (800ab50 <__ieee754_pow+0x298>)
 800aaba:	d916      	bls.n	800aaea <__ieee754_pow+0x232>
 800aabc:	4598      	cmp	r8, r3
 800aabe:	d80b      	bhi.n	800aad8 <__ieee754_pow+0x220>
 800aac0:	f1b9 0f00 	cmp.w	r9, #0
 800aac4:	da0b      	bge.n	800aade <__ieee754_pow+0x226>
 800aac6:	2000      	movs	r0, #0
 800aac8:	b011      	add	sp, #68	@ 0x44
 800aaca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aace:	f000 bee7 	b.w	800b8a0 <__math_oflow>
 800aad2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800ab38 <__ieee754_pow+0x280>
 800aad6:	e7e7      	b.n	800aaa8 <__ieee754_pow+0x1f0>
 800aad8:	f1b9 0f00 	cmp.w	r9, #0
 800aadc:	dcf3      	bgt.n	800aac6 <__ieee754_pow+0x20e>
 800aade:	2000      	movs	r0, #0
 800aae0:	b011      	add	sp, #68	@ 0x44
 800aae2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aae6:	f000 bed3 	b.w	800b890 <__math_uflow>
 800aaea:	4598      	cmp	r8, r3
 800aaec:	d20c      	bcs.n	800ab08 <__ieee754_pow+0x250>
 800aaee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	f7f6 f811 	bl	8000b1c <__aeabi_dcmplt>
 800aafa:	3800      	subs	r0, #0
 800aafc:	bf18      	it	ne
 800aafe:	2001      	movne	r0, #1
 800ab00:	f1b9 0f00 	cmp.w	r9, #0
 800ab04:	daec      	bge.n	800aae0 <__ieee754_pow+0x228>
 800ab06:	e7df      	b.n	800aac8 <__ieee754_pow+0x210>
 800ab08:	4b10      	ldr	r3, [pc, #64]	@ (800ab4c <__ieee754_pow+0x294>)
 800ab0a:	4598      	cmp	r8, r3
 800ab0c:	f04f 0200 	mov.w	r2, #0
 800ab10:	d924      	bls.n	800ab5c <__ieee754_pow+0x2a4>
 800ab12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab16:	2300      	movs	r3, #0
 800ab18:	f7f6 f800 	bl	8000b1c <__aeabi_dcmplt>
 800ab1c:	3800      	subs	r0, #0
 800ab1e:	bf18      	it	ne
 800ab20:	2001      	movne	r0, #1
 800ab22:	f1b9 0f00 	cmp.w	r9, #0
 800ab26:	dccf      	bgt.n	800aac8 <__ieee754_pow+0x210>
 800ab28:	e7da      	b.n	800aae0 <__ieee754_pow+0x228>
 800ab2a:	bf00      	nop
 800ab2c:	f3af 8000 	nop.w
 800ab30:	00000000 	.word	0x00000000
 800ab34:	3ff00000 	.word	0x3ff00000
 800ab38:	00000000 	.word	0x00000000
 800ab3c:	bff00000 	.word	0xbff00000
 800ab40:	fff00000 	.word	0xfff00000
 800ab44:	7ff00000 	.word	0x7ff00000
 800ab48:	433fffff 	.word	0x433fffff
 800ab4c:	3ff00000 	.word	0x3ff00000
 800ab50:	3fefffff 	.word	0x3fefffff
 800ab54:	3fe00000 	.word	0x3fe00000
 800ab58:	43f00000 	.word	0x43f00000
 800ab5c:	4b5a      	ldr	r3, [pc, #360]	@ (800acc8 <__ieee754_pow+0x410>)
 800ab5e:	f7f5 fbb3 	bl	80002c8 <__aeabi_dsub>
 800ab62:	a351      	add	r3, pc, #324	@ (adr r3, 800aca8 <__ieee754_pow+0x3f0>)
 800ab64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab68:	4604      	mov	r4, r0
 800ab6a:	460d      	mov	r5, r1
 800ab6c:	f7f5 fd64 	bl	8000638 <__aeabi_dmul>
 800ab70:	a34f      	add	r3, pc, #316	@ (adr r3, 800acb0 <__ieee754_pow+0x3f8>)
 800ab72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab76:	4606      	mov	r6, r0
 800ab78:	460f      	mov	r7, r1
 800ab7a:	4620      	mov	r0, r4
 800ab7c:	4629      	mov	r1, r5
 800ab7e:	f7f5 fd5b 	bl	8000638 <__aeabi_dmul>
 800ab82:	4b52      	ldr	r3, [pc, #328]	@ (800accc <__ieee754_pow+0x414>)
 800ab84:	4682      	mov	sl, r0
 800ab86:	468b      	mov	fp, r1
 800ab88:	2200      	movs	r2, #0
 800ab8a:	4620      	mov	r0, r4
 800ab8c:	4629      	mov	r1, r5
 800ab8e:	f7f5 fd53 	bl	8000638 <__aeabi_dmul>
 800ab92:	4602      	mov	r2, r0
 800ab94:	460b      	mov	r3, r1
 800ab96:	a148      	add	r1, pc, #288	@ (adr r1, 800acb8 <__ieee754_pow+0x400>)
 800ab98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab9c:	f7f5 fb94 	bl	80002c8 <__aeabi_dsub>
 800aba0:	4622      	mov	r2, r4
 800aba2:	462b      	mov	r3, r5
 800aba4:	f7f5 fd48 	bl	8000638 <__aeabi_dmul>
 800aba8:	4602      	mov	r2, r0
 800abaa:	460b      	mov	r3, r1
 800abac:	2000      	movs	r0, #0
 800abae:	4948      	ldr	r1, [pc, #288]	@ (800acd0 <__ieee754_pow+0x418>)
 800abb0:	f7f5 fb8a 	bl	80002c8 <__aeabi_dsub>
 800abb4:	4622      	mov	r2, r4
 800abb6:	4680      	mov	r8, r0
 800abb8:	4689      	mov	r9, r1
 800abba:	462b      	mov	r3, r5
 800abbc:	4620      	mov	r0, r4
 800abbe:	4629      	mov	r1, r5
 800abc0:	f7f5 fd3a 	bl	8000638 <__aeabi_dmul>
 800abc4:	4602      	mov	r2, r0
 800abc6:	460b      	mov	r3, r1
 800abc8:	4640      	mov	r0, r8
 800abca:	4649      	mov	r1, r9
 800abcc:	f7f5 fd34 	bl	8000638 <__aeabi_dmul>
 800abd0:	a33b      	add	r3, pc, #236	@ (adr r3, 800acc0 <__ieee754_pow+0x408>)
 800abd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd6:	f7f5 fd2f 	bl	8000638 <__aeabi_dmul>
 800abda:	4602      	mov	r2, r0
 800abdc:	460b      	mov	r3, r1
 800abde:	4650      	mov	r0, sl
 800abe0:	4659      	mov	r1, fp
 800abe2:	f7f5 fb71 	bl	80002c8 <__aeabi_dsub>
 800abe6:	4602      	mov	r2, r0
 800abe8:	460b      	mov	r3, r1
 800abea:	4680      	mov	r8, r0
 800abec:	4689      	mov	r9, r1
 800abee:	4630      	mov	r0, r6
 800abf0:	4639      	mov	r1, r7
 800abf2:	f7f5 fb6b 	bl	80002cc <__adddf3>
 800abf6:	2400      	movs	r4, #0
 800abf8:	4632      	mov	r2, r6
 800abfa:	463b      	mov	r3, r7
 800abfc:	4620      	mov	r0, r4
 800abfe:	460d      	mov	r5, r1
 800ac00:	f7f5 fb62 	bl	80002c8 <__aeabi_dsub>
 800ac04:	4602      	mov	r2, r0
 800ac06:	460b      	mov	r3, r1
 800ac08:	4640      	mov	r0, r8
 800ac0a:	4649      	mov	r1, r9
 800ac0c:	f7f5 fb5c 	bl	80002c8 <__aeabi_dsub>
 800ac10:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac14:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ac18:	2300      	movs	r3, #0
 800ac1a:	9304      	str	r3, [sp, #16]
 800ac1c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800ac20:	4606      	mov	r6, r0
 800ac22:	460f      	mov	r7, r1
 800ac24:	4652      	mov	r2, sl
 800ac26:	465b      	mov	r3, fp
 800ac28:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac2c:	f7f5 fb4c 	bl	80002c8 <__aeabi_dsub>
 800ac30:	4622      	mov	r2, r4
 800ac32:	462b      	mov	r3, r5
 800ac34:	f7f5 fd00 	bl	8000638 <__aeabi_dmul>
 800ac38:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac3c:	4680      	mov	r8, r0
 800ac3e:	4689      	mov	r9, r1
 800ac40:	4630      	mov	r0, r6
 800ac42:	4639      	mov	r1, r7
 800ac44:	f7f5 fcf8 	bl	8000638 <__aeabi_dmul>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	460b      	mov	r3, r1
 800ac4c:	4640      	mov	r0, r8
 800ac4e:	4649      	mov	r1, r9
 800ac50:	f7f5 fb3c 	bl	80002cc <__adddf3>
 800ac54:	4652      	mov	r2, sl
 800ac56:	465b      	mov	r3, fp
 800ac58:	4606      	mov	r6, r0
 800ac5a:	460f      	mov	r7, r1
 800ac5c:	4620      	mov	r0, r4
 800ac5e:	4629      	mov	r1, r5
 800ac60:	f7f5 fcea 	bl	8000638 <__aeabi_dmul>
 800ac64:	460b      	mov	r3, r1
 800ac66:	4602      	mov	r2, r0
 800ac68:	4680      	mov	r8, r0
 800ac6a:	4689      	mov	r9, r1
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	4639      	mov	r1, r7
 800ac70:	f7f5 fb2c 	bl	80002cc <__adddf3>
 800ac74:	4b17      	ldr	r3, [pc, #92]	@ (800acd4 <__ieee754_pow+0x41c>)
 800ac76:	4299      	cmp	r1, r3
 800ac78:	4604      	mov	r4, r0
 800ac7a:	460d      	mov	r5, r1
 800ac7c:	468a      	mov	sl, r1
 800ac7e:	468b      	mov	fp, r1
 800ac80:	f340 82ef 	ble.w	800b262 <__ieee754_pow+0x9aa>
 800ac84:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800ac88:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800ac8c:	4303      	orrs	r3, r0
 800ac8e:	f000 81e8 	beq.w	800b062 <__ieee754_pow+0x7aa>
 800ac92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac96:	2200      	movs	r2, #0
 800ac98:	2300      	movs	r3, #0
 800ac9a:	f7f5 ff3f 	bl	8000b1c <__aeabi_dcmplt>
 800ac9e:	3800      	subs	r0, #0
 800aca0:	bf18      	it	ne
 800aca2:	2001      	movne	r0, #1
 800aca4:	e710      	b.n	800aac8 <__ieee754_pow+0x210>
 800aca6:	bf00      	nop
 800aca8:	60000000 	.word	0x60000000
 800acac:	3ff71547 	.word	0x3ff71547
 800acb0:	f85ddf44 	.word	0xf85ddf44
 800acb4:	3e54ae0b 	.word	0x3e54ae0b
 800acb8:	55555555 	.word	0x55555555
 800acbc:	3fd55555 	.word	0x3fd55555
 800acc0:	652b82fe 	.word	0x652b82fe
 800acc4:	3ff71547 	.word	0x3ff71547
 800acc8:	3ff00000 	.word	0x3ff00000
 800accc:	3fd00000 	.word	0x3fd00000
 800acd0:	3fe00000 	.word	0x3fe00000
 800acd4:	408fffff 	.word	0x408fffff
 800acd8:	4bd5      	ldr	r3, [pc, #852]	@ (800b030 <__ieee754_pow+0x778>)
 800acda:	402b      	ands	r3, r5
 800acdc:	2200      	movs	r2, #0
 800acde:	b92b      	cbnz	r3, 800acec <__ieee754_pow+0x434>
 800ace0:	4bd4      	ldr	r3, [pc, #848]	@ (800b034 <__ieee754_pow+0x77c>)
 800ace2:	f7f5 fca9 	bl	8000638 <__aeabi_dmul>
 800ace6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800acea:	468b      	mov	fp, r1
 800acec:	ea4f 532b 	mov.w	r3, fp, asr #20
 800acf0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800acf4:	4413      	add	r3, r2
 800acf6:	930a      	str	r3, [sp, #40]	@ 0x28
 800acf8:	4bcf      	ldr	r3, [pc, #828]	@ (800b038 <__ieee754_pow+0x780>)
 800acfa:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800acfe:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800ad02:	459b      	cmp	fp, r3
 800ad04:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ad08:	dd08      	ble.n	800ad1c <__ieee754_pow+0x464>
 800ad0a:	4bcc      	ldr	r3, [pc, #816]	@ (800b03c <__ieee754_pow+0x784>)
 800ad0c:	459b      	cmp	fp, r3
 800ad0e:	f340 81a5 	ble.w	800b05c <__ieee754_pow+0x7a4>
 800ad12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad14:	3301      	adds	r3, #1
 800ad16:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad18:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800ad1c:	f04f 0a00 	mov.w	sl, #0
 800ad20:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800ad24:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad26:	4bc6      	ldr	r3, [pc, #792]	@ (800b040 <__ieee754_pow+0x788>)
 800ad28:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ad2c:	ed93 7b00 	vldr	d7, [r3]
 800ad30:	4629      	mov	r1, r5
 800ad32:	ec53 2b17 	vmov	r2, r3, d7
 800ad36:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ad3a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ad3e:	f7f5 fac3 	bl	80002c8 <__aeabi_dsub>
 800ad42:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ad46:	4606      	mov	r6, r0
 800ad48:	460f      	mov	r7, r1
 800ad4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad4e:	f7f5 fabd 	bl	80002cc <__adddf3>
 800ad52:	4602      	mov	r2, r0
 800ad54:	460b      	mov	r3, r1
 800ad56:	2000      	movs	r0, #0
 800ad58:	49ba      	ldr	r1, [pc, #744]	@ (800b044 <__ieee754_pow+0x78c>)
 800ad5a:	f7f5 fd97 	bl	800088c <__aeabi_ddiv>
 800ad5e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800ad62:	4602      	mov	r2, r0
 800ad64:	460b      	mov	r3, r1
 800ad66:	4630      	mov	r0, r6
 800ad68:	4639      	mov	r1, r7
 800ad6a:	f7f5 fc65 	bl	8000638 <__aeabi_dmul>
 800ad6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad72:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800ad76:	106d      	asrs	r5, r5, #1
 800ad78:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800ad7c:	f04f 0b00 	mov.w	fp, #0
 800ad80:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800ad84:	4661      	mov	r1, ip
 800ad86:	2200      	movs	r2, #0
 800ad88:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800ad8c:	4658      	mov	r0, fp
 800ad8e:	46e1      	mov	r9, ip
 800ad90:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800ad94:	4614      	mov	r4, r2
 800ad96:	461d      	mov	r5, r3
 800ad98:	f7f5 fc4e 	bl	8000638 <__aeabi_dmul>
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	460b      	mov	r3, r1
 800ada0:	4630      	mov	r0, r6
 800ada2:	4639      	mov	r1, r7
 800ada4:	f7f5 fa90 	bl	80002c8 <__aeabi_dsub>
 800ada8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800adac:	4606      	mov	r6, r0
 800adae:	460f      	mov	r7, r1
 800adb0:	4620      	mov	r0, r4
 800adb2:	4629      	mov	r1, r5
 800adb4:	f7f5 fa88 	bl	80002c8 <__aeabi_dsub>
 800adb8:	4602      	mov	r2, r0
 800adba:	460b      	mov	r3, r1
 800adbc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800adc0:	f7f5 fa82 	bl	80002c8 <__aeabi_dsub>
 800adc4:	465a      	mov	r2, fp
 800adc6:	464b      	mov	r3, r9
 800adc8:	f7f5 fc36 	bl	8000638 <__aeabi_dmul>
 800adcc:	4602      	mov	r2, r0
 800adce:	460b      	mov	r3, r1
 800add0:	4630      	mov	r0, r6
 800add2:	4639      	mov	r1, r7
 800add4:	f7f5 fa78 	bl	80002c8 <__aeabi_dsub>
 800add8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800addc:	f7f5 fc2c 	bl	8000638 <__aeabi_dmul>
 800ade0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ade4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ade8:	4610      	mov	r0, r2
 800adea:	4619      	mov	r1, r3
 800adec:	f7f5 fc24 	bl	8000638 <__aeabi_dmul>
 800adf0:	a37d      	add	r3, pc, #500	@ (adr r3, 800afe8 <__ieee754_pow+0x730>)
 800adf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf6:	4604      	mov	r4, r0
 800adf8:	460d      	mov	r5, r1
 800adfa:	f7f5 fc1d 	bl	8000638 <__aeabi_dmul>
 800adfe:	a37c      	add	r3, pc, #496	@ (adr r3, 800aff0 <__ieee754_pow+0x738>)
 800ae00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae04:	f7f5 fa62 	bl	80002cc <__adddf3>
 800ae08:	4622      	mov	r2, r4
 800ae0a:	462b      	mov	r3, r5
 800ae0c:	f7f5 fc14 	bl	8000638 <__aeabi_dmul>
 800ae10:	a379      	add	r3, pc, #484	@ (adr r3, 800aff8 <__ieee754_pow+0x740>)
 800ae12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae16:	f7f5 fa59 	bl	80002cc <__adddf3>
 800ae1a:	4622      	mov	r2, r4
 800ae1c:	462b      	mov	r3, r5
 800ae1e:	f7f5 fc0b 	bl	8000638 <__aeabi_dmul>
 800ae22:	a377      	add	r3, pc, #476	@ (adr r3, 800b000 <__ieee754_pow+0x748>)
 800ae24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae28:	f7f5 fa50 	bl	80002cc <__adddf3>
 800ae2c:	4622      	mov	r2, r4
 800ae2e:	462b      	mov	r3, r5
 800ae30:	f7f5 fc02 	bl	8000638 <__aeabi_dmul>
 800ae34:	a374      	add	r3, pc, #464	@ (adr r3, 800b008 <__ieee754_pow+0x750>)
 800ae36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3a:	f7f5 fa47 	bl	80002cc <__adddf3>
 800ae3e:	4622      	mov	r2, r4
 800ae40:	462b      	mov	r3, r5
 800ae42:	f7f5 fbf9 	bl	8000638 <__aeabi_dmul>
 800ae46:	a372      	add	r3, pc, #456	@ (adr r3, 800b010 <__ieee754_pow+0x758>)
 800ae48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae4c:	f7f5 fa3e 	bl	80002cc <__adddf3>
 800ae50:	4622      	mov	r2, r4
 800ae52:	4606      	mov	r6, r0
 800ae54:	460f      	mov	r7, r1
 800ae56:	462b      	mov	r3, r5
 800ae58:	4620      	mov	r0, r4
 800ae5a:	4629      	mov	r1, r5
 800ae5c:	f7f5 fbec 	bl	8000638 <__aeabi_dmul>
 800ae60:	4602      	mov	r2, r0
 800ae62:	460b      	mov	r3, r1
 800ae64:	4630      	mov	r0, r6
 800ae66:	4639      	mov	r1, r7
 800ae68:	f7f5 fbe6 	bl	8000638 <__aeabi_dmul>
 800ae6c:	465a      	mov	r2, fp
 800ae6e:	4604      	mov	r4, r0
 800ae70:	460d      	mov	r5, r1
 800ae72:	464b      	mov	r3, r9
 800ae74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae78:	f7f5 fa28 	bl	80002cc <__adddf3>
 800ae7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ae80:	f7f5 fbda 	bl	8000638 <__aeabi_dmul>
 800ae84:	4622      	mov	r2, r4
 800ae86:	462b      	mov	r3, r5
 800ae88:	f7f5 fa20 	bl	80002cc <__adddf3>
 800ae8c:	465a      	mov	r2, fp
 800ae8e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ae92:	464b      	mov	r3, r9
 800ae94:	4658      	mov	r0, fp
 800ae96:	4649      	mov	r1, r9
 800ae98:	f7f5 fbce 	bl	8000638 <__aeabi_dmul>
 800ae9c:	4b6a      	ldr	r3, [pc, #424]	@ (800b048 <__ieee754_pow+0x790>)
 800ae9e:	2200      	movs	r2, #0
 800aea0:	4606      	mov	r6, r0
 800aea2:	460f      	mov	r7, r1
 800aea4:	f7f5 fa12 	bl	80002cc <__adddf3>
 800aea8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800aeac:	f7f5 fa0e 	bl	80002cc <__adddf3>
 800aeb0:	46d8      	mov	r8, fp
 800aeb2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800aeb6:	460d      	mov	r5, r1
 800aeb8:	465a      	mov	r2, fp
 800aeba:	460b      	mov	r3, r1
 800aebc:	4640      	mov	r0, r8
 800aebe:	4649      	mov	r1, r9
 800aec0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800aec4:	f7f5 fbb8 	bl	8000638 <__aeabi_dmul>
 800aec8:	465c      	mov	r4, fp
 800aeca:	4680      	mov	r8, r0
 800aecc:	4689      	mov	r9, r1
 800aece:	4b5e      	ldr	r3, [pc, #376]	@ (800b048 <__ieee754_pow+0x790>)
 800aed0:	2200      	movs	r2, #0
 800aed2:	4620      	mov	r0, r4
 800aed4:	4629      	mov	r1, r5
 800aed6:	f7f5 f9f7 	bl	80002c8 <__aeabi_dsub>
 800aeda:	4632      	mov	r2, r6
 800aedc:	463b      	mov	r3, r7
 800aede:	f7f5 f9f3 	bl	80002c8 <__aeabi_dsub>
 800aee2:	4602      	mov	r2, r0
 800aee4:	460b      	mov	r3, r1
 800aee6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aeea:	f7f5 f9ed 	bl	80002c8 <__aeabi_dsub>
 800aeee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aef2:	f7f5 fba1 	bl	8000638 <__aeabi_dmul>
 800aef6:	4622      	mov	r2, r4
 800aef8:	4606      	mov	r6, r0
 800aefa:	460f      	mov	r7, r1
 800aefc:	462b      	mov	r3, r5
 800aefe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af02:	f7f5 fb99 	bl	8000638 <__aeabi_dmul>
 800af06:	4602      	mov	r2, r0
 800af08:	460b      	mov	r3, r1
 800af0a:	4630      	mov	r0, r6
 800af0c:	4639      	mov	r1, r7
 800af0e:	f7f5 f9dd 	bl	80002cc <__adddf3>
 800af12:	4606      	mov	r6, r0
 800af14:	460f      	mov	r7, r1
 800af16:	4602      	mov	r2, r0
 800af18:	460b      	mov	r3, r1
 800af1a:	4640      	mov	r0, r8
 800af1c:	4649      	mov	r1, r9
 800af1e:	f7f5 f9d5 	bl	80002cc <__adddf3>
 800af22:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800af26:	a33c      	add	r3, pc, #240	@ (adr r3, 800b018 <__ieee754_pow+0x760>)
 800af28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af2c:	4658      	mov	r0, fp
 800af2e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800af32:	460d      	mov	r5, r1
 800af34:	f7f5 fb80 	bl	8000638 <__aeabi_dmul>
 800af38:	465c      	mov	r4, fp
 800af3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af3e:	4642      	mov	r2, r8
 800af40:	464b      	mov	r3, r9
 800af42:	4620      	mov	r0, r4
 800af44:	4629      	mov	r1, r5
 800af46:	f7f5 f9bf 	bl	80002c8 <__aeabi_dsub>
 800af4a:	4602      	mov	r2, r0
 800af4c:	460b      	mov	r3, r1
 800af4e:	4630      	mov	r0, r6
 800af50:	4639      	mov	r1, r7
 800af52:	f7f5 f9b9 	bl	80002c8 <__aeabi_dsub>
 800af56:	a332      	add	r3, pc, #200	@ (adr r3, 800b020 <__ieee754_pow+0x768>)
 800af58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af5c:	f7f5 fb6c 	bl	8000638 <__aeabi_dmul>
 800af60:	a331      	add	r3, pc, #196	@ (adr r3, 800b028 <__ieee754_pow+0x770>)
 800af62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af66:	4606      	mov	r6, r0
 800af68:	460f      	mov	r7, r1
 800af6a:	4620      	mov	r0, r4
 800af6c:	4629      	mov	r1, r5
 800af6e:	f7f5 fb63 	bl	8000638 <__aeabi_dmul>
 800af72:	4602      	mov	r2, r0
 800af74:	460b      	mov	r3, r1
 800af76:	4630      	mov	r0, r6
 800af78:	4639      	mov	r1, r7
 800af7a:	f7f5 f9a7 	bl	80002cc <__adddf3>
 800af7e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800af80:	4b32      	ldr	r3, [pc, #200]	@ (800b04c <__ieee754_pow+0x794>)
 800af82:	4413      	add	r3, r2
 800af84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af88:	f7f5 f9a0 	bl	80002cc <__adddf3>
 800af8c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800af90:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800af92:	f7f5 fae7 	bl	8000564 <__aeabi_i2d>
 800af96:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800af98:	4b2d      	ldr	r3, [pc, #180]	@ (800b050 <__ieee754_pow+0x798>)
 800af9a:	4413      	add	r3, r2
 800af9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800afa0:	4606      	mov	r6, r0
 800afa2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800afa6:	460f      	mov	r7, r1
 800afa8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800afac:	f7f5 f98e 	bl	80002cc <__adddf3>
 800afb0:	4642      	mov	r2, r8
 800afb2:	464b      	mov	r3, r9
 800afb4:	f7f5 f98a 	bl	80002cc <__adddf3>
 800afb8:	4632      	mov	r2, r6
 800afba:	463b      	mov	r3, r7
 800afbc:	f7f5 f986 	bl	80002cc <__adddf3>
 800afc0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800afc4:	4632      	mov	r2, r6
 800afc6:	463b      	mov	r3, r7
 800afc8:	4658      	mov	r0, fp
 800afca:	460d      	mov	r5, r1
 800afcc:	f7f5 f97c 	bl	80002c8 <__aeabi_dsub>
 800afd0:	4642      	mov	r2, r8
 800afd2:	464b      	mov	r3, r9
 800afd4:	f7f5 f978 	bl	80002c8 <__aeabi_dsub>
 800afd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afdc:	f7f5 f974 	bl	80002c8 <__aeabi_dsub>
 800afe0:	465c      	mov	r4, fp
 800afe2:	4602      	mov	r2, r0
 800afe4:	e036      	b.n	800b054 <__ieee754_pow+0x79c>
 800afe6:	bf00      	nop
 800afe8:	4a454eef 	.word	0x4a454eef
 800afec:	3fca7e28 	.word	0x3fca7e28
 800aff0:	93c9db65 	.word	0x93c9db65
 800aff4:	3fcd864a 	.word	0x3fcd864a
 800aff8:	a91d4101 	.word	0xa91d4101
 800affc:	3fd17460 	.word	0x3fd17460
 800b000:	518f264d 	.word	0x518f264d
 800b004:	3fd55555 	.word	0x3fd55555
 800b008:	db6fabff 	.word	0xdb6fabff
 800b00c:	3fdb6db6 	.word	0x3fdb6db6
 800b010:	33333303 	.word	0x33333303
 800b014:	3fe33333 	.word	0x3fe33333
 800b018:	e0000000 	.word	0xe0000000
 800b01c:	3feec709 	.word	0x3feec709
 800b020:	dc3a03fd 	.word	0xdc3a03fd
 800b024:	3feec709 	.word	0x3feec709
 800b028:	145b01f5 	.word	0x145b01f5
 800b02c:	be3e2fe0 	.word	0xbe3e2fe0
 800b030:	7ff00000 	.word	0x7ff00000
 800b034:	43400000 	.word	0x43400000
 800b038:	0003988e 	.word	0x0003988e
 800b03c:	000bb679 	.word	0x000bb679
 800b040:	0800c690 	.word	0x0800c690
 800b044:	3ff00000 	.word	0x3ff00000
 800b048:	40080000 	.word	0x40080000
 800b04c:	0800c670 	.word	0x0800c670
 800b050:	0800c680 	.word	0x0800c680
 800b054:	460b      	mov	r3, r1
 800b056:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b05a:	e5d7      	b.n	800ac0c <__ieee754_pow+0x354>
 800b05c:	f04f 0a01 	mov.w	sl, #1
 800b060:	e65e      	b.n	800ad20 <__ieee754_pow+0x468>
 800b062:	a3b4      	add	r3, pc, #720	@ (adr r3, 800b334 <__ieee754_pow+0xa7c>)
 800b064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b068:	4630      	mov	r0, r6
 800b06a:	4639      	mov	r1, r7
 800b06c:	f7f5 f92e 	bl	80002cc <__adddf3>
 800b070:	4642      	mov	r2, r8
 800b072:	e9cd 0100 	strd	r0, r1, [sp]
 800b076:	464b      	mov	r3, r9
 800b078:	4620      	mov	r0, r4
 800b07a:	4629      	mov	r1, r5
 800b07c:	f7f5 f924 	bl	80002c8 <__aeabi_dsub>
 800b080:	4602      	mov	r2, r0
 800b082:	460b      	mov	r3, r1
 800b084:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b088:	f7f5 fd66 	bl	8000b58 <__aeabi_dcmpgt>
 800b08c:	2800      	cmp	r0, #0
 800b08e:	f47f ae00 	bne.w	800ac92 <__ieee754_pow+0x3da>
 800b092:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800b096:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b09a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800b09e:	fa43 fa0a 	asr.w	sl, r3, sl
 800b0a2:	44da      	add	sl, fp
 800b0a4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b0a8:	489d      	ldr	r0, [pc, #628]	@ (800b320 <__ieee754_pow+0xa68>)
 800b0aa:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800b0ae:	4108      	asrs	r0, r1
 800b0b0:	ea00 030a 	and.w	r3, r0, sl
 800b0b4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b0b8:	f1c1 0114 	rsb	r1, r1, #20
 800b0bc:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800b0c0:	fa4a fa01 	asr.w	sl, sl, r1
 800b0c4:	f1bb 0f00 	cmp.w	fp, #0
 800b0c8:	4640      	mov	r0, r8
 800b0ca:	4649      	mov	r1, r9
 800b0cc:	f04f 0200 	mov.w	r2, #0
 800b0d0:	bfb8      	it	lt
 800b0d2:	f1ca 0a00 	rsblt	sl, sl, #0
 800b0d6:	f7f5 f8f7 	bl	80002c8 <__aeabi_dsub>
 800b0da:	4680      	mov	r8, r0
 800b0dc:	4689      	mov	r9, r1
 800b0de:	4632      	mov	r2, r6
 800b0e0:	463b      	mov	r3, r7
 800b0e2:	4640      	mov	r0, r8
 800b0e4:	4649      	mov	r1, r9
 800b0e6:	f7f5 f8f1 	bl	80002cc <__adddf3>
 800b0ea:	2400      	movs	r4, #0
 800b0ec:	a37c      	add	r3, pc, #496	@ (adr r3, 800b2e0 <__ieee754_pow+0xa28>)
 800b0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	460d      	mov	r5, r1
 800b0f6:	f7f5 fa9f 	bl	8000638 <__aeabi_dmul>
 800b0fa:	4642      	mov	r2, r8
 800b0fc:	e9cd 0100 	strd	r0, r1, [sp]
 800b100:	464b      	mov	r3, r9
 800b102:	4620      	mov	r0, r4
 800b104:	4629      	mov	r1, r5
 800b106:	f7f5 f8df 	bl	80002c8 <__aeabi_dsub>
 800b10a:	4602      	mov	r2, r0
 800b10c:	460b      	mov	r3, r1
 800b10e:	4630      	mov	r0, r6
 800b110:	4639      	mov	r1, r7
 800b112:	f7f5 f8d9 	bl	80002c8 <__aeabi_dsub>
 800b116:	a374      	add	r3, pc, #464	@ (adr r3, 800b2e8 <__ieee754_pow+0xa30>)
 800b118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b11c:	f7f5 fa8c 	bl	8000638 <__aeabi_dmul>
 800b120:	a373      	add	r3, pc, #460	@ (adr r3, 800b2f0 <__ieee754_pow+0xa38>)
 800b122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b126:	4680      	mov	r8, r0
 800b128:	4689      	mov	r9, r1
 800b12a:	4620      	mov	r0, r4
 800b12c:	4629      	mov	r1, r5
 800b12e:	f7f5 fa83 	bl	8000638 <__aeabi_dmul>
 800b132:	4602      	mov	r2, r0
 800b134:	460b      	mov	r3, r1
 800b136:	4640      	mov	r0, r8
 800b138:	4649      	mov	r1, r9
 800b13a:	f7f5 f8c7 	bl	80002cc <__adddf3>
 800b13e:	4604      	mov	r4, r0
 800b140:	460d      	mov	r5, r1
 800b142:	4602      	mov	r2, r0
 800b144:	460b      	mov	r3, r1
 800b146:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b14a:	f7f5 f8bf 	bl	80002cc <__adddf3>
 800b14e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b152:	4680      	mov	r8, r0
 800b154:	4689      	mov	r9, r1
 800b156:	f7f5 f8b7 	bl	80002c8 <__aeabi_dsub>
 800b15a:	4602      	mov	r2, r0
 800b15c:	460b      	mov	r3, r1
 800b15e:	4620      	mov	r0, r4
 800b160:	4629      	mov	r1, r5
 800b162:	f7f5 f8b1 	bl	80002c8 <__aeabi_dsub>
 800b166:	4642      	mov	r2, r8
 800b168:	4606      	mov	r6, r0
 800b16a:	460f      	mov	r7, r1
 800b16c:	464b      	mov	r3, r9
 800b16e:	4640      	mov	r0, r8
 800b170:	4649      	mov	r1, r9
 800b172:	f7f5 fa61 	bl	8000638 <__aeabi_dmul>
 800b176:	a360      	add	r3, pc, #384	@ (adr r3, 800b2f8 <__ieee754_pow+0xa40>)
 800b178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b17c:	4604      	mov	r4, r0
 800b17e:	460d      	mov	r5, r1
 800b180:	f7f5 fa5a 	bl	8000638 <__aeabi_dmul>
 800b184:	a35e      	add	r3, pc, #376	@ (adr r3, 800b300 <__ieee754_pow+0xa48>)
 800b186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b18a:	f7f5 f89d 	bl	80002c8 <__aeabi_dsub>
 800b18e:	4622      	mov	r2, r4
 800b190:	462b      	mov	r3, r5
 800b192:	f7f5 fa51 	bl	8000638 <__aeabi_dmul>
 800b196:	a35c      	add	r3, pc, #368	@ (adr r3, 800b308 <__ieee754_pow+0xa50>)
 800b198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b19c:	f7f5 f896 	bl	80002cc <__adddf3>
 800b1a0:	4622      	mov	r2, r4
 800b1a2:	462b      	mov	r3, r5
 800b1a4:	f7f5 fa48 	bl	8000638 <__aeabi_dmul>
 800b1a8:	a359      	add	r3, pc, #356	@ (adr r3, 800b310 <__ieee754_pow+0xa58>)
 800b1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ae:	f7f5 f88b 	bl	80002c8 <__aeabi_dsub>
 800b1b2:	4622      	mov	r2, r4
 800b1b4:	462b      	mov	r3, r5
 800b1b6:	f7f5 fa3f 	bl	8000638 <__aeabi_dmul>
 800b1ba:	a357      	add	r3, pc, #348	@ (adr r3, 800b318 <__ieee754_pow+0xa60>)
 800b1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c0:	f7f5 f884 	bl	80002cc <__adddf3>
 800b1c4:	4622      	mov	r2, r4
 800b1c6:	462b      	mov	r3, r5
 800b1c8:	f7f5 fa36 	bl	8000638 <__aeabi_dmul>
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	460b      	mov	r3, r1
 800b1d0:	4640      	mov	r0, r8
 800b1d2:	4649      	mov	r1, r9
 800b1d4:	f7f5 f878 	bl	80002c8 <__aeabi_dsub>
 800b1d8:	4604      	mov	r4, r0
 800b1da:	460d      	mov	r5, r1
 800b1dc:	4602      	mov	r2, r0
 800b1de:	460b      	mov	r3, r1
 800b1e0:	4640      	mov	r0, r8
 800b1e2:	4649      	mov	r1, r9
 800b1e4:	f7f5 fa28 	bl	8000638 <__aeabi_dmul>
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	e9cd 0100 	strd	r0, r1, [sp]
 800b1ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b1f2:	4620      	mov	r0, r4
 800b1f4:	4629      	mov	r1, r5
 800b1f6:	f7f5 f867 	bl	80002c8 <__aeabi_dsub>
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b202:	f7f5 fb43 	bl	800088c <__aeabi_ddiv>
 800b206:	4632      	mov	r2, r6
 800b208:	4604      	mov	r4, r0
 800b20a:	460d      	mov	r5, r1
 800b20c:	463b      	mov	r3, r7
 800b20e:	4640      	mov	r0, r8
 800b210:	4649      	mov	r1, r9
 800b212:	f7f5 fa11 	bl	8000638 <__aeabi_dmul>
 800b216:	4632      	mov	r2, r6
 800b218:	463b      	mov	r3, r7
 800b21a:	f7f5 f857 	bl	80002cc <__adddf3>
 800b21e:	4602      	mov	r2, r0
 800b220:	460b      	mov	r3, r1
 800b222:	4620      	mov	r0, r4
 800b224:	4629      	mov	r1, r5
 800b226:	f7f5 f84f 	bl	80002c8 <__aeabi_dsub>
 800b22a:	4642      	mov	r2, r8
 800b22c:	464b      	mov	r3, r9
 800b22e:	f7f5 f84b 	bl	80002c8 <__aeabi_dsub>
 800b232:	460b      	mov	r3, r1
 800b234:	4602      	mov	r2, r0
 800b236:	493b      	ldr	r1, [pc, #236]	@ (800b324 <__ieee754_pow+0xa6c>)
 800b238:	2000      	movs	r0, #0
 800b23a:	f7f5 f845 	bl	80002c8 <__aeabi_dsub>
 800b23e:	ec41 0b10 	vmov	d0, r0, r1
 800b242:	ee10 3a90 	vmov	r3, s1
 800b246:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b24a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b24e:	da30      	bge.n	800b2b2 <__ieee754_pow+0x9fa>
 800b250:	4650      	mov	r0, sl
 800b252:	f000 fa71 	bl	800b738 <scalbn>
 800b256:	ec51 0b10 	vmov	r0, r1, d0
 800b25a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b25e:	f7ff bbd2 	b.w	800aa06 <__ieee754_pow+0x14e>
 800b262:	4c31      	ldr	r4, [pc, #196]	@ (800b328 <__ieee754_pow+0xa70>)
 800b264:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b268:	42a3      	cmp	r3, r4
 800b26a:	d91a      	bls.n	800b2a2 <__ieee754_pow+0x9ea>
 800b26c:	4b2f      	ldr	r3, [pc, #188]	@ (800b32c <__ieee754_pow+0xa74>)
 800b26e:	440b      	add	r3, r1
 800b270:	4303      	orrs	r3, r0
 800b272:	d009      	beq.n	800b288 <__ieee754_pow+0x9d0>
 800b274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b278:	2200      	movs	r2, #0
 800b27a:	2300      	movs	r3, #0
 800b27c:	f7f5 fc4e 	bl	8000b1c <__aeabi_dcmplt>
 800b280:	3800      	subs	r0, #0
 800b282:	bf18      	it	ne
 800b284:	2001      	movne	r0, #1
 800b286:	e42b      	b.n	800aae0 <__ieee754_pow+0x228>
 800b288:	4642      	mov	r2, r8
 800b28a:	464b      	mov	r3, r9
 800b28c:	f7f5 f81c 	bl	80002c8 <__aeabi_dsub>
 800b290:	4632      	mov	r2, r6
 800b292:	463b      	mov	r3, r7
 800b294:	f7f5 fc56 	bl	8000b44 <__aeabi_dcmpge>
 800b298:	2800      	cmp	r0, #0
 800b29a:	d1eb      	bne.n	800b274 <__ieee754_pow+0x9bc>
 800b29c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800b33c <__ieee754_pow+0xa84>
 800b2a0:	e6f7      	b.n	800b092 <__ieee754_pow+0x7da>
 800b2a2:	469a      	mov	sl, r3
 800b2a4:	4b22      	ldr	r3, [pc, #136]	@ (800b330 <__ieee754_pow+0xa78>)
 800b2a6:	459a      	cmp	sl, r3
 800b2a8:	f63f aef3 	bhi.w	800b092 <__ieee754_pow+0x7da>
 800b2ac:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b2b0:	e715      	b.n	800b0de <__ieee754_pow+0x826>
 800b2b2:	ec51 0b10 	vmov	r0, r1, d0
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	e7cf      	b.n	800b25a <__ieee754_pow+0x9a2>
 800b2ba:	491a      	ldr	r1, [pc, #104]	@ (800b324 <__ieee754_pow+0xa6c>)
 800b2bc:	2000      	movs	r0, #0
 800b2be:	f7ff bb18 	b.w	800a8f2 <__ieee754_pow+0x3a>
 800b2c2:	2000      	movs	r0, #0
 800b2c4:	2100      	movs	r1, #0
 800b2c6:	f7ff bb14 	b.w	800a8f2 <__ieee754_pow+0x3a>
 800b2ca:	4630      	mov	r0, r6
 800b2cc:	4639      	mov	r1, r7
 800b2ce:	f7ff bb10 	b.w	800a8f2 <__ieee754_pow+0x3a>
 800b2d2:	460c      	mov	r4, r1
 800b2d4:	f7ff bb5e 	b.w	800a994 <__ieee754_pow+0xdc>
 800b2d8:	2400      	movs	r4, #0
 800b2da:	f7ff bb49 	b.w	800a970 <__ieee754_pow+0xb8>
 800b2de:	bf00      	nop
 800b2e0:	00000000 	.word	0x00000000
 800b2e4:	3fe62e43 	.word	0x3fe62e43
 800b2e8:	fefa39ef 	.word	0xfefa39ef
 800b2ec:	3fe62e42 	.word	0x3fe62e42
 800b2f0:	0ca86c39 	.word	0x0ca86c39
 800b2f4:	be205c61 	.word	0xbe205c61
 800b2f8:	72bea4d0 	.word	0x72bea4d0
 800b2fc:	3e663769 	.word	0x3e663769
 800b300:	c5d26bf1 	.word	0xc5d26bf1
 800b304:	3ebbbd41 	.word	0x3ebbbd41
 800b308:	af25de2c 	.word	0xaf25de2c
 800b30c:	3f11566a 	.word	0x3f11566a
 800b310:	16bebd93 	.word	0x16bebd93
 800b314:	3f66c16c 	.word	0x3f66c16c
 800b318:	5555553e 	.word	0x5555553e
 800b31c:	3fc55555 	.word	0x3fc55555
 800b320:	fff00000 	.word	0xfff00000
 800b324:	3ff00000 	.word	0x3ff00000
 800b328:	4090cbff 	.word	0x4090cbff
 800b32c:	3f6f3400 	.word	0x3f6f3400
 800b330:	3fe00000 	.word	0x3fe00000
 800b334:	652b82fe 	.word	0x652b82fe
 800b338:	3c971547 	.word	0x3c971547
 800b33c:	4090cc00 	.word	0x4090cc00

0800b340 <__ieee754_rem_pio2>:
 800b340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b344:	ec57 6b10 	vmov	r6, r7, d0
 800b348:	4bc5      	ldr	r3, [pc, #788]	@ (800b660 <__ieee754_rem_pio2+0x320>)
 800b34a:	b08d      	sub	sp, #52	@ 0x34
 800b34c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b350:	4598      	cmp	r8, r3
 800b352:	4604      	mov	r4, r0
 800b354:	9704      	str	r7, [sp, #16]
 800b356:	d807      	bhi.n	800b368 <__ieee754_rem_pio2+0x28>
 800b358:	2200      	movs	r2, #0
 800b35a:	2300      	movs	r3, #0
 800b35c:	ed80 0b00 	vstr	d0, [r0]
 800b360:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b364:	2500      	movs	r5, #0
 800b366:	e028      	b.n	800b3ba <__ieee754_rem_pio2+0x7a>
 800b368:	4bbe      	ldr	r3, [pc, #760]	@ (800b664 <__ieee754_rem_pio2+0x324>)
 800b36a:	4598      	cmp	r8, r3
 800b36c:	d878      	bhi.n	800b460 <__ieee754_rem_pio2+0x120>
 800b36e:	9b04      	ldr	r3, [sp, #16]
 800b370:	4dbd      	ldr	r5, [pc, #756]	@ (800b668 <__ieee754_rem_pio2+0x328>)
 800b372:	2b00      	cmp	r3, #0
 800b374:	4630      	mov	r0, r6
 800b376:	a3ac      	add	r3, pc, #688	@ (adr r3, 800b628 <__ieee754_rem_pio2+0x2e8>)
 800b378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b37c:	4639      	mov	r1, r7
 800b37e:	dd38      	ble.n	800b3f2 <__ieee754_rem_pio2+0xb2>
 800b380:	f7f4 ffa2 	bl	80002c8 <__aeabi_dsub>
 800b384:	45a8      	cmp	r8, r5
 800b386:	4606      	mov	r6, r0
 800b388:	460f      	mov	r7, r1
 800b38a:	d01a      	beq.n	800b3c2 <__ieee754_rem_pio2+0x82>
 800b38c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800b630 <__ieee754_rem_pio2+0x2f0>)
 800b38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b392:	f7f4 ff99 	bl	80002c8 <__aeabi_dsub>
 800b396:	4602      	mov	r2, r0
 800b398:	460b      	mov	r3, r1
 800b39a:	4680      	mov	r8, r0
 800b39c:	4689      	mov	r9, r1
 800b39e:	4630      	mov	r0, r6
 800b3a0:	4639      	mov	r1, r7
 800b3a2:	f7f4 ff91 	bl	80002c8 <__aeabi_dsub>
 800b3a6:	a3a2      	add	r3, pc, #648	@ (adr r3, 800b630 <__ieee754_rem_pio2+0x2f0>)
 800b3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ac:	f7f4 ff8c 	bl	80002c8 <__aeabi_dsub>
 800b3b0:	e9c4 8900 	strd	r8, r9, [r4]
 800b3b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b3b8:	2501      	movs	r5, #1
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	b00d      	add	sp, #52	@ 0x34
 800b3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3c2:	a39d      	add	r3, pc, #628	@ (adr r3, 800b638 <__ieee754_rem_pio2+0x2f8>)
 800b3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c8:	f7f4 ff7e 	bl	80002c8 <__aeabi_dsub>
 800b3cc:	a39c      	add	r3, pc, #624	@ (adr r3, 800b640 <__ieee754_rem_pio2+0x300>)
 800b3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d2:	4606      	mov	r6, r0
 800b3d4:	460f      	mov	r7, r1
 800b3d6:	f7f4 ff77 	bl	80002c8 <__aeabi_dsub>
 800b3da:	4602      	mov	r2, r0
 800b3dc:	460b      	mov	r3, r1
 800b3de:	4680      	mov	r8, r0
 800b3e0:	4689      	mov	r9, r1
 800b3e2:	4630      	mov	r0, r6
 800b3e4:	4639      	mov	r1, r7
 800b3e6:	f7f4 ff6f 	bl	80002c8 <__aeabi_dsub>
 800b3ea:	a395      	add	r3, pc, #596	@ (adr r3, 800b640 <__ieee754_rem_pio2+0x300>)
 800b3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f0:	e7dc      	b.n	800b3ac <__ieee754_rem_pio2+0x6c>
 800b3f2:	f7f4 ff6b 	bl	80002cc <__adddf3>
 800b3f6:	45a8      	cmp	r8, r5
 800b3f8:	4606      	mov	r6, r0
 800b3fa:	460f      	mov	r7, r1
 800b3fc:	d018      	beq.n	800b430 <__ieee754_rem_pio2+0xf0>
 800b3fe:	a38c      	add	r3, pc, #560	@ (adr r3, 800b630 <__ieee754_rem_pio2+0x2f0>)
 800b400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b404:	f7f4 ff62 	bl	80002cc <__adddf3>
 800b408:	4602      	mov	r2, r0
 800b40a:	460b      	mov	r3, r1
 800b40c:	4680      	mov	r8, r0
 800b40e:	4689      	mov	r9, r1
 800b410:	4630      	mov	r0, r6
 800b412:	4639      	mov	r1, r7
 800b414:	f7f4 ff58 	bl	80002c8 <__aeabi_dsub>
 800b418:	a385      	add	r3, pc, #532	@ (adr r3, 800b630 <__ieee754_rem_pio2+0x2f0>)
 800b41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41e:	f7f4 ff55 	bl	80002cc <__adddf3>
 800b422:	f04f 35ff 	mov.w	r5, #4294967295
 800b426:	e9c4 8900 	strd	r8, r9, [r4]
 800b42a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b42e:	e7c4      	b.n	800b3ba <__ieee754_rem_pio2+0x7a>
 800b430:	a381      	add	r3, pc, #516	@ (adr r3, 800b638 <__ieee754_rem_pio2+0x2f8>)
 800b432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b436:	f7f4 ff49 	bl	80002cc <__adddf3>
 800b43a:	a381      	add	r3, pc, #516	@ (adr r3, 800b640 <__ieee754_rem_pio2+0x300>)
 800b43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b440:	4606      	mov	r6, r0
 800b442:	460f      	mov	r7, r1
 800b444:	f7f4 ff42 	bl	80002cc <__adddf3>
 800b448:	4602      	mov	r2, r0
 800b44a:	460b      	mov	r3, r1
 800b44c:	4680      	mov	r8, r0
 800b44e:	4689      	mov	r9, r1
 800b450:	4630      	mov	r0, r6
 800b452:	4639      	mov	r1, r7
 800b454:	f7f4 ff38 	bl	80002c8 <__aeabi_dsub>
 800b458:	a379      	add	r3, pc, #484	@ (adr r3, 800b640 <__ieee754_rem_pio2+0x300>)
 800b45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45e:	e7de      	b.n	800b41e <__ieee754_rem_pio2+0xde>
 800b460:	4b82      	ldr	r3, [pc, #520]	@ (800b66c <__ieee754_rem_pio2+0x32c>)
 800b462:	4598      	cmp	r8, r3
 800b464:	f200 80d1 	bhi.w	800b60a <__ieee754_rem_pio2+0x2ca>
 800b468:	f7fe ff5e 	bl	800a328 <fabs>
 800b46c:	ec57 6b10 	vmov	r6, r7, d0
 800b470:	a375      	add	r3, pc, #468	@ (adr r3, 800b648 <__ieee754_rem_pio2+0x308>)
 800b472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b476:	4630      	mov	r0, r6
 800b478:	4639      	mov	r1, r7
 800b47a:	f7f5 f8dd 	bl	8000638 <__aeabi_dmul>
 800b47e:	4b7c      	ldr	r3, [pc, #496]	@ (800b670 <__ieee754_rem_pio2+0x330>)
 800b480:	2200      	movs	r2, #0
 800b482:	f7f4 ff23 	bl	80002cc <__adddf3>
 800b486:	f7f5 fb87 	bl	8000b98 <__aeabi_d2iz>
 800b48a:	4605      	mov	r5, r0
 800b48c:	f7f5 f86a 	bl	8000564 <__aeabi_i2d>
 800b490:	4602      	mov	r2, r0
 800b492:	460b      	mov	r3, r1
 800b494:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b498:	a363      	add	r3, pc, #396	@ (adr r3, 800b628 <__ieee754_rem_pio2+0x2e8>)
 800b49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49e:	f7f5 f8cb 	bl	8000638 <__aeabi_dmul>
 800b4a2:	4602      	mov	r2, r0
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	4630      	mov	r0, r6
 800b4a8:	4639      	mov	r1, r7
 800b4aa:	f7f4 ff0d 	bl	80002c8 <__aeabi_dsub>
 800b4ae:	a360      	add	r3, pc, #384	@ (adr r3, 800b630 <__ieee754_rem_pio2+0x2f0>)
 800b4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b4:	4682      	mov	sl, r0
 800b4b6:	468b      	mov	fp, r1
 800b4b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4bc:	f7f5 f8bc 	bl	8000638 <__aeabi_dmul>
 800b4c0:	2d1f      	cmp	r5, #31
 800b4c2:	4606      	mov	r6, r0
 800b4c4:	460f      	mov	r7, r1
 800b4c6:	dc0c      	bgt.n	800b4e2 <__ieee754_rem_pio2+0x1a2>
 800b4c8:	4b6a      	ldr	r3, [pc, #424]	@ (800b674 <__ieee754_rem_pio2+0x334>)
 800b4ca:	1e6a      	subs	r2, r5, #1
 800b4cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4d0:	4543      	cmp	r3, r8
 800b4d2:	d006      	beq.n	800b4e2 <__ieee754_rem_pio2+0x1a2>
 800b4d4:	4632      	mov	r2, r6
 800b4d6:	463b      	mov	r3, r7
 800b4d8:	4650      	mov	r0, sl
 800b4da:	4659      	mov	r1, fp
 800b4dc:	f7f4 fef4 	bl	80002c8 <__aeabi_dsub>
 800b4e0:	e00e      	b.n	800b500 <__ieee754_rem_pio2+0x1c0>
 800b4e2:	463b      	mov	r3, r7
 800b4e4:	4632      	mov	r2, r6
 800b4e6:	4650      	mov	r0, sl
 800b4e8:	4659      	mov	r1, fp
 800b4ea:	f7f4 feed 	bl	80002c8 <__aeabi_dsub>
 800b4ee:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b4f2:	9305      	str	r3, [sp, #20]
 800b4f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b4f8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800b4fc:	2b10      	cmp	r3, #16
 800b4fe:	dc02      	bgt.n	800b506 <__ieee754_rem_pio2+0x1c6>
 800b500:	e9c4 0100 	strd	r0, r1, [r4]
 800b504:	e039      	b.n	800b57a <__ieee754_rem_pio2+0x23a>
 800b506:	a34c      	add	r3, pc, #304	@ (adr r3, 800b638 <__ieee754_rem_pio2+0x2f8>)
 800b508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b510:	f7f5 f892 	bl	8000638 <__aeabi_dmul>
 800b514:	4606      	mov	r6, r0
 800b516:	460f      	mov	r7, r1
 800b518:	4602      	mov	r2, r0
 800b51a:	460b      	mov	r3, r1
 800b51c:	4650      	mov	r0, sl
 800b51e:	4659      	mov	r1, fp
 800b520:	f7f4 fed2 	bl	80002c8 <__aeabi_dsub>
 800b524:	4602      	mov	r2, r0
 800b526:	460b      	mov	r3, r1
 800b528:	4680      	mov	r8, r0
 800b52a:	4689      	mov	r9, r1
 800b52c:	4650      	mov	r0, sl
 800b52e:	4659      	mov	r1, fp
 800b530:	f7f4 feca 	bl	80002c8 <__aeabi_dsub>
 800b534:	4632      	mov	r2, r6
 800b536:	463b      	mov	r3, r7
 800b538:	f7f4 fec6 	bl	80002c8 <__aeabi_dsub>
 800b53c:	a340      	add	r3, pc, #256	@ (adr r3, 800b640 <__ieee754_rem_pio2+0x300>)
 800b53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b542:	4606      	mov	r6, r0
 800b544:	460f      	mov	r7, r1
 800b546:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b54a:	f7f5 f875 	bl	8000638 <__aeabi_dmul>
 800b54e:	4632      	mov	r2, r6
 800b550:	463b      	mov	r3, r7
 800b552:	f7f4 feb9 	bl	80002c8 <__aeabi_dsub>
 800b556:	4602      	mov	r2, r0
 800b558:	460b      	mov	r3, r1
 800b55a:	4606      	mov	r6, r0
 800b55c:	460f      	mov	r7, r1
 800b55e:	4640      	mov	r0, r8
 800b560:	4649      	mov	r1, r9
 800b562:	f7f4 feb1 	bl	80002c8 <__aeabi_dsub>
 800b566:	9a05      	ldr	r2, [sp, #20]
 800b568:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b56c:	1ad3      	subs	r3, r2, r3
 800b56e:	2b31      	cmp	r3, #49	@ 0x31
 800b570:	dc20      	bgt.n	800b5b4 <__ieee754_rem_pio2+0x274>
 800b572:	e9c4 0100 	strd	r0, r1, [r4]
 800b576:	46c2      	mov	sl, r8
 800b578:	46cb      	mov	fp, r9
 800b57a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b57e:	4650      	mov	r0, sl
 800b580:	4642      	mov	r2, r8
 800b582:	464b      	mov	r3, r9
 800b584:	4659      	mov	r1, fp
 800b586:	f7f4 fe9f 	bl	80002c8 <__aeabi_dsub>
 800b58a:	463b      	mov	r3, r7
 800b58c:	4632      	mov	r2, r6
 800b58e:	f7f4 fe9b 	bl	80002c8 <__aeabi_dsub>
 800b592:	9b04      	ldr	r3, [sp, #16]
 800b594:	2b00      	cmp	r3, #0
 800b596:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b59a:	f6bf af0e 	bge.w	800b3ba <__ieee754_rem_pio2+0x7a>
 800b59e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800b5a2:	6063      	str	r3, [r4, #4]
 800b5a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b5a8:	f8c4 8000 	str.w	r8, [r4]
 800b5ac:	60a0      	str	r0, [r4, #8]
 800b5ae:	60e3      	str	r3, [r4, #12]
 800b5b0:	426d      	negs	r5, r5
 800b5b2:	e702      	b.n	800b3ba <__ieee754_rem_pio2+0x7a>
 800b5b4:	a326      	add	r3, pc, #152	@ (adr r3, 800b650 <__ieee754_rem_pio2+0x310>)
 800b5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5be:	f7f5 f83b 	bl	8000638 <__aeabi_dmul>
 800b5c2:	4606      	mov	r6, r0
 800b5c4:	460f      	mov	r7, r1
 800b5c6:	4602      	mov	r2, r0
 800b5c8:	460b      	mov	r3, r1
 800b5ca:	4640      	mov	r0, r8
 800b5cc:	4649      	mov	r1, r9
 800b5ce:	f7f4 fe7b 	bl	80002c8 <__aeabi_dsub>
 800b5d2:	4602      	mov	r2, r0
 800b5d4:	460b      	mov	r3, r1
 800b5d6:	4682      	mov	sl, r0
 800b5d8:	468b      	mov	fp, r1
 800b5da:	4640      	mov	r0, r8
 800b5dc:	4649      	mov	r1, r9
 800b5de:	f7f4 fe73 	bl	80002c8 <__aeabi_dsub>
 800b5e2:	4632      	mov	r2, r6
 800b5e4:	463b      	mov	r3, r7
 800b5e6:	f7f4 fe6f 	bl	80002c8 <__aeabi_dsub>
 800b5ea:	a31b      	add	r3, pc, #108	@ (adr r3, 800b658 <__ieee754_rem_pio2+0x318>)
 800b5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f0:	4606      	mov	r6, r0
 800b5f2:	460f      	mov	r7, r1
 800b5f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5f8:	f7f5 f81e 	bl	8000638 <__aeabi_dmul>
 800b5fc:	4632      	mov	r2, r6
 800b5fe:	463b      	mov	r3, r7
 800b600:	f7f4 fe62 	bl	80002c8 <__aeabi_dsub>
 800b604:	4606      	mov	r6, r0
 800b606:	460f      	mov	r7, r1
 800b608:	e764      	b.n	800b4d4 <__ieee754_rem_pio2+0x194>
 800b60a:	4b1b      	ldr	r3, [pc, #108]	@ (800b678 <__ieee754_rem_pio2+0x338>)
 800b60c:	4598      	cmp	r8, r3
 800b60e:	d935      	bls.n	800b67c <__ieee754_rem_pio2+0x33c>
 800b610:	4632      	mov	r2, r6
 800b612:	463b      	mov	r3, r7
 800b614:	4630      	mov	r0, r6
 800b616:	4639      	mov	r1, r7
 800b618:	f7f4 fe56 	bl	80002c8 <__aeabi_dsub>
 800b61c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b620:	e9c4 0100 	strd	r0, r1, [r4]
 800b624:	e69e      	b.n	800b364 <__ieee754_rem_pio2+0x24>
 800b626:	bf00      	nop
 800b628:	54400000 	.word	0x54400000
 800b62c:	3ff921fb 	.word	0x3ff921fb
 800b630:	1a626331 	.word	0x1a626331
 800b634:	3dd0b461 	.word	0x3dd0b461
 800b638:	1a600000 	.word	0x1a600000
 800b63c:	3dd0b461 	.word	0x3dd0b461
 800b640:	2e037073 	.word	0x2e037073
 800b644:	3ba3198a 	.word	0x3ba3198a
 800b648:	6dc9c883 	.word	0x6dc9c883
 800b64c:	3fe45f30 	.word	0x3fe45f30
 800b650:	2e000000 	.word	0x2e000000
 800b654:	3ba3198a 	.word	0x3ba3198a
 800b658:	252049c1 	.word	0x252049c1
 800b65c:	397b839a 	.word	0x397b839a
 800b660:	3fe921fb 	.word	0x3fe921fb
 800b664:	4002d97b 	.word	0x4002d97b
 800b668:	3ff921fb 	.word	0x3ff921fb
 800b66c:	413921fb 	.word	0x413921fb
 800b670:	3fe00000 	.word	0x3fe00000
 800b674:	0800c6a0 	.word	0x0800c6a0
 800b678:	7fefffff 	.word	0x7fefffff
 800b67c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800b680:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800b684:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800b688:	4630      	mov	r0, r6
 800b68a:	460f      	mov	r7, r1
 800b68c:	f7f5 fa84 	bl	8000b98 <__aeabi_d2iz>
 800b690:	f7f4 ff68 	bl	8000564 <__aeabi_i2d>
 800b694:	4602      	mov	r2, r0
 800b696:	460b      	mov	r3, r1
 800b698:	4630      	mov	r0, r6
 800b69a:	4639      	mov	r1, r7
 800b69c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b6a0:	f7f4 fe12 	bl	80002c8 <__aeabi_dsub>
 800b6a4:	4b22      	ldr	r3, [pc, #136]	@ (800b730 <__ieee754_rem_pio2+0x3f0>)
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	f7f4 ffc6 	bl	8000638 <__aeabi_dmul>
 800b6ac:	460f      	mov	r7, r1
 800b6ae:	4606      	mov	r6, r0
 800b6b0:	f7f5 fa72 	bl	8000b98 <__aeabi_d2iz>
 800b6b4:	f7f4 ff56 	bl	8000564 <__aeabi_i2d>
 800b6b8:	4602      	mov	r2, r0
 800b6ba:	460b      	mov	r3, r1
 800b6bc:	4630      	mov	r0, r6
 800b6be:	4639      	mov	r1, r7
 800b6c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b6c4:	f7f4 fe00 	bl	80002c8 <__aeabi_dsub>
 800b6c8:	4b19      	ldr	r3, [pc, #100]	@ (800b730 <__ieee754_rem_pio2+0x3f0>)
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	f7f4 ffb4 	bl	8000638 <__aeabi_dmul>
 800b6d0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800b6d4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800b6d8:	f04f 0803 	mov.w	r8, #3
 800b6dc:	2600      	movs	r6, #0
 800b6de:	2700      	movs	r7, #0
 800b6e0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800b6e4:	4632      	mov	r2, r6
 800b6e6:	463b      	mov	r3, r7
 800b6e8:	46c2      	mov	sl, r8
 800b6ea:	f108 38ff 	add.w	r8, r8, #4294967295
 800b6ee:	f7f5 fa0b 	bl	8000b08 <__aeabi_dcmpeq>
 800b6f2:	2800      	cmp	r0, #0
 800b6f4:	d1f4      	bne.n	800b6e0 <__ieee754_rem_pio2+0x3a0>
 800b6f6:	4b0f      	ldr	r3, [pc, #60]	@ (800b734 <__ieee754_rem_pio2+0x3f4>)
 800b6f8:	9301      	str	r3, [sp, #4]
 800b6fa:	2302      	movs	r3, #2
 800b6fc:	9300      	str	r3, [sp, #0]
 800b6fe:	462a      	mov	r2, r5
 800b700:	4653      	mov	r3, sl
 800b702:	4621      	mov	r1, r4
 800b704:	a806      	add	r0, sp, #24
 800b706:	f000 f8d3 	bl	800b8b0 <__kernel_rem_pio2>
 800b70a:	9b04      	ldr	r3, [sp, #16]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	4605      	mov	r5, r0
 800b710:	f6bf ae53 	bge.w	800b3ba <__ieee754_rem_pio2+0x7a>
 800b714:	e9d4 2100 	ldrd	r2, r1, [r4]
 800b718:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b71c:	e9c4 2300 	strd	r2, r3, [r4]
 800b720:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800b724:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b728:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b72c:	e740      	b.n	800b5b0 <__ieee754_rem_pio2+0x270>
 800b72e:	bf00      	nop
 800b730:	41700000 	.word	0x41700000
 800b734:	0800c720 	.word	0x0800c720

0800b738 <scalbn>:
 800b738:	b570      	push	{r4, r5, r6, lr}
 800b73a:	ec55 4b10 	vmov	r4, r5, d0
 800b73e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800b742:	4606      	mov	r6, r0
 800b744:	462b      	mov	r3, r5
 800b746:	b991      	cbnz	r1, 800b76e <scalbn+0x36>
 800b748:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b74c:	4323      	orrs	r3, r4
 800b74e:	d03d      	beq.n	800b7cc <scalbn+0x94>
 800b750:	4b35      	ldr	r3, [pc, #212]	@ (800b828 <scalbn+0xf0>)
 800b752:	4620      	mov	r0, r4
 800b754:	4629      	mov	r1, r5
 800b756:	2200      	movs	r2, #0
 800b758:	f7f4 ff6e 	bl	8000638 <__aeabi_dmul>
 800b75c:	4b33      	ldr	r3, [pc, #204]	@ (800b82c <scalbn+0xf4>)
 800b75e:	429e      	cmp	r6, r3
 800b760:	4604      	mov	r4, r0
 800b762:	460d      	mov	r5, r1
 800b764:	da0f      	bge.n	800b786 <scalbn+0x4e>
 800b766:	a328      	add	r3, pc, #160	@ (adr r3, 800b808 <scalbn+0xd0>)
 800b768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76c:	e01e      	b.n	800b7ac <scalbn+0x74>
 800b76e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800b772:	4291      	cmp	r1, r2
 800b774:	d10b      	bne.n	800b78e <scalbn+0x56>
 800b776:	4622      	mov	r2, r4
 800b778:	4620      	mov	r0, r4
 800b77a:	4629      	mov	r1, r5
 800b77c:	f7f4 fda6 	bl	80002cc <__adddf3>
 800b780:	4604      	mov	r4, r0
 800b782:	460d      	mov	r5, r1
 800b784:	e022      	b.n	800b7cc <scalbn+0x94>
 800b786:	460b      	mov	r3, r1
 800b788:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b78c:	3936      	subs	r1, #54	@ 0x36
 800b78e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800b792:	4296      	cmp	r6, r2
 800b794:	dd0d      	ble.n	800b7b2 <scalbn+0x7a>
 800b796:	2d00      	cmp	r5, #0
 800b798:	a11d      	add	r1, pc, #116	@ (adr r1, 800b810 <scalbn+0xd8>)
 800b79a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b79e:	da02      	bge.n	800b7a6 <scalbn+0x6e>
 800b7a0:	a11d      	add	r1, pc, #116	@ (adr r1, 800b818 <scalbn+0xe0>)
 800b7a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7a6:	a31a      	add	r3, pc, #104	@ (adr r3, 800b810 <scalbn+0xd8>)
 800b7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ac:	f7f4 ff44 	bl	8000638 <__aeabi_dmul>
 800b7b0:	e7e6      	b.n	800b780 <scalbn+0x48>
 800b7b2:	1872      	adds	r2, r6, r1
 800b7b4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800b7b8:	428a      	cmp	r2, r1
 800b7ba:	dcec      	bgt.n	800b796 <scalbn+0x5e>
 800b7bc:	2a00      	cmp	r2, #0
 800b7be:	dd08      	ble.n	800b7d2 <scalbn+0x9a>
 800b7c0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b7c4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b7c8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b7cc:	ec45 4b10 	vmov	d0, r4, r5
 800b7d0:	bd70      	pop	{r4, r5, r6, pc}
 800b7d2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800b7d6:	da08      	bge.n	800b7ea <scalbn+0xb2>
 800b7d8:	2d00      	cmp	r5, #0
 800b7da:	a10b      	add	r1, pc, #44	@ (adr r1, 800b808 <scalbn+0xd0>)
 800b7dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7e0:	dac1      	bge.n	800b766 <scalbn+0x2e>
 800b7e2:	a10f      	add	r1, pc, #60	@ (adr r1, 800b820 <scalbn+0xe8>)
 800b7e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7e8:	e7bd      	b.n	800b766 <scalbn+0x2e>
 800b7ea:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b7ee:	3236      	adds	r2, #54	@ 0x36
 800b7f0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b7f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b7f8:	4620      	mov	r0, r4
 800b7fa:	4b0d      	ldr	r3, [pc, #52]	@ (800b830 <scalbn+0xf8>)
 800b7fc:	4629      	mov	r1, r5
 800b7fe:	2200      	movs	r2, #0
 800b800:	e7d4      	b.n	800b7ac <scalbn+0x74>
 800b802:	bf00      	nop
 800b804:	f3af 8000 	nop.w
 800b808:	c2f8f359 	.word	0xc2f8f359
 800b80c:	01a56e1f 	.word	0x01a56e1f
 800b810:	8800759c 	.word	0x8800759c
 800b814:	7e37e43c 	.word	0x7e37e43c
 800b818:	8800759c 	.word	0x8800759c
 800b81c:	fe37e43c 	.word	0xfe37e43c
 800b820:	c2f8f359 	.word	0xc2f8f359
 800b824:	81a56e1f 	.word	0x81a56e1f
 800b828:	43500000 	.word	0x43500000
 800b82c:	ffff3cb0 	.word	0xffff3cb0
 800b830:	3c900000 	.word	0x3c900000

0800b834 <with_errno>:
 800b834:	b510      	push	{r4, lr}
 800b836:	ed2d 8b02 	vpush	{d8}
 800b83a:	eeb0 8a40 	vmov.f32	s16, s0
 800b83e:	eef0 8a60 	vmov.f32	s17, s1
 800b842:	4604      	mov	r4, r0
 800b844:	f7fc fc36 	bl	80080b4 <__errno>
 800b848:	eeb0 0a48 	vmov.f32	s0, s16
 800b84c:	eef0 0a68 	vmov.f32	s1, s17
 800b850:	ecbd 8b02 	vpop	{d8}
 800b854:	6004      	str	r4, [r0, #0]
 800b856:	bd10      	pop	{r4, pc}

0800b858 <xflow>:
 800b858:	4603      	mov	r3, r0
 800b85a:	b507      	push	{r0, r1, r2, lr}
 800b85c:	ec51 0b10 	vmov	r0, r1, d0
 800b860:	b183      	cbz	r3, 800b884 <xflow+0x2c>
 800b862:	4602      	mov	r2, r0
 800b864:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b868:	e9cd 2300 	strd	r2, r3, [sp]
 800b86c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b870:	f7f4 fee2 	bl	8000638 <__aeabi_dmul>
 800b874:	ec41 0b10 	vmov	d0, r0, r1
 800b878:	2022      	movs	r0, #34	@ 0x22
 800b87a:	b003      	add	sp, #12
 800b87c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b880:	f7ff bfd8 	b.w	800b834 <with_errno>
 800b884:	4602      	mov	r2, r0
 800b886:	460b      	mov	r3, r1
 800b888:	e7ee      	b.n	800b868 <xflow+0x10>
 800b88a:	0000      	movs	r0, r0
 800b88c:	0000      	movs	r0, r0
	...

0800b890 <__math_uflow>:
 800b890:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b898 <__math_uflow+0x8>
 800b894:	f7ff bfe0 	b.w	800b858 <xflow>
 800b898:	00000000 	.word	0x00000000
 800b89c:	10000000 	.word	0x10000000

0800b8a0 <__math_oflow>:
 800b8a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b8a8 <__math_oflow+0x8>
 800b8a4:	f7ff bfd8 	b.w	800b858 <xflow>
 800b8a8:	00000000 	.word	0x00000000
 800b8ac:	70000000 	.word	0x70000000

0800b8b0 <__kernel_rem_pio2>:
 800b8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b4:	ed2d 8b02 	vpush	{d8}
 800b8b8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800b8bc:	f112 0f14 	cmn.w	r2, #20
 800b8c0:	9306      	str	r3, [sp, #24]
 800b8c2:	9104      	str	r1, [sp, #16]
 800b8c4:	4bbe      	ldr	r3, [pc, #760]	@ (800bbc0 <__kernel_rem_pio2+0x310>)
 800b8c6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800b8c8:	9008      	str	r0, [sp, #32]
 800b8ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b8ce:	9300      	str	r3, [sp, #0]
 800b8d0:	9b06      	ldr	r3, [sp, #24]
 800b8d2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b8d6:	bfa8      	it	ge
 800b8d8:	1ed4      	subge	r4, r2, #3
 800b8da:	9305      	str	r3, [sp, #20]
 800b8dc:	bfb2      	itee	lt
 800b8de:	2400      	movlt	r4, #0
 800b8e0:	2318      	movge	r3, #24
 800b8e2:	fb94 f4f3 	sdivge	r4, r4, r3
 800b8e6:	f06f 0317 	mvn.w	r3, #23
 800b8ea:	fb04 3303 	mla	r3, r4, r3, r3
 800b8ee:	eb03 0b02 	add.w	fp, r3, r2
 800b8f2:	9b00      	ldr	r3, [sp, #0]
 800b8f4:	9a05      	ldr	r2, [sp, #20]
 800b8f6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800bbb0 <__kernel_rem_pio2+0x300>
 800b8fa:	eb03 0802 	add.w	r8, r3, r2
 800b8fe:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800b900:	1aa7      	subs	r7, r4, r2
 800b902:	ae20      	add	r6, sp, #128	@ 0x80
 800b904:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b908:	2500      	movs	r5, #0
 800b90a:	4545      	cmp	r5, r8
 800b90c:	dd13      	ble.n	800b936 <__kernel_rem_pio2+0x86>
 800b90e:	9b06      	ldr	r3, [sp, #24]
 800b910:	aa20      	add	r2, sp, #128	@ 0x80
 800b912:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b916:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800b91a:	f04f 0800 	mov.w	r8, #0
 800b91e:	9b00      	ldr	r3, [sp, #0]
 800b920:	4598      	cmp	r8, r3
 800b922:	dc31      	bgt.n	800b988 <__kernel_rem_pio2+0xd8>
 800b924:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800bbb0 <__kernel_rem_pio2+0x300>
 800b928:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b92c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b930:	462f      	mov	r7, r5
 800b932:	2600      	movs	r6, #0
 800b934:	e01b      	b.n	800b96e <__kernel_rem_pio2+0xbe>
 800b936:	42ef      	cmn	r7, r5
 800b938:	d407      	bmi.n	800b94a <__kernel_rem_pio2+0x9a>
 800b93a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b93e:	f7f4 fe11 	bl	8000564 <__aeabi_i2d>
 800b942:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b946:	3501      	adds	r5, #1
 800b948:	e7df      	b.n	800b90a <__kernel_rem_pio2+0x5a>
 800b94a:	ec51 0b18 	vmov	r0, r1, d8
 800b94e:	e7f8      	b.n	800b942 <__kernel_rem_pio2+0x92>
 800b950:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b954:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b958:	f7f4 fe6e 	bl	8000638 <__aeabi_dmul>
 800b95c:	4602      	mov	r2, r0
 800b95e:	460b      	mov	r3, r1
 800b960:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b964:	f7f4 fcb2 	bl	80002cc <__adddf3>
 800b968:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b96c:	3601      	adds	r6, #1
 800b96e:	9b05      	ldr	r3, [sp, #20]
 800b970:	429e      	cmp	r6, r3
 800b972:	f1a7 0708 	sub.w	r7, r7, #8
 800b976:	ddeb      	ble.n	800b950 <__kernel_rem_pio2+0xa0>
 800b978:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b97c:	f108 0801 	add.w	r8, r8, #1
 800b980:	ecaa 7b02 	vstmia	sl!, {d7}
 800b984:	3508      	adds	r5, #8
 800b986:	e7ca      	b.n	800b91e <__kernel_rem_pio2+0x6e>
 800b988:	9b00      	ldr	r3, [sp, #0]
 800b98a:	f8dd 8000 	ldr.w	r8, [sp]
 800b98e:	aa0c      	add	r2, sp, #48	@ 0x30
 800b990:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b994:	930a      	str	r3, [sp, #40]	@ 0x28
 800b996:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800b998:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b99c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b99e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800b9a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b9a4:	ab98      	add	r3, sp, #608	@ 0x260
 800b9a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b9aa:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800b9ae:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b9b2:	ac0c      	add	r4, sp, #48	@ 0x30
 800b9b4:	ab70      	add	r3, sp, #448	@ 0x1c0
 800b9b6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800b9ba:	46a1      	mov	r9, r4
 800b9bc:	46c2      	mov	sl, r8
 800b9be:	f1ba 0f00 	cmp.w	sl, #0
 800b9c2:	f1a5 0508 	sub.w	r5, r5, #8
 800b9c6:	dc77      	bgt.n	800bab8 <__kernel_rem_pio2+0x208>
 800b9c8:	4658      	mov	r0, fp
 800b9ca:	ed9d 0b02 	vldr	d0, [sp, #8]
 800b9ce:	f7ff feb3 	bl	800b738 <scalbn>
 800b9d2:	ec57 6b10 	vmov	r6, r7, d0
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800b9dc:	4630      	mov	r0, r6
 800b9de:	4639      	mov	r1, r7
 800b9e0:	f7f4 fe2a 	bl	8000638 <__aeabi_dmul>
 800b9e4:	ec41 0b10 	vmov	d0, r0, r1
 800b9e8:	f000 faba 	bl	800bf60 <floor>
 800b9ec:	4b75      	ldr	r3, [pc, #468]	@ (800bbc4 <__kernel_rem_pio2+0x314>)
 800b9ee:	ec51 0b10 	vmov	r0, r1, d0
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	f7f4 fe20 	bl	8000638 <__aeabi_dmul>
 800b9f8:	4602      	mov	r2, r0
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	4630      	mov	r0, r6
 800b9fe:	4639      	mov	r1, r7
 800ba00:	f7f4 fc62 	bl	80002c8 <__aeabi_dsub>
 800ba04:	460f      	mov	r7, r1
 800ba06:	4606      	mov	r6, r0
 800ba08:	f7f5 f8c6 	bl	8000b98 <__aeabi_d2iz>
 800ba0c:	9002      	str	r0, [sp, #8]
 800ba0e:	f7f4 fda9 	bl	8000564 <__aeabi_i2d>
 800ba12:	4602      	mov	r2, r0
 800ba14:	460b      	mov	r3, r1
 800ba16:	4630      	mov	r0, r6
 800ba18:	4639      	mov	r1, r7
 800ba1a:	f7f4 fc55 	bl	80002c8 <__aeabi_dsub>
 800ba1e:	f1bb 0f00 	cmp.w	fp, #0
 800ba22:	4606      	mov	r6, r0
 800ba24:	460f      	mov	r7, r1
 800ba26:	dd6c      	ble.n	800bb02 <__kernel_rem_pio2+0x252>
 800ba28:	f108 31ff 	add.w	r1, r8, #4294967295
 800ba2c:	ab0c      	add	r3, sp, #48	@ 0x30
 800ba2e:	9d02      	ldr	r5, [sp, #8]
 800ba30:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ba34:	f1cb 0018 	rsb	r0, fp, #24
 800ba38:	fa43 f200 	asr.w	r2, r3, r0
 800ba3c:	4415      	add	r5, r2
 800ba3e:	4082      	lsls	r2, r0
 800ba40:	1a9b      	subs	r3, r3, r2
 800ba42:	aa0c      	add	r2, sp, #48	@ 0x30
 800ba44:	9502      	str	r5, [sp, #8]
 800ba46:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800ba4a:	f1cb 0217 	rsb	r2, fp, #23
 800ba4e:	fa43 f902 	asr.w	r9, r3, r2
 800ba52:	f1b9 0f00 	cmp.w	r9, #0
 800ba56:	dd64      	ble.n	800bb22 <__kernel_rem_pio2+0x272>
 800ba58:	9b02      	ldr	r3, [sp, #8]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	3301      	adds	r3, #1
 800ba5e:	9302      	str	r3, [sp, #8]
 800ba60:	4615      	mov	r5, r2
 800ba62:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800ba66:	4590      	cmp	r8, r2
 800ba68:	f300 80b8 	bgt.w	800bbdc <__kernel_rem_pio2+0x32c>
 800ba6c:	f1bb 0f00 	cmp.w	fp, #0
 800ba70:	dd07      	ble.n	800ba82 <__kernel_rem_pio2+0x1d2>
 800ba72:	f1bb 0f01 	cmp.w	fp, #1
 800ba76:	f000 80bf 	beq.w	800bbf8 <__kernel_rem_pio2+0x348>
 800ba7a:	f1bb 0f02 	cmp.w	fp, #2
 800ba7e:	f000 80c6 	beq.w	800bc0e <__kernel_rem_pio2+0x35e>
 800ba82:	f1b9 0f02 	cmp.w	r9, #2
 800ba86:	d14c      	bne.n	800bb22 <__kernel_rem_pio2+0x272>
 800ba88:	4632      	mov	r2, r6
 800ba8a:	463b      	mov	r3, r7
 800ba8c:	494e      	ldr	r1, [pc, #312]	@ (800bbc8 <__kernel_rem_pio2+0x318>)
 800ba8e:	2000      	movs	r0, #0
 800ba90:	f7f4 fc1a 	bl	80002c8 <__aeabi_dsub>
 800ba94:	4606      	mov	r6, r0
 800ba96:	460f      	mov	r7, r1
 800ba98:	2d00      	cmp	r5, #0
 800ba9a:	d042      	beq.n	800bb22 <__kernel_rem_pio2+0x272>
 800ba9c:	4658      	mov	r0, fp
 800ba9e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800bbb8 <__kernel_rem_pio2+0x308>
 800baa2:	f7ff fe49 	bl	800b738 <scalbn>
 800baa6:	4630      	mov	r0, r6
 800baa8:	4639      	mov	r1, r7
 800baaa:	ec53 2b10 	vmov	r2, r3, d0
 800baae:	f7f4 fc0b 	bl	80002c8 <__aeabi_dsub>
 800bab2:	4606      	mov	r6, r0
 800bab4:	460f      	mov	r7, r1
 800bab6:	e034      	b.n	800bb22 <__kernel_rem_pio2+0x272>
 800bab8:	4b44      	ldr	r3, [pc, #272]	@ (800bbcc <__kernel_rem_pio2+0x31c>)
 800baba:	2200      	movs	r2, #0
 800babc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bac0:	f7f4 fdba 	bl	8000638 <__aeabi_dmul>
 800bac4:	f7f5 f868 	bl	8000b98 <__aeabi_d2iz>
 800bac8:	f7f4 fd4c 	bl	8000564 <__aeabi_i2d>
 800bacc:	4b40      	ldr	r3, [pc, #256]	@ (800bbd0 <__kernel_rem_pio2+0x320>)
 800bace:	2200      	movs	r2, #0
 800bad0:	4606      	mov	r6, r0
 800bad2:	460f      	mov	r7, r1
 800bad4:	f7f4 fdb0 	bl	8000638 <__aeabi_dmul>
 800bad8:	4602      	mov	r2, r0
 800bada:	460b      	mov	r3, r1
 800badc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bae0:	f7f4 fbf2 	bl	80002c8 <__aeabi_dsub>
 800bae4:	f7f5 f858 	bl	8000b98 <__aeabi_d2iz>
 800bae8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800baec:	f849 0b04 	str.w	r0, [r9], #4
 800baf0:	4639      	mov	r1, r7
 800baf2:	4630      	mov	r0, r6
 800baf4:	f7f4 fbea 	bl	80002cc <__adddf3>
 800baf8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bafc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb00:	e75d      	b.n	800b9be <__kernel_rem_pio2+0x10e>
 800bb02:	d107      	bne.n	800bb14 <__kernel_rem_pio2+0x264>
 800bb04:	f108 33ff 	add.w	r3, r8, #4294967295
 800bb08:	aa0c      	add	r2, sp, #48	@ 0x30
 800bb0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb0e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800bb12:	e79e      	b.n	800ba52 <__kernel_rem_pio2+0x1a2>
 800bb14:	4b2f      	ldr	r3, [pc, #188]	@ (800bbd4 <__kernel_rem_pio2+0x324>)
 800bb16:	2200      	movs	r2, #0
 800bb18:	f7f5 f814 	bl	8000b44 <__aeabi_dcmpge>
 800bb1c:	2800      	cmp	r0, #0
 800bb1e:	d143      	bne.n	800bba8 <__kernel_rem_pio2+0x2f8>
 800bb20:	4681      	mov	r9, r0
 800bb22:	2200      	movs	r2, #0
 800bb24:	2300      	movs	r3, #0
 800bb26:	4630      	mov	r0, r6
 800bb28:	4639      	mov	r1, r7
 800bb2a:	f7f4 ffed 	bl	8000b08 <__aeabi_dcmpeq>
 800bb2e:	2800      	cmp	r0, #0
 800bb30:	f000 80bf 	beq.w	800bcb2 <__kernel_rem_pio2+0x402>
 800bb34:	f108 33ff 	add.w	r3, r8, #4294967295
 800bb38:	2200      	movs	r2, #0
 800bb3a:	9900      	ldr	r1, [sp, #0]
 800bb3c:	428b      	cmp	r3, r1
 800bb3e:	da6e      	bge.n	800bc1e <__kernel_rem_pio2+0x36e>
 800bb40:	2a00      	cmp	r2, #0
 800bb42:	f000 8089 	beq.w	800bc58 <__kernel_rem_pio2+0x3a8>
 800bb46:	f108 38ff 	add.w	r8, r8, #4294967295
 800bb4a:	ab0c      	add	r3, sp, #48	@ 0x30
 800bb4c:	f1ab 0b18 	sub.w	fp, fp, #24
 800bb50:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d0f6      	beq.n	800bb46 <__kernel_rem_pio2+0x296>
 800bb58:	4658      	mov	r0, fp
 800bb5a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800bbb8 <__kernel_rem_pio2+0x308>
 800bb5e:	f7ff fdeb 	bl	800b738 <scalbn>
 800bb62:	f108 0301 	add.w	r3, r8, #1
 800bb66:	00da      	lsls	r2, r3, #3
 800bb68:	9205      	str	r2, [sp, #20]
 800bb6a:	ec55 4b10 	vmov	r4, r5, d0
 800bb6e:	aa70      	add	r2, sp, #448	@ 0x1c0
 800bb70:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800bbcc <__kernel_rem_pio2+0x31c>
 800bb74:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800bb78:	4646      	mov	r6, r8
 800bb7a:	f04f 0a00 	mov.w	sl, #0
 800bb7e:	2e00      	cmp	r6, #0
 800bb80:	f280 80cf 	bge.w	800bd22 <__kernel_rem_pio2+0x472>
 800bb84:	4644      	mov	r4, r8
 800bb86:	2c00      	cmp	r4, #0
 800bb88:	f2c0 80fd 	blt.w	800bd86 <__kernel_rem_pio2+0x4d6>
 800bb8c:	4b12      	ldr	r3, [pc, #72]	@ (800bbd8 <__kernel_rem_pio2+0x328>)
 800bb8e:	461f      	mov	r7, r3
 800bb90:	ab70      	add	r3, sp, #448	@ 0x1c0
 800bb92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bb96:	9306      	str	r3, [sp, #24]
 800bb98:	f04f 0a00 	mov.w	sl, #0
 800bb9c:	f04f 0b00 	mov.w	fp, #0
 800bba0:	2600      	movs	r6, #0
 800bba2:	eba8 0504 	sub.w	r5, r8, r4
 800bba6:	e0e2      	b.n	800bd6e <__kernel_rem_pio2+0x4be>
 800bba8:	f04f 0902 	mov.w	r9, #2
 800bbac:	e754      	b.n	800ba58 <__kernel_rem_pio2+0x1a8>
 800bbae:	bf00      	nop
	...
 800bbbc:	3ff00000 	.word	0x3ff00000
 800bbc0:	0800c868 	.word	0x0800c868
 800bbc4:	40200000 	.word	0x40200000
 800bbc8:	3ff00000 	.word	0x3ff00000
 800bbcc:	3e700000 	.word	0x3e700000
 800bbd0:	41700000 	.word	0x41700000
 800bbd4:	3fe00000 	.word	0x3fe00000
 800bbd8:	0800c828 	.word	0x0800c828
 800bbdc:	f854 3b04 	ldr.w	r3, [r4], #4
 800bbe0:	b945      	cbnz	r5, 800bbf4 <__kernel_rem_pio2+0x344>
 800bbe2:	b123      	cbz	r3, 800bbee <__kernel_rem_pio2+0x33e>
 800bbe4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800bbe8:	f844 3c04 	str.w	r3, [r4, #-4]
 800bbec:	2301      	movs	r3, #1
 800bbee:	3201      	adds	r2, #1
 800bbf0:	461d      	mov	r5, r3
 800bbf2:	e738      	b.n	800ba66 <__kernel_rem_pio2+0x1b6>
 800bbf4:	1acb      	subs	r3, r1, r3
 800bbf6:	e7f7      	b.n	800bbe8 <__kernel_rem_pio2+0x338>
 800bbf8:	f108 32ff 	add.w	r2, r8, #4294967295
 800bbfc:	ab0c      	add	r3, sp, #48	@ 0x30
 800bbfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc02:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bc06:	a90c      	add	r1, sp, #48	@ 0x30
 800bc08:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bc0c:	e739      	b.n	800ba82 <__kernel_rem_pio2+0x1d2>
 800bc0e:	f108 32ff 	add.w	r2, r8, #4294967295
 800bc12:	ab0c      	add	r3, sp, #48	@ 0x30
 800bc14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc18:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bc1c:	e7f3      	b.n	800bc06 <__kernel_rem_pio2+0x356>
 800bc1e:	a90c      	add	r1, sp, #48	@ 0x30
 800bc20:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bc24:	3b01      	subs	r3, #1
 800bc26:	430a      	orrs	r2, r1
 800bc28:	e787      	b.n	800bb3a <__kernel_rem_pio2+0x28a>
 800bc2a:	3401      	adds	r4, #1
 800bc2c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bc30:	2a00      	cmp	r2, #0
 800bc32:	d0fa      	beq.n	800bc2a <__kernel_rem_pio2+0x37a>
 800bc34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc36:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bc3a:	eb0d 0503 	add.w	r5, sp, r3
 800bc3e:	9b06      	ldr	r3, [sp, #24]
 800bc40:	aa20      	add	r2, sp, #128	@ 0x80
 800bc42:	4443      	add	r3, r8
 800bc44:	f108 0701 	add.w	r7, r8, #1
 800bc48:	3d98      	subs	r5, #152	@ 0x98
 800bc4a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800bc4e:	4444      	add	r4, r8
 800bc50:	42bc      	cmp	r4, r7
 800bc52:	da04      	bge.n	800bc5e <__kernel_rem_pio2+0x3ae>
 800bc54:	46a0      	mov	r8, r4
 800bc56:	e6a2      	b.n	800b99e <__kernel_rem_pio2+0xee>
 800bc58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc5a:	2401      	movs	r4, #1
 800bc5c:	e7e6      	b.n	800bc2c <__kernel_rem_pio2+0x37c>
 800bc5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc60:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800bc64:	f7f4 fc7e 	bl	8000564 <__aeabi_i2d>
 800bc68:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800bf30 <__kernel_rem_pio2+0x680>
 800bc6c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bc70:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bc74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bc78:	46b2      	mov	sl, r6
 800bc7a:	f04f 0800 	mov.w	r8, #0
 800bc7e:	9b05      	ldr	r3, [sp, #20]
 800bc80:	4598      	cmp	r8, r3
 800bc82:	dd05      	ble.n	800bc90 <__kernel_rem_pio2+0x3e0>
 800bc84:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bc88:	3701      	adds	r7, #1
 800bc8a:	eca5 7b02 	vstmia	r5!, {d7}
 800bc8e:	e7df      	b.n	800bc50 <__kernel_rem_pio2+0x3a0>
 800bc90:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800bc94:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bc98:	f7f4 fcce 	bl	8000638 <__aeabi_dmul>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	460b      	mov	r3, r1
 800bca0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bca4:	f7f4 fb12 	bl	80002cc <__adddf3>
 800bca8:	f108 0801 	add.w	r8, r8, #1
 800bcac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bcb0:	e7e5      	b.n	800bc7e <__kernel_rem_pio2+0x3ce>
 800bcb2:	f1cb 0000 	rsb	r0, fp, #0
 800bcb6:	ec47 6b10 	vmov	d0, r6, r7
 800bcba:	f7ff fd3d 	bl	800b738 <scalbn>
 800bcbe:	ec55 4b10 	vmov	r4, r5, d0
 800bcc2:	4b9d      	ldr	r3, [pc, #628]	@ (800bf38 <__kernel_rem_pio2+0x688>)
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	4629      	mov	r1, r5
 800bcca:	f7f4 ff3b 	bl	8000b44 <__aeabi_dcmpge>
 800bcce:	b300      	cbz	r0, 800bd12 <__kernel_rem_pio2+0x462>
 800bcd0:	4b9a      	ldr	r3, [pc, #616]	@ (800bf3c <__kernel_rem_pio2+0x68c>)
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	4620      	mov	r0, r4
 800bcd6:	4629      	mov	r1, r5
 800bcd8:	f7f4 fcae 	bl	8000638 <__aeabi_dmul>
 800bcdc:	f7f4 ff5c 	bl	8000b98 <__aeabi_d2iz>
 800bce0:	4606      	mov	r6, r0
 800bce2:	f7f4 fc3f 	bl	8000564 <__aeabi_i2d>
 800bce6:	4b94      	ldr	r3, [pc, #592]	@ (800bf38 <__kernel_rem_pio2+0x688>)
 800bce8:	2200      	movs	r2, #0
 800bcea:	f7f4 fca5 	bl	8000638 <__aeabi_dmul>
 800bcee:	460b      	mov	r3, r1
 800bcf0:	4602      	mov	r2, r0
 800bcf2:	4629      	mov	r1, r5
 800bcf4:	4620      	mov	r0, r4
 800bcf6:	f7f4 fae7 	bl	80002c8 <__aeabi_dsub>
 800bcfa:	f7f4 ff4d 	bl	8000b98 <__aeabi_d2iz>
 800bcfe:	ab0c      	add	r3, sp, #48	@ 0x30
 800bd00:	f10b 0b18 	add.w	fp, fp, #24
 800bd04:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800bd08:	f108 0801 	add.w	r8, r8, #1
 800bd0c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800bd10:	e722      	b.n	800bb58 <__kernel_rem_pio2+0x2a8>
 800bd12:	4620      	mov	r0, r4
 800bd14:	4629      	mov	r1, r5
 800bd16:	f7f4 ff3f 	bl	8000b98 <__aeabi_d2iz>
 800bd1a:	ab0c      	add	r3, sp, #48	@ 0x30
 800bd1c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800bd20:	e71a      	b.n	800bb58 <__kernel_rem_pio2+0x2a8>
 800bd22:	ab0c      	add	r3, sp, #48	@ 0x30
 800bd24:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bd28:	f7f4 fc1c 	bl	8000564 <__aeabi_i2d>
 800bd2c:	4622      	mov	r2, r4
 800bd2e:	462b      	mov	r3, r5
 800bd30:	f7f4 fc82 	bl	8000638 <__aeabi_dmul>
 800bd34:	4652      	mov	r2, sl
 800bd36:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800bd3a:	465b      	mov	r3, fp
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	4629      	mov	r1, r5
 800bd40:	f7f4 fc7a 	bl	8000638 <__aeabi_dmul>
 800bd44:	3e01      	subs	r6, #1
 800bd46:	4604      	mov	r4, r0
 800bd48:	460d      	mov	r5, r1
 800bd4a:	e718      	b.n	800bb7e <__kernel_rem_pio2+0x2ce>
 800bd4c:	9906      	ldr	r1, [sp, #24]
 800bd4e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800bd52:	9106      	str	r1, [sp, #24]
 800bd54:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800bd58:	f7f4 fc6e 	bl	8000638 <__aeabi_dmul>
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	460b      	mov	r3, r1
 800bd60:	4650      	mov	r0, sl
 800bd62:	4659      	mov	r1, fp
 800bd64:	f7f4 fab2 	bl	80002cc <__adddf3>
 800bd68:	3601      	adds	r6, #1
 800bd6a:	4682      	mov	sl, r0
 800bd6c:	468b      	mov	fp, r1
 800bd6e:	9b00      	ldr	r3, [sp, #0]
 800bd70:	429e      	cmp	r6, r3
 800bd72:	dc01      	bgt.n	800bd78 <__kernel_rem_pio2+0x4c8>
 800bd74:	42b5      	cmp	r5, r6
 800bd76:	dae9      	bge.n	800bd4c <__kernel_rem_pio2+0x49c>
 800bd78:	ab48      	add	r3, sp, #288	@ 0x120
 800bd7a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800bd7e:	e9c5 ab00 	strd	sl, fp, [r5]
 800bd82:	3c01      	subs	r4, #1
 800bd84:	e6ff      	b.n	800bb86 <__kernel_rem_pio2+0x2d6>
 800bd86:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800bd88:	2b02      	cmp	r3, #2
 800bd8a:	dc0b      	bgt.n	800bda4 <__kernel_rem_pio2+0x4f4>
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	dc39      	bgt.n	800be04 <__kernel_rem_pio2+0x554>
 800bd90:	d05d      	beq.n	800be4e <__kernel_rem_pio2+0x59e>
 800bd92:	9b02      	ldr	r3, [sp, #8]
 800bd94:	f003 0007 	and.w	r0, r3, #7
 800bd98:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800bd9c:	ecbd 8b02 	vpop	{d8}
 800bda0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bda4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800bda6:	2b03      	cmp	r3, #3
 800bda8:	d1f3      	bne.n	800bd92 <__kernel_rem_pio2+0x4e2>
 800bdaa:	9b05      	ldr	r3, [sp, #20]
 800bdac:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bdb0:	eb0d 0403 	add.w	r4, sp, r3
 800bdb4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800bdb8:	4625      	mov	r5, r4
 800bdba:	46c2      	mov	sl, r8
 800bdbc:	f1ba 0f00 	cmp.w	sl, #0
 800bdc0:	f1a5 0508 	sub.w	r5, r5, #8
 800bdc4:	dc6b      	bgt.n	800be9e <__kernel_rem_pio2+0x5ee>
 800bdc6:	4645      	mov	r5, r8
 800bdc8:	2d01      	cmp	r5, #1
 800bdca:	f1a4 0408 	sub.w	r4, r4, #8
 800bdce:	f300 8087 	bgt.w	800bee0 <__kernel_rem_pio2+0x630>
 800bdd2:	9c05      	ldr	r4, [sp, #20]
 800bdd4:	ab48      	add	r3, sp, #288	@ 0x120
 800bdd6:	441c      	add	r4, r3
 800bdd8:	2000      	movs	r0, #0
 800bdda:	2100      	movs	r1, #0
 800bddc:	f1b8 0f01 	cmp.w	r8, #1
 800bde0:	f300 809c 	bgt.w	800bf1c <__kernel_rem_pio2+0x66c>
 800bde4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800bde8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800bdec:	f1b9 0f00 	cmp.w	r9, #0
 800bdf0:	f040 80a6 	bne.w	800bf40 <__kernel_rem_pio2+0x690>
 800bdf4:	9b04      	ldr	r3, [sp, #16]
 800bdf6:	e9c3 7800 	strd	r7, r8, [r3]
 800bdfa:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800bdfe:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800be02:	e7c6      	b.n	800bd92 <__kernel_rem_pio2+0x4e2>
 800be04:	9d05      	ldr	r5, [sp, #20]
 800be06:	ab48      	add	r3, sp, #288	@ 0x120
 800be08:	441d      	add	r5, r3
 800be0a:	4644      	mov	r4, r8
 800be0c:	2000      	movs	r0, #0
 800be0e:	2100      	movs	r1, #0
 800be10:	2c00      	cmp	r4, #0
 800be12:	da35      	bge.n	800be80 <__kernel_rem_pio2+0x5d0>
 800be14:	f1b9 0f00 	cmp.w	r9, #0
 800be18:	d038      	beq.n	800be8c <__kernel_rem_pio2+0x5dc>
 800be1a:	4602      	mov	r2, r0
 800be1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800be20:	9c04      	ldr	r4, [sp, #16]
 800be22:	e9c4 2300 	strd	r2, r3, [r4]
 800be26:	4602      	mov	r2, r0
 800be28:	460b      	mov	r3, r1
 800be2a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800be2e:	f7f4 fa4b 	bl	80002c8 <__aeabi_dsub>
 800be32:	ad4a      	add	r5, sp, #296	@ 0x128
 800be34:	2401      	movs	r4, #1
 800be36:	45a0      	cmp	r8, r4
 800be38:	da2b      	bge.n	800be92 <__kernel_rem_pio2+0x5e2>
 800be3a:	f1b9 0f00 	cmp.w	r9, #0
 800be3e:	d002      	beq.n	800be46 <__kernel_rem_pio2+0x596>
 800be40:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800be44:	4619      	mov	r1, r3
 800be46:	9b04      	ldr	r3, [sp, #16]
 800be48:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800be4c:	e7a1      	b.n	800bd92 <__kernel_rem_pio2+0x4e2>
 800be4e:	9c05      	ldr	r4, [sp, #20]
 800be50:	ab48      	add	r3, sp, #288	@ 0x120
 800be52:	441c      	add	r4, r3
 800be54:	2000      	movs	r0, #0
 800be56:	2100      	movs	r1, #0
 800be58:	f1b8 0f00 	cmp.w	r8, #0
 800be5c:	da09      	bge.n	800be72 <__kernel_rem_pio2+0x5c2>
 800be5e:	f1b9 0f00 	cmp.w	r9, #0
 800be62:	d002      	beq.n	800be6a <__kernel_rem_pio2+0x5ba>
 800be64:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800be68:	4619      	mov	r1, r3
 800be6a:	9b04      	ldr	r3, [sp, #16]
 800be6c:	e9c3 0100 	strd	r0, r1, [r3]
 800be70:	e78f      	b.n	800bd92 <__kernel_rem_pio2+0x4e2>
 800be72:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800be76:	f7f4 fa29 	bl	80002cc <__adddf3>
 800be7a:	f108 38ff 	add.w	r8, r8, #4294967295
 800be7e:	e7eb      	b.n	800be58 <__kernel_rem_pio2+0x5a8>
 800be80:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800be84:	f7f4 fa22 	bl	80002cc <__adddf3>
 800be88:	3c01      	subs	r4, #1
 800be8a:	e7c1      	b.n	800be10 <__kernel_rem_pio2+0x560>
 800be8c:	4602      	mov	r2, r0
 800be8e:	460b      	mov	r3, r1
 800be90:	e7c6      	b.n	800be20 <__kernel_rem_pio2+0x570>
 800be92:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800be96:	f7f4 fa19 	bl	80002cc <__adddf3>
 800be9a:	3401      	adds	r4, #1
 800be9c:	e7cb      	b.n	800be36 <__kernel_rem_pio2+0x586>
 800be9e:	ed95 7b00 	vldr	d7, [r5]
 800bea2:	ed8d 7b00 	vstr	d7, [sp]
 800bea6:	ed95 7b02 	vldr	d7, [r5, #8]
 800beaa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800beae:	ec53 2b17 	vmov	r2, r3, d7
 800beb2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800beb6:	f7f4 fa09 	bl	80002cc <__adddf3>
 800beba:	4602      	mov	r2, r0
 800bebc:	460b      	mov	r3, r1
 800bebe:	4606      	mov	r6, r0
 800bec0:	460f      	mov	r7, r1
 800bec2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bec6:	f7f4 f9ff 	bl	80002c8 <__aeabi_dsub>
 800beca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bece:	f7f4 f9fd 	bl	80002cc <__adddf3>
 800bed2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bed6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800beda:	e9c5 6700 	strd	r6, r7, [r5]
 800bede:	e76d      	b.n	800bdbc <__kernel_rem_pio2+0x50c>
 800bee0:	ed94 7b00 	vldr	d7, [r4]
 800bee4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800bee8:	ec51 0b17 	vmov	r0, r1, d7
 800beec:	4652      	mov	r2, sl
 800beee:	465b      	mov	r3, fp
 800bef0:	ed8d 7b00 	vstr	d7, [sp]
 800bef4:	f7f4 f9ea 	bl	80002cc <__adddf3>
 800bef8:	4602      	mov	r2, r0
 800befa:	460b      	mov	r3, r1
 800befc:	4606      	mov	r6, r0
 800befe:	460f      	mov	r7, r1
 800bf00:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf04:	f7f4 f9e0 	bl	80002c8 <__aeabi_dsub>
 800bf08:	4652      	mov	r2, sl
 800bf0a:	465b      	mov	r3, fp
 800bf0c:	f7f4 f9de 	bl	80002cc <__adddf3>
 800bf10:	3d01      	subs	r5, #1
 800bf12:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bf16:	e9c4 6700 	strd	r6, r7, [r4]
 800bf1a:	e755      	b.n	800bdc8 <__kernel_rem_pio2+0x518>
 800bf1c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bf20:	f7f4 f9d4 	bl	80002cc <__adddf3>
 800bf24:	f108 38ff 	add.w	r8, r8, #4294967295
 800bf28:	e758      	b.n	800bddc <__kernel_rem_pio2+0x52c>
 800bf2a:	bf00      	nop
 800bf2c:	f3af 8000 	nop.w
	...
 800bf38:	41700000 	.word	0x41700000
 800bf3c:	3e700000 	.word	0x3e700000
 800bf40:	9b04      	ldr	r3, [sp, #16]
 800bf42:	9a04      	ldr	r2, [sp, #16]
 800bf44:	601f      	str	r7, [r3, #0]
 800bf46:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800bf4a:	605c      	str	r4, [r3, #4]
 800bf4c:	609d      	str	r5, [r3, #8]
 800bf4e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bf52:	60d3      	str	r3, [r2, #12]
 800bf54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bf58:	6110      	str	r0, [r2, #16]
 800bf5a:	6153      	str	r3, [r2, #20]
 800bf5c:	e719      	b.n	800bd92 <__kernel_rem_pio2+0x4e2>
 800bf5e:	bf00      	nop

0800bf60 <floor>:
 800bf60:	ec51 0b10 	vmov	r0, r1, d0
 800bf64:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bf68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf6c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800bf70:	2e13      	cmp	r6, #19
 800bf72:	460c      	mov	r4, r1
 800bf74:	4605      	mov	r5, r0
 800bf76:	4680      	mov	r8, r0
 800bf78:	dc34      	bgt.n	800bfe4 <floor+0x84>
 800bf7a:	2e00      	cmp	r6, #0
 800bf7c:	da17      	bge.n	800bfae <floor+0x4e>
 800bf7e:	a332      	add	r3, pc, #200	@ (adr r3, 800c048 <floor+0xe8>)
 800bf80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf84:	f7f4 f9a2 	bl	80002cc <__adddf3>
 800bf88:	2200      	movs	r2, #0
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	f7f4 fde4 	bl	8000b58 <__aeabi_dcmpgt>
 800bf90:	b150      	cbz	r0, 800bfa8 <floor+0x48>
 800bf92:	2c00      	cmp	r4, #0
 800bf94:	da55      	bge.n	800c042 <floor+0xe2>
 800bf96:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800bf9a:	432c      	orrs	r4, r5
 800bf9c:	2500      	movs	r5, #0
 800bf9e:	42ac      	cmp	r4, r5
 800bfa0:	4c2b      	ldr	r4, [pc, #172]	@ (800c050 <floor+0xf0>)
 800bfa2:	bf08      	it	eq
 800bfa4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800bfa8:	4621      	mov	r1, r4
 800bfaa:	4628      	mov	r0, r5
 800bfac:	e023      	b.n	800bff6 <floor+0x96>
 800bfae:	4f29      	ldr	r7, [pc, #164]	@ (800c054 <floor+0xf4>)
 800bfb0:	4137      	asrs	r7, r6
 800bfb2:	ea01 0307 	and.w	r3, r1, r7
 800bfb6:	4303      	orrs	r3, r0
 800bfb8:	d01d      	beq.n	800bff6 <floor+0x96>
 800bfba:	a323      	add	r3, pc, #140	@ (adr r3, 800c048 <floor+0xe8>)
 800bfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc0:	f7f4 f984 	bl	80002cc <__adddf3>
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	f7f4 fdc6 	bl	8000b58 <__aeabi_dcmpgt>
 800bfcc:	2800      	cmp	r0, #0
 800bfce:	d0eb      	beq.n	800bfa8 <floor+0x48>
 800bfd0:	2c00      	cmp	r4, #0
 800bfd2:	bfbe      	ittt	lt
 800bfd4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800bfd8:	4133      	asrlt	r3, r6
 800bfda:	18e4      	addlt	r4, r4, r3
 800bfdc:	ea24 0407 	bic.w	r4, r4, r7
 800bfe0:	2500      	movs	r5, #0
 800bfe2:	e7e1      	b.n	800bfa8 <floor+0x48>
 800bfe4:	2e33      	cmp	r6, #51	@ 0x33
 800bfe6:	dd0a      	ble.n	800bffe <floor+0x9e>
 800bfe8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800bfec:	d103      	bne.n	800bff6 <floor+0x96>
 800bfee:	4602      	mov	r2, r0
 800bff0:	460b      	mov	r3, r1
 800bff2:	f7f4 f96b 	bl	80002cc <__adddf3>
 800bff6:	ec41 0b10 	vmov	d0, r0, r1
 800bffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bffe:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800c002:	f04f 37ff 	mov.w	r7, #4294967295
 800c006:	40df      	lsrs	r7, r3
 800c008:	4207      	tst	r7, r0
 800c00a:	d0f4      	beq.n	800bff6 <floor+0x96>
 800c00c:	a30e      	add	r3, pc, #56	@ (adr r3, 800c048 <floor+0xe8>)
 800c00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c012:	f7f4 f95b 	bl	80002cc <__adddf3>
 800c016:	2200      	movs	r2, #0
 800c018:	2300      	movs	r3, #0
 800c01a:	f7f4 fd9d 	bl	8000b58 <__aeabi_dcmpgt>
 800c01e:	2800      	cmp	r0, #0
 800c020:	d0c2      	beq.n	800bfa8 <floor+0x48>
 800c022:	2c00      	cmp	r4, #0
 800c024:	da0a      	bge.n	800c03c <floor+0xdc>
 800c026:	2e14      	cmp	r6, #20
 800c028:	d101      	bne.n	800c02e <floor+0xce>
 800c02a:	3401      	adds	r4, #1
 800c02c:	e006      	b.n	800c03c <floor+0xdc>
 800c02e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800c032:	2301      	movs	r3, #1
 800c034:	40b3      	lsls	r3, r6
 800c036:	441d      	add	r5, r3
 800c038:	4545      	cmp	r5, r8
 800c03a:	d3f6      	bcc.n	800c02a <floor+0xca>
 800c03c:	ea25 0507 	bic.w	r5, r5, r7
 800c040:	e7b2      	b.n	800bfa8 <floor+0x48>
 800c042:	2500      	movs	r5, #0
 800c044:	462c      	mov	r4, r5
 800c046:	e7af      	b.n	800bfa8 <floor+0x48>
 800c048:	8800759c 	.word	0x8800759c
 800c04c:	7e37e43c 	.word	0x7e37e43c
 800c050:	bff00000 	.word	0xbff00000
 800c054:	000fffff 	.word	0x000fffff

0800c058 <_init>:
 800c058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c05a:	bf00      	nop
 800c05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c05e:	bc08      	pop	{r3}
 800c060:	469e      	mov	lr, r3
 800c062:	4770      	bx	lr

0800c064 <_fini>:
 800c064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c066:	bf00      	nop
 800c068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c06a:	bc08      	pop	{r3}
 800c06c:	469e      	mov	lr, r3
 800c06e:	4770      	bx	lr
