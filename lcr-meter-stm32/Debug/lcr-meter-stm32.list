
lcr-meter-stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082e8  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  080084b0  080084b0  000094b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086d0  080086d0  0000a070  2**0
                  CONTENTS
  4 .ARM          00000008  080086d0  080086d0  000096d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086d8  080086d8  0000a070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086d8  080086d8  000096d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080086dc  080086dc  000096dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080086e0  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000076c  20000070  08008750  0000a070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007dc  08008750  0000a7dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000157e6  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dcc  00000000  00000000  0001f886  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  00022658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ec8  00000000  00000000  00023948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024cc0  00000000  00000000  00024810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000177a7  00000000  00000000  000494d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2c30  00000000  00000000  00060c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001438a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000597c  00000000  00000000  001438ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00149268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000070 	.word	0x20000070
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08008498 	.word	0x08008498

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000074 	.word	0x20000074
 8000204:	08008498 	.word	0x08008498

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b98a 	b.w	8000efc <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f826 	bl	8000c40 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__aeabi_f2ulz>:
 8000c00:	b5d0      	push	{r4, r6, r7, lr}
 8000c02:	f7ff fc65 	bl	80004d0 <__aeabi_f2d>
 8000c06:	4b0c      	ldr	r3, [pc, #48]	@ (8000c38 <__aeabi_f2ulz+0x38>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	4606      	mov	r6, r0
 8000c0c:	460f      	mov	r7, r1
 8000c0e:	f7ff fcb7 	bl	8000580 <__aeabi_dmul>
 8000c12:	f000 f975 	bl	8000f00 <__aeabi_d2uiz>
 8000c16:	4604      	mov	r4, r0
 8000c18:	f7ff fc38 	bl	800048c <__aeabi_ui2d>
 8000c1c:	4b07      	ldr	r3, [pc, #28]	@ (8000c3c <__aeabi_f2ulz+0x3c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f7ff fcae 	bl	8000580 <__aeabi_dmul>
 8000c24:	4602      	mov	r2, r0
 8000c26:	460b      	mov	r3, r1
 8000c28:	4630      	mov	r0, r6
 8000c2a:	4639      	mov	r1, r7
 8000c2c:	f7ff faf0 	bl	8000210 <__aeabi_dsub>
 8000c30:	f000 f966 	bl	8000f00 <__aeabi_d2uiz>
 8000c34:	4621      	mov	r1, r4
 8000c36:	bdd0      	pop	{r4, r6, r7, pc}
 8000c38:	3df00000 	.word	0x3df00000
 8000c3c:	41f00000 	.word	0x41f00000

08000c40 <__udivmoddi4>:
 8000c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c44:	9d08      	ldr	r5, [sp, #32]
 8000c46:	460c      	mov	r4, r1
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d14e      	bne.n	8000cea <__udivmoddi4+0xaa>
 8000c4c:	4694      	mov	ip, r2
 8000c4e:	458c      	cmp	ip, r1
 8000c50:	4686      	mov	lr, r0
 8000c52:	fab2 f282 	clz	r2, r2
 8000c56:	d962      	bls.n	8000d1e <__udivmoddi4+0xde>
 8000c58:	b14a      	cbz	r2, 8000c6e <__udivmoddi4+0x2e>
 8000c5a:	f1c2 0320 	rsb	r3, r2, #32
 8000c5e:	4091      	lsls	r1, r2
 8000c60:	fa20 f303 	lsr.w	r3, r0, r3
 8000c64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c68:	4319      	orrs	r1, r3
 8000c6a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c72:	fa1f f68c 	uxth.w	r6, ip
 8000c76:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c7e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c86:	fb04 f106 	mul.w	r1, r4, r6
 8000c8a:	4299      	cmp	r1, r3
 8000c8c:	d90a      	bls.n	8000ca4 <__udivmoddi4+0x64>
 8000c8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c92:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c96:	f080 8112 	bcs.w	8000ebe <__udivmoddi4+0x27e>
 8000c9a:	4299      	cmp	r1, r3
 8000c9c:	f240 810f 	bls.w	8000ebe <__udivmoddi4+0x27e>
 8000ca0:	3c02      	subs	r4, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1a59      	subs	r1, r3, r1
 8000ca6:	fa1f f38e 	uxth.w	r3, lr
 8000caa:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cae:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb6:	fb00 f606 	mul.w	r6, r0, r6
 8000cba:	429e      	cmp	r6, r3
 8000cbc:	d90a      	bls.n	8000cd4 <__udivmoddi4+0x94>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cc6:	f080 80fc 	bcs.w	8000ec2 <__udivmoddi4+0x282>
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	f240 80f9 	bls.w	8000ec2 <__udivmoddi4+0x282>
 8000cd0:	4463      	add	r3, ip
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	1b9b      	subs	r3, r3, r6
 8000cd6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cda:	2100      	movs	r1, #0
 8000cdc:	b11d      	cbz	r5, 8000ce6 <__udivmoddi4+0xa6>
 8000cde:	40d3      	lsrs	r3, r2
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d905      	bls.n	8000cfa <__udivmoddi4+0xba>
 8000cee:	b10d      	cbz	r5, 8000cf4 <__udivmoddi4+0xb4>
 8000cf0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4608      	mov	r0, r1
 8000cf8:	e7f5      	b.n	8000ce6 <__udivmoddi4+0xa6>
 8000cfa:	fab3 f183 	clz	r1, r3
 8000cfe:	2900      	cmp	r1, #0
 8000d00:	d146      	bne.n	8000d90 <__udivmoddi4+0x150>
 8000d02:	42a3      	cmp	r3, r4
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0xcc>
 8000d06:	4290      	cmp	r0, r2
 8000d08:	f0c0 80f0 	bcc.w	8000eec <__udivmoddi4+0x2ac>
 8000d0c:	1a86      	subs	r6, r0, r2
 8000d0e:	eb64 0303 	sbc.w	r3, r4, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	2d00      	cmp	r5, #0
 8000d16:	d0e6      	beq.n	8000ce6 <__udivmoddi4+0xa6>
 8000d18:	e9c5 6300 	strd	r6, r3, [r5]
 8000d1c:	e7e3      	b.n	8000ce6 <__udivmoddi4+0xa6>
 8000d1e:	2a00      	cmp	r2, #0
 8000d20:	f040 8090 	bne.w	8000e44 <__udivmoddi4+0x204>
 8000d24:	eba1 040c 	sub.w	r4, r1, ip
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	fa1f f78c 	uxth.w	r7, ip
 8000d30:	2101      	movs	r1, #1
 8000d32:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d3a:	fb08 4416 	mls	r4, r8, r6, r4
 8000d3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d42:	fb07 f006 	mul.w	r0, r7, r6
 8000d46:	4298      	cmp	r0, r3
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x11c>
 8000d4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x11a>
 8000d54:	4298      	cmp	r0, r3
 8000d56:	f200 80cd 	bhi.w	8000ef4 <__udivmoddi4+0x2b4>
 8000d5a:	4626      	mov	r6, r4
 8000d5c:	1a1c      	subs	r4, r3, r0
 8000d5e:	fa1f f38e 	uxth.w	r3, lr
 8000d62:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d66:	fb08 4410 	mls	r4, r8, r0, r4
 8000d6a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6e:	fb00 f707 	mul.w	r7, r0, r7
 8000d72:	429f      	cmp	r7, r3
 8000d74:	d908      	bls.n	8000d88 <__udivmoddi4+0x148>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d7e:	d202      	bcs.n	8000d86 <__udivmoddi4+0x146>
 8000d80:	429f      	cmp	r7, r3
 8000d82:	f200 80b0 	bhi.w	8000ee6 <__udivmoddi4+0x2a6>
 8000d86:	4620      	mov	r0, r4
 8000d88:	1bdb      	subs	r3, r3, r7
 8000d8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8e:	e7a5      	b.n	8000cdc <__udivmoddi4+0x9c>
 8000d90:	f1c1 0620 	rsb	r6, r1, #32
 8000d94:	408b      	lsls	r3, r1
 8000d96:	fa22 f706 	lsr.w	r7, r2, r6
 8000d9a:	431f      	orrs	r7, r3
 8000d9c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000da0:	fa04 f301 	lsl.w	r3, r4, r1
 8000da4:	ea43 030c 	orr.w	r3, r3, ip
 8000da8:	40f4      	lsrs	r4, r6
 8000daa:	fa00 f801 	lsl.w	r8, r0, r1
 8000dae:	0c38      	lsrs	r0, r7, #16
 8000db0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000db4:	fbb4 fef0 	udiv	lr, r4, r0
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	fb00 441e 	mls	r4, r0, lr, r4
 8000dc0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc4:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc8:	45a1      	cmp	r9, r4
 8000dca:	fa02 f201 	lsl.w	r2, r2, r1
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x1a6>
 8000dd0:	193c      	adds	r4, r7, r4
 8000dd2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dd6:	f080 8084 	bcs.w	8000ee2 <__udivmoddi4+0x2a2>
 8000dda:	45a1      	cmp	r9, r4
 8000ddc:	f240 8081 	bls.w	8000ee2 <__udivmoddi4+0x2a2>
 8000de0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	eba4 0409 	sub.w	r4, r4, r9
 8000dea:	fa1f f983 	uxth.w	r9, r3
 8000dee:	fbb4 f3f0 	udiv	r3, r4, r0
 8000df2:	fb00 4413 	mls	r4, r0, r3, r4
 8000df6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfa:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dfe:	45a4      	cmp	ip, r4
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x1d2>
 8000e02:	193c      	adds	r4, r7, r4
 8000e04:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e08:	d267      	bcs.n	8000eda <__udivmoddi4+0x29a>
 8000e0a:	45a4      	cmp	ip, r4
 8000e0c:	d965      	bls.n	8000eda <__udivmoddi4+0x29a>
 8000e0e:	3b02      	subs	r3, #2
 8000e10:	443c      	add	r4, r7
 8000e12:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e16:	fba0 9302 	umull	r9, r3, r0, r2
 8000e1a:	eba4 040c 	sub.w	r4, r4, ip
 8000e1e:	429c      	cmp	r4, r3
 8000e20:	46ce      	mov	lr, r9
 8000e22:	469c      	mov	ip, r3
 8000e24:	d351      	bcc.n	8000eca <__udivmoddi4+0x28a>
 8000e26:	d04e      	beq.n	8000ec6 <__udivmoddi4+0x286>
 8000e28:	b155      	cbz	r5, 8000e40 <__udivmoddi4+0x200>
 8000e2a:	ebb8 030e 	subs.w	r3, r8, lr
 8000e2e:	eb64 040c 	sbc.w	r4, r4, ip
 8000e32:	fa04 f606 	lsl.w	r6, r4, r6
 8000e36:	40cb      	lsrs	r3, r1
 8000e38:	431e      	orrs	r6, r3
 8000e3a:	40cc      	lsrs	r4, r1
 8000e3c:	e9c5 6400 	strd	r6, r4, [r5]
 8000e40:	2100      	movs	r1, #0
 8000e42:	e750      	b.n	8000ce6 <__udivmoddi4+0xa6>
 8000e44:	f1c2 0320 	rsb	r3, r2, #32
 8000e48:	fa20 f103 	lsr.w	r1, r0, r3
 8000e4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e50:	fa24 f303 	lsr.w	r3, r4, r3
 8000e54:	4094      	lsls	r4, r2
 8000e56:	430c      	orrs	r4, r1
 8000e58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e5c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e68:	fb08 3110 	mls	r1, r8, r0, r3
 8000e6c:	0c23      	lsrs	r3, r4, #16
 8000e6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e72:	fb00 f107 	mul.w	r1, r0, r7
 8000e76:	4299      	cmp	r1, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x24c>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e82:	d22c      	bcs.n	8000ede <__udivmoddi4+0x29e>
 8000e84:	4299      	cmp	r1, r3
 8000e86:	d92a      	bls.n	8000ede <__udivmoddi4+0x29e>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4463      	add	r3, ip
 8000e8c:	1a5b      	subs	r3, r3, r1
 8000e8e:	b2a4      	uxth	r4, r4
 8000e90:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e94:	fb08 3311 	mls	r3, r8, r1, r3
 8000e98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e9c:	fb01 f307 	mul.w	r3, r1, r7
 8000ea0:	42a3      	cmp	r3, r4
 8000ea2:	d908      	bls.n	8000eb6 <__udivmoddi4+0x276>
 8000ea4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000eac:	d213      	bcs.n	8000ed6 <__udivmoddi4+0x296>
 8000eae:	42a3      	cmp	r3, r4
 8000eb0:	d911      	bls.n	8000ed6 <__udivmoddi4+0x296>
 8000eb2:	3902      	subs	r1, #2
 8000eb4:	4464      	add	r4, ip
 8000eb6:	1ae4      	subs	r4, r4, r3
 8000eb8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ebc:	e739      	b.n	8000d32 <__udivmoddi4+0xf2>
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	e6f0      	b.n	8000ca4 <__udivmoddi4+0x64>
 8000ec2:	4608      	mov	r0, r1
 8000ec4:	e706      	b.n	8000cd4 <__udivmoddi4+0x94>
 8000ec6:	45c8      	cmp	r8, r9
 8000ec8:	d2ae      	bcs.n	8000e28 <__udivmoddi4+0x1e8>
 8000eca:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ece:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ed2:	3801      	subs	r0, #1
 8000ed4:	e7a8      	b.n	8000e28 <__udivmoddi4+0x1e8>
 8000ed6:	4631      	mov	r1, r6
 8000ed8:	e7ed      	b.n	8000eb6 <__udivmoddi4+0x276>
 8000eda:	4603      	mov	r3, r0
 8000edc:	e799      	b.n	8000e12 <__udivmoddi4+0x1d2>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e7d4      	b.n	8000e8c <__udivmoddi4+0x24c>
 8000ee2:	46d6      	mov	lr, sl
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1a6>
 8000ee6:	4463      	add	r3, ip
 8000ee8:	3802      	subs	r0, #2
 8000eea:	e74d      	b.n	8000d88 <__udivmoddi4+0x148>
 8000eec:	4606      	mov	r6, r0
 8000eee:	4623      	mov	r3, r4
 8000ef0:	4608      	mov	r0, r1
 8000ef2:	e70f      	b.n	8000d14 <__udivmoddi4+0xd4>
 8000ef4:	3e02      	subs	r6, #2
 8000ef6:	4463      	add	r3, ip
 8000ef8:	e730      	b.n	8000d5c <__udivmoddi4+0x11c>
 8000efa:	bf00      	nop

08000efc <__aeabi_idiv0>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <__aeabi_d2uiz>:
 8000f00:	004a      	lsls	r2, r1, #1
 8000f02:	d211      	bcs.n	8000f28 <__aeabi_d2uiz+0x28>
 8000f04:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000f08:	d211      	bcs.n	8000f2e <__aeabi_d2uiz+0x2e>
 8000f0a:	d50d      	bpl.n	8000f28 <__aeabi_d2uiz+0x28>
 8000f0c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000f10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f14:	d40e      	bmi.n	8000f34 <__aeabi_d2uiz+0x34>
 8000f16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f1a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f22:	fa23 f002 	lsr.w	r0, r3, r2
 8000f26:	4770      	bx	lr
 8000f28:	f04f 0000 	mov.w	r0, #0
 8000f2c:	4770      	bx	lr
 8000f2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f32:	d102      	bne.n	8000f3a <__aeabi_d2uiz+0x3a>
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295
 8000f38:	4770      	bx	lr
 8000f3a:	f04f 0000 	mov.w	r0, #0
 8000f3e:	4770      	bx	lr

08000f40 <AD9833_write>:

// MaKE SURE THIS IS DEFINED IN THE main.c FILE
extern SPI_HandleTypeDef hspi1; // SPI handle (Assuming SPI1 is used)


void AD9833_write(uint8_t data_high, uint8_t data_low) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	460a      	mov	r2, r1
 8000f4a:	71fb      	strb	r3, [r7, #7]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	71bb      	strb	r3, [r7, #6]
    uint8_t data_out[2] = {data_high, data_low};
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	733b      	strb	r3, [r7, #12]
 8000f54:	79bb      	ldrb	r3, [r7, #6]
 8000f56:	737b      	strb	r3, [r7, #13]
    

    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;  // CPOL = 1 (Clock idle high)
 8000f58:	4b10      	ldr	r3, [pc, #64]	@ (8000f9c <AD9833_write+0x5c>)
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;       // CPHA = 0 (Sample on the falling edge)
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f9c <AD9833_write+0x5c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	615a      	str	r2, [r3, #20]
    HAL_SPI_Init(&hspi1); // Restart the SPI module
 8000f64:	480d      	ldr	r0, [pc, #52]	@ (8000f9c <AD9833_write+0x5c>)
 8000f66:	f003 fc81 	bl	800486c <HAL_SPI_Init>

    HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f70:	480b      	ldr	r0, [pc, #44]	@ (8000fa0 <AD9833_write+0x60>)
 8000f72:	f002 f9e3 	bl	800333c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data_out, 2, HAL_MAX_DELAY);
 8000f76:	f107 010c 	add.w	r1, r7, #12
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7e:	2202      	movs	r2, #2
 8000f80:	4806      	ldr	r0, [pc, #24]	@ (8000f9c <AD9833_write+0x5c>)
 8000f82:	f003 fcfc 	bl	800497e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_SET);
 8000f86:	2201      	movs	r2, #1
 8000f88:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f8c:	4804      	ldr	r0, [pc, #16]	@ (8000fa0 <AD9833_write+0x60>)
 8000f8e:	f002 f9d5 	bl	800333c <HAL_GPIO_WritePin>
}
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200000d4 	.word	0x200000d4
 8000fa0:	40020c00 	.word	0x40020c00

08000fa4 <AD9833_write4>:

void AD9833_write4(uint8_t data_l_high, uint8_t data_l_low, uint8_t data_h_high, uint8_t data_h_low) {
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4604      	mov	r4, r0
 8000fac:	4608      	mov	r0, r1
 8000fae:	4611      	mov	r1, r2
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4623      	mov	r3, r4
 8000fb4:	71fb      	strb	r3, [r7, #7]
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71bb      	strb	r3, [r7, #6]
 8000fba:	460b      	mov	r3, r1
 8000fbc:	717b      	strb	r3, [r7, #5]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	713b      	strb	r3, [r7, #4]
    uint8_t data_out[4] = {data_l_high, data_l_low, data_h_high, data_h_low};
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79bb      	ldrb	r3, [r7, #6]
 8000fc8:	737b      	strb	r3, [r7, #13]
 8000fca:	797b      	ldrb	r3, [r7, #5]
 8000fcc:	73bb      	strb	r3, [r7, #14]
 8000fce:	793b      	ldrb	r3, [r7, #4]
 8000fd0:	73fb      	strb	r3, [r7, #15]

    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;  // CPOL = 1 (Clock idle high)
 8000fd2:	4b10      	ldr	r3, [pc, #64]	@ (8001014 <AD9833_write4+0x70>)
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;       // CPHA = 0 (Sample on the falling edge)
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001014 <AD9833_write4+0x70>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	615a      	str	r2, [r3, #20]
    HAL_SPI_Init(&hspi1); // Restart the SPI module
 8000fde:	480d      	ldr	r0, [pc, #52]	@ (8001014 <AD9833_write4+0x70>)
 8000fe0:	f003 fc44 	bl	800486c <HAL_SPI_Init>

    HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fea:	480b      	ldr	r0, [pc, #44]	@ (8001018 <AD9833_write4+0x74>)
 8000fec:	f002 f9a6 	bl	800333c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data_out, 4, HAL_MAX_DELAY);
 8000ff0:	f107 010c 	add.w	r1, r7, #12
 8000ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff8:	2204      	movs	r2, #4
 8000ffa:	4806      	ldr	r0, [pc, #24]	@ (8001014 <AD9833_write4+0x70>)
 8000ffc:	f003 fcbf 	bl	800497e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_SET);
 8001000:	2201      	movs	r2, #1
 8001002:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001006:	4804      	ldr	r0, [pc, #16]	@ (8001018 <AD9833_write4+0x74>)
 8001008:	f002 f998 	bl	800333c <HAL_GPIO_WritePin>
}
 800100c:	bf00      	nop
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	bd90      	pop	{r4, r7, pc}
 8001014:	200000d4 	.word	0x200000d4
 8001018:	40020c00 	.word	0x40020c00

0800101c <AD9833_set_freq>:

void AD9833_set_freq(float f) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	ed87 0a01 	vstr	s0, [r7, #4]
    AD9833_write(0b00100000, 0b10000000); // Control reg, start reset
 8001026:	2180      	movs	r1, #128	@ 0x80
 8001028:	2020      	movs	r0, #32
 800102a:	f7ff ff89 	bl	8000f40 <AD9833_write>

    uint64_t FRQREG = (uint64_t)((f * (1 << 28)) / MASTER_CLK);
 800102e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001032:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80010c8 <AD9833_set_freq+0xac>
 8001036:	ee67 7a87 	vmul.f32	s15, s15, s14
 800103a:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80010cc <AD9833_set_freq+0xb0>
 800103e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001042:	ee16 0a90 	vmov	r0, s13
 8001046:	f7ff fddb 	bl	8000c00 <__aeabi_f2ulz>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // Lower bytes
    uint16_t FL = FRQREG & 0x3FFF;
 8001052:	8a3b      	ldrh	r3, [r7, #16]
 8001054:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001058:	81fb      	strh	r3, [r7, #14]
    uint8_t Llb = FL & 0xFF;
 800105a:	89fb      	ldrh	r3, [r7, #14]
 800105c:	737b      	strb	r3, [r7, #13]
    uint8_t Lhb = ((FL >> 8) & 0x3F) | 0b01000000;
 800105e:	89fb      	ldrh	r3, [r7, #14]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	b29b      	uxth	r3, r3
 8001064:	b25b      	sxtb	r3, r3
 8001066:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800106a:	b25b      	sxtb	r3, r3
 800106c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001070:	b25b      	sxtb	r3, r3
 8001072:	733b      	strb	r3, [r7, #12]

    // Higher bytes
    uint16_t FH = (FRQREG >> 14) & 0x3FFF;
 8001074:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	f04f 0300 	mov.w	r3, #0
 8001080:	0b82      	lsrs	r2, r0, #14
 8001082:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8001086:	0b8b      	lsrs	r3, r1, #14
 8001088:	b293      	uxth	r3, r2
 800108a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800108e:	817b      	strh	r3, [r7, #10]
    uint8_t Hlb = FH & 0xFF;
 8001090:	897b      	ldrh	r3, [r7, #10]
 8001092:	727b      	strb	r3, [r7, #9]
    uint8_t Hhb = ((FH >> 8) & 0x3F) | 0b01000000;
 8001094:	897b      	ldrh	r3, [r7, #10]
 8001096:	0a1b      	lsrs	r3, r3, #8
 8001098:	b29b      	uxth	r3, r3
 800109a:	b25b      	sxtb	r3, r3
 800109c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80010a0:	b25b      	sxtb	r3, r3
 80010a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	723b      	strb	r3, [r7, #8]

    AD9833_write4(Lhb, Llb, Hhb, Hlb);
 80010aa:	7a7b      	ldrb	r3, [r7, #9]
 80010ac:	7a3a      	ldrb	r2, [r7, #8]
 80010ae:	7b79      	ldrb	r1, [r7, #13]
 80010b0:	7b38      	ldrb	r0, [r7, #12]
 80010b2:	f7ff ff77 	bl	8000fa4 <AD9833_write4>

    AD9833_write(0b00100000, 0b00000000); // Control reg, finish reset and configure IC
 80010b6:	2100      	movs	r1, #0
 80010b8:	2020      	movs	r0, #32
 80010ba:	f7ff ff41 	bl	8000f40 <AD9833_write>
}
 80010be:	bf00      	nop
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	4d800000 	.word	0x4d800000
 80010cc:	4bbebc20 	.word	0x4bbebc20

080010d0 <ADC_Channel0>:

// MaKE SURE THIS IS DEFINED IN THE main.c FILE
extern SPI_HandleTypeDef hspi1; // SPI handle (Assuming SPI1 is used)

// Function to read from ADC Channel 0 (CH0)
float ADC_Channel0(void) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af02      	add	r7, sp, #8
    uint8_t data_out[2] = { MCP3202_CH0, 0x00 };
 80010d6:	23d0      	movs	r3, #208	@ 0xd0
 80010d8:	80bb      	strh	r3, [r7, #4]
    uint8_t data_in[2] = { 0x00, 0x00 };
 80010da:	2300      	movs	r3, #0
 80010dc:	803b      	strh	r3, [r7, #0]


    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;   // CPOL = 0 (Clock idle Low)
 80010de:	4b20      	ldr	r3, [pc, #128]	@ (8001160 <ADC_Channel0+0x90>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;       // CPHA = 0 (Sample on the falling edge)
 80010e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001160 <ADC_Channel0+0x90>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	615a      	str	r2, [r3, #20]
    HAL_SPI_Init(&hspi1); // Restart the SPI module
 80010ea:	481d      	ldr	r0, [pc, #116]	@ (8001160 <ADC_Channel0+0x90>)
 80010ec:	f003 fbbe 	bl	800486c <HAL_SPI_Init>

    // Transmit and receive data via SPI
    HAL_GPIO_WritePin(MCP3202_NCS_GPIO_Port, MCP3202_NCS_Pin, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010f6:	481b      	ldr	r0, [pc, #108]	@ (8001164 <ADC_Channel0+0x94>)
 80010f8:	f002 f920 	bl	800333c <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, data_out, data_in, 2, HAL_MAX_DELAY);
 80010fc:	463a      	mov	r2, r7
 80010fe:	1d39      	adds	r1, r7, #4
 8001100:	f04f 33ff 	mov.w	r3, #4294967295
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	2302      	movs	r3, #2
 8001108:	4815      	ldr	r0, [pc, #84]	@ (8001160 <ADC_Channel0+0x90>)
 800110a:	f003 fd7c 	bl	8004c06 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(MCP3202_NCS_GPIO_Port, MCP3202_NCS_Pin, GPIO_PIN_SET);
 800110e:	2201      	movs	r2, #1
 8001110:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001114:	4813      	ldr	r0, [pc, #76]	@ (8001164 <ADC_Channel0+0x94>)
 8001116:	f002 f911 	bl	800333c <HAL_GPIO_WritePin>

    // Combine the received bytes to form the 12-bit ADC value
    uint16_t adc_value = ((data_in[0] & 0x0F) << 8) | data_in[1];
 800111a:	783b      	ldrb	r3, [r7, #0]
 800111c:	021b      	lsls	r3, r3, #8
 800111e:	b21b      	sxth	r3, r3
 8001120:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001124:	b21a      	sxth	r2, r3
 8001126:	787b      	ldrb	r3, [r7, #1]
 8001128:	b21b      	sxth	r3, r3
 800112a:	4313      	orrs	r3, r2
 800112c:	b21b      	sxth	r3, r3
 800112e:	81fb      	strh	r3, [r7, #14]

    // Calculate the voltage based on the 3.3V reference and 12-bit ADC resolution
    float voltage = 3.3f * adc_value / (float)(1 << 11); // 12-bit resolution (2^12)
 8001130:	89fb      	ldrh	r3, [r7, #14]
 8001132:	ee07 3a90 	vmov	s15, r3
 8001136:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800113a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001168 <ADC_Channel0+0x98>
 800113e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001142:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800116c <ADC_Channel0+0x9c>
 8001146:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800114a:	edc7 7a02 	vstr	s15, [r7, #8]

    return voltage;
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	ee07 3a90 	vmov	s15, r3
}
 8001154:	eeb0 0a67 	vmov.f32	s0, s15
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200000d4 	.word	0x200000d4
 8001164:	40020c00 	.word	0x40020c00
 8001168:	40533333 	.word	0x40533333
 800116c:	45000000 	.word	0x45000000

08001170 <ADC_Channel1>:

// Function to read from ADC Channel 1 (CH1)
float ADC_Channel1(void) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af02      	add	r7, sp, #8
    uint8_t data_out[2] = { MCP3202_CH1, 0x00 };
 8001176:	23f0      	movs	r3, #240	@ 0xf0
 8001178:	80bb      	strh	r3, [r7, #4]
    uint8_t data_in[2] = { 0x00, 0x00 };
 800117a:	2300      	movs	r3, #0
 800117c:	803b      	strh	r3, [r7, #0]


    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;   // CPOL = 0 (Clock idle Low)
 800117e:	4b20      	ldr	r3, [pc, #128]	@ (8001200 <ADC_Channel1+0x90>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;       // CPHA = 0 (Sample on the falling edge)
 8001184:	4b1e      	ldr	r3, [pc, #120]	@ (8001200 <ADC_Channel1+0x90>)
 8001186:	2200      	movs	r2, #0
 8001188:	615a      	str	r2, [r3, #20]
    HAL_SPI_Init(&hspi1); // Restart the SPI module
 800118a:	481d      	ldr	r0, [pc, #116]	@ (8001200 <ADC_Channel1+0x90>)
 800118c:	f003 fb6e 	bl	800486c <HAL_SPI_Init>

    // Transmit and receive data via SPI
    HAL_GPIO_WritePin(MCP3202_NCS_GPIO_Port, MCP3202_NCS_Pin, GPIO_PIN_RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001196:	481b      	ldr	r0, [pc, #108]	@ (8001204 <ADC_Channel1+0x94>)
 8001198:	f002 f8d0 	bl	800333c <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, data_out, data_in, 2, HAL_MAX_DELAY);
 800119c:	463a      	mov	r2, r7
 800119e:	1d39      	adds	r1, r7, #4
 80011a0:	f04f 33ff 	mov.w	r3, #4294967295
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	2302      	movs	r3, #2
 80011a8:	4815      	ldr	r0, [pc, #84]	@ (8001200 <ADC_Channel1+0x90>)
 80011aa:	f003 fd2c 	bl	8004c06 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(MCP3202_NCS_GPIO_Port, MCP3202_NCS_Pin, GPIO_PIN_SET);
 80011ae:	2201      	movs	r2, #1
 80011b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011b4:	4813      	ldr	r0, [pc, #76]	@ (8001204 <ADC_Channel1+0x94>)
 80011b6:	f002 f8c1 	bl	800333c <HAL_GPIO_WritePin>

    // Combine the received bytes to form the 12-bit ADC value
    uint16_t adc_value = ((data_in[0] & 0x0F) << 8) | data_in[1];
 80011ba:	783b      	ldrb	r3, [r7, #0]
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	b21b      	sxth	r3, r3
 80011c0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80011c4:	b21a      	sxth	r2, r3
 80011c6:	787b      	ldrb	r3, [r7, #1]
 80011c8:	b21b      	sxth	r3, r3
 80011ca:	4313      	orrs	r3, r2
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	81fb      	strh	r3, [r7, #14]

    // Calculate the voltage based on the 3.3V reference and 12-bit ADC resolution
    float voltage = 3.3f * adc_value / (float)(1 << 11); // 12-bit resolution (2^12)
 80011d0:	89fb      	ldrh	r3, [r7, #14]
 80011d2:	ee07 3a90 	vmov	s15, r3
 80011d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011da:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001208 <ADC_Channel1+0x98>
 80011de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011e2:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800120c <ADC_Channel1+0x9c>
 80011e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ea:	edc7 7a02 	vstr	s15, [r7, #8]

    return voltage;
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	ee07 3a90 	vmov	s15, r3
}
 80011f4:	eeb0 0a67 	vmov.f32	s0, s15
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200000d4 	.word	0x200000d4
 8001204:	40020c00 	.word	0x40020c00
 8001208:	40533333 	.word	0x40533333
 800120c:	45000000 	.word	0x45000000

08001210 <Get_Time_us.0>:


  __HAL_TIM_SET_COUNTER(&htim2, 0);
  HAL_TIM_Base_Start(&htim2);

  uint32_t Get_Time_us(void) {
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	f8c7 c004 	str.w	ip, [r7, #4]
	    return __HAL_TIM_GET_COUNTER(&htim2); // Read timer
 800121a:	4b04      	ldr	r3, [pc, #16]	@ (800122c <Get_Time_us.0+0x1c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  }
 8001220:	4618      	mov	r0, r3
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	2000012c 	.word	0x2000012c

08001230 <main>:
{
 8001230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001234:	b0ac      	sub	sp, #176	@ 0xb0
 8001236:	af02      	add	r7, sp, #8
int main(void)
 8001238:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 800123c:	643b      	str	r3, [r7, #64]	@ 0x40
  HAL_Init();
 800123e:	f001 facf 	bl	80027e0 <HAL_Init>
  SystemClock_Config();
 8001242:	f000 facf 	bl	80017e4 <SystemClock_Config>
  MX_GPIO_Init();
 8001246:	f000 fc65 	bl	8001b14 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800124a:	f000 fc0b 	bl	8001a64 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800124e:	f000 fc33 	bl	8001ab8 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8001252:	f000 fb33 	bl	80018bc <MX_ADC1_Init>
  MX_SPI1_Init();
 8001256:	f000 fb83 	bl	8001960 <MX_SPI1_Init>
  MX_TIM2_Init();
 800125a:	f000 fbb7 	bl	80019cc <MX_TIM2_Init>
  float frequency = 5000;
 800125e:	4b8c      	ldr	r3, [pc, #560]	@ (8001490 <main+0x260>)
 8001260:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  AD9833_set_freq(frequency);
 8001264:	ed97 0a24 	vldr	s0, [r7, #144]	@ 0x90
 8001268:	f7ff fed8 	bl	800101c <AD9833_set_freq>
  AD9833_set_freq(frequency); // This fixes things sometimes?
 800126c:	ed97 0a24 	vldr	s0, [r7, #144]	@ 0x90
 8001270:	f7ff fed4 	bl	800101c <AD9833_set_freq>
  int n_points = 1000;
 8001274:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001278:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  int sample_delay = 1;
 800127c:	2301      	movs	r3, #1
 800127e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  int i = 0; // Array index counter
 8001282:	2300      	movs	r3, #0
 8001284:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  float ch0_data[n_points];
 8001288:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800128c:	1e4b      	subs	r3, r1, #1
 800128e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001292:	460a      	mov	r2, r1
 8001294:	2300      	movs	r3, #0
 8001296:	4614      	mov	r4, r2
 8001298:	461d      	mov	r5, r3
 800129a:	f04f 0200 	mov.w	r2, #0
 800129e:	f04f 0300 	mov.w	r3, #0
 80012a2:	016b      	lsls	r3, r5, #5
 80012a4:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80012a8:	0162      	lsls	r2, r4, #5
 80012aa:	460a      	mov	r2, r1
 80012ac:	2300      	movs	r3, #0
 80012ae:	4690      	mov	r8, r2
 80012b0:	4699      	mov	r9, r3
 80012b2:	f04f 0200 	mov.w	r2, #0
 80012b6:	f04f 0300 	mov.w	r3, #0
 80012ba:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80012be:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80012c2:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80012c6:	460b      	mov	r3, r1
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	3307      	adds	r3, #7
 80012cc:	08db      	lsrs	r3, r3, #3
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	ebad 0d03 	sub.w	sp, sp, r3
 80012d4:	ab02      	add	r3, sp, #8
 80012d6:	3303      	adds	r3, #3
 80012d8:	089b      	lsrs	r3, r3, #2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  float ch0_time[n_points];
 80012de:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80012e2:	1e4b      	subs	r3, r1, #1
 80012e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80012e6:	460a      	mov	r2, r1
 80012e8:	2300      	movs	r3, #0
 80012ea:	4692      	mov	sl, r2
 80012ec:	469b      	mov	fp, r3
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	f04f 0300 	mov.w	r3, #0
 80012f6:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80012fa:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 80012fe:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8001302:	460a      	mov	r2, r1
 8001304:	2300      	movs	r3, #0
 8001306:	623a      	str	r2, [r7, #32]
 8001308:	627b      	str	r3, [r7, #36]	@ 0x24
 800130a:	f04f 0200 	mov.w	r2, #0
 800130e:	f04f 0300 	mov.w	r3, #0
 8001312:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001316:	4628      	mov	r0, r5
 8001318:	0143      	lsls	r3, r0, #5
 800131a:	4620      	mov	r0, r4
 800131c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001320:	4620      	mov	r0, r4
 8001322:	0142      	lsls	r2, r0, #5
 8001324:	460b      	mov	r3, r1
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	3307      	adds	r3, #7
 800132a:	08db      	lsrs	r3, r3, #3
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	ebad 0d03 	sub.w	sp, sp, r3
 8001332:	ab02      	add	r3, sp, #8
 8001334:	3303      	adds	r3, #3
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	677b      	str	r3, [r7, #116]	@ 0x74
  memset(ch0_data, 0, n_points);  // Set all bytes in the array to 0
 800133c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001340:	461a      	mov	r2, r3
 8001342:	2100      	movs	r1, #0
 8001344:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8001346:	f005 f918 	bl	800657a <memset>
  memset(ch0_time, 0, n_points);  // Set all bytes in the array to 0
 800134a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800134e:	461a      	mov	r2, r3
 8001350:	2100      	movs	r1, #0
 8001352:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001354:	f005 f911 	bl	800657a <memset>
  float ch1_data[n_points];
 8001358:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800135c:	1e4b      	subs	r3, r1, #1
 800135e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001360:	460a      	mov	r2, r1
 8001362:	2300      	movs	r3, #0
 8001364:	61ba      	str	r2, [r7, #24]
 8001366:	61fb      	str	r3, [r7, #28]
 8001368:	f04f 0200 	mov.w	r2, #0
 800136c:	f04f 0300 	mov.w	r3, #0
 8001370:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001374:	4628      	mov	r0, r5
 8001376:	0143      	lsls	r3, r0, #5
 8001378:	4620      	mov	r0, r4
 800137a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800137e:	4620      	mov	r0, r4
 8001380:	0142      	lsls	r2, r0, #5
 8001382:	460a      	mov	r2, r1
 8001384:	2300      	movs	r3, #0
 8001386:	613a      	str	r2, [r7, #16]
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	f04f 0300 	mov.w	r3, #0
 8001392:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001396:	4628      	mov	r0, r5
 8001398:	0143      	lsls	r3, r0, #5
 800139a:	4620      	mov	r0, r4
 800139c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80013a0:	4620      	mov	r0, r4
 80013a2:	0142      	lsls	r2, r0, #5
 80013a4:	460b      	mov	r3, r1
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	3307      	adds	r3, #7
 80013aa:	08db      	lsrs	r3, r3, #3
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	ebad 0d03 	sub.w	sp, sp, r3
 80013b2:	ab02      	add	r3, sp, #8
 80013b4:	3303      	adds	r3, #3
 80013b6:	089b      	lsrs	r3, r3, #2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
  float ch1_time[n_points];
 80013bc:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80013c0:	1e4b      	subs	r3, r1, #1
 80013c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80013c4:	460a      	mov	r2, r1
 80013c6:	2300      	movs	r3, #0
 80013c8:	60ba      	str	r2, [r7, #8]
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	f04f 0200 	mov.w	r2, #0
 80013d0:	f04f 0300 	mov.w	r3, #0
 80013d4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80013d8:	4628      	mov	r0, r5
 80013da:	0143      	lsls	r3, r0, #5
 80013dc:	4620      	mov	r0, r4
 80013de:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80013e2:	4620      	mov	r0, r4
 80013e4:	0142      	lsls	r2, r0, #5
 80013e6:	460a      	mov	r2, r1
 80013e8:	2300      	movs	r3, #0
 80013ea:	603a      	str	r2, [r7, #0]
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	f04f 0300 	mov.w	r3, #0
 80013f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80013fa:	4628      	mov	r0, r5
 80013fc:	0143      	lsls	r3, r0, #5
 80013fe:	4620      	mov	r0, r4
 8001400:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001404:	4620      	mov	r0, r4
 8001406:	0142      	lsls	r2, r0, #5
 8001408:	460b      	mov	r3, r1
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	3307      	adds	r3, #7
 800140e:	08db      	lsrs	r3, r3, #3
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	ebad 0d03 	sub.w	sp, sp, r3
 8001416:	ab02      	add	r3, sp, #8
 8001418:	3303      	adds	r3, #3
 800141a:	089b      	lsrs	r3, r3, #2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	667b      	str	r3, [r7, #100]	@ 0x64
  memset(ch1_time, 0, n_points);  // Set all bytes in the array to 0
 8001420:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001424:	461a      	mov	r2, r3
 8001426:	2100      	movs	r1, #0
 8001428:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800142a:	f005 f8a6 	bl	800657a <memset>
  memset(ch1_data, 0, n_points);  // Set all bytes in the array to 0
 800142e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001432:	461a      	mov	r2, r3
 8001434:	2100      	movs	r1, #0
 8001436:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001438:	f005 f89f 	bl	800657a <memset>
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 800143c:	4b15      	ldr	r3, [pc, #84]	@ (8001494 <main+0x264>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2200      	movs	r2, #0
 8001442:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start(&htim2);
 8001444:	4813      	ldr	r0, [pc, #76]	@ (8001494 <main+0x264>)
 8001446:	f003 feb3 	bl	80051b0 <HAL_TIM_Base_Start>

  start_time = Get_Time_us();
 800144a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800144e:	469c      	mov	ip, r3
 8001450:	f7ff fede 	bl	8001210 <Get_Time_us.0>
 8001454:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4

  void wait_us(uint32_t w) {
	  uint32_t s = Get_Time_us();
  }

  float load_amplitude = 0;
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float load_phase = 0;
 800145e:	f04f 0300 	mov.w	r3, #0
 8001462:	63bb      	str	r3, [r7, #56]	@ 0x38
  float load_offset = 0;
 8001464:	f04f 0300 	mov.w	r3, #0
 8001468:	637b      	str	r3, [r7, #52]	@ 0x34

  float shunt_amplitude = 0;
 800146a:	f04f 0300 	mov.w	r3, #0
 800146e:	633b      	str	r3, [r7, #48]	@ 0x30
  float shunt_phase = 0;
 8001470:	f04f 0300 	mov.w	r3, #0
 8001474:	62fb      	str	r3, [r7, #44]	@ 0x2c
  float shunt_offset = 0;
 8001476:	f04f 0300 	mov.w	r3, #0
 800147a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  float avg = 0;
 800147c:	f04f 0300 	mov.w	r3, #0
 8001480:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	  int cycles = 100;
 8001484:	2364      	movs	r3, #100	@ 0x64
 8001486:	663b      	str	r3, [r7, #96]	@ 0x60
	  for (int i = 0; i < cycles; i++) {
 8001488:	2300      	movs	r3, #0
 800148a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800148e:	e182      	b.n	8001796 <main+0x566>
 8001490:	459c4000 	.word	0x459c4000
 8001494:	2000012c 	.word	0x2000012c
		  int samples = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		  uint32_t s = Get_Time_us();
 800149e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014a2:	469c      	mov	ip, r3
 80014a4:	f7ff feb4 	bl	8001210 <Get_Time_us.0>
 80014a8:	65f8      	str	r0, [r7, #92]	@ 0x5c
		  do { // Ensures that sample time is no longer than one period of a sine wave
			  //	  HAL_Delay(sample_delay);
			  ch0_data[samples] = ADC_Channel0();
 80014aa:	f7ff fe11 	bl	80010d0 <ADC_Channel0>
 80014ae:	eef0 7a40 	vmov.f32	s15, s0
 80014b2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80014b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	edc3 7a00 	vstr	s15, [r3]
			  ch0_time[samples] = ((double)(Get_Time_us() - start_time)) / 1e6;
 80014c0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014c4:	469c      	mov	ip, r3
 80014c6:	f7ff fea3 	bl	8001210 <Get_Time_us.0>
 80014ca:	4602      	mov	r2, r0
 80014cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7fe ffda 	bl	800048c <__aeabi_ui2d>
 80014d8:	a3c0      	add	r3, pc, #768	@ (adr r3, 80017dc <main+0x5ac>)
 80014da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014de:	f7ff f979 	bl	80007d4 <__aeabi_ddiv>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	f7ff fb21 	bl	8000b30 <__aeabi_d2f>
 80014ee:	4601      	mov	r1, r0
 80014f0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80014f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	6019      	str	r1, [r3, #0]
		//	  HAL_Delay(sample_delay);
			  ch1_data[samples] = ADC_Channel1();
 80014fc:	f7ff fe38 	bl	8001170 <ADC_Channel1>
 8001500:	eef0 7a40 	vmov.f32	s15, s0
 8001504:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001506:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	edc3 7a00 	vstr	s15, [r3]
			  ch1_time[samples] = ((double)(Get_Time_us() - start_time)) / 1e6;
 8001512:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001516:	469c      	mov	ip, r3
 8001518:	f7ff fe7a 	bl	8001210 <Get_Time_us.0>
 800151c:	4602      	mov	r2, r0
 800151e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	4618      	mov	r0, r3
 8001526:	f7fe ffb1 	bl	800048c <__aeabi_ui2d>
 800152a:	a3ac      	add	r3, pc, #688	@ (adr r3, 80017dc <main+0x5ac>)
 800152c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001530:	f7ff f950 	bl	80007d4 <__aeabi_ddiv>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f7ff faf8 	bl	8000b30 <__aeabi_d2f>
 8001540:	4601      	mov	r1, r0
 8001542:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001544:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	6019      	str	r1, [r3, #0]

			  samples++;
 800154e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001552:	3301      	adds	r3, #1
 8001554:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		  } while((float)(Get_Time_us() - s) < 1 * 1e6 / frequency);
 8001558:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800155c:	469c      	mov	ip, r3
 800155e:	f7ff fe57 	bl	8001210 <Get_Time_us.0>
 8001562:	4602      	mov	r2, r0
 8001564:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	ee07 3a90 	vmov	s15, r3
 800156c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001570:	ee17 0a90 	vmov	r0, s15
 8001574:	f7fe ffac 	bl	80004d0 <__aeabi_f2d>
 8001578:	4604      	mov	r4, r0
 800157a:	460d      	mov	r5, r1
 800157c:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8001580:	f7fe ffa6 	bl	80004d0 <__aeabi_f2d>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	a194      	add	r1, pc, #592	@ (adr r1, 80017dc <main+0x5ac>)
 800158a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800158e:	f7ff f921 	bl	80007d4 <__aeabi_ddiv>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	4620      	mov	r0, r4
 8001598:	4629      	mov	r1, r5
 800159a:	f7ff fa63 	bl	8000a64 <__aeabi_dcmplt>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d182      	bne.n	80014aa <main+0x27a>

		  fitSineWave(ch0_data, ch0_time, samples, frequency, &load_amplitude, &load_phase, &load_offset);
 80015a4:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80015a8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80015ac:	9301      	str	r3, [sp, #4]
 80015ae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	4613      	mov	r3, r2
 80015b6:	ed97 0a24 	vldr	s0, [r7, #144]	@ 0x90
 80015ba:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80015be:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80015c0:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80015c2:	f000 fcbd 	bl	8001f40 <fitSineWave>
		  fitSineWave(ch1_data, ch1_time, samples, frequency, &shunt_amplitude, &shunt_phase, &shunt_offset);
 80015c6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80015ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015ce:	9301      	str	r3, [sp, #4]
 80015d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	4613      	mov	r3, r2
 80015d8:	ed97 0a24 	vldr	s0, [r7, #144]	@ 0x90
 80015dc:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80015e0:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80015e2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80015e4:	f000 fcac 	bl	8001f40 <fitSineWave>

		  float shunt_resistance = 994.5;
 80015e8:	4b79      	ldr	r3, [pc, #484]	@ (80017d0 <main+0x5a0>)
 80015ea:	65bb      	str	r3, [r7, #88]	@ 0x58
		  float impedance_magnitude = (load_amplitude / (shunt_amplitude / shunt_resistance));
 80015ec:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 80015f0:	ed97 6a0c 	vldr	s12, [r7, #48]	@ 0x30
 80015f4:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80015f8:	ee86 7a27 	vdiv.f32	s14, s12, s15
 80015fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001600:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		  float impedance_angle = (load_phase - shunt_phase);
 8001604:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001608:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800160c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001610:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
		  if (impedance_angle > M_PI) {
 8001614:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8001618:	f7fe ff5a 	bl	80004d0 <__aeabi_f2d>
 800161c:	a368      	add	r3, pc, #416	@ (adr r3, 80017c0 <main+0x590>)
 800161e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001622:	f7ff fa3d 	bl	8000aa0 <__aeabi_dcmpgt>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d011      	beq.n	8001650 <main+0x420>
			  impedance_angle -= 2 * M_PI;
 800162c:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8001630:	f7fe ff4e 	bl	80004d0 <__aeabi_f2d>
 8001634:	a364      	add	r3, pc, #400	@ (adr r3, 80017c8 <main+0x598>)
 8001636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163a:	f7fe fde9 	bl	8000210 <__aeabi_dsub>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4610      	mov	r0, r2
 8001644:	4619      	mov	r1, r3
 8001646:	f7ff fa73 	bl	8000b30 <__aeabi_d2f>
 800164a:	4603      	mov	r3, r0
 800164c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		  }
		  float resistance = impedance_magnitude * cos(impedance_angle) - shunt_resistance;
 8001650:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001652:	f7fe ff3d 	bl	80004d0 <__aeabi_f2d>
 8001656:	4604      	mov	r4, r0
 8001658:	460d      	mov	r5, r1
 800165a:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800165e:	f7fe ff37 	bl	80004d0 <__aeabi_f2d>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	ec43 2b10 	vmov	d0, r2, r3
 800166a:	f005 f829 	bl	80066c0 <cos>
 800166e:	ec53 2b10 	vmov	r2, r3, d0
 8001672:	4620      	mov	r0, r4
 8001674:	4629      	mov	r1, r5
 8001676:	f7fe ff83 	bl	8000580 <__aeabi_dmul>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4614      	mov	r4, r2
 8001680:	461d      	mov	r5, r3
 8001682:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001684:	f7fe ff24 	bl	80004d0 <__aeabi_f2d>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4620      	mov	r0, r4
 800168e:	4629      	mov	r1, r5
 8001690:	f7fe fdbe 	bl	8000210 <__aeabi_dsub>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	f7ff fa48 	bl	8000b30 <__aeabi_d2f>
 80016a0:	4603      	mov	r3, r0
 80016a2:	653b      	str	r3, [r7, #80]	@ 0x50
		  float reactance = impedance_magnitude * sin(impedance_angle);
 80016a4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80016a6:	f7fe ff13 	bl	80004d0 <__aeabi_f2d>
 80016aa:	4604      	mov	r4, r0
 80016ac:	460d      	mov	r5, r1
 80016ae:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80016b2:	f7fe ff0d 	bl	80004d0 <__aeabi_f2d>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	ec43 2b10 	vmov	d0, r2, r3
 80016be:	f005 f85b 	bl	8006778 <sin>
 80016c2:	ec53 2b10 	vmov	r2, r3, d0
 80016c6:	4620      	mov	r0, r4
 80016c8:	4629      	mov	r1, r5
 80016ca:	f7fe ff59 	bl	8000580 <__aeabi_dmul>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	f7ff fa2b 	bl	8000b30 <__aeabi_d2f>
 80016da:	4603      	mov	r3, r0
 80016dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
		  float inductance = reactance / (2 * M_PI * frequency);
 80016de:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80016e0:	f7fe fef6 	bl	80004d0 <__aeabi_f2d>
 80016e4:	4604      	mov	r4, r0
 80016e6:	460d      	mov	r5, r1
 80016e8:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80016ec:	f7fe fef0 	bl	80004d0 <__aeabi_f2d>
 80016f0:	a335      	add	r3, pc, #212	@ (adr r3, 80017c8 <main+0x598>)
 80016f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f6:	f7fe ff43 	bl	8000580 <__aeabi_dmul>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4620      	mov	r0, r4
 8001700:	4629      	mov	r1, r5
 8001702:	f7ff f867 	bl	80007d4 <__aeabi_ddiv>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4610      	mov	r0, r2
 800170c:	4619      	mov	r1, r3
 800170e:	f7ff fa0f 	bl	8000b30 <__aeabi_d2f>
 8001712:	4603      	mov	r3, r0
 8001714:	64bb      	str	r3, [r7, #72]	@ 0x48
		  float capacitance = - 1 / (2 * M_PI * frequency * reactance);
 8001716:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 800171a:	f7fe fed9 	bl	80004d0 <__aeabi_f2d>
 800171e:	a32a      	add	r3, pc, #168	@ (adr r3, 80017c8 <main+0x598>)
 8001720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001724:	f7fe ff2c 	bl	8000580 <__aeabi_dmul>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4614      	mov	r4, r2
 800172e:	461d      	mov	r5, r3
 8001730:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001732:	f7fe fecd 	bl	80004d0 <__aeabi_f2d>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4620      	mov	r0, r4
 800173c:	4629      	mov	r1, r5
 800173e:	f7fe ff1f 	bl	8000580 <__aeabi_dmul>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	f04f 0000 	mov.w	r0, #0
 800174a:	4922      	ldr	r1, [pc, #136]	@ (80017d4 <main+0x5a4>)
 800174c:	f7ff f842 	bl	80007d4 <__aeabi_ddiv>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4610      	mov	r0, r2
 8001756:	4619      	mov	r1, r3
 8001758:	f7ff f9ea 	bl	8000b30 <__aeabi_d2f>
 800175c:	4603      	mov	r3, r0
 800175e:	647b      	str	r3, [r7, #68]	@ 0x44
		  samples = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8001766:	4b1c      	ldr	r3, [pc, #112]	@ (80017d8 <main+0x5a8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2200      	movs	r2, #0
 800176c:	625a      	str	r2, [r3, #36]	@ 0x24
		  start_time = Get_Time_us();
 800176e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001772:	469c      	mov	ip, r3
 8001774:	f7ff fd4c 	bl	8001210 <Get_Time_us.0>
 8001778:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
		  avg += resistance;
 800177c:	ed97 7a28 	vldr	s14, [r7, #160]	@ 0xa0
 8001780:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001784:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001788:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
	  for (int i = 0; i < cycles; i++) {
 800178c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001790:	3301      	adds	r3, #1
 8001792:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001796:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800179a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800179c:	429a      	cmp	r2, r3
 800179e:	f6ff ae7b 	blt.w	8001498 <main+0x268>
	  }
	  avg = avg / cycles;
 80017a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80017a4:	ee07 3a90 	vmov	s15, r3
 80017a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017ac:	edd7 6a28 	vldr	s13, [r7, #160]	@ 0xa0
 80017b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017b4:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
  {
 80017b8:	e660      	b.n	800147c <main+0x24c>
 80017ba:	bf00      	nop
 80017bc:	f3af 8000 	nop.w
 80017c0:	54442d18 	.word	0x54442d18
 80017c4:	400921fb 	.word	0x400921fb
 80017c8:	54442d18 	.word	0x54442d18
 80017cc:	401921fb 	.word	0x401921fb
 80017d0:	4478a000 	.word	0x4478a000
 80017d4:	bff00000 	.word	0xbff00000
 80017d8:	2000012c 	.word	0x2000012c
 80017dc:	00000000 	.word	0x00000000
 80017e0:	412e8480 	.word	0x412e8480

080017e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b094      	sub	sp, #80	@ 0x50
 80017e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ea:	f107 031c 	add.w	r3, r7, #28
 80017ee:	2234      	movs	r2, #52	@ 0x34
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f004 fec1 	bl	800657a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017f8:	f107 0308 	add.w	r3, r7, #8
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001808:	2300      	movs	r3, #0
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	4b29      	ldr	r3, [pc, #164]	@ (80018b4 <SystemClock_Config+0xd0>)
 800180e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001810:	4a28      	ldr	r2, [pc, #160]	@ (80018b4 <SystemClock_Config+0xd0>)
 8001812:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001816:	6413      	str	r3, [r2, #64]	@ 0x40
 8001818:	4b26      	ldr	r3, [pc, #152]	@ (80018b4 <SystemClock_Config+0xd0>)
 800181a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001820:	607b      	str	r3, [r7, #4]
 8001822:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001824:	2300      	movs	r3, #0
 8001826:	603b      	str	r3, [r7, #0]
 8001828:	4b23      	ldr	r3, [pc, #140]	@ (80018b8 <SystemClock_Config+0xd4>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a22      	ldr	r2, [pc, #136]	@ (80018b8 <SystemClock_Config+0xd4>)
 800182e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	4b20      	ldr	r3, [pc, #128]	@ (80018b8 <SystemClock_Config+0xd4>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800183c:	603b      	str	r3, [r7, #0]
 800183e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001840:	2301      	movs	r3, #1
 8001842:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001844:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001848:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800184a:	2302      	movs	r3, #2
 800184c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800184e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001852:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001854:	2304      	movs	r3, #4
 8001856:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001858:	23a8      	movs	r3, #168	@ 0xa8
 800185a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800185c:	2302      	movs	r3, #2
 800185e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001860:	2307      	movs	r3, #7
 8001862:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001864:	2302      	movs	r3, #2
 8001866:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001868:	f107 031c 	add.w	r3, r7, #28
 800186c:	4618      	mov	r0, r3
 800186e:	f002 fd5f 	bl	8004330 <HAL_RCC_OscConfig>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001878:	f000 fa28 	bl	8001ccc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800187c:	230f      	movs	r3, #15
 800187e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001880:	2302      	movs	r3, #2
 8001882:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001884:	2300      	movs	r3, #0
 8001886:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001888:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800188c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800188e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001892:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001894:	f107 0308 	add.w	r3, r7, #8
 8001898:	2105      	movs	r1, #5
 800189a:	4618      	mov	r0, r3
 800189c:	f001 fed4 	bl	8003648 <HAL_RCC_ClockConfig>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80018a6:	f000 fa11 	bl	8001ccc <Error_Handler>
  }
}
 80018aa:	bf00      	nop
 80018ac:	3750      	adds	r7, #80	@ 0x50
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40007000 	.word	0x40007000

080018bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018c2:	463b      	mov	r3, r7
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018ce:	4b21      	ldr	r3, [pc, #132]	@ (8001954 <MX_ADC1_Init+0x98>)
 80018d0:	4a21      	ldr	r2, [pc, #132]	@ (8001958 <MX_ADC1_Init+0x9c>)
 80018d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001954 <MX_ADC1_Init+0x98>)
 80018d6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80018da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001954 <MX_ADC1_Init+0x98>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80018e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001954 <MX_ADC1_Init+0x98>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001954 <MX_ADC1_Init+0x98>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018ee:	4b19      	ldr	r3, [pc, #100]	@ (8001954 <MX_ADC1_Init+0x98>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018f6:	4b17      	ldr	r3, [pc, #92]	@ (8001954 <MX_ADC1_Init+0x98>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018fc:	4b15      	ldr	r3, [pc, #84]	@ (8001954 <MX_ADC1_Init+0x98>)
 80018fe:	4a17      	ldr	r2, [pc, #92]	@ (800195c <MX_ADC1_Init+0xa0>)
 8001900:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001902:	4b14      	ldr	r3, [pc, #80]	@ (8001954 <MX_ADC1_Init+0x98>)
 8001904:	2200      	movs	r2, #0
 8001906:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001908:	4b12      	ldr	r3, [pc, #72]	@ (8001954 <MX_ADC1_Init+0x98>)
 800190a:	2201      	movs	r2, #1
 800190c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800190e:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <MX_ADC1_Init+0x98>)
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001916:	4b0f      	ldr	r3, [pc, #60]	@ (8001954 <MX_ADC1_Init+0x98>)
 8001918:	2201      	movs	r2, #1
 800191a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800191c:	480d      	ldr	r0, [pc, #52]	@ (8001954 <MX_ADC1_Init+0x98>)
 800191e:	f000 fff5 	bl	800290c <HAL_ADC_Init>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001928:	f000 f9d0 	bl	8001ccc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800192c:	2309      	movs	r3, #9
 800192e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001930:	2301      	movs	r3, #1
 8001932:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001934:	2300      	movs	r3, #0
 8001936:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001938:	463b      	mov	r3, r7
 800193a:	4619      	mov	r1, r3
 800193c:	4805      	ldr	r0, [pc, #20]	@ (8001954 <MX_ADC1_Init+0x98>)
 800193e:	f001 f829 	bl	8002994 <HAL_ADC_ConfigChannel>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001948:	f000 f9c0 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800194c:	bf00      	nop
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	2000008c 	.word	0x2000008c
 8001958:	40012000 	.word	0x40012000
 800195c:	0f000001 	.word	0x0f000001

08001960 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001964:	4b17      	ldr	r3, [pc, #92]	@ (80019c4 <MX_SPI1_Init+0x64>)
 8001966:	4a18      	ldr	r2, [pc, #96]	@ (80019c8 <MX_SPI1_Init+0x68>)
 8001968:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800196a:	4b16      	ldr	r3, [pc, #88]	@ (80019c4 <MX_SPI1_Init+0x64>)
 800196c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001970:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001972:	4b14      	ldr	r3, [pc, #80]	@ (80019c4 <MX_SPI1_Init+0x64>)
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001978:	4b12      	ldr	r3, [pc, #72]	@ (80019c4 <MX_SPI1_Init+0x64>)
 800197a:	2200      	movs	r2, #0
 800197c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800197e:	4b11      	ldr	r3, [pc, #68]	@ (80019c4 <MX_SPI1_Init+0x64>)
 8001980:	2202      	movs	r2, #2
 8001982:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001984:	4b0f      	ldr	r3, [pc, #60]	@ (80019c4 <MX_SPI1_Init+0x64>)
 8001986:	2200      	movs	r2, #0
 8001988:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800198a:	4b0e      	ldr	r3, [pc, #56]	@ (80019c4 <MX_SPI1_Init+0x64>)
 800198c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001990:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001992:	4b0c      	ldr	r3, [pc, #48]	@ (80019c4 <MX_SPI1_Init+0x64>)
 8001994:	2228      	movs	r2, #40	@ 0x28
 8001996:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001998:	4b0a      	ldr	r3, [pc, #40]	@ (80019c4 <MX_SPI1_Init+0x64>)
 800199a:	2200      	movs	r2, #0
 800199c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800199e:	4b09      	ldr	r3, [pc, #36]	@ (80019c4 <MX_SPI1_Init+0x64>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019a4:	4b07      	ldr	r3, [pc, #28]	@ (80019c4 <MX_SPI1_Init+0x64>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019aa:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <MX_SPI1_Init+0x64>)
 80019ac:	220a      	movs	r2, #10
 80019ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019b0:	4804      	ldr	r0, [pc, #16]	@ (80019c4 <MX_SPI1_Init+0x64>)
 80019b2:	f002 ff5b 	bl	800486c <HAL_SPI_Init>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019bc:	f000 f986 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019c0:	bf00      	nop
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	200000d4 	.word	0x200000d4
 80019c8:	40013000 	.word	0x40013000

080019cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019d2:	f107 0308 	add.w	r3, r7, #8
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e0:	463b      	mov	r3, r7
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a60 <MX_TIM2_Init+0x94>)
 80019ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80019f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a60 <MX_TIM2_Init+0x94>)
 80019f2:	2253      	movs	r2, #83	@ 0x53
 80019f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a60 <MX_TIM2_Init+0x94>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80019fc:	4b18      	ldr	r3, [pc, #96]	@ (8001a60 <MX_TIM2_Init+0x94>)
 80019fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001a02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a04:	4b16      	ldr	r3, [pc, #88]	@ (8001a60 <MX_TIM2_Init+0x94>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a0a:	4b15      	ldr	r3, [pc, #84]	@ (8001a60 <MX_TIM2_Init+0x94>)
 8001a0c:	2280      	movs	r2, #128	@ 0x80
 8001a0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a10:	4813      	ldr	r0, [pc, #76]	@ (8001a60 <MX_TIM2_Init+0x94>)
 8001a12:	f003 fb7d 	bl	8005110 <HAL_TIM_Base_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a1c:	f000 f956 	bl	8001ccc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a26:	f107 0308 	add.w	r3, r7, #8
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	480c      	ldr	r0, [pc, #48]	@ (8001a60 <MX_TIM2_Init+0x94>)
 8001a2e:	f003 fd17 	bl	8005460 <HAL_TIM_ConfigClockSource>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a38:	f000 f948 	bl	8001ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a44:	463b      	mov	r3, r7
 8001a46:	4619      	mov	r1, r3
 8001a48:	4805      	ldr	r0, [pc, #20]	@ (8001a60 <MX_TIM2_Init+0x94>)
 8001a4a:	f003 ff49 	bl	80058e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a54:	f000 f93a 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a58:	bf00      	nop
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	2000012c 	.word	0x2000012c

08001a64 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a68:	4b11      	ldr	r3, [pc, #68]	@ (8001ab0 <MX_USART3_UART_Init+0x4c>)
 8001a6a:	4a12      	ldr	r2, [pc, #72]	@ (8001ab4 <MX_USART3_UART_Init+0x50>)
 8001a6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a6e:	4b10      	ldr	r3, [pc, #64]	@ (8001ab0 <MX_USART3_UART_Init+0x4c>)
 8001a70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a76:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab0 <MX_USART3_UART_Init+0x4c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab0 <MX_USART3_UART_Init+0x4c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a82:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab0 <MX_USART3_UART_Init+0x4c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a88:	4b09      	ldr	r3, [pc, #36]	@ (8001ab0 <MX_USART3_UART_Init+0x4c>)
 8001a8a:	220c      	movs	r2, #12
 8001a8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a8e:	4b08      	ldr	r3, [pc, #32]	@ (8001ab0 <MX_USART3_UART_Init+0x4c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a94:	4b06      	ldr	r3, [pc, #24]	@ (8001ab0 <MX_USART3_UART_Init+0x4c>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a9a:	4805      	ldr	r0, [pc, #20]	@ (8001ab0 <MX_USART3_UART_Init+0x4c>)
 8001a9c:	f003 ffb0 	bl	8005a00 <HAL_UART_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001aa6:	f000 f911 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000174 	.word	0x20000174
 8001ab4:	40004800 	.word	0x40004800

08001ab8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001abc:	4b14      	ldr	r3, [pc, #80]	@ (8001b10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001abe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001ac2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001ac4:	4b12      	ldr	r3, [pc, #72]	@ (8001b10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ac6:	2206      	movs	r2, #6
 8001ac8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001aca:	4b11      	ldr	r3, [pc, #68]	@ (8001b10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001acc:	2202      	movs	r2, #2
 8001ace:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ad8:	2202      	movs	r2, #2
 8001ada:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001adc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001ae8:	4b09      	ldr	r3, [pc, #36]	@ (8001b10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001aee:	4b08      	ldr	r3, [pc, #32]	@ (8001b10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001af4:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001afa:	4805      	ldr	r0, [pc, #20]	@ (8001b10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001afc:	f001 fc6a 	bl	80033d4 <HAL_PCD_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001b06:	f000 f8e1 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	200001bc 	.word	0x200001bc

08001b14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08c      	sub	sp, #48	@ 0x30
 8001b18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1a:	f107 031c 	add.w	r3, r7, #28
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]
 8001b24:	609a      	str	r2, [r3, #8]
 8001b26:	60da      	str	r2, [r3, #12]
 8001b28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61bb      	str	r3, [r7, #24]
 8001b2e:	4b5a      	ldr	r3, [pc, #360]	@ (8001c98 <MX_GPIO_Init+0x184>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b32:	4a59      	ldr	r2, [pc, #356]	@ (8001c98 <MX_GPIO_Init+0x184>)
 8001b34:	f043 0304 	orr.w	r3, r3, #4
 8001b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b3a:	4b57      	ldr	r3, [pc, #348]	@ (8001c98 <MX_GPIO_Init+0x184>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	61bb      	str	r3, [r7, #24]
 8001b44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	4b53      	ldr	r3, [pc, #332]	@ (8001c98 <MX_GPIO_Init+0x184>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4e:	4a52      	ldr	r2, [pc, #328]	@ (8001c98 <MX_GPIO_Init+0x184>)
 8001b50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b56:	4b50      	ldr	r3, [pc, #320]	@ (8001c98 <MX_GPIO_Init+0x184>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	4b4c      	ldr	r3, [pc, #304]	@ (8001c98 <MX_GPIO_Init+0x184>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6a:	4a4b      	ldr	r2, [pc, #300]	@ (8001c98 <MX_GPIO_Init+0x184>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b72:	4b49      	ldr	r3, [pc, #292]	@ (8001c98 <MX_GPIO_Init+0x184>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	4b45      	ldr	r3, [pc, #276]	@ (8001c98 <MX_GPIO_Init+0x184>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b86:	4a44      	ldr	r2, [pc, #272]	@ (8001c98 <MX_GPIO_Init+0x184>)
 8001b88:	f043 0302 	orr.w	r3, r3, #2
 8001b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b8e:	4b42      	ldr	r3, [pc, #264]	@ (8001c98 <MX_GPIO_Init+0x184>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	4b3e      	ldr	r3, [pc, #248]	@ (8001c98 <MX_GPIO_Init+0x184>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba2:	4a3d      	ldr	r2, [pc, #244]	@ (8001c98 <MX_GPIO_Init+0x184>)
 8001ba4:	f043 0308 	orr.w	r3, r3, #8
 8001ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001baa:	4b3b      	ldr	r3, [pc, #236]	@ (8001c98 <MX_GPIO_Init+0x184>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	4b37      	ldr	r3, [pc, #220]	@ (8001c98 <MX_GPIO_Init+0x184>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bbe:	4a36      	ldr	r2, [pc, #216]	@ (8001c98 <MX_GPIO_Init+0x184>)
 8001bc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bc6:	4b34      	ldr	r3, [pc, #208]	@ (8001c98 <MX_GPIO_Init+0x184>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bce:	607b      	str	r3, [r7, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001bd8:	4830      	ldr	r0, [pc, #192]	@ (8001c9c <MX_GPIO_Init+0x188>)
 8001bda:	f001 fbaf 	bl	800333c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, AD9833_NCS_Pin|MCP3202_NCS_Pin, GPIO_PIN_SET);
 8001bde:	2201      	movs	r2, #1
 8001be0:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001be4:	482e      	ldr	r0, [pc, #184]	@ (8001ca0 <MX_GPIO_Init+0x18c>)
 8001be6:	f001 fba9 	bl	800333c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001bea:	2200      	movs	r2, #0
 8001bec:	2140      	movs	r1, #64	@ 0x40
 8001bee:	482d      	ldr	r0, [pc, #180]	@ (8001ca4 <MX_GPIO_Init+0x190>)
 8001bf0:	f001 fba4 	bl	800333c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001bf4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bfa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001bfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001c04:	f107 031c 	add.w	r3, r7, #28
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4827      	ldr	r0, [pc, #156]	@ (8001ca8 <MX_GPIO_Init+0x194>)
 8001c0c:	f001 fa02 	bl	8003014 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001c10:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c16:	2301      	movs	r3, #1
 8001c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c22:	f107 031c 	add.w	r3, r7, #28
 8001c26:	4619      	mov	r1, r3
 8001c28:	481c      	ldr	r0, [pc, #112]	@ (8001c9c <MX_GPIO_Init+0x188>)
 8001c2a:	f001 f9f3 	bl	8003014 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD9833_NCS_Pin MCP3202_NCS_Pin */
  GPIO_InitStruct.Pin = AD9833_NCS_Pin|MCP3202_NCS_Pin;
 8001c2e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c34:	2301      	movs	r3, #1
 8001c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c40:	f107 031c 	add.w	r3, r7, #28
 8001c44:	4619      	mov	r1, r3
 8001c46:	4816      	ldr	r0, [pc, #88]	@ (8001ca0 <MX_GPIO_Init+0x18c>)
 8001c48:	f001 f9e4 	bl	8003014 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001c4c:	2340      	movs	r3, #64	@ 0x40
 8001c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c50:	2301      	movs	r3, #1
 8001c52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001c5c:	f107 031c 	add.w	r3, r7, #28
 8001c60:	4619      	mov	r1, r3
 8001c62:	4810      	ldr	r0, [pc, #64]	@ (8001ca4 <MX_GPIO_Init+0x190>)
 8001c64:	f001 f9d6 	bl	8003014 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001c68:	2380      	movs	r3, #128	@ 0x80
 8001c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c74:	f107 031c 	add.w	r3, r7, #28
 8001c78:	4619      	mov	r1, r3
 8001c7a:	480a      	ldr	r0, [pc, #40]	@ (8001ca4 <MX_GPIO_Init+0x190>)
 8001c7c:	f001 f9ca 	bl	8003014 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c80:	2200      	movs	r2, #0
 8001c82:	2100      	movs	r1, #0
 8001c84:	2028      	movs	r0, #40	@ 0x28
 8001c86:	f001 f98e 	bl	8002fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c8a:	2028      	movs	r0, #40	@ 0x28
 8001c8c:	f001 f9a7 	bl	8002fde <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c90:	bf00      	nop
 8001c92:	3730      	adds	r7, #48	@ 0x30
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40020400 	.word	0x40020400
 8001ca0:	40020c00 	.word	0x40020c00
 8001ca4:	40021800 	.word	0x40021800
 8001ca8:	40020800 	.word	0x40020800

08001cac <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin);
 8001cb6:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001cba:	4803      	ldr	r0, [pc, #12]	@ (8001cc8 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001cbc:	f001 fb57 	bl	800336e <HAL_GPIO_TogglePin>
}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40020400 	.word	0x40020400

08001ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd0:	b672      	cpsid	i
}
 8001cd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cd4:	bf00      	nop
 8001cd6:	e7fd      	b.n	8001cd4 <Error_Handler+0x8>

08001cd8 <calculateError>:
#include <float.h>
#include <stdbool.h>

// Function to calculate the error between the input data and a sine wave
float calculateError(const float data[], const float timestamps[], int dataLength,
                      float amplitude, float phase, float offset, float frequency) {
 8001cd8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001cdc:	b08e      	sub	sp, #56	@ 0x38
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	61f8      	str	r0, [r7, #28]
 8001ce2:	61b9      	str	r1, [r7, #24]
 8001ce4:	617a      	str	r2, [r7, #20]
 8001ce6:	ed87 0a04 	vstr	s0, [r7, #16]
 8001cea:	edc7 0a03 	vstr	s1, [r7, #12]
 8001cee:	ed87 1a02 	vstr	s2, [r7, #8]
 8001cf2:	edc7 1a01 	vstr	s3, [r7, #4]
    double error = 0.0;
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	f04f 0300 	mov.w	r3, #0
 8001cfe:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    for (int i = 0; i < dataLength; i++) {
 8001d02:	2300      	movs	r3, #0
 8001d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d06:	e071      	b.n	8001dec <calculateError+0x114>
        float sineValue = amplitude * sin(2 * M_PI * frequency * timestamps[i] + phase) + offset;
 8001d08:	6938      	ldr	r0, [r7, #16]
 8001d0a:	f7fe fbe1 	bl	80004d0 <__aeabi_f2d>
 8001d0e:	4604      	mov	r4, r0
 8001d10:	460d      	mov	r5, r1
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7fe fbdc 	bl	80004d0 <__aeabi_f2d>
 8001d18:	a33d      	add	r3, pc, #244	@ (adr r3, 8001e10 <calculateError+0x138>)
 8001d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1e:	f7fe fc2f 	bl	8000580 <__aeabi_dmul>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4690      	mov	r8, r2
 8001d28:	4699      	mov	r9, r3
 8001d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4413      	add	r3, r2
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7fe fbcb 	bl	80004d0 <__aeabi_f2d>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4640      	mov	r0, r8
 8001d40:	4649      	mov	r1, r9
 8001d42:	f7fe fc1d 	bl	8000580 <__aeabi_dmul>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4690      	mov	r8, r2
 8001d4c:	4699      	mov	r9, r3
 8001d4e:	68f8      	ldr	r0, [r7, #12]
 8001d50:	f7fe fbbe 	bl	80004d0 <__aeabi_f2d>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4640      	mov	r0, r8
 8001d5a:	4649      	mov	r1, r9
 8001d5c:	f7fe fa5a 	bl	8000214 <__adddf3>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	ec43 2b17 	vmov	d7, r2, r3
 8001d68:	eeb0 0a47 	vmov.f32	s0, s14
 8001d6c:	eef0 0a67 	vmov.f32	s1, s15
 8001d70:	f004 fd02 	bl	8006778 <sin>
 8001d74:	ec53 2b10 	vmov	r2, r3, d0
 8001d78:	4620      	mov	r0, r4
 8001d7a:	4629      	mov	r1, r5
 8001d7c:	f7fe fc00 	bl	8000580 <__aeabi_dmul>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4614      	mov	r4, r2
 8001d86:	461d      	mov	r5, r3
 8001d88:	68b8      	ldr	r0, [r7, #8]
 8001d8a:	f7fe fba1 	bl	80004d0 <__aeabi_f2d>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	4620      	mov	r0, r4
 8001d94:	4629      	mov	r1, r5
 8001d96:	f7fe fa3d 	bl	8000214 <__adddf3>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	4610      	mov	r0, r2
 8001da0:	4619      	mov	r1, r3
 8001da2:	f7fe fec5 	bl	8000b30 <__aeabi_d2f>
 8001da6:	4603      	mov	r3, r0
 8001da8:	62bb      	str	r3, [r7, #40]	@ 0x28
        float difference = sineValue - data[i];
 8001daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	69fa      	ldr	r2, [r7, #28]
 8001db0:	4413      	add	r3, r2
 8001db2:	edd3 7a00 	vldr	s15, [r3]
 8001db6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001dba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dbe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        error += difference * difference; // Squared error
 8001dc2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001dc6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001dca:	ee17 0a90 	vmov	r0, s15
 8001dce:	f7fe fb7f 	bl	80004d0 <__aeabi_f2d>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001dda:	f7fe fa1b 	bl	8000214 <__adddf3>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    for (int i = 0; i < dataLength; i++) {
 8001de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001de8:	3301      	adds	r3, #1
 8001dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001dec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	db89      	blt.n	8001d08 <calculateError+0x30>
    }
    return error;
 8001df4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001df8:	f7fe fe9a 	bl	8000b30 <__aeabi_d2f>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	ee07 3a90 	vmov	s15, r3
}
 8001e02:	eeb0 0a67 	vmov.f32	s0, s15
 8001e06:	3738      	adds	r7, #56	@ 0x38
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e0e:	bf00      	nop
 8001e10:	54442d18 	.word	0x54442d18
 8001e14:	401921fb 	.word	0x401921fb

08001e18 <max>:


float max(float data[], int dataLength) {
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
	float max = 0.0f;
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < dataLength; i++) {
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60bb      	str	r3, [r7, #8]
 8001e2c:	e015      	b.n	8001e5a <max+0x42>
		if (data[i] > max) {
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	edd3 7a00 	vldr	s15, [r3]
 8001e3a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e46:	d505      	bpl.n	8001e54 <max+0x3c>
			max = data[i];
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	4413      	add	r3, r2
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < dataLength; i++) {
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	3301      	adds	r3, #1
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	dbe5      	blt.n	8001e2e <max+0x16>
		}
	}
	return max;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	ee07 3a90 	vmov	s15, r3
}
 8001e68:	eeb0 0a67 	vmov.f32	s0, s15
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <min>:


float min(float data[], int dataLength) {
 8001e76:	b480      	push	{r7}
 8001e78:	b085      	sub	sp, #20
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	6039      	str	r1, [r7, #0]
	float min = data[0];
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < dataLength; i++) {
 8001e86:	2300      	movs	r3, #0
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	e015      	b.n	8001eb8 <min+0x42>
		if (data[i] < min) {
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	4413      	add	r3, r2
 8001e94:	edd3 7a00 	vldr	s15, [r3]
 8001e98:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea4:	dd05      	ble.n	8001eb2 <min+0x3c>
			min = data[i];
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	4413      	add	r3, r2
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < dataLength; i++) {
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	68ba      	ldr	r2, [r7, #8]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	dbe5      	blt.n	8001e8c <min+0x16>
		}
	}
	return min;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	ee07 3a90 	vmov	s15, r3
}
 8001ec6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <find_offset>:
			}
		}
	}
}

float find_offset(float data[], int dataLength) {
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
	float total = 0;
 8001ede:	f04f 0300 	mov.w	r3, #0
 8001ee2:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < dataLength; i++) {
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	e00e      	b.n	8001f08 <find_offset+0x34>
		total += data[i];
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	edd3 7a00 	vldr	s15, [r3]
 8001ef6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001efa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001efe:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i = 0; i < dataLength; i++) {
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	3301      	adds	r3, #1
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	68ba      	ldr	r2, [r7, #8]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	dbec      	blt.n	8001eea <find_offset+0x16>
	}
	total = total / dataLength;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	ee07 3a90 	vmov	s15, r3
 8001f16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f1a:	edd7 6a03 	vldr	s13, [r7, #12]
 8001f1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f22:	edc7 7a03 	vstr	s15, [r7, #12]
	return total;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	ee07 3a90 	vmov	s15, r3
}
 8001f2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	0000      	movs	r0, r0
 8001f3c:	0000      	movs	r0, r0
	...

08001f40 <fitSineWave>:

// Function to fit sine wave to the data by sweeping amplitude, phase, and offset
void fitSineWave(const float data[], const float timestamps[], int dataLength, float frequency,
				float* bestAmplitude, float* bestPhase, float* bestOffset) {
 8001f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f44:	ed2d 8b02 	vpush	{d8}
 8001f48:	b09e      	sub	sp, #120	@ 0x78
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6178      	str	r0, [r7, #20]
 8001f4e:	6139      	str	r1, [r7, #16]
 8001f50:	60fa      	str	r2, [r7, #12]
 8001f52:	ed87 0a02 	vstr	s0, [r7, #8]
 8001f56:	607b      	str	r3, [r7, #4]

    float amplitudeMin = 0.01, amplitudeMax = 1.0, amplitudeStepLarge = 0.01;
 8001f58:	4bc9      	ldr	r3, [pc, #804]	@ (8002280 <fitSineWave+0x340>)
 8001f5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8001f5c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001f60:	653b      	str	r3, [r7, #80]	@ 0x50
 8001f62:	4bc7      	ldr	r3, [pc, #796]	@ (8002280 <fitSineWave+0x340>)
 8001f64:	64fb      	str	r3, [r7, #76]	@ 0x4c
    float phaseMin = - M_PI, phaseMax = M_PI, phaseStepLarge = 1;
 8001f66:	4bc7      	ldr	r3, [pc, #796]	@ (8002284 <fitSineWave+0x344>)
 8001f68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f6a:	4bc7      	ldr	r3, [pc, #796]	@ (8002288 <fitSineWave+0x348>)
 8001f6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f6e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001f72:	643b      	str	r3, [r7, #64]	@ 0x40
    float offsetMin = 0.5, offsetMax = 2.0, offsetStep = 0.01;
 8001f74:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8001f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f7a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f80:	4bbf      	ldr	r3, [pc, #764]	@ (8002280 <fitSineWave+0x340>)
 8001f82:	637b      	str	r3, [r7, #52]	@ 0x34

    int cycleSteps = 5;
 8001f84:	2305      	movs	r3, #5
 8001f86:	633b      	str	r3, [r7, #48]	@ 0x30
    // SImplest (worst) method for sine fitting.
    // Bad guesses for amplitude and offset, then recursively find the phase angle.
    float A = (max(data, dataLength) - min(data, dataLength)) / 2;
 8001f88:	68f9      	ldr	r1, [r7, #12]
 8001f8a:	6978      	ldr	r0, [r7, #20]
 8001f8c:	f7ff ff44 	bl	8001e18 <max>
 8001f90:	eeb0 8a40 	vmov.f32	s16, s0
 8001f94:	68f9      	ldr	r1, [r7, #12]
 8001f96:	6978      	ldr	r0, [r7, #20]
 8001f98:	f7ff ff6d 	bl	8001e76 <min>
 8001f9c:	eef0 7a40 	vmov.f32	s15, s0
 8001fa0:	ee38 7a67 	vsub.f32	s14, s16, s15
 8001fa4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001fa8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fac:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
//    float O = (max(data, dataLength) + min(data, dataLength)) / 2;
    float O = find_offset(data, dataLength);
 8001fb0:	68f9      	ldr	r1, [r7, #12]
 8001fb2:	6978      	ldr	r0, [r7, #20]
 8001fb4:	f7ff ff8e 	bl	8001ed4 <find_offset>
 8001fb8:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    *bestOffset = O;
 8001fbc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001fc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001fc2:	601a      	str	r2, [r3, #0]



    float minError = FLT_MAX; // Initialize with the largest possible number
 8001fc4:	4bb1      	ldr	r3, [pc, #708]	@ (800228c <fitSineWave+0x34c>)
 8001fc6:	677b      	str	r3, [r7, #116]	@ 0x74

    // Start by finding a quick estimate
    for (float phase = phaseMin; phase <= phaseMax; phase += phaseStepLarge) {
 8001fc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fca:	673b      	str	r3, [r7, #112]	@ 0x70
 8001fcc:	e025      	b.n	800201a <fitSineWave+0xda>
		// Calculate the error for the current combination of parameters
		float error = calculateError(data, timestamps, dataLength, A, phase, O, frequency);
 8001fce:	edd7 1a02 	vldr	s3, [r7, #8]
 8001fd2:	ed97 1a0a 	vldr	s2, [r7, #40]	@ 0x28
 8001fd6:	edd7 0a1c 	vldr	s1, [r7, #112]	@ 0x70
 8001fda:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	6939      	ldr	r1, [r7, #16]
 8001fe2:	6978      	ldr	r0, [r7, #20]
 8001fe4:	f7ff fe78 	bl	8001cd8 <calculateError>
 8001fe8:	ed87 0a06 	vstr	s0, [r7, #24]

		// If this combination gives a smaller error, update the best parameters
		if (error < minError) {
 8001fec:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ff0:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001ff4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ffc:	d505      	bpl.n	800200a <fitSineWave+0xca>
			minError = error;
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	677b      	str	r3, [r7, #116]	@ 0x74
			*bestPhase = phase;
 8002002:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002006:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002008:	601a      	str	r2, [r3, #0]
    for (float phase = phaseMin; phase <= phaseMax; phase += phaseStepLarge) {
 800200a:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800200e:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002012:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002016:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
 800201a:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800201e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002022:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800202a:	d9d0      	bls.n	8001fce <fitSineWave+0x8e>
		}
	}

    // from here on out, recursively sweep to find a more and more ideal phase estimation.
    for(int i = 1; i < cycleSteps; i++ ) {
 800202c:	2301      	movs	r3, #1
 800202e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002030:	e0ae      	b.n	8002190 <fitSineWave+0x250>
		// At this point it should be an alright value of the phase. Get closer to the real one.
		for (float phase = *bestPhase - phaseStepLarge / pow(10, i-1);
 8002032:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f7fe fa49 	bl	80004d0 <__aeabi_f2d>
 800203e:	4604      	mov	r4, r0
 8002040:	460d      	mov	r5, r1
 8002042:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002044:	f7fe fa44 	bl	80004d0 <__aeabi_f2d>
 8002048:	4680      	mov	r8, r0
 800204a:	4689      	mov	r9, r1
 800204c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800204e:	3b01      	subs	r3, #1
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fa2b 	bl	80004ac <__aeabi_i2d>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	ec43 2b11 	vmov	d1, r2, r3
 800205e:	ed9f 0b86 	vldr	d0, [pc, #536]	@ 8002278 <fitSineWave+0x338>
 8002062:	f004 fabd 	bl	80065e0 <pow>
 8002066:	ec53 2b10 	vmov	r2, r3, d0
 800206a:	4640      	mov	r0, r8
 800206c:	4649      	mov	r1, r9
 800206e:	f7fe fbb1 	bl	80007d4 <__aeabi_ddiv>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	4620      	mov	r0, r4
 8002078:	4629      	mov	r1, r5
 800207a:	f7fe f8c9 	bl	8000210 <__aeabi_dsub>
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	4610      	mov	r0, r2
 8002084:	4619      	mov	r1, r3
 8002086:	f7fe fd53 	bl	8000b30 <__aeabi_d2f>
 800208a:	4603      	mov	r3, r0
 800208c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800208e:	e048      	b.n	8002122 <fitSineWave+0x1e2>
				phase <= *bestPhase + phaseStepLarge / pow(10, i-1);
				phase += phaseStepLarge / pow(10, i)) {
			// Calculate the error for the current combination of parameters
			float error = calculateError(data, timestamps, dataLength, A, phase, O, frequency);
 8002090:	edd7 1a02 	vldr	s3, [r7, #8]
 8002094:	ed97 1a0a 	vldr	s2, [r7, #40]	@ 0x28
 8002098:	edd7 0a1a 	vldr	s1, [r7, #104]	@ 0x68
 800209c:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	6939      	ldr	r1, [r7, #16]
 80020a4:	6978      	ldr	r0, [r7, #20]
 80020a6:	f7ff fe17 	bl	8001cd8 <calculateError>
 80020aa:	ed87 0a07 	vstr	s0, [r7, #28]

			// If this combination gives a smaller error, update the best parameters
			if (error < minError) {
 80020ae:	ed97 7a07 	vldr	s14, [r7, #28]
 80020b2:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80020b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020be:	d505      	bpl.n	80020cc <fitSineWave+0x18c>
				minError = error;
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	677b      	str	r3, [r7, #116]	@ 0x74
				*bestPhase = phase;
 80020c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80020c8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80020ca:	601a      	str	r2, [r3, #0]
				phase += phaseStepLarge / pow(10, i)) {
 80020cc:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80020ce:	f7fe f9ff 	bl	80004d0 <__aeabi_f2d>
 80020d2:	4604      	mov	r4, r0
 80020d4:	460d      	mov	r5, r1
 80020d6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80020d8:	f7fe f9e8 	bl	80004ac <__aeabi_i2d>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	ec43 2b11 	vmov	d1, r2, r3
 80020e4:	ed9f 0b64 	vldr	d0, [pc, #400]	@ 8002278 <fitSineWave+0x338>
 80020e8:	f004 fa7a 	bl	80065e0 <pow>
 80020ec:	ec53 2b10 	vmov	r2, r3, d0
 80020f0:	4620      	mov	r0, r4
 80020f2:	4629      	mov	r1, r5
 80020f4:	f7fe fb6e 	bl	80007d4 <__aeabi_ddiv>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4614      	mov	r4, r2
 80020fe:	461d      	mov	r5, r3
 8002100:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002102:	f7fe f9e5 	bl	80004d0 <__aeabi_f2d>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	4620      	mov	r0, r4
 800210c:	4629      	mov	r1, r5
 800210e:	f7fe f881 	bl	8000214 <__adddf3>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	4610      	mov	r0, r2
 8002118:	4619      	mov	r1, r3
 800211a:	f7fe fd09 	bl	8000b30 <__aeabi_d2f>
 800211e:	4603      	mov	r3, r0
 8002120:	66bb      	str	r3, [r7, #104]	@ 0x68
				phase <= *bestPhase + phaseStepLarge / pow(10, i-1);
 8002122:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002124:	f7fe f9d4 	bl	80004d0 <__aeabi_f2d>
 8002128:	4604      	mov	r4, r0
 800212a:	460d      	mov	r5, r1
 800212c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe f9cc 	bl	80004d0 <__aeabi_f2d>
 8002138:	4680      	mov	r8, r0
 800213a:	4689      	mov	r9, r1
 800213c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800213e:	f7fe f9c7 	bl	80004d0 <__aeabi_f2d>
 8002142:	4682      	mov	sl, r0
 8002144:	468b      	mov	fp, r1
 8002146:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002148:	3b01      	subs	r3, #1
 800214a:	4618      	mov	r0, r3
 800214c:	f7fe f9ae 	bl	80004ac <__aeabi_i2d>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	ec43 2b11 	vmov	d1, r2, r3
 8002158:	ed9f 0b47 	vldr	d0, [pc, #284]	@ 8002278 <fitSineWave+0x338>
 800215c:	f004 fa40 	bl	80065e0 <pow>
 8002160:	ec53 2b10 	vmov	r2, r3, d0
 8002164:	4650      	mov	r0, sl
 8002166:	4659      	mov	r1, fp
 8002168:	f7fe fb34 	bl	80007d4 <__aeabi_ddiv>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	4640      	mov	r0, r8
 8002172:	4649      	mov	r1, r9
 8002174:	f7fe f84e 	bl	8000214 <__adddf3>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	4620      	mov	r0, r4
 800217e:	4629      	mov	r1, r5
 8002180:	f7fe fc7a 	bl	8000a78 <__aeabi_dcmple>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d182      	bne.n	8002090 <fitSineWave+0x150>
    for(int i = 1; i < cycleSteps; i++ ) {
 800218a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800218c:	3301      	adds	r3, #1
 800218e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002190:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002194:	429a      	cmp	r2, r3
 8002196:	f6ff af4c 	blt.w	8002032 <fitSineWave+0xf2>
			}
		}
    }

    float ampError = FLT_MAX;
 800219a:	4b3c      	ldr	r3, [pc, #240]	@ (800228c <fitSineWave+0x34c>)
 800219c:	667b      	str	r3, [r7, #100]	@ 0x64
    for (float amplitude = amplitudeMin; amplitude <= amplitudeMax; amplitude += amplitudeStepLarge) {
 800219e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80021a2:	e02c      	b.n	80021fe <fitSineWave+0x2be>
		// Calculate the error for the current combination of parameters
		float error = calculateError(data, timestamps, dataLength, amplitude, *bestPhase, *bestOffset, frequency);
 80021a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80021a8:	edd3 7a00 	vldr	s15, [r3]
 80021ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80021b0:	ed93 7a00 	vldr	s14, [r3]
 80021b4:	edd7 1a02 	vldr	s3, [r7, #8]
 80021b8:	eeb0 1a47 	vmov.f32	s2, s14
 80021bc:	eef0 0a67 	vmov.f32	s1, s15
 80021c0:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	6939      	ldr	r1, [r7, #16]
 80021c8:	6978      	ldr	r0, [r7, #20]
 80021ca:	f7ff fd85 	bl	8001cd8 <calculateError>
 80021ce:	ed87 0a08 	vstr	s0, [r7, #32]

		// If this combination gives a smaller error, update the best parameters
		if (error < ampError) {
 80021d2:	ed97 7a08 	vldr	s14, [r7, #32]
 80021d6:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80021da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e2:	d504      	bpl.n	80021ee <fitSineWave+0x2ae>
			ampError = error;
 80021e4:	6a3b      	ldr	r3, [r7, #32]
 80021e6:	667b      	str	r3, [r7, #100]	@ 0x64
			*bestAmplitude = amplitude;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80021ec:	601a      	str	r2, [r3, #0]
    for (float amplitude = amplitudeMin; amplitude <= amplitudeMax; amplitude += amplitudeStepLarge) {
 80021ee:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80021f2:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80021f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021fa:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
 80021fe:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8002202:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8002206:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800220a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220e:	d9c9      	bls.n	80021a4 <fitSineWave+0x264>
		}
	}

	// from here on out, recursively sweep to find a more and more ideal phase estimation.
	for(int i = 1; i < cycleSteps; i++ ) {
 8002210:	2301      	movs	r3, #1
 8002212:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002214:	e0c3      	b.n	800239e <fitSineWave+0x45e>
		// At this point it should be an alright value of the phase. Get closer to the real one.
		for (float amplitude = *bestAmplitude - amplitudeStepLarge / pow(10, i-1);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe f958 	bl	80004d0 <__aeabi_f2d>
 8002220:	4604      	mov	r4, r0
 8002222:	460d      	mov	r5, r1
 8002224:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002226:	f7fe f953 	bl	80004d0 <__aeabi_f2d>
 800222a:	4680      	mov	r8, r0
 800222c:	4689      	mov	r9, r1
 800222e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002230:	3b01      	subs	r3, #1
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe f93a 	bl	80004ac <__aeabi_i2d>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	ec43 2b11 	vmov	d1, r2, r3
 8002240:	ed9f 0b0d 	vldr	d0, [pc, #52]	@ 8002278 <fitSineWave+0x338>
 8002244:	f004 f9cc 	bl	80065e0 <pow>
 8002248:	ec53 2b10 	vmov	r2, r3, d0
 800224c:	4640      	mov	r0, r8
 800224e:	4649      	mov	r1, r9
 8002250:	f7fe fac0 	bl	80007d4 <__aeabi_ddiv>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4620      	mov	r0, r4
 800225a:	4629      	mov	r1, r5
 800225c:	f7fd ffd8 	bl	8000210 <__aeabi_dsub>
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	4610      	mov	r0, r2
 8002266:	4619      	mov	r1, r3
 8002268:	f7fe fc62 	bl	8000b30 <__aeabi_d2f>
 800226c:	4603      	mov	r3, r0
 800226e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002270:	e05e      	b.n	8002330 <fitSineWave+0x3f0>
 8002272:	bf00      	nop
 8002274:	f3af 8000 	nop.w
 8002278:	00000000 	.word	0x00000000
 800227c:	40240000 	.word	0x40240000
 8002280:	3c23d70a 	.word	0x3c23d70a
 8002284:	c0490fdb 	.word	0xc0490fdb
 8002288:	40490fdb 	.word	0x40490fdb
 800228c:	7f7fffff 	.word	0x7f7fffff
				amplitude <= *bestAmplitude + amplitudeStepLarge / pow(10, i-1);
				amplitude += amplitudeStepLarge / pow(10, i)) {
			// Calculate the error for the current combination of parameters
			float error = calculateError(data, timestamps, dataLength, amplitude, *bestPhase, *bestOffset, frequency);
 8002290:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002294:	edd3 7a00 	vldr	s15, [r3]
 8002298:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800229c:	ed93 7a00 	vldr	s14, [r3]
 80022a0:	edd7 1a02 	vldr	s3, [r7, #8]
 80022a4:	eeb0 1a47 	vmov.f32	s2, s14
 80022a8:	eef0 0a67 	vmov.f32	s1, s15
 80022ac:	ed97 0a16 	vldr	s0, [r7, #88]	@ 0x58
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	6939      	ldr	r1, [r7, #16]
 80022b4:	6978      	ldr	r0, [r7, #20]
 80022b6:	f7ff fd0f 	bl	8001cd8 <calculateError>
 80022ba:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

			// If this combination gives a smaller error, update the best parameters
			if (error < ampError) {
 80022be:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80022c2:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80022c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ce:	d504      	bpl.n	80022da <fitSineWave+0x39a>
				ampError = error;
 80022d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d2:	667b      	str	r3, [r7, #100]	@ 0x64
				*bestAmplitude = amplitude;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80022d8:	601a      	str	r2, [r3, #0]
				amplitude += amplitudeStepLarge / pow(10, i)) {
 80022da:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80022dc:	f7fe f8f8 	bl	80004d0 <__aeabi_f2d>
 80022e0:	4604      	mov	r4, r0
 80022e2:	460d      	mov	r5, r1
 80022e4:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80022e6:	f7fe f8e1 	bl	80004ac <__aeabi_i2d>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	ec43 2b11 	vmov	d1, r2, r3
 80022f2:	ed9f 0b31 	vldr	d0, [pc, #196]	@ 80023b8 <fitSineWave+0x478>
 80022f6:	f004 f973 	bl	80065e0 <pow>
 80022fa:	ec53 2b10 	vmov	r2, r3, d0
 80022fe:	4620      	mov	r0, r4
 8002300:	4629      	mov	r1, r5
 8002302:	f7fe fa67 	bl	80007d4 <__aeabi_ddiv>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	4614      	mov	r4, r2
 800230c:	461d      	mov	r5, r3
 800230e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002310:	f7fe f8de 	bl	80004d0 <__aeabi_f2d>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4620      	mov	r0, r4
 800231a:	4629      	mov	r1, r5
 800231c:	f7fd ff7a 	bl	8000214 <__adddf3>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4610      	mov	r0, r2
 8002326:	4619      	mov	r1, r3
 8002328:	f7fe fc02 	bl	8000b30 <__aeabi_d2f>
 800232c:	4603      	mov	r3, r0
 800232e:	65bb      	str	r3, [r7, #88]	@ 0x58
				amplitude <= *bestAmplitude + amplitudeStepLarge / pow(10, i-1);
 8002330:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002332:	f7fe f8cd 	bl	80004d0 <__aeabi_f2d>
 8002336:	4604      	mov	r4, r0
 8002338:	460d      	mov	r5, r1
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe f8c6 	bl	80004d0 <__aeabi_f2d>
 8002344:	4680      	mov	r8, r0
 8002346:	4689      	mov	r9, r1
 8002348:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800234a:	f7fe f8c1 	bl	80004d0 <__aeabi_f2d>
 800234e:	4682      	mov	sl, r0
 8002350:	468b      	mov	fp, r1
 8002352:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002354:	3b01      	subs	r3, #1
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe f8a8 	bl	80004ac <__aeabi_i2d>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	ec43 2b11 	vmov	d1, r2, r3
 8002364:	ed9f 0b14 	vldr	d0, [pc, #80]	@ 80023b8 <fitSineWave+0x478>
 8002368:	f004 f93a 	bl	80065e0 <pow>
 800236c:	ec53 2b10 	vmov	r2, r3, d0
 8002370:	4650      	mov	r0, sl
 8002372:	4659      	mov	r1, fp
 8002374:	f7fe fa2e 	bl	80007d4 <__aeabi_ddiv>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4640      	mov	r0, r8
 800237e:	4649      	mov	r1, r9
 8002380:	f7fd ff48 	bl	8000214 <__adddf3>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4620      	mov	r0, r4
 800238a:	4629      	mov	r1, r5
 800238c:	f7fe fb74 	bl	8000a78 <__aeabi_dcmple>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	f47f af7c 	bne.w	8002290 <fitSineWave+0x350>
	for(int i = 1; i < cycleSteps; i++ ) {
 8002398:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800239a:	3301      	adds	r3, #1
 800239c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800239e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80023a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023a2:	429a      	cmp	r2, r3
 80023a4:	f6ff af37 	blt.w	8002216 <fitSineWave+0x2d6>
			}
		}
	}
}
 80023a8:	bf00      	nop
 80023aa:	bf00      	nop
 80023ac:	3778      	adds	r7, #120	@ 0x78
 80023ae:	46bd      	mov	sp, r7
 80023b0:	ecbd 8b02 	vpop	{d8}
 80023b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023b8:	00000000 	.word	0x00000000
 80023bc:	40240000 	.word	0x40240000

080023c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	607b      	str	r3, [r7, #4]
 80023ca:	4b10      	ldr	r3, [pc, #64]	@ (800240c <HAL_MspInit+0x4c>)
 80023cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ce:	4a0f      	ldr	r2, [pc, #60]	@ (800240c <HAL_MspInit+0x4c>)
 80023d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80023d6:	4b0d      	ldr	r3, [pc, #52]	@ (800240c <HAL_MspInit+0x4c>)
 80023d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023de:	607b      	str	r3, [r7, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	603b      	str	r3, [r7, #0]
 80023e6:	4b09      	ldr	r3, [pc, #36]	@ (800240c <HAL_MspInit+0x4c>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ea:	4a08      	ldr	r2, [pc, #32]	@ (800240c <HAL_MspInit+0x4c>)
 80023ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80023f2:	4b06      	ldr	r3, [pc, #24]	@ (800240c <HAL_MspInit+0x4c>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023fa:	603b      	str	r3, [r7, #0]
 80023fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40023800 	.word	0x40023800

08002410 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b08a      	sub	sp, #40	@ 0x28
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002418:	f107 0314 	add.w	r3, r7, #20
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	605a      	str	r2, [r3, #4]
 8002422:	609a      	str	r2, [r3, #8]
 8002424:	60da      	str	r2, [r3, #12]
 8002426:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a17      	ldr	r2, [pc, #92]	@ (800248c <HAL_ADC_MspInit+0x7c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d127      	bne.n	8002482 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	613b      	str	r3, [r7, #16]
 8002436:	4b16      	ldr	r3, [pc, #88]	@ (8002490 <HAL_ADC_MspInit+0x80>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243a:	4a15      	ldr	r2, [pc, #84]	@ (8002490 <HAL_ADC_MspInit+0x80>)
 800243c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002440:	6453      	str	r3, [r2, #68]	@ 0x44
 8002442:	4b13      	ldr	r3, [pc, #76]	@ (8002490 <HAL_ADC_MspInit+0x80>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	4b0f      	ldr	r3, [pc, #60]	@ (8002490 <HAL_ADC_MspInit+0x80>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002456:	4a0e      	ldr	r2, [pc, #56]	@ (8002490 <HAL_ADC_MspInit+0x80>)
 8002458:	f043 0302 	orr.w	r3, r3, #2
 800245c:	6313      	str	r3, [r2, #48]	@ 0x30
 800245e:	4b0c      	ldr	r3, [pc, #48]	@ (8002490 <HAL_ADC_MspInit+0x80>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800246a:	2302      	movs	r3, #2
 800246c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800246e:	2303      	movs	r3, #3
 8002470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002472:	2300      	movs	r3, #0
 8002474:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002476:	f107 0314 	add.w	r3, r7, #20
 800247a:	4619      	mov	r1, r3
 800247c:	4805      	ldr	r0, [pc, #20]	@ (8002494 <HAL_ADC_MspInit+0x84>)
 800247e:	f000 fdc9 	bl	8003014 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002482:	bf00      	nop
 8002484:	3728      	adds	r7, #40	@ 0x28
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40012000 	.word	0x40012000
 8002490:	40023800 	.word	0x40023800
 8002494:	40020400 	.word	0x40020400

08002498 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08a      	sub	sp, #40	@ 0x28
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a0:	f107 0314 	add.w	r3, r7, #20
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	60da      	str	r2, [r3, #12]
 80024ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a19      	ldr	r2, [pc, #100]	@ (800251c <HAL_SPI_MspInit+0x84>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d12b      	bne.n	8002512 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	4b18      	ldr	r3, [pc, #96]	@ (8002520 <HAL_SPI_MspInit+0x88>)
 80024c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c2:	4a17      	ldr	r2, [pc, #92]	@ (8002520 <HAL_SPI_MspInit+0x88>)
 80024c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024ca:	4b15      	ldr	r3, [pc, #84]	@ (8002520 <HAL_SPI_MspInit+0x88>)
 80024cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024d2:	613b      	str	r3, [r7, #16]
 80024d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	4b11      	ldr	r3, [pc, #68]	@ (8002520 <HAL_SPI_MspInit+0x88>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024de:	4a10      	ldr	r2, [pc, #64]	@ (8002520 <HAL_SPI_MspInit+0x88>)
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002520 <HAL_SPI_MspInit+0x88>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80024f2:	23e0      	movs	r3, #224	@ 0xe0
 80024f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f6:	2302      	movs	r3, #2
 80024f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fa:	2300      	movs	r3, #0
 80024fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fe:	2303      	movs	r3, #3
 8002500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002502:	2305      	movs	r3, #5
 8002504:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002506:	f107 0314 	add.w	r3, r7, #20
 800250a:	4619      	mov	r1, r3
 800250c:	4805      	ldr	r0, [pc, #20]	@ (8002524 <HAL_SPI_MspInit+0x8c>)
 800250e:	f000 fd81 	bl	8003014 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002512:	bf00      	nop
 8002514:	3728      	adds	r7, #40	@ 0x28
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40013000 	.word	0x40013000
 8002520:	40023800 	.word	0x40023800
 8002524:	40020000 	.word	0x40020000

08002528 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002538:	d115      	bne.n	8002566 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	4b0c      	ldr	r3, [pc, #48]	@ (8002570 <HAL_TIM_Base_MspInit+0x48>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002542:	4a0b      	ldr	r2, [pc, #44]	@ (8002570 <HAL_TIM_Base_MspInit+0x48>)
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	6413      	str	r3, [r2, #64]	@ 0x40
 800254a:	4b09      	ldr	r3, [pc, #36]	@ (8002570 <HAL_TIM_Base_MspInit+0x48>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002556:	2200      	movs	r2, #0
 8002558:	2100      	movs	r1, #0
 800255a:	201c      	movs	r0, #28
 800255c:	f000 fd23 	bl	8002fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002560:	201c      	movs	r0, #28
 8002562:	f000 fd3c 	bl	8002fde <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002566:	bf00      	nop
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40023800 	.word	0x40023800

08002574 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08a      	sub	sp, #40	@ 0x28
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257c:	f107 0314 	add.w	r3, r7, #20
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a19      	ldr	r2, [pc, #100]	@ (80025f8 <HAL_UART_MspInit+0x84>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d12c      	bne.n	80025f0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	4b18      	ldr	r3, [pc, #96]	@ (80025fc <HAL_UART_MspInit+0x88>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259e:	4a17      	ldr	r2, [pc, #92]	@ (80025fc <HAL_UART_MspInit+0x88>)
 80025a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80025a6:	4b15      	ldr	r3, [pc, #84]	@ (80025fc <HAL_UART_MspInit+0x88>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025ae:	613b      	str	r3, [r7, #16]
 80025b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	4b11      	ldr	r3, [pc, #68]	@ (80025fc <HAL_UART_MspInit+0x88>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ba:	4a10      	ldr	r2, [pc, #64]	@ (80025fc <HAL_UART_MspInit+0x88>)
 80025bc:	f043 0308 	orr.w	r3, r3, #8
 80025c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025c2:	4b0e      	ldr	r3, [pc, #56]	@ (80025fc <HAL_UART_MspInit+0x88>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80025ce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80025d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d4:	2302      	movs	r3, #2
 80025d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025dc:	2303      	movs	r3, #3
 80025de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025e0:	2307      	movs	r3, #7
 80025e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025e4:	f107 0314 	add.w	r3, r7, #20
 80025e8:	4619      	mov	r1, r3
 80025ea:	4805      	ldr	r0, [pc, #20]	@ (8002600 <HAL_UART_MspInit+0x8c>)
 80025ec:	f000 fd12 	bl	8003014 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80025f0:	bf00      	nop
 80025f2:	3728      	adds	r7, #40	@ 0x28
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40004800 	.word	0x40004800
 80025fc:	40023800 	.word	0x40023800
 8002600:	40020c00 	.word	0x40020c00

08002604 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b0a0      	sub	sp, #128	@ 0x80
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800260c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	605a      	str	r2, [r3, #4]
 8002616:	609a      	str	r2, [r3, #8]
 8002618:	60da      	str	r2, [r3, #12]
 800261a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800261c:	f107 0310 	add.w	r3, r7, #16
 8002620:	225c      	movs	r2, #92	@ 0x5c
 8002622:	2100      	movs	r1, #0
 8002624:	4618      	mov	r0, r3
 8002626:	f003 ffa8 	bl	800657a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002632:	d14e      	bne.n	80026d2 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002634:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002638:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800263a:	2300      	movs	r3, #0
 800263c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800263e:	f107 0310 	add.w	r3, r7, #16
 8002642:	4618      	mov	r0, r3
 8002644:	f001 f91a 	bl	800387c <HAL_RCCEx_PeriphCLKConfig>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800264e:	f7ff fb3d 	bl	8001ccc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	4b21      	ldr	r3, [pc, #132]	@ (80026dc <HAL_PCD_MspInit+0xd8>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265a:	4a20      	ldr	r2, [pc, #128]	@ (80026dc <HAL_PCD_MspInit+0xd8>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	6313      	str	r3, [r2, #48]	@ 0x30
 8002662:	4b1e      	ldr	r3, [pc, #120]	@ (80026dc <HAL_PCD_MspInit+0xd8>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800266e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002672:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002674:	2302      	movs	r3, #2
 8002676:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267c:	2303      	movs	r3, #3
 800267e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002680:	230a      	movs	r3, #10
 8002682:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002684:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002688:	4619      	mov	r1, r3
 800268a:	4815      	ldr	r0, [pc, #84]	@ (80026e0 <HAL_PCD_MspInit+0xdc>)
 800268c:	f000 fcc2 	bl	8003014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002690:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002694:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002696:	2300      	movs	r3, #0
 8002698:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269a:	2300      	movs	r3, #0
 800269c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800269e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80026a2:	4619      	mov	r1, r3
 80026a4:	480e      	ldr	r0, [pc, #56]	@ (80026e0 <HAL_PCD_MspInit+0xdc>)
 80026a6:	f000 fcb5 	bl	8003014 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80026aa:	4b0c      	ldr	r3, [pc, #48]	@ (80026dc <HAL_PCD_MspInit+0xd8>)
 80026ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026ae:	4a0b      	ldr	r2, [pc, #44]	@ (80026dc <HAL_PCD_MspInit+0xd8>)
 80026b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026b4:	6353      	str	r3, [r2, #52]	@ 0x34
 80026b6:	2300      	movs	r3, #0
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	4b08      	ldr	r3, [pc, #32]	@ (80026dc <HAL_PCD_MspInit+0xd8>)
 80026bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026be:	4a07      	ldr	r2, [pc, #28]	@ (80026dc <HAL_PCD_MspInit+0xd8>)
 80026c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026c6:	4b05      	ldr	r3, [pc, #20]	@ (80026dc <HAL_PCD_MspInit+0xd8>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ce:	60bb      	str	r3, [r7, #8]
 80026d0:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80026d2:	bf00      	nop
 80026d4:	3780      	adds	r7, #128	@ 0x80
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40023800 	.word	0x40023800
 80026e0:	40020000 	.word	0x40020000

080026e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026e8:	bf00      	nop
 80026ea:	e7fd      	b.n	80026e8 <NMI_Handler+0x4>

080026ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026f0:	bf00      	nop
 80026f2:	e7fd      	b.n	80026f0 <HardFault_Handler+0x4>

080026f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026f8:	bf00      	nop
 80026fa:	e7fd      	b.n	80026f8 <MemManage_Handler+0x4>

080026fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002700:	bf00      	nop
 8002702:	e7fd      	b.n	8002700 <BusFault_Handler+0x4>

08002704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002708:	bf00      	nop
 800270a:	e7fd      	b.n	8002708 <UsageFault_Handler+0x4>

0800270c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800271a:	b480      	push	{r7}
 800271c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800273a:	f000 f8a3 	bl	8002884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800273e:	bf00      	nop
 8002740:	bd80      	pop	{r7, pc}
	...

08002744 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002748:	4802      	ldr	r0, [pc, #8]	@ (8002754 <TIM2_IRQHandler+0x10>)
 800274a:	f002 fd99 	bl	8005280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	2000012c 	.word	0x2000012c

08002758 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 800275c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002760:	f000 fe20 	bl	80033a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002764:	bf00      	nop
 8002766:	bd80      	pop	{r7, pc}

08002768 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800276c:	4b06      	ldr	r3, [pc, #24]	@ (8002788 <SystemInit+0x20>)
 800276e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002772:	4a05      	ldr	r2, [pc, #20]	@ (8002788 <SystemInit+0x20>)
 8002774:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002778:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800277c:	bf00      	nop
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	e000ed00 	.word	0xe000ed00

0800278c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800278c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027c4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002790:	f7ff ffea 	bl	8002768 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002794:	480c      	ldr	r0, [pc, #48]	@ (80027c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002796:	490d      	ldr	r1, [pc, #52]	@ (80027cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002798:	4a0d      	ldr	r2, [pc, #52]	@ (80027d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800279a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800279c:	e002      	b.n	80027a4 <LoopCopyDataInit>

0800279e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800279e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027a2:	3304      	adds	r3, #4

080027a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027a8:	d3f9      	bcc.n	800279e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027aa:	4a0a      	ldr	r2, [pc, #40]	@ (80027d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027ac:	4c0a      	ldr	r4, [pc, #40]	@ (80027d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027b0:	e001      	b.n	80027b6 <LoopFillZerobss>

080027b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027b4:	3204      	adds	r2, #4

080027b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027b8:	d3fb      	bcc.n	80027b2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80027ba:	f003 feed 	bl	8006598 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027be:	f7fe fd37 	bl	8001230 <main>
  bx  lr    
 80027c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027cc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80027d0:	080086e0 	.word	0x080086e0
  ldr r2, =_sbss
 80027d4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80027d8:	200007dc 	.word	0x200007dc

080027dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027dc:	e7fe      	b.n	80027dc <ADC_IRQHandler>
	...

080027e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002820 <HAL_Init+0x40>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002820 <HAL_Init+0x40>)
 80027ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002820 <HAL_Init+0x40>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002820 <HAL_Init+0x40>)
 80027f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027fc:	4b08      	ldr	r3, [pc, #32]	@ (8002820 <HAL_Init+0x40>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a07      	ldr	r2, [pc, #28]	@ (8002820 <HAL_Init+0x40>)
 8002802:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002806:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002808:	2003      	movs	r0, #3
 800280a:	f000 fbc1 	bl	8002f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800280e:	2000      	movs	r0, #0
 8002810:	f000 f808 	bl	8002824 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002814:	f7ff fdd4 	bl	80023c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40023c00 	.word	0x40023c00

08002824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800282c:	4b12      	ldr	r3, [pc, #72]	@ (8002878 <HAL_InitTick+0x54>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	4b12      	ldr	r3, [pc, #72]	@ (800287c <HAL_InitTick+0x58>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	4619      	mov	r1, r3
 8002836:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800283a:	fbb3 f3f1 	udiv	r3, r3, r1
 800283e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002842:	4618      	mov	r0, r3
 8002844:	f000 fbd9 	bl	8002ffa <HAL_SYSTICK_Config>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e00e      	b.n	8002870 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b0f      	cmp	r3, #15
 8002856:	d80a      	bhi.n	800286e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002858:	2200      	movs	r2, #0
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	f04f 30ff 	mov.w	r0, #4294967295
 8002860:	f000 fba1 	bl	8002fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002864:	4a06      	ldr	r2, [pc, #24]	@ (8002880 <HAL_InitTick+0x5c>)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	e000      	b.n	8002870 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
}
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20000000 	.word	0x20000000
 800287c:	20000008 	.word	0x20000008
 8002880:	20000004 	.word	0x20000004

08002884 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002888:	4b06      	ldr	r3, [pc, #24]	@ (80028a4 <HAL_IncTick+0x20>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	4b06      	ldr	r3, [pc, #24]	@ (80028a8 <HAL_IncTick+0x24>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4413      	add	r3, r2
 8002894:	4a04      	ldr	r2, [pc, #16]	@ (80028a8 <HAL_IncTick+0x24>)
 8002896:	6013      	str	r3, [r2, #0]
}
 8002898:	bf00      	nop
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	20000008 	.word	0x20000008
 80028a8:	200006a0 	.word	0x200006a0

080028ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  return uwTick;
 80028b0:	4b03      	ldr	r3, [pc, #12]	@ (80028c0 <HAL_GetTick+0x14>)
 80028b2:	681b      	ldr	r3, [r3, #0]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	200006a0 	.word	0x200006a0

080028c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028cc:	f7ff ffee 	bl	80028ac <HAL_GetTick>
 80028d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028dc:	d005      	beq.n	80028ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028de:	4b0a      	ldr	r3, [pc, #40]	@ (8002908 <HAL_Delay+0x44>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4413      	add	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028ea:	bf00      	nop
 80028ec:	f7ff ffde 	bl	80028ac <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d8f7      	bhi.n	80028ec <HAL_Delay+0x28>
  {
  }
}
 80028fc:	bf00      	nop
 80028fe:	bf00      	nop
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000008 	.word	0x20000008

0800290c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e033      	b.n	800298a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002926:	2b00      	cmp	r3, #0
 8002928:	d109      	bne.n	800293e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7ff fd70 	bl	8002410 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002942:	f003 0310 	and.w	r3, r3, #16
 8002946:	2b00      	cmp	r3, #0
 8002948:	d118      	bne.n	800297c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002952:	f023 0302 	bic.w	r3, r3, #2
 8002956:	f043 0202 	orr.w	r2, r3, #2
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f94a 	bl	8002bf8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	f023 0303 	bic.w	r3, r3, #3
 8002972:	f043 0201 	orr.w	r2, r3, #1
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	641a      	str	r2, [r3, #64]	@ 0x40
 800297a:	e001      	b.n	8002980 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002988:	7bfb      	ldrb	r3, [r7, #15]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
	...

08002994 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800299e:	2300      	movs	r3, #0
 80029a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d101      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x1c>
 80029ac:	2302      	movs	r3, #2
 80029ae:	e113      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0x244>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2b09      	cmp	r3, #9
 80029be:	d925      	bls.n	8002a0c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68d9      	ldr	r1, [r3, #12]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	461a      	mov	r2, r3
 80029ce:	4613      	mov	r3, r2
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	4413      	add	r3, r2
 80029d4:	3b1e      	subs	r3, #30
 80029d6:	2207      	movs	r2, #7
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43da      	mvns	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	400a      	ands	r2, r1
 80029e4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68d9      	ldr	r1, [r3, #12]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	4618      	mov	r0, r3
 80029f8:	4603      	mov	r3, r0
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	4403      	add	r3, r0
 80029fe:	3b1e      	subs	r3, #30
 8002a00:	409a      	lsls	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	60da      	str	r2, [r3, #12]
 8002a0a:	e022      	b.n	8002a52 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6919      	ldr	r1, [r3, #16]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	4413      	add	r3, r2
 8002a20:	2207      	movs	r2, #7
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43da      	mvns	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	400a      	ands	r2, r1
 8002a2e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6919      	ldr	r1, [r3, #16]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	4618      	mov	r0, r3
 8002a42:	4603      	mov	r3, r0
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	4403      	add	r3, r0
 8002a48:	409a      	lsls	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b06      	cmp	r3, #6
 8002a58:	d824      	bhi.n	8002aa4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	3b05      	subs	r3, #5
 8002a6c:	221f      	movs	r2, #31
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43da      	mvns	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	400a      	ands	r2, r1
 8002a7a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	4618      	mov	r0, r3
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	3b05      	subs	r3, #5
 8002a96:	fa00 f203 	lsl.w	r2, r0, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	635a      	str	r2, [r3, #52]	@ 0x34
 8002aa2:	e04c      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b0c      	cmp	r3, #12
 8002aaa:	d824      	bhi.n	8002af6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	3b23      	subs	r3, #35	@ 0x23
 8002abe:	221f      	movs	r2, #31
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43da      	mvns	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	400a      	ands	r2, r1
 8002acc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	4618      	mov	r0, r3
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	3b23      	subs	r3, #35	@ 0x23
 8002ae8:	fa00 f203 	lsl.w	r2, r0, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002af4:	e023      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	3b41      	subs	r3, #65	@ 0x41
 8002b08:	221f      	movs	r2, #31
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43da      	mvns	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	400a      	ands	r2, r1
 8002b16:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	4618      	mov	r0, r3
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	3b41      	subs	r3, #65	@ 0x41
 8002b32:	fa00 f203 	lsl.w	r2, r0, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b3e:	4b29      	ldr	r3, [pc, #164]	@ (8002be4 <HAL_ADC_ConfigChannel+0x250>)
 8002b40:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a28      	ldr	r2, [pc, #160]	@ (8002be8 <HAL_ADC_ConfigChannel+0x254>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d10f      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x1d8>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b12      	cmp	r3, #18
 8002b52:	d10b      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a1d      	ldr	r2, [pc, #116]	@ (8002be8 <HAL_ADC_ConfigChannel+0x254>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d12b      	bne.n	8002bce <HAL_ADC_ConfigChannel+0x23a>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a1c      	ldr	r2, [pc, #112]	@ (8002bec <HAL_ADC_ConfigChannel+0x258>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d003      	beq.n	8002b88 <HAL_ADC_ConfigChannel+0x1f4>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2b11      	cmp	r3, #17
 8002b86:	d122      	bne.n	8002bce <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a11      	ldr	r2, [pc, #68]	@ (8002bec <HAL_ADC_ConfigChannel+0x258>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d111      	bne.n	8002bce <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002baa:	4b11      	ldr	r3, [pc, #68]	@ (8002bf0 <HAL_ADC_ConfigChannel+0x25c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a11      	ldr	r2, [pc, #68]	@ (8002bf4 <HAL_ADC_ConfigChannel+0x260>)
 8002bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb4:	0c9a      	lsrs	r2, r3, #18
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002bc0:	e002      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f9      	bne.n	8002bc2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	40012300 	.word	0x40012300
 8002be8:	40012000 	.word	0x40012000
 8002bec:	10000012 	.word	0x10000012
 8002bf0:	20000000 	.word	0x20000000
 8002bf4:	431bde83 	.word	0x431bde83

08002bf8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c00:	4b79      	ldr	r3, [pc, #484]	@ (8002de8 <ADC_Init+0x1f0>)
 8002c02:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6859      	ldr	r1, [r3, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	021a      	lsls	r2, r3, #8
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002c50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6859      	ldr	r1, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6899      	ldr	r1, [r3, #8]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c8a:	4a58      	ldr	r2, [pc, #352]	@ (8002dec <ADC_Init+0x1f4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d022      	beq.n	8002cd6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6899      	ldr	r1, [r3, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002cc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6899      	ldr	r1, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	609a      	str	r2, [r3, #8]
 8002cd4:	e00f      	b.n	8002cf6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ce4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002cf4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0202 	bic.w	r2, r2, #2
 8002d04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6899      	ldr	r1, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	7e1b      	ldrb	r3, [r3, #24]
 8002d10:	005a      	lsls	r2, r3, #1
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d01b      	beq.n	8002d5c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d32:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002d42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6859      	ldr	r1, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	035a      	lsls	r2, r3, #13
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	605a      	str	r2, [r3, #4]
 8002d5a:	e007      	b.n	8002d6c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d6a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	051a      	lsls	r2, r3, #20
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002da0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6899      	ldr	r1, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002dae:	025a      	lsls	r2, r3, #9
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6899      	ldr	r1, [r3, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	029a      	lsls	r2, r3, #10
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	609a      	str	r2, [r3, #8]
}
 8002ddc:	bf00      	nop
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	40012300 	.word	0x40012300
 8002dec:	0f000001 	.word	0x0f000001

08002df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e00:	4b0c      	ldr	r3, [pc, #48]	@ (8002e34 <__NVIC_SetPriorityGrouping+0x44>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e22:	4a04      	ldr	r2, [pc, #16]	@ (8002e34 <__NVIC_SetPriorityGrouping+0x44>)
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	60d3      	str	r3, [r2, #12]
}
 8002e28:	bf00      	nop
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr
 8002e34:	e000ed00 	.word	0xe000ed00

08002e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e3c:	4b04      	ldr	r3, [pc, #16]	@ (8002e50 <__NVIC_GetPriorityGrouping+0x18>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	0a1b      	lsrs	r3, r3, #8
 8002e42:	f003 0307 	and.w	r3, r3, #7
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	e000ed00 	.word	0xe000ed00

08002e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	db0b      	blt.n	8002e7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	f003 021f 	and.w	r2, r3, #31
 8002e6c:	4907      	ldr	r1, [pc, #28]	@ (8002e8c <__NVIC_EnableIRQ+0x38>)
 8002e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e72:	095b      	lsrs	r3, r3, #5
 8002e74:	2001      	movs	r0, #1
 8002e76:	fa00 f202 	lsl.w	r2, r0, r2
 8002e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	e000e100 	.word	0xe000e100

08002e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	6039      	str	r1, [r7, #0]
 8002e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	db0a      	blt.n	8002eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	490c      	ldr	r1, [pc, #48]	@ (8002edc <__NVIC_SetPriority+0x4c>)
 8002eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eae:	0112      	lsls	r2, r2, #4
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002eb8:	e00a      	b.n	8002ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	4908      	ldr	r1, [pc, #32]	@ (8002ee0 <__NVIC_SetPriority+0x50>)
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	3b04      	subs	r3, #4
 8002ec8:	0112      	lsls	r2, r2, #4
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	440b      	add	r3, r1
 8002ece:	761a      	strb	r2, [r3, #24]
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	e000e100 	.word	0xe000e100
 8002ee0:	e000ed00 	.word	0xe000ed00

08002ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b089      	sub	sp, #36	@ 0x24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f1c3 0307 	rsb	r3, r3, #7
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	bf28      	it	cs
 8002f02:	2304      	movcs	r3, #4
 8002f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	3304      	adds	r3, #4
 8002f0a:	2b06      	cmp	r3, #6
 8002f0c:	d902      	bls.n	8002f14 <NVIC_EncodePriority+0x30>
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	3b03      	subs	r3, #3
 8002f12:	e000      	b.n	8002f16 <NVIC_EncodePriority+0x32>
 8002f14:	2300      	movs	r3, #0
 8002f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f18:	f04f 32ff 	mov.w	r2, #4294967295
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43da      	mvns	r2, r3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	401a      	ands	r2, r3
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	fa01 f303 	lsl.w	r3, r1, r3
 8002f36:	43d9      	mvns	r1, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f3c:	4313      	orrs	r3, r2
         );
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3724      	adds	r7, #36	@ 0x24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
	...

08002f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f5c:	d301      	bcc.n	8002f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e00f      	b.n	8002f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f62:	4a0a      	ldr	r2, [pc, #40]	@ (8002f8c <SysTick_Config+0x40>)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3b01      	subs	r3, #1
 8002f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f6a:	210f      	movs	r1, #15
 8002f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f70:	f7ff ff8e 	bl	8002e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f74:	4b05      	ldr	r3, [pc, #20]	@ (8002f8c <SysTick_Config+0x40>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f7a:	4b04      	ldr	r3, [pc, #16]	@ (8002f8c <SysTick_Config+0x40>)
 8002f7c:	2207      	movs	r2, #7
 8002f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	e000e010 	.word	0xe000e010

08002f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7ff ff29 	bl	8002df0 <__NVIC_SetPriorityGrouping>
}
 8002f9e:	bf00      	nop
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b086      	sub	sp, #24
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	4603      	mov	r3, r0
 8002fae:	60b9      	str	r1, [r7, #8]
 8002fb0:	607a      	str	r2, [r7, #4]
 8002fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fb8:	f7ff ff3e 	bl	8002e38 <__NVIC_GetPriorityGrouping>
 8002fbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	68b9      	ldr	r1, [r7, #8]
 8002fc2:	6978      	ldr	r0, [r7, #20]
 8002fc4:	f7ff ff8e 	bl	8002ee4 <NVIC_EncodePriority>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fce:	4611      	mov	r1, r2
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff ff5d 	bl	8002e90 <__NVIC_SetPriority>
}
 8002fd6:	bf00      	nop
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b082      	sub	sp, #8
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff ff31 	bl	8002e54 <__NVIC_EnableIRQ>
}
 8002ff2:	bf00      	nop
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b082      	sub	sp, #8
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7ff ffa2 	bl	8002f4c <SysTick_Config>
 8003008:	4603      	mov	r3, r0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
	...

08003014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003014:	b480      	push	{r7}
 8003016:	b089      	sub	sp, #36	@ 0x24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003022:	2300      	movs	r3, #0
 8003024:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003026:	2300      	movs	r3, #0
 8003028:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800302a:	2300      	movs	r3, #0
 800302c:	61fb      	str	r3, [r7, #28]
 800302e:	e165      	b.n	80032fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003030:	2201      	movs	r2, #1
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	4013      	ands	r3, r2
 8003042:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	429a      	cmp	r2, r3
 800304a:	f040 8154 	bne.w	80032f6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	2b01      	cmp	r3, #1
 8003058:	d005      	beq.n	8003066 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003062:	2b02      	cmp	r3, #2
 8003064:	d130      	bne.n	80030c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	2203      	movs	r2, #3
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	43db      	mvns	r3, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4013      	ands	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4313      	orrs	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800309c:	2201      	movs	r2, #1
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	091b      	lsrs	r3, r3, #4
 80030b2:	f003 0201 	and.w	r2, r3, #1
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4313      	orrs	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 0303 	and.w	r3, r3, #3
 80030d0:	2b03      	cmp	r3, #3
 80030d2:	d017      	beq.n	8003104 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	2203      	movs	r2, #3
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	43db      	mvns	r3, r3
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4013      	ands	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 0303 	and.w	r3, r3, #3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d123      	bne.n	8003158 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	08da      	lsrs	r2, r3, #3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3208      	adds	r2, #8
 8003118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800311c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	220f      	movs	r2, #15
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	43db      	mvns	r3, r3
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4013      	ands	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4313      	orrs	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	08da      	lsrs	r2, r3, #3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	3208      	adds	r2, #8
 8003152:	69b9      	ldr	r1, [r7, #24]
 8003154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	2203      	movs	r2, #3
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	43db      	mvns	r3, r3
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	4013      	ands	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 0203 	and.w	r2, r3, #3
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4313      	orrs	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 80ae 	beq.w	80032f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800319a:	2300      	movs	r3, #0
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	4b5d      	ldr	r3, [pc, #372]	@ (8003314 <HAL_GPIO_Init+0x300>)
 80031a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a2:	4a5c      	ldr	r2, [pc, #368]	@ (8003314 <HAL_GPIO_Init+0x300>)
 80031a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80031aa:	4b5a      	ldr	r3, [pc, #360]	@ (8003314 <HAL_GPIO_Init+0x300>)
 80031ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031b6:	4a58      	ldr	r2, [pc, #352]	@ (8003318 <HAL_GPIO_Init+0x304>)
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	089b      	lsrs	r3, r3, #2
 80031bc:	3302      	adds	r3, #2
 80031be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	220f      	movs	r2, #15
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43db      	mvns	r3, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4013      	ands	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a4f      	ldr	r2, [pc, #316]	@ (800331c <HAL_GPIO_Init+0x308>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d025      	beq.n	800322e <HAL_GPIO_Init+0x21a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a4e      	ldr	r2, [pc, #312]	@ (8003320 <HAL_GPIO_Init+0x30c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d01f      	beq.n	800322a <HAL_GPIO_Init+0x216>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a4d      	ldr	r2, [pc, #308]	@ (8003324 <HAL_GPIO_Init+0x310>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d019      	beq.n	8003226 <HAL_GPIO_Init+0x212>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a4c      	ldr	r2, [pc, #304]	@ (8003328 <HAL_GPIO_Init+0x314>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d013      	beq.n	8003222 <HAL_GPIO_Init+0x20e>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a4b      	ldr	r2, [pc, #300]	@ (800332c <HAL_GPIO_Init+0x318>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d00d      	beq.n	800321e <HAL_GPIO_Init+0x20a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a4a      	ldr	r2, [pc, #296]	@ (8003330 <HAL_GPIO_Init+0x31c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d007      	beq.n	800321a <HAL_GPIO_Init+0x206>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a49      	ldr	r2, [pc, #292]	@ (8003334 <HAL_GPIO_Init+0x320>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d101      	bne.n	8003216 <HAL_GPIO_Init+0x202>
 8003212:	2306      	movs	r3, #6
 8003214:	e00c      	b.n	8003230 <HAL_GPIO_Init+0x21c>
 8003216:	2307      	movs	r3, #7
 8003218:	e00a      	b.n	8003230 <HAL_GPIO_Init+0x21c>
 800321a:	2305      	movs	r3, #5
 800321c:	e008      	b.n	8003230 <HAL_GPIO_Init+0x21c>
 800321e:	2304      	movs	r3, #4
 8003220:	e006      	b.n	8003230 <HAL_GPIO_Init+0x21c>
 8003222:	2303      	movs	r3, #3
 8003224:	e004      	b.n	8003230 <HAL_GPIO_Init+0x21c>
 8003226:	2302      	movs	r3, #2
 8003228:	e002      	b.n	8003230 <HAL_GPIO_Init+0x21c>
 800322a:	2301      	movs	r3, #1
 800322c:	e000      	b.n	8003230 <HAL_GPIO_Init+0x21c>
 800322e:	2300      	movs	r3, #0
 8003230:	69fa      	ldr	r2, [r7, #28]
 8003232:	f002 0203 	and.w	r2, r2, #3
 8003236:	0092      	lsls	r2, r2, #2
 8003238:	4093      	lsls	r3, r2
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4313      	orrs	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003240:	4935      	ldr	r1, [pc, #212]	@ (8003318 <HAL_GPIO_Init+0x304>)
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	089b      	lsrs	r3, r3, #2
 8003246:	3302      	adds	r3, #2
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800324e:	4b3a      	ldr	r3, [pc, #232]	@ (8003338 <HAL_GPIO_Init+0x324>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	43db      	mvns	r3, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4013      	ands	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	4313      	orrs	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003272:	4a31      	ldr	r2, [pc, #196]	@ (8003338 <HAL_GPIO_Init+0x324>)
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003278:	4b2f      	ldr	r3, [pc, #188]	@ (8003338 <HAL_GPIO_Init+0x324>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	43db      	mvns	r3, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4013      	ands	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	4313      	orrs	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800329c:	4a26      	ldr	r2, [pc, #152]	@ (8003338 <HAL_GPIO_Init+0x324>)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032a2:	4b25      	ldr	r3, [pc, #148]	@ (8003338 <HAL_GPIO_Init+0x324>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	43db      	mvns	r3, r3
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	4013      	ands	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003338 <HAL_GPIO_Init+0x324>)
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003338 <HAL_GPIO_Init+0x324>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	43db      	mvns	r3, r3
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4013      	ands	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032f0:	4a11      	ldr	r2, [pc, #68]	@ (8003338 <HAL_GPIO_Init+0x324>)
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	3301      	adds	r3, #1
 80032fa:	61fb      	str	r3, [r7, #28]
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	2b0f      	cmp	r3, #15
 8003300:	f67f ae96 	bls.w	8003030 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003304:	bf00      	nop
 8003306:	bf00      	nop
 8003308:	3724      	adds	r7, #36	@ 0x24
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40023800 	.word	0x40023800
 8003318:	40013800 	.word	0x40013800
 800331c:	40020000 	.word	0x40020000
 8003320:	40020400 	.word	0x40020400
 8003324:	40020800 	.word	0x40020800
 8003328:	40020c00 	.word	0x40020c00
 800332c:	40021000 	.word	0x40021000
 8003330:	40021400 	.word	0x40021400
 8003334:	40021800 	.word	0x40021800
 8003338:	40013c00 	.word	0x40013c00

0800333c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	460b      	mov	r3, r1
 8003346:	807b      	strh	r3, [r7, #2]
 8003348:	4613      	mov	r3, r2
 800334a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800334c:	787b      	ldrb	r3, [r7, #1]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003352:	887a      	ldrh	r2, [r7, #2]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003358:	e003      	b.n	8003362 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800335a:	887b      	ldrh	r3, [r7, #2]
 800335c:	041a      	lsls	r2, r3, #16
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	619a      	str	r2, [r3, #24]
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800336e:	b480      	push	{r7}
 8003370:	b085      	sub	sp, #20
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	460b      	mov	r3, r1
 8003378:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003380:	887a      	ldrh	r2, [r7, #2]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	4013      	ands	r3, r2
 8003386:	041a      	lsls	r2, r3, #16
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	43d9      	mvns	r1, r3
 800338c:	887b      	ldrh	r3, [r7, #2]
 800338e:	400b      	ands	r3, r1
 8003390:	431a      	orrs	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	619a      	str	r2, [r3, #24]
}
 8003396:	bf00      	nop
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
	...

080033a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80033ae:	4b08      	ldr	r3, [pc, #32]	@ (80033d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033b0:	695a      	ldr	r2, [r3, #20]
 80033b2:	88fb      	ldrh	r3, [r7, #6]
 80033b4:	4013      	ands	r3, r2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d006      	beq.n	80033c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033ba:	4a05      	ldr	r2, [pc, #20]	@ (80033d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033bc:	88fb      	ldrh	r3, [r7, #6]
 80033be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033c0:	88fb      	ldrh	r3, [r7, #6]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fe fc72 	bl	8001cac <HAL_GPIO_EXTI_Callback>
  }
}
 80033c8:	bf00      	nop
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40013c00 	.word	0x40013c00

080033d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af02      	add	r7, sp, #8
 80033da:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e108      	b.n	80035f8 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d106      	bne.n	8003406 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f7ff f8ff 	bl	8002604 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2203      	movs	r2, #3
 800340a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003414:	d102      	bne.n	800341c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4618      	mov	r0, r3
 8003422:	f002 fe15 	bl	8006050 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6818      	ldr	r0, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	7c1a      	ldrb	r2, [r3, #16]
 800342e:	f88d 2000 	strb.w	r2, [sp]
 8003432:	3304      	adds	r3, #4
 8003434:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003436:	f002 fda7 	bl	8005f88 <USB_CoreInit>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d005      	beq.n	800344c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2202      	movs	r2, #2
 8003444:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e0d5      	b.n	80035f8 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2100      	movs	r1, #0
 8003452:	4618      	mov	r0, r3
 8003454:	f002 fe0d 	bl	8006072 <USB_SetCurrentMode>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d005      	beq.n	800346a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2202      	movs	r2, #2
 8003462:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e0c6      	b.n	80035f8 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800346a:	2300      	movs	r3, #0
 800346c:	73fb      	strb	r3, [r7, #15]
 800346e:	e04a      	b.n	8003506 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003470:	7bfa      	ldrb	r2, [r7, #15]
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	4413      	add	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	3315      	adds	r3, #21
 8003480:	2201      	movs	r2, #1
 8003482:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003484:	7bfa      	ldrb	r2, [r7, #15]
 8003486:	6879      	ldr	r1, [r7, #4]
 8003488:	4613      	mov	r3, r2
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	4413      	add	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	3314      	adds	r3, #20
 8003494:	7bfa      	ldrb	r2, [r7, #15]
 8003496:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003498:	7bfa      	ldrb	r2, [r7, #15]
 800349a:	7bfb      	ldrb	r3, [r7, #15]
 800349c:	b298      	uxth	r0, r3
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	4613      	mov	r3, r2
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	4413      	add	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	332e      	adds	r3, #46	@ 0x2e
 80034ac:	4602      	mov	r2, r0
 80034ae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034b0:	7bfa      	ldrb	r2, [r7, #15]
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	4413      	add	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	3318      	adds	r3, #24
 80034c0:	2200      	movs	r2, #0
 80034c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034c4:	7bfa      	ldrb	r2, [r7, #15]
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	4613      	mov	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	4413      	add	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	331c      	adds	r3, #28
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034d8:	7bfa      	ldrb	r2, [r7, #15]
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	4613      	mov	r3, r2
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	4413      	add	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	3320      	adds	r3, #32
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80034ec:	7bfa      	ldrb	r2, [r7, #15]
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	4613      	mov	r3, r2
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	4413      	add	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	3324      	adds	r3, #36	@ 0x24
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003500:	7bfb      	ldrb	r3, [r7, #15]
 8003502:	3301      	adds	r3, #1
 8003504:	73fb      	strb	r3, [r7, #15]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	791b      	ldrb	r3, [r3, #4]
 800350a:	7bfa      	ldrb	r2, [r7, #15]
 800350c:	429a      	cmp	r2, r3
 800350e:	d3af      	bcc.n	8003470 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003510:	2300      	movs	r3, #0
 8003512:	73fb      	strb	r3, [r7, #15]
 8003514:	e044      	b.n	80035a0 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003516:	7bfa      	ldrb	r2, [r7, #15]
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	4413      	add	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003528:	2200      	movs	r2, #0
 800352a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800352c:	7bfa      	ldrb	r2, [r7, #15]
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	4413      	add	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800353e:	7bfa      	ldrb	r2, [r7, #15]
 8003540:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003542:	7bfa      	ldrb	r2, [r7, #15]
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	4413      	add	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003554:	2200      	movs	r2, #0
 8003556:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003558:	7bfa      	ldrb	r2, [r7, #15]
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	4613      	mov	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	4413      	add	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800356a:	2200      	movs	r2, #0
 800356c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800356e:	7bfa      	ldrb	r2, [r7, #15]
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	4413      	add	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	440b      	add	r3, r1
 800357c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003584:	7bfa      	ldrb	r2, [r7, #15]
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	4613      	mov	r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4413      	add	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	440b      	add	r3, r1
 8003592:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800359a:	7bfb      	ldrb	r3, [r7, #15]
 800359c:	3301      	adds	r3, #1
 800359e:	73fb      	strb	r3, [r7, #15]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	791b      	ldrb	r3, [r3, #4]
 80035a4:	7bfa      	ldrb	r2, [r7, #15]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d3b5      	bcc.n	8003516 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6818      	ldr	r0, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	7c1a      	ldrb	r2, [r3, #16]
 80035b2:	f88d 2000 	strb.w	r2, [sp]
 80035b6:	3304      	adds	r3, #4
 80035b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035ba:	f002 fda7 	bl	800610c <USB_DevInit>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d005      	beq.n	80035d0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e013      	b.n	80035f8 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	7b1b      	ldrb	r3, [r3, #12]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d102      	bne.n	80035ec <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f80a 	bl	8003600 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f002 ff62 	bl	80064ba <USB_DevDisconnect>

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800362e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003632:	f043 0303 	orr.w	r3, r3, #3
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e0cc      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800365c:	4b68      	ldr	r3, [pc, #416]	@ (8003800 <HAL_RCC_ClockConfig+0x1b8>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 030f 	and.w	r3, r3, #15
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	429a      	cmp	r2, r3
 8003668:	d90c      	bls.n	8003684 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366a:	4b65      	ldr	r3, [pc, #404]	@ (8003800 <HAL_RCC_ClockConfig+0x1b8>)
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	b2d2      	uxtb	r2, r2
 8003670:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003672:	4b63      	ldr	r3, [pc, #396]	@ (8003800 <HAL_RCC_ClockConfig+0x1b8>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d001      	beq.n	8003684 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e0b8      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d020      	beq.n	80036d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b00      	cmp	r3, #0
 800369a:	d005      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800369c:	4b59      	ldr	r3, [pc, #356]	@ (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	4a58      	ldr	r2, [pc, #352]	@ (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80036a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0308 	and.w	r3, r3, #8
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d005      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036b4:	4b53      	ldr	r3, [pc, #332]	@ (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	4a52      	ldr	r2, [pc, #328]	@ (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80036ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036c0:	4b50      	ldr	r3, [pc, #320]	@ (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	494d      	ldr	r1, [pc, #308]	@ (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d044      	beq.n	8003768 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d107      	bne.n	80036f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e6:	4b47      	ldr	r3, [pc, #284]	@ (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d119      	bne.n	8003726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e07f      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d003      	beq.n	8003706 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003702:	2b03      	cmp	r3, #3
 8003704:	d107      	bne.n	8003716 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003706:	4b3f      	ldr	r3, [pc, #252]	@ (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d109      	bne.n	8003726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e06f      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003716:	4b3b      	ldr	r3, [pc, #236]	@ (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e067      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003726:	4b37      	ldr	r3, [pc, #220]	@ (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f023 0203 	bic.w	r2, r3, #3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	4934      	ldr	r1, [pc, #208]	@ (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 8003734:	4313      	orrs	r3, r2
 8003736:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003738:	f7ff f8b8 	bl	80028ac <HAL_GetTick>
 800373c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373e:	e00a      	b.n	8003756 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003740:	f7ff f8b4 	bl	80028ac <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800374e:	4293      	cmp	r3, r2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e04f      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003756:	4b2b      	ldr	r3, [pc, #172]	@ (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 020c 	and.w	r2, r3, #12
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	429a      	cmp	r2, r3
 8003766:	d1eb      	bne.n	8003740 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003768:	4b25      	ldr	r3, [pc, #148]	@ (8003800 <HAL_RCC_ClockConfig+0x1b8>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 030f 	and.w	r3, r3, #15
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	d20c      	bcs.n	8003790 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003776:	4b22      	ldr	r3, [pc, #136]	@ (8003800 <HAL_RCC_ClockConfig+0x1b8>)
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800377e:	4b20      	ldr	r3, [pc, #128]	@ (8003800 <HAL_RCC_ClockConfig+0x1b8>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	429a      	cmp	r2, r3
 800378a:	d001      	beq.n	8003790 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e032      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b00      	cmp	r3, #0
 800379a:	d008      	beq.n	80037ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800379c:	4b19      	ldr	r3, [pc, #100]	@ (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	4916      	ldr	r1, [pc, #88]	@ (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d009      	beq.n	80037ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ba:	4b12      	ldr	r3, [pc, #72]	@ (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	490e      	ldr	r1, [pc, #56]	@ (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037ce:	f000 fb7f 	bl	8003ed0 <HAL_RCC_GetSysClockFreq>
 80037d2:	4602      	mov	r2, r0
 80037d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	091b      	lsrs	r3, r3, #4
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	490a      	ldr	r1, [pc, #40]	@ (8003808 <HAL_RCC_ClockConfig+0x1c0>)
 80037e0:	5ccb      	ldrb	r3, [r1, r3]
 80037e2:	fa22 f303 	lsr.w	r3, r2, r3
 80037e6:	4a09      	ldr	r2, [pc, #36]	@ (800380c <HAL_RCC_ClockConfig+0x1c4>)
 80037e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80037ea:	4b09      	ldr	r3, [pc, #36]	@ (8003810 <HAL_RCC_ClockConfig+0x1c8>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff f818 	bl	8002824 <HAL_InitTick>

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40023c00 	.word	0x40023c00
 8003804:	40023800 	.word	0x40023800
 8003808:	080084b0 	.word	0x080084b0
 800380c:	20000000 	.word	0x20000000
 8003810:	20000004 	.word	0x20000004

08003814 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003818:	4b03      	ldr	r3, [pc, #12]	@ (8003828 <HAL_RCC_GetHCLKFreq+0x14>)
 800381a:	681b      	ldr	r3, [r3, #0]
}
 800381c:	4618      	mov	r0, r3
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	20000000 	.word	0x20000000

0800382c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003830:	f7ff fff0 	bl	8003814 <HAL_RCC_GetHCLKFreq>
 8003834:	4602      	mov	r2, r0
 8003836:	4b05      	ldr	r3, [pc, #20]	@ (800384c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	0a9b      	lsrs	r3, r3, #10
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	4903      	ldr	r1, [pc, #12]	@ (8003850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003842:	5ccb      	ldrb	r3, [r1, r3]
 8003844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003848:	4618      	mov	r0, r3
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40023800 	.word	0x40023800
 8003850:	080084c0 	.word	0x080084c0

08003854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003858:	f7ff ffdc 	bl	8003814 <HAL_RCC_GetHCLKFreq>
 800385c:	4602      	mov	r2, r0
 800385e:	4b05      	ldr	r3, [pc, #20]	@ (8003874 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	0b5b      	lsrs	r3, r3, #13
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	4903      	ldr	r1, [pc, #12]	@ (8003878 <HAL_RCC_GetPCLK2Freq+0x24>)
 800386a:	5ccb      	ldrb	r3, [r1, r3]
 800386c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003870:	4618      	mov	r0, r3
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40023800 	.word	0x40023800
 8003878:	080084c0 	.word	0x080084c0

0800387c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b08c      	sub	sp, #48	@ 0x30
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8003888:	2300      	movs	r3, #0
 800388a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800388c:	2300      	movs	r3, #0
 800388e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003890:	2300      	movs	r3, #0
 8003892:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003894:	2300      	movs	r3, #0
 8003896:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d010      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80038b4:	4b6f      	ldr	r3, [pc, #444]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038ba:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c2:	496c      	ldr	r1, [pc, #432]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80038d2:	2301      	movs	r3, #1
 80038d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d010      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80038e2:	4b64      	ldr	r3, [pc, #400]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038e8:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038f0:	4960      	ldr	r1, [pc, #384]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d101      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003900:	2301      	movs	r3, #1
 8003902:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d017      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003910:	4b58      	ldr	r3, [pc, #352]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003912:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003916:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391e:	4955      	ldr	r1, [pc, #340]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003920:	4313      	orrs	r3, r2
 8003922:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800392e:	d101      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003930:	2301      	movs	r3, #1
 8003932:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800393c:	2301      	movs	r3, #1
 800393e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0308 	and.w	r3, r3, #8
 8003948:	2b00      	cmp	r3, #0
 800394a:	d017      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800394c:	4b49      	ldr	r3, [pc, #292]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800394e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003952:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800395a:	4946      	ldr	r1, [pc, #280]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800395c:	4313      	orrs	r3, r2
 800395e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003966:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800396a:	d101      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800396c:	2301      	movs	r3, #1
 800396e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003978:	2301      	movs	r3, #1
 800397a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0320 	and.w	r3, r3, #32
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 808a 	beq.w	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800398a:	2300      	movs	r3, #0
 800398c:	60bb      	str	r3, [r7, #8]
 800398e:	4b39      	ldr	r3, [pc, #228]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003992:	4a38      	ldr	r2, [pc, #224]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003994:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003998:	6413      	str	r3, [r2, #64]	@ 0x40
 800399a:	4b36      	ldr	r3, [pc, #216]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800399c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039a2:	60bb      	str	r3, [r7, #8]
 80039a4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80039a6:	4b34      	ldr	r3, [pc, #208]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a33      	ldr	r2, [pc, #204]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80039ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039b0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80039b2:	f7fe ff7b 	bl	80028ac <HAL_GetTick>
 80039b6:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80039b8:	e008      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ba:	f7fe ff77 	bl	80028ac <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e278      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80039cc:	4b2a      	ldr	r3, [pc, #168]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0f0      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039d8:	4b26      	ldr	r3, [pc, #152]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039e0:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039e2:	6a3b      	ldr	r3, [r7, #32]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d02f      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039f0:	6a3a      	ldr	r2, [r7, #32]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d028      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039f6:	4b1f      	ldr	r3, [pc, #124]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039fe:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a00:	4b1e      	ldr	r3, [pc, #120]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003a02:	2201      	movs	r2, #1
 8003a04:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a06:	4b1d      	ldr	r3, [pc, #116]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003a0c:	4a19      	ldr	r2, [pc, #100]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a0e:	6a3b      	ldr	r3, [r7, #32]
 8003a10:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a12:	4b18      	ldr	r3, [pc, #96]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d114      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003a1e:	f7fe ff45 	bl	80028ac <HAL_GetTick>
 8003a22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a24:	e00a      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a26:	f7fe ff41 	bl	80028ac <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e240      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0ee      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a54:	d114      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003a56:	4b07      	ldr	r3, [pc, #28]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a62:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003a66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a6a:	4902      	ldr	r1, [pc, #8]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	608b      	str	r3, [r1, #8]
 8003a70:	e00c      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003a72:	bf00      	nop
 8003a74:	40023800 	.word	0x40023800
 8003a78:	40007000 	.word	0x40007000
 8003a7c:	42470e40 	.word	0x42470e40
 8003a80:	4b4a      	ldr	r3, [pc, #296]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	4a49      	ldr	r2, [pc, #292]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a86:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003a8a:	6093      	str	r3, [r2, #8]
 8003a8c:	4b47      	ldr	r3, [pc, #284]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a8e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a98:	4944      	ldr	r1, [pc, #272]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0310 	and.w	r3, r3, #16
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d004      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003ab0:	4b3f      	ldr	r3, [pc, #252]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003ab2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00a      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003ac0:	4b3a      	ldr	r3, [pc, #232]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ac6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ace:	4937      	ldr	r1, [pc, #220]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00a      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ae2:	4b32      	ldr	r3, [pc, #200]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ae8:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003af0:	492e      	ldr	r1, [pc, #184]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d011      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003b04:	4b29      	ldr	r3, [pc, #164]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b0a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b12:	4926      	ldr	r1, [pc, #152]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b22:	d101      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003b24:	2301      	movs	r3, #1
 8003b26:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00a      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003b34:	4b1d      	ldr	r3, [pc, #116]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b3a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b42:	491a      	ldr	r1, [pc, #104]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d011      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003b56:	4b15      	ldr	r3, [pc, #84]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b5c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b64:	4911      	ldr	r1, [pc, #68]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b74:	d101      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003b76:	2301      	movs	r3, #1
 8003b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d005      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b88:	f040 80ff 	bne.w	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b8c:	4b09      	ldr	r3, [pc, #36]	@ (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b92:	f7fe fe8b 	bl	80028ac <HAL_GetTick>
 8003b96:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b98:	e00e      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b9a:	f7fe fe87 	bl	80028ac <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d907      	bls.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e188      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	424711e0 	.word	0x424711e0
 8003bb4:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bb8:	4b7e      	ldr	r3, [pc, #504]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1ea      	bne.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d009      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d028      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d124      	bne.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003bec:	4b71      	ldr	r3, [pc, #452]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bf2:	0c1b      	lsrs	r3, r3, #16
 8003bf4:	f003 0303 	and.w	r3, r3, #3
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003bfe:	4b6d      	ldr	r3, [pc, #436]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c04:	0e1b      	lsrs	r3, r3, #24
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	019b      	lsls	r3, r3, #6
 8003c16:	431a      	orrs	r2, r3
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	085b      	lsrs	r3, r3, #1
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	041b      	lsls	r3, r3, #16
 8003c20:	431a      	orrs	r2, r3
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	061b      	lsls	r3, r3, #24
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	071b      	lsls	r3, r3, #28
 8003c2e:	4961      	ldr	r1, [pc, #388]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0304 	and.w	r3, r3, #4
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d004      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c4a:	d00a      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d035      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c60:	d130      	bne.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003c62:	4b54      	ldr	r3, [pc, #336]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c68:	0c1b      	lsrs	r3, r3, #16
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	3301      	adds	r3, #1
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c74:	4b4f      	ldr	r3, [pc, #316]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c7a:	0f1b      	lsrs	r3, r3, #28
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	019b      	lsls	r3, r3, #6
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	085b      	lsrs	r3, r3, #1
 8003c92:	3b01      	subs	r3, #1
 8003c94:	041b      	lsls	r3, r3, #16
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	061b      	lsls	r3, r3, #24
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	071b      	lsls	r3, r3, #28
 8003ca4:	4943      	ldr	r1, [pc, #268]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003cac:	4b41      	ldr	r3, [pc, #260]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003cae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cb2:	f023 021f 	bic.w	r2, r3, #31
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	493d      	ldr	r1, [pc, #244]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d029      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cd8:	d124      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003cda:	4b36      	ldr	r3, [pc, #216]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ce0:	0c1b      	lsrs	r3, r3, #16
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003cec:	4b31      	ldr	r3, [pc, #196]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cf2:	0f1b      	lsrs	r3, r3, #28
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	019b      	lsls	r3, r3, #6
 8003d04:	431a      	orrs	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	085b      	lsrs	r3, r3, #1
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	041b      	lsls	r3, r3, #16
 8003d10:	431a      	orrs	r2, r3
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	061b      	lsls	r3, r3, #24
 8003d16:	431a      	orrs	r2, r3
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	071b      	lsls	r3, r3, #28
 8003d1c:	4925      	ldr	r1, [pc, #148]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d016      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	019b      	lsls	r3, r3, #6
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	085b      	lsrs	r3, r3, #1
 8003d42:	3b01      	subs	r3, #1
 8003d44:	041b      	lsls	r3, r3, #16
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	061b      	lsls	r3, r3, #24
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	071b      	lsls	r3, r3, #28
 8003d56:	4917      	ldr	r1, [pc, #92]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d5e:	4b16      	ldr	r3, [pc, #88]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003d60:	2201      	movs	r2, #1
 8003d62:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d64:	f7fe fda2 	bl	80028ac <HAL_GetTick>
 8003d68:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d6c:	f7fe fd9e 	bl	80028ac <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e09f      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0f0      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8003d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	f040 8095 	bne.w	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d92:	4b0a      	ldr	r3, [pc, #40]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d98:	f7fe fd88 	bl	80028ac <HAL_GetTick>
 8003d9c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d9e:	e00f      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003da0:	f7fe fd84 	bl	80028ac <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d908      	bls.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e085      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003db2:	bf00      	nop
 8003db4:	40023800 	.word	0x40023800
 8003db8:	42470068 	.word	0x42470068
 8003dbc:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003dc0:	4b41      	ldr	r3, [pc, #260]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003dc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dcc:	d0e8      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0304 	and.w	r3, r3, #4
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d009      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d02b      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d127      	bne.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003df6:	4b34      	ldr	r3, [pc, #208]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dfc:	0c1b      	lsrs	r3, r3, #16
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	3301      	adds	r3, #1
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	699a      	ldr	r2, [r3, #24]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	019b      	lsls	r3, r3, #6
 8003e12:	431a      	orrs	r2, r3
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	085b      	lsrs	r3, r3, #1
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	041b      	lsls	r3, r3, #16
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e22:	061b      	lsls	r3, r3, #24
 8003e24:	4928      	ldr	r1, [pc, #160]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e2c:	4b26      	ldr	r3, [pc, #152]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e32:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	021b      	lsls	r3, r3, #8
 8003e3e:	4922      	ldr	r1, [pc, #136]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d01d      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e5a:	d118      	bne.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e62:	0e1b      	lsrs	r3, r3, #24
 8003e64:	f003 030f 	and.w	r3, r3, #15
 8003e68:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	699a      	ldr	r2, [r3, #24]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	019b      	lsls	r3, r3, #6
 8003e74:	431a      	orrs	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	085b      	lsrs	r3, r3, #1
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	041b      	lsls	r3, r3, #16
 8003e80:	431a      	orrs	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	061b      	lsls	r3, r3, #24
 8003e86:	4910      	ldr	r1, [pc, #64]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003e90:	2201      	movs	r2, #1
 8003e92:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e94:	f7fe fd0a 	bl	80028ac <HAL_GetTick>
 8003e98:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e9a:	e008      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e9c:	f7fe fd06 	bl	80028ac <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e007      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003eae:	4b06      	ldr	r3, [pc, #24]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003eb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003eba:	d1ef      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3730      	adds	r7, #48	@ 0x30
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	40023800 	.word	0x40023800
 8003ecc:	42470070 	.word	0x42470070

08003ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ed4:	b0ae      	sub	sp, #184	@ 0xb8
 8003ed6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ef6:	4bcb      	ldr	r3, [pc, #812]	@ (8004224 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 030c 	and.w	r3, r3, #12
 8003efe:	2b0c      	cmp	r3, #12
 8003f00:	f200 8206 	bhi.w	8004310 <HAL_RCC_GetSysClockFreq+0x440>
 8003f04:	a201      	add	r2, pc, #4	@ (adr r2, 8003f0c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0a:	bf00      	nop
 8003f0c:	08003f41 	.word	0x08003f41
 8003f10:	08004311 	.word	0x08004311
 8003f14:	08004311 	.word	0x08004311
 8003f18:	08004311 	.word	0x08004311
 8003f1c:	08003f49 	.word	0x08003f49
 8003f20:	08004311 	.word	0x08004311
 8003f24:	08004311 	.word	0x08004311
 8003f28:	08004311 	.word	0x08004311
 8003f2c:	08003f51 	.word	0x08003f51
 8003f30:	08004311 	.word	0x08004311
 8003f34:	08004311 	.word	0x08004311
 8003f38:	08004311 	.word	0x08004311
 8003f3c:	08004141 	.word	0x08004141
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f40:	4bb9      	ldr	r3, [pc, #740]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x358>)
 8003f42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f46:	e1e7      	b.n	8004318 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f48:	4bb8      	ldr	r3, [pc, #736]	@ (800422c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003f4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f4e:	e1e3      	b.n	8004318 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f50:	4bb4      	ldr	r3, [pc, #720]	@ (8004224 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f5c:	4bb1      	ldr	r3, [pc, #708]	@ (8004224 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d071      	beq.n	800404c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f68:	4bae      	ldr	r3, [pc, #696]	@ (8004224 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	099b      	lsrs	r3, r3, #6
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f74:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003f78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f84:	2300      	movs	r3, #0
 8003f86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003f8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003f8e:	4622      	mov	r2, r4
 8003f90:	462b      	mov	r3, r5
 8003f92:	f04f 0000 	mov.w	r0, #0
 8003f96:	f04f 0100 	mov.w	r1, #0
 8003f9a:	0159      	lsls	r1, r3, #5
 8003f9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fa0:	0150      	lsls	r0, r2, #5
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	4621      	mov	r1, r4
 8003fa8:	1a51      	subs	r1, r2, r1
 8003faa:	6439      	str	r1, [r7, #64]	@ 0x40
 8003fac:	4629      	mov	r1, r5
 8003fae:	eb63 0301 	sbc.w	r3, r3, r1
 8003fb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003fc0:	4649      	mov	r1, r9
 8003fc2:	018b      	lsls	r3, r1, #6
 8003fc4:	4641      	mov	r1, r8
 8003fc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fca:	4641      	mov	r1, r8
 8003fcc:	018a      	lsls	r2, r1, #6
 8003fce:	4641      	mov	r1, r8
 8003fd0:	1a51      	subs	r1, r2, r1
 8003fd2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003fd4:	4649      	mov	r1, r9
 8003fd6:	eb63 0301 	sbc.w	r3, r3, r1
 8003fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fdc:	f04f 0200 	mov.w	r2, #0
 8003fe0:	f04f 0300 	mov.w	r3, #0
 8003fe4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003fe8:	4649      	mov	r1, r9
 8003fea:	00cb      	lsls	r3, r1, #3
 8003fec:	4641      	mov	r1, r8
 8003fee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ff2:	4641      	mov	r1, r8
 8003ff4:	00ca      	lsls	r2, r1, #3
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	4622      	mov	r2, r4
 8003ffe:	189b      	adds	r3, r3, r2
 8004000:	633b      	str	r3, [r7, #48]	@ 0x30
 8004002:	462b      	mov	r3, r5
 8004004:	460a      	mov	r2, r1
 8004006:	eb42 0303 	adc.w	r3, r2, r3
 800400a:	637b      	str	r3, [r7, #52]	@ 0x34
 800400c:	f04f 0200 	mov.w	r2, #0
 8004010:	f04f 0300 	mov.w	r3, #0
 8004014:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004018:	4629      	mov	r1, r5
 800401a:	024b      	lsls	r3, r1, #9
 800401c:	4621      	mov	r1, r4
 800401e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004022:	4621      	mov	r1, r4
 8004024:	024a      	lsls	r2, r1, #9
 8004026:	4610      	mov	r0, r2
 8004028:	4619      	mov	r1, r3
 800402a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800402e:	2200      	movs	r2, #0
 8004030:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004034:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004038:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800403c:	f7fc fdc8 	bl	8000bd0 <__aeabi_uldivmod>
 8004040:	4602      	mov	r2, r0
 8004042:	460b      	mov	r3, r1
 8004044:	4613      	mov	r3, r2
 8004046:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800404a:	e067      	b.n	800411c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800404c:	4b75      	ldr	r3, [pc, #468]	@ (8004224 <HAL_RCC_GetSysClockFreq+0x354>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	099b      	lsrs	r3, r3, #6
 8004052:	2200      	movs	r2, #0
 8004054:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004058:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800405c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004064:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004066:	2300      	movs	r3, #0
 8004068:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800406a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800406e:	4622      	mov	r2, r4
 8004070:	462b      	mov	r3, r5
 8004072:	f04f 0000 	mov.w	r0, #0
 8004076:	f04f 0100 	mov.w	r1, #0
 800407a:	0159      	lsls	r1, r3, #5
 800407c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004080:	0150      	lsls	r0, r2, #5
 8004082:	4602      	mov	r2, r0
 8004084:	460b      	mov	r3, r1
 8004086:	4621      	mov	r1, r4
 8004088:	1a51      	subs	r1, r2, r1
 800408a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800408c:	4629      	mov	r1, r5
 800408e:	eb63 0301 	sbc.w	r3, r3, r1
 8004092:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004094:	f04f 0200 	mov.w	r2, #0
 8004098:	f04f 0300 	mov.w	r3, #0
 800409c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80040a0:	4649      	mov	r1, r9
 80040a2:	018b      	lsls	r3, r1, #6
 80040a4:	4641      	mov	r1, r8
 80040a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040aa:	4641      	mov	r1, r8
 80040ac:	018a      	lsls	r2, r1, #6
 80040ae:	4641      	mov	r1, r8
 80040b0:	ebb2 0a01 	subs.w	sl, r2, r1
 80040b4:	4649      	mov	r1, r9
 80040b6:	eb63 0b01 	sbc.w	fp, r3, r1
 80040ba:	f04f 0200 	mov.w	r2, #0
 80040be:	f04f 0300 	mov.w	r3, #0
 80040c2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040c6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040ce:	4692      	mov	sl, r2
 80040d0:	469b      	mov	fp, r3
 80040d2:	4623      	mov	r3, r4
 80040d4:	eb1a 0303 	adds.w	r3, sl, r3
 80040d8:	623b      	str	r3, [r7, #32]
 80040da:	462b      	mov	r3, r5
 80040dc:	eb4b 0303 	adc.w	r3, fp, r3
 80040e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80040e2:	f04f 0200 	mov.w	r2, #0
 80040e6:	f04f 0300 	mov.w	r3, #0
 80040ea:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80040ee:	4629      	mov	r1, r5
 80040f0:	028b      	lsls	r3, r1, #10
 80040f2:	4621      	mov	r1, r4
 80040f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040f8:	4621      	mov	r1, r4
 80040fa:	028a      	lsls	r2, r1, #10
 80040fc:	4610      	mov	r0, r2
 80040fe:	4619      	mov	r1, r3
 8004100:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004104:	2200      	movs	r2, #0
 8004106:	673b      	str	r3, [r7, #112]	@ 0x70
 8004108:	677a      	str	r2, [r7, #116]	@ 0x74
 800410a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800410e:	f7fc fd5f 	bl	8000bd0 <__aeabi_uldivmod>
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	4613      	mov	r3, r2
 8004118:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800411c:	4b41      	ldr	r3, [pc, #260]	@ (8004224 <HAL_RCC_GetSysClockFreq+0x354>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	0c1b      	lsrs	r3, r3, #16
 8004122:	f003 0303 	and.w	r3, r3, #3
 8004126:	3301      	adds	r3, #1
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800412e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004132:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004136:	fbb2 f3f3 	udiv	r3, r2, r3
 800413a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800413e:	e0eb      	b.n	8004318 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004140:	4b38      	ldr	r3, [pc, #224]	@ (8004224 <HAL_RCC_GetSysClockFreq+0x354>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004148:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800414c:	4b35      	ldr	r3, [pc, #212]	@ (8004224 <HAL_RCC_GetSysClockFreq+0x354>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d06b      	beq.n	8004230 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004158:	4b32      	ldr	r3, [pc, #200]	@ (8004224 <HAL_RCC_GetSysClockFreq+0x354>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	099b      	lsrs	r3, r3, #6
 800415e:	2200      	movs	r2, #0
 8004160:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004162:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004164:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800416a:	663b      	str	r3, [r7, #96]	@ 0x60
 800416c:	2300      	movs	r3, #0
 800416e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004170:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004174:	4622      	mov	r2, r4
 8004176:	462b      	mov	r3, r5
 8004178:	f04f 0000 	mov.w	r0, #0
 800417c:	f04f 0100 	mov.w	r1, #0
 8004180:	0159      	lsls	r1, r3, #5
 8004182:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004186:	0150      	lsls	r0, r2, #5
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4621      	mov	r1, r4
 800418e:	1a51      	subs	r1, r2, r1
 8004190:	61b9      	str	r1, [r7, #24]
 8004192:	4629      	mov	r1, r5
 8004194:	eb63 0301 	sbc.w	r3, r3, r1
 8004198:	61fb      	str	r3, [r7, #28]
 800419a:	f04f 0200 	mov.w	r2, #0
 800419e:	f04f 0300 	mov.w	r3, #0
 80041a2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80041a6:	4659      	mov	r1, fp
 80041a8:	018b      	lsls	r3, r1, #6
 80041aa:	4651      	mov	r1, sl
 80041ac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041b0:	4651      	mov	r1, sl
 80041b2:	018a      	lsls	r2, r1, #6
 80041b4:	4651      	mov	r1, sl
 80041b6:	ebb2 0801 	subs.w	r8, r2, r1
 80041ba:	4659      	mov	r1, fp
 80041bc:	eb63 0901 	sbc.w	r9, r3, r1
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	f04f 0300 	mov.w	r3, #0
 80041c8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041d0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041d4:	4690      	mov	r8, r2
 80041d6:	4699      	mov	r9, r3
 80041d8:	4623      	mov	r3, r4
 80041da:	eb18 0303 	adds.w	r3, r8, r3
 80041de:	613b      	str	r3, [r7, #16]
 80041e0:	462b      	mov	r3, r5
 80041e2:	eb49 0303 	adc.w	r3, r9, r3
 80041e6:	617b      	str	r3, [r7, #20]
 80041e8:	f04f 0200 	mov.w	r2, #0
 80041ec:	f04f 0300 	mov.w	r3, #0
 80041f0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80041f4:	4629      	mov	r1, r5
 80041f6:	024b      	lsls	r3, r1, #9
 80041f8:	4621      	mov	r1, r4
 80041fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041fe:	4621      	mov	r1, r4
 8004200:	024a      	lsls	r2, r1, #9
 8004202:	4610      	mov	r0, r2
 8004204:	4619      	mov	r1, r3
 8004206:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800420a:	2200      	movs	r2, #0
 800420c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800420e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004210:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004214:	f7fc fcdc 	bl	8000bd0 <__aeabi_uldivmod>
 8004218:	4602      	mov	r2, r0
 800421a:	460b      	mov	r3, r1
 800421c:	4613      	mov	r3, r2
 800421e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004222:	e065      	b.n	80042f0 <HAL_RCC_GetSysClockFreq+0x420>
 8004224:	40023800 	.word	0x40023800
 8004228:	00f42400 	.word	0x00f42400
 800422c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004230:	4b3d      	ldr	r3, [pc, #244]	@ (8004328 <HAL_RCC_GetSysClockFreq+0x458>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	099b      	lsrs	r3, r3, #6
 8004236:	2200      	movs	r2, #0
 8004238:	4618      	mov	r0, r3
 800423a:	4611      	mov	r1, r2
 800423c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004240:	653b      	str	r3, [r7, #80]	@ 0x50
 8004242:	2300      	movs	r3, #0
 8004244:	657b      	str	r3, [r7, #84]	@ 0x54
 8004246:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800424a:	4642      	mov	r2, r8
 800424c:	464b      	mov	r3, r9
 800424e:	f04f 0000 	mov.w	r0, #0
 8004252:	f04f 0100 	mov.w	r1, #0
 8004256:	0159      	lsls	r1, r3, #5
 8004258:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800425c:	0150      	lsls	r0, r2, #5
 800425e:	4602      	mov	r2, r0
 8004260:	460b      	mov	r3, r1
 8004262:	4641      	mov	r1, r8
 8004264:	1a51      	subs	r1, r2, r1
 8004266:	60b9      	str	r1, [r7, #8]
 8004268:	4649      	mov	r1, r9
 800426a:	eb63 0301 	sbc.w	r3, r3, r1
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	f04f 0200 	mov.w	r2, #0
 8004274:	f04f 0300 	mov.w	r3, #0
 8004278:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800427c:	4659      	mov	r1, fp
 800427e:	018b      	lsls	r3, r1, #6
 8004280:	4651      	mov	r1, sl
 8004282:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004286:	4651      	mov	r1, sl
 8004288:	018a      	lsls	r2, r1, #6
 800428a:	4651      	mov	r1, sl
 800428c:	1a54      	subs	r4, r2, r1
 800428e:	4659      	mov	r1, fp
 8004290:	eb63 0501 	sbc.w	r5, r3, r1
 8004294:	f04f 0200 	mov.w	r2, #0
 8004298:	f04f 0300 	mov.w	r3, #0
 800429c:	00eb      	lsls	r3, r5, #3
 800429e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042a2:	00e2      	lsls	r2, r4, #3
 80042a4:	4614      	mov	r4, r2
 80042a6:	461d      	mov	r5, r3
 80042a8:	4643      	mov	r3, r8
 80042aa:	18e3      	adds	r3, r4, r3
 80042ac:	603b      	str	r3, [r7, #0]
 80042ae:	464b      	mov	r3, r9
 80042b0:	eb45 0303 	adc.w	r3, r5, r3
 80042b4:	607b      	str	r3, [r7, #4]
 80042b6:	f04f 0200 	mov.w	r2, #0
 80042ba:	f04f 0300 	mov.w	r3, #0
 80042be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042c2:	4629      	mov	r1, r5
 80042c4:	028b      	lsls	r3, r1, #10
 80042c6:	4621      	mov	r1, r4
 80042c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042cc:	4621      	mov	r1, r4
 80042ce:	028a      	lsls	r2, r1, #10
 80042d0:	4610      	mov	r0, r2
 80042d2:	4619      	mov	r1, r3
 80042d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80042d8:	2200      	movs	r2, #0
 80042da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042dc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80042de:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80042e2:	f7fc fc75 	bl	8000bd0 <__aeabi_uldivmod>
 80042e6:	4602      	mov	r2, r0
 80042e8:	460b      	mov	r3, r1
 80042ea:	4613      	mov	r3, r2
 80042ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80042f0:	4b0d      	ldr	r3, [pc, #52]	@ (8004328 <HAL_RCC_GetSysClockFreq+0x458>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	0f1b      	lsrs	r3, r3, #28
 80042f6:	f003 0307 	and.w	r3, r3, #7
 80042fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80042fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004302:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004306:	fbb2 f3f3 	udiv	r3, r2, r3
 800430a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800430e:	e003      	b.n	8004318 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004310:	4b06      	ldr	r3, [pc, #24]	@ (800432c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004312:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004316:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004318:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800431c:	4618      	mov	r0, r3
 800431e:	37b8      	adds	r7, #184	@ 0xb8
 8004320:	46bd      	mov	sp, r7
 8004322:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004326:	bf00      	nop
 8004328:	40023800 	.word	0x40023800
 800432c:	00f42400 	.word	0x00f42400

08004330 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e28d      	b.n	800485e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 8083 	beq.w	8004456 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004350:	4b94      	ldr	r3, [pc, #592]	@ (80045a4 <HAL_RCC_OscConfig+0x274>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f003 030c 	and.w	r3, r3, #12
 8004358:	2b04      	cmp	r3, #4
 800435a:	d019      	beq.n	8004390 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800435c:	4b91      	ldr	r3, [pc, #580]	@ (80045a4 <HAL_RCC_OscConfig+0x274>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f003 030c 	and.w	r3, r3, #12
        || \
 8004364:	2b08      	cmp	r3, #8
 8004366:	d106      	bne.n	8004376 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004368:	4b8e      	ldr	r3, [pc, #568]	@ (80045a4 <HAL_RCC_OscConfig+0x274>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004370:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004374:	d00c      	beq.n	8004390 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004376:	4b8b      	ldr	r3, [pc, #556]	@ (80045a4 <HAL_RCC_OscConfig+0x274>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800437e:	2b0c      	cmp	r3, #12
 8004380:	d112      	bne.n	80043a8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004382:	4b88      	ldr	r3, [pc, #544]	@ (80045a4 <HAL_RCC_OscConfig+0x274>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800438a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800438e:	d10b      	bne.n	80043a8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004390:	4b84      	ldr	r3, [pc, #528]	@ (80045a4 <HAL_RCC_OscConfig+0x274>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d05b      	beq.n	8004454 <HAL_RCC_OscConfig+0x124>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d157      	bne.n	8004454 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e25a      	b.n	800485e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043b0:	d106      	bne.n	80043c0 <HAL_RCC_OscConfig+0x90>
 80043b2:	4b7c      	ldr	r3, [pc, #496]	@ (80045a4 <HAL_RCC_OscConfig+0x274>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a7b      	ldr	r2, [pc, #492]	@ (80045a4 <HAL_RCC_OscConfig+0x274>)
 80043b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	e01d      	b.n	80043fc <HAL_RCC_OscConfig+0xcc>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043c8:	d10c      	bne.n	80043e4 <HAL_RCC_OscConfig+0xb4>
 80043ca:	4b76      	ldr	r3, [pc, #472]	@ (80045a4 <HAL_RCC_OscConfig+0x274>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a75      	ldr	r2, [pc, #468]	@ (80045a4 <HAL_RCC_OscConfig+0x274>)
 80043d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043d4:	6013      	str	r3, [r2, #0]
 80043d6:	4b73      	ldr	r3, [pc, #460]	@ (80045a4 <HAL_RCC_OscConfig+0x274>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a72      	ldr	r2, [pc, #456]	@ (80045a4 <HAL_RCC_OscConfig+0x274>)
 80043dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	e00b      	b.n	80043fc <HAL_RCC_OscConfig+0xcc>
 80043e4:	4b6f      	ldr	r3, [pc, #444]	@ (80045a4 <HAL_RCC_OscConfig+0x274>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a6e      	ldr	r2, [pc, #440]	@ (80045a4 <HAL_RCC_OscConfig+0x274>)
 80043ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	4b6c      	ldr	r3, [pc, #432]	@ (80045a4 <HAL_RCC_OscConfig+0x274>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a6b      	ldr	r2, [pc, #428]	@ (80045a4 <HAL_RCC_OscConfig+0x274>)
 80043f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d013      	beq.n	800442c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004404:	f7fe fa52 	bl	80028ac <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800440c:	f7fe fa4e 	bl	80028ac <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b64      	cmp	r3, #100	@ 0x64
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e21f      	b.n	800485e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800441e:	4b61      	ldr	r3, [pc, #388]	@ (80045a4 <HAL_RCC_OscConfig+0x274>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0f0      	beq.n	800440c <HAL_RCC_OscConfig+0xdc>
 800442a:	e014      	b.n	8004456 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442c:	f7fe fa3e 	bl	80028ac <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004434:	f7fe fa3a 	bl	80028ac <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b64      	cmp	r3, #100	@ 0x64
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e20b      	b.n	800485e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004446:	4b57      	ldr	r3, [pc, #348]	@ (80045a4 <HAL_RCC_OscConfig+0x274>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1f0      	bne.n	8004434 <HAL_RCC_OscConfig+0x104>
 8004452:	e000      	b.n	8004456 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d06f      	beq.n	8004542 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004462:	4b50      	ldr	r3, [pc, #320]	@ (80045a4 <HAL_RCC_OscConfig+0x274>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 030c 	and.w	r3, r3, #12
 800446a:	2b00      	cmp	r3, #0
 800446c:	d017      	beq.n	800449e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800446e:	4b4d      	ldr	r3, [pc, #308]	@ (80045a4 <HAL_RCC_OscConfig+0x274>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 030c 	and.w	r3, r3, #12
        || \
 8004476:	2b08      	cmp	r3, #8
 8004478:	d105      	bne.n	8004486 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800447a:	4b4a      	ldr	r3, [pc, #296]	@ (80045a4 <HAL_RCC_OscConfig+0x274>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00b      	beq.n	800449e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004486:	4b47      	ldr	r3, [pc, #284]	@ (80045a4 <HAL_RCC_OscConfig+0x274>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800448e:	2b0c      	cmp	r3, #12
 8004490:	d11c      	bne.n	80044cc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004492:	4b44      	ldr	r3, [pc, #272]	@ (80045a4 <HAL_RCC_OscConfig+0x274>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d116      	bne.n	80044cc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800449e:	4b41      	ldr	r3, [pc, #260]	@ (80045a4 <HAL_RCC_OscConfig+0x274>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d005      	beq.n	80044b6 <HAL_RCC_OscConfig+0x186>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d001      	beq.n	80044b6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e1d3      	b.n	800485e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b6:	4b3b      	ldr	r3, [pc, #236]	@ (80045a4 <HAL_RCC_OscConfig+0x274>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	4937      	ldr	r1, [pc, #220]	@ (80045a4 <HAL_RCC_OscConfig+0x274>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ca:	e03a      	b.n	8004542 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d020      	beq.n	8004516 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044d4:	4b34      	ldr	r3, [pc, #208]	@ (80045a8 <HAL_RCC_OscConfig+0x278>)
 80044d6:	2201      	movs	r2, #1
 80044d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044da:	f7fe f9e7 	bl	80028ac <HAL_GetTick>
 80044de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044e0:	e008      	b.n	80044f4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044e2:	f7fe f9e3 	bl	80028ac <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d901      	bls.n	80044f4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e1b4      	b.n	800485e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044f4:	4b2b      	ldr	r3, [pc, #172]	@ (80045a4 <HAL_RCC_OscConfig+0x274>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d0f0      	beq.n	80044e2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004500:	4b28      	ldr	r3, [pc, #160]	@ (80045a4 <HAL_RCC_OscConfig+0x274>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	4925      	ldr	r1, [pc, #148]	@ (80045a4 <HAL_RCC_OscConfig+0x274>)
 8004510:	4313      	orrs	r3, r2
 8004512:	600b      	str	r3, [r1, #0]
 8004514:	e015      	b.n	8004542 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004516:	4b24      	ldr	r3, [pc, #144]	@ (80045a8 <HAL_RCC_OscConfig+0x278>)
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451c:	f7fe f9c6 	bl	80028ac <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004524:	f7fe f9c2 	bl	80028ac <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e193      	b.n	800485e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004536:	4b1b      	ldr	r3, [pc, #108]	@ (80045a4 <HAL_RCC_OscConfig+0x274>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1f0      	bne.n	8004524 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0308 	and.w	r3, r3, #8
 800454a:	2b00      	cmp	r3, #0
 800454c:	d036      	beq.n	80045bc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d016      	beq.n	8004584 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004556:	4b15      	ldr	r3, [pc, #84]	@ (80045ac <HAL_RCC_OscConfig+0x27c>)
 8004558:	2201      	movs	r2, #1
 800455a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800455c:	f7fe f9a6 	bl	80028ac <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004564:	f7fe f9a2 	bl	80028ac <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e173      	b.n	800485e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004576:	4b0b      	ldr	r3, [pc, #44]	@ (80045a4 <HAL_RCC_OscConfig+0x274>)
 8004578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0f0      	beq.n	8004564 <HAL_RCC_OscConfig+0x234>
 8004582:	e01b      	b.n	80045bc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004584:	4b09      	ldr	r3, [pc, #36]	@ (80045ac <HAL_RCC_OscConfig+0x27c>)
 8004586:	2200      	movs	r2, #0
 8004588:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800458a:	f7fe f98f 	bl	80028ac <HAL_GetTick>
 800458e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004590:	e00e      	b.n	80045b0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004592:	f7fe f98b 	bl	80028ac <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d907      	bls.n	80045b0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e15c      	b.n	800485e <HAL_RCC_OscConfig+0x52e>
 80045a4:	40023800 	.word	0x40023800
 80045a8:	42470000 	.word	0x42470000
 80045ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045b0:	4b8a      	ldr	r3, [pc, #552]	@ (80047dc <HAL_RCC_OscConfig+0x4ac>)
 80045b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1ea      	bne.n	8004592 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 8097 	beq.w	80046f8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ca:	2300      	movs	r3, #0
 80045cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045ce:	4b83      	ldr	r3, [pc, #524]	@ (80047dc <HAL_RCC_OscConfig+0x4ac>)
 80045d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10f      	bne.n	80045fa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045da:	2300      	movs	r3, #0
 80045dc:	60bb      	str	r3, [r7, #8]
 80045de:	4b7f      	ldr	r3, [pc, #508]	@ (80047dc <HAL_RCC_OscConfig+0x4ac>)
 80045e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e2:	4a7e      	ldr	r2, [pc, #504]	@ (80047dc <HAL_RCC_OscConfig+0x4ac>)
 80045e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80045ea:	4b7c      	ldr	r3, [pc, #496]	@ (80047dc <HAL_RCC_OscConfig+0x4ac>)
 80045ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045f2:	60bb      	str	r3, [r7, #8]
 80045f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045f6:	2301      	movs	r3, #1
 80045f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045fa:	4b79      	ldr	r3, [pc, #484]	@ (80047e0 <HAL_RCC_OscConfig+0x4b0>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004602:	2b00      	cmp	r3, #0
 8004604:	d118      	bne.n	8004638 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004606:	4b76      	ldr	r3, [pc, #472]	@ (80047e0 <HAL_RCC_OscConfig+0x4b0>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a75      	ldr	r2, [pc, #468]	@ (80047e0 <HAL_RCC_OscConfig+0x4b0>)
 800460c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004612:	f7fe f94b 	bl	80028ac <HAL_GetTick>
 8004616:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004618:	e008      	b.n	800462c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800461a:	f7fe f947 	bl	80028ac <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d901      	bls.n	800462c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e118      	b.n	800485e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800462c:	4b6c      	ldr	r3, [pc, #432]	@ (80047e0 <HAL_RCC_OscConfig+0x4b0>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004634:	2b00      	cmp	r3, #0
 8004636:	d0f0      	beq.n	800461a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d106      	bne.n	800464e <HAL_RCC_OscConfig+0x31e>
 8004640:	4b66      	ldr	r3, [pc, #408]	@ (80047dc <HAL_RCC_OscConfig+0x4ac>)
 8004642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004644:	4a65      	ldr	r2, [pc, #404]	@ (80047dc <HAL_RCC_OscConfig+0x4ac>)
 8004646:	f043 0301 	orr.w	r3, r3, #1
 800464a:	6713      	str	r3, [r2, #112]	@ 0x70
 800464c:	e01c      	b.n	8004688 <HAL_RCC_OscConfig+0x358>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	2b05      	cmp	r3, #5
 8004654:	d10c      	bne.n	8004670 <HAL_RCC_OscConfig+0x340>
 8004656:	4b61      	ldr	r3, [pc, #388]	@ (80047dc <HAL_RCC_OscConfig+0x4ac>)
 8004658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800465a:	4a60      	ldr	r2, [pc, #384]	@ (80047dc <HAL_RCC_OscConfig+0x4ac>)
 800465c:	f043 0304 	orr.w	r3, r3, #4
 8004660:	6713      	str	r3, [r2, #112]	@ 0x70
 8004662:	4b5e      	ldr	r3, [pc, #376]	@ (80047dc <HAL_RCC_OscConfig+0x4ac>)
 8004664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004666:	4a5d      	ldr	r2, [pc, #372]	@ (80047dc <HAL_RCC_OscConfig+0x4ac>)
 8004668:	f043 0301 	orr.w	r3, r3, #1
 800466c:	6713      	str	r3, [r2, #112]	@ 0x70
 800466e:	e00b      	b.n	8004688 <HAL_RCC_OscConfig+0x358>
 8004670:	4b5a      	ldr	r3, [pc, #360]	@ (80047dc <HAL_RCC_OscConfig+0x4ac>)
 8004672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004674:	4a59      	ldr	r2, [pc, #356]	@ (80047dc <HAL_RCC_OscConfig+0x4ac>)
 8004676:	f023 0301 	bic.w	r3, r3, #1
 800467a:	6713      	str	r3, [r2, #112]	@ 0x70
 800467c:	4b57      	ldr	r3, [pc, #348]	@ (80047dc <HAL_RCC_OscConfig+0x4ac>)
 800467e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004680:	4a56      	ldr	r2, [pc, #344]	@ (80047dc <HAL_RCC_OscConfig+0x4ac>)
 8004682:	f023 0304 	bic.w	r3, r3, #4
 8004686:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d015      	beq.n	80046bc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004690:	f7fe f90c 	bl	80028ac <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004696:	e00a      	b.n	80046ae <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004698:	f7fe f908 	bl	80028ac <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e0d7      	b.n	800485e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ae:	4b4b      	ldr	r3, [pc, #300]	@ (80047dc <HAL_RCC_OscConfig+0x4ac>)
 80046b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d0ee      	beq.n	8004698 <HAL_RCC_OscConfig+0x368>
 80046ba:	e014      	b.n	80046e6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046bc:	f7fe f8f6 	bl	80028ac <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046c2:	e00a      	b.n	80046da <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c4:	f7fe f8f2 	bl	80028ac <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e0c1      	b.n	800485e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046da:	4b40      	ldr	r3, [pc, #256]	@ (80047dc <HAL_RCC_OscConfig+0x4ac>)
 80046dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1ee      	bne.n	80046c4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046e6:	7dfb      	ldrb	r3, [r7, #23]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d105      	bne.n	80046f8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ec:	4b3b      	ldr	r3, [pc, #236]	@ (80047dc <HAL_RCC_OscConfig+0x4ac>)
 80046ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f0:	4a3a      	ldr	r2, [pc, #232]	@ (80047dc <HAL_RCC_OscConfig+0x4ac>)
 80046f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 80ad 	beq.w	800485c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004702:	4b36      	ldr	r3, [pc, #216]	@ (80047dc <HAL_RCC_OscConfig+0x4ac>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f003 030c 	and.w	r3, r3, #12
 800470a:	2b08      	cmp	r3, #8
 800470c:	d060      	beq.n	80047d0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	2b02      	cmp	r3, #2
 8004714:	d145      	bne.n	80047a2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004716:	4b33      	ldr	r3, [pc, #204]	@ (80047e4 <HAL_RCC_OscConfig+0x4b4>)
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471c:	f7fe f8c6 	bl	80028ac <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004724:	f7fe f8c2 	bl	80028ac <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e093      	b.n	800485e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004736:	4b29      	ldr	r3, [pc, #164]	@ (80047dc <HAL_RCC_OscConfig+0x4ac>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1f0      	bne.n	8004724 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69da      	ldr	r2, [r3, #28]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004750:	019b      	lsls	r3, r3, #6
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004758:	085b      	lsrs	r3, r3, #1
 800475a:	3b01      	subs	r3, #1
 800475c:	041b      	lsls	r3, r3, #16
 800475e:	431a      	orrs	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004764:	061b      	lsls	r3, r3, #24
 8004766:	431a      	orrs	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800476c:	071b      	lsls	r3, r3, #28
 800476e:	491b      	ldr	r1, [pc, #108]	@ (80047dc <HAL_RCC_OscConfig+0x4ac>)
 8004770:	4313      	orrs	r3, r2
 8004772:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004774:	4b1b      	ldr	r3, [pc, #108]	@ (80047e4 <HAL_RCC_OscConfig+0x4b4>)
 8004776:	2201      	movs	r2, #1
 8004778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800477a:	f7fe f897 	bl	80028ac <HAL_GetTick>
 800477e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004780:	e008      	b.n	8004794 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004782:	f7fe f893 	bl	80028ac <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d901      	bls.n	8004794 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e064      	b.n	800485e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004794:	4b11      	ldr	r3, [pc, #68]	@ (80047dc <HAL_RCC_OscConfig+0x4ac>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d0f0      	beq.n	8004782 <HAL_RCC_OscConfig+0x452>
 80047a0:	e05c      	b.n	800485c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a2:	4b10      	ldr	r3, [pc, #64]	@ (80047e4 <HAL_RCC_OscConfig+0x4b4>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a8:	f7fe f880 	bl	80028ac <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047b0:	f7fe f87c 	bl	80028ac <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e04d      	b.n	800485e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c2:	4b06      	ldr	r3, [pc, #24]	@ (80047dc <HAL_RCC_OscConfig+0x4ac>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1f0      	bne.n	80047b0 <HAL_RCC_OscConfig+0x480>
 80047ce:	e045      	b.n	800485c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d107      	bne.n	80047e8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e040      	b.n	800485e <HAL_RCC_OscConfig+0x52e>
 80047dc:	40023800 	.word	0x40023800
 80047e0:	40007000 	.word	0x40007000
 80047e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047e8:	4b1f      	ldr	r3, [pc, #124]	@ (8004868 <HAL_RCC_OscConfig+0x538>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d030      	beq.n	8004858 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004800:	429a      	cmp	r2, r3
 8004802:	d129      	bne.n	8004858 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800480e:	429a      	cmp	r2, r3
 8004810:	d122      	bne.n	8004858 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004818:	4013      	ands	r3, r2
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800481e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004820:	4293      	cmp	r3, r2
 8004822:	d119      	bne.n	8004858 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800482e:	085b      	lsrs	r3, r3, #1
 8004830:	3b01      	subs	r3, #1
 8004832:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004834:	429a      	cmp	r2, r3
 8004836:	d10f      	bne.n	8004858 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004842:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004844:	429a      	cmp	r2, r3
 8004846:	d107      	bne.n	8004858 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004852:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004854:	429a      	cmp	r2, r3
 8004856:	d001      	beq.n	800485c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e000      	b.n	800485e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3718      	adds	r7, #24
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	40023800 	.word	0x40023800

0800486c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e07b      	b.n	8004976 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004882:	2b00      	cmp	r3, #0
 8004884:	d108      	bne.n	8004898 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800488e:	d009      	beq.n	80048a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	61da      	str	r2, [r3, #28]
 8004896:	e005      	b.n	80048a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d106      	bne.n	80048c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7fd fdea 	bl	8002498 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80048ec:	431a      	orrs	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	431a      	orrs	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	431a      	orrs	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004914:	431a      	orrs	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800491e:	431a      	orrs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004928:	ea42 0103 	orr.w	r1, r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004930:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	430a      	orrs	r2, r1
 800493a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	0c1b      	lsrs	r3, r3, #16
 8004942:	f003 0104 	and.w	r1, r3, #4
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494a:	f003 0210 	and.w	r2, r3, #16
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	69da      	ldr	r2, [r3, #28]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004964:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b088      	sub	sp, #32
 8004982:	af00      	add	r7, sp, #0
 8004984:	60f8      	str	r0, [r7, #12]
 8004986:	60b9      	str	r1, [r7, #8]
 8004988:	603b      	str	r3, [r7, #0]
 800498a:	4613      	mov	r3, r2
 800498c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800498e:	f7fd ff8d 	bl	80028ac <HAL_GetTick>
 8004992:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004994:	88fb      	ldrh	r3, [r7, #6]
 8004996:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d001      	beq.n	80049a8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80049a4:	2302      	movs	r3, #2
 80049a6:	e12a      	b.n	8004bfe <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d002      	beq.n	80049b4 <HAL_SPI_Transmit+0x36>
 80049ae:	88fb      	ldrh	r3, [r7, #6]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d101      	bne.n	80049b8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e122      	b.n	8004bfe <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d101      	bne.n	80049c6 <HAL_SPI_Transmit+0x48>
 80049c2:	2302      	movs	r3, #2
 80049c4:	e11b      	b.n	8004bfe <HAL_SPI_Transmit+0x280>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2203      	movs	r2, #3
 80049d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	88fa      	ldrh	r2, [r7, #6]
 80049e6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	88fa      	ldrh	r2, [r7, #6]
 80049ec:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a14:	d10f      	bne.n	8004a36 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a34:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a40:	2b40      	cmp	r3, #64	@ 0x40
 8004a42:	d007      	beq.n	8004a54 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a5c:	d152      	bne.n	8004b04 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d002      	beq.n	8004a6c <HAL_SPI_Transmit+0xee>
 8004a66:	8b7b      	ldrh	r3, [r7, #26]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d145      	bne.n	8004af8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a70:	881a      	ldrh	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a7c:	1c9a      	adds	r2, r3, #2
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a90:	e032      	b.n	8004af8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d112      	bne.n	8004ac6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa4:	881a      	ldrh	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab0:	1c9a      	adds	r2, r3, #2
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	3b01      	subs	r3, #1
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004ac4:	e018      	b.n	8004af8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ac6:	f7fd fef1 	bl	80028ac <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d803      	bhi.n	8004ade <HAL_SPI_Transmit+0x160>
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004adc:	d102      	bne.n	8004ae4 <HAL_SPI_Transmit+0x166>
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d109      	bne.n	8004af8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e082      	b.n	8004bfe <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1c7      	bne.n	8004a92 <HAL_SPI_Transmit+0x114>
 8004b02:	e053      	b.n	8004bac <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d002      	beq.n	8004b12 <HAL_SPI_Transmit+0x194>
 8004b0c:	8b7b      	ldrh	r3, [r7, #26]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d147      	bne.n	8004ba2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	330c      	adds	r3, #12
 8004b1c:	7812      	ldrb	r2, [r2, #0]
 8004b1e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	3b01      	subs	r3, #1
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b38:	e033      	b.n	8004ba2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d113      	bne.n	8004b70 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	330c      	adds	r3, #12
 8004b52:	7812      	ldrb	r2, [r2, #0]
 8004b54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	3b01      	subs	r3, #1
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004b6e:	e018      	b.n	8004ba2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b70:	f7fd fe9c 	bl	80028ac <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d803      	bhi.n	8004b88 <HAL_SPI_Transmit+0x20a>
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b86:	d102      	bne.n	8004b8e <HAL_SPI_Transmit+0x210>
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d109      	bne.n	8004ba2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e02d      	b.n	8004bfe <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1c6      	bne.n	8004b3a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bac:	69fa      	ldr	r2, [r7, #28]
 8004bae:	6839      	ldr	r1, [r7, #0]
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 fa59 	bl	8005068 <SPI_EndRxTxTransaction>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d002      	beq.n	8004bc2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10a      	bne.n	8004be0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bca:	2300      	movs	r3, #0
 8004bcc:	617b      	str	r3, [r7, #20]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	617b      	str	r3, [r7, #20]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	617b      	str	r3, [r7, #20]
 8004bde:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d001      	beq.n	8004bfc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e000      	b.n	8004bfe <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
  }
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3720      	adds	r7, #32
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b08a      	sub	sp, #40	@ 0x28
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	60f8      	str	r0, [r7, #12]
 8004c0e:	60b9      	str	r1, [r7, #8]
 8004c10:	607a      	str	r2, [r7, #4]
 8004c12:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c14:	2301      	movs	r3, #1
 8004c16:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c18:	f7fd fe48 	bl	80028ac <HAL_GetTick>
 8004c1c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c24:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004c2c:	887b      	ldrh	r3, [r7, #2]
 8004c2e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c30:	7ffb      	ldrb	r3, [r7, #31]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d00c      	beq.n	8004c50 <HAL_SPI_TransmitReceive+0x4a>
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c3c:	d106      	bne.n	8004c4c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d102      	bne.n	8004c4c <HAL_SPI_TransmitReceive+0x46>
 8004c46:	7ffb      	ldrb	r3, [r7, #31]
 8004c48:	2b04      	cmp	r3, #4
 8004c4a:	d001      	beq.n	8004c50 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	e17f      	b.n	8004f50 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d005      	beq.n	8004c62 <HAL_SPI_TransmitReceive+0x5c>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d002      	beq.n	8004c62 <HAL_SPI_TransmitReceive+0x5c>
 8004c5c:	887b      	ldrh	r3, [r7, #2]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e174      	b.n	8004f50 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d101      	bne.n	8004c74 <HAL_SPI_TransmitReceive+0x6e>
 8004c70:	2302      	movs	r3, #2
 8004c72:	e16d      	b.n	8004f50 <HAL_SPI_TransmitReceive+0x34a>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b04      	cmp	r3, #4
 8004c86:	d003      	beq.n	8004c90 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2205      	movs	r2, #5
 8004c8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	887a      	ldrh	r2, [r7, #2]
 8004ca0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	887a      	ldrh	r2, [r7, #2]
 8004ca6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	887a      	ldrh	r2, [r7, #2]
 8004cb2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	887a      	ldrh	r2, [r7, #2]
 8004cb8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cd0:	2b40      	cmp	r3, #64	@ 0x40
 8004cd2:	d007      	beq.n	8004ce4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ce2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cec:	d17e      	bne.n	8004dec <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d002      	beq.n	8004cfc <HAL_SPI_TransmitReceive+0xf6>
 8004cf6:	8afb      	ldrh	r3, [r7, #22]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d16c      	bne.n	8004dd6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d00:	881a      	ldrh	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d0c:	1c9a      	adds	r2, r3, #2
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d20:	e059      	b.n	8004dd6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d11b      	bne.n	8004d68 <HAL_SPI_TransmitReceive+0x162>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d016      	beq.n	8004d68 <HAL_SPI_TransmitReceive+0x162>
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d113      	bne.n	8004d68 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d44:	881a      	ldrh	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d50:	1c9a      	adds	r2, r3, #2
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d119      	bne.n	8004daa <HAL_SPI_TransmitReceive+0x1a4>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d014      	beq.n	8004daa <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68da      	ldr	r2, [r3, #12]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d8a:	b292      	uxth	r2, r2
 8004d8c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d92:	1c9a      	adds	r2, r3, #2
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004da6:	2301      	movs	r3, #1
 8004da8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004daa:	f7fd fd7f 	bl	80028ac <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	6a3b      	ldr	r3, [r7, #32]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d80d      	bhi.n	8004dd6 <HAL_SPI_TransmitReceive+0x1d0>
 8004dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc0:	d009      	beq.n	8004dd6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e0bc      	b.n	8004f50 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1a0      	bne.n	8004d22 <HAL_SPI_TransmitReceive+0x11c>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d19b      	bne.n	8004d22 <HAL_SPI_TransmitReceive+0x11c>
 8004dea:	e082      	b.n	8004ef2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d002      	beq.n	8004dfa <HAL_SPI_TransmitReceive+0x1f4>
 8004df4:	8afb      	ldrh	r3, [r7, #22]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d171      	bne.n	8004ede <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	330c      	adds	r3, #12
 8004e04:	7812      	ldrb	r2, [r2, #0]
 8004e06:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e0c:	1c5a      	adds	r2, r3, #1
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e20:	e05d      	b.n	8004ede <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d11c      	bne.n	8004e6a <HAL_SPI_TransmitReceive+0x264>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d017      	beq.n	8004e6a <HAL_SPI_TransmitReceive+0x264>
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d114      	bne.n	8004e6a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	330c      	adds	r3, #12
 8004e4a:	7812      	ldrb	r2, [r2, #0]
 8004e4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e52:	1c5a      	adds	r2, r3, #1
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d119      	bne.n	8004eac <HAL_SPI_TransmitReceive+0x2a6>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d014      	beq.n	8004eac <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68da      	ldr	r2, [r3, #12]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e8c:	b2d2      	uxtb	r2, r2
 8004e8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e94:	1c5a      	adds	r2, r3, #1
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004eac:	f7fd fcfe 	bl	80028ac <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	6a3b      	ldr	r3, [r7, #32]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d803      	bhi.n	8004ec4 <HAL_SPI_TransmitReceive+0x2be>
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec2:	d102      	bne.n	8004eca <HAL_SPI_TransmitReceive+0x2c4>
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d109      	bne.n	8004ede <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e038      	b.n	8004f50 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d19c      	bne.n	8004e22 <HAL_SPI_TransmitReceive+0x21c>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d197      	bne.n	8004e22 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ef2:	6a3a      	ldr	r2, [r7, #32]
 8004ef4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f000 f8b6 	bl	8005068 <SPI_EndRxTxTransaction>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d008      	beq.n	8004f14 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2220      	movs	r2, #32
 8004f06:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e01d      	b.n	8004f50 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10a      	bne.n	8004f32 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	613b      	str	r3, [r7, #16]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	613b      	str	r3, [r7, #16]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	613b      	str	r3, [r7, #16]
 8004f30:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e000      	b.n	8004f50 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
  }
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3728      	adds	r7, #40	@ 0x28
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b088      	sub	sp, #32
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	603b      	str	r3, [r7, #0]
 8004f64:	4613      	mov	r3, r2
 8004f66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f68:	f7fd fca0 	bl	80028ac <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f70:	1a9b      	subs	r3, r3, r2
 8004f72:	683a      	ldr	r2, [r7, #0]
 8004f74:	4413      	add	r3, r2
 8004f76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f78:	f7fd fc98 	bl	80028ac <HAL_GetTick>
 8004f7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f7e:	4b39      	ldr	r3, [pc, #228]	@ (8005064 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	015b      	lsls	r3, r3, #5
 8004f84:	0d1b      	lsrs	r3, r3, #20
 8004f86:	69fa      	ldr	r2, [r7, #28]
 8004f88:	fb02 f303 	mul.w	r3, r2, r3
 8004f8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f8e:	e054      	b.n	800503a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f96:	d050      	beq.n	800503a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f98:	f7fd fc88 	bl	80028ac <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	69fa      	ldr	r2, [r7, #28]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d902      	bls.n	8004fae <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d13d      	bne.n	800502a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004fbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fc6:	d111      	bne.n	8004fec <SPI_WaitFlagStateUntilTimeout+0x94>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fd0:	d004      	beq.n	8004fdc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fda:	d107      	bne.n	8004fec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ff4:	d10f      	bne.n	8005016 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005014:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e017      	b.n	800505a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005030:	2300      	movs	r3, #0
 8005032:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	3b01      	subs	r3, #1
 8005038:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	4013      	ands	r3, r2
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	429a      	cmp	r2, r3
 8005048:	bf0c      	ite	eq
 800504a:	2301      	moveq	r3, #1
 800504c:	2300      	movne	r3, #0
 800504e:	b2db      	uxtb	r3, r3
 8005050:	461a      	mov	r2, r3
 8005052:	79fb      	ldrb	r3, [r7, #7]
 8005054:	429a      	cmp	r2, r3
 8005056:	d19b      	bne.n	8004f90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3720      	adds	r7, #32
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	20000000 	.word	0x20000000

08005068 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b088      	sub	sp, #32
 800506c:	af02      	add	r7, sp, #8
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	2201      	movs	r2, #1
 800507c:	2102      	movs	r1, #2
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f7ff ff6a 	bl	8004f58 <SPI_WaitFlagStateUntilTimeout>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d007      	beq.n	800509a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800508e:	f043 0220 	orr.w	r2, r3, #32
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e032      	b.n	8005100 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800509a:	4b1b      	ldr	r3, [pc, #108]	@ (8005108 <SPI_EndRxTxTransaction+0xa0>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a1b      	ldr	r2, [pc, #108]	@ (800510c <SPI_EndRxTxTransaction+0xa4>)
 80050a0:	fba2 2303 	umull	r2, r3, r2, r3
 80050a4:	0d5b      	lsrs	r3, r3, #21
 80050a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80050aa:	fb02 f303 	mul.w	r3, r2, r3
 80050ae:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050b8:	d112      	bne.n	80050e0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	2200      	movs	r2, #0
 80050c2:	2180      	movs	r1, #128	@ 0x80
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f7ff ff47 	bl	8004f58 <SPI_WaitFlagStateUntilTimeout>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d016      	beq.n	80050fe <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050d4:	f043 0220 	orr.w	r2, r3, #32
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e00f      	b.n	8005100 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00a      	beq.n	80050fc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	3b01      	subs	r3, #1
 80050ea:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050f6:	2b80      	cmp	r3, #128	@ 0x80
 80050f8:	d0f2      	beq.n	80050e0 <SPI_EndRxTxTransaction+0x78>
 80050fa:	e000      	b.n	80050fe <SPI_EndRxTxTransaction+0x96>
        break;
 80050fc:	bf00      	nop
  }

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3718      	adds	r7, #24
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	20000000 	.word	0x20000000
 800510c:	165e9f81 	.word	0x165e9f81

08005110 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e041      	b.n	80051a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d106      	bne.n	800513c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7fd f9f6 	bl	8002528 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	3304      	adds	r3, #4
 800514c:	4619      	mov	r1, r3
 800514e:	4610      	mov	r0, r2
 8005150:	f000 fa80 	bl	8005654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
	...

080051b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d001      	beq.n	80051c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e046      	b.n	8005256 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2202      	movs	r2, #2
 80051cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a23      	ldr	r2, [pc, #140]	@ (8005264 <HAL_TIM_Base_Start+0xb4>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d022      	beq.n	8005220 <HAL_TIM_Base_Start+0x70>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051e2:	d01d      	beq.n	8005220 <HAL_TIM_Base_Start+0x70>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a1f      	ldr	r2, [pc, #124]	@ (8005268 <HAL_TIM_Base_Start+0xb8>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d018      	beq.n	8005220 <HAL_TIM_Base_Start+0x70>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a1e      	ldr	r2, [pc, #120]	@ (800526c <HAL_TIM_Base_Start+0xbc>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d013      	beq.n	8005220 <HAL_TIM_Base_Start+0x70>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a1c      	ldr	r2, [pc, #112]	@ (8005270 <HAL_TIM_Base_Start+0xc0>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d00e      	beq.n	8005220 <HAL_TIM_Base_Start+0x70>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a1b      	ldr	r2, [pc, #108]	@ (8005274 <HAL_TIM_Base_Start+0xc4>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d009      	beq.n	8005220 <HAL_TIM_Base_Start+0x70>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a19      	ldr	r2, [pc, #100]	@ (8005278 <HAL_TIM_Base_Start+0xc8>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d004      	beq.n	8005220 <HAL_TIM_Base_Start+0x70>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a18      	ldr	r2, [pc, #96]	@ (800527c <HAL_TIM_Base_Start+0xcc>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d111      	bne.n	8005244 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2b06      	cmp	r3, #6
 8005230:	d010      	beq.n	8005254 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f042 0201 	orr.w	r2, r2, #1
 8005240:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005242:	e007      	b.n	8005254 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 0201 	orr.w	r2, r2, #1
 8005252:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3714      	adds	r7, #20
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	40010000 	.word	0x40010000
 8005268:	40000400 	.word	0x40000400
 800526c:	40000800 	.word	0x40000800
 8005270:	40000c00 	.word	0x40000c00
 8005274:	40010400 	.word	0x40010400
 8005278:	40014000 	.word	0x40014000
 800527c:	40001800 	.word	0x40001800

08005280 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d020      	beq.n	80052e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f003 0302 	and.w	r3, r3, #2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d01b      	beq.n	80052e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f06f 0202 	mvn.w	r2, #2
 80052b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	f003 0303 	and.w	r3, r3, #3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f9a3 	bl	8005616 <HAL_TIM_IC_CaptureCallback>
 80052d0:	e005      	b.n	80052de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f995 	bl	8005602 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 f9a6 	bl	800562a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	f003 0304 	and.w	r3, r3, #4
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d020      	beq.n	8005330 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d01b      	beq.n	8005330 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f06f 0204 	mvn.w	r2, #4
 8005300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2202      	movs	r2, #2
 8005306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f97d 	bl	8005616 <HAL_TIM_IC_CaptureCallback>
 800531c:	e005      	b.n	800532a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f96f 	bl	8005602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 f980 	bl	800562a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f003 0308 	and.w	r3, r3, #8
 8005336:	2b00      	cmp	r3, #0
 8005338:	d020      	beq.n	800537c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f003 0308 	and.w	r3, r3, #8
 8005340:	2b00      	cmp	r3, #0
 8005342:	d01b      	beq.n	800537c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f06f 0208 	mvn.w	r2, #8
 800534c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2204      	movs	r2, #4
 8005352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	f003 0303 	and.w	r3, r3, #3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d003      	beq.n	800536a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f957 	bl	8005616 <HAL_TIM_IC_CaptureCallback>
 8005368:	e005      	b.n	8005376 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f949 	bl	8005602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 f95a 	bl	800562a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	f003 0310 	and.w	r3, r3, #16
 8005382:	2b00      	cmp	r3, #0
 8005384:	d020      	beq.n	80053c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f003 0310 	and.w	r3, r3, #16
 800538c:	2b00      	cmp	r3, #0
 800538e:	d01b      	beq.n	80053c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f06f 0210 	mvn.w	r2, #16
 8005398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2208      	movs	r2, #8
 800539e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f931 	bl	8005616 <HAL_TIM_IC_CaptureCallback>
 80053b4:	e005      	b.n	80053c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f923 	bl	8005602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f934 	bl	800562a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00c      	beq.n	80053ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d007      	beq.n	80053ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f06f 0201 	mvn.w	r2, #1
 80053e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f901 	bl	80055ee <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00c      	beq.n	8005410 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d007      	beq.n	8005410 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 faee 	bl	80059ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00c      	beq.n	8005434 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005420:	2b00      	cmp	r3, #0
 8005422:	d007      	beq.n	8005434 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800542c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f905 	bl	800563e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	f003 0320 	and.w	r3, r3, #32
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00c      	beq.n	8005458 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f003 0320 	and.w	r3, r3, #32
 8005444:	2b00      	cmp	r3, #0
 8005446:	d007      	beq.n	8005458 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f06f 0220 	mvn.w	r2, #32
 8005450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 fac0 	bl	80059d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005458:	bf00      	nop
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800546a:	2300      	movs	r3, #0
 800546c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005474:	2b01      	cmp	r3, #1
 8005476:	d101      	bne.n	800547c <HAL_TIM_ConfigClockSource+0x1c>
 8005478:	2302      	movs	r3, #2
 800547a:	e0b4      	b.n	80055e6 <HAL_TIM_ConfigClockSource+0x186>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800549a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054b4:	d03e      	beq.n	8005534 <HAL_TIM_ConfigClockSource+0xd4>
 80054b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054ba:	f200 8087 	bhi.w	80055cc <HAL_TIM_ConfigClockSource+0x16c>
 80054be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054c2:	f000 8086 	beq.w	80055d2 <HAL_TIM_ConfigClockSource+0x172>
 80054c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054ca:	d87f      	bhi.n	80055cc <HAL_TIM_ConfigClockSource+0x16c>
 80054cc:	2b70      	cmp	r3, #112	@ 0x70
 80054ce:	d01a      	beq.n	8005506 <HAL_TIM_ConfigClockSource+0xa6>
 80054d0:	2b70      	cmp	r3, #112	@ 0x70
 80054d2:	d87b      	bhi.n	80055cc <HAL_TIM_ConfigClockSource+0x16c>
 80054d4:	2b60      	cmp	r3, #96	@ 0x60
 80054d6:	d050      	beq.n	800557a <HAL_TIM_ConfigClockSource+0x11a>
 80054d8:	2b60      	cmp	r3, #96	@ 0x60
 80054da:	d877      	bhi.n	80055cc <HAL_TIM_ConfigClockSource+0x16c>
 80054dc:	2b50      	cmp	r3, #80	@ 0x50
 80054de:	d03c      	beq.n	800555a <HAL_TIM_ConfigClockSource+0xfa>
 80054e0:	2b50      	cmp	r3, #80	@ 0x50
 80054e2:	d873      	bhi.n	80055cc <HAL_TIM_ConfigClockSource+0x16c>
 80054e4:	2b40      	cmp	r3, #64	@ 0x40
 80054e6:	d058      	beq.n	800559a <HAL_TIM_ConfigClockSource+0x13a>
 80054e8:	2b40      	cmp	r3, #64	@ 0x40
 80054ea:	d86f      	bhi.n	80055cc <HAL_TIM_ConfigClockSource+0x16c>
 80054ec:	2b30      	cmp	r3, #48	@ 0x30
 80054ee:	d064      	beq.n	80055ba <HAL_TIM_ConfigClockSource+0x15a>
 80054f0:	2b30      	cmp	r3, #48	@ 0x30
 80054f2:	d86b      	bhi.n	80055cc <HAL_TIM_ConfigClockSource+0x16c>
 80054f4:	2b20      	cmp	r3, #32
 80054f6:	d060      	beq.n	80055ba <HAL_TIM_ConfigClockSource+0x15a>
 80054f8:	2b20      	cmp	r3, #32
 80054fa:	d867      	bhi.n	80055cc <HAL_TIM_ConfigClockSource+0x16c>
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d05c      	beq.n	80055ba <HAL_TIM_ConfigClockSource+0x15a>
 8005500:	2b10      	cmp	r3, #16
 8005502:	d05a      	beq.n	80055ba <HAL_TIM_ConfigClockSource+0x15a>
 8005504:	e062      	b.n	80055cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005516:	f000 f9c3 	bl	80058a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005528:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	609a      	str	r2, [r3, #8]
      break;
 8005532:	e04f      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005544:	f000 f9ac 	bl	80058a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689a      	ldr	r2, [r3, #8]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005556:	609a      	str	r2, [r3, #8]
      break;
 8005558:	e03c      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005566:	461a      	mov	r2, r3
 8005568:	f000 f920 	bl	80057ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2150      	movs	r1, #80	@ 0x50
 8005572:	4618      	mov	r0, r3
 8005574:	f000 f979 	bl	800586a <TIM_ITRx_SetConfig>
      break;
 8005578:	e02c      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005586:	461a      	mov	r2, r3
 8005588:	f000 f93f 	bl	800580a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2160      	movs	r1, #96	@ 0x60
 8005592:	4618      	mov	r0, r3
 8005594:	f000 f969 	bl	800586a <TIM_ITRx_SetConfig>
      break;
 8005598:	e01c      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055a6:	461a      	mov	r2, r3
 80055a8:	f000 f900 	bl	80057ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2140      	movs	r1, #64	@ 0x40
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 f959 	bl	800586a <TIM_ITRx_SetConfig>
      break;
 80055b8:	e00c      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4619      	mov	r1, r3
 80055c4:	4610      	mov	r0, r2
 80055c6:	f000 f950 	bl	800586a <TIM_ITRx_SetConfig>
      break;
 80055ca:	e003      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	73fb      	strb	r3, [r7, #15]
      break;
 80055d0:	e000      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80055d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055ee:	b480      	push	{r7}
 80055f0:	b083      	sub	sp, #12
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80055f6:	bf00      	nop
 80055f8:	370c      	adds	r7, #12
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005602:	b480      	push	{r7}
 8005604:	b083      	sub	sp, #12
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800560a:	bf00      	nop
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005616:	b480      	push	{r7}
 8005618:	b083      	sub	sp, #12
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800561e:	bf00      	nop
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005632:	bf00      	nop
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800563e:	b480      	push	{r7}
 8005640:	b083      	sub	sp, #12
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005646:	bf00      	nop
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
	...

08005654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a46      	ldr	r2, [pc, #280]	@ (8005780 <TIM_Base_SetConfig+0x12c>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d013      	beq.n	8005694 <TIM_Base_SetConfig+0x40>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005672:	d00f      	beq.n	8005694 <TIM_Base_SetConfig+0x40>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a43      	ldr	r2, [pc, #268]	@ (8005784 <TIM_Base_SetConfig+0x130>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d00b      	beq.n	8005694 <TIM_Base_SetConfig+0x40>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a42      	ldr	r2, [pc, #264]	@ (8005788 <TIM_Base_SetConfig+0x134>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d007      	beq.n	8005694 <TIM_Base_SetConfig+0x40>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a41      	ldr	r2, [pc, #260]	@ (800578c <TIM_Base_SetConfig+0x138>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d003      	beq.n	8005694 <TIM_Base_SetConfig+0x40>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a40      	ldr	r2, [pc, #256]	@ (8005790 <TIM_Base_SetConfig+0x13c>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d108      	bne.n	80056a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800569a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a35      	ldr	r2, [pc, #212]	@ (8005780 <TIM_Base_SetConfig+0x12c>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d02b      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056b4:	d027      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a32      	ldr	r2, [pc, #200]	@ (8005784 <TIM_Base_SetConfig+0x130>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d023      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a31      	ldr	r2, [pc, #196]	@ (8005788 <TIM_Base_SetConfig+0x134>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d01f      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a30      	ldr	r2, [pc, #192]	@ (800578c <TIM_Base_SetConfig+0x138>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d01b      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a2f      	ldr	r2, [pc, #188]	@ (8005790 <TIM_Base_SetConfig+0x13c>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d017      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a2e      	ldr	r2, [pc, #184]	@ (8005794 <TIM_Base_SetConfig+0x140>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d013      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a2d      	ldr	r2, [pc, #180]	@ (8005798 <TIM_Base_SetConfig+0x144>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d00f      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a2c      	ldr	r2, [pc, #176]	@ (800579c <TIM_Base_SetConfig+0x148>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d00b      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a2b      	ldr	r2, [pc, #172]	@ (80057a0 <TIM_Base_SetConfig+0x14c>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d007      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a2a      	ldr	r2, [pc, #168]	@ (80057a4 <TIM_Base_SetConfig+0x150>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d003      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a29      	ldr	r2, [pc, #164]	@ (80057a8 <TIM_Base_SetConfig+0x154>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d108      	bne.n	8005718 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800570c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	4313      	orrs	r3, r2
 8005716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	4313      	orrs	r3, r2
 8005724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	689a      	ldr	r2, [r3, #8]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a10      	ldr	r2, [pc, #64]	@ (8005780 <TIM_Base_SetConfig+0x12c>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d003      	beq.n	800574c <TIM_Base_SetConfig+0xf8>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a12      	ldr	r2, [pc, #72]	@ (8005790 <TIM_Base_SetConfig+0x13c>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d103      	bne.n	8005754 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	691a      	ldr	r2, [r3, #16]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b01      	cmp	r3, #1
 8005764:	d105      	bne.n	8005772 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	f023 0201 	bic.w	r2, r3, #1
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	611a      	str	r2, [r3, #16]
  }
}
 8005772:	bf00      	nop
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	40010000 	.word	0x40010000
 8005784:	40000400 	.word	0x40000400
 8005788:	40000800 	.word	0x40000800
 800578c:	40000c00 	.word	0x40000c00
 8005790:	40010400 	.word	0x40010400
 8005794:	40014000 	.word	0x40014000
 8005798:	40014400 	.word	0x40014400
 800579c:	40014800 	.word	0x40014800
 80057a0:	40001800 	.word	0x40001800
 80057a4:	40001c00 	.word	0x40001c00
 80057a8:	40002000 	.word	0x40002000

080057ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b087      	sub	sp, #28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6a1b      	ldr	r3, [r3, #32]
 80057bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	f023 0201 	bic.w	r2, r3, #1
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	011b      	lsls	r3, r3, #4
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	4313      	orrs	r3, r2
 80057e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f023 030a 	bic.w	r3, r3, #10
 80057e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	621a      	str	r2, [r3, #32]
}
 80057fe:	bf00      	nop
 8005800:	371c      	adds	r7, #28
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800580a:	b480      	push	{r7}
 800580c:	b087      	sub	sp, #28
 800580e:	af00      	add	r7, sp, #0
 8005810:	60f8      	str	r0, [r7, #12]
 8005812:	60b9      	str	r1, [r7, #8]
 8005814:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	f023 0210 	bic.w	r2, r3, #16
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005834:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	031b      	lsls	r3, r3, #12
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	4313      	orrs	r3, r2
 800583e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005846:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	011b      	lsls	r3, r3, #4
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	4313      	orrs	r3, r2
 8005850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	621a      	str	r2, [r3, #32]
}
 800585e:	bf00      	nop
 8005860:	371c      	adds	r7, #28
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800586a:	b480      	push	{r7}
 800586c:	b085      	sub	sp, #20
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
 8005872:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005880:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005882:	683a      	ldr	r2, [r7, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	4313      	orrs	r3, r2
 8005888:	f043 0307 	orr.w	r3, r3, #7
 800588c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	609a      	str	r2, [r3, #8]
}
 8005894:	bf00      	nop
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b087      	sub	sp, #28
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
 80058ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	021a      	lsls	r2, r3, #8
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	431a      	orrs	r2, r3
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	609a      	str	r2, [r3, #8]
}
 80058d4:	bf00      	nop
 80058d6:	371c      	adds	r7, #28
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d101      	bne.n	80058f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058f4:	2302      	movs	r3, #2
 80058f6:	e05a      	b.n	80059ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800591e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	4313      	orrs	r3, r2
 8005928:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a21      	ldr	r2, [pc, #132]	@ (80059bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d022      	beq.n	8005982 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005944:	d01d      	beq.n	8005982 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a1d      	ldr	r2, [pc, #116]	@ (80059c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d018      	beq.n	8005982 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a1b      	ldr	r2, [pc, #108]	@ (80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d013      	beq.n	8005982 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a1a      	ldr	r2, [pc, #104]	@ (80059c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d00e      	beq.n	8005982 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a18      	ldr	r2, [pc, #96]	@ (80059cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d009      	beq.n	8005982 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a17      	ldr	r2, [pc, #92]	@ (80059d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d004      	beq.n	8005982 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a15      	ldr	r2, [pc, #84]	@ (80059d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d10c      	bne.n	800599c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005988:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	4313      	orrs	r3, r2
 8005992:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	40010000 	.word	0x40010000
 80059c0:	40000400 	.word	0x40000400
 80059c4:	40000800 	.word	0x40000800
 80059c8:	40000c00 	.word	0x40000c00
 80059cc:	40010400 	.word	0x40010400
 80059d0:	40014000 	.word	0x40014000
 80059d4:	40001800 	.word	0x40001800

080059d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e042      	b.n	8005a98 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d106      	bne.n	8005a2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7fc fda4 	bl	8002574 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2224      	movs	r2, #36	@ 0x24
 8005a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68da      	ldr	r2, [r3, #12]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f82b 	bl	8005aa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	691a      	ldr	r2, [r3, #16]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	695a      	ldr	r2, [r3, #20]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68da      	ldr	r2, [r3, #12]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2220      	movs	r2, #32
 8005a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3708      	adds	r7, #8
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005aa4:	b0c0      	sub	sp, #256	@ 0x100
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005abc:	68d9      	ldr	r1, [r3, #12]
 8005abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	ea40 0301 	orr.w	r3, r0, r1
 8005ac8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ace:	689a      	ldr	r2, [r3, #8]
 8005ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005af8:	f021 010c 	bic.w	r1, r1, #12
 8005afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005b06:	430b      	orrs	r3, r1
 8005b08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b1a:	6999      	ldr	r1, [r3, #24]
 8005b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	ea40 0301 	orr.w	r3, r0, r1
 8005b26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	4b8f      	ldr	r3, [pc, #572]	@ (8005d6c <UART_SetConfig+0x2cc>)
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d005      	beq.n	8005b40 <UART_SetConfig+0xa0>
 8005b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	4b8d      	ldr	r3, [pc, #564]	@ (8005d70 <UART_SetConfig+0x2d0>)
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d104      	bne.n	8005b4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b40:	f7fd fe88 	bl	8003854 <HAL_RCC_GetPCLK2Freq>
 8005b44:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005b48:	e003      	b.n	8005b52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b4a:	f7fd fe6f 	bl	800382c <HAL_RCC_GetPCLK1Freq>
 8005b4e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b56:	69db      	ldr	r3, [r3, #28]
 8005b58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b5c:	f040 810c 	bne.w	8005d78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b64:	2200      	movs	r2, #0
 8005b66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b6a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005b6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005b72:	4622      	mov	r2, r4
 8005b74:	462b      	mov	r3, r5
 8005b76:	1891      	adds	r1, r2, r2
 8005b78:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005b7a:	415b      	adcs	r3, r3
 8005b7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005b82:	4621      	mov	r1, r4
 8005b84:	eb12 0801 	adds.w	r8, r2, r1
 8005b88:	4629      	mov	r1, r5
 8005b8a:	eb43 0901 	adc.w	r9, r3, r1
 8005b8e:	f04f 0200 	mov.w	r2, #0
 8005b92:	f04f 0300 	mov.w	r3, #0
 8005b96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ba2:	4690      	mov	r8, r2
 8005ba4:	4699      	mov	r9, r3
 8005ba6:	4623      	mov	r3, r4
 8005ba8:	eb18 0303 	adds.w	r3, r8, r3
 8005bac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005bb0:	462b      	mov	r3, r5
 8005bb2:	eb49 0303 	adc.w	r3, r9, r3
 8005bb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005bc6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005bca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005bce:	460b      	mov	r3, r1
 8005bd0:	18db      	adds	r3, r3, r3
 8005bd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	eb42 0303 	adc.w	r3, r2, r3
 8005bda:	657b      	str	r3, [r7, #84]	@ 0x54
 8005bdc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005be0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005be4:	f7fa fff4 	bl	8000bd0 <__aeabi_uldivmod>
 8005be8:	4602      	mov	r2, r0
 8005bea:	460b      	mov	r3, r1
 8005bec:	4b61      	ldr	r3, [pc, #388]	@ (8005d74 <UART_SetConfig+0x2d4>)
 8005bee:	fba3 2302 	umull	r2, r3, r3, r2
 8005bf2:	095b      	lsrs	r3, r3, #5
 8005bf4:	011c      	lsls	r4, r3, #4
 8005bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c00:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005c04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005c08:	4642      	mov	r2, r8
 8005c0a:	464b      	mov	r3, r9
 8005c0c:	1891      	adds	r1, r2, r2
 8005c0e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005c10:	415b      	adcs	r3, r3
 8005c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005c18:	4641      	mov	r1, r8
 8005c1a:	eb12 0a01 	adds.w	sl, r2, r1
 8005c1e:	4649      	mov	r1, r9
 8005c20:	eb43 0b01 	adc.w	fp, r3, r1
 8005c24:	f04f 0200 	mov.w	r2, #0
 8005c28:	f04f 0300 	mov.w	r3, #0
 8005c2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c38:	4692      	mov	sl, r2
 8005c3a:	469b      	mov	fp, r3
 8005c3c:	4643      	mov	r3, r8
 8005c3e:	eb1a 0303 	adds.w	r3, sl, r3
 8005c42:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c46:	464b      	mov	r3, r9
 8005c48:	eb4b 0303 	adc.w	r3, fp, r3
 8005c4c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c5c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005c60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005c64:	460b      	mov	r3, r1
 8005c66:	18db      	adds	r3, r3, r3
 8005c68:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	eb42 0303 	adc.w	r3, r2, r3
 8005c70:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005c76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005c7a:	f7fa ffa9 	bl	8000bd0 <__aeabi_uldivmod>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	460b      	mov	r3, r1
 8005c82:	4611      	mov	r1, r2
 8005c84:	4b3b      	ldr	r3, [pc, #236]	@ (8005d74 <UART_SetConfig+0x2d4>)
 8005c86:	fba3 2301 	umull	r2, r3, r3, r1
 8005c8a:	095b      	lsrs	r3, r3, #5
 8005c8c:	2264      	movs	r2, #100	@ 0x64
 8005c8e:	fb02 f303 	mul.w	r3, r2, r3
 8005c92:	1acb      	subs	r3, r1, r3
 8005c94:	00db      	lsls	r3, r3, #3
 8005c96:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005c9a:	4b36      	ldr	r3, [pc, #216]	@ (8005d74 <UART_SetConfig+0x2d4>)
 8005c9c:	fba3 2302 	umull	r2, r3, r3, r2
 8005ca0:	095b      	lsrs	r3, r3, #5
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005ca8:	441c      	add	r4, r3
 8005caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005cb4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005cb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005cbc:	4642      	mov	r2, r8
 8005cbe:	464b      	mov	r3, r9
 8005cc0:	1891      	adds	r1, r2, r2
 8005cc2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005cc4:	415b      	adcs	r3, r3
 8005cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005ccc:	4641      	mov	r1, r8
 8005cce:	1851      	adds	r1, r2, r1
 8005cd0:	6339      	str	r1, [r7, #48]	@ 0x30
 8005cd2:	4649      	mov	r1, r9
 8005cd4:	414b      	adcs	r3, r1
 8005cd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cd8:	f04f 0200 	mov.w	r2, #0
 8005cdc:	f04f 0300 	mov.w	r3, #0
 8005ce0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005ce4:	4659      	mov	r1, fp
 8005ce6:	00cb      	lsls	r3, r1, #3
 8005ce8:	4651      	mov	r1, sl
 8005cea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cee:	4651      	mov	r1, sl
 8005cf0:	00ca      	lsls	r2, r1, #3
 8005cf2:	4610      	mov	r0, r2
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	4642      	mov	r2, r8
 8005cfa:	189b      	adds	r3, r3, r2
 8005cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d00:	464b      	mov	r3, r9
 8005d02:	460a      	mov	r2, r1
 8005d04:	eb42 0303 	adc.w	r3, r2, r3
 8005d08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005d18:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005d1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005d20:	460b      	mov	r3, r1
 8005d22:	18db      	adds	r3, r3, r3
 8005d24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d26:	4613      	mov	r3, r2
 8005d28:	eb42 0303 	adc.w	r3, r2, r3
 8005d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005d32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005d36:	f7fa ff4b 	bl	8000bd0 <__aeabi_uldivmod>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d74 <UART_SetConfig+0x2d4>)
 8005d40:	fba3 1302 	umull	r1, r3, r3, r2
 8005d44:	095b      	lsrs	r3, r3, #5
 8005d46:	2164      	movs	r1, #100	@ 0x64
 8005d48:	fb01 f303 	mul.w	r3, r1, r3
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	00db      	lsls	r3, r3, #3
 8005d50:	3332      	adds	r3, #50	@ 0x32
 8005d52:	4a08      	ldr	r2, [pc, #32]	@ (8005d74 <UART_SetConfig+0x2d4>)
 8005d54:	fba2 2303 	umull	r2, r3, r2, r3
 8005d58:	095b      	lsrs	r3, r3, #5
 8005d5a:	f003 0207 	and.w	r2, r3, #7
 8005d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4422      	add	r2, r4
 8005d66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d68:	e106      	b.n	8005f78 <UART_SetConfig+0x4d8>
 8005d6a:	bf00      	nop
 8005d6c:	40011000 	.word	0x40011000
 8005d70:	40011400 	.word	0x40011400
 8005d74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005d82:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005d86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005d8a:	4642      	mov	r2, r8
 8005d8c:	464b      	mov	r3, r9
 8005d8e:	1891      	adds	r1, r2, r2
 8005d90:	6239      	str	r1, [r7, #32]
 8005d92:	415b      	adcs	r3, r3
 8005d94:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d9a:	4641      	mov	r1, r8
 8005d9c:	1854      	adds	r4, r2, r1
 8005d9e:	4649      	mov	r1, r9
 8005da0:	eb43 0501 	adc.w	r5, r3, r1
 8005da4:	f04f 0200 	mov.w	r2, #0
 8005da8:	f04f 0300 	mov.w	r3, #0
 8005dac:	00eb      	lsls	r3, r5, #3
 8005dae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005db2:	00e2      	lsls	r2, r4, #3
 8005db4:	4614      	mov	r4, r2
 8005db6:	461d      	mov	r5, r3
 8005db8:	4643      	mov	r3, r8
 8005dba:	18e3      	adds	r3, r4, r3
 8005dbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005dc0:	464b      	mov	r3, r9
 8005dc2:	eb45 0303 	adc.w	r3, r5, r3
 8005dc6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005dd6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005dda:	f04f 0200 	mov.w	r2, #0
 8005dde:	f04f 0300 	mov.w	r3, #0
 8005de2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005de6:	4629      	mov	r1, r5
 8005de8:	008b      	lsls	r3, r1, #2
 8005dea:	4621      	mov	r1, r4
 8005dec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005df0:	4621      	mov	r1, r4
 8005df2:	008a      	lsls	r2, r1, #2
 8005df4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005df8:	f7fa feea 	bl	8000bd0 <__aeabi_uldivmod>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	460b      	mov	r3, r1
 8005e00:	4b60      	ldr	r3, [pc, #384]	@ (8005f84 <UART_SetConfig+0x4e4>)
 8005e02:	fba3 2302 	umull	r2, r3, r3, r2
 8005e06:	095b      	lsrs	r3, r3, #5
 8005e08:	011c      	lsls	r4, r3, #4
 8005e0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005e14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005e18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005e1c:	4642      	mov	r2, r8
 8005e1e:	464b      	mov	r3, r9
 8005e20:	1891      	adds	r1, r2, r2
 8005e22:	61b9      	str	r1, [r7, #24]
 8005e24:	415b      	adcs	r3, r3
 8005e26:	61fb      	str	r3, [r7, #28]
 8005e28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e2c:	4641      	mov	r1, r8
 8005e2e:	1851      	adds	r1, r2, r1
 8005e30:	6139      	str	r1, [r7, #16]
 8005e32:	4649      	mov	r1, r9
 8005e34:	414b      	adcs	r3, r1
 8005e36:	617b      	str	r3, [r7, #20]
 8005e38:	f04f 0200 	mov.w	r2, #0
 8005e3c:	f04f 0300 	mov.w	r3, #0
 8005e40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e44:	4659      	mov	r1, fp
 8005e46:	00cb      	lsls	r3, r1, #3
 8005e48:	4651      	mov	r1, sl
 8005e4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e4e:	4651      	mov	r1, sl
 8005e50:	00ca      	lsls	r2, r1, #3
 8005e52:	4610      	mov	r0, r2
 8005e54:	4619      	mov	r1, r3
 8005e56:	4603      	mov	r3, r0
 8005e58:	4642      	mov	r2, r8
 8005e5a:	189b      	adds	r3, r3, r2
 8005e5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005e60:	464b      	mov	r3, r9
 8005e62:	460a      	mov	r2, r1
 8005e64:	eb42 0303 	adc.w	r3, r2, r3
 8005e68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005e76:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005e78:	f04f 0200 	mov.w	r2, #0
 8005e7c:	f04f 0300 	mov.w	r3, #0
 8005e80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005e84:	4649      	mov	r1, r9
 8005e86:	008b      	lsls	r3, r1, #2
 8005e88:	4641      	mov	r1, r8
 8005e8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e8e:	4641      	mov	r1, r8
 8005e90:	008a      	lsls	r2, r1, #2
 8005e92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005e96:	f7fa fe9b 	bl	8000bd0 <__aeabi_uldivmod>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	4611      	mov	r1, r2
 8005ea0:	4b38      	ldr	r3, [pc, #224]	@ (8005f84 <UART_SetConfig+0x4e4>)
 8005ea2:	fba3 2301 	umull	r2, r3, r3, r1
 8005ea6:	095b      	lsrs	r3, r3, #5
 8005ea8:	2264      	movs	r2, #100	@ 0x64
 8005eaa:	fb02 f303 	mul.w	r3, r2, r3
 8005eae:	1acb      	subs	r3, r1, r3
 8005eb0:	011b      	lsls	r3, r3, #4
 8005eb2:	3332      	adds	r3, #50	@ 0x32
 8005eb4:	4a33      	ldr	r2, [pc, #204]	@ (8005f84 <UART_SetConfig+0x4e4>)
 8005eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eba:	095b      	lsrs	r3, r3, #5
 8005ebc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ec0:	441c      	add	r4, r3
 8005ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	673b      	str	r3, [r7, #112]	@ 0x70
 8005eca:	677a      	str	r2, [r7, #116]	@ 0x74
 8005ecc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005ed0:	4642      	mov	r2, r8
 8005ed2:	464b      	mov	r3, r9
 8005ed4:	1891      	adds	r1, r2, r2
 8005ed6:	60b9      	str	r1, [r7, #8]
 8005ed8:	415b      	adcs	r3, r3
 8005eda:	60fb      	str	r3, [r7, #12]
 8005edc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ee0:	4641      	mov	r1, r8
 8005ee2:	1851      	adds	r1, r2, r1
 8005ee4:	6039      	str	r1, [r7, #0]
 8005ee6:	4649      	mov	r1, r9
 8005ee8:	414b      	adcs	r3, r1
 8005eea:	607b      	str	r3, [r7, #4]
 8005eec:	f04f 0200 	mov.w	r2, #0
 8005ef0:	f04f 0300 	mov.w	r3, #0
 8005ef4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ef8:	4659      	mov	r1, fp
 8005efa:	00cb      	lsls	r3, r1, #3
 8005efc:	4651      	mov	r1, sl
 8005efe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f02:	4651      	mov	r1, sl
 8005f04:	00ca      	lsls	r2, r1, #3
 8005f06:	4610      	mov	r0, r2
 8005f08:	4619      	mov	r1, r3
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	4642      	mov	r2, r8
 8005f0e:	189b      	adds	r3, r3, r2
 8005f10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f12:	464b      	mov	r3, r9
 8005f14:	460a      	mov	r2, r1
 8005f16:	eb42 0303 	adc.w	r3, r2, r3
 8005f1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f26:	667a      	str	r2, [r7, #100]	@ 0x64
 8005f28:	f04f 0200 	mov.w	r2, #0
 8005f2c:	f04f 0300 	mov.w	r3, #0
 8005f30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005f34:	4649      	mov	r1, r9
 8005f36:	008b      	lsls	r3, r1, #2
 8005f38:	4641      	mov	r1, r8
 8005f3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f3e:	4641      	mov	r1, r8
 8005f40:	008a      	lsls	r2, r1, #2
 8005f42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005f46:	f7fa fe43 	bl	8000bd0 <__aeabi_uldivmod>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f84 <UART_SetConfig+0x4e4>)
 8005f50:	fba3 1302 	umull	r1, r3, r3, r2
 8005f54:	095b      	lsrs	r3, r3, #5
 8005f56:	2164      	movs	r1, #100	@ 0x64
 8005f58:	fb01 f303 	mul.w	r3, r1, r3
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	011b      	lsls	r3, r3, #4
 8005f60:	3332      	adds	r3, #50	@ 0x32
 8005f62:	4a08      	ldr	r2, [pc, #32]	@ (8005f84 <UART_SetConfig+0x4e4>)
 8005f64:	fba2 2303 	umull	r2, r3, r2, r3
 8005f68:	095b      	lsrs	r3, r3, #5
 8005f6a:	f003 020f 	and.w	r2, r3, #15
 8005f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4422      	add	r2, r4
 8005f76:	609a      	str	r2, [r3, #8]
}
 8005f78:	bf00      	nop
 8005f7a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f84:	51eb851f 	.word	0x51eb851f

08005f88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f88:	b084      	sub	sp, #16
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b084      	sub	sp, #16
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
 8005f92:	f107 001c 	add.w	r0, r7, #28
 8005f96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f9a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d123      	bne.n	8005fea <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fa6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005fb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005fca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d105      	bne.n	8005fde <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 fa9a 	bl	8006518 <USB_CoreReset>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	73fb      	strb	r3, [r7, #15]
 8005fe8:	e01b      	b.n	8006022 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fa8e 	bl	8006518 <USB_CoreReset>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006000:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006004:	2b00      	cmp	r3, #0
 8006006:	d106      	bne.n	8006016 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800600c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	639a      	str	r2, [r3, #56]	@ 0x38
 8006014:	e005      	b.n	8006022 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800601a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006022:	7fbb      	ldrb	r3, [r7, #30]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d10b      	bne.n	8006040 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f043 0206 	orr.w	r2, r3, #6
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f043 0220 	orr.w	r2, r3, #32
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006040:	7bfb      	ldrb	r3, [r7, #15]
}
 8006042:	4618      	mov	r0, r3
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800604c:	b004      	add	sp, #16
 800604e:	4770      	bx	lr

08006050 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	f023 0201 	bic.w	r2, r3, #1
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	370c      	adds	r7, #12
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr

08006072 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b084      	sub	sp, #16
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	460b      	mov	r3, r1
 800607c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800607e:	2300      	movs	r3, #0
 8006080:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800608e:	78fb      	ldrb	r3, [r7, #3]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d115      	bne.n	80060c0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80060a0:	200a      	movs	r0, #10
 80060a2:	f7fc fc0f 	bl	80028c4 <HAL_Delay>
      ms += 10U;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	330a      	adds	r3, #10
 80060aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 fa25 	bl	80064fc <USB_GetMode>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d01e      	beq.n	80060f6 <USB_SetCurrentMode+0x84>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2bc7      	cmp	r3, #199	@ 0xc7
 80060bc:	d9f0      	bls.n	80060a0 <USB_SetCurrentMode+0x2e>
 80060be:	e01a      	b.n	80060f6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80060c0:	78fb      	ldrb	r3, [r7, #3]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d115      	bne.n	80060f2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80060d2:	200a      	movs	r0, #10
 80060d4:	f7fc fbf6 	bl	80028c4 <HAL_Delay>
      ms += 10U;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	330a      	adds	r3, #10
 80060dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fa0c 	bl	80064fc <USB_GetMode>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d005      	beq.n	80060f6 <USB_SetCurrentMode+0x84>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2bc7      	cmp	r3, #199	@ 0xc7
 80060ee:	d9f0      	bls.n	80060d2 <USB_SetCurrentMode+0x60>
 80060f0:	e001      	b.n	80060f6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e005      	b.n	8006102 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2bc8      	cmp	r3, #200	@ 0xc8
 80060fa:	d101      	bne.n	8006100 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e000      	b.n	8006102 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3710      	adds	r7, #16
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
	...

0800610c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800610c:	b084      	sub	sp, #16
 800610e:	b580      	push	{r7, lr}
 8006110:	b086      	sub	sp, #24
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
 8006116:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800611a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800611e:	2300      	movs	r3, #0
 8006120:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006126:	2300      	movs	r3, #0
 8006128:	613b      	str	r3, [r7, #16]
 800612a:	e009      	b.n	8006140 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	3340      	adds	r3, #64	@ 0x40
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	4413      	add	r3, r2
 8006136:	2200      	movs	r2, #0
 8006138:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	3301      	adds	r3, #1
 800613e:	613b      	str	r3, [r7, #16]
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	2b0e      	cmp	r3, #14
 8006144:	d9f2      	bls.n	800612c <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006146:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800614a:	2b00      	cmp	r3, #0
 800614c:	d11c      	bne.n	8006188 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800615c:	f043 0302 	orr.w	r3, r3, #2
 8006160:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006166:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	601a      	str	r2, [r3, #0]
 8006186:	e005      	b.n	8006194 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800618c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800619a:	461a      	mov	r2, r3
 800619c:	2300      	movs	r3, #0
 800619e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061a0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d10d      	bne.n	80061c4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80061a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d104      	bne.n	80061ba <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80061b0:	2100      	movs	r1, #0
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f968 	bl	8006488 <USB_SetDevSpeed>
 80061b8:	e008      	b.n	80061cc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80061ba:	2101      	movs	r1, #1
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f963 	bl	8006488 <USB_SetDevSpeed>
 80061c2:	e003      	b.n	80061cc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80061c4:	2103      	movs	r1, #3
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f95e 	bl	8006488 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80061cc:	2110      	movs	r1, #16
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f8fa 	bl	80063c8 <USB_FlushTxFifo>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f924 	bl	800642c <USB_FlushRxFifo>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d001      	beq.n	80061ee <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061f4:	461a      	mov	r2, r3
 80061f6:	2300      	movs	r3, #0
 80061f8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006200:	461a      	mov	r2, r3
 8006202:	2300      	movs	r3, #0
 8006204:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800620c:	461a      	mov	r2, r3
 800620e:	2300      	movs	r3, #0
 8006210:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006212:	2300      	movs	r3, #0
 8006214:	613b      	str	r3, [r7, #16]
 8006216:	e043      	b.n	80062a0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	4413      	add	r3, r2
 8006220:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800622a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800622e:	d118      	bne.n	8006262 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10a      	bne.n	800624c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	015a      	lsls	r2, r3, #5
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	4413      	add	r3, r2
 800623e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006242:	461a      	mov	r2, r3
 8006244:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	e013      	b.n	8006274 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	015a      	lsls	r2, r3, #5
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	4413      	add	r3, r2
 8006254:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006258:	461a      	mov	r2, r3
 800625a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800625e:	6013      	str	r3, [r2, #0]
 8006260:	e008      	b.n	8006274 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	015a      	lsls	r2, r3, #5
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	4413      	add	r3, r2
 800626a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800626e:	461a      	mov	r2, r3
 8006270:	2300      	movs	r3, #0
 8006272:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	4413      	add	r3, r2
 800627c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006280:	461a      	mov	r2, r3
 8006282:	2300      	movs	r3, #0
 8006284:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	4413      	add	r3, r2
 800628e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006292:	461a      	mov	r2, r3
 8006294:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006298:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	3301      	adds	r3, #1
 800629e:	613b      	str	r3, [r7, #16]
 80062a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80062a4:	461a      	mov	r2, r3
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d3b5      	bcc.n	8006218 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062ac:	2300      	movs	r3, #0
 80062ae:	613b      	str	r3, [r7, #16]
 80062b0:	e043      	b.n	800633a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062c8:	d118      	bne.n	80062fc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d10a      	bne.n	80062e6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062dc:	461a      	mov	r2, r3
 80062de:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80062e2:	6013      	str	r3, [r2, #0]
 80062e4:	e013      	b.n	800630e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	015a      	lsls	r2, r3, #5
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	4413      	add	r3, r2
 80062ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062f2:	461a      	mov	r2, r3
 80062f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80062f8:	6013      	str	r3, [r2, #0]
 80062fa:	e008      	b.n	800630e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	015a      	lsls	r2, r3, #5
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	4413      	add	r3, r2
 8006304:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006308:	461a      	mov	r2, r3
 800630a:	2300      	movs	r3, #0
 800630c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	015a      	lsls	r2, r3, #5
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	4413      	add	r3, r2
 8006316:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800631a:	461a      	mov	r2, r3
 800631c:	2300      	movs	r3, #0
 800631e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	4413      	add	r3, r2
 8006328:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800632c:	461a      	mov	r2, r3
 800632e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006332:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	3301      	adds	r3, #1
 8006338:	613b      	str	r3, [r7, #16]
 800633a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800633e:	461a      	mov	r2, r3
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	4293      	cmp	r3, r2
 8006344:	d3b5      	bcc.n	80062b2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006354:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006358:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006366:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006368:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800636c:	2b00      	cmp	r3, #0
 800636e:	d105      	bne.n	800637c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	f043 0210 	orr.w	r2, r3, #16
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	699a      	ldr	r2, [r3, #24]
 8006380:	4b10      	ldr	r3, [pc, #64]	@ (80063c4 <USB_DevInit+0x2b8>)
 8006382:	4313      	orrs	r3, r2
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006388:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800638c:	2b00      	cmp	r3, #0
 800638e:	d005      	beq.n	800639c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	699b      	ldr	r3, [r3, #24]
 8006394:	f043 0208 	orr.w	r2, r3, #8
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800639c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d107      	bne.n	80063b4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80063ac:	f043 0304 	orr.w	r3, r3, #4
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80063b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3718      	adds	r7, #24
 80063ba:	46bd      	mov	sp, r7
 80063bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063c0:	b004      	add	sp, #16
 80063c2:	4770      	bx	lr
 80063c4:	803c3800 	.word	0x803c3800

080063c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063d2:	2300      	movs	r3, #0
 80063d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	3301      	adds	r3, #1
 80063da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063e2:	d901      	bls.n	80063e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e01b      	b.n	8006420 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	daf2      	bge.n	80063d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80063f0:	2300      	movs	r3, #0
 80063f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	019b      	lsls	r3, r3, #6
 80063f8:	f043 0220 	orr.w	r2, r3, #32
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	3301      	adds	r3, #1
 8006404:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800640c:	d901      	bls.n	8006412 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e006      	b.n	8006420 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	f003 0320 	and.w	r3, r3, #32
 800641a:	2b20      	cmp	r3, #32
 800641c:	d0f0      	beq.n	8006400 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3714      	adds	r7, #20
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006434:	2300      	movs	r3, #0
 8006436:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	3301      	adds	r3, #1
 800643c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006444:	d901      	bls.n	800644a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e018      	b.n	800647c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	2b00      	cmp	r3, #0
 8006450:	daf2      	bge.n	8006438 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006452:	2300      	movs	r3, #0
 8006454:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2210      	movs	r2, #16
 800645a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	3301      	adds	r3, #1
 8006460:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006468:	d901      	bls.n	800646e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e006      	b.n	800647c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	f003 0310 	and.w	r3, r3, #16
 8006476:	2b10      	cmp	r3, #16
 8006478:	d0f0      	beq.n	800645c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3714      	adds	r7, #20
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	460b      	mov	r3, r1
 8006492:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	78fb      	ldrb	r3, [r7, #3]
 80064a2:	68f9      	ldr	r1, [r7, #12]
 80064a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80064a8:	4313      	orrs	r3, r2
 80064aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3714      	adds	r7, #20
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80064ba:	b480      	push	{r7}
 80064bc:	b085      	sub	sp, #20
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80064d4:	f023 0303 	bic.w	r3, r3, #3
 80064d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064e8:	f043 0302 	orr.w	r3, r3, #2
 80064ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3714      	adds	r7, #20
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	695b      	ldr	r3, [r3, #20]
 8006508:	f003 0301 	and.w	r3, r3, #1
}
 800650c:	4618      	mov	r0, r3
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006520:	2300      	movs	r3, #0
 8006522:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	3301      	adds	r3, #1
 8006528:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006530:	d901      	bls.n	8006536 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e01b      	b.n	800656e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	2b00      	cmp	r3, #0
 800653c:	daf2      	bge.n	8006524 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800653e:	2300      	movs	r3, #0
 8006540:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	f043 0201 	orr.w	r2, r3, #1
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	3301      	adds	r3, #1
 8006552:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800655a:	d901      	bls.n	8006560 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800655c:	2303      	movs	r3, #3
 800655e:	e006      	b.n	800656e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	f003 0301 	and.w	r3, r3, #1
 8006568:	2b01      	cmp	r3, #1
 800656a:	d0f0      	beq.n	800654e <USB_CoreReset+0x36>

  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3714      	adds	r7, #20
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr

0800657a <memset>:
 800657a:	4402      	add	r2, r0
 800657c:	4603      	mov	r3, r0
 800657e:	4293      	cmp	r3, r2
 8006580:	d100      	bne.n	8006584 <memset+0xa>
 8006582:	4770      	bx	lr
 8006584:	f803 1b01 	strb.w	r1, [r3], #1
 8006588:	e7f9      	b.n	800657e <memset+0x4>
	...

0800658c <__errno>:
 800658c:	4b01      	ldr	r3, [pc, #4]	@ (8006594 <__errno+0x8>)
 800658e:	6818      	ldr	r0, [r3, #0]
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	2000000c 	.word	0x2000000c

08006598 <__libc_init_array>:
 8006598:	b570      	push	{r4, r5, r6, lr}
 800659a:	4d0d      	ldr	r5, [pc, #52]	@ (80065d0 <__libc_init_array+0x38>)
 800659c:	4c0d      	ldr	r4, [pc, #52]	@ (80065d4 <__libc_init_array+0x3c>)
 800659e:	1b64      	subs	r4, r4, r5
 80065a0:	10a4      	asrs	r4, r4, #2
 80065a2:	2600      	movs	r6, #0
 80065a4:	42a6      	cmp	r6, r4
 80065a6:	d109      	bne.n	80065bc <__libc_init_array+0x24>
 80065a8:	4d0b      	ldr	r5, [pc, #44]	@ (80065d8 <__libc_init_array+0x40>)
 80065aa:	4c0c      	ldr	r4, [pc, #48]	@ (80065dc <__libc_init_array+0x44>)
 80065ac:	f001 ff74 	bl	8008498 <_init>
 80065b0:	1b64      	subs	r4, r4, r5
 80065b2:	10a4      	asrs	r4, r4, #2
 80065b4:	2600      	movs	r6, #0
 80065b6:	42a6      	cmp	r6, r4
 80065b8:	d105      	bne.n	80065c6 <__libc_init_array+0x2e>
 80065ba:	bd70      	pop	{r4, r5, r6, pc}
 80065bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80065c0:	4798      	blx	r3
 80065c2:	3601      	adds	r6, #1
 80065c4:	e7ee      	b.n	80065a4 <__libc_init_array+0xc>
 80065c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ca:	4798      	blx	r3
 80065cc:	3601      	adds	r6, #1
 80065ce:	e7f2      	b.n	80065b6 <__libc_init_array+0x1e>
 80065d0:	080086d8 	.word	0x080086d8
 80065d4:	080086d8 	.word	0x080086d8
 80065d8:	080086d8 	.word	0x080086d8
 80065dc:	080086dc 	.word	0x080086dc

080065e0 <pow>:
 80065e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065e2:	ed2d 8b02 	vpush	{d8}
 80065e6:	eeb0 8a40 	vmov.f32	s16, s0
 80065ea:	eef0 8a60 	vmov.f32	s17, s1
 80065ee:	ec55 4b11 	vmov	r4, r5, d1
 80065f2:	f000 fb81 	bl	8006cf8 <__ieee754_pow>
 80065f6:	4622      	mov	r2, r4
 80065f8:	462b      	mov	r3, r5
 80065fa:	4620      	mov	r0, r4
 80065fc:	4629      	mov	r1, r5
 80065fe:	ec57 6b10 	vmov	r6, r7, d0
 8006602:	f7fa fa57 	bl	8000ab4 <__aeabi_dcmpun>
 8006606:	2800      	cmp	r0, #0
 8006608:	d13b      	bne.n	8006682 <pow+0xa2>
 800660a:	ec51 0b18 	vmov	r0, r1, d8
 800660e:	2200      	movs	r2, #0
 8006610:	2300      	movs	r3, #0
 8006612:	f7fa fa1d 	bl	8000a50 <__aeabi_dcmpeq>
 8006616:	b1b8      	cbz	r0, 8006648 <pow+0x68>
 8006618:	2200      	movs	r2, #0
 800661a:	2300      	movs	r3, #0
 800661c:	4620      	mov	r0, r4
 800661e:	4629      	mov	r1, r5
 8006620:	f7fa fa16 	bl	8000a50 <__aeabi_dcmpeq>
 8006624:	2800      	cmp	r0, #0
 8006626:	d146      	bne.n	80066b6 <pow+0xd6>
 8006628:	ec45 4b10 	vmov	d0, r4, r5
 800662c:	f000 f8f8 	bl	8006820 <finite>
 8006630:	b338      	cbz	r0, 8006682 <pow+0xa2>
 8006632:	2200      	movs	r2, #0
 8006634:	2300      	movs	r3, #0
 8006636:	4620      	mov	r0, r4
 8006638:	4629      	mov	r1, r5
 800663a:	f7fa fa13 	bl	8000a64 <__aeabi_dcmplt>
 800663e:	b300      	cbz	r0, 8006682 <pow+0xa2>
 8006640:	f7ff ffa4 	bl	800658c <__errno>
 8006644:	2322      	movs	r3, #34	@ 0x22
 8006646:	e01b      	b.n	8006680 <pow+0xa0>
 8006648:	ec47 6b10 	vmov	d0, r6, r7
 800664c:	f000 f8e8 	bl	8006820 <finite>
 8006650:	b9e0      	cbnz	r0, 800668c <pow+0xac>
 8006652:	eeb0 0a48 	vmov.f32	s0, s16
 8006656:	eef0 0a68 	vmov.f32	s1, s17
 800665a:	f000 f8e1 	bl	8006820 <finite>
 800665e:	b1a8      	cbz	r0, 800668c <pow+0xac>
 8006660:	ec45 4b10 	vmov	d0, r4, r5
 8006664:	f000 f8dc 	bl	8006820 <finite>
 8006668:	b180      	cbz	r0, 800668c <pow+0xac>
 800666a:	4632      	mov	r2, r6
 800666c:	463b      	mov	r3, r7
 800666e:	4630      	mov	r0, r6
 8006670:	4639      	mov	r1, r7
 8006672:	f7fa fa1f 	bl	8000ab4 <__aeabi_dcmpun>
 8006676:	2800      	cmp	r0, #0
 8006678:	d0e2      	beq.n	8006640 <pow+0x60>
 800667a:	f7ff ff87 	bl	800658c <__errno>
 800667e:	2321      	movs	r3, #33	@ 0x21
 8006680:	6003      	str	r3, [r0, #0]
 8006682:	ecbd 8b02 	vpop	{d8}
 8006686:	ec47 6b10 	vmov	d0, r6, r7
 800668a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800668c:	2200      	movs	r2, #0
 800668e:	2300      	movs	r3, #0
 8006690:	4630      	mov	r0, r6
 8006692:	4639      	mov	r1, r7
 8006694:	f7fa f9dc 	bl	8000a50 <__aeabi_dcmpeq>
 8006698:	2800      	cmp	r0, #0
 800669a:	d0f2      	beq.n	8006682 <pow+0xa2>
 800669c:	eeb0 0a48 	vmov.f32	s0, s16
 80066a0:	eef0 0a68 	vmov.f32	s1, s17
 80066a4:	f000 f8bc 	bl	8006820 <finite>
 80066a8:	2800      	cmp	r0, #0
 80066aa:	d0ea      	beq.n	8006682 <pow+0xa2>
 80066ac:	ec45 4b10 	vmov	d0, r4, r5
 80066b0:	f000 f8b6 	bl	8006820 <finite>
 80066b4:	e7c3      	b.n	800663e <pow+0x5e>
 80066b6:	4f01      	ldr	r7, [pc, #4]	@ (80066bc <pow+0xdc>)
 80066b8:	2600      	movs	r6, #0
 80066ba:	e7e2      	b.n	8006682 <pow+0xa2>
 80066bc:	3ff00000 	.word	0x3ff00000

080066c0 <cos>:
 80066c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80066c2:	ec53 2b10 	vmov	r2, r3, d0
 80066c6:	4826      	ldr	r0, [pc, #152]	@ (8006760 <cos+0xa0>)
 80066c8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80066cc:	4281      	cmp	r1, r0
 80066ce:	d806      	bhi.n	80066de <cos+0x1e>
 80066d0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8006758 <cos+0x98>
 80066d4:	b005      	add	sp, #20
 80066d6:	f85d eb04 	ldr.w	lr, [sp], #4
 80066da:	f000 b989 	b.w	80069f0 <__kernel_cos>
 80066de:	4821      	ldr	r0, [pc, #132]	@ (8006764 <cos+0xa4>)
 80066e0:	4281      	cmp	r1, r0
 80066e2:	d908      	bls.n	80066f6 <cos+0x36>
 80066e4:	4610      	mov	r0, r2
 80066e6:	4619      	mov	r1, r3
 80066e8:	f7f9 fd92 	bl	8000210 <__aeabi_dsub>
 80066ec:	ec41 0b10 	vmov	d0, r0, r1
 80066f0:	b005      	add	sp, #20
 80066f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80066f6:	4668      	mov	r0, sp
 80066f8:	f001 f842 	bl	8007780 <__ieee754_rem_pio2>
 80066fc:	f000 0003 	and.w	r0, r0, #3
 8006700:	2801      	cmp	r0, #1
 8006702:	d00b      	beq.n	800671c <cos+0x5c>
 8006704:	2802      	cmp	r0, #2
 8006706:	d015      	beq.n	8006734 <cos+0x74>
 8006708:	b9d8      	cbnz	r0, 8006742 <cos+0x82>
 800670a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800670e:	ed9d 0b00 	vldr	d0, [sp]
 8006712:	f000 f96d 	bl	80069f0 <__kernel_cos>
 8006716:	ec51 0b10 	vmov	r0, r1, d0
 800671a:	e7e7      	b.n	80066ec <cos+0x2c>
 800671c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006720:	ed9d 0b00 	vldr	d0, [sp]
 8006724:	f000 fa2c 	bl	8006b80 <__kernel_sin>
 8006728:	ec53 2b10 	vmov	r2, r3, d0
 800672c:	4610      	mov	r0, r2
 800672e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006732:	e7db      	b.n	80066ec <cos+0x2c>
 8006734:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006738:	ed9d 0b00 	vldr	d0, [sp]
 800673c:	f000 f958 	bl	80069f0 <__kernel_cos>
 8006740:	e7f2      	b.n	8006728 <cos+0x68>
 8006742:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006746:	ed9d 0b00 	vldr	d0, [sp]
 800674a:	2001      	movs	r0, #1
 800674c:	f000 fa18 	bl	8006b80 <__kernel_sin>
 8006750:	e7e1      	b.n	8006716 <cos+0x56>
 8006752:	bf00      	nop
 8006754:	f3af 8000 	nop.w
	...
 8006760:	3fe921fb 	.word	0x3fe921fb
 8006764:	7fefffff 	.word	0x7fefffff

08006768 <fabs>:
 8006768:	ec51 0b10 	vmov	r0, r1, d0
 800676c:	4602      	mov	r2, r0
 800676e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006772:	ec43 2b10 	vmov	d0, r2, r3
 8006776:	4770      	bx	lr

08006778 <sin>:
 8006778:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800677a:	ec53 2b10 	vmov	r2, r3, d0
 800677e:	4826      	ldr	r0, [pc, #152]	@ (8006818 <sin+0xa0>)
 8006780:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006784:	4281      	cmp	r1, r0
 8006786:	d807      	bhi.n	8006798 <sin+0x20>
 8006788:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8006810 <sin+0x98>
 800678c:	2000      	movs	r0, #0
 800678e:	b005      	add	sp, #20
 8006790:	f85d eb04 	ldr.w	lr, [sp], #4
 8006794:	f000 b9f4 	b.w	8006b80 <__kernel_sin>
 8006798:	4820      	ldr	r0, [pc, #128]	@ (800681c <sin+0xa4>)
 800679a:	4281      	cmp	r1, r0
 800679c:	d908      	bls.n	80067b0 <sin+0x38>
 800679e:	4610      	mov	r0, r2
 80067a0:	4619      	mov	r1, r3
 80067a2:	f7f9 fd35 	bl	8000210 <__aeabi_dsub>
 80067a6:	ec41 0b10 	vmov	d0, r0, r1
 80067aa:	b005      	add	sp, #20
 80067ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80067b0:	4668      	mov	r0, sp
 80067b2:	f000 ffe5 	bl	8007780 <__ieee754_rem_pio2>
 80067b6:	f000 0003 	and.w	r0, r0, #3
 80067ba:	2801      	cmp	r0, #1
 80067bc:	d00c      	beq.n	80067d8 <sin+0x60>
 80067be:	2802      	cmp	r0, #2
 80067c0:	d011      	beq.n	80067e6 <sin+0x6e>
 80067c2:	b9e8      	cbnz	r0, 8006800 <sin+0x88>
 80067c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80067c8:	ed9d 0b00 	vldr	d0, [sp]
 80067cc:	2001      	movs	r0, #1
 80067ce:	f000 f9d7 	bl	8006b80 <__kernel_sin>
 80067d2:	ec51 0b10 	vmov	r0, r1, d0
 80067d6:	e7e6      	b.n	80067a6 <sin+0x2e>
 80067d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80067dc:	ed9d 0b00 	vldr	d0, [sp]
 80067e0:	f000 f906 	bl	80069f0 <__kernel_cos>
 80067e4:	e7f5      	b.n	80067d2 <sin+0x5a>
 80067e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80067ea:	ed9d 0b00 	vldr	d0, [sp]
 80067ee:	2001      	movs	r0, #1
 80067f0:	f000 f9c6 	bl	8006b80 <__kernel_sin>
 80067f4:	ec53 2b10 	vmov	r2, r3, d0
 80067f8:	4610      	mov	r0, r2
 80067fa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80067fe:	e7d2      	b.n	80067a6 <sin+0x2e>
 8006800:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006804:	ed9d 0b00 	vldr	d0, [sp]
 8006808:	f000 f8f2 	bl	80069f0 <__kernel_cos>
 800680c:	e7f2      	b.n	80067f4 <sin+0x7c>
 800680e:	bf00      	nop
	...
 8006818:	3fe921fb 	.word	0x3fe921fb
 800681c:	7fefffff 	.word	0x7fefffff

08006820 <finite>:
 8006820:	b082      	sub	sp, #8
 8006822:	ed8d 0b00 	vstr	d0, [sp]
 8006826:	9801      	ldr	r0, [sp, #4]
 8006828:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800682c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8006830:	0fc0      	lsrs	r0, r0, #31
 8006832:	b002      	add	sp, #8
 8006834:	4770      	bx	lr
	...

08006838 <__ieee754_sqrt>:
 8006838:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800683c:	4a68      	ldr	r2, [pc, #416]	@ (80069e0 <__ieee754_sqrt+0x1a8>)
 800683e:	ec55 4b10 	vmov	r4, r5, d0
 8006842:	43aa      	bics	r2, r5
 8006844:	462b      	mov	r3, r5
 8006846:	4621      	mov	r1, r4
 8006848:	d110      	bne.n	800686c <__ieee754_sqrt+0x34>
 800684a:	4622      	mov	r2, r4
 800684c:	4620      	mov	r0, r4
 800684e:	4629      	mov	r1, r5
 8006850:	f7f9 fe96 	bl	8000580 <__aeabi_dmul>
 8006854:	4602      	mov	r2, r0
 8006856:	460b      	mov	r3, r1
 8006858:	4620      	mov	r0, r4
 800685a:	4629      	mov	r1, r5
 800685c:	f7f9 fcda 	bl	8000214 <__adddf3>
 8006860:	4604      	mov	r4, r0
 8006862:	460d      	mov	r5, r1
 8006864:	ec45 4b10 	vmov	d0, r4, r5
 8006868:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800686c:	2d00      	cmp	r5, #0
 800686e:	dc0e      	bgt.n	800688e <__ieee754_sqrt+0x56>
 8006870:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8006874:	4322      	orrs	r2, r4
 8006876:	d0f5      	beq.n	8006864 <__ieee754_sqrt+0x2c>
 8006878:	b19d      	cbz	r5, 80068a2 <__ieee754_sqrt+0x6a>
 800687a:	4622      	mov	r2, r4
 800687c:	4620      	mov	r0, r4
 800687e:	4629      	mov	r1, r5
 8006880:	f7f9 fcc6 	bl	8000210 <__aeabi_dsub>
 8006884:	4602      	mov	r2, r0
 8006886:	460b      	mov	r3, r1
 8006888:	f7f9 ffa4 	bl	80007d4 <__aeabi_ddiv>
 800688c:	e7e8      	b.n	8006860 <__ieee754_sqrt+0x28>
 800688e:	152a      	asrs	r2, r5, #20
 8006890:	d115      	bne.n	80068be <__ieee754_sqrt+0x86>
 8006892:	2000      	movs	r0, #0
 8006894:	e009      	b.n	80068aa <__ieee754_sqrt+0x72>
 8006896:	0acb      	lsrs	r3, r1, #11
 8006898:	3a15      	subs	r2, #21
 800689a:	0549      	lsls	r1, r1, #21
 800689c:	2b00      	cmp	r3, #0
 800689e:	d0fa      	beq.n	8006896 <__ieee754_sqrt+0x5e>
 80068a0:	e7f7      	b.n	8006892 <__ieee754_sqrt+0x5a>
 80068a2:	462a      	mov	r2, r5
 80068a4:	e7fa      	b.n	800689c <__ieee754_sqrt+0x64>
 80068a6:	005b      	lsls	r3, r3, #1
 80068a8:	3001      	adds	r0, #1
 80068aa:	02dc      	lsls	r4, r3, #11
 80068ac:	d5fb      	bpl.n	80068a6 <__ieee754_sqrt+0x6e>
 80068ae:	1e44      	subs	r4, r0, #1
 80068b0:	1b12      	subs	r2, r2, r4
 80068b2:	f1c0 0420 	rsb	r4, r0, #32
 80068b6:	fa21 f404 	lsr.w	r4, r1, r4
 80068ba:	4323      	orrs	r3, r4
 80068bc:	4081      	lsls	r1, r0
 80068be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068c2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80068c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80068ca:	07d2      	lsls	r2, r2, #31
 80068cc:	bf5c      	itt	pl
 80068ce:	005b      	lslpl	r3, r3, #1
 80068d0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80068d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80068d8:	bf58      	it	pl
 80068da:	0049      	lslpl	r1, r1, #1
 80068dc:	2600      	movs	r6, #0
 80068de:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80068e2:	106d      	asrs	r5, r5, #1
 80068e4:	0049      	lsls	r1, r1, #1
 80068e6:	2016      	movs	r0, #22
 80068e8:	4632      	mov	r2, r6
 80068ea:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80068ee:	1917      	adds	r7, r2, r4
 80068f0:	429f      	cmp	r7, r3
 80068f2:	bfde      	ittt	le
 80068f4:	193a      	addle	r2, r7, r4
 80068f6:	1bdb      	suble	r3, r3, r7
 80068f8:	1936      	addle	r6, r6, r4
 80068fa:	0fcf      	lsrs	r7, r1, #31
 80068fc:	3801      	subs	r0, #1
 80068fe:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8006902:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006906:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800690a:	d1f0      	bne.n	80068ee <__ieee754_sqrt+0xb6>
 800690c:	4604      	mov	r4, r0
 800690e:	2720      	movs	r7, #32
 8006910:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8006914:	429a      	cmp	r2, r3
 8006916:	eb00 0e0c 	add.w	lr, r0, ip
 800691a:	db02      	blt.n	8006922 <__ieee754_sqrt+0xea>
 800691c:	d113      	bne.n	8006946 <__ieee754_sqrt+0x10e>
 800691e:	458e      	cmp	lr, r1
 8006920:	d811      	bhi.n	8006946 <__ieee754_sqrt+0x10e>
 8006922:	f1be 0f00 	cmp.w	lr, #0
 8006926:	eb0e 000c 	add.w	r0, lr, ip
 800692a:	da42      	bge.n	80069b2 <__ieee754_sqrt+0x17a>
 800692c:	2800      	cmp	r0, #0
 800692e:	db40      	blt.n	80069b2 <__ieee754_sqrt+0x17a>
 8006930:	f102 0801 	add.w	r8, r2, #1
 8006934:	1a9b      	subs	r3, r3, r2
 8006936:	458e      	cmp	lr, r1
 8006938:	bf88      	it	hi
 800693a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800693e:	eba1 010e 	sub.w	r1, r1, lr
 8006942:	4464      	add	r4, ip
 8006944:	4642      	mov	r2, r8
 8006946:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800694a:	3f01      	subs	r7, #1
 800694c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8006950:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006954:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006958:	d1dc      	bne.n	8006914 <__ieee754_sqrt+0xdc>
 800695a:	4319      	orrs	r1, r3
 800695c:	d01b      	beq.n	8006996 <__ieee754_sqrt+0x15e>
 800695e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80069e4 <__ieee754_sqrt+0x1ac>
 8006962:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80069e8 <__ieee754_sqrt+0x1b0>
 8006966:	e9da 0100 	ldrd	r0, r1, [sl]
 800696a:	e9db 2300 	ldrd	r2, r3, [fp]
 800696e:	f7f9 fc4f 	bl	8000210 <__aeabi_dsub>
 8006972:	e9da 8900 	ldrd	r8, r9, [sl]
 8006976:	4602      	mov	r2, r0
 8006978:	460b      	mov	r3, r1
 800697a:	4640      	mov	r0, r8
 800697c:	4649      	mov	r1, r9
 800697e:	f7fa f87b 	bl	8000a78 <__aeabi_dcmple>
 8006982:	b140      	cbz	r0, 8006996 <__ieee754_sqrt+0x15e>
 8006984:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006988:	e9da 0100 	ldrd	r0, r1, [sl]
 800698c:	e9db 2300 	ldrd	r2, r3, [fp]
 8006990:	d111      	bne.n	80069b6 <__ieee754_sqrt+0x17e>
 8006992:	3601      	adds	r6, #1
 8006994:	463c      	mov	r4, r7
 8006996:	1072      	asrs	r2, r6, #1
 8006998:	0863      	lsrs	r3, r4, #1
 800699a:	07f1      	lsls	r1, r6, #31
 800699c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80069a0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80069a4:	bf48      	it	mi
 80069a6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80069aa:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80069ae:	4618      	mov	r0, r3
 80069b0:	e756      	b.n	8006860 <__ieee754_sqrt+0x28>
 80069b2:	4690      	mov	r8, r2
 80069b4:	e7be      	b.n	8006934 <__ieee754_sqrt+0xfc>
 80069b6:	f7f9 fc2d 	bl	8000214 <__adddf3>
 80069ba:	e9da 8900 	ldrd	r8, r9, [sl]
 80069be:	4602      	mov	r2, r0
 80069c0:	460b      	mov	r3, r1
 80069c2:	4640      	mov	r0, r8
 80069c4:	4649      	mov	r1, r9
 80069c6:	f7fa f84d 	bl	8000a64 <__aeabi_dcmplt>
 80069ca:	b120      	cbz	r0, 80069d6 <__ieee754_sqrt+0x19e>
 80069cc:	1ca0      	adds	r0, r4, #2
 80069ce:	bf08      	it	eq
 80069d0:	3601      	addeq	r6, #1
 80069d2:	3402      	adds	r4, #2
 80069d4:	e7df      	b.n	8006996 <__ieee754_sqrt+0x15e>
 80069d6:	1c63      	adds	r3, r4, #1
 80069d8:	f023 0401 	bic.w	r4, r3, #1
 80069dc:	e7db      	b.n	8006996 <__ieee754_sqrt+0x15e>
 80069de:	bf00      	nop
 80069e0:	7ff00000 	.word	0x7ff00000
 80069e4:	20000068 	.word	0x20000068
 80069e8:	20000060 	.word	0x20000060
 80069ec:	00000000 	.word	0x00000000

080069f0 <__kernel_cos>:
 80069f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f4:	ec57 6b10 	vmov	r6, r7, d0
 80069f8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80069fc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8006a00:	ed8d 1b00 	vstr	d1, [sp]
 8006a04:	d206      	bcs.n	8006a14 <__kernel_cos+0x24>
 8006a06:	4630      	mov	r0, r6
 8006a08:	4639      	mov	r1, r7
 8006a0a:	f7fa f869 	bl	8000ae0 <__aeabi_d2iz>
 8006a0e:	2800      	cmp	r0, #0
 8006a10:	f000 8088 	beq.w	8006b24 <__kernel_cos+0x134>
 8006a14:	4632      	mov	r2, r6
 8006a16:	463b      	mov	r3, r7
 8006a18:	4630      	mov	r0, r6
 8006a1a:	4639      	mov	r1, r7
 8006a1c:	f7f9 fdb0 	bl	8000580 <__aeabi_dmul>
 8006a20:	4b51      	ldr	r3, [pc, #324]	@ (8006b68 <__kernel_cos+0x178>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	4604      	mov	r4, r0
 8006a26:	460d      	mov	r5, r1
 8006a28:	f7f9 fdaa 	bl	8000580 <__aeabi_dmul>
 8006a2c:	a340      	add	r3, pc, #256	@ (adr r3, 8006b30 <__kernel_cos+0x140>)
 8006a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a32:	4682      	mov	sl, r0
 8006a34:	468b      	mov	fp, r1
 8006a36:	4620      	mov	r0, r4
 8006a38:	4629      	mov	r1, r5
 8006a3a:	f7f9 fda1 	bl	8000580 <__aeabi_dmul>
 8006a3e:	a33e      	add	r3, pc, #248	@ (adr r3, 8006b38 <__kernel_cos+0x148>)
 8006a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a44:	f7f9 fbe6 	bl	8000214 <__adddf3>
 8006a48:	4622      	mov	r2, r4
 8006a4a:	462b      	mov	r3, r5
 8006a4c:	f7f9 fd98 	bl	8000580 <__aeabi_dmul>
 8006a50:	a33b      	add	r3, pc, #236	@ (adr r3, 8006b40 <__kernel_cos+0x150>)
 8006a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a56:	f7f9 fbdb 	bl	8000210 <__aeabi_dsub>
 8006a5a:	4622      	mov	r2, r4
 8006a5c:	462b      	mov	r3, r5
 8006a5e:	f7f9 fd8f 	bl	8000580 <__aeabi_dmul>
 8006a62:	a339      	add	r3, pc, #228	@ (adr r3, 8006b48 <__kernel_cos+0x158>)
 8006a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a68:	f7f9 fbd4 	bl	8000214 <__adddf3>
 8006a6c:	4622      	mov	r2, r4
 8006a6e:	462b      	mov	r3, r5
 8006a70:	f7f9 fd86 	bl	8000580 <__aeabi_dmul>
 8006a74:	a336      	add	r3, pc, #216	@ (adr r3, 8006b50 <__kernel_cos+0x160>)
 8006a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7a:	f7f9 fbc9 	bl	8000210 <__aeabi_dsub>
 8006a7e:	4622      	mov	r2, r4
 8006a80:	462b      	mov	r3, r5
 8006a82:	f7f9 fd7d 	bl	8000580 <__aeabi_dmul>
 8006a86:	a334      	add	r3, pc, #208	@ (adr r3, 8006b58 <__kernel_cos+0x168>)
 8006a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8c:	f7f9 fbc2 	bl	8000214 <__adddf3>
 8006a90:	4622      	mov	r2, r4
 8006a92:	462b      	mov	r3, r5
 8006a94:	f7f9 fd74 	bl	8000580 <__aeabi_dmul>
 8006a98:	4622      	mov	r2, r4
 8006a9a:	462b      	mov	r3, r5
 8006a9c:	f7f9 fd70 	bl	8000580 <__aeabi_dmul>
 8006aa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006aa4:	4604      	mov	r4, r0
 8006aa6:	460d      	mov	r5, r1
 8006aa8:	4630      	mov	r0, r6
 8006aaa:	4639      	mov	r1, r7
 8006aac:	f7f9 fd68 	bl	8000580 <__aeabi_dmul>
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	4629      	mov	r1, r5
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	f7f9 fbaa 	bl	8000210 <__aeabi_dsub>
 8006abc:	4b2b      	ldr	r3, [pc, #172]	@ (8006b6c <__kernel_cos+0x17c>)
 8006abe:	4598      	cmp	r8, r3
 8006ac0:	4606      	mov	r6, r0
 8006ac2:	460f      	mov	r7, r1
 8006ac4:	d810      	bhi.n	8006ae8 <__kernel_cos+0xf8>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	460b      	mov	r3, r1
 8006aca:	4650      	mov	r0, sl
 8006acc:	4659      	mov	r1, fp
 8006ace:	f7f9 fb9f 	bl	8000210 <__aeabi_dsub>
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	4926      	ldr	r1, [pc, #152]	@ (8006b70 <__kernel_cos+0x180>)
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	2000      	movs	r0, #0
 8006ada:	f7f9 fb99 	bl	8000210 <__aeabi_dsub>
 8006ade:	ec41 0b10 	vmov	d0, r0, r1
 8006ae2:	b003      	add	sp, #12
 8006ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ae8:	4b22      	ldr	r3, [pc, #136]	@ (8006b74 <__kernel_cos+0x184>)
 8006aea:	4921      	ldr	r1, [pc, #132]	@ (8006b70 <__kernel_cos+0x180>)
 8006aec:	4598      	cmp	r8, r3
 8006aee:	bf8c      	ite	hi
 8006af0:	4d21      	ldrhi	r5, [pc, #132]	@ (8006b78 <__kernel_cos+0x188>)
 8006af2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8006af6:	2400      	movs	r4, #0
 8006af8:	4622      	mov	r2, r4
 8006afa:	462b      	mov	r3, r5
 8006afc:	2000      	movs	r0, #0
 8006afe:	f7f9 fb87 	bl	8000210 <__aeabi_dsub>
 8006b02:	4622      	mov	r2, r4
 8006b04:	4680      	mov	r8, r0
 8006b06:	4689      	mov	r9, r1
 8006b08:	462b      	mov	r3, r5
 8006b0a:	4650      	mov	r0, sl
 8006b0c:	4659      	mov	r1, fp
 8006b0e:	f7f9 fb7f 	bl	8000210 <__aeabi_dsub>
 8006b12:	4632      	mov	r2, r6
 8006b14:	463b      	mov	r3, r7
 8006b16:	f7f9 fb7b 	bl	8000210 <__aeabi_dsub>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	4640      	mov	r0, r8
 8006b20:	4649      	mov	r1, r9
 8006b22:	e7da      	b.n	8006ada <__kernel_cos+0xea>
 8006b24:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8006b60 <__kernel_cos+0x170>
 8006b28:	e7db      	b.n	8006ae2 <__kernel_cos+0xf2>
 8006b2a:	bf00      	nop
 8006b2c:	f3af 8000 	nop.w
 8006b30:	be8838d4 	.word	0xbe8838d4
 8006b34:	bda8fae9 	.word	0xbda8fae9
 8006b38:	bdb4b1c4 	.word	0xbdb4b1c4
 8006b3c:	3e21ee9e 	.word	0x3e21ee9e
 8006b40:	809c52ad 	.word	0x809c52ad
 8006b44:	3e927e4f 	.word	0x3e927e4f
 8006b48:	19cb1590 	.word	0x19cb1590
 8006b4c:	3efa01a0 	.word	0x3efa01a0
 8006b50:	16c15177 	.word	0x16c15177
 8006b54:	3f56c16c 	.word	0x3f56c16c
 8006b58:	5555554c 	.word	0x5555554c
 8006b5c:	3fa55555 	.word	0x3fa55555
 8006b60:	00000000 	.word	0x00000000
 8006b64:	3ff00000 	.word	0x3ff00000
 8006b68:	3fe00000 	.word	0x3fe00000
 8006b6c:	3fd33332 	.word	0x3fd33332
 8006b70:	3ff00000 	.word	0x3ff00000
 8006b74:	3fe90000 	.word	0x3fe90000
 8006b78:	3fd20000 	.word	0x3fd20000
 8006b7c:	00000000 	.word	0x00000000

08006b80 <__kernel_sin>:
 8006b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b84:	ec55 4b10 	vmov	r4, r5, d0
 8006b88:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006b8c:	b085      	sub	sp, #20
 8006b8e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8006b92:	ed8d 1b02 	vstr	d1, [sp, #8]
 8006b96:	4680      	mov	r8, r0
 8006b98:	d205      	bcs.n	8006ba6 <__kernel_sin+0x26>
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	4629      	mov	r1, r5
 8006b9e:	f7f9 ff9f 	bl	8000ae0 <__aeabi_d2iz>
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	d052      	beq.n	8006c4c <__kernel_sin+0xcc>
 8006ba6:	4622      	mov	r2, r4
 8006ba8:	462b      	mov	r3, r5
 8006baa:	4620      	mov	r0, r4
 8006bac:	4629      	mov	r1, r5
 8006bae:	f7f9 fce7 	bl	8000580 <__aeabi_dmul>
 8006bb2:	4682      	mov	sl, r0
 8006bb4:	468b      	mov	fp, r1
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	460b      	mov	r3, r1
 8006bba:	4620      	mov	r0, r4
 8006bbc:	4629      	mov	r1, r5
 8006bbe:	f7f9 fcdf 	bl	8000580 <__aeabi_dmul>
 8006bc2:	a342      	add	r3, pc, #264	@ (adr r3, 8006ccc <__kernel_sin+0x14c>)
 8006bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc8:	e9cd 0100 	strd	r0, r1, [sp]
 8006bcc:	4650      	mov	r0, sl
 8006bce:	4659      	mov	r1, fp
 8006bd0:	f7f9 fcd6 	bl	8000580 <__aeabi_dmul>
 8006bd4:	a33f      	add	r3, pc, #252	@ (adr r3, 8006cd4 <__kernel_sin+0x154>)
 8006bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bda:	f7f9 fb19 	bl	8000210 <__aeabi_dsub>
 8006bde:	4652      	mov	r2, sl
 8006be0:	465b      	mov	r3, fp
 8006be2:	f7f9 fccd 	bl	8000580 <__aeabi_dmul>
 8006be6:	a33d      	add	r3, pc, #244	@ (adr r3, 8006cdc <__kernel_sin+0x15c>)
 8006be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bec:	f7f9 fb12 	bl	8000214 <__adddf3>
 8006bf0:	4652      	mov	r2, sl
 8006bf2:	465b      	mov	r3, fp
 8006bf4:	f7f9 fcc4 	bl	8000580 <__aeabi_dmul>
 8006bf8:	a33a      	add	r3, pc, #232	@ (adr r3, 8006ce4 <__kernel_sin+0x164>)
 8006bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfe:	f7f9 fb07 	bl	8000210 <__aeabi_dsub>
 8006c02:	4652      	mov	r2, sl
 8006c04:	465b      	mov	r3, fp
 8006c06:	f7f9 fcbb 	bl	8000580 <__aeabi_dmul>
 8006c0a:	a338      	add	r3, pc, #224	@ (adr r3, 8006cec <__kernel_sin+0x16c>)
 8006c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c10:	f7f9 fb00 	bl	8000214 <__adddf3>
 8006c14:	4606      	mov	r6, r0
 8006c16:	460f      	mov	r7, r1
 8006c18:	f1b8 0f00 	cmp.w	r8, #0
 8006c1c:	d11b      	bne.n	8006c56 <__kernel_sin+0xd6>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	460b      	mov	r3, r1
 8006c22:	4650      	mov	r0, sl
 8006c24:	4659      	mov	r1, fp
 8006c26:	f7f9 fcab 	bl	8000580 <__aeabi_dmul>
 8006c2a:	a325      	add	r3, pc, #148	@ (adr r3, 8006cc0 <__kernel_sin+0x140>)
 8006c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c30:	f7f9 faee 	bl	8000210 <__aeabi_dsub>
 8006c34:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c38:	f7f9 fca2 	bl	8000580 <__aeabi_dmul>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	460b      	mov	r3, r1
 8006c40:	4620      	mov	r0, r4
 8006c42:	4629      	mov	r1, r5
 8006c44:	f7f9 fae6 	bl	8000214 <__adddf3>
 8006c48:	4604      	mov	r4, r0
 8006c4a:	460d      	mov	r5, r1
 8006c4c:	ec45 4b10 	vmov	d0, r4, r5
 8006c50:	b005      	add	sp, #20
 8006c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8006cc8 <__kernel_sin+0x148>)
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f7f9 fc8f 	bl	8000580 <__aeabi_dmul>
 8006c62:	4632      	mov	r2, r6
 8006c64:	4680      	mov	r8, r0
 8006c66:	4689      	mov	r9, r1
 8006c68:	463b      	mov	r3, r7
 8006c6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c6e:	f7f9 fc87 	bl	8000580 <__aeabi_dmul>
 8006c72:	4602      	mov	r2, r0
 8006c74:	460b      	mov	r3, r1
 8006c76:	4640      	mov	r0, r8
 8006c78:	4649      	mov	r1, r9
 8006c7a:	f7f9 fac9 	bl	8000210 <__aeabi_dsub>
 8006c7e:	4652      	mov	r2, sl
 8006c80:	465b      	mov	r3, fp
 8006c82:	f7f9 fc7d 	bl	8000580 <__aeabi_dmul>
 8006c86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c8a:	f7f9 fac1 	bl	8000210 <__aeabi_dsub>
 8006c8e:	a30c      	add	r3, pc, #48	@ (adr r3, 8006cc0 <__kernel_sin+0x140>)
 8006c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c94:	4606      	mov	r6, r0
 8006c96:	460f      	mov	r7, r1
 8006c98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c9c:	f7f9 fc70 	bl	8000580 <__aeabi_dmul>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	4630      	mov	r0, r6
 8006ca6:	4639      	mov	r1, r7
 8006ca8:	f7f9 fab4 	bl	8000214 <__adddf3>
 8006cac:	4602      	mov	r2, r0
 8006cae:	460b      	mov	r3, r1
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	4629      	mov	r1, r5
 8006cb4:	f7f9 faac 	bl	8000210 <__aeabi_dsub>
 8006cb8:	e7c6      	b.n	8006c48 <__kernel_sin+0xc8>
 8006cba:	bf00      	nop
 8006cbc:	f3af 8000 	nop.w
 8006cc0:	55555549 	.word	0x55555549
 8006cc4:	3fc55555 	.word	0x3fc55555
 8006cc8:	3fe00000 	.word	0x3fe00000
 8006ccc:	5acfd57c 	.word	0x5acfd57c
 8006cd0:	3de5d93a 	.word	0x3de5d93a
 8006cd4:	8a2b9ceb 	.word	0x8a2b9ceb
 8006cd8:	3e5ae5e6 	.word	0x3e5ae5e6
 8006cdc:	57b1fe7d 	.word	0x57b1fe7d
 8006ce0:	3ec71de3 	.word	0x3ec71de3
 8006ce4:	19c161d5 	.word	0x19c161d5
 8006ce8:	3f2a01a0 	.word	0x3f2a01a0
 8006cec:	1110f8a6 	.word	0x1110f8a6
 8006cf0:	3f811111 	.word	0x3f811111
 8006cf4:	00000000 	.word	0x00000000

08006cf8 <__ieee754_pow>:
 8006cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfc:	b091      	sub	sp, #68	@ 0x44
 8006cfe:	ed8d 1b00 	vstr	d1, [sp]
 8006d02:	e9dd 1900 	ldrd	r1, r9, [sp]
 8006d06:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8006d0a:	ea5a 0001 	orrs.w	r0, sl, r1
 8006d0e:	ec57 6b10 	vmov	r6, r7, d0
 8006d12:	d113      	bne.n	8006d3c <__ieee754_pow+0x44>
 8006d14:	19b3      	adds	r3, r6, r6
 8006d16:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8006d1a:	4152      	adcs	r2, r2
 8006d1c:	4298      	cmp	r0, r3
 8006d1e:	4b98      	ldr	r3, [pc, #608]	@ (8006f80 <__ieee754_pow+0x288>)
 8006d20:	4193      	sbcs	r3, r2
 8006d22:	f080 84ea 	bcs.w	80076fa <__ieee754_pow+0xa02>
 8006d26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d2a:	4630      	mov	r0, r6
 8006d2c:	4639      	mov	r1, r7
 8006d2e:	f7f9 fa71 	bl	8000214 <__adddf3>
 8006d32:	ec41 0b10 	vmov	d0, r0, r1
 8006d36:	b011      	add	sp, #68	@ 0x44
 8006d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d3c:	4a91      	ldr	r2, [pc, #580]	@ (8006f84 <__ieee754_pow+0x28c>)
 8006d3e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8006d42:	4590      	cmp	r8, r2
 8006d44:	463d      	mov	r5, r7
 8006d46:	4633      	mov	r3, r6
 8006d48:	d806      	bhi.n	8006d58 <__ieee754_pow+0x60>
 8006d4a:	d101      	bne.n	8006d50 <__ieee754_pow+0x58>
 8006d4c:	2e00      	cmp	r6, #0
 8006d4e:	d1ea      	bne.n	8006d26 <__ieee754_pow+0x2e>
 8006d50:	4592      	cmp	sl, r2
 8006d52:	d801      	bhi.n	8006d58 <__ieee754_pow+0x60>
 8006d54:	d10e      	bne.n	8006d74 <__ieee754_pow+0x7c>
 8006d56:	b169      	cbz	r1, 8006d74 <__ieee754_pow+0x7c>
 8006d58:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8006d5c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8006d60:	431d      	orrs	r5, r3
 8006d62:	d1e0      	bne.n	8006d26 <__ieee754_pow+0x2e>
 8006d64:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006d68:	18db      	adds	r3, r3, r3
 8006d6a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8006d6e:	4152      	adcs	r2, r2
 8006d70:	429d      	cmp	r5, r3
 8006d72:	e7d4      	b.n	8006d1e <__ieee754_pow+0x26>
 8006d74:	2d00      	cmp	r5, #0
 8006d76:	46c3      	mov	fp, r8
 8006d78:	da3a      	bge.n	8006df0 <__ieee754_pow+0xf8>
 8006d7a:	4a83      	ldr	r2, [pc, #524]	@ (8006f88 <__ieee754_pow+0x290>)
 8006d7c:	4592      	cmp	sl, r2
 8006d7e:	d84d      	bhi.n	8006e1c <__ieee754_pow+0x124>
 8006d80:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8006d84:	4592      	cmp	sl, r2
 8006d86:	f240 84c7 	bls.w	8007718 <__ieee754_pow+0xa20>
 8006d8a:	ea4f 522a 	mov.w	r2, sl, asr #20
 8006d8e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8006d92:	2a14      	cmp	r2, #20
 8006d94:	dd0f      	ble.n	8006db6 <__ieee754_pow+0xbe>
 8006d96:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8006d9a:	fa21 f402 	lsr.w	r4, r1, r2
 8006d9e:	fa04 f202 	lsl.w	r2, r4, r2
 8006da2:	428a      	cmp	r2, r1
 8006da4:	f040 84b8 	bne.w	8007718 <__ieee754_pow+0xa20>
 8006da8:	f004 0401 	and.w	r4, r4, #1
 8006dac:	f1c4 0402 	rsb	r4, r4, #2
 8006db0:	2900      	cmp	r1, #0
 8006db2:	d158      	bne.n	8006e66 <__ieee754_pow+0x16e>
 8006db4:	e00e      	b.n	8006dd4 <__ieee754_pow+0xdc>
 8006db6:	2900      	cmp	r1, #0
 8006db8:	d154      	bne.n	8006e64 <__ieee754_pow+0x16c>
 8006dba:	f1c2 0214 	rsb	r2, r2, #20
 8006dbe:	fa4a f402 	asr.w	r4, sl, r2
 8006dc2:	fa04 f202 	lsl.w	r2, r4, r2
 8006dc6:	4552      	cmp	r2, sl
 8006dc8:	f040 84a3 	bne.w	8007712 <__ieee754_pow+0xa1a>
 8006dcc:	f004 0401 	and.w	r4, r4, #1
 8006dd0:	f1c4 0402 	rsb	r4, r4, #2
 8006dd4:	4a6d      	ldr	r2, [pc, #436]	@ (8006f8c <__ieee754_pow+0x294>)
 8006dd6:	4592      	cmp	sl, r2
 8006dd8:	d12e      	bne.n	8006e38 <__ieee754_pow+0x140>
 8006dda:	f1b9 0f00 	cmp.w	r9, #0
 8006dde:	f280 8494 	bge.w	800770a <__ieee754_pow+0xa12>
 8006de2:	496a      	ldr	r1, [pc, #424]	@ (8006f8c <__ieee754_pow+0x294>)
 8006de4:	4632      	mov	r2, r6
 8006de6:	463b      	mov	r3, r7
 8006de8:	2000      	movs	r0, #0
 8006dea:	f7f9 fcf3 	bl	80007d4 <__aeabi_ddiv>
 8006dee:	e7a0      	b.n	8006d32 <__ieee754_pow+0x3a>
 8006df0:	2400      	movs	r4, #0
 8006df2:	bbc1      	cbnz	r1, 8006e66 <__ieee754_pow+0x16e>
 8006df4:	4a63      	ldr	r2, [pc, #396]	@ (8006f84 <__ieee754_pow+0x28c>)
 8006df6:	4592      	cmp	sl, r2
 8006df8:	d1ec      	bne.n	8006dd4 <__ieee754_pow+0xdc>
 8006dfa:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8006dfe:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8006e02:	431a      	orrs	r2, r3
 8006e04:	f000 8479 	beq.w	80076fa <__ieee754_pow+0xa02>
 8006e08:	4b61      	ldr	r3, [pc, #388]	@ (8006f90 <__ieee754_pow+0x298>)
 8006e0a:	4598      	cmp	r8, r3
 8006e0c:	d908      	bls.n	8006e20 <__ieee754_pow+0x128>
 8006e0e:	f1b9 0f00 	cmp.w	r9, #0
 8006e12:	f2c0 8476 	blt.w	8007702 <__ieee754_pow+0xa0a>
 8006e16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e1a:	e78a      	b.n	8006d32 <__ieee754_pow+0x3a>
 8006e1c:	2402      	movs	r4, #2
 8006e1e:	e7e8      	b.n	8006df2 <__ieee754_pow+0xfa>
 8006e20:	f1b9 0f00 	cmp.w	r9, #0
 8006e24:	f04f 0000 	mov.w	r0, #0
 8006e28:	f04f 0100 	mov.w	r1, #0
 8006e2c:	da81      	bge.n	8006d32 <__ieee754_pow+0x3a>
 8006e2e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006e32:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006e36:	e77c      	b.n	8006d32 <__ieee754_pow+0x3a>
 8006e38:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8006e3c:	d106      	bne.n	8006e4c <__ieee754_pow+0x154>
 8006e3e:	4632      	mov	r2, r6
 8006e40:	463b      	mov	r3, r7
 8006e42:	4630      	mov	r0, r6
 8006e44:	4639      	mov	r1, r7
 8006e46:	f7f9 fb9b 	bl	8000580 <__aeabi_dmul>
 8006e4a:	e772      	b.n	8006d32 <__ieee754_pow+0x3a>
 8006e4c:	4a51      	ldr	r2, [pc, #324]	@ (8006f94 <__ieee754_pow+0x29c>)
 8006e4e:	4591      	cmp	r9, r2
 8006e50:	d109      	bne.n	8006e66 <__ieee754_pow+0x16e>
 8006e52:	2d00      	cmp	r5, #0
 8006e54:	db07      	blt.n	8006e66 <__ieee754_pow+0x16e>
 8006e56:	ec47 6b10 	vmov	d0, r6, r7
 8006e5a:	b011      	add	sp, #68	@ 0x44
 8006e5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e60:	f7ff bcea 	b.w	8006838 <__ieee754_sqrt>
 8006e64:	2400      	movs	r4, #0
 8006e66:	ec47 6b10 	vmov	d0, r6, r7
 8006e6a:	9302      	str	r3, [sp, #8]
 8006e6c:	f7ff fc7c 	bl	8006768 <fabs>
 8006e70:	9b02      	ldr	r3, [sp, #8]
 8006e72:	ec51 0b10 	vmov	r0, r1, d0
 8006e76:	bb53      	cbnz	r3, 8006ece <__ieee754_pow+0x1d6>
 8006e78:	4b44      	ldr	r3, [pc, #272]	@ (8006f8c <__ieee754_pow+0x294>)
 8006e7a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d002      	beq.n	8006e88 <__ieee754_pow+0x190>
 8006e82:	f1b8 0f00 	cmp.w	r8, #0
 8006e86:	d122      	bne.n	8006ece <__ieee754_pow+0x1d6>
 8006e88:	f1b9 0f00 	cmp.w	r9, #0
 8006e8c:	da05      	bge.n	8006e9a <__ieee754_pow+0x1a2>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	460b      	mov	r3, r1
 8006e92:	2000      	movs	r0, #0
 8006e94:	493d      	ldr	r1, [pc, #244]	@ (8006f8c <__ieee754_pow+0x294>)
 8006e96:	f7f9 fc9d 	bl	80007d4 <__aeabi_ddiv>
 8006e9a:	2d00      	cmp	r5, #0
 8006e9c:	f6bf af49 	bge.w	8006d32 <__ieee754_pow+0x3a>
 8006ea0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8006ea4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8006ea8:	ea58 0804 	orrs.w	r8, r8, r4
 8006eac:	d108      	bne.n	8006ec0 <__ieee754_pow+0x1c8>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	4610      	mov	r0, r2
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	f7f9 f9ab 	bl	8000210 <__aeabi_dsub>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	e794      	b.n	8006dea <__ieee754_pow+0xf2>
 8006ec0:	2c01      	cmp	r4, #1
 8006ec2:	f47f af36 	bne.w	8006d32 <__ieee754_pow+0x3a>
 8006ec6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006eca:	4619      	mov	r1, r3
 8006ecc:	e731      	b.n	8006d32 <__ieee754_pow+0x3a>
 8006ece:	0feb      	lsrs	r3, r5, #31
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	ea53 0204 	orrs.w	r2, r3, r4
 8006ed6:	d102      	bne.n	8006ede <__ieee754_pow+0x1e6>
 8006ed8:	4632      	mov	r2, r6
 8006eda:	463b      	mov	r3, r7
 8006edc:	e7e9      	b.n	8006eb2 <__ieee754_pow+0x1ba>
 8006ede:	3c01      	subs	r4, #1
 8006ee0:	431c      	orrs	r4, r3
 8006ee2:	d016      	beq.n	8006f12 <__ieee754_pow+0x21a>
 8006ee4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8006f70 <__ieee754_pow+0x278>
 8006ee8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8006eec:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006ef0:	f240 8112 	bls.w	8007118 <__ieee754_pow+0x420>
 8006ef4:	4b28      	ldr	r3, [pc, #160]	@ (8006f98 <__ieee754_pow+0x2a0>)
 8006ef6:	459a      	cmp	sl, r3
 8006ef8:	4b25      	ldr	r3, [pc, #148]	@ (8006f90 <__ieee754_pow+0x298>)
 8006efa:	d916      	bls.n	8006f2a <__ieee754_pow+0x232>
 8006efc:	4598      	cmp	r8, r3
 8006efe:	d80b      	bhi.n	8006f18 <__ieee754_pow+0x220>
 8006f00:	f1b9 0f00 	cmp.w	r9, #0
 8006f04:	da0b      	bge.n	8006f1e <__ieee754_pow+0x226>
 8006f06:	2000      	movs	r0, #0
 8006f08:	b011      	add	sp, #68	@ 0x44
 8006f0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f0e:	f000 bee7 	b.w	8007ce0 <__math_oflow>
 8006f12:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8006f78 <__ieee754_pow+0x280>
 8006f16:	e7e7      	b.n	8006ee8 <__ieee754_pow+0x1f0>
 8006f18:	f1b9 0f00 	cmp.w	r9, #0
 8006f1c:	dcf3      	bgt.n	8006f06 <__ieee754_pow+0x20e>
 8006f1e:	2000      	movs	r0, #0
 8006f20:	b011      	add	sp, #68	@ 0x44
 8006f22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f26:	f000 bed3 	b.w	8007cd0 <__math_uflow>
 8006f2a:	4598      	cmp	r8, r3
 8006f2c:	d20c      	bcs.n	8006f48 <__ieee754_pow+0x250>
 8006f2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f32:	2200      	movs	r2, #0
 8006f34:	2300      	movs	r3, #0
 8006f36:	f7f9 fd95 	bl	8000a64 <__aeabi_dcmplt>
 8006f3a:	3800      	subs	r0, #0
 8006f3c:	bf18      	it	ne
 8006f3e:	2001      	movne	r0, #1
 8006f40:	f1b9 0f00 	cmp.w	r9, #0
 8006f44:	daec      	bge.n	8006f20 <__ieee754_pow+0x228>
 8006f46:	e7df      	b.n	8006f08 <__ieee754_pow+0x210>
 8006f48:	4b10      	ldr	r3, [pc, #64]	@ (8006f8c <__ieee754_pow+0x294>)
 8006f4a:	4598      	cmp	r8, r3
 8006f4c:	f04f 0200 	mov.w	r2, #0
 8006f50:	d924      	bls.n	8006f9c <__ieee754_pow+0x2a4>
 8006f52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f56:	2300      	movs	r3, #0
 8006f58:	f7f9 fd84 	bl	8000a64 <__aeabi_dcmplt>
 8006f5c:	3800      	subs	r0, #0
 8006f5e:	bf18      	it	ne
 8006f60:	2001      	movne	r0, #1
 8006f62:	f1b9 0f00 	cmp.w	r9, #0
 8006f66:	dccf      	bgt.n	8006f08 <__ieee754_pow+0x210>
 8006f68:	e7da      	b.n	8006f20 <__ieee754_pow+0x228>
 8006f6a:	bf00      	nop
 8006f6c:	f3af 8000 	nop.w
 8006f70:	00000000 	.word	0x00000000
 8006f74:	3ff00000 	.word	0x3ff00000
 8006f78:	00000000 	.word	0x00000000
 8006f7c:	bff00000 	.word	0xbff00000
 8006f80:	fff00000 	.word	0xfff00000
 8006f84:	7ff00000 	.word	0x7ff00000
 8006f88:	433fffff 	.word	0x433fffff
 8006f8c:	3ff00000 	.word	0x3ff00000
 8006f90:	3fefffff 	.word	0x3fefffff
 8006f94:	3fe00000 	.word	0x3fe00000
 8006f98:	43f00000 	.word	0x43f00000
 8006f9c:	4b5a      	ldr	r3, [pc, #360]	@ (8007108 <__ieee754_pow+0x410>)
 8006f9e:	f7f9 f937 	bl	8000210 <__aeabi_dsub>
 8006fa2:	a351      	add	r3, pc, #324	@ (adr r3, 80070e8 <__ieee754_pow+0x3f0>)
 8006fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa8:	4604      	mov	r4, r0
 8006faa:	460d      	mov	r5, r1
 8006fac:	f7f9 fae8 	bl	8000580 <__aeabi_dmul>
 8006fb0:	a34f      	add	r3, pc, #316	@ (adr r3, 80070f0 <__ieee754_pow+0x3f8>)
 8006fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb6:	4606      	mov	r6, r0
 8006fb8:	460f      	mov	r7, r1
 8006fba:	4620      	mov	r0, r4
 8006fbc:	4629      	mov	r1, r5
 8006fbe:	f7f9 fadf 	bl	8000580 <__aeabi_dmul>
 8006fc2:	4b52      	ldr	r3, [pc, #328]	@ (800710c <__ieee754_pow+0x414>)
 8006fc4:	4682      	mov	sl, r0
 8006fc6:	468b      	mov	fp, r1
 8006fc8:	2200      	movs	r2, #0
 8006fca:	4620      	mov	r0, r4
 8006fcc:	4629      	mov	r1, r5
 8006fce:	f7f9 fad7 	bl	8000580 <__aeabi_dmul>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	a148      	add	r1, pc, #288	@ (adr r1, 80070f8 <__ieee754_pow+0x400>)
 8006fd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fdc:	f7f9 f918 	bl	8000210 <__aeabi_dsub>
 8006fe0:	4622      	mov	r2, r4
 8006fe2:	462b      	mov	r3, r5
 8006fe4:	f7f9 facc 	bl	8000580 <__aeabi_dmul>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	460b      	mov	r3, r1
 8006fec:	2000      	movs	r0, #0
 8006fee:	4948      	ldr	r1, [pc, #288]	@ (8007110 <__ieee754_pow+0x418>)
 8006ff0:	f7f9 f90e 	bl	8000210 <__aeabi_dsub>
 8006ff4:	4622      	mov	r2, r4
 8006ff6:	4680      	mov	r8, r0
 8006ff8:	4689      	mov	r9, r1
 8006ffa:	462b      	mov	r3, r5
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	4629      	mov	r1, r5
 8007000:	f7f9 fabe 	bl	8000580 <__aeabi_dmul>
 8007004:	4602      	mov	r2, r0
 8007006:	460b      	mov	r3, r1
 8007008:	4640      	mov	r0, r8
 800700a:	4649      	mov	r1, r9
 800700c:	f7f9 fab8 	bl	8000580 <__aeabi_dmul>
 8007010:	a33b      	add	r3, pc, #236	@ (adr r3, 8007100 <__ieee754_pow+0x408>)
 8007012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007016:	f7f9 fab3 	bl	8000580 <__aeabi_dmul>
 800701a:	4602      	mov	r2, r0
 800701c:	460b      	mov	r3, r1
 800701e:	4650      	mov	r0, sl
 8007020:	4659      	mov	r1, fp
 8007022:	f7f9 f8f5 	bl	8000210 <__aeabi_dsub>
 8007026:	4602      	mov	r2, r0
 8007028:	460b      	mov	r3, r1
 800702a:	4680      	mov	r8, r0
 800702c:	4689      	mov	r9, r1
 800702e:	4630      	mov	r0, r6
 8007030:	4639      	mov	r1, r7
 8007032:	f7f9 f8ef 	bl	8000214 <__adddf3>
 8007036:	2400      	movs	r4, #0
 8007038:	4632      	mov	r2, r6
 800703a:	463b      	mov	r3, r7
 800703c:	4620      	mov	r0, r4
 800703e:	460d      	mov	r5, r1
 8007040:	f7f9 f8e6 	bl	8000210 <__aeabi_dsub>
 8007044:	4602      	mov	r2, r0
 8007046:	460b      	mov	r3, r1
 8007048:	4640      	mov	r0, r8
 800704a:	4649      	mov	r1, r9
 800704c:	f7f9 f8e0 	bl	8000210 <__aeabi_dsub>
 8007050:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007054:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007058:	2300      	movs	r3, #0
 800705a:	9304      	str	r3, [sp, #16]
 800705c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007060:	4606      	mov	r6, r0
 8007062:	460f      	mov	r7, r1
 8007064:	4652      	mov	r2, sl
 8007066:	465b      	mov	r3, fp
 8007068:	e9dd 0100 	ldrd	r0, r1, [sp]
 800706c:	f7f9 f8d0 	bl	8000210 <__aeabi_dsub>
 8007070:	4622      	mov	r2, r4
 8007072:	462b      	mov	r3, r5
 8007074:	f7f9 fa84 	bl	8000580 <__aeabi_dmul>
 8007078:	e9dd 2300 	ldrd	r2, r3, [sp]
 800707c:	4680      	mov	r8, r0
 800707e:	4689      	mov	r9, r1
 8007080:	4630      	mov	r0, r6
 8007082:	4639      	mov	r1, r7
 8007084:	f7f9 fa7c 	bl	8000580 <__aeabi_dmul>
 8007088:	4602      	mov	r2, r0
 800708a:	460b      	mov	r3, r1
 800708c:	4640      	mov	r0, r8
 800708e:	4649      	mov	r1, r9
 8007090:	f7f9 f8c0 	bl	8000214 <__adddf3>
 8007094:	4652      	mov	r2, sl
 8007096:	465b      	mov	r3, fp
 8007098:	4606      	mov	r6, r0
 800709a:	460f      	mov	r7, r1
 800709c:	4620      	mov	r0, r4
 800709e:	4629      	mov	r1, r5
 80070a0:	f7f9 fa6e 	bl	8000580 <__aeabi_dmul>
 80070a4:	460b      	mov	r3, r1
 80070a6:	4602      	mov	r2, r0
 80070a8:	4680      	mov	r8, r0
 80070aa:	4689      	mov	r9, r1
 80070ac:	4630      	mov	r0, r6
 80070ae:	4639      	mov	r1, r7
 80070b0:	f7f9 f8b0 	bl	8000214 <__adddf3>
 80070b4:	4b17      	ldr	r3, [pc, #92]	@ (8007114 <__ieee754_pow+0x41c>)
 80070b6:	4299      	cmp	r1, r3
 80070b8:	4604      	mov	r4, r0
 80070ba:	460d      	mov	r5, r1
 80070bc:	468a      	mov	sl, r1
 80070be:	468b      	mov	fp, r1
 80070c0:	f340 82ef 	ble.w	80076a2 <__ieee754_pow+0x9aa>
 80070c4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80070c8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80070cc:	4303      	orrs	r3, r0
 80070ce:	f000 81e8 	beq.w	80074a2 <__ieee754_pow+0x7aa>
 80070d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070d6:	2200      	movs	r2, #0
 80070d8:	2300      	movs	r3, #0
 80070da:	f7f9 fcc3 	bl	8000a64 <__aeabi_dcmplt>
 80070de:	3800      	subs	r0, #0
 80070e0:	bf18      	it	ne
 80070e2:	2001      	movne	r0, #1
 80070e4:	e710      	b.n	8006f08 <__ieee754_pow+0x210>
 80070e6:	bf00      	nop
 80070e8:	60000000 	.word	0x60000000
 80070ec:	3ff71547 	.word	0x3ff71547
 80070f0:	f85ddf44 	.word	0xf85ddf44
 80070f4:	3e54ae0b 	.word	0x3e54ae0b
 80070f8:	55555555 	.word	0x55555555
 80070fc:	3fd55555 	.word	0x3fd55555
 8007100:	652b82fe 	.word	0x652b82fe
 8007104:	3ff71547 	.word	0x3ff71547
 8007108:	3ff00000 	.word	0x3ff00000
 800710c:	3fd00000 	.word	0x3fd00000
 8007110:	3fe00000 	.word	0x3fe00000
 8007114:	408fffff 	.word	0x408fffff
 8007118:	4bd5      	ldr	r3, [pc, #852]	@ (8007470 <__ieee754_pow+0x778>)
 800711a:	402b      	ands	r3, r5
 800711c:	2200      	movs	r2, #0
 800711e:	b92b      	cbnz	r3, 800712c <__ieee754_pow+0x434>
 8007120:	4bd4      	ldr	r3, [pc, #848]	@ (8007474 <__ieee754_pow+0x77c>)
 8007122:	f7f9 fa2d 	bl	8000580 <__aeabi_dmul>
 8007126:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800712a:	468b      	mov	fp, r1
 800712c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8007130:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007134:	4413      	add	r3, r2
 8007136:	930a      	str	r3, [sp, #40]	@ 0x28
 8007138:	4bcf      	ldr	r3, [pc, #828]	@ (8007478 <__ieee754_pow+0x780>)
 800713a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800713e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8007142:	459b      	cmp	fp, r3
 8007144:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007148:	dd08      	ble.n	800715c <__ieee754_pow+0x464>
 800714a:	4bcc      	ldr	r3, [pc, #816]	@ (800747c <__ieee754_pow+0x784>)
 800714c:	459b      	cmp	fp, r3
 800714e:	f340 81a5 	ble.w	800749c <__ieee754_pow+0x7a4>
 8007152:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007154:	3301      	adds	r3, #1
 8007156:	930a      	str	r3, [sp, #40]	@ 0x28
 8007158:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800715c:	f04f 0a00 	mov.w	sl, #0
 8007160:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8007164:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007166:	4bc6      	ldr	r3, [pc, #792]	@ (8007480 <__ieee754_pow+0x788>)
 8007168:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800716c:	ed93 7b00 	vldr	d7, [r3]
 8007170:	4629      	mov	r1, r5
 8007172:	ec53 2b17 	vmov	r2, r3, d7
 8007176:	ed8d 7b06 	vstr	d7, [sp, #24]
 800717a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800717e:	f7f9 f847 	bl	8000210 <__aeabi_dsub>
 8007182:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007186:	4606      	mov	r6, r0
 8007188:	460f      	mov	r7, r1
 800718a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800718e:	f7f9 f841 	bl	8000214 <__adddf3>
 8007192:	4602      	mov	r2, r0
 8007194:	460b      	mov	r3, r1
 8007196:	2000      	movs	r0, #0
 8007198:	49ba      	ldr	r1, [pc, #744]	@ (8007484 <__ieee754_pow+0x78c>)
 800719a:	f7f9 fb1b 	bl	80007d4 <__aeabi_ddiv>
 800719e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80071a2:	4602      	mov	r2, r0
 80071a4:	460b      	mov	r3, r1
 80071a6:	4630      	mov	r0, r6
 80071a8:	4639      	mov	r1, r7
 80071aa:	f7f9 f9e9 	bl	8000580 <__aeabi_dmul>
 80071ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071b2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80071b6:	106d      	asrs	r5, r5, #1
 80071b8:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80071bc:	f04f 0b00 	mov.w	fp, #0
 80071c0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80071c4:	4661      	mov	r1, ip
 80071c6:	2200      	movs	r2, #0
 80071c8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80071cc:	4658      	mov	r0, fp
 80071ce:	46e1      	mov	r9, ip
 80071d0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80071d4:	4614      	mov	r4, r2
 80071d6:	461d      	mov	r5, r3
 80071d8:	f7f9 f9d2 	bl	8000580 <__aeabi_dmul>
 80071dc:	4602      	mov	r2, r0
 80071de:	460b      	mov	r3, r1
 80071e0:	4630      	mov	r0, r6
 80071e2:	4639      	mov	r1, r7
 80071e4:	f7f9 f814 	bl	8000210 <__aeabi_dsub>
 80071e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071ec:	4606      	mov	r6, r0
 80071ee:	460f      	mov	r7, r1
 80071f0:	4620      	mov	r0, r4
 80071f2:	4629      	mov	r1, r5
 80071f4:	f7f9 f80c 	bl	8000210 <__aeabi_dsub>
 80071f8:	4602      	mov	r2, r0
 80071fa:	460b      	mov	r3, r1
 80071fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007200:	f7f9 f806 	bl	8000210 <__aeabi_dsub>
 8007204:	465a      	mov	r2, fp
 8007206:	464b      	mov	r3, r9
 8007208:	f7f9 f9ba 	bl	8000580 <__aeabi_dmul>
 800720c:	4602      	mov	r2, r0
 800720e:	460b      	mov	r3, r1
 8007210:	4630      	mov	r0, r6
 8007212:	4639      	mov	r1, r7
 8007214:	f7f8 fffc 	bl	8000210 <__aeabi_dsub>
 8007218:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800721c:	f7f9 f9b0 	bl	8000580 <__aeabi_dmul>
 8007220:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007224:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007228:	4610      	mov	r0, r2
 800722a:	4619      	mov	r1, r3
 800722c:	f7f9 f9a8 	bl	8000580 <__aeabi_dmul>
 8007230:	a37d      	add	r3, pc, #500	@ (adr r3, 8007428 <__ieee754_pow+0x730>)
 8007232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007236:	4604      	mov	r4, r0
 8007238:	460d      	mov	r5, r1
 800723a:	f7f9 f9a1 	bl	8000580 <__aeabi_dmul>
 800723e:	a37c      	add	r3, pc, #496	@ (adr r3, 8007430 <__ieee754_pow+0x738>)
 8007240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007244:	f7f8 ffe6 	bl	8000214 <__adddf3>
 8007248:	4622      	mov	r2, r4
 800724a:	462b      	mov	r3, r5
 800724c:	f7f9 f998 	bl	8000580 <__aeabi_dmul>
 8007250:	a379      	add	r3, pc, #484	@ (adr r3, 8007438 <__ieee754_pow+0x740>)
 8007252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007256:	f7f8 ffdd 	bl	8000214 <__adddf3>
 800725a:	4622      	mov	r2, r4
 800725c:	462b      	mov	r3, r5
 800725e:	f7f9 f98f 	bl	8000580 <__aeabi_dmul>
 8007262:	a377      	add	r3, pc, #476	@ (adr r3, 8007440 <__ieee754_pow+0x748>)
 8007264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007268:	f7f8 ffd4 	bl	8000214 <__adddf3>
 800726c:	4622      	mov	r2, r4
 800726e:	462b      	mov	r3, r5
 8007270:	f7f9 f986 	bl	8000580 <__aeabi_dmul>
 8007274:	a374      	add	r3, pc, #464	@ (adr r3, 8007448 <__ieee754_pow+0x750>)
 8007276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727a:	f7f8 ffcb 	bl	8000214 <__adddf3>
 800727e:	4622      	mov	r2, r4
 8007280:	462b      	mov	r3, r5
 8007282:	f7f9 f97d 	bl	8000580 <__aeabi_dmul>
 8007286:	a372      	add	r3, pc, #456	@ (adr r3, 8007450 <__ieee754_pow+0x758>)
 8007288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728c:	f7f8 ffc2 	bl	8000214 <__adddf3>
 8007290:	4622      	mov	r2, r4
 8007292:	4606      	mov	r6, r0
 8007294:	460f      	mov	r7, r1
 8007296:	462b      	mov	r3, r5
 8007298:	4620      	mov	r0, r4
 800729a:	4629      	mov	r1, r5
 800729c:	f7f9 f970 	bl	8000580 <__aeabi_dmul>
 80072a0:	4602      	mov	r2, r0
 80072a2:	460b      	mov	r3, r1
 80072a4:	4630      	mov	r0, r6
 80072a6:	4639      	mov	r1, r7
 80072a8:	f7f9 f96a 	bl	8000580 <__aeabi_dmul>
 80072ac:	465a      	mov	r2, fp
 80072ae:	4604      	mov	r4, r0
 80072b0:	460d      	mov	r5, r1
 80072b2:	464b      	mov	r3, r9
 80072b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072b8:	f7f8 ffac 	bl	8000214 <__adddf3>
 80072bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072c0:	f7f9 f95e 	bl	8000580 <__aeabi_dmul>
 80072c4:	4622      	mov	r2, r4
 80072c6:	462b      	mov	r3, r5
 80072c8:	f7f8 ffa4 	bl	8000214 <__adddf3>
 80072cc:	465a      	mov	r2, fp
 80072ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80072d2:	464b      	mov	r3, r9
 80072d4:	4658      	mov	r0, fp
 80072d6:	4649      	mov	r1, r9
 80072d8:	f7f9 f952 	bl	8000580 <__aeabi_dmul>
 80072dc:	4b6a      	ldr	r3, [pc, #424]	@ (8007488 <__ieee754_pow+0x790>)
 80072de:	2200      	movs	r2, #0
 80072e0:	4606      	mov	r6, r0
 80072e2:	460f      	mov	r7, r1
 80072e4:	f7f8 ff96 	bl	8000214 <__adddf3>
 80072e8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80072ec:	f7f8 ff92 	bl	8000214 <__adddf3>
 80072f0:	46d8      	mov	r8, fp
 80072f2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80072f6:	460d      	mov	r5, r1
 80072f8:	465a      	mov	r2, fp
 80072fa:	460b      	mov	r3, r1
 80072fc:	4640      	mov	r0, r8
 80072fe:	4649      	mov	r1, r9
 8007300:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8007304:	f7f9 f93c 	bl	8000580 <__aeabi_dmul>
 8007308:	465c      	mov	r4, fp
 800730a:	4680      	mov	r8, r0
 800730c:	4689      	mov	r9, r1
 800730e:	4b5e      	ldr	r3, [pc, #376]	@ (8007488 <__ieee754_pow+0x790>)
 8007310:	2200      	movs	r2, #0
 8007312:	4620      	mov	r0, r4
 8007314:	4629      	mov	r1, r5
 8007316:	f7f8 ff7b 	bl	8000210 <__aeabi_dsub>
 800731a:	4632      	mov	r2, r6
 800731c:	463b      	mov	r3, r7
 800731e:	f7f8 ff77 	bl	8000210 <__aeabi_dsub>
 8007322:	4602      	mov	r2, r0
 8007324:	460b      	mov	r3, r1
 8007326:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800732a:	f7f8 ff71 	bl	8000210 <__aeabi_dsub>
 800732e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007332:	f7f9 f925 	bl	8000580 <__aeabi_dmul>
 8007336:	4622      	mov	r2, r4
 8007338:	4606      	mov	r6, r0
 800733a:	460f      	mov	r7, r1
 800733c:	462b      	mov	r3, r5
 800733e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007342:	f7f9 f91d 	bl	8000580 <__aeabi_dmul>
 8007346:	4602      	mov	r2, r0
 8007348:	460b      	mov	r3, r1
 800734a:	4630      	mov	r0, r6
 800734c:	4639      	mov	r1, r7
 800734e:	f7f8 ff61 	bl	8000214 <__adddf3>
 8007352:	4606      	mov	r6, r0
 8007354:	460f      	mov	r7, r1
 8007356:	4602      	mov	r2, r0
 8007358:	460b      	mov	r3, r1
 800735a:	4640      	mov	r0, r8
 800735c:	4649      	mov	r1, r9
 800735e:	f7f8 ff59 	bl	8000214 <__adddf3>
 8007362:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8007366:	a33c      	add	r3, pc, #240	@ (adr r3, 8007458 <__ieee754_pow+0x760>)
 8007368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736c:	4658      	mov	r0, fp
 800736e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8007372:	460d      	mov	r5, r1
 8007374:	f7f9 f904 	bl	8000580 <__aeabi_dmul>
 8007378:	465c      	mov	r4, fp
 800737a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800737e:	4642      	mov	r2, r8
 8007380:	464b      	mov	r3, r9
 8007382:	4620      	mov	r0, r4
 8007384:	4629      	mov	r1, r5
 8007386:	f7f8 ff43 	bl	8000210 <__aeabi_dsub>
 800738a:	4602      	mov	r2, r0
 800738c:	460b      	mov	r3, r1
 800738e:	4630      	mov	r0, r6
 8007390:	4639      	mov	r1, r7
 8007392:	f7f8 ff3d 	bl	8000210 <__aeabi_dsub>
 8007396:	a332      	add	r3, pc, #200	@ (adr r3, 8007460 <__ieee754_pow+0x768>)
 8007398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739c:	f7f9 f8f0 	bl	8000580 <__aeabi_dmul>
 80073a0:	a331      	add	r3, pc, #196	@ (adr r3, 8007468 <__ieee754_pow+0x770>)
 80073a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a6:	4606      	mov	r6, r0
 80073a8:	460f      	mov	r7, r1
 80073aa:	4620      	mov	r0, r4
 80073ac:	4629      	mov	r1, r5
 80073ae:	f7f9 f8e7 	bl	8000580 <__aeabi_dmul>
 80073b2:	4602      	mov	r2, r0
 80073b4:	460b      	mov	r3, r1
 80073b6:	4630      	mov	r0, r6
 80073b8:	4639      	mov	r1, r7
 80073ba:	f7f8 ff2b 	bl	8000214 <__adddf3>
 80073be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80073c0:	4b32      	ldr	r3, [pc, #200]	@ (800748c <__ieee754_pow+0x794>)
 80073c2:	4413      	add	r3, r2
 80073c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c8:	f7f8 ff24 	bl	8000214 <__adddf3>
 80073cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80073d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80073d2:	f7f9 f86b 	bl	80004ac <__aeabi_i2d>
 80073d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80073d8:	4b2d      	ldr	r3, [pc, #180]	@ (8007490 <__ieee754_pow+0x798>)
 80073da:	4413      	add	r3, r2
 80073dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80073e0:	4606      	mov	r6, r0
 80073e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80073e6:	460f      	mov	r7, r1
 80073e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073ec:	f7f8 ff12 	bl	8000214 <__adddf3>
 80073f0:	4642      	mov	r2, r8
 80073f2:	464b      	mov	r3, r9
 80073f4:	f7f8 ff0e 	bl	8000214 <__adddf3>
 80073f8:	4632      	mov	r2, r6
 80073fa:	463b      	mov	r3, r7
 80073fc:	f7f8 ff0a 	bl	8000214 <__adddf3>
 8007400:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8007404:	4632      	mov	r2, r6
 8007406:	463b      	mov	r3, r7
 8007408:	4658      	mov	r0, fp
 800740a:	460d      	mov	r5, r1
 800740c:	f7f8 ff00 	bl	8000210 <__aeabi_dsub>
 8007410:	4642      	mov	r2, r8
 8007412:	464b      	mov	r3, r9
 8007414:	f7f8 fefc 	bl	8000210 <__aeabi_dsub>
 8007418:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800741c:	f7f8 fef8 	bl	8000210 <__aeabi_dsub>
 8007420:	465c      	mov	r4, fp
 8007422:	4602      	mov	r2, r0
 8007424:	e036      	b.n	8007494 <__ieee754_pow+0x79c>
 8007426:	bf00      	nop
 8007428:	4a454eef 	.word	0x4a454eef
 800742c:	3fca7e28 	.word	0x3fca7e28
 8007430:	93c9db65 	.word	0x93c9db65
 8007434:	3fcd864a 	.word	0x3fcd864a
 8007438:	a91d4101 	.word	0xa91d4101
 800743c:	3fd17460 	.word	0x3fd17460
 8007440:	518f264d 	.word	0x518f264d
 8007444:	3fd55555 	.word	0x3fd55555
 8007448:	db6fabff 	.word	0xdb6fabff
 800744c:	3fdb6db6 	.word	0x3fdb6db6
 8007450:	33333303 	.word	0x33333303
 8007454:	3fe33333 	.word	0x3fe33333
 8007458:	e0000000 	.word	0xe0000000
 800745c:	3feec709 	.word	0x3feec709
 8007460:	dc3a03fd 	.word	0xdc3a03fd
 8007464:	3feec709 	.word	0x3feec709
 8007468:	145b01f5 	.word	0x145b01f5
 800746c:	be3e2fe0 	.word	0xbe3e2fe0
 8007470:	7ff00000 	.word	0x7ff00000
 8007474:	43400000 	.word	0x43400000
 8007478:	0003988e 	.word	0x0003988e
 800747c:	000bb679 	.word	0x000bb679
 8007480:	080084e8 	.word	0x080084e8
 8007484:	3ff00000 	.word	0x3ff00000
 8007488:	40080000 	.word	0x40080000
 800748c:	080084c8 	.word	0x080084c8
 8007490:	080084d8 	.word	0x080084d8
 8007494:	460b      	mov	r3, r1
 8007496:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800749a:	e5d7      	b.n	800704c <__ieee754_pow+0x354>
 800749c:	f04f 0a01 	mov.w	sl, #1
 80074a0:	e65e      	b.n	8007160 <__ieee754_pow+0x468>
 80074a2:	a3b4      	add	r3, pc, #720	@ (adr r3, 8007774 <__ieee754_pow+0xa7c>)
 80074a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a8:	4630      	mov	r0, r6
 80074aa:	4639      	mov	r1, r7
 80074ac:	f7f8 feb2 	bl	8000214 <__adddf3>
 80074b0:	4642      	mov	r2, r8
 80074b2:	e9cd 0100 	strd	r0, r1, [sp]
 80074b6:	464b      	mov	r3, r9
 80074b8:	4620      	mov	r0, r4
 80074ba:	4629      	mov	r1, r5
 80074bc:	f7f8 fea8 	bl	8000210 <__aeabi_dsub>
 80074c0:	4602      	mov	r2, r0
 80074c2:	460b      	mov	r3, r1
 80074c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074c8:	f7f9 faea 	bl	8000aa0 <__aeabi_dcmpgt>
 80074cc:	2800      	cmp	r0, #0
 80074ce:	f47f ae00 	bne.w	80070d2 <__ieee754_pow+0x3da>
 80074d2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80074d6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80074da:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80074de:	fa43 fa0a 	asr.w	sl, r3, sl
 80074e2:	44da      	add	sl, fp
 80074e4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80074e8:	489d      	ldr	r0, [pc, #628]	@ (8007760 <__ieee754_pow+0xa68>)
 80074ea:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80074ee:	4108      	asrs	r0, r1
 80074f0:	ea00 030a 	and.w	r3, r0, sl
 80074f4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80074f8:	f1c1 0114 	rsb	r1, r1, #20
 80074fc:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8007500:	fa4a fa01 	asr.w	sl, sl, r1
 8007504:	f1bb 0f00 	cmp.w	fp, #0
 8007508:	4640      	mov	r0, r8
 800750a:	4649      	mov	r1, r9
 800750c:	f04f 0200 	mov.w	r2, #0
 8007510:	bfb8      	it	lt
 8007512:	f1ca 0a00 	rsblt	sl, sl, #0
 8007516:	f7f8 fe7b 	bl	8000210 <__aeabi_dsub>
 800751a:	4680      	mov	r8, r0
 800751c:	4689      	mov	r9, r1
 800751e:	4632      	mov	r2, r6
 8007520:	463b      	mov	r3, r7
 8007522:	4640      	mov	r0, r8
 8007524:	4649      	mov	r1, r9
 8007526:	f7f8 fe75 	bl	8000214 <__adddf3>
 800752a:	2400      	movs	r4, #0
 800752c:	a37c      	add	r3, pc, #496	@ (adr r3, 8007720 <__ieee754_pow+0xa28>)
 800752e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007532:	4620      	mov	r0, r4
 8007534:	460d      	mov	r5, r1
 8007536:	f7f9 f823 	bl	8000580 <__aeabi_dmul>
 800753a:	4642      	mov	r2, r8
 800753c:	e9cd 0100 	strd	r0, r1, [sp]
 8007540:	464b      	mov	r3, r9
 8007542:	4620      	mov	r0, r4
 8007544:	4629      	mov	r1, r5
 8007546:	f7f8 fe63 	bl	8000210 <__aeabi_dsub>
 800754a:	4602      	mov	r2, r0
 800754c:	460b      	mov	r3, r1
 800754e:	4630      	mov	r0, r6
 8007550:	4639      	mov	r1, r7
 8007552:	f7f8 fe5d 	bl	8000210 <__aeabi_dsub>
 8007556:	a374      	add	r3, pc, #464	@ (adr r3, 8007728 <__ieee754_pow+0xa30>)
 8007558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755c:	f7f9 f810 	bl	8000580 <__aeabi_dmul>
 8007560:	a373      	add	r3, pc, #460	@ (adr r3, 8007730 <__ieee754_pow+0xa38>)
 8007562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007566:	4680      	mov	r8, r0
 8007568:	4689      	mov	r9, r1
 800756a:	4620      	mov	r0, r4
 800756c:	4629      	mov	r1, r5
 800756e:	f7f9 f807 	bl	8000580 <__aeabi_dmul>
 8007572:	4602      	mov	r2, r0
 8007574:	460b      	mov	r3, r1
 8007576:	4640      	mov	r0, r8
 8007578:	4649      	mov	r1, r9
 800757a:	f7f8 fe4b 	bl	8000214 <__adddf3>
 800757e:	4604      	mov	r4, r0
 8007580:	460d      	mov	r5, r1
 8007582:	4602      	mov	r2, r0
 8007584:	460b      	mov	r3, r1
 8007586:	e9dd 0100 	ldrd	r0, r1, [sp]
 800758a:	f7f8 fe43 	bl	8000214 <__adddf3>
 800758e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007592:	4680      	mov	r8, r0
 8007594:	4689      	mov	r9, r1
 8007596:	f7f8 fe3b 	bl	8000210 <__aeabi_dsub>
 800759a:	4602      	mov	r2, r0
 800759c:	460b      	mov	r3, r1
 800759e:	4620      	mov	r0, r4
 80075a0:	4629      	mov	r1, r5
 80075a2:	f7f8 fe35 	bl	8000210 <__aeabi_dsub>
 80075a6:	4642      	mov	r2, r8
 80075a8:	4606      	mov	r6, r0
 80075aa:	460f      	mov	r7, r1
 80075ac:	464b      	mov	r3, r9
 80075ae:	4640      	mov	r0, r8
 80075b0:	4649      	mov	r1, r9
 80075b2:	f7f8 ffe5 	bl	8000580 <__aeabi_dmul>
 80075b6:	a360      	add	r3, pc, #384	@ (adr r3, 8007738 <__ieee754_pow+0xa40>)
 80075b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075bc:	4604      	mov	r4, r0
 80075be:	460d      	mov	r5, r1
 80075c0:	f7f8 ffde 	bl	8000580 <__aeabi_dmul>
 80075c4:	a35e      	add	r3, pc, #376	@ (adr r3, 8007740 <__ieee754_pow+0xa48>)
 80075c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ca:	f7f8 fe21 	bl	8000210 <__aeabi_dsub>
 80075ce:	4622      	mov	r2, r4
 80075d0:	462b      	mov	r3, r5
 80075d2:	f7f8 ffd5 	bl	8000580 <__aeabi_dmul>
 80075d6:	a35c      	add	r3, pc, #368	@ (adr r3, 8007748 <__ieee754_pow+0xa50>)
 80075d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075dc:	f7f8 fe1a 	bl	8000214 <__adddf3>
 80075e0:	4622      	mov	r2, r4
 80075e2:	462b      	mov	r3, r5
 80075e4:	f7f8 ffcc 	bl	8000580 <__aeabi_dmul>
 80075e8:	a359      	add	r3, pc, #356	@ (adr r3, 8007750 <__ieee754_pow+0xa58>)
 80075ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ee:	f7f8 fe0f 	bl	8000210 <__aeabi_dsub>
 80075f2:	4622      	mov	r2, r4
 80075f4:	462b      	mov	r3, r5
 80075f6:	f7f8 ffc3 	bl	8000580 <__aeabi_dmul>
 80075fa:	a357      	add	r3, pc, #348	@ (adr r3, 8007758 <__ieee754_pow+0xa60>)
 80075fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007600:	f7f8 fe08 	bl	8000214 <__adddf3>
 8007604:	4622      	mov	r2, r4
 8007606:	462b      	mov	r3, r5
 8007608:	f7f8 ffba 	bl	8000580 <__aeabi_dmul>
 800760c:	4602      	mov	r2, r0
 800760e:	460b      	mov	r3, r1
 8007610:	4640      	mov	r0, r8
 8007612:	4649      	mov	r1, r9
 8007614:	f7f8 fdfc 	bl	8000210 <__aeabi_dsub>
 8007618:	4604      	mov	r4, r0
 800761a:	460d      	mov	r5, r1
 800761c:	4602      	mov	r2, r0
 800761e:	460b      	mov	r3, r1
 8007620:	4640      	mov	r0, r8
 8007622:	4649      	mov	r1, r9
 8007624:	f7f8 ffac 	bl	8000580 <__aeabi_dmul>
 8007628:	2200      	movs	r2, #0
 800762a:	e9cd 0100 	strd	r0, r1, [sp]
 800762e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007632:	4620      	mov	r0, r4
 8007634:	4629      	mov	r1, r5
 8007636:	f7f8 fdeb 	bl	8000210 <__aeabi_dsub>
 800763a:	4602      	mov	r2, r0
 800763c:	460b      	mov	r3, r1
 800763e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007642:	f7f9 f8c7 	bl	80007d4 <__aeabi_ddiv>
 8007646:	4632      	mov	r2, r6
 8007648:	4604      	mov	r4, r0
 800764a:	460d      	mov	r5, r1
 800764c:	463b      	mov	r3, r7
 800764e:	4640      	mov	r0, r8
 8007650:	4649      	mov	r1, r9
 8007652:	f7f8 ff95 	bl	8000580 <__aeabi_dmul>
 8007656:	4632      	mov	r2, r6
 8007658:	463b      	mov	r3, r7
 800765a:	f7f8 fddb 	bl	8000214 <__adddf3>
 800765e:	4602      	mov	r2, r0
 8007660:	460b      	mov	r3, r1
 8007662:	4620      	mov	r0, r4
 8007664:	4629      	mov	r1, r5
 8007666:	f7f8 fdd3 	bl	8000210 <__aeabi_dsub>
 800766a:	4642      	mov	r2, r8
 800766c:	464b      	mov	r3, r9
 800766e:	f7f8 fdcf 	bl	8000210 <__aeabi_dsub>
 8007672:	460b      	mov	r3, r1
 8007674:	4602      	mov	r2, r0
 8007676:	493b      	ldr	r1, [pc, #236]	@ (8007764 <__ieee754_pow+0xa6c>)
 8007678:	2000      	movs	r0, #0
 800767a:	f7f8 fdc9 	bl	8000210 <__aeabi_dsub>
 800767e:	ec41 0b10 	vmov	d0, r0, r1
 8007682:	ee10 3a90 	vmov	r3, s1
 8007686:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800768a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800768e:	da30      	bge.n	80076f2 <__ieee754_pow+0x9fa>
 8007690:	4650      	mov	r0, sl
 8007692:	f000 fa71 	bl	8007b78 <scalbn>
 8007696:	ec51 0b10 	vmov	r0, r1, d0
 800769a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800769e:	f7ff bbd2 	b.w	8006e46 <__ieee754_pow+0x14e>
 80076a2:	4c31      	ldr	r4, [pc, #196]	@ (8007768 <__ieee754_pow+0xa70>)
 80076a4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80076a8:	42a3      	cmp	r3, r4
 80076aa:	d91a      	bls.n	80076e2 <__ieee754_pow+0x9ea>
 80076ac:	4b2f      	ldr	r3, [pc, #188]	@ (800776c <__ieee754_pow+0xa74>)
 80076ae:	440b      	add	r3, r1
 80076b0:	4303      	orrs	r3, r0
 80076b2:	d009      	beq.n	80076c8 <__ieee754_pow+0x9d0>
 80076b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076b8:	2200      	movs	r2, #0
 80076ba:	2300      	movs	r3, #0
 80076bc:	f7f9 f9d2 	bl	8000a64 <__aeabi_dcmplt>
 80076c0:	3800      	subs	r0, #0
 80076c2:	bf18      	it	ne
 80076c4:	2001      	movne	r0, #1
 80076c6:	e42b      	b.n	8006f20 <__ieee754_pow+0x228>
 80076c8:	4642      	mov	r2, r8
 80076ca:	464b      	mov	r3, r9
 80076cc:	f7f8 fda0 	bl	8000210 <__aeabi_dsub>
 80076d0:	4632      	mov	r2, r6
 80076d2:	463b      	mov	r3, r7
 80076d4:	f7f9 f9da 	bl	8000a8c <__aeabi_dcmpge>
 80076d8:	2800      	cmp	r0, #0
 80076da:	d1eb      	bne.n	80076b4 <__ieee754_pow+0x9bc>
 80076dc:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800777c <__ieee754_pow+0xa84>
 80076e0:	e6f7      	b.n	80074d2 <__ieee754_pow+0x7da>
 80076e2:	469a      	mov	sl, r3
 80076e4:	4b22      	ldr	r3, [pc, #136]	@ (8007770 <__ieee754_pow+0xa78>)
 80076e6:	459a      	cmp	sl, r3
 80076e8:	f63f aef3 	bhi.w	80074d2 <__ieee754_pow+0x7da>
 80076ec:	f8dd a010 	ldr.w	sl, [sp, #16]
 80076f0:	e715      	b.n	800751e <__ieee754_pow+0x826>
 80076f2:	ec51 0b10 	vmov	r0, r1, d0
 80076f6:	4619      	mov	r1, r3
 80076f8:	e7cf      	b.n	800769a <__ieee754_pow+0x9a2>
 80076fa:	491a      	ldr	r1, [pc, #104]	@ (8007764 <__ieee754_pow+0xa6c>)
 80076fc:	2000      	movs	r0, #0
 80076fe:	f7ff bb18 	b.w	8006d32 <__ieee754_pow+0x3a>
 8007702:	2000      	movs	r0, #0
 8007704:	2100      	movs	r1, #0
 8007706:	f7ff bb14 	b.w	8006d32 <__ieee754_pow+0x3a>
 800770a:	4630      	mov	r0, r6
 800770c:	4639      	mov	r1, r7
 800770e:	f7ff bb10 	b.w	8006d32 <__ieee754_pow+0x3a>
 8007712:	460c      	mov	r4, r1
 8007714:	f7ff bb5e 	b.w	8006dd4 <__ieee754_pow+0xdc>
 8007718:	2400      	movs	r4, #0
 800771a:	f7ff bb49 	b.w	8006db0 <__ieee754_pow+0xb8>
 800771e:	bf00      	nop
 8007720:	00000000 	.word	0x00000000
 8007724:	3fe62e43 	.word	0x3fe62e43
 8007728:	fefa39ef 	.word	0xfefa39ef
 800772c:	3fe62e42 	.word	0x3fe62e42
 8007730:	0ca86c39 	.word	0x0ca86c39
 8007734:	be205c61 	.word	0xbe205c61
 8007738:	72bea4d0 	.word	0x72bea4d0
 800773c:	3e663769 	.word	0x3e663769
 8007740:	c5d26bf1 	.word	0xc5d26bf1
 8007744:	3ebbbd41 	.word	0x3ebbbd41
 8007748:	af25de2c 	.word	0xaf25de2c
 800774c:	3f11566a 	.word	0x3f11566a
 8007750:	16bebd93 	.word	0x16bebd93
 8007754:	3f66c16c 	.word	0x3f66c16c
 8007758:	5555553e 	.word	0x5555553e
 800775c:	3fc55555 	.word	0x3fc55555
 8007760:	fff00000 	.word	0xfff00000
 8007764:	3ff00000 	.word	0x3ff00000
 8007768:	4090cbff 	.word	0x4090cbff
 800776c:	3f6f3400 	.word	0x3f6f3400
 8007770:	3fe00000 	.word	0x3fe00000
 8007774:	652b82fe 	.word	0x652b82fe
 8007778:	3c971547 	.word	0x3c971547
 800777c:	4090cc00 	.word	0x4090cc00

08007780 <__ieee754_rem_pio2>:
 8007780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007784:	ec57 6b10 	vmov	r6, r7, d0
 8007788:	4bc5      	ldr	r3, [pc, #788]	@ (8007aa0 <__ieee754_rem_pio2+0x320>)
 800778a:	b08d      	sub	sp, #52	@ 0x34
 800778c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007790:	4598      	cmp	r8, r3
 8007792:	4604      	mov	r4, r0
 8007794:	9704      	str	r7, [sp, #16]
 8007796:	d807      	bhi.n	80077a8 <__ieee754_rem_pio2+0x28>
 8007798:	2200      	movs	r2, #0
 800779a:	2300      	movs	r3, #0
 800779c:	ed80 0b00 	vstr	d0, [r0]
 80077a0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80077a4:	2500      	movs	r5, #0
 80077a6:	e028      	b.n	80077fa <__ieee754_rem_pio2+0x7a>
 80077a8:	4bbe      	ldr	r3, [pc, #760]	@ (8007aa4 <__ieee754_rem_pio2+0x324>)
 80077aa:	4598      	cmp	r8, r3
 80077ac:	d878      	bhi.n	80078a0 <__ieee754_rem_pio2+0x120>
 80077ae:	9b04      	ldr	r3, [sp, #16]
 80077b0:	4dbd      	ldr	r5, [pc, #756]	@ (8007aa8 <__ieee754_rem_pio2+0x328>)
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	4630      	mov	r0, r6
 80077b6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8007a68 <__ieee754_rem_pio2+0x2e8>)
 80077b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077bc:	4639      	mov	r1, r7
 80077be:	dd38      	ble.n	8007832 <__ieee754_rem_pio2+0xb2>
 80077c0:	f7f8 fd26 	bl	8000210 <__aeabi_dsub>
 80077c4:	45a8      	cmp	r8, r5
 80077c6:	4606      	mov	r6, r0
 80077c8:	460f      	mov	r7, r1
 80077ca:	d01a      	beq.n	8007802 <__ieee754_rem_pio2+0x82>
 80077cc:	a3a8      	add	r3, pc, #672	@ (adr r3, 8007a70 <__ieee754_rem_pio2+0x2f0>)
 80077ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d2:	f7f8 fd1d 	bl	8000210 <__aeabi_dsub>
 80077d6:	4602      	mov	r2, r0
 80077d8:	460b      	mov	r3, r1
 80077da:	4680      	mov	r8, r0
 80077dc:	4689      	mov	r9, r1
 80077de:	4630      	mov	r0, r6
 80077e0:	4639      	mov	r1, r7
 80077e2:	f7f8 fd15 	bl	8000210 <__aeabi_dsub>
 80077e6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8007a70 <__ieee754_rem_pio2+0x2f0>)
 80077e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ec:	f7f8 fd10 	bl	8000210 <__aeabi_dsub>
 80077f0:	e9c4 8900 	strd	r8, r9, [r4]
 80077f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80077f8:	2501      	movs	r5, #1
 80077fa:	4628      	mov	r0, r5
 80077fc:	b00d      	add	sp, #52	@ 0x34
 80077fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007802:	a39d      	add	r3, pc, #628	@ (adr r3, 8007a78 <__ieee754_rem_pio2+0x2f8>)
 8007804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007808:	f7f8 fd02 	bl	8000210 <__aeabi_dsub>
 800780c:	a39c      	add	r3, pc, #624	@ (adr r3, 8007a80 <__ieee754_rem_pio2+0x300>)
 800780e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007812:	4606      	mov	r6, r0
 8007814:	460f      	mov	r7, r1
 8007816:	f7f8 fcfb 	bl	8000210 <__aeabi_dsub>
 800781a:	4602      	mov	r2, r0
 800781c:	460b      	mov	r3, r1
 800781e:	4680      	mov	r8, r0
 8007820:	4689      	mov	r9, r1
 8007822:	4630      	mov	r0, r6
 8007824:	4639      	mov	r1, r7
 8007826:	f7f8 fcf3 	bl	8000210 <__aeabi_dsub>
 800782a:	a395      	add	r3, pc, #596	@ (adr r3, 8007a80 <__ieee754_rem_pio2+0x300>)
 800782c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007830:	e7dc      	b.n	80077ec <__ieee754_rem_pio2+0x6c>
 8007832:	f7f8 fcef 	bl	8000214 <__adddf3>
 8007836:	45a8      	cmp	r8, r5
 8007838:	4606      	mov	r6, r0
 800783a:	460f      	mov	r7, r1
 800783c:	d018      	beq.n	8007870 <__ieee754_rem_pio2+0xf0>
 800783e:	a38c      	add	r3, pc, #560	@ (adr r3, 8007a70 <__ieee754_rem_pio2+0x2f0>)
 8007840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007844:	f7f8 fce6 	bl	8000214 <__adddf3>
 8007848:	4602      	mov	r2, r0
 800784a:	460b      	mov	r3, r1
 800784c:	4680      	mov	r8, r0
 800784e:	4689      	mov	r9, r1
 8007850:	4630      	mov	r0, r6
 8007852:	4639      	mov	r1, r7
 8007854:	f7f8 fcdc 	bl	8000210 <__aeabi_dsub>
 8007858:	a385      	add	r3, pc, #532	@ (adr r3, 8007a70 <__ieee754_rem_pio2+0x2f0>)
 800785a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785e:	f7f8 fcd9 	bl	8000214 <__adddf3>
 8007862:	f04f 35ff 	mov.w	r5, #4294967295
 8007866:	e9c4 8900 	strd	r8, r9, [r4]
 800786a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800786e:	e7c4      	b.n	80077fa <__ieee754_rem_pio2+0x7a>
 8007870:	a381      	add	r3, pc, #516	@ (adr r3, 8007a78 <__ieee754_rem_pio2+0x2f8>)
 8007872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007876:	f7f8 fccd 	bl	8000214 <__adddf3>
 800787a:	a381      	add	r3, pc, #516	@ (adr r3, 8007a80 <__ieee754_rem_pio2+0x300>)
 800787c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007880:	4606      	mov	r6, r0
 8007882:	460f      	mov	r7, r1
 8007884:	f7f8 fcc6 	bl	8000214 <__adddf3>
 8007888:	4602      	mov	r2, r0
 800788a:	460b      	mov	r3, r1
 800788c:	4680      	mov	r8, r0
 800788e:	4689      	mov	r9, r1
 8007890:	4630      	mov	r0, r6
 8007892:	4639      	mov	r1, r7
 8007894:	f7f8 fcbc 	bl	8000210 <__aeabi_dsub>
 8007898:	a379      	add	r3, pc, #484	@ (adr r3, 8007a80 <__ieee754_rem_pio2+0x300>)
 800789a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789e:	e7de      	b.n	800785e <__ieee754_rem_pio2+0xde>
 80078a0:	4b82      	ldr	r3, [pc, #520]	@ (8007aac <__ieee754_rem_pio2+0x32c>)
 80078a2:	4598      	cmp	r8, r3
 80078a4:	f200 80d1 	bhi.w	8007a4a <__ieee754_rem_pio2+0x2ca>
 80078a8:	f7fe ff5e 	bl	8006768 <fabs>
 80078ac:	ec57 6b10 	vmov	r6, r7, d0
 80078b0:	a375      	add	r3, pc, #468	@ (adr r3, 8007a88 <__ieee754_rem_pio2+0x308>)
 80078b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b6:	4630      	mov	r0, r6
 80078b8:	4639      	mov	r1, r7
 80078ba:	f7f8 fe61 	bl	8000580 <__aeabi_dmul>
 80078be:	4b7c      	ldr	r3, [pc, #496]	@ (8007ab0 <__ieee754_rem_pio2+0x330>)
 80078c0:	2200      	movs	r2, #0
 80078c2:	f7f8 fca7 	bl	8000214 <__adddf3>
 80078c6:	f7f9 f90b 	bl	8000ae0 <__aeabi_d2iz>
 80078ca:	4605      	mov	r5, r0
 80078cc:	f7f8 fdee 	bl	80004ac <__aeabi_i2d>
 80078d0:	4602      	mov	r2, r0
 80078d2:	460b      	mov	r3, r1
 80078d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80078d8:	a363      	add	r3, pc, #396	@ (adr r3, 8007a68 <__ieee754_rem_pio2+0x2e8>)
 80078da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078de:	f7f8 fe4f 	bl	8000580 <__aeabi_dmul>
 80078e2:	4602      	mov	r2, r0
 80078e4:	460b      	mov	r3, r1
 80078e6:	4630      	mov	r0, r6
 80078e8:	4639      	mov	r1, r7
 80078ea:	f7f8 fc91 	bl	8000210 <__aeabi_dsub>
 80078ee:	a360      	add	r3, pc, #384	@ (adr r3, 8007a70 <__ieee754_rem_pio2+0x2f0>)
 80078f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f4:	4682      	mov	sl, r0
 80078f6:	468b      	mov	fp, r1
 80078f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078fc:	f7f8 fe40 	bl	8000580 <__aeabi_dmul>
 8007900:	2d1f      	cmp	r5, #31
 8007902:	4606      	mov	r6, r0
 8007904:	460f      	mov	r7, r1
 8007906:	dc0c      	bgt.n	8007922 <__ieee754_rem_pio2+0x1a2>
 8007908:	4b6a      	ldr	r3, [pc, #424]	@ (8007ab4 <__ieee754_rem_pio2+0x334>)
 800790a:	1e6a      	subs	r2, r5, #1
 800790c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007910:	4543      	cmp	r3, r8
 8007912:	d006      	beq.n	8007922 <__ieee754_rem_pio2+0x1a2>
 8007914:	4632      	mov	r2, r6
 8007916:	463b      	mov	r3, r7
 8007918:	4650      	mov	r0, sl
 800791a:	4659      	mov	r1, fp
 800791c:	f7f8 fc78 	bl	8000210 <__aeabi_dsub>
 8007920:	e00e      	b.n	8007940 <__ieee754_rem_pio2+0x1c0>
 8007922:	463b      	mov	r3, r7
 8007924:	4632      	mov	r2, r6
 8007926:	4650      	mov	r0, sl
 8007928:	4659      	mov	r1, fp
 800792a:	f7f8 fc71 	bl	8000210 <__aeabi_dsub>
 800792e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007932:	9305      	str	r3, [sp, #20]
 8007934:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007938:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800793c:	2b10      	cmp	r3, #16
 800793e:	dc02      	bgt.n	8007946 <__ieee754_rem_pio2+0x1c6>
 8007940:	e9c4 0100 	strd	r0, r1, [r4]
 8007944:	e039      	b.n	80079ba <__ieee754_rem_pio2+0x23a>
 8007946:	a34c      	add	r3, pc, #304	@ (adr r3, 8007a78 <__ieee754_rem_pio2+0x2f8>)
 8007948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007950:	f7f8 fe16 	bl	8000580 <__aeabi_dmul>
 8007954:	4606      	mov	r6, r0
 8007956:	460f      	mov	r7, r1
 8007958:	4602      	mov	r2, r0
 800795a:	460b      	mov	r3, r1
 800795c:	4650      	mov	r0, sl
 800795e:	4659      	mov	r1, fp
 8007960:	f7f8 fc56 	bl	8000210 <__aeabi_dsub>
 8007964:	4602      	mov	r2, r0
 8007966:	460b      	mov	r3, r1
 8007968:	4680      	mov	r8, r0
 800796a:	4689      	mov	r9, r1
 800796c:	4650      	mov	r0, sl
 800796e:	4659      	mov	r1, fp
 8007970:	f7f8 fc4e 	bl	8000210 <__aeabi_dsub>
 8007974:	4632      	mov	r2, r6
 8007976:	463b      	mov	r3, r7
 8007978:	f7f8 fc4a 	bl	8000210 <__aeabi_dsub>
 800797c:	a340      	add	r3, pc, #256	@ (adr r3, 8007a80 <__ieee754_rem_pio2+0x300>)
 800797e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007982:	4606      	mov	r6, r0
 8007984:	460f      	mov	r7, r1
 8007986:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800798a:	f7f8 fdf9 	bl	8000580 <__aeabi_dmul>
 800798e:	4632      	mov	r2, r6
 8007990:	463b      	mov	r3, r7
 8007992:	f7f8 fc3d 	bl	8000210 <__aeabi_dsub>
 8007996:	4602      	mov	r2, r0
 8007998:	460b      	mov	r3, r1
 800799a:	4606      	mov	r6, r0
 800799c:	460f      	mov	r7, r1
 800799e:	4640      	mov	r0, r8
 80079a0:	4649      	mov	r1, r9
 80079a2:	f7f8 fc35 	bl	8000210 <__aeabi_dsub>
 80079a6:	9a05      	ldr	r2, [sp, #20]
 80079a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80079ac:	1ad3      	subs	r3, r2, r3
 80079ae:	2b31      	cmp	r3, #49	@ 0x31
 80079b0:	dc20      	bgt.n	80079f4 <__ieee754_rem_pio2+0x274>
 80079b2:	e9c4 0100 	strd	r0, r1, [r4]
 80079b6:	46c2      	mov	sl, r8
 80079b8:	46cb      	mov	fp, r9
 80079ba:	e9d4 8900 	ldrd	r8, r9, [r4]
 80079be:	4650      	mov	r0, sl
 80079c0:	4642      	mov	r2, r8
 80079c2:	464b      	mov	r3, r9
 80079c4:	4659      	mov	r1, fp
 80079c6:	f7f8 fc23 	bl	8000210 <__aeabi_dsub>
 80079ca:	463b      	mov	r3, r7
 80079cc:	4632      	mov	r2, r6
 80079ce:	f7f8 fc1f 	bl	8000210 <__aeabi_dsub>
 80079d2:	9b04      	ldr	r3, [sp, #16]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80079da:	f6bf af0e 	bge.w	80077fa <__ieee754_rem_pio2+0x7a>
 80079de:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80079e2:	6063      	str	r3, [r4, #4]
 80079e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80079e8:	f8c4 8000 	str.w	r8, [r4]
 80079ec:	60a0      	str	r0, [r4, #8]
 80079ee:	60e3      	str	r3, [r4, #12]
 80079f0:	426d      	negs	r5, r5
 80079f2:	e702      	b.n	80077fa <__ieee754_rem_pio2+0x7a>
 80079f4:	a326      	add	r3, pc, #152	@ (adr r3, 8007a90 <__ieee754_rem_pio2+0x310>)
 80079f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079fe:	f7f8 fdbf 	bl	8000580 <__aeabi_dmul>
 8007a02:	4606      	mov	r6, r0
 8007a04:	460f      	mov	r7, r1
 8007a06:	4602      	mov	r2, r0
 8007a08:	460b      	mov	r3, r1
 8007a0a:	4640      	mov	r0, r8
 8007a0c:	4649      	mov	r1, r9
 8007a0e:	f7f8 fbff 	bl	8000210 <__aeabi_dsub>
 8007a12:	4602      	mov	r2, r0
 8007a14:	460b      	mov	r3, r1
 8007a16:	4682      	mov	sl, r0
 8007a18:	468b      	mov	fp, r1
 8007a1a:	4640      	mov	r0, r8
 8007a1c:	4649      	mov	r1, r9
 8007a1e:	f7f8 fbf7 	bl	8000210 <__aeabi_dsub>
 8007a22:	4632      	mov	r2, r6
 8007a24:	463b      	mov	r3, r7
 8007a26:	f7f8 fbf3 	bl	8000210 <__aeabi_dsub>
 8007a2a:	a31b      	add	r3, pc, #108	@ (adr r3, 8007a98 <__ieee754_rem_pio2+0x318>)
 8007a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a30:	4606      	mov	r6, r0
 8007a32:	460f      	mov	r7, r1
 8007a34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a38:	f7f8 fda2 	bl	8000580 <__aeabi_dmul>
 8007a3c:	4632      	mov	r2, r6
 8007a3e:	463b      	mov	r3, r7
 8007a40:	f7f8 fbe6 	bl	8000210 <__aeabi_dsub>
 8007a44:	4606      	mov	r6, r0
 8007a46:	460f      	mov	r7, r1
 8007a48:	e764      	b.n	8007914 <__ieee754_rem_pio2+0x194>
 8007a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8007ab8 <__ieee754_rem_pio2+0x338>)
 8007a4c:	4598      	cmp	r8, r3
 8007a4e:	d935      	bls.n	8007abc <__ieee754_rem_pio2+0x33c>
 8007a50:	4632      	mov	r2, r6
 8007a52:	463b      	mov	r3, r7
 8007a54:	4630      	mov	r0, r6
 8007a56:	4639      	mov	r1, r7
 8007a58:	f7f8 fbda 	bl	8000210 <__aeabi_dsub>
 8007a5c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007a60:	e9c4 0100 	strd	r0, r1, [r4]
 8007a64:	e69e      	b.n	80077a4 <__ieee754_rem_pio2+0x24>
 8007a66:	bf00      	nop
 8007a68:	54400000 	.word	0x54400000
 8007a6c:	3ff921fb 	.word	0x3ff921fb
 8007a70:	1a626331 	.word	0x1a626331
 8007a74:	3dd0b461 	.word	0x3dd0b461
 8007a78:	1a600000 	.word	0x1a600000
 8007a7c:	3dd0b461 	.word	0x3dd0b461
 8007a80:	2e037073 	.word	0x2e037073
 8007a84:	3ba3198a 	.word	0x3ba3198a
 8007a88:	6dc9c883 	.word	0x6dc9c883
 8007a8c:	3fe45f30 	.word	0x3fe45f30
 8007a90:	2e000000 	.word	0x2e000000
 8007a94:	3ba3198a 	.word	0x3ba3198a
 8007a98:	252049c1 	.word	0x252049c1
 8007a9c:	397b839a 	.word	0x397b839a
 8007aa0:	3fe921fb 	.word	0x3fe921fb
 8007aa4:	4002d97b 	.word	0x4002d97b
 8007aa8:	3ff921fb 	.word	0x3ff921fb
 8007aac:	413921fb 	.word	0x413921fb
 8007ab0:	3fe00000 	.word	0x3fe00000
 8007ab4:	080084f8 	.word	0x080084f8
 8007ab8:	7fefffff 	.word	0x7fefffff
 8007abc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8007ac0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8007ac4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8007ac8:	4630      	mov	r0, r6
 8007aca:	460f      	mov	r7, r1
 8007acc:	f7f9 f808 	bl	8000ae0 <__aeabi_d2iz>
 8007ad0:	f7f8 fcec 	bl	80004ac <__aeabi_i2d>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	4630      	mov	r0, r6
 8007ada:	4639      	mov	r1, r7
 8007adc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007ae0:	f7f8 fb96 	bl	8000210 <__aeabi_dsub>
 8007ae4:	4b22      	ldr	r3, [pc, #136]	@ (8007b70 <__ieee754_rem_pio2+0x3f0>)
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f7f8 fd4a 	bl	8000580 <__aeabi_dmul>
 8007aec:	460f      	mov	r7, r1
 8007aee:	4606      	mov	r6, r0
 8007af0:	f7f8 fff6 	bl	8000ae0 <__aeabi_d2iz>
 8007af4:	f7f8 fcda 	bl	80004ac <__aeabi_i2d>
 8007af8:	4602      	mov	r2, r0
 8007afa:	460b      	mov	r3, r1
 8007afc:	4630      	mov	r0, r6
 8007afe:	4639      	mov	r1, r7
 8007b00:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007b04:	f7f8 fb84 	bl	8000210 <__aeabi_dsub>
 8007b08:	4b19      	ldr	r3, [pc, #100]	@ (8007b70 <__ieee754_rem_pio2+0x3f0>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f7f8 fd38 	bl	8000580 <__aeabi_dmul>
 8007b10:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8007b14:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8007b18:	f04f 0803 	mov.w	r8, #3
 8007b1c:	2600      	movs	r6, #0
 8007b1e:	2700      	movs	r7, #0
 8007b20:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8007b24:	4632      	mov	r2, r6
 8007b26:	463b      	mov	r3, r7
 8007b28:	46c2      	mov	sl, r8
 8007b2a:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b2e:	f7f8 ff8f 	bl	8000a50 <__aeabi_dcmpeq>
 8007b32:	2800      	cmp	r0, #0
 8007b34:	d1f4      	bne.n	8007b20 <__ieee754_rem_pio2+0x3a0>
 8007b36:	4b0f      	ldr	r3, [pc, #60]	@ (8007b74 <__ieee754_rem_pio2+0x3f4>)
 8007b38:	9301      	str	r3, [sp, #4]
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	9300      	str	r3, [sp, #0]
 8007b3e:	462a      	mov	r2, r5
 8007b40:	4653      	mov	r3, sl
 8007b42:	4621      	mov	r1, r4
 8007b44:	a806      	add	r0, sp, #24
 8007b46:	f000 f8d3 	bl	8007cf0 <__kernel_rem_pio2>
 8007b4a:	9b04      	ldr	r3, [sp, #16]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	4605      	mov	r5, r0
 8007b50:	f6bf ae53 	bge.w	80077fa <__ieee754_rem_pio2+0x7a>
 8007b54:	e9d4 2100 	ldrd	r2, r1, [r4]
 8007b58:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007b5c:	e9c4 2300 	strd	r2, r3, [r4]
 8007b60:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8007b64:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007b68:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8007b6c:	e740      	b.n	80079f0 <__ieee754_rem_pio2+0x270>
 8007b6e:	bf00      	nop
 8007b70:	41700000 	.word	0x41700000
 8007b74:	08008578 	.word	0x08008578

08007b78 <scalbn>:
 8007b78:	b570      	push	{r4, r5, r6, lr}
 8007b7a:	ec55 4b10 	vmov	r4, r5, d0
 8007b7e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007b82:	4606      	mov	r6, r0
 8007b84:	462b      	mov	r3, r5
 8007b86:	b991      	cbnz	r1, 8007bae <scalbn+0x36>
 8007b88:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007b8c:	4323      	orrs	r3, r4
 8007b8e:	d03d      	beq.n	8007c0c <scalbn+0x94>
 8007b90:	4b35      	ldr	r3, [pc, #212]	@ (8007c68 <scalbn+0xf0>)
 8007b92:	4620      	mov	r0, r4
 8007b94:	4629      	mov	r1, r5
 8007b96:	2200      	movs	r2, #0
 8007b98:	f7f8 fcf2 	bl	8000580 <__aeabi_dmul>
 8007b9c:	4b33      	ldr	r3, [pc, #204]	@ (8007c6c <scalbn+0xf4>)
 8007b9e:	429e      	cmp	r6, r3
 8007ba0:	4604      	mov	r4, r0
 8007ba2:	460d      	mov	r5, r1
 8007ba4:	da0f      	bge.n	8007bc6 <scalbn+0x4e>
 8007ba6:	a328      	add	r3, pc, #160	@ (adr r3, 8007c48 <scalbn+0xd0>)
 8007ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bac:	e01e      	b.n	8007bec <scalbn+0x74>
 8007bae:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8007bb2:	4291      	cmp	r1, r2
 8007bb4:	d10b      	bne.n	8007bce <scalbn+0x56>
 8007bb6:	4622      	mov	r2, r4
 8007bb8:	4620      	mov	r0, r4
 8007bba:	4629      	mov	r1, r5
 8007bbc:	f7f8 fb2a 	bl	8000214 <__adddf3>
 8007bc0:	4604      	mov	r4, r0
 8007bc2:	460d      	mov	r5, r1
 8007bc4:	e022      	b.n	8007c0c <scalbn+0x94>
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007bcc:	3936      	subs	r1, #54	@ 0x36
 8007bce:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8007bd2:	4296      	cmp	r6, r2
 8007bd4:	dd0d      	ble.n	8007bf2 <scalbn+0x7a>
 8007bd6:	2d00      	cmp	r5, #0
 8007bd8:	a11d      	add	r1, pc, #116	@ (adr r1, 8007c50 <scalbn+0xd8>)
 8007bda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bde:	da02      	bge.n	8007be6 <scalbn+0x6e>
 8007be0:	a11d      	add	r1, pc, #116	@ (adr r1, 8007c58 <scalbn+0xe0>)
 8007be2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007be6:	a31a      	add	r3, pc, #104	@ (adr r3, 8007c50 <scalbn+0xd8>)
 8007be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bec:	f7f8 fcc8 	bl	8000580 <__aeabi_dmul>
 8007bf0:	e7e6      	b.n	8007bc0 <scalbn+0x48>
 8007bf2:	1872      	adds	r2, r6, r1
 8007bf4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8007bf8:	428a      	cmp	r2, r1
 8007bfa:	dcec      	bgt.n	8007bd6 <scalbn+0x5e>
 8007bfc:	2a00      	cmp	r2, #0
 8007bfe:	dd08      	ble.n	8007c12 <scalbn+0x9a>
 8007c00:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007c04:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007c08:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007c0c:	ec45 4b10 	vmov	d0, r4, r5
 8007c10:	bd70      	pop	{r4, r5, r6, pc}
 8007c12:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8007c16:	da08      	bge.n	8007c2a <scalbn+0xb2>
 8007c18:	2d00      	cmp	r5, #0
 8007c1a:	a10b      	add	r1, pc, #44	@ (adr r1, 8007c48 <scalbn+0xd0>)
 8007c1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c20:	dac1      	bge.n	8007ba6 <scalbn+0x2e>
 8007c22:	a10f      	add	r1, pc, #60	@ (adr r1, 8007c60 <scalbn+0xe8>)
 8007c24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c28:	e7bd      	b.n	8007ba6 <scalbn+0x2e>
 8007c2a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007c2e:	3236      	adds	r2, #54	@ 0x36
 8007c30:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007c34:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007c38:	4620      	mov	r0, r4
 8007c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8007c70 <scalbn+0xf8>)
 8007c3c:	4629      	mov	r1, r5
 8007c3e:	2200      	movs	r2, #0
 8007c40:	e7d4      	b.n	8007bec <scalbn+0x74>
 8007c42:	bf00      	nop
 8007c44:	f3af 8000 	nop.w
 8007c48:	c2f8f359 	.word	0xc2f8f359
 8007c4c:	01a56e1f 	.word	0x01a56e1f
 8007c50:	8800759c 	.word	0x8800759c
 8007c54:	7e37e43c 	.word	0x7e37e43c
 8007c58:	8800759c 	.word	0x8800759c
 8007c5c:	fe37e43c 	.word	0xfe37e43c
 8007c60:	c2f8f359 	.word	0xc2f8f359
 8007c64:	81a56e1f 	.word	0x81a56e1f
 8007c68:	43500000 	.word	0x43500000
 8007c6c:	ffff3cb0 	.word	0xffff3cb0
 8007c70:	3c900000 	.word	0x3c900000

08007c74 <with_errno>:
 8007c74:	b510      	push	{r4, lr}
 8007c76:	ed2d 8b02 	vpush	{d8}
 8007c7a:	eeb0 8a40 	vmov.f32	s16, s0
 8007c7e:	eef0 8a60 	vmov.f32	s17, s1
 8007c82:	4604      	mov	r4, r0
 8007c84:	f7fe fc82 	bl	800658c <__errno>
 8007c88:	eeb0 0a48 	vmov.f32	s0, s16
 8007c8c:	eef0 0a68 	vmov.f32	s1, s17
 8007c90:	ecbd 8b02 	vpop	{d8}
 8007c94:	6004      	str	r4, [r0, #0]
 8007c96:	bd10      	pop	{r4, pc}

08007c98 <xflow>:
 8007c98:	4603      	mov	r3, r0
 8007c9a:	b507      	push	{r0, r1, r2, lr}
 8007c9c:	ec51 0b10 	vmov	r0, r1, d0
 8007ca0:	b183      	cbz	r3, 8007cc4 <xflow+0x2c>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007ca8:	e9cd 2300 	strd	r2, r3, [sp]
 8007cac:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007cb0:	f7f8 fc66 	bl	8000580 <__aeabi_dmul>
 8007cb4:	ec41 0b10 	vmov	d0, r0, r1
 8007cb8:	2022      	movs	r0, #34	@ 0x22
 8007cba:	b003      	add	sp, #12
 8007cbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cc0:	f7ff bfd8 	b.w	8007c74 <with_errno>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	e7ee      	b.n	8007ca8 <xflow+0x10>
 8007cca:	0000      	movs	r0, r0
 8007ccc:	0000      	movs	r0, r0
	...

08007cd0 <__math_uflow>:
 8007cd0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007cd8 <__math_uflow+0x8>
 8007cd4:	f7ff bfe0 	b.w	8007c98 <xflow>
 8007cd8:	00000000 	.word	0x00000000
 8007cdc:	10000000 	.word	0x10000000

08007ce0 <__math_oflow>:
 8007ce0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007ce8 <__math_oflow+0x8>
 8007ce4:	f7ff bfd8 	b.w	8007c98 <xflow>
 8007ce8:	00000000 	.word	0x00000000
 8007cec:	70000000 	.word	0x70000000

08007cf0 <__kernel_rem_pio2>:
 8007cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf4:	ed2d 8b02 	vpush	{d8}
 8007cf8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8007cfc:	f112 0f14 	cmn.w	r2, #20
 8007d00:	9306      	str	r3, [sp, #24]
 8007d02:	9104      	str	r1, [sp, #16]
 8007d04:	4bbe      	ldr	r3, [pc, #760]	@ (8008000 <__kernel_rem_pio2+0x310>)
 8007d06:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8007d08:	9008      	str	r0, [sp, #32]
 8007d0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	9b06      	ldr	r3, [sp, #24]
 8007d12:	f103 33ff 	add.w	r3, r3, #4294967295
 8007d16:	bfa8      	it	ge
 8007d18:	1ed4      	subge	r4, r2, #3
 8007d1a:	9305      	str	r3, [sp, #20]
 8007d1c:	bfb2      	itee	lt
 8007d1e:	2400      	movlt	r4, #0
 8007d20:	2318      	movge	r3, #24
 8007d22:	fb94 f4f3 	sdivge	r4, r4, r3
 8007d26:	f06f 0317 	mvn.w	r3, #23
 8007d2a:	fb04 3303 	mla	r3, r4, r3, r3
 8007d2e:	eb03 0b02 	add.w	fp, r3, r2
 8007d32:	9b00      	ldr	r3, [sp, #0]
 8007d34:	9a05      	ldr	r2, [sp, #20]
 8007d36:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8007ff0 <__kernel_rem_pio2+0x300>
 8007d3a:	eb03 0802 	add.w	r8, r3, r2
 8007d3e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8007d40:	1aa7      	subs	r7, r4, r2
 8007d42:	ae20      	add	r6, sp, #128	@ 0x80
 8007d44:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007d48:	2500      	movs	r5, #0
 8007d4a:	4545      	cmp	r5, r8
 8007d4c:	dd13      	ble.n	8007d76 <__kernel_rem_pio2+0x86>
 8007d4e:	9b06      	ldr	r3, [sp, #24]
 8007d50:	aa20      	add	r2, sp, #128	@ 0x80
 8007d52:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007d56:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8007d5a:	f04f 0800 	mov.w	r8, #0
 8007d5e:	9b00      	ldr	r3, [sp, #0]
 8007d60:	4598      	cmp	r8, r3
 8007d62:	dc31      	bgt.n	8007dc8 <__kernel_rem_pio2+0xd8>
 8007d64:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8007ff0 <__kernel_rem_pio2+0x300>
 8007d68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007d6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007d70:	462f      	mov	r7, r5
 8007d72:	2600      	movs	r6, #0
 8007d74:	e01b      	b.n	8007dae <__kernel_rem_pio2+0xbe>
 8007d76:	42ef      	cmn	r7, r5
 8007d78:	d407      	bmi.n	8007d8a <__kernel_rem_pio2+0x9a>
 8007d7a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007d7e:	f7f8 fb95 	bl	80004ac <__aeabi_i2d>
 8007d82:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007d86:	3501      	adds	r5, #1
 8007d88:	e7df      	b.n	8007d4a <__kernel_rem_pio2+0x5a>
 8007d8a:	ec51 0b18 	vmov	r0, r1, d8
 8007d8e:	e7f8      	b.n	8007d82 <__kernel_rem_pio2+0x92>
 8007d90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d94:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007d98:	f7f8 fbf2 	bl	8000580 <__aeabi_dmul>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	460b      	mov	r3, r1
 8007da0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007da4:	f7f8 fa36 	bl	8000214 <__adddf3>
 8007da8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dac:	3601      	adds	r6, #1
 8007dae:	9b05      	ldr	r3, [sp, #20]
 8007db0:	429e      	cmp	r6, r3
 8007db2:	f1a7 0708 	sub.w	r7, r7, #8
 8007db6:	ddeb      	ble.n	8007d90 <__kernel_rem_pio2+0xa0>
 8007db8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007dbc:	f108 0801 	add.w	r8, r8, #1
 8007dc0:	ecaa 7b02 	vstmia	sl!, {d7}
 8007dc4:	3508      	adds	r5, #8
 8007dc6:	e7ca      	b.n	8007d5e <__kernel_rem_pio2+0x6e>
 8007dc8:	9b00      	ldr	r3, [sp, #0]
 8007dca:	f8dd 8000 	ldr.w	r8, [sp]
 8007dce:	aa0c      	add	r2, sp, #48	@ 0x30
 8007dd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007dd4:	930a      	str	r3, [sp, #40]	@ 0x28
 8007dd6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8007dd8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007ddc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dde:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8007de2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007de4:	ab98      	add	r3, sp, #608	@ 0x260
 8007de6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007dea:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8007dee:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007df2:	ac0c      	add	r4, sp, #48	@ 0x30
 8007df4:	ab70      	add	r3, sp, #448	@ 0x1c0
 8007df6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8007dfa:	46a1      	mov	r9, r4
 8007dfc:	46c2      	mov	sl, r8
 8007dfe:	f1ba 0f00 	cmp.w	sl, #0
 8007e02:	f1a5 0508 	sub.w	r5, r5, #8
 8007e06:	dc77      	bgt.n	8007ef8 <__kernel_rem_pio2+0x208>
 8007e08:	4658      	mov	r0, fp
 8007e0a:	ed9d 0b02 	vldr	d0, [sp, #8]
 8007e0e:	f7ff feb3 	bl	8007b78 <scalbn>
 8007e12:	ec57 6b10 	vmov	r6, r7, d0
 8007e16:	2200      	movs	r2, #0
 8007e18:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	4639      	mov	r1, r7
 8007e20:	f7f8 fbae 	bl	8000580 <__aeabi_dmul>
 8007e24:	ec41 0b10 	vmov	d0, r0, r1
 8007e28:	f000 faba 	bl	80083a0 <floor>
 8007e2c:	4b75      	ldr	r3, [pc, #468]	@ (8008004 <__kernel_rem_pio2+0x314>)
 8007e2e:	ec51 0b10 	vmov	r0, r1, d0
 8007e32:	2200      	movs	r2, #0
 8007e34:	f7f8 fba4 	bl	8000580 <__aeabi_dmul>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	4630      	mov	r0, r6
 8007e3e:	4639      	mov	r1, r7
 8007e40:	f7f8 f9e6 	bl	8000210 <__aeabi_dsub>
 8007e44:	460f      	mov	r7, r1
 8007e46:	4606      	mov	r6, r0
 8007e48:	f7f8 fe4a 	bl	8000ae0 <__aeabi_d2iz>
 8007e4c:	9002      	str	r0, [sp, #8]
 8007e4e:	f7f8 fb2d 	bl	80004ac <__aeabi_i2d>
 8007e52:	4602      	mov	r2, r0
 8007e54:	460b      	mov	r3, r1
 8007e56:	4630      	mov	r0, r6
 8007e58:	4639      	mov	r1, r7
 8007e5a:	f7f8 f9d9 	bl	8000210 <__aeabi_dsub>
 8007e5e:	f1bb 0f00 	cmp.w	fp, #0
 8007e62:	4606      	mov	r6, r0
 8007e64:	460f      	mov	r7, r1
 8007e66:	dd6c      	ble.n	8007f42 <__kernel_rem_pio2+0x252>
 8007e68:	f108 31ff 	add.w	r1, r8, #4294967295
 8007e6c:	ab0c      	add	r3, sp, #48	@ 0x30
 8007e6e:	9d02      	ldr	r5, [sp, #8]
 8007e70:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007e74:	f1cb 0018 	rsb	r0, fp, #24
 8007e78:	fa43 f200 	asr.w	r2, r3, r0
 8007e7c:	4415      	add	r5, r2
 8007e7e:	4082      	lsls	r2, r0
 8007e80:	1a9b      	subs	r3, r3, r2
 8007e82:	aa0c      	add	r2, sp, #48	@ 0x30
 8007e84:	9502      	str	r5, [sp, #8]
 8007e86:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8007e8a:	f1cb 0217 	rsb	r2, fp, #23
 8007e8e:	fa43 f902 	asr.w	r9, r3, r2
 8007e92:	f1b9 0f00 	cmp.w	r9, #0
 8007e96:	dd64      	ble.n	8007f62 <__kernel_rem_pio2+0x272>
 8007e98:	9b02      	ldr	r3, [sp, #8]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	9302      	str	r3, [sp, #8]
 8007ea0:	4615      	mov	r5, r2
 8007ea2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8007ea6:	4590      	cmp	r8, r2
 8007ea8:	f300 80b8 	bgt.w	800801c <__kernel_rem_pio2+0x32c>
 8007eac:	f1bb 0f00 	cmp.w	fp, #0
 8007eb0:	dd07      	ble.n	8007ec2 <__kernel_rem_pio2+0x1d2>
 8007eb2:	f1bb 0f01 	cmp.w	fp, #1
 8007eb6:	f000 80bf 	beq.w	8008038 <__kernel_rem_pio2+0x348>
 8007eba:	f1bb 0f02 	cmp.w	fp, #2
 8007ebe:	f000 80c6 	beq.w	800804e <__kernel_rem_pio2+0x35e>
 8007ec2:	f1b9 0f02 	cmp.w	r9, #2
 8007ec6:	d14c      	bne.n	8007f62 <__kernel_rem_pio2+0x272>
 8007ec8:	4632      	mov	r2, r6
 8007eca:	463b      	mov	r3, r7
 8007ecc:	494e      	ldr	r1, [pc, #312]	@ (8008008 <__kernel_rem_pio2+0x318>)
 8007ece:	2000      	movs	r0, #0
 8007ed0:	f7f8 f99e 	bl	8000210 <__aeabi_dsub>
 8007ed4:	4606      	mov	r6, r0
 8007ed6:	460f      	mov	r7, r1
 8007ed8:	2d00      	cmp	r5, #0
 8007eda:	d042      	beq.n	8007f62 <__kernel_rem_pio2+0x272>
 8007edc:	4658      	mov	r0, fp
 8007ede:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8007ff8 <__kernel_rem_pio2+0x308>
 8007ee2:	f7ff fe49 	bl	8007b78 <scalbn>
 8007ee6:	4630      	mov	r0, r6
 8007ee8:	4639      	mov	r1, r7
 8007eea:	ec53 2b10 	vmov	r2, r3, d0
 8007eee:	f7f8 f98f 	bl	8000210 <__aeabi_dsub>
 8007ef2:	4606      	mov	r6, r0
 8007ef4:	460f      	mov	r7, r1
 8007ef6:	e034      	b.n	8007f62 <__kernel_rem_pio2+0x272>
 8007ef8:	4b44      	ldr	r3, [pc, #272]	@ (800800c <__kernel_rem_pio2+0x31c>)
 8007efa:	2200      	movs	r2, #0
 8007efc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f00:	f7f8 fb3e 	bl	8000580 <__aeabi_dmul>
 8007f04:	f7f8 fdec 	bl	8000ae0 <__aeabi_d2iz>
 8007f08:	f7f8 fad0 	bl	80004ac <__aeabi_i2d>
 8007f0c:	4b40      	ldr	r3, [pc, #256]	@ (8008010 <__kernel_rem_pio2+0x320>)
 8007f0e:	2200      	movs	r2, #0
 8007f10:	4606      	mov	r6, r0
 8007f12:	460f      	mov	r7, r1
 8007f14:	f7f8 fb34 	bl	8000580 <__aeabi_dmul>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f20:	f7f8 f976 	bl	8000210 <__aeabi_dsub>
 8007f24:	f7f8 fddc 	bl	8000ae0 <__aeabi_d2iz>
 8007f28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f2c:	f849 0b04 	str.w	r0, [r9], #4
 8007f30:	4639      	mov	r1, r7
 8007f32:	4630      	mov	r0, r6
 8007f34:	f7f8 f96e 	bl	8000214 <__adddf3>
 8007f38:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f40:	e75d      	b.n	8007dfe <__kernel_rem_pio2+0x10e>
 8007f42:	d107      	bne.n	8007f54 <__kernel_rem_pio2+0x264>
 8007f44:	f108 33ff 	add.w	r3, r8, #4294967295
 8007f48:	aa0c      	add	r2, sp, #48	@ 0x30
 8007f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f4e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8007f52:	e79e      	b.n	8007e92 <__kernel_rem_pio2+0x1a2>
 8007f54:	4b2f      	ldr	r3, [pc, #188]	@ (8008014 <__kernel_rem_pio2+0x324>)
 8007f56:	2200      	movs	r2, #0
 8007f58:	f7f8 fd98 	bl	8000a8c <__aeabi_dcmpge>
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	d143      	bne.n	8007fe8 <__kernel_rem_pio2+0x2f8>
 8007f60:	4681      	mov	r9, r0
 8007f62:	2200      	movs	r2, #0
 8007f64:	2300      	movs	r3, #0
 8007f66:	4630      	mov	r0, r6
 8007f68:	4639      	mov	r1, r7
 8007f6a:	f7f8 fd71 	bl	8000a50 <__aeabi_dcmpeq>
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	f000 80bf 	beq.w	80080f2 <__kernel_rem_pio2+0x402>
 8007f74:	f108 33ff 	add.w	r3, r8, #4294967295
 8007f78:	2200      	movs	r2, #0
 8007f7a:	9900      	ldr	r1, [sp, #0]
 8007f7c:	428b      	cmp	r3, r1
 8007f7e:	da6e      	bge.n	800805e <__kernel_rem_pio2+0x36e>
 8007f80:	2a00      	cmp	r2, #0
 8007f82:	f000 8089 	beq.w	8008098 <__kernel_rem_pio2+0x3a8>
 8007f86:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f8a:	ab0c      	add	r3, sp, #48	@ 0x30
 8007f8c:	f1ab 0b18 	sub.w	fp, fp, #24
 8007f90:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d0f6      	beq.n	8007f86 <__kernel_rem_pio2+0x296>
 8007f98:	4658      	mov	r0, fp
 8007f9a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8007ff8 <__kernel_rem_pio2+0x308>
 8007f9e:	f7ff fdeb 	bl	8007b78 <scalbn>
 8007fa2:	f108 0301 	add.w	r3, r8, #1
 8007fa6:	00da      	lsls	r2, r3, #3
 8007fa8:	9205      	str	r2, [sp, #20]
 8007faa:	ec55 4b10 	vmov	r4, r5, d0
 8007fae:	aa70      	add	r2, sp, #448	@ 0x1c0
 8007fb0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800800c <__kernel_rem_pio2+0x31c>
 8007fb4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8007fb8:	4646      	mov	r6, r8
 8007fba:	f04f 0a00 	mov.w	sl, #0
 8007fbe:	2e00      	cmp	r6, #0
 8007fc0:	f280 80cf 	bge.w	8008162 <__kernel_rem_pio2+0x472>
 8007fc4:	4644      	mov	r4, r8
 8007fc6:	2c00      	cmp	r4, #0
 8007fc8:	f2c0 80fd 	blt.w	80081c6 <__kernel_rem_pio2+0x4d6>
 8007fcc:	4b12      	ldr	r3, [pc, #72]	@ (8008018 <__kernel_rem_pio2+0x328>)
 8007fce:	461f      	mov	r7, r3
 8007fd0:	ab70      	add	r3, sp, #448	@ 0x1c0
 8007fd2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007fd6:	9306      	str	r3, [sp, #24]
 8007fd8:	f04f 0a00 	mov.w	sl, #0
 8007fdc:	f04f 0b00 	mov.w	fp, #0
 8007fe0:	2600      	movs	r6, #0
 8007fe2:	eba8 0504 	sub.w	r5, r8, r4
 8007fe6:	e0e2      	b.n	80081ae <__kernel_rem_pio2+0x4be>
 8007fe8:	f04f 0902 	mov.w	r9, #2
 8007fec:	e754      	b.n	8007e98 <__kernel_rem_pio2+0x1a8>
 8007fee:	bf00      	nop
	...
 8007ffc:	3ff00000 	.word	0x3ff00000
 8008000:	080086c0 	.word	0x080086c0
 8008004:	40200000 	.word	0x40200000
 8008008:	3ff00000 	.word	0x3ff00000
 800800c:	3e700000 	.word	0x3e700000
 8008010:	41700000 	.word	0x41700000
 8008014:	3fe00000 	.word	0x3fe00000
 8008018:	08008680 	.word	0x08008680
 800801c:	f854 3b04 	ldr.w	r3, [r4], #4
 8008020:	b945      	cbnz	r5, 8008034 <__kernel_rem_pio2+0x344>
 8008022:	b123      	cbz	r3, 800802e <__kernel_rem_pio2+0x33e>
 8008024:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8008028:	f844 3c04 	str.w	r3, [r4, #-4]
 800802c:	2301      	movs	r3, #1
 800802e:	3201      	adds	r2, #1
 8008030:	461d      	mov	r5, r3
 8008032:	e738      	b.n	8007ea6 <__kernel_rem_pio2+0x1b6>
 8008034:	1acb      	subs	r3, r1, r3
 8008036:	e7f7      	b.n	8008028 <__kernel_rem_pio2+0x338>
 8008038:	f108 32ff 	add.w	r2, r8, #4294967295
 800803c:	ab0c      	add	r3, sp, #48	@ 0x30
 800803e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008042:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008046:	a90c      	add	r1, sp, #48	@ 0x30
 8008048:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800804c:	e739      	b.n	8007ec2 <__kernel_rem_pio2+0x1d2>
 800804e:	f108 32ff 	add.w	r2, r8, #4294967295
 8008052:	ab0c      	add	r3, sp, #48	@ 0x30
 8008054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008058:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800805c:	e7f3      	b.n	8008046 <__kernel_rem_pio2+0x356>
 800805e:	a90c      	add	r1, sp, #48	@ 0x30
 8008060:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008064:	3b01      	subs	r3, #1
 8008066:	430a      	orrs	r2, r1
 8008068:	e787      	b.n	8007f7a <__kernel_rem_pio2+0x28a>
 800806a:	3401      	adds	r4, #1
 800806c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008070:	2a00      	cmp	r2, #0
 8008072:	d0fa      	beq.n	800806a <__kernel_rem_pio2+0x37a>
 8008074:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008076:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800807a:	eb0d 0503 	add.w	r5, sp, r3
 800807e:	9b06      	ldr	r3, [sp, #24]
 8008080:	aa20      	add	r2, sp, #128	@ 0x80
 8008082:	4443      	add	r3, r8
 8008084:	f108 0701 	add.w	r7, r8, #1
 8008088:	3d98      	subs	r5, #152	@ 0x98
 800808a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800808e:	4444      	add	r4, r8
 8008090:	42bc      	cmp	r4, r7
 8008092:	da04      	bge.n	800809e <__kernel_rem_pio2+0x3ae>
 8008094:	46a0      	mov	r8, r4
 8008096:	e6a2      	b.n	8007dde <__kernel_rem_pio2+0xee>
 8008098:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800809a:	2401      	movs	r4, #1
 800809c:	e7e6      	b.n	800806c <__kernel_rem_pio2+0x37c>
 800809e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080a0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80080a4:	f7f8 fa02 	bl	80004ac <__aeabi_i2d>
 80080a8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8008370 <__kernel_rem_pio2+0x680>
 80080ac:	e8e6 0102 	strd	r0, r1, [r6], #8
 80080b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80080b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80080b8:	46b2      	mov	sl, r6
 80080ba:	f04f 0800 	mov.w	r8, #0
 80080be:	9b05      	ldr	r3, [sp, #20]
 80080c0:	4598      	cmp	r8, r3
 80080c2:	dd05      	ble.n	80080d0 <__kernel_rem_pio2+0x3e0>
 80080c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80080c8:	3701      	adds	r7, #1
 80080ca:	eca5 7b02 	vstmia	r5!, {d7}
 80080ce:	e7df      	b.n	8008090 <__kernel_rem_pio2+0x3a0>
 80080d0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80080d4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80080d8:	f7f8 fa52 	bl	8000580 <__aeabi_dmul>
 80080dc:	4602      	mov	r2, r0
 80080de:	460b      	mov	r3, r1
 80080e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080e4:	f7f8 f896 	bl	8000214 <__adddf3>
 80080e8:	f108 0801 	add.w	r8, r8, #1
 80080ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080f0:	e7e5      	b.n	80080be <__kernel_rem_pio2+0x3ce>
 80080f2:	f1cb 0000 	rsb	r0, fp, #0
 80080f6:	ec47 6b10 	vmov	d0, r6, r7
 80080fa:	f7ff fd3d 	bl	8007b78 <scalbn>
 80080fe:	ec55 4b10 	vmov	r4, r5, d0
 8008102:	4b9d      	ldr	r3, [pc, #628]	@ (8008378 <__kernel_rem_pio2+0x688>)
 8008104:	2200      	movs	r2, #0
 8008106:	4620      	mov	r0, r4
 8008108:	4629      	mov	r1, r5
 800810a:	f7f8 fcbf 	bl	8000a8c <__aeabi_dcmpge>
 800810e:	b300      	cbz	r0, 8008152 <__kernel_rem_pio2+0x462>
 8008110:	4b9a      	ldr	r3, [pc, #616]	@ (800837c <__kernel_rem_pio2+0x68c>)
 8008112:	2200      	movs	r2, #0
 8008114:	4620      	mov	r0, r4
 8008116:	4629      	mov	r1, r5
 8008118:	f7f8 fa32 	bl	8000580 <__aeabi_dmul>
 800811c:	f7f8 fce0 	bl	8000ae0 <__aeabi_d2iz>
 8008120:	4606      	mov	r6, r0
 8008122:	f7f8 f9c3 	bl	80004ac <__aeabi_i2d>
 8008126:	4b94      	ldr	r3, [pc, #592]	@ (8008378 <__kernel_rem_pio2+0x688>)
 8008128:	2200      	movs	r2, #0
 800812a:	f7f8 fa29 	bl	8000580 <__aeabi_dmul>
 800812e:	460b      	mov	r3, r1
 8008130:	4602      	mov	r2, r0
 8008132:	4629      	mov	r1, r5
 8008134:	4620      	mov	r0, r4
 8008136:	f7f8 f86b 	bl	8000210 <__aeabi_dsub>
 800813a:	f7f8 fcd1 	bl	8000ae0 <__aeabi_d2iz>
 800813e:	ab0c      	add	r3, sp, #48	@ 0x30
 8008140:	f10b 0b18 	add.w	fp, fp, #24
 8008144:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8008148:	f108 0801 	add.w	r8, r8, #1
 800814c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8008150:	e722      	b.n	8007f98 <__kernel_rem_pio2+0x2a8>
 8008152:	4620      	mov	r0, r4
 8008154:	4629      	mov	r1, r5
 8008156:	f7f8 fcc3 	bl	8000ae0 <__aeabi_d2iz>
 800815a:	ab0c      	add	r3, sp, #48	@ 0x30
 800815c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8008160:	e71a      	b.n	8007f98 <__kernel_rem_pio2+0x2a8>
 8008162:	ab0c      	add	r3, sp, #48	@ 0x30
 8008164:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008168:	f7f8 f9a0 	bl	80004ac <__aeabi_i2d>
 800816c:	4622      	mov	r2, r4
 800816e:	462b      	mov	r3, r5
 8008170:	f7f8 fa06 	bl	8000580 <__aeabi_dmul>
 8008174:	4652      	mov	r2, sl
 8008176:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800817a:	465b      	mov	r3, fp
 800817c:	4620      	mov	r0, r4
 800817e:	4629      	mov	r1, r5
 8008180:	f7f8 f9fe 	bl	8000580 <__aeabi_dmul>
 8008184:	3e01      	subs	r6, #1
 8008186:	4604      	mov	r4, r0
 8008188:	460d      	mov	r5, r1
 800818a:	e718      	b.n	8007fbe <__kernel_rem_pio2+0x2ce>
 800818c:	9906      	ldr	r1, [sp, #24]
 800818e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8008192:	9106      	str	r1, [sp, #24]
 8008194:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8008198:	f7f8 f9f2 	bl	8000580 <__aeabi_dmul>
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	4650      	mov	r0, sl
 80081a2:	4659      	mov	r1, fp
 80081a4:	f7f8 f836 	bl	8000214 <__adddf3>
 80081a8:	3601      	adds	r6, #1
 80081aa:	4682      	mov	sl, r0
 80081ac:	468b      	mov	fp, r1
 80081ae:	9b00      	ldr	r3, [sp, #0]
 80081b0:	429e      	cmp	r6, r3
 80081b2:	dc01      	bgt.n	80081b8 <__kernel_rem_pio2+0x4c8>
 80081b4:	42b5      	cmp	r5, r6
 80081b6:	dae9      	bge.n	800818c <__kernel_rem_pio2+0x49c>
 80081b8:	ab48      	add	r3, sp, #288	@ 0x120
 80081ba:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80081be:	e9c5 ab00 	strd	sl, fp, [r5]
 80081c2:	3c01      	subs	r4, #1
 80081c4:	e6ff      	b.n	8007fc6 <__kernel_rem_pio2+0x2d6>
 80081c6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80081c8:	2b02      	cmp	r3, #2
 80081ca:	dc0b      	bgt.n	80081e4 <__kernel_rem_pio2+0x4f4>
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	dc39      	bgt.n	8008244 <__kernel_rem_pio2+0x554>
 80081d0:	d05d      	beq.n	800828e <__kernel_rem_pio2+0x59e>
 80081d2:	9b02      	ldr	r3, [sp, #8]
 80081d4:	f003 0007 	and.w	r0, r3, #7
 80081d8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80081dc:	ecbd 8b02 	vpop	{d8}
 80081e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081e4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80081e6:	2b03      	cmp	r3, #3
 80081e8:	d1f3      	bne.n	80081d2 <__kernel_rem_pio2+0x4e2>
 80081ea:	9b05      	ldr	r3, [sp, #20]
 80081ec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80081f0:	eb0d 0403 	add.w	r4, sp, r3
 80081f4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80081f8:	4625      	mov	r5, r4
 80081fa:	46c2      	mov	sl, r8
 80081fc:	f1ba 0f00 	cmp.w	sl, #0
 8008200:	f1a5 0508 	sub.w	r5, r5, #8
 8008204:	dc6b      	bgt.n	80082de <__kernel_rem_pio2+0x5ee>
 8008206:	4645      	mov	r5, r8
 8008208:	2d01      	cmp	r5, #1
 800820a:	f1a4 0408 	sub.w	r4, r4, #8
 800820e:	f300 8087 	bgt.w	8008320 <__kernel_rem_pio2+0x630>
 8008212:	9c05      	ldr	r4, [sp, #20]
 8008214:	ab48      	add	r3, sp, #288	@ 0x120
 8008216:	441c      	add	r4, r3
 8008218:	2000      	movs	r0, #0
 800821a:	2100      	movs	r1, #0
 800821c:	f1b8 0f01 	cmp.w	r8, #1
 8008220:	f300 809c 	bgt.w	800835c <__kernel_rem_pio2+0x66c>
 8008224:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8008228:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800822c:	f1b9 0f00 	cmp.w	r9, #0
 8008230:	f040 80a6 	bne.w	8008380 <__kernel_rem_pio2+0x690>
 8008234:	9b04      	ldr	r3, [sp, #16]
 8008236:	e9c3 7800 	strd	r7, r8, [r3]
 800823a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800823e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008242:	e7c6      	b.n	80081d2 <__kernel_rem_pio2+0x4e2>
 8008244:	9d05      	ldr	r5, [sp, #20]
 8008246:	ab48      	add	r3, sp, #288	@ 0x120
 8008248:	441d      	add	r5, r3
 800824a:	4644      	mov	r4, r8
 800824c:	2000      	movs	r0, #0
 800824e:	2100      	movs	r1, #0
 8008250:	2c00      	cmp	r4, #0
 8008252:	da35      	bge.n	80082c0 <__kernel_rem_pio2+0x5d0>
 8008254:	f1b9 0f00 	cmp.w	r9, #0
 8008258:	d038      	beq.n	80082cc <__kernel_rem_pio2+0x5dc>
 800825a:	4602      	mov	r2, r0
 800825c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008260:	9c04      	ldr	r4, [sp, #16]
 8008262:	e9c4 2300 	strd	r2, r3, [r4]
 8008266:	4602      	mov	r2, r0
 8008268:	460b      	mov	r3, r1
 800826a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800826e:	f7f7 ffcf 	bl	8000210 <__aeabi_dsub>
 8008272:	ad4a      	add	r5, sp, #296	@ 0x128
 8008274:	2401      	movs	r4, #1
 8008276:	45a0      	cmp	r8, r4
 8008278:	da2b      	bge.n	80082d2 <__kernel_rem_pio2+0x5e2>
 800827a:	f1b9 0f00 	cmp.w	r9, #0
 800827e:	d002      	beq.n	8008286 <__kernel_rem_pio2+0x596>
 8008280:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008284:	4619      	mov	r1, r3
 8008286:	9b04      	ldr	r3, [sp, #16]
 8008288:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800828c:	e7a1      	b.n	80081d2 <__kernel_rem_pio2+0x4e2>
 800828e:	9c05      	ldr	r4, [sp, #20]
 8008290:	ab48      	add	r3, sp, #288	@ 0x120
 8008292:	441c      	add	r4, r3
 8008294:	2000      	movs	r0, #0
 8008296:	2100      	movs	r1, #0
 8008298:	f1b8 0f00 	cmp.w	r8, #0
 800829c:	da09      	bge.n	80082b2 <__kernel_rem_pio2+0x5c2>
 800829e:	f1b9 0f00 	cmp.w	r9, #0
 80082a2:	d002      	beq.n	80082aa <__kernel_rem_pio2+0x5ba>
 80082a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80082a8:	4619      	mov	r1, r3
 80082aa:	9b04      	ldr	r3, [sp, #16]
 80082ac:	e9c3 0100 	strd	r0, r1, [r3]
 80082b0:	e78f      	b.n	80081d2 <__kernel_rem_pio2+0x4e2>
 80082b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80082b6:	f7f7 ffad 	bl	8000214 <__adddf3>
 80082ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80082be:	e7eb      	b.n	8008298 <__kernel_rem_pio2+0x5a8>
 80082c0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80082c4:	f7f7 ffa6 	bl	8000214 <__adddf3>
 80082c8:	3c01      	subs	r4, #1
 80082ca:	e7c1      	b.n	8008250 <__kernel_rem_pio2+0x560>
 80082cc:	4602      	mov	r2, r0
 80082ce:	460b      	mov	r3, r1
 80082d0:	e7c6      	b.n	8008260 <__kernel_rem_pio2+0x570>
 80082d2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80082d6:	f7f7 ff9d 	bl	8000214 <__adddf3>
 80082da:	3401      	adds	r4, #1
 80082dc:	e7cb      	b.n	8008276 <__kernel_rem_pio2+0x586>
 80082de:	ed95 7b00 	vldr	d7, [r5]
 80082e2:	ed8d 7b00 	vstr	d7, [sp]
 80082e6:	ed95 7b02 	vldr	d7, [r5, #8]
 80082ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082ee:	ec53 2b17 	vmov	r2, r3, d7
 80082f2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80082f6:	f7f7 ff8d 	bl	8000214 <__adddf3>
 80082fa:	4602      	mov	r2, r0
 80082fc:	460b      	mov	r3, r1
 80082fe:	4606      	mov	r6, r0
 8008300:	460f      	mov	r7, r1
 8008302:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008306:	f7f7 ff83 	bl	8000210 <__aeabi_dsub>
 800830a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800830e:	f7f7 ff81 	bl	8000214 <__adddf3>
 8008312:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008316:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800831a:	e9c5 6700 	strd	r6, r7, [r5]
 800831e:	e76d      	b.n	80081fc <__kernel_rem_pio2+0x50c>
 8008320:	ed94 7b00 	vldr	d7, [r4]
 8008324:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8008328:	ec51 0b17 	vmov	r0, r1, d7
 800832c:	4652      	mov	r2, sl
 800832e:	465b      	mov	r3, fp
 8008330:	ed8d 7b00 	vstr	d7, [sp]
 8008334:	f7f7 ff6e 	bl	8000214 <__adddf3>
 8008338:	4602      	mov	r2, r0
 800833a:	460b      	mov	r3, r1
 800833c:	4606      	mov	r6, r0
 800833e:	460f      	mov	r7, r1
 8008340:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008344:	f7f7 ff64 	bl	8000210 <__aeabi_dsub>
 8008348:	4652      	mov	r2, sl
 800834a:	465b      	mov	r3, fp
 800834c:	f7f7 ff62 	bl	8000214 <__adddf3>
 8008350:	3d01      	subs	r5, #1
 8008352:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008356:	e9c4 6700 	strd	r6, r7, [r4]
 800835a:	e755      	b.n	8008208 <__kernel_rem_pio2+0x518>
 800835c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008360:	f7f7 ff58 	bl	8000214 <__adddf3>
 8008364:	f108 38ff 	add.w	r8, r8, #4294967295
 8008368:	e758      	b.n	800821c <__kernel_rem_pio2+0x52c>
 800836a:	bf00      	nop
 800836c:	f3af 8000 	nop.w
	...
 8008378:	41700000 	.word	0x41700000
 800837c:	3e700000 	.word	0x3e700000
 8008380:	9b04      	ldr	r3, [sp, #16]
 8008382:	9a04      	ldr	r2, [sp, #16]
 8008384:	601f      	str	r7, [r3, #0]
 8008386:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800838a:	605c      	str	r4, [r3, #4]
 800838c:	609d      	str	r5, [r3, #8]
 800838e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008392:	60d3      	str	r3, [r2, #12]
 8008394:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008398:	6110      	str	r0, [r2, #16]
 800839a:	6153      	str	r3, [r2, #20]
 800839c:	e719      	b.n	80081d2 <__kernel_rem_pio2+0x4e2>
 800839e:	bf00      	nop

080083a0 <floor>:
 80083a0:	ec51 0b10 	vmov	r0, r1, d0
 80083a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80083a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083ac:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80083b0:	2e13      	cmp	r6, #19
 80083b2:	460c      	mov	r4, r1
 80083b4:	4605      	mov	r5, r0
 80083b6:	4680      	mov	r8, r0
 80083b8:	dc34      	bgt.n	8008424 <floor+0x84>
 80083ba:	2e00      	cmp	r6, #0
 80083bc:	da17      	bge.n	80083ee <floor+0x4e>
 80083be:	a332      	add	r3, pc, #200	@ (adr r3, 8008488 <floor+0xe8>)
 80083c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c4:	f7f7 ff26 	bl	8000214 <__adddf3>
 80083c8:	2200      	movs	r2, #0
 80083ca:	2300      	movs	r3, #0
 80083cc:	f7f8 fb68 	bl	8000aa0 <__aeabi_dcmpgt>
 80083d0:	b150      	cbz	r0, 80083e8 <floor+0x48>
 80083d2:	2c00      	cmp	r4, #0
 80083d4:	da55      	bge.n	8008482 <floor+0xe2>
 80083d6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80083da:	432c      	orrs	r4, r5
 80083dc:	2500      	movs	r5, #0
 80083de:	42ac      	cmp	r4, r5
 80083e0:	4c2b      	ldr	r4, [pc, #172]	@ (8008490 <floor+0xf0>)
 80083e2:	bf08      	it	eq
 80083e4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80083e8:	4621      	mov	r1, r4
 80083ea:	4628      	mov	r0, r5
 80083ec:	e023      	b.n	8008436 <floor+0x96>
 80083ee:	4f29      	ldr	r7, [pc, #164]	@ (8008494 <floor+0xf4>)
 80083f0:	4137      	asrs	r7, r6
 80083f2:	ea01 0307 	and.w	r3, r1, r7
 80083f6:	4303      	orrs	r3, r0
 80083f8:	d01d      	beq.n	8008436 <floor+0x96>
 80083fa:	a323      	add	r3, pc, #140	@ (adr r3, 8008488 <floor+0xe8>)
 80083fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008400:	f7f7 ff08 	bl	8000214 <__adddf3>
 8008404:	2200      	movs	r2, #0
 8008406:	2300      	movs	r3, #0
 8008408:	f7f8 fb4a 	bl	8000aa0 <__aeabi_dcmpgt>
 800840c:	2800      	cmp	r0, #0
 800840e:	d0eb      	beq.n	80083e8 <floor+0x48>
 8008410:	2c00      	cmp	r4, #0
 8008412:	bfbe      	ittt	lt
 8008414:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8008418:	4133      	asrlt	r3, r6
 800841a:	18e4      	addlt	r4, r4, r3
 800841c:	ea24 0407 	bic.w	r4, r4, r7
 8008420:	2500      	movs	r5, #0
 8008422:	e7e1      	b.n	80083e8 <floor+0x48>
 8008424:	2e33      	cmp	r6, #51	@ 0x33
 8008426:	dd0a      	ble.n	800843e <floor+0x9e>
 8008428:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800842c:	d103      	bne.n	8008436 <floor+0x96>
 800842e:	4602      	mov	r2, r0
 8008430:	460b      	mov	r3, r1
 8008432:	f7f7 feef 	bl	8000214 <__adddf3>
 8008436:	ec41 0b10 	vmov	d0, r0, r1
 800843a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800843e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8008442:	f04f 37ff 	mov.w	r7, #4294967295
 8008446:	40df      	lsrs	r7, r3
 8008448:	4207      	tst	r7, r0
 800844a:	d0f4      	beq.n	8008436 <floor+0x96>
 800844c:	a30e      	add	r3, pc, #56	@ (adr r3, 8008488 <floor+0xe8>)
 800844e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008452:	f7f7 fedf 	bl	8000214 <__adddf3>
 8008456:	2200      	movs	r2, #0
 8008458:	2300      	movs	r3, #0
 800845a:	f7f8 fb21 	bl	8000aa0 <__aeabi_dcmpgt>
 800845e:	2800      	cmp	r0, #0
 8008460:	d0c2      	beq.n	80083e8 <floor+0x48>
 8008462:	2c00      	cmp	r4, #0
 8008464:	da0a      	bge.n	800847c <floor+0xdc>
 8008466:	2e14      	cmp	r6, #20
 8008468:	d101      	bne.n	800846e <floor+0xce>
 800846a:	3401      	adds	r4, #1
 800846c:	e006      	b.n	800847c <floor+0xdc>
 800846e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8008472:	2301      	movs	r3, #1
 8008474:	40b3      	lsls	r3, r6
 8008476:	441d      	add	r5, r3
 8008478:	4545      	cmp	r5, r8
 800847a:	d3f6      	bcc.n	800846a <floor+0xca>
 800847c:	ea25 0507 	bic.w	r5, r5, r7
 8008480:	e7b2      	b.n	80083e8 <floor+0x48>
 8008482:	2500      	movs	r5, #0
 8008484:	462c      	mov	r4, r5
 8008486:	e7af      	b.n	80083e8 <floor+0x48>
 8008488:	8800759c 	.word	0x8800759c
 800848c:	7e37e43c 	.word	0x7e37e43c
 8008490:	bff00000 	.word	0xbff00000
 8008494:	000fffff 	.word	0x000fffff

08008498 <_init>:
 8008498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800849a:	bf00      	nop
 800849c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800849e:	bc08      	pop	{r3}
 80084a0:	469e      	mov	lr, r3
 80084a2:	4770      	bx	lr

080084a4 <_fini>:
 80084a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084a6:	bf00      	nop
 80084a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084aa:	bc08      	pop	{r3}
 80084ac:	469e      	mov	lr, r3
 80084ae:	4770      	bx	lr
