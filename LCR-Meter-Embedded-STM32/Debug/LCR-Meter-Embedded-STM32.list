
LCR-Meter-Embedded-STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acb0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000890  0800ae80  0800ae80  0000be80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b710  0800b710  0000d1f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b710  0800b710  0000c710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b718  0800b718  0000d1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b718  0800b718  0000c718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b71c  0800b71c  0000c71c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800b720  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022fc  200001f0  0800b910  0000d1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200024ec  0800b910  0000d4ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001108d  00000000  00000000  0000d220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002de7  00000000  00000000  0001e2ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  00021098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cc0  00000000  00000000  00022120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000250b7  00000000  00000000  00022de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014fca  00000000  00000000  00047e97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0290  00000000  00000000  0005ce61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013d0f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059d0  00000000  00000000  0013d134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00142b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ae68 	.word	0x0800ae68

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	0800ae68 	.word	0x0800ae68

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b98a 	b.w	8000fb4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f826 	bl	8000cf8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_f2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	f7ff fc65 	bl	8000588 <__aeabi_f2d>
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf0 <__aeabi_f2ulz+0x38>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	4606      	mov	r6, r0
 8000cc4:	460f      	mov	r7, r1
 8000cc6:	f7ff fcb7 	bl	8000638 <__aeabi_dmul>
 8000cca:	f000 f975 	bl	8000fb8 <__aeabi_d2uiz>
 8000cce:	4604      	mov	r4, r0
 8000cd0:	f7ff fc38 	bl	8000544 <__aeabi_ui2d>
 8000cd4:	4b07      	ldr	r3, [pc, #28]	@ (8000cf4 <__aeabi_f2ulz+0x3c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f7ff fcae 	bl	8000638 <__aeabi_dmul>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	460b      	mov	r3, r1
 8000ce0:	4630      	mov	r0, r6
 8000ce2:	4639      	mov	r1, r7
 8000ce4:	f7ff faf0 	bl	80002c8 <__aeabi_dsub>
 8000ce8:	f000 f966 	bl	8000fb8 <__aeabi_d2uiz>
 8000cec:	4621      	mov	r1, r4
 8000cee:	bdd0      	pop	{r4, r6, r7, pc}
 8000cf0:	3df00000 	.word	0x3df00000
 8000cf4:	41f00000 	.word	0x41f00000

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	460c      	mov	r4, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14e      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d04:	4694      	mov	ip, r2
 8000d06:	458c      	cmp	ip, r1
 8000d08:	4686      	mov	lr, r0
 8000d0a:	fab2 f282 	clz	r2, r2
 8000d0e:	d962      	bls.n	8000dd6 <__udivmoddi4+0xde>
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0320 	rsb	r3, r2, #32
 8000d16:	4091      	lsls	r1, r2
 8000d18:	fa20 f303 	lsr.w	r3, r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	4319      	orrs	r1, r3
 8000d22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2a:	fa1f f68c 	uxth.w	r6, ip
 8000d2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb07 1114 	mls	r1, r7, r4, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb04 f106 	mul.w	r1, r4, r6
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d4e:	f080 8112 	bcs.w	8000f76 <__udivmoddi4+0x27e>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 810f 	bls.w	8000f76 <__udivmoddi4+0x27e>
 8000d58:	3c02      	subs	r4, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a59      	subs	r1, r3, r1
 8000d5e:	fa1f f38e 	uxth.w	r3, lr
 8000d62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d66:	fb07 1110 	mls	r1, r7, r0, r1
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb00 f606 	mul.w	r6, r0, r6
 8000d72:	429e      	cmp	r6, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x94>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d7e:	f080 80fc 	bcs.w	8000f7a <__udivmoddi4+0x282>
 8000d82:	429e      	cmp	r6, r3
 8000d84:	f240 80f9 	bls.w	8000f7a <__udivmoddi4+0x282>
 8000d88:	4463      	add	r3, ip
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d92:	2100      	movs	r1, #0
 8000d94:	b11d      	cbz	r5, 8000d9e <__udivmoddi4+0xa6>
 8000d96:	40d3      	lsrs	r3, r2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d905      	bls.n	8000db2 <__udivmoddi4+0xba>
 8000da6:	b10d      	cbz	r5, 8000dac <__udivmoddi4+0xb4>
 8000da8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	4608      	mov	r0, r1
 8000db0:	e7f5      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000db2:	fab3 f183 	clz	r1, r3
 8000db6:	2900      	cmp	r1, #0
 8000db8:	d146      	bne.n	8000e48 <__udivmoddi4+0x150>
 8000dba:	42a3      	cmp	r3, r4
 8000dbc:	d302      	bcc.n	8000dc4 <__udivmoddi4+0xcc>
 8000dbe:	4290      	cmp	r0, r2
 8000dc0:	f0c0 80f0 	bcc.w	8000fa4 <__udivmoddi4+0x2ac>
 8000dc4:	1a86      	subs	r6, r0, r2
 8000dc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dca:	2001      	movs	r0, #1
 8000dcc:	2d00      	cmp	r5, #0
 8000dce:	d0e6      	beq.n	8000d9e <__udivmoddi4+0xa6>
 8000dd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dd4:	e7e3      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	f040 8090 	bne.w	8000efc <__udivmoddi4+0x204>
 8000ddc:	eba1 040c 	sub.w	r4, r1, ip
 8000de0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de4:	fa1f f78c 	uxth.w	r7, ip
 8000de8:	2101      	movs	r1, #1
 8000dea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000df2:	fb08 4416 	mls	r4, r8, r6, r4
 8000df6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dfa:	fb07 f006 	mul.w	r0, r7, r6
 8000dfe:	4298      	cmp	r0, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x11c>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x11a>
 8000e0c:	4298      	cmp	r0, r3
 8000e0e:	f200 80cd 	bhi.w	8000fac <__udivmoddi4+0x2b4>
 8000e12:	4626      	mov	r6, r4
 8000e14:	1a1c      	subs	r4, r3, r0
 8000e16:	fa1f f38e 	uxth.w	r3, lr
 8000e1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb00 f707 	mul.w	r7, r0, r7
 8000e2a:	429f      	cmp	r7, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x148>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x146>
 8000e38:	429f      	cmp	r7, r3
 8000e3a:	f200 80b0 	bhi.w	8000f9e <__udivmoddi4+0x2a6>
 8000e3e:	4620      	mov	r0, r4
 8000e40:	1bdb      	subs	r3, r3, r7
 8000e42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e46:	e7a5      	b.n	8000d94 <__udivmoddi4+0x9c>
 8000e48:	f1c1 0620 	rsb	r6, r1, #32
 8000e4c:	408b      	lsls	r3, r1
 8000e4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e52:	431f      	orrs	r7, r3
 8000e54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e58:	fa04 f301 	lsl.w	r3, r4, r1
 8000e5c:	ea43 030c 	orr.w	r3, r3, ip
 8000e60:	40f4      	lsrs	r4, r6
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	0c38      	lsrs	r0, r7, #16
 8000e68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e70:	fa1f fc87 	uxth.w	ip, r7
 8000e74:	fb00 441e 	mls	r4, r0, lr, r4
 8000e78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e80:	45a1      	cmp	r9, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	d90a      	bls.n	8000e9e <__udivmoddi4+0x1a6>
 8000e88:	193c      	adds	r4, r7, r4
 8000e8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e8e:	f080 8084 	bcs.w	8000f9a <__udivmoddi4+0x2a2>
 8000e92:	45a1      	cmp	r9, r4
 8000e94:	f240 8081 	bls.w	8000f9a <__udivmoddi4+0x2a2>
 8000e98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	eba4 0409 	sub.w	r4, r4, r9
 8000ea2:	fa1f f983 	uxth.w	r9, r3
 8000ea6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eaa:	fb00 4413 	mls	r4, r0, r3, r4
 8000eae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb6:	45a4      	cmp	ip, r4
 8000eb8:	d907      	bls.n	8000eca <__udivmoddi4+0x1d2>
 8000eba:	193c      	adds	r4, r7, r4
 8000ebc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ec0:	d267      	bcs.n	8000f92 <__udivmoddi4+0x29a>
 8000ec2:	45a4      	cmp	ip, r4
 8000ec4:	d965      	bls.n	8000f92 <__udivmoddi4+0x29a>
 8000ec6:	3b02      	subs	r3, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ece:	fba0 9302 	umull	r9, r3, r0, r2
 8000ed2:	eba4 040c 	sub.w	r4, r4, ip
 8000ed6:	429c      	cmp	r4, r3
 8000ed8:	46ce      	mov	lr, r9
 8000eda:	469c      	mov	ip, r3
 8000edc:	d351      	bcc.n	8000f82 <__udivmoddi4+0x28a>
 8000ede:	d04e      	beq.n	8000f7e <__udivmoddi4+0x286>
 8000ee0:	b155      	cbz	r5, 8000ef8 <__udivmoddi4+0x200>
 8000ee2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ee6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eea:	fa04 f606 	lsl.w	r6, r4, r6
 8000eee:	40cb      	lsrs	r3, r1
 8000ef0:	431e      	orrs	r6, r3
 8000ef2:	40cc      	lsrs	r4, r1
 8000ef4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef8:	2100      	movs	r1, #0
 8000efa:	e750      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000efc:	f1c2 0320 	rsb	r3, r2, #32
 8000f00:	fa20 f103 	lsr.w	r1, r0, r3
 8000f04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f08:	fa24 f303 	lsr.w	r3, r4, r3
 8000f0c:	4094      	lsls	r4, r2
 8000f0e:	430c      	orrs	r4, r1
 8000f10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f18:	fa1f f78c 	uxth.w	r7, ip
 8000f1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f20:	fb08 3110 	mls	r1, r8, r0, r3
 8000f24:	0c23      	lsrs	r3, r4, #16
 8000f26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f2a:	fb00 f107 	mul.w	r1, r0, r7
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x24c>
 8000f32:	eb1c 0303 	adds.w	r3, ip, r3
 8000f36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f3a:	d22c      	bcs.n	8000f96 <__udivmoddi4+0x29e>
 8000f3c:	4299      	cmp	r1, r3
 8000f3e:	d92a      	bls.n	8000f96 <__udivmoddi4+0x29e>
 8000f40:	3802      	subs	r0, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	1a5b      	subs	r3, r3, r1
 8000f46:	b2a4      	uxth	r4, r4
 8000f48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f54:	fb01 f307 	mul.w	r3, r1, r7
 8000f58:	42a3      	cmp	r3, r4
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x276>
 8000f5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f64:	d213      	bcs.n	8000f8e <__udivmoddi4+0x296>
 8000f66:	42a3      	cmp	r3, r4
 8000f68:	d911      	bls.n	8000f8e <__udivmoddi4+0x296>
 8000f6a:	3902      	subs	r1, #2
 8000f6c:	4464      	add	r4, ip
 8000f6e:	1ae4      	subs	r4, r4, r3
 8000f70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f74:	e739      	b.n	8000dea <__udivmoddi4+0xf2>
 8000f76:	4604      	mov	r4, r0
 8000f78:	e6f0      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e706      	b.n	8000d8c <__udivmoddi4+0x94>
 8000f7e:	45c8      	cmp	r8, r9
 8000f80:	d2ae      	bcs.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f8a:	3801      	subs	r0, #1
 8000f8c:	e7a8      	b.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f8e:	4631      	mov	r1, r6
 8000f90:	e7ed      	b.n	8000f6e <__udivmoddi4+0x276>
 8000f92:	4603      	mov	r3, r0
 8000f94:	e799      	b.n	8000eca <__udivmoddi4+0x1d2>
 8000f96:	4630      	mov	r0, r6
 8000f98:	e7d4      	b.n	8000f44 <__udivmoddi4+0x24c>
 8000f9a:	46d6      	mov	lr, sl
 8000f9c:	e77f      	b.n	8000e9e <__udivmoddi4+0x1a6>
 8000f9e:	4463      	add	r3, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e74d      	b.n	8000e40 <__udivmoddi4+0x148>
 8000fa4:	4606      	mov	r6, r0
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e70f      	b.n	8000dcc <__udivmoddi4+0xd4>
 8000fac:	3e02      	subs	r6, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	e730      	b.n	8000e14 <__udivmoddi4+0x11c>
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <__aeabi_d2uiz>:
 8000fb8:	004a      	lsls	r2, r1, #1
 8000fba:	d211      	bcs.n	8000fe0 <__aeabi_d2uiz+0x28>
 8000fbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000fc0:	d211      	bcs.n	8000fe6 <__aeabi_d2uiz+0x2e>
 8000fc2:	d50d      	bpl.n	8000fe0 <__aeabi_d2uiz+0x28>
 8000fc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000fc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fcc:	d40e      	bmi.n	8000fec <__aeabi_d2uiz+0x34>
 8000fce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fda:	fa23 f002 	lsr.w	r0, r3, r2
 8000fde:	4770      	bx	lr
 8000fe0:	f04f 0000 	mov.w	r0, #0
 8000fe4:	4770      	bx	lr
 8000fe6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000fea:	d102      	bne.n	8000ff2 <__aeabi_d2uiz+0x3a>
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff0:	4770      	bx	lr
 8000ff2:	f04f 0000 	mov.w	r0, #0
 8000ff6:	4770      	bx	lr

08000ff8 <AD9833_write>:

// MaKE SURE THIS IS DEFINED IN THE main.c FILE
extern SPI_HandleTypeDef hspi1; // SPI handle (Assuming SPI1 is used)


void AD9833_write(uint8_t data_high, uint8_t data_low) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	460a      	mov	r2, r1
 8001002:	71fb      	strb	r3, [r7, #7]
 8001004:	4613      	mov	r3, r2
 8001006:	71bb      	strb	r3, [r7, #6]
    uint8_t data_out[2] = {data_high, data_low};
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	733b      	strb	r3, [r7, #12]
 800100c:	79bb      	ldrb	r3, [r7, #6]
 800100e:	737b      	strb	r3, [r7, #13]
    

    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;  // CPOL = 1 (Clock idle high)
 8001010:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <AD9833_write+0x5c>)
 8001012:	2202      	movs	r2, #2
 8001014:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;       // CPHA = 0 (Sample on the falling edge)
 8001016:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <AD9833_write+0x5c>)
 8001018:	2200      	movs	r2, #0
 800101a:	615a      	str	r2, [r3, #20]
    HAL_SPI_Init(&hspi1); // Restart the SPI module
 800101c:	480d      	ldr	r0, [pc, #52]	@ (8001054 <AD9833_write+0x5c>)
 800101e:	f004 feeb 	bl	8005df8 <HAL_SPI_Init>

    HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001028:	480b      	ldr	r0, [pc, #44]	@ (8001058 <AD9833_write+0x60>)
 800102a:	f004 f917 	bl	800525c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data_out, 2, HAL_MAX_DELAY);
 800102e:	f107 010c 	add.w	r1, r7, #12
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
 8001036:	2202      	movs	r2, #2
 8001038:	4806      	ldr	r0, [pc, #24]	@ (8001054 <AD9833_write+0x5c>)
 800103a:	f004 ff66 	bl	8005f0a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_SET);
 800103e:	2201      	movs	r2, #1
 8001040:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001044:	4804      	ldr	r0, [pc, #16]	@ (8001058 <AD9833_write+0x60>)
 8001046:	f004 f909 	bl	800525c <HAL_GPIO_WritePin>
}
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	2000035c 	.word	0x2000035c
 8001058:	40020000 	.word	0x40020000

0800105c <AD9833_write4>:

void AD9833_write4(uint8_t data_l_high, uint8_t data_l_low, uint8_t data_h_high, uint8_t data_h_low) {
 800105c:	b590      	push	{r4, r7, lr}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	4604      	mov	r4, r0
 8001064:	4608      	mov	r0, r1
 8001066:	4611      	mov	r1, r2
 8001068:	461a      	mov	r2, r3
 800106a:	4623      	mov	r3, r4
 800106c:	71fb      	strb	r3, [r7, #7]
 800106e:	4603      	mov	r3, r0
 8001070:	71bb      	strb	r3, [r7, #6]
 8001072:	460b      	mov	r3, r1
 8001074:	717b      	strb	r3, [r7, #5]
 8001076:	4613      	mov	r3, r2
 8001078:	713b      	strb	r3, [r7, #4]
    uint8_t data_out[4] = {data_l_high, data_l_low, data_h_high, data_h_low};
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	733b      	strb	r3, [r7, #12]
 800107e:	79bb      	ldrb	r3, [r7, #6]
 8001080:	737b      	strb	r3, [r7, #13]
 8001082:	797b      	ldrb	r3, [r7, #5]
 8001084:	73bb      	strb	r3, [r7, #14]
 8001086:	793b      	ldrb	r3, [r7, #4]
 8001088:	73fb      	strb	r3, [r7, #15]

    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;  // CPOL = 1 (Clock idle high)
 800108a:	4b10      	ldr	r3, [pc, #64]	@ (80010cc <AD9833_write4+0x70>)
 800108c:	2202      	movs	r2, #2
 800108e:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;       // CPHA = 0 (Sample on the falling edge)
 8001090:	4b0e      	ldr	r3, [pc, #56]	@ (80010cc <AD9833_write4+0x70>)
 8001092:	2200      	movs	r2, #0
 8001094:	615a      	str	r2, [r3, #20]
    HAL_SPI_Init(&hspi1); // Restart the SPI module
 8001096:	480d      	ldr	r0, [pc, #52]	@ (80010cc <AD9833_write4+0x70>)
 8001098:	f004 feae 	bl	8005df8 <HAL_SPI_Init>

    HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010a2:	480b      	ldr	r0, [pc, #44]	@ (80010d0 <AD9833_write4+0x74>)
 80010a4:	f004 f8da 	bl	800525c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data_out, 4, HAL_MAX_DELAY);
 80010a8:	f107 010c 	add.w	r1, r7, #12
 80010ac:	f04f 33ff 	mov.w	r3, #4294967295
 80010b0:	2204      	movs	r2, #4
 80010b2:	4806      	ldr	r0, [pc, #24]	@ (80010cc <AD9833_write4+0x70>)
 80010b4:	f004 ff29 	bl	8005f0a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_SET);
 80010b8:	2201      	movs	r2, #1
 80010ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010be:	4804      	ldr	r0, [pc, #16]	@ (80010d0 <AD9833_write4+0x74>)
 80010c0:	f004 f8cc 	bl	800525c <HAL_GPIO_WritePin>
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd90      	pop	{r4, r7, pc}
 80010cc:	2000035c 	.word	0x2000035c
 80010d0:	40020000 	.word	0x40020000

080010d4 <AD9833_set_freq>:

void AD9833_set_freq(float f) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	ed87 0a01 	vstr	s0, [r7, #4]
    AD9833_write(0b00100000, 0b10000000); // Control reg, start reset
 80010de:	2180      	movs	r1, #128	@ 0x80
 80010e0:	2020      	movs	r0, #32
 80010e2:	f7ff ff89 	bl	8000ff8 <AD9833_write>

    uint64_t FRQREG = (uint64_t)((f * (1 << 28)) / MASTER_CLK);
 80010e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ea:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001184 <AD9833_set_freq+0xb0>
 80010ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010f2:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001188 <AD9833_set_freq+0xb4>
 80010f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80010fa:	ee16 0a90 	vmov	r0, s13
 80010fe:	f7ff fddb 	bl	8000cb8 <__aeabi_f2ulz>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // Lower bytes
    uint16_t FL = FRQREG & 0x3FFF;
 800110a:	8a3b      	ldrh	r3, [r7, #16]
 800110c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001110:	81fb      	strh	r3, [r7, #14]
    uint8_t Llb = FL & 0xFF;
 8001112:	89fb      	ldrh	r3, [r7, #14]
 8001114:	737b      	strb	r3, [r7, #13]
    uint8_t Lhb = ((FL >> 8) & 0x3F) | 0b01000000;
 8001116:	89fb      	ldrh	r3, [r7, #14]
 8001118:	0a1b      	lsrs	r3, r3, #8
 800111a:	b29b      	uxth	r3, r3
 800111c:	b25b      	sxtb	r3, r3
 800111e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001122:	b25b      	sxtb	r3, r3
 8001124:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001128:	b25b      	sxtb	r3, r3
 800112a:	733b      	strb	r3, [r7, #12]

    // Higher bytes
    uint16_t FH = (FRQREG >> 14) & 0x3FFF;
 800112c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	f04f 0300 	mov.w	r3, #0
 8001138:	0b82      	lsrs	r2, r0, #14
 800113a:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 800113e:	0b8b      	lsrs	r3, r1, #14
 8001140:	b293      	uxth	r3, r2
 8001142:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001146:	817b      	strh	r3, [r7, #10]
    uint8_t Hlb = FH & 0xFF;
 8001148:	897b      	ldrh	r3, [r7, #10]
 800114a:	727b      	strb	r3, [r7, #9]
    uint8_t Hhb = ((FH >> 8) & 0x3F) | 0b01000000;
 800114c:	897b      	ldrh	r3, [r7, #10]
 800114e:	0a1b      	lsrs	r3, r3, #8
 8001150:	b29b      	uxth	r3, r3
 8001152:	b25b      	sxtb	r3, r3
 8001154:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001158:	b25b      	sxtb	r3, r3
 800115a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800115e:	b25b      	sxtb	r3, r3
 8001160:	723b      	strb	r3, [r7, #8]

    AD9833_write4(Lhb, Llb, Hhb, Hlb);
 8001162:	7a7b      	ldrb	r3, [r7, #9]
 8001164:	7a3a      	ldrb	r2, [r7, #8]
 8001166:	7b79      	ldrb	r1, [r7, #13]
 8001168:	7b38      	ldrb	r0, [r7, #12]
 800116a:	f7ff ff77 	bl	800105c <AD9833_write4>

    AD9833_write(0b00100000, 0b00000000); // Control reg, finish reset and configure IC
 800116e:	2100      	movs	r1, #0
 8001170:	2020      	movs	r0, #32
 8001172:	f7ff ff41 	bl	8000ff8 <AD9833_write>
    HAL_Delay(1);
 8001176:	2001      	movs	r0, #1
 8001178:	f002 fcfa 	bl	8003b70 <HAL_Delay>
}
 800117c:	bf00      	nop
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	4d800000 	.word	0x4d800000
 8001188:	4b989680 	.word	0x4b989680

0800118c <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b089      	sub	sp, #36	@ 0x24
 8001190:	af02      	add	r7, sp, #8
 8001192:	4604      	mov	r4, r0
 8001194:	4608      	mov	r0, r1
 8001196:	4611      	mov	r1, r2
 8001198:	461a      	mov	r2, r3
 800119a:	4623      	mov	r3, r4
 800119c:	71fb      	strb	r3, [r7, #7]
 800119e:	4603      	mov	r3, r0
 80011a0:	71bb      	strb	r3, [r7, #6]
 80011a2:	460b      	mov	r3, r1
 80011a4:	717b      	strb	r3, [r7, #5]
 80011a6:	4613      	mov	r3, r2
 80011a8:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 80011ae:	7dfb      	ldrb	r3, [r7, #23]
 80011b0:	2b1f      	cmp	r3, #31
 80011b2:	d802      	bhi.n	80011ba <ILI9341_Draw_Char+0x2e>
        Character = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	71fb      	strb	r3, [r7, #7]
 80011b8:	e002      	b.n	80011c0 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 80011ba:	7dfb      	ldrb	r3, [r7, #23]
 80011bc:	3b20      	subs	r3, #32
 80011be:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80011c0:	2300      	movs	r3, #0
 80011c2:	753b      	strb	r3, [r7, #20]
 80011c4:	e012      	b.n	80011ec <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 80011c6:	7dfa      	ldrb	r2, [r7, #23]
 80011c8:	7d38      	ldrb	r0, [r7, #20]
 80011ca:	7d39      	ldrb	r1, [r7, #20]
 80011cc:	4c3b      	ldr	r4, [pc, #236]	@ (80012bc <ILI9341_Draw_Char+0x130>)
 80011ce:	4613      	mov	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	4413      	add	r3, r2
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	4423      	add	r3, r4
 80011d8:	4403      	add	r3, r0
 80011da:	781a      	ldrb	r2, [r3, #0]
 80011dc:	f101 0318 	add.w	r3, r1, #24
 80011e0:	443b      	add	r3, r7
 80011e2:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80011e6:	7d3b      	ldrb	r3, [r7, #20]
 80011e8:	3301      	adds	r3, #1
 80011ea:	753b      	strb	r3, [r7, #20]
 80011ec:	7d3b      	ldrb	r3, [r7, #20]
 80011ee:	2b05      	cmp	r3, #5
 80011f0:	d9e9      	bls.n	80011c6 <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 80011f2:	79bb      	ldrb	r3, [r7, #6]
 80011f4:	b298      	uxth	r0, r3
 80011f6:	797b      	ldrb	r3, [r7, #5]
 80011f8:	b299      	uxth	r1, r3
 80011fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80011fc:	461a      	mov	r2, r3
 80011fe:	0052      	lsls	r2, r2, #1
 8001200:	4413      	add	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	b29a      	uxth	r2, r3
 8001206:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	b29c      	uxth	r4, r3
 800120c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	4623      	mov	r3, r4
 8001212:	f000 fc3d 	bl	8001a90 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8001216:	2300      	movs	r3, #0
 8001218:	757b      	strb	r3, [r7, #21]
 800121a:	e047      	b.n	80012ac <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 800121c:	2300      	movs	r3, #0
 800121e:	75bb      	strb	r3, [r7, #22]
 8001220:	e03e      	b.n	80012a0 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 8001222:	7d7b      	ldrb	r3, [r7, #21]
 8001224:	3318      	adds	r3, #24
 8001226:	443b      	add	r3, r7
 8001228:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800122c:	461a      	mov	r2, r3
 800122e:	7dbb      	ldrb	r3, [r7, #22]
 8001230:	fa42 f303 	asr.w	r3, r2, r3
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	2b00      	cmp	r3, #0
 800123a:	d02e      	beq.n	800129a <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 800123c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800123e:	2b01      	cmp	r3, #1
 8001240:	d110      	bne.n	8001264 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8001242:	79bb      	ldrb	r3, [r7, #6]
 8001244:	b29a      	uxth	r2, r3
 8001246:	7d7b      	ldrb	r3, [r7, #21]
 8001248:	b29b      	uxth	r3, r3
 800124a:	4413      	add	r3, r2
 800124c:	b298      	uxth	r0, r3
 800124e:	797b      	ldrb	r3, [r7, #5]
 8001250:	b29a      	uxth	r2, r3
 8001252:	7dbb      	ldrb	r3, [r7, #22]
 8001254:	b29b      	uxth	r3, r3
 8001256:	4413      	add	r3, r2
 8001258:	b29b      	uxth	r3, r3
 800125a:	887a      	ldrh	r2, [r7, #2]
 800125c:	4619      	mov	r1, r3
 800125e:	f000 fb4f 	bl	8001900 <ILI9341_Draw_Pixel>
 8001262:	e01a      	b.n	800129a <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8001264:	79bb      	ldrb	r3, [r7, #6]
 8001266:	b29a      	uxth	r2, r3
 8001268:	7d7b      	ldrb	r3, [r7, #21]
 800126a:	b29b      	uxth	r3, r3
 800126c:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 800126e:	fb11 f303 	smulbb	r3, r1, r3
 8001272:	b29b      	uxth	r3, r3
 8001274:	4413      	add	r3, r2
 8001276:	b298      	uxth	r0, r3
 8001278:	797b      	ldrb	r3, [r7, #5]
 800127a:	b29a      	uxth	r2, r3
 800127c:	7dbb      	ldrb	r3, [r7, #22]
 800127e:	b29b      	uxth	r3, r3
 8001280:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8001282:	fb11 f303 	smulbb	r3, r1, r3
 8001286:	b29b      	uxth	r3, r3
 8001288:	4413      	add	r3, r2
 800128a:	b299      	uxth	r1, r3
 800128c:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 800128e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001290:	887b      	ldrh	r3, [r7, #2]
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	4623      	mov	r3, r4
 8001296:	f000 fbfb 	bl	8001a90 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 800129a:	7dbb      	ldrb	r3, [r7, #22]
 800129c:	3301      	adds	r3, #1
 800129e:	75bb      	strb	r3, [r7, #22]
 80012a0:	7dbb      	ldrb	r3, [r7, #22]
 80012a2:	2b07      	cmp	r3, #7
 80012a4:	d9bd      	bls.n	8001222 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 80012a6:	7d7b      	ldrb	r3, [r7, #21]
 80012a8:	3301      	adds	r3, #1
 80012aa:	757b      	strb	r3, [r7, #21]
 80012ac:	7d7b      	ldrb	r3, [r7, #21]
 80012ae:	2b05      	cmp	r3, #5
 80012b0:	d9b4      	bls.n	800121c <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 80012b2:	bf00      	nop
 80012b4:	bf00      	nop
 80012b6:	371c      	adds	r7, #28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd90      	pop	{r4, r7, pc}
 80012bc:	0800aefc 	.word	0x0800aefc

080012c0 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af02      	add	r7, sp, #8
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	4608      	mov	r0, r1
 80012ca:	4611      	mov	r1, r2
 80012cc:	461a      	mov	r2, r3
 80012ce:	4603      	mov	r3, r0
 80012d0:	70fb      	strb	r3, [r7, #3]
 80012d2:	460b      	mov	r3, r1
 80012d4:	70bb      	strb	r3, [r7, #2]
 80012d6:	4613      	mov	r3, r2
 80012d8:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 80012da:	e017      	b.n	800130c <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	1c5a      	adds	r2, r3, #1
 80012e0:	607a      	str	r2, [r7, #4]
 80012e2:	7818      	ldrb	r0, [r3, #0]
 80012e4:	883c      	ldrh	r4, [r7, #0]
 80012e6:	78ba      	ldrb	r2, [r7, #2]
 80012e8:	78f9      	ldrb	r1, [r7, #3]
 80012ea:	8bbb      	ldrh	r3, [r7, #28]
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	8b3b      	ldrh	r3, [r7, #24]
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	4623      	mov	r3, r4
 80012f4:	f7ff ff4a 	bl	800118c <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 80012f8:	8b3b      	ldrh	r3, [r7, #24]
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	461a      	mov	r2, r3
 80012fe:	0052      	lsls	r2, r2, #1
 8001300:	4413      	add	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	b2da      	uxtb	r2, r3
 8001306:	78fb      	ldrb	r3, [r7, #3]
 8001308:	4413      	add	r3, r2
 800130a:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1e3      	bne.n	80012dc <ILI9341_Draw_Text+0x1c>
    }
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	bd90      	pop	{r4, r7, pc}
	...

08001320 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
//MX_SPI3_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8001324:	2200      	movs	r2, #0
 8001326:	2101      	movs	r1, #1
 8001328:	4802      	ldr	r0, [pc, #8]	@ (8001334 <ILI9341_SPI_Init+0x14>)
 800132a:	f003 ff97 	bl	800525c <HAL_GPIO_WritePin>
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40020800 	.word	0x40020800

08001338 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8001342:	1df9      	adds	r1, r7, #7
 8001344:	2301      	movs	r3, #1
 8001346:	2201      	movs	r2, #1
 8001348:	4803      	ldr	r0, [pc, #12]	@ (8001358 <ILI9341_SPI_Send+0x20>)
 800134a:	f004 fdde 	bl	8005f0a <HAL_SPI_Transmit>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200003b4 	.word	0x200003b4

0800135c <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	2101      	movs	r1, #1
 800136a:	480a      	ldr	r0, [pc, #40]	@ (8001394 <ILI9341_Write_Command+0x38>)
 800136c:	f003 ff76 	bl	800525c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001370:	2200      	movs	r2, #0
 8001372:	2104      	movs	r1, #4
 8001374:	4807      	ldr	r0, [pc, #28]	@ (8001394 <ILI9341_Write_Command+0x38>)
 8001376:	f003 ff71 	bl	800525c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ffdb 	bl	8001338 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001382:	2201      	movs	r2, #1
 8001384:	2101      	movs	r1, #1
 8001386:	4803      	ldr	r0, [pc, #12]	@ (8001394 <ILI9341_Write_Command+0x38>)
 8001388:	f003 ff68 	bl	800525c <HAL_GPIO_WritePin>
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40020800 	.word	0x40020800

08001398 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80013a2:	2201      	movs	r2, #1
 80013a4:	2104      	movs	r1, #4
 80013a6:	480a      	ldr	r0, [pc, #40]	@ (80013d0 <ILI9341_Write_Data+0x38>)
 80013a8:	f003 ff58 	bl	800525c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2101      	movs	r1, #1
 80013b0:	4807      	ldr	r0, [pc, #28]	@ (80013d0 <ILI9341_Write_Data+0x38>)
 80013b2:	f003 ff53 	bl	800525c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ffbd 	bl	8001338 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80013be:	2201      	movs	r2, #1
 80013c0:	2101      	movs	r1, #1
 80013c2:	4803      	ldr	r0, [pc, #12]	@ (80013d0 <ILI9341_Write_Data+0x38>)
 80013c4:	f003 ff4a 	bl	800525c <HAL_GPIO_WritePin>
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40020800 	.word	0x40020800

080013d4 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80013d4:	b590      	push	{r4, r7, lr}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4604      	mov	r4, r0
 80013dc:	4608      	mov	r0, r1
 80013de:	4611      	mov	r1, r2
 80013e0:	461a      	mov	r2, r3
 80013e2:	4623      	mov	r3, r4
 80013e4:	80fb      	strh	r3, [r7, #6]
 80013e6:	4603      	mov	r3, r0
 80013e8:	80bb      	strh	r3, [r7, #4]
 80013ea:	460b      	mov	r3, r1
 80013ec:	807b      	strh	r3, [r7, #2]
 80013ee:	4613      	mov	r3, r2
 80013f0:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 80013f2:	202a      	movs	r0, #42	@ 0x2a
 80013f4:	f7ff ffb2 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 80013f8:	88fb      	ldrh	r3, [r7, #6]
 80013fa:	0a1b      	lsrs	r3, r3, #8
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ffc9 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff ffc4 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8001410:	887b      	ldrh	r3, [r7, #2]
 8001412:	0a1b      	lsrs	r3, r3, #8
 8001414:	b29b      	uxth	r3, r3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ffbd 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 800141e:	887b      	ldrh	r3, [r7, #2]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff ffb8 	bl	8001398 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8001428:	202b      	movs	r0, #43	@ 0x2b
 800142a:	f7ff ff97 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 800142e:	88bb      	ldrh	r3, [r7, #4]
 8001430:	0a1b      	lsrs	r3, r3, #8
 8001432:	b29b      	uxth	r3, r3
 8001434:	b2db      	uxtb	r3, r3
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff ffae 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 800143c:	88bb      	ldrh	r3, [r7, #4]
 800143e:	b2db      	uxtb	r3, r3
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ffa9 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8001446:	883b      	ldrh	r3, [r7, #0]
 8001448:	0a1b      	lsrs	r3, r3, #8
 800144a:	b29b      	uxth	r3, r3
 800144c:	b2db      	uxtb	r3, r3
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff ffa2 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8001454:	883b      	ldrh	r3, [r7, #0]
 8001456:	b2db      	uxtb	r3, r3
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff9d 	bl	8001398 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 800145e:	202c      	movs	r0, #44	@ 0x2c
 8001460:	f7ff ff7c 	bl	800135c <ILI9341_Write_Command>
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	bd90      	pop	{r4, r7, pc}

0800146c <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	2102      	movs	r1, #2
 8001474:	480a      	ldr	r0, [pc, #40]	@ (80014a0 <ILI9341_Reset+0x34>)
 8001476:	f003 fef1 	bl	800525c <HAL_GPIO_WritePin>
HAL_Delay(200);
 800147a:	20c8      	movs	r0, #200	@ 0xc8
 800147c:	f002 fb78 	bl	8003b70 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001480:	2200      	movs	r2, #0
 8001482:	2101      	movs	r1, #1
 8001484:	4806      	ldr	r0, [pc, #24]	@ (80014a0 <ILI9341_Reset+0x34>)
 8001486:	f003 fee9 	bl	800525c <HAL_GPIO_WritePin>
HAL_Delay(200);
 800148a:	20c8      	movs	r0, #200	@ 0xc8
 800148c:	f002 fb70 	bl	8003b70 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8001490:	2201      	movs	r2, #1
 8001492:	2102      	movs	r1, #2
 8001494:	4802      	ldr	r0, [pc, #8]	@ (80014a0 <ILI9341_Reset+0x34>)
 8001496:	f003 fee1 	bl	800525c <HAL_GPIO_WritePin>
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40020800 	.word	0x40020800

080014a4 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80014b2:	2036      	movs	r0, #54	@ 0x36
 80014b4:	f7ff ff52 	bl	800135c <ILI9341_Write_Command>
HAL_Delay(1);
 80014b8:	2001      	movs	r0, #1
 80014ba:	f002 fb59 	bl	8003b70 <HAL_Delay>
	
switch(screen_rotation) 
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	2b03      	cmp	r3, #3
 80014c2:	d837      	bhi.n	8001534 <ILI9341_Set_Rotation+0x90>
 80014c4:	a201      	add	r2, pc, #4	@ (adr r2, 80014cc <ILI9341_Set_Rotation+0x28>)
 80014c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ca:	bf00      	nop
 80014cc:	080014dd 	.word	0x080014dd
 80014d0:	080014f3 	.word	0x080014f3
 80014d4:	08001509 	.word	0x08001509
 80014d8:	0800151f 	.word	0x0800151f
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80014dc:	2048      	movs	r0, #72	@ 0x48
 80014de:	f7ff ff5b 	bl	8001398 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 80014e2:	4b17      	ldr	r3, [pc, #92]	@ (8001540 <ILI9341_Set_Rotation+0x9c>)
 80014e4:	22f0      	movs	r2, #240	@ 0xf0
 80014e6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80014e8:	4b16      	ldr	r3, [pc, #88]	@ (8001544 <ILI9341_Set_Rotation+0xa0>)
 80014ea:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80014ee:	801a      	strh	r2, [r3, #0]
			break;
 80014f0:	e021      	b.n	8001536 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80014f2:	2028      	movs	r0, #40	@ 0x28
 80014f4:	f7ff ff50 	bl	8001398 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80014f8:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <ILI9341_Set_Rotation+0x9c>)
 80014fa:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80014fe:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001500:	4b10      	ldr	r3, [pc, #64]	@ (8001544 <ILI9341_Set_Rotation+0xa0>)
 8001502:	22f0      	movs	r2, #240	@ 0xf0
 8001504:	801a      	strh	r2, [r3, #0]
			break;
 8001506:	e016      	b.n	8001536 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8001508:	2088      	movs	r0, #136	@ 0x88
 800150a:	f7ff ff45 	bl	8001398 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 800150e:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <ILI9341_Set_Rotation+0x9c>)
 8001510:	22f0      	movs	r2, #240	@ 0xf0
 8001512:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001514:	4b0b      	ldr	r3, [pc, #44]	@ (8001544 <ILI9341_Set_Rotation+0xa0>)
 8001516:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800151a:	801a      	strh	r2, [r3, #0]
			break;
 800151c:	e00b      	b.n	8001536 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 800151e:	20e8      	movs	r0, #232	@ 0xe8
 8001520:	f7ff ff3a 	bl	8001398 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001524:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <ILI9341_Set_Rotation+0x9c>)
 8001526:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800152a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800152c:	4b05      	ldr	r3, [pc, #20]	@ (8001544 <ILI9341_Set_Rotation+0xa0>)
 800152e:	22f0      	movs	r2, #240	@ 0xf0
 8001530:	801a      	strh	r2, [r3, #0]
			break;
 8001532:	e000      	b.n	8001536 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8001534:	bf00      	nop
	}
}
 8001536:	bf00      	nop
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000002 	.word	0x20000002
 8001544:	20000000 	.word	0x20000000

08001548 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 800154c:	2201      	movs	r2, #1
 800154e:	2102      	movs	r1, #2
 8001550:	4802      	ldr	r0, [pc, #8]	@ (800155c <ILI9341_Enable+0x14>)
 8001552:	f003 fe83 	bl	800525c <HAL_GPIO_WritePin>
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40020800 	.word	0x40020800

08001560 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8001564:	f7ff fff0 	bl	8001548 <ILI9341_Enable>
ILI9341_SPI_Init();
 8001568:	f7ff feda 	bl	8001320 <ILI9341_SPI_Init>
ILI9341_Reset();
 800156c:	f7ff ff7e 	bl	800146c <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8001570:	2001      	movs	r0, #1
 8001572:	f7ff fef3 	bl	800135c <ILI9341_Write_Command>
HAL_Delay(1000);
 8001576:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800157a:	f002 faf9 	bl	8003b70 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 800157e:	20cb      	movs	r0, #203	@ 0xcb
 8001580:	f7ff feec 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8001584:	2039      	movs	r0, #57	@ 0x39
 8001586:	f7ff ff07 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 800158a:	202c      	movs	r0, #44	@ 0x2c
 800158c:	f7ff ff04 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001590:	2000      	movs	r0, #0
 8001592:	f7ff ff01 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8001596:	2034      	movs	r0, #52	@ 0x34
 8001598:	f7ff fefe 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 800159c:	2002      	movs	r0, #2
 800159e:	f7ff fefb 	bl	8001398 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80015a2:	20cf      	movs	r0, #207	@ 0xcf
 80015a4:	f7ff feda 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80015a8:	2000      	movs	r0, #0
 80015aa:	f7ff fef5 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80015ae:	20c1      	movs	r0, #193	@ 0xc1
 80015b0:	f7ff fef2 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80015b4:	2030      	movs	r0, #48	@ 0x30
 80015b6:	f7ff feef 	bl	8001398 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80015ba:	20e8      	movs	r0, #232	@ 0xe8
 80015bc:	f7ff fece 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80015c0:	2085      	movs	r0, #133	@ 0x85
 80015c2:	f7ff fee9 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80015c6:	2000      	movs	r0, #0
 80015c8:	f7ff fee6 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80015cc:	2078      	movs	r0, #120	@ 0x78
 80015ce:	f7ff fee3 	bl	8001398 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80015d2:	20ea      	movs	r0, #234	@ 0xea
 80015d4:	f7ff fec2 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80015d8:	2000      	movs	r0, #0
 80015da:	f7ff fedd 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80015de:	2000      	movs	r0, #0
 80015e0:	f7ff feda 	bl	8001398 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 80015e4:	20ed      	movs	r0, #237	@ 0xed
 80015e6:	f7ff feb9 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 80015ea:	2064      	movs	r0, #100	@ 0x64
 80015ec:	f7ff fed4 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80015f0:	2003      	movs	r0, #3
 80015f2:	f7ff fed1 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 80015f6:	2012      	movs	r0, #18
 80015f8:	f7ff fece 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 80015fc:	2081      	movs	r0, #129	@ 0x81
 80015fe:	f7ff fecb 	bl	8001398 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8001602:	20f7      	movs	r0, #247	@ 0xf7
 8001604:	f7ff feaa 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8001608:	2020      	movs	r0, #32
 800160a:	f7ff fec5 	bl	8001398 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 800160e:	20c0      	movs	r0, #192	@ 0xc0
 8001610:	f7ff fea4 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8001614:	2023      	movs	r0, #35	@ 0x23
 8001616:	f7ff febf 	bl	8001398 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 800161a:	20c1      	movs	r0, #193	@ 0xc1
 800161c:	f7ff fe9e 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8001620:	2010      	movs	r0, #16
 8001622:	f7ff feb9 	bl	8001398 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8001626:	20c5      	movs	r0, #197	@ 0xc5
 8001628:	f7ff fe98 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 800162c:	203e      	movs	r0, #62	@ 0x3e
 800162e:	f7ff feb3 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8001632:	2028      	movs	r0, #40	@ 0x28
 8001634:	f7ff feb0 	bl	8001398 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8001638:	20c7      	movs	r0, #199	@ 0xc7
 800163a:	f7ff fe8f 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 800163e:	2086      	movs	r0, #134	@ 0x86
 8001640:	f7ff feaa 	bl	8001398 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8001644:	2036      	movs	r0, #54	@ 0x36
 8001646:	f7ff fe89 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 800164a:	2048      	movs	r0, #72	@ 0x48
 800164c:	f7ff fea4 	bl	8001398 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8001650:	203a      	movs	r0, #58	@ 0x3a
 8001652:	f7ff fe83 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8001656:	2055      	movs	r0, #85	@ 0x55
 8001658:	f7ff fe9e 	bl	8001398 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 800165c:	20b1      	movs	r0, #177	@ 0xb1
 800165e:	f7ff fe7d 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001662:	2000      	movs	r0, #0
 8001664:	f7ff fe98 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8001668:	2018      	movs	r0, #24
 800166a:	f7ff fe95 	bl	8001398 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 800166e:	20b6      	movs	r0, #182	@ 0xb6
 8001670:	f7ff fe74 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8001674:	2008      	movs	r0, #8
 8001676:	f7ff fe8f 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 800167a:	2082      	movs	r0, #130	@ 0x82
 800167c:	f7ff fe8c 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8001680:	2027      	movs	r0, #39	@ 0x27
 8001682:	f7ff fe89 	bl	8001398 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8001686:	20f2      	movs	r0, #242	@ 0xf2
 8001688:	f7ff fe68 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800168c:	2000      	movs	r0, #0
 800168e:	f7ff fe83 	bl	8001398 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8001692:	2026      	movs	r0, #38	@ 0x26
 8001694:	f7ff fe62 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8001698:	2001      	movs	r0, #1
 800169a:	f7ff fe7d 	bl	8001398 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 800169e:	20e0      	movs	r0, #224	@ 0xe0
 80016a0:	f7ff fe5c 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80016a4:	200f      	movs	r0, #15
 80016a6:	f7ff fe77 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80016aa:	2031      	movs	r0, #49	@ 0x31
 80016ac:	f7ff fe74 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80016b0:	202b      	movs	r0, #43	@ 0x2b
 80016b2:	f7ff fe71 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80016b6:	200c      	movs	r0, #12
 80016b8:	f7ff fe6e 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80016bc:	200e      	movs	r0, #14
 80016be:	f7ff fe6b 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80016c2:	2008      	movs	r0, #8
 80016c4:	f7ff fe68 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80016c8:	204e      	movs	r0, #78	@ 0x4e
 80016ca:	f7ff fe65 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80016ce:	20f1      	movs	r0, #241	@ 0xf1
 80016d0:	f7ff fe62 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80016d4:	2037      	movs	r0, #55	@ 0x37
 80016d6:	f7ff fe5f 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80016da:	2007      	movs	r0, #7
 80016dc:	f7ff fe5c 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 80016e0:	2010      	movs	r0, #16
 80016e2:	f7ff fe59 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80016e6:	2003      	movs	r0, #3
 80016e8:	f7ff fe56 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80016ec:	200e      	movs	r0, #14
 80016ee:	f7ff fe53 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 80016f2:	2009      	movs	r0, #9
 80016f4:	f7ff fe50 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80016f8:	2000      	movs	r0, #0
 80016fa:	f7ff fe4d 	bl	8001398 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 80016fe:	20e1      	movs	r0, #225	@ 0xe1
 8001700:	f7ff fe2c 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001704:	2000      	movs	r0, #0
 8001706:	f7ff fe47 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800170a:	200e      	movs	r0, #14
 800170c:	f7ff fe44 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8001710:	2014      	movs	r0, #20
 8001712:	f7ff fe41 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001716:	2003      	movs	r0, #3
 8001718:	f7ff fe3e 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 800171c:	2011      	movs	r0, #17
 800171e:	f7ff fe3b 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001722:	2007      	movs	r0, #7
 8001724:	f7ff fe38 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001728:	2031      	movs	r0, #49	@ 0x31
 800172a:	f7ff fe35 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800172e:	20c1      	movs	r0, #193	@ 0xc1
 8001730:	f7ff fe32 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8001734:	2048      	movs	r0, #72	@ 0x48
 8001736:	f7ff fe2f 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800173a:	2008      	movs	r0, #8
 800173c:	f7ff fe2c 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001740:	200f      	movs	r0, #15
 8001742:	f7ff fe29 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001746:	200c      	movs	r0, #12
 8001748:	f7ff fe26 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800174c:	2031      	movs	r0, #49	@ 0x31
 800174e:	f7ff fe23 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8001752:	2036      	movs	r0, #54	@ 0x36
 8001754:	f7ff fe20 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001758:	200f      	movs	r0, #15
 800175a:	f7ff fe1d 	bl	8001398 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 800175e:	2011      	movs	r0, #17
 8001760:	f7ff fdfc 	bl	800135c <ILI9341_Write_Command>
HAL_Delay(120);
 8001764:	2078      	movs	r0, #120	@ 0x78
 8001766:	f002 fa03 	bl	8003b70 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 800176a:	2029      	movs	r0, #41	@ 0x29
 800176c:	f7ff fdf6 	bl	800135c <ILI9341_Write_Command>


//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001770:	2000      	movs	r0, #0
 8001772:	f7ff fe97 	bl	80014a4 <ILI9341_Set_Rotation>

ILI9341_Fill_Screen(BLACK);
 8001776:	2000      	movs	r0, #0
 8001778:	f000 f89c 	bl	80018b4 <ILI9341_Fill_Screen>
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}

08001780 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8001780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001784:	b08d      	sub	sp, #52	@ 0x34
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	6039      	str	r1, [r7, #0]
 800178c:	80fb      	strh	r3, [r7, #6]
 800178e:	466b      	mov	r3, sp
 8001790:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	62fb      	str	r3, [r7, #44]	@ 0x2c
if((Size*2) < BURST_MAX_SIZE)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800179e:	d202      	bcs.n	80017a6 <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017a4:	e002      	b.n	80017ac <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 80017a6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80017aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80017ac:	2201      	movs	r2, #1
 80017ae:	2104      	movs	r1, #4
 80017b0:	483e      	ldr	r0, [pc, #248]	@ (80018ac <ILI9341_Draw_Colour_Burst+0x12c>)
 80017b2:	f003 fd53 	bl	800525c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2101      	movs	r1, #1
 80017ba:	483c      	ldr	r0, [pc, #240]	@ (80018ac <ILI9341_Draw_Colour_Burst+0x12c>)
 80017bc:	f003 fd4e 	bl	800525c <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 80017c0:	88fb      	ldrh	r3, [r7, #6]
 80017c2:	0a1b      	lsrs	r3, r3, #8
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
unsigned char burst_buffer[Buffer_Size];
 80017ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80017cc:	460b      	mov	r3, r1
 80017ce:	3b01      	subs	r3, #1
 80017d0:	61fb      	str	r3, [r7, #28]
 80017d2:	2300      	movs	r3, #0
 80017d4:	4688      	mov	r8, r1
 80017d6:	4699      	mov	r9, r3
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017ec:	2300      	movs	r3, #0
 80017ee:	460c      	mov	r4, r1
 80017f0:	461d      	mov	r5, r3
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	f04f 0300 	mov.w	r3, #0
 80017fa:	00eb      	lsls	r3, r5, #3
 80017fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001800:	00e2      	lsls	r2, r4, #3
 8001802:	1dcb      	adds	r3, r1, #7
 8001804:	08db      	lsrs	r3, r3, #3
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	ebad 0d03 	sub.w	sp, sp, r3
 800180c:	466b      	mov	r3, sp
 800180e:	3300      	adds	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001812:	2300      	movs	r3, #0
 8001814:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001816:	e00e      	b.n	8001836 <ILI9341_Draw_Colour_Burst+0xb6>
	{
		burst_buffer[j] = 	chifted;
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800181c:	4413      	add	r3, r2
 800181e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001822:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8001824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001826:	3301      	adds	r3, #1
 8001828:	88fa      	ldrh	r2, [r7, #6]
 800182a:	b2d1      	uxtb	r1, r2
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001832:	3302      	adds	r3, #2
 8001834:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001836:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800183a:	429a      	cmp	r2, r3
 800183c:	d3ec      	bcc.n	8001818 <ILI9341_Draw_Colour_Burst+0x98>
	}

uint32_t Sending_Size = Size*2;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001848:	fbb2 f3f3 	udiv	r3, r2, r3
 800184c:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001852:	fbb3 f2f2 	udiv	r2, r3, r2
 8001856:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001858:	fb01 f202 	mul.w	r2, r1, r2
 800185c:	1a9b      	subs	r3, r3, r2
 800185e:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d010      	beq.n	8001888 <ILI9341_Draw_Colour_Burst+0x108>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001866:	2300      	movs	r3, #0
 8001868:	627b      	str	r3, [r7, #36]	@ 0x24
 800186a:	e009      	b.n	8001880 <ILI9341_Draw_Colour_Burst+0x100>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 800186c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800186e:	b29a      	uxth	r2, r3
 8001870:	230a      	movs	r3, #10
 8001872:	69b9      	ldr	r1, [r7, #24]
 8001874:	480e      	ldr	r0, [pc, #56]	@ (80018b0 <ILI9341_Draw_Colour_Burst+0x130>)
 8001876:	f004 fb48 	bl	8005f0a <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800187a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187c:	3301      	adds	r3, #1
 800187e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001880:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	429a      	cmp	r2, r3
 8001886:	d3f1      	bcc.n	800186c <ILI9341_Draw_Colour_Burst+0xec>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	b29a      	uxth	r2, r3
 800188c:	230a      	movs	r3, #10
 800188e:	69b9      	ldr	r1, [r7, #24]
 8001890:	4807      	ldr	r0, [pc, #28]	@ (80018b0 <ILI9341_Draw_Colour_Burst+0x130>)
 8001892:	f004 fb3a 	bl	8005f0a <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001896:	2201      	movs	r2, #1
 8001898:	2101      	movs	r1, #1
 800189a:	4804      	ldr	r0, [pc, #16]	@ (80018ac <ILI9341_Draw_Colour_Burst+0x12c>)
 800189c:	f003 fcde 	bl	800525c <HAL_GPIO_WritePin>
 80018a0:	46b5      	mov	sp, r6
}
 80018a2:	bf00      	nop
 80018a4:	3734      	adds	r7, #52	@ 0x34
 80018a6:	46bd      	mov	sp, r7
 80018a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018ac:	40020800 	.word	0x40020800
 80018b0:	200003b4 	.word	0x200003b4

080018b4 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 80018be:	4b0e      	ldr	r3, [pc, #56]	@ (80018f8 <ILI9341_Fill_Screen+0x44>)
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	4b0d      	ldr	r3, [pc, #52]	@ (80018fc <ILI9341_Fill_Screen+0x48>)
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	2100      	movs	r1, #0
 80018cc:	2000      	movs	r0, #0
 80018ce:	f7ff fd81 	bl	80013d4 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 80018d2:	4b09      	ldr	r3, [pc, #36]	@ (80018f8 <ILI9341_Fill_Screen+0x44>)
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	461a      	mov	r2, r3
 80018da:	4b08      	ldr	r3, [pc, #32]	@ (80018fc <ILI9341_Fill_Screen+0x48>)
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	fb02 f303 	mul.w	r3, r2, r3
 80018e4:	461a      	mov	r2, r3
 80018e6:	88fb      	ldrh	r3, [r7, #6]
 80018e8:	4611      	mov	r1, r2
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff ff48 	bl	8001780 <ILI9341_Draw_Colour_Burst>
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000002 	.word	0x20000002
 80018fc:	20000000 	.word	0x20000000

08001900 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	80fb      	strh	r3, [r7, #6]
 800190a:	460b      	mov	r3, r1
 800190c:	80bb      	strh	r3, [r7, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001912:	4b5b      	ldr	r3, [pc, #364]	@ (8001a80 <ILI9341_Draw_Pixel+0x180>)
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	b29b      	uxth	r3, r3
 8001918:	88fa      	ldrh	r2, [r7, #6]
 800191a:	429a      	cmp	r2, r3
 800191c:	f080 80ac 	bcs.w	8001a78 <ILI9341_Draw_Pixel+0x178>
 8001920:	4b58      	ldr	r3, [pc, #352]	@ (8001a84 <ILI9341_Draw_Pixel+0x184>)
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	b29b      	uxth	r3, r3
 8001926:	88ba      	ldrh	r2, [r7, #4]
 8001928:	429a      	cmp	r2, r3
 800192a:	f080 80a5 	bcs.w	8001a78 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800192e:	2200      	movs	r2, #0
 8001930:	2104      	movs	r1, #4
 8001932:	4855      	ldr	r0, [pc, #340]	@ (8001a88 <ILI9341_Draw_Pixel+0x188>)
 8001934:	f003 fc92 	bl	800525c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001938:	2200      	movs	r2, #0
 800193a:	2101      	movs	r1, #1
 800193c:	4852      	ldr	r0, [pc, #328]	@ (8001a88 <ILI9341_Draw_Pixel+0x188>)
 800193e:	f003 fc8d 	bl	800525c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8001942:	202a      	movs	r0, #42	@ 0x2a
 8001944:	f7ff fcf8 	bl	8001338 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001948:	2201      	movs	r2, #1
 800194a:	2104      	movs	r1, #4
 800194c:	484e      	ldr	r0, [pc, #312]	@ (8001a88 <ILI9341_Draw_Pixel+0x188>)
 800194e:	f003 fc85 	bl	800525c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001952:	2201      	movs	r2, #1
 8001954:	2101      	movs	r1, #1
 8001956:	484c      	ldr	r0, [pc, #304]	@ (8001a88 <ILI9341_Draw_Pixel+0x188>)
 8001958:	f003 fc80 	bl	800525c <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800195c:	2200      	movs	r2, #0
 800195e:	2101      	movs	r1, #1
 8001960:	4849      	ldr	r0, [pc, #292]	@ (8001a88 <ILI9341_Draw_Pixel+0x188>)
 8001962:	f003 fc7b 	bl	800525c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8001966:	88fb      	ldrh	r3, [r7, #6]
 8001968:	0a1b      	lsrs	r3, r3, #8
 800196a:	b29b      	uxth	r3, r3
 800196c:	b2db      	uxtb	r3, r3
 800196e:	753b      	strb	r3, [r7, #20]
 8001970:	88fb      	ldrh	r3, [r7, #6]
 8001972:	b2db      	uxtb	r3, r3
 8001974:	757b      	strb	r3, [r7, #21]
 8001976:	88fb      	ldrh	r3, [r7, #6]
 8001978:	3301      	adds	r3, #1
 800197a:	121b      	asrs	r3, r3, #8
 800197c:	b2db      	uxtb	r3, r3
 800197e:	75bb      	strb	r3, [r7, #22]
 8001980:	88fb      	ldrh	r3, [r7, #6]
 8001982:	b2db      	uxtb	r3, r3
 8001984:	3301      	adds	r3, #1
 8001986:	b2db      	uxtb	r3, r3
 8001988:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 800198a:	f107 0114 	add.w	r1, r7, #20
 800198e:	2301      	movs	r3, #1
 8001990:	2204      	movs	r2, #4
 8001992:	483e      	ldr	r0, [pc, #248]	@ (8001a8c <ILI9341_Draw_Pixel+0x18c>)
 8001994:	f004 fab9 	bl	8005f0a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001998:	2201      	movs	r2, #1
 800199a:	2101      	movs	r1, #1
 800199c:	483a      	ldr	r0, [pc, #232]	@ (8001a88 <ILI9341_Draw_Pixel+0x188>)
 800199e:	f003 fc5d 	bl	800525c <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80019a2:	2200      	movs	r2, #0
 80019a4:	2104      	movs	r1, #4
 80019a6:	4838      	ldr	r0, [pc, #224]	@ (8001a88 <ILI9341_Draw_Pixel+0x188>)
 80019a8:	f003 fc58 	bl	800525c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80019ac:	2200      	movs	r2, #0
 80019ae:	2101      	movs	r1, #1
 80019b0:	4835      	ldr	r0, [pc, #212]	@ (8001a88 <ILI9341_Draw_Pixel+0x188>)
 80019b2:	f003 fc53 	bl	800525c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 80019b6:	202b      	movs	r0, #43	@ 0x2b
 80019b8:	f7ff fcbe 	bl	8001338 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80019bc:	2201      	movs	r2, #1
 80019be:	2104      	movs	r1, #4
 80019c0:	4831      	ldr	r0, [pc, #196]	@ (8001a88 <ILI9341_Draw_Pixel+0x188>)
 80019c2:	f003 fc4b 	bl	800525c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80019c6:	2201      	movs	r2, #1
 80019c8:	2101      	movs	r1, #1
 80019ca:	482f      	ldr	r0, [pc, #188]	@ (8001a88 <ILI9341_Draw_Pixel+0x188>)
 80019cc:	f003 fc46 	bl	800525c <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80019d0:	2200      	movs	r2, #0
 80019d2:	2101      	movs	r1, #1
 80019d4:	482c      	ldr	r0, [pc, #176]	@ (8001a88 <ILI9341_Draw_Pixel+0x188>)
 80019d6:	f003 fc41 	bl	800525c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 80019da:	88bb      	ldrh	r3, [r7, #4]
 80019dc:	0a1b      	lsrs	r3, r3, #8
 80019de:	b29b      	uxth	r3, r3
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	743b      	strb	r3, [r7, #16]
 80019e4:	88bb      	ldrh	r3, [r7, #4]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	747b      	strb	r3, [r7, #17]
 80019ea:	88bb      	ldrh	r3, [r7, #4]
 80019ec:	3301      	adds	r3, #1
 80019ee:	121b      	asrs	r3, r3, #8
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	74bb      	strb	r3, [r7, #18]
 80019f4:	88bb      	ldrh	r3, [r7, #4]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	3301      	adds	r3, #1
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80019fe:	f107 0110 	add.w	r1, r7, #16
 8001a02:	2301      	movs	r3, #1
 8001a04:	2204      	movs	r2, #4
 8001a06:	4821      	ldr	r0, [pc, #132]	@ (8001a8c <ILI9341_Draw_Pixel+0x18c>)
 8001a08:	f004 fa7f 	bl	8005f0a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	2101      	movs	r1, #1
 8001a10:	481d      	ldr	r0, [pc, #116]	@ (8001a88 <ILI9341_Draw_Pixel+0x188>)
 8001a12:	f003 fc23 	bl	800525c <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001a16:	2200      	movs	r2, #0
 8001a18:	2104      	movs	r1, #4
 8001a1a:	481b      	ldr	r0, [pc, #108]	@ (8001a88 <ILI9341_Draw_Pixel+0x188>)
 8001a1c:	f003 fc1e 	bl	800525c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001a20:	2200      	movs	r2, #0
 8001a22:	2101      	movs	r1, #1
 8001a24:	4818      	ldr	r0, [pc, #96]	@ (8001a88 <ILI9341_Draw_Pixel+0x188>)
 8001a26:	f003 fc19 	bl	800525c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8001a2a:	202c      	movs	r0, #44	@ 0x2c
 8001a2c:	f7ff fc84 	bl	8001338 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8001a30:	2201      	movs	r2, #1
 8001a32:	2104      	movs	r1, #4
 8001a34:	4814      	ldr	r0, [pc, #80]	@ (8001a88 <ILI9341_Draw_Pixel+0x188>)
 8001a36:	f003 fc11 	bl	800525c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	4812      	ldr	r0, [pc, #72]	@ (8001a88 <ILI9341_Draw_Pixel+0x188>)
 8001a40:	f003 fc0c 	bl	800525c <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001a44:	2200      	movs	r2, #0
 8001a46:	2101      	movs	r1, #1
 8001a48:	480f      	ldr	r0, [pc, #60]	@ (8001a88 <ILI9341_Draw_Pixel+0x188>)
 8001a4a:	f003 fc07 	bl	800525c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8001a4e:	887b      	ldrh	r3, [r7, #2]
 8001a50:	0a1b      	lsrs	r3, r3, #8
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	733b      	strb	r3, [r7, #12]
 8001a58:	887b      	ldrh	r3, [r7, #2]
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8001a5e:	f107 010c 	add.w	r1, r7, #12
 8001a62:	2301      	movs	r3, #1
 8001a64:	2202      	movs	r2, #2
 8001a66:	4809      	ldr	r0, [pc, #36]	@ (8001a8c <ILI9341_Draw_Pixel+0x18c>)
 8001a68:	f004 fa4f 	bl	8005f0a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	2101      	movs	r1, #1
 8001a70:	4805      	ldr	r0, [pc, #20]	@ (8001a88 <ILI9341_Draw_Pixel+0x188>)
 8001a72:	f003 fbf3 	bl	800525c <HAL_GPIO_WritePin>
 8001a76:	e000      	b.n	8001a7a <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001a78:	bf00      	nop
	
}
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000002 	.word	0x20000002
 8001a84:	20000000 	.word	0x20000000
 8001a88:	40020800 	.word	0x40020800
 8001a8c:	200003b4 	.word	0x200003b4

08001a90 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8001a90:	b590      	push	{r4, r7, lr}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4604      	mov	r4, r0
 8001a98:	4608      	mov	r0, r1
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4623      	mov	r3, r4
 8001aa0:	80fb      	strh	r3, [r7, #6]
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	80bb      	strh	r3, [r7, #4]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	807b      	strh	r3, [r7, #2]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001aae:	4b24      	ldr	r3, [pc, #144]	@ (8001b40 <ILI9341_Draw_Rectangle+0xb0>)
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	88fa      	ldrh	r2, [r7, #6]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d23d      	bcs.n	8001b36 <ILI9341_Draw_Rectangle+0xa6>
 8001aba:	4b22      	ldr	r3, [pc, #136]	@ (8001b44 <ILI9341_Draw_Rectangle+0xb4>)
 8001abc:	881b      	ldrh	r3, [r3, #0]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	88ba      	ldrh	r2, [r7, #4]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d237      	bcs.n	8001b36 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8001ac6:	88fa      	ldrh	r2, [r7, #6]
 8001ac8:	887b      	ldrh	r3, [r7, #2]
 8001aca:	4413      	add	r3, r2
 8001acc:	4a1c      	ldr	r2, [pc, #112]	@ (8001b40 <ILI9341_Draw_Rectangle+0xb0>)
 8001ace:	8812      	ldrh	r2, [r2, #0]
 8001ad0:	b292      	uxth	r2, r2
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	dd05      	ble.n	8001ae2 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b40 <ILI9341_Draw_Rectangle+0xb0>)
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	88fb      	ldrh	r3, [r7, #6]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8001ae2:	88ba      	ldrh	r2, [r7, #4]
 8001ae4:	883b      	ldrh	r3, [r7, #0]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	4a16      	ldr	r2, [pc, #88]	@ (8001b44 <ILI9341_Draw_Rectangle+0xb4>)
 8001aea:	8812      	ldrh	r2, [r2, #0]
 8001aec:	b292      	uxth	r2, r2
 8001aee:	4293      	cmp	r3, r2
 8001af0:	dd05      	ble.n	8001afe <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8001af2:	4b14      	ldr	r3, [pc, #80]	@ (8001b44 <ILI9341_Draw_Rectangle+0xb4>)
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	88bb      	ldrh	r3, [r7, #4]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8001afe:	88fa      	ldrh	r2, [r7, #6]
 8001b00:	887b      	ldrh	r3, [r7, #2]
 8001b02:	4413      	add	r3, r2
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	3b01      	subs	r3, #1
 8001b08:	b29c      	uxth	r4, r3
 8001b0a:	88ba      	ldrh	r2, [r7, #4]
 8001b0c:	883b      	ldrh	r3, [r7, #0]
 8001b0e:	4413      	add	r3, r2
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	3b01      	subs	r3, #1
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	88b9      	ldrh	r1, [r7, #4]
 8001b18:	88f8      	ldrh	r0, [r7, #6]
 8001b1a:	4622      	mov	r2, r4
 8001b1c:	f7ff fc5a 	bl	80013d4 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8001b20:	883b      	ldrh	r3, [r7, #0]
 8001b22:	887a      	ldrh	r2, [r7, #2]
 8001b24:	fb02 f303 	mul.w	r3, r2, r3
 8001b28:	461a      	mov	r2, r3
 8001b2a:	8b3b      	ldrh	r3, [r7, #24]
 8001b2c:	4611      	mov	r1, r2
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fe26 	bl	8001780 <ILI9341_Draw_Colour_Burst>
 8001b34:	e000      	b.n	8001b38 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001b36:	bf00      	nop
}
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd90      	pop	{r4, r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000002 	.word	0x20000002
 8001b44:	20000000 	.word	0x20000000

08001b48 <Get_Time_us>:
uint16_t ch1_data[MAX_POINTS];

bool CH0_DONE_SAMPLING = false;
bool CH1_DONE_SAMPLING = false;

float Get_Time_us(void) {
 8001b48:	b5b0      	push	{r4, r5, r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
	float count = __HAL_TIM_GET_COUNTER(&htim2);
 8001b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb8 <Get_Time_us+0x70>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b54:	ee07 3a90 	vmov	s15, r3
 8001b58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b5c:	edc7 7a01 	vstr	s15, [r7, #4]
	float FRQ = 2e6;
 8001b60:	4b16      	ldr	r3, [pc, #88]	@ (8001bbc <Get_Time_us+0x74>)
 8001b62:	603b      	str	r3, [r7, #0]
	return count * 1e6 / FRQ; // Read timer
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7fe fd0f 	bl	8000588 <__aeabi_f2d>
 8001b6a:	a311      	add	r3, pc, #68	@ (adr r3, 8001bb0 <Get_Time_us+0x68>)
 8001b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b70:	f7fe fd62 	bl	8000638 <__aeabi_dmul>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4614      	mov	r4, r2
 8001b7a:	461d      	mov	r5, r3
 8001b7c:	6838      	ldr	r0, [r7, #0]
 8001b7e:	f7fe fd03 	bl	8000588 <__aeabi_f2d>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4620      	mov	r0, r4
 8001b88:	4629      	mov	r1, r5
 8001b8a:	f7fe fe7f 	bl	800088c <__aeabi_ddiv>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4610      	mov	r0, r2
 8001b94:	4619      	mov	r1, r3
 8001b96:	f7ff f827 	bl	8000be8 <__aeabi_d2f>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	ee07 3a90 	vmov	s15, r3
}
 8001ba0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bdb0      	pop	{r4, r5, r7, pc}
 8001baa:	bf00      	nop
 8001bac:	f3af 8000 	nop.w
 8001bb0:	00000000 	.word	0x00000000
 8001bb4:	412e8480 	.word	0x412e8480
 8001bb8:	2000040c 	.word	0x2000040c
 8001bbc:	49f42400 	.word	0x49f42400

08001bc0 <ADC_START>:
void wait_us(uint32_t w) {
  uint32_t s = Get_Time_us();
  while(Get_Time_us() - s < w);
}

float ADC_START() {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
	float t1 = Get_Time_us();
 8001bc6:	f7ff ffbf 	bl	8001b48 <Get_Time_us>
 8001bca:	ed87 0a03 	vstr	s0, [r7, #12]
	float t2 = Get_Time_us();
 8001bce:	f7ff ffbb 	bl	8001b48 <Get_Time_us>
 8001bd2:	ed87 0a02 	vstr	s0, [r7, #8]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ch1_data, MAX_POINTS);
 8001bd6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001bda:	4916      	ldr	r1, [pc, #88]	@ (8001c34 <ADC_START+0x74>)
 8001bdc:	4816      	ldr	r0, [pc, #88]	@ (8001c38 <ADC_START+0x78>)
 8001bde:	f002 f93f 	bl	8003e60 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)ch0_data, MAX_POINTS);
 8001be2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001be6:	4915      	ldr	r1, [pc, #84]	@ (8001c3c <ADC_START+0x7c>)
 8001be8:	4815      	ldr	r0, [pc, #84]	@ (8001c40 <ADC_START+0x80>)
 8001bea:	f002 f939 	bl	8003e60 <HAL_ADC_Start_DMA>
	float t3 = Get_Time_us();
 8001bee:	f7ff ffab 	bl	8001b48 <Get_Time_us>
 8001bf2:	ed87 0a01 	vstr	s0, [r7, #4]

	CH0_DONE_SAMPLING = false;
 8001bf6:	4b13      	ldr	r3, [pc, #76]	@ (8001c44 <ADC_START+0x84>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
	CH1_DONE_SAMPLING = false;
 8001bfc:	4b12      	ldr	r3, [pc, #72]	@ (8001c48 <ADC_START+0x88>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	701a      	strb	r2, [r3, #0]

	return (float)(t3 - t1 - (t2 - t1)) / 2;
 8001c02:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c06:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c0e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001c12:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c16:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c1e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001c22:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c26:	eef0 7a66 	vmov.f32	s15, s13
}
 8001c2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	200013f4 	.word	0x200013f4
 8001c38:	2000020c 	.word	0x2000020c
 8001c3c:	20000454 	.word	0x20000454
 8001c40:	20000254 	.word	0x20000254
 8001c44:	20002394 	.word	0x20002394
 8001c48:	20002395 	.word	0x20002395

08001c4c <convert_to_float>:

void convert_to_float(const uint16_t *input_array, float *output_array, size_t length) {
 8001c4c:	b480      	push	{r7}
 8001c4e:	b089      	sub	sp, #36	@ 0x24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
    const float scale_factor = 3.3f / 4095.0f;
 8001c58:	4b18      	ldr	r3, [pc, #96]	@ (8001cbc <convert_to_float+0x70>)
 8001c5a:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < length; i++) {
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61fb      	str	r3, [r7, #28]
 8001c60:	e020      	b.n	8001ca4 <convert_to_float+0x58>
    	if (i == 133) {
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	2b85      	cmp	r3, #133	@ 0x85
 8001c66:	d105      	bne.n	8001c74 <convert_to_float+0x28>
    		i = i + 1;
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	61fb      	str	r3, [r7, #28]
    		i = i - 1;
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3b01      	subs	r3, #1
 8001c72:	61fb      	str	r3, [r7, #28]
    	}
    	float o = input_array[i] * scale_factor;
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	ee07 3a90 	vmov	s15, r3
 8001c82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c86:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c8e:	edc7 7a05 	vstr	s15, [r7, #20]
        output_array[i] = o;
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	4413      	add	r3, r2
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < length; i++) {
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	61fb      	str	r3, [r7, #28]
 8001ca4:	69fa      	ldr	r2, [r7, #28]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d3da      	bcc.n	8001c62 <convert_to_float+0x16>
    }
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	3724      	adds	r7, #36	@ 0x24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	3a534067 	.word	0x3a534067

08001cc0 <Show_Stats>:
	int adc_val = HAL_ADC_GetValue(&hadc2); // get the adc value

	return 3.3f * ((float) adc_val) / pow(2, 12);
}

void Show_Stats(float reactance, float resistance, float frequency){
 8001cc0:	b5b0      	push	{r4, r5, r7, lr}
 8001cc2:	b0a8      	sub	sp, #160	@ 0xa0
 8001cc4:	af04      	add	r7, sp, #16
 8001cc6:	ed87 0a03 	vstr	s0, [r7, #12]
 8001cca:	edc7 0a02 	vstr	s1, [r7, #8]
 8001cce:	ed87 1a01 	vstr	s2, [r7, #4]
//	ILI9341_Fill_Screen(BLACK);
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001cd2:	2003      	movs	r0, #3
 8001cd4:	f7ff fbe6 	bl	80014a4 <ILI9341_Set_Rotation>

	double X = (double) reactance;
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f7fe fc55 	bl	8000588 <__aeabi_f2d>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
	double R = (double) resistance;
 8001ce6:	68b8      	ldr	r0, [r7, #8]
 8001ce8:	f7fe fc4e 	bl	8000588 <__aeabi_f2d>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

	// Make sure in project properties to add the linker flag -u _printf_float

    char buffer[50]; // Buffer to hold the formatted string
	if (X < 0){
 8001cf4:	f04f 0200 	mov.w	r2, #0
 8001cf8:	f04f 0300 	mov.w	r3, #0
 8001cfc:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8001d00:	f7fe ff0c 	bl	8000b1c <__aeabi_dcmplt>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d06c      	beq.n	8001de4 <Show_Stats+0x124>
		float capacitance = -1e9 / (2 * M_PI * frequency * X);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7fe fc3c 	bl	8000588 <__aeabi_f2d>
 8001d10:	a393      	add	r3, pc, #588	@ (adr r3, 8001f60 <Show_Stats+0x2a0>)
 8001d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d16:	f7fe fc8f 	bl	8000638 <__aeabi_dmul>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4610      	mov	r0, r2
 8001d20:	4619      	mov	r1, r3
 8001d22:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001d26:	f7fe fc87 	bl	8000638 <__aeabi_dmul>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	a196      	add	r1, pc, #600	@ (adr r1, 8001f88 <Show_Stats+0x2c8>)
 8001d30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d34:	f7fe fdaa 	bl	800088c <__aeabi_ddiv>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f7fe ff52 	bl	8000be8 <__aeabi_d2f>
 8001d44:	4603      	mov	r3, r0
 8001d46:	67bb      	str	r3, [r7, #120]	@ 0x78
		ILI9341_Draw_Text("                        ", 10, 48, WHITE, 2, BLACK);
 8001d48:	2300      	movs	r3, #0
 8001d4a:	9301      	str	r3, [sp, #4]
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d54:	2230      	movs	r2, #48	@ 0x30
 8001d56:	210a      	movs	r1, #10
 8001d58:	4883      	ldr	r0, [pc, #524]	@ (8001f68 <Show_Stats+0x2a8>)
 8001d5a:	f7ff fab1 	bl	80012c0 <ILI9341_Draw_Text>
		snprintf(buffer, sizeof(buffer), "Cs: %.2f nF", capacitance);
 8001d5e:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8001d60:	f7fe fc12 	bl	8000588 <__aeabi_f2d>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001d6c:	e9cd 2300 	strd	r2, r3, [sp]
 8001d70:	4a7e      	ldr	r2, [pc, #504]	@ (8001f6c <Show_Stats+0x2ac>)
 8001d72:	2132      	movs	r1, #50	@ 0x32
 8001d74:	f006 ff36 	bl	8008be4 <sniprintf>
		ILI9341_Draw_Text(buffer, 10, 48, WHITE, 2, BLACK);
 8001d78:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	9301      	str	r3, [sp, #4]
 8001d80:	2302      	movs	r3, #2
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d88:	2230      	movs	r2, #48	@ 0x30
 8001d8a:	210a      	movs	r1, #10
 8001d8c:	f7ff fa98 	bl	80012c0 <ILI9341_Draw_Text>


        char impedance[50];
        snprintf(impedance, sizeof(impedance), "Z: %.2f - j %.2f", R, -X);
 8001d90:	f8d7 4088 	ldr.w	r4, [r7, #136]	@ 0x88
 8001d94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d98:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001d9c:	f107 0010 	add.w	r0, r7, #16
 8001da0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001da4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001da8:	e9cd 2300 	strd	r2, r3, [sp]
 8001dac:	4a70      	ldr	r2, [pc, #448]	@ (8001f70 <Show_Stats+0x2b0>)
 8001dae:	2132      	movs	r1, #50	@ 0x32
 8001db0:	f006 ff18 	bl	8008be4 <sniprintf>

		ILI9341_Draw_Text("                        ", 10, 144, WHITE, 2, BLACK);
 8001db4:	2300      	movs	r3, #0
 8001db6:	9301      	str	r3, [sp, #4]
 8001db8:	2302      	movs	r3, #2
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001dc0:	2290      	movs	r2, #144	@ 0x90
 8001dc2:	210a      	movs	r1, #10
 8001dc4:	4868      	ldr	r0, [pc, #416]	@ (8001f68 <Show_Stats+0x2a8>)
 8001dc6:	f7ff fa7b 	bl	80012c0 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(impedance, 10, 144, WHITE, 2, BLACK);
 8001dca:	f107 0010 	add.w	r0, r7, #16
 8001dce:	2300      	movs	r3, #0
 8001dd0:	9301      	str	r3, [sp, #4]
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001dda:	2290      	movs	r2, #144	@ 0x90
 8001ddc:	210a      	movs	r1, #10
 8001dde:	f7ff fa6f 	bl	80012c0 <ILI9341_Draw_Text>
 8001de2:	e069      	b.n	8001eb8 <Show_Stats+0x1f8>

	} else {
        float inductance = X * 1e6 / (2 * M_PI * frequency);
 8001de4:	a35c      	add	r3, pc, #368	@ (adr r3, 8001f58 <Show_Stats+0x298>)
 8001de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dea:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8001dee:	f7fe fc23 	bl	8000638 <__aeabi_dmul>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4614      	mov	r4, r2
 8001df8:	461d      	mov	r5, r3
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7fe fbc4 	bl	8000588 <__aeabi_f2d>
 8001e00:	a357      	add	r3, pc, #348	@ (adr r3, 8001f60 <Show_Stats+0x2a0>)
 8001e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e06:	f7fe fc17 	bl	8000638 <__aeabi_dmul>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4620      	mov	r0, r4
 8001e10:	4629      	mov	r1, r5
 8001e12:	f7fe fd3b 	bl	800088c <__aeabi_ddiv>
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f7fe fee3 	bl	8000be8 <__aeabi_d2f>
 8001e22:	4603      	mov	r3, r0
 8001e24:	67fb      	str	r3, [r7, #124]	@ 0x7c
		ILI9341_Draw_Text("                        ", 10, 48, WHITE, 2, BLACK);
 8001e26:	2300      	movs	r3, #0
 8001e28:	9301      	str	r3, [sp, #4]
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e32:	2230      	movs	r2, #48	@ 0x30
 8001e34:	210a      	movs	r1, #10
 8001e36:	484c      	ldr	r0, [pc, #304]	@ (8001f68 <Show_Stats+0x2a8>)
 8001e38:	f7ff fa42 	bl	80012c0 <ILI9341_Draw_Text>
        snprintf(buffer, sizeof(buffer), "Ls: %.2f uH", inductance);
 8001e3c:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8001e3e:	f7fe fba3 	bl	8000588 <__aeabi_f2d>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001e4a:	e9cd 2300 	strd	r2, r3, [sp]
 8001e4e:	4a49      	ldr	r2, [pc, #292]	@ (8001f74 <Show_Stats+0x2b4>)
 8001e50:	2132      	movs	r1, #50	@ 0x32
 8001e52:	f006 fec7 	bl	8008be4 <sniprintf>
        ILI9341_Draw_Text(buffer, 10, 48, WHITE, 2, BLACK);
 8001e56:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	9301      	str	r3, [sp, #4]
 8001e5e:	2302      	movs	r3, #2
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e66:	2230      	movs	r2, #48	@ 0x30
 8001e68:	210a      	movs	r1, #10
 8001e6a:	f7ff fa29 	bl	80012c0 <ILI9341_Draw_Text>

        char impedance[50];
        snprintf(impedance, sizeof(impedance), "Z: %.2f + j %.2f", R, X);
 8001e6e:	f107 0010 	add.w	r0, r7, #16
 8001e72:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001e76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001e7a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001e7e:	e9cd 2300 	strd	r2, r3, [sp]
 8001e82:	4a3d      	ldr	r2, [pc, #244]	@ (8001f78 <Show_Stats+0x2b8>)
 8001e84:	2132      	movs	r1, #50	@ 0x32
 8001e86:	f006 fead 	bl	8008be4 <sniprintf>

		ILI9341_Draw_Text("                        ", 10, 144, WHITE, 2, BLACK);
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	9301      	str	r3, [sp, #4]
 8001e8e:	2302      	movs	r3, #2
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e96:	2290      	movs	r2, #144	@ 0x90
 8001e98:	210a      	movs	r1, #10
 8001e9a:	4833      	ldr	r0, [pc, #204]	@ (8001f68 <Show_Stats+0x2a8>)
 8001e9c:	f7ff fa10 	bl	80012c0 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(impedance, 10, 144, WHITE, 2, BLACK);
 8001ea0:	f107 0010 	add.w	r0, r7, #16
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	9301      	str	r3, [sp, #4]
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001eb0:	2290      	movs	r2, #144	@ 0x90
 8001eb2:	210a      	movs	r1, #10
 8001eb4:	f7ff fa04 	bl	80012c0 <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text("                        ", 10, 96, WHITE, 2, BLACK);
 8001eb8:	2300      	movs	r3, #0
 8001eba:	9301      	str	r3, [sp, #4]
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ec4:	2260      	movs	r2, #96	@ 0x60
 8001ec6:	210a      	movs	r1, #10
 8001ec8:	4827      	ldr	r0, [pc, #156]	@ (8001f68 <Show_Stats+0x2a8>)
 8001eca:	f7ff f9f9 	bl	80012c0 <ILI9341_Draw_Text>
	snprintf(buffer, sizeof(buffer), "ESR: %.2f Ohms", R);
 8001ece:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001ed2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001ed6:	e9cd 2300 	strd	r2, r3, [sp]
 8001eda:	4a28      	ldr	r2, [pc, #160]	@ (8001f7c <Show_Stats+0x2bc>)
 8001edc:	2132      	movs	r1, #50	@ 0x32
 8001ede:	f006 fe81 	bl	8008be4 <sniprintf>
	ILI9341_Draw_Text(buffer, 10, 96, WHITE, 2, BLACK);
 8001ee2:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	9301      	str	r3, [sp, #4]
 8001eea:	2302      	movs	r3, #2
 8001eec:	9300      	str	r3, [sp, #0]
 8001eee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ef2:	2260      	movs	r2, #96	@ 0x60
 8001ef4:	210a      	movs	r1, #10
 8001ef6:	f7ff f9e3 	bl	80012c0 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("                        ", 10, 192, WHITE, 2, BLACK);
 8001efa:	2300      	movs	r3, #0
 8001efc:	9301      	str	r3, [sp, #4]
 8001efe:	2302      	movs	r3, #2
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f06:	22c0      	movs	r2, #192	@ 0xc0
 8001f08:	210a      	movs	r1, #10
 8001f0a:	4817      	ldr	r0, [pc, #92]	@ (8001f68 <Show_Stats+0x2a8>)
 8001f0c:	f7ff f9d8 	bl	80012c0 <ILI9341_Draw_Text>
	snprintf(buffer, sizeof(buffer), "Freq: %.2f kHz", frequency / 1000);
 8001f10:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f14:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001f80 <Show_Stats+0x2c0>
 8001f18:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001f1c:	ee16 0a90 	vmov	r0, s13
 8001f20:	f7fe fb32 	bl	8000588 <__aeabi_f2d>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001f2c:	e9cd 2300 	strd	r2, r3, [sp]
 8001f30:	4a14      	ldr	r2, [pc, #80]	@ (8001f84 <Show_Stats+0x2c4>)
 8001f32:	2132      	movs	r1, #50	@ 0x32
 8001f34:	f006 fe56 	bl	8008be4 <sniprintf>
	ILI9341_Draw_Text(buffer, 10, 192, WHITE, 2, BLACK);
 8001f38:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	9301      	str	r3, [sp, #4]
 8001f40:	2302      	movs	r3, #2
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f48:	22c0      	movs	r2, #192	@ 0xc0
 8001f4a:	210a      	movs	r1, #10
 8001f4c:	f7ff f9b8 	bl	80012c0 <ILI9341_Draw_Text>
}
 8001f50:	bf00      	nop
 8001f52:	3790      	adds	r7, #144	@ 0x90
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bdb0      	pop	{r4, r5, r7, pc}
 8001f58:	00000000 	.word	0x00000000
 8001f5c:	412e8480 	.word	0x412e8480
 8001f60:	54442d18 	.word	0x54442d18
 8001f64:	401921fb 	.word	0x401921fb
 8001f68:	0800ae80 	.word	0x0800ae80
 8001f6c:	0800ae9c 	.word	0x0800ae9c
 8001f70:	0800aea8 	.word	0x0800aea8
 8001f74:	0800aebc 	.word	0x0800aebc
 8001f78:	0800aec8 	.word	0x0800aec8
 8001f7c:	0800aedc 	.word	0x0800aedc
 8001f80:	447a0000 	.word	0x447a0000
 8001f84:	0800aeec 	.word	0x0800aeec
 8001f88:	00000000 	.word	0x00000000
 8001f8c:	c1cdcd65 	.word	0xc1cdcd65

08001f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f94:	b099      	sub	sp, #100	@ 0x64
 8001f96:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f98:	f001 fd78 	bl	8003a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f9c:	f000 f988 	bl	80022b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fa0:	f000 fb76 	bl	8002690 <MX_GPIO_Init>
  MX_DMA_Init();
 8001fa4:	f000 fb4c 	bl	8002640 <MX_DMA_Init>
  MX_SPI1_Init();
 8001fa8:	f000 fa92 	bl	80024d0 <MX_SPI1_Init>
  MX_SPI3_Init();
 8001fac:	f000 fac6 	bl	800253c <MX_SPI3_Init>
  MX_ADC1_Init();
 8001fb0:	f000 f9ea 	bl	8002388 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001fb4:	f000 fa3a 	bl	800242c <MX_ADC2_Init>
  MX_TIM2_Init();
 8001fb8:	f000 faf6 	bl	80025a8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  memset(ch0_data, 0, MAX_POINTS);  // Set all bytes in the array to 0
 8001fbc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	48b1      	ldr	r0, [pc, #708]	@ (8002288 <main+0x2f8>)
 8001fc4:	f006 fe85 	bl	8008cd2 <memset>
  memset(ch1_data, 0, MAX_POINTS);  // Set all bytes in the array to 0
 8001fc8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001fcc:	2100      	movs	r1, #0
 8001fce:	48af      	ldr	r0, [pc, #700]	@ (800228c <main+0x2fc>)
 8001fd0:	f006 fe7f 	bl	8008cd2 <memset>

	uint32_t start_time;

	int i = 0; // Array index counter
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	64bb      	str	r3, [r7, #72]	@ 0x48


	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001fd8:	4bad      	ldr	r3, [pc, #692]	@ (8002290 <main+0x300>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(&htim2);
 8001fe0:	48ab      	ldr	r0, [pc, #684]	@ (8002290 <main+0x300>)
 8001fe2:	f004 fa03 	bl	80063ec <HAL_TIM_Base_Start>


	start_time = Get_Time_us();
 8001fe6:	f7ff fdaf 	bl	8001b48 <Get_Time_us>
 8001fea:	eef0 7a40 	vmov.f32	s15, s0
 8001fee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ff2:	ee17 3a90 	vmov	r3, s15
 8001ff6:	647b      	str	r3, [r7, #68]	@ 0x44

	float load_amplitude = 0;
 8001ff8:	f04f 0300 	mov.w	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
	float load_phase = 0;
 8001ffe:	f04f 0300 	mov.w	r3, #0
 8002002:	613b      	str	r3, [r7, #16]
	float load_offset = 0;
 8002004:	f04f 0300 	mov.w	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]

	float shunt_amplitude = 0;
 800200a:	f04f 0300 	mov.w	r3, #0
 800200e:	60bb      	str	r3, [r7, #8]
	float shunt_phase = 0;
 8002010:	f04f 0300 	mov.w	r3, #0
 8002014:	607b      	str	r3, [r7, #4]
	float shunt_offset = 0;
 8002016:	f04f 0300 	mov.w	r3, #0
 800201a:	603b      	str	r3, [r7, #0]


	ILI9341_Init();
 800201c:	f7ff faa0 	bl	8001560 <ILI9341_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (FREQ_UPDATE_NEEDED > 0) {
 8002020:	4b9c      	ldr	r3, [pc, #624]	@ (8002294 <main+0x304>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	dd1a      	ble.n	800205e <main+0xce>
		  AD9833_set_freq(frequency);
 8002028:	4b9b      	ldr	r3, [pc, #620]	@ (8002298 <main+0x308>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	ee07 3a90 	vmov	s15, r3
 8002030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002034:	eeb0 0a67 	vmov.f32	s0, s15
 8002038:	f7ff f84c 	bl	80010d4 <AD9833_set_freq>
		  AD9833_set_freq(frequency);
 800203c:	4b96      	ldr	r3, [pc, #600]	@ (8002298 <main+0x308>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	ee07 3a90 	vmov	s15, r3
 8002044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002048:	eeb0 0a67 	vmov.f32	s0, s15
 800204c:	f7ff f842 	bl	80010d4 <AD9833_set_freq>
		  // for some reason can't be changed by just reconfiguring the SPI bus (as I am doing in the
		  // AD9833 driver) but rather actually requires an spi transfer to initiate the correct
		  // Polarity clock for the start of the next transfer. This is required because the AD9833
		  // Requires the clock to idle HIGH before the CS/FSYNC pin goes low. I'm too lazy to figure
		  // out how to fix this easily. This works, so I'm keeping it.
		  FREQ_UPDATE_NEEDED = 0; // clear flag
 8002050:	4b90      	ldr	r3, [pc, #576]	@ (8002294 <main+0x304>)
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
		  HAL_Delay(1000); // allow for the frequency to stabilize before sampling
 8002056:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800205a:	f001 fd89 	bl	8003b70 <HAL_Delay>
	  }


	  float sampleF = frequency; // samples and hold the frequency to ensure it won't change while in the middle of gathering smaples
 800205e:	4b8e      	ldr	r3, [pc, #568]	@ (8002298 <main+0x308>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	ee07 3a90 	vmov	s15, r3
 8002066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800206a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	  float avgX = 0;
 800206e:	f04f 0300 	mov.w	r3, #0
 8002072:	657b      	str	r3, [r7, #84]	@ 0x54
	  float avgR = 0;
 8002074:	f04f 0300 	mov.w	r3, #0
 8002078:	653b      	str	r3, [r7, #80]	@ 0x50
	  int cycles = 10;
 800207a:	230a      	movs	r3, #10
 800207c:	63fb      	str	r3, [r7, #60]	@ 0x3c

	  for (int i = 0; i < cycles; i++) {
 800207e:	2300      	movs	r3, #0
 8002080:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002082:	e0dc      	b.n	800223e <main+0x2ae>
 8002084:	466b      	mov	r3, sp
 8002086:	461e      	mov	r6, r3

		  float delay = ADC_START();
 8002088:	f7ff fd9a 	bl	8001bc0 <ADC_START>
 800208c:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
		  while(!CH0_DONE_SAMPLING || !CH1_DONE_SAMPLING); // Wait	 for samples to be  collected
 8002090:	bf00      	nop
 8002092:	4b82      	ldr	r3, [pc, #520]	@ (800229c <main+0x30c>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	f083 0301 	eor.w	r3, r3, #1
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1f8      	bne.n	8002092 <main+0x102>
 80020a0:	4b7f      	ldr	r3, [pc, #508]	@ (80022a0 <main+0x310>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	f083 0301 	eor.w	r3, r3, #1
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f1      	bne.n	8002092 <main+0x102>

//	  		  uint32_t collected_points = 1400000 / sampleF; // 1 full period of samples
		  uint32_t collected_points = MAX_POINTS; // Testing new method with all the available points
 80020ae:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80020b2:	637b      	str	r3, [r7, #52]	@ 0x34
//		  least_squares_sine(collected_points, sampleF, 1.4e6, load_data, &load_amplitude, &load_phase, &load_offset);
//		  least_squares_sine(collected_points, sampleF, 1.4e6, shunt_data, &shunt_amplitude, &shunt_phase, &shunt_offset);

		  // See what happens when I use one buffer for both
		  // START TEST
		  float FLT_BUF[collected_points];
 80020b4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80020b6:	460b      	mov	r3, r1
 80020b8:	3b01      	subs	r3, #1
 80020ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80020bc:	2300      	movs	r3, #0
 80020be:	460c      	mov	r4, r1
 80020c0:	461d      	mov	r5, r3
 80020c2:	f04f 0200 	mov.w	r2, #0
 80020c6:	f04f 0300 	mov.w	r3, #0
 80020ca:	016b      	lsls	r3, r5, #5
 80020cc:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80020d0:	0162      	lsls	r2, r4, #5
 80020d2:	2300      	movs	r3, #0
 80020d4:	4688      	mov	r8, r1
 80020d6:	4699      	mov	r9, r3
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	f04f 0300 	mov.w	r3, #0
 80020e0:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80020e4:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80020e8:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80020ec:	008b      	lsls	r3, r1, #2
 80020ee:	3307      	adds	r3, #7
 80020f0:	08db      	lsrs	r3, r3, #3
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	ebad 0d03 	sub.w	sp, sp, r3
 80020f8:	ab02      	add	r3, sp, #8
 80020fa:	3303      	adds	r3, #3
 80020fc:	089b      	lsrs	r3, r3, #2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	62fb      	str	r3, [r7, #44]	@ 0x2c

		  convert_to_float(ch1_data, FLT_BUF, collected_points);
 8002102:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002104:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002106:	4861      	ldr	r0, [pc, #388]	@ (800228c <main+0x2fc>)
 8002108:	f7ff fda0 	bl	8001c4c <convert_to_float>
		  least_squares_sine(collected_points, sampleF, 1.4e6, 0, FLT_BUF, &shunt_amplitude, &shunt_phase, &shunt_offset);
 800210c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800210e:	1d39      	adds	r1, r7, #4
 8002110:	f107 0208 	add.w	r2, r7, #8
 8002114:	463b      	mov	r3, r7
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	460b      	mov	r3, r1
 800211a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800211c:	ed9f 1a61 	vldr	s2, [pc, #388]	@ 80022a4 <main+0x314>
 8002120:	eddf 0a61 	vldr	s1, [pc, #388]	@ 80022a8 <main+0x318>
 8002124:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 8002128:	f001 f812 	bl	8003150 <least_squares_sine>

		  convert_to_float(ch0_data, FLT_BUF, collected_points);
 800212c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800212e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002130:	4855      	ldr	r0, [pc, #340]	@ (8002288 <main+0x2f8>)
 8002132:	f7ff fd8b 	bl	8001c4c <convert_to_float>
		  least_squares_sine(collected_points, sampleF, 1.4e6, delay, FLT_BUF, &load_amplitude, &load_phase, &load_offset);
 8002136:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002138:	f107 0110 	add.w	r1, r7, #16
 800213c:	f107 0214 	add.w	r2, r7, #20
 8002140:	f107 030c 	add.w	r3, r7, #12
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	460b      	mov	r3, r1
 8002148:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800214a:	ed97 1a0e 	vldr	s2, [r7, #56]	@ 0x38
 800214e:	eddf 0a56 	vldr	s1, [pc, #344]	@ 80022a8 <main+0x318>
 8002152:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 8002156:	f000 fffb 	bl	8003150 <least_squares_sine>


		  memset(ch0_data, 0, MAX_POINTS);  // Set all bytes in the array to 0
 800215a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800215e:	2100      	movs	r1, #0
 8002160:	4849      	ldr	r0, [pc, #292]	@ (8002288 <main+0x2f8>)
 8002162:	f006 fdb6 	bl	8008cd2 <memset>
		  memset(ch1_data, 0, MAX_POINTS);  // Set all bytes in the array to 0
 8002166:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800216a:	2100      	movs	r1, #0
 800216c:	4847      	ldr	r0, [pc, #284]	@ (800228c <main+0x2fc>)
 800216e:	f006 fdb0 	bl	8008cd2 <memset>
		  // END TEST


//		  float shunt_resistance = 102.24;
		  float shunt_resistance = 1003.8;
 8002172:	4b4e      	ldr	r3, [pc, #312]	@ (80022ac <main+0x31c>)
 8002174:	62bb      	str	r3, [r7, #40]	@ 0x28

		  float impedance_magnitude = (load_amplitude / (shunt_amplitude / shunt_resistance));
 8002176:	edd7 6a05 	vldr	s13, [r7, #20]
 800217a:	ed97 6a02 	vldr	s12, [r7, #8]
 800217e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002182:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8002186:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800218a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		  float impedance_angle = (load_phase - shunt_phase);
 800218e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002192:	edd7 7a01 	vldr	s15, [r7, #4]
 8002196:	ee77 7a67 	vsub.f32	s15, s14, s15
 800219a:	edc7 7a08 	vstr	s15, [r7, #32]
		  float resistance = impedance_magnitude * cos(impedance_angle);
 800219e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80021a0:	f7fe f9f2 	bl	8000588 <__aeabi_f2d>
 80021a4:	4682      	mov	sl, r0
 80021a6:	468b      	mov	fp, r1
 80021a8:	6a38      	ldr	r0, [r7, #32]
 80021aa:	f7fe f9ed 	bl	8000588 <__aeabi_f2d>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	ec43 2b10 	vmov	d0, r2, r3
 80021b6:	f004 fdd3 	bl	8006d60 <cos>
 80021ba:	ec53 2b10 	vmov	r2, r3, d0
 80021be:	4650      	mov	r0, sl
 80021c0:	4659      	mov	r1, fp
 80021c2:	f7fe fa39 	bl	8000638 <__aeabi_dmul>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	4610      	mov	r0, r2
 80021cc:	4619      	mov	r1, r3
 80021ce:	f7fe fd0b 	bl	8000be8 <__aeabi_d2f>
 80021d2:	4603      	mov	r3, r0
 80021d4:	61fb      	str	r3, [r7, #28]
		  float reactance = impedance_magnitude * sin(impedance_angle);
 80021d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80021d8:	f7fe f9d6 	bl	8000588 <__aeabi_f2d>
 80021dc:	4682      	mov	sl, r0
 80021de:	468b      	mov	fp, r1
 80021e0:	6a38      	ldr	r0, [r7, #32]
 80021e2:	f7fe f9d1 	bl	8000588 <__aeabi_f2d>
 80021e6:	4602      	mov	r2, r0
 80021e8:	460b      	mov	r3, r1
 80021ea:	ec43 2b10 	vmov	d0, r2, r3
 80021ee:	f004 fe13 	bl	8006e18 <sin>
 80021f2:	ec53 2b10 	vmov	r2, r3, d0
 80021f6:	4650      	mov	r0, sl
 80021f8:	4659      	mov	r1, fp
 80021fa:	f7fe fa1d 	bl	8000638 <__aeabi_dmul>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	4610      	mov	r0, r2
 8002204:	4619      	mov	r1, r3
 8002206:	f7fe fcef 	bl	8000be8 <__aeabi_d2f>
 800220a:	4603      	mov	r3, r0
 800220c:	61bb      	str	r3, [r7, #24]


		  __HAL_TIM_SET_COUNTER(&htim2, 0);
 800220e:	4b20      	ldr	r3, [pc, #128]	@ (8002290 <main+0x300>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2200      	movs	r2, #0
 8002214:	625a      	str	r2, [r3, #36]	@ 0x24
		  avgX += reactance;
 8002216:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800221a:	edd7 7a06 	vldr	s15, [r7, #24]
 800221e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002222:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		  avgR += resistance;
 8002226:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800222a:	edd7 7a07 	vldr	s15, [r7, #28]
 800222e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002232:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
 8002236:	46b5      	mov	sp, r6
	  for (int i = 0; i < cycles; i++) {
 8002238:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800223a:	3301      	adds	r3, #1
 800223c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800223e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002242:	429a      	cmp	r2, r3
 8002244:	f6ff af1e 	blt.w	8002084 <main+0xf4>
	  }
	  avgX = avgX / cycles;
 8002248:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800224a:	ee07 3a90 	vmov	s15, r3
 800224e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002252:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8002256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800225a:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
	  avgR = avgR / cycles;
 800225e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002260:	ee07 3a90 	vmov	s15, r3
 8002264:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002268:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 800226c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002270:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

	  Show_Stats(avgX, avgR, sampleF);
 8002274:	ed97 1a10 	vldr	s2, [r7, #64]	@ 0x40
 8002278:	edd7 0a14 	vldr	s1, [r7, #80]	@ 0x50
 800227c:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 8002280:	f7ff fd1e 	bl	8001cc0 <Show_Stats>
  {
 8002284:	e6cc      	b.n	8002020 <main+0x90>
 8002286:	bf00      	nop
 8002288:	20000454 	.word	0x20000454
 800228c:	200013f4 	.word	0x200013f4
 8002290:	2000040c 	.word	0x2000040c
 8002294:	20000008 	.word	0x20000008
 8002298:	20000004 	.word	0x20000004
 800229c:	20002394 	.word	0x20002394
 80022a0:	20002395 	.word	0x20002395
 80022a4:	00000000 	.word	0x00000000
 80022a8:	49aae600 	.word	0x49aae600
 80022ac:	447af333 	.word	0x447af333

080022b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b094      	sub	sp, #80	@ 0x50
 80022b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022b6:	f107 031c 	add.w	r3, r7, #28
 80022ba:	2234      	movs	r2, #52	@ 0x34
 80022bc:	2100      	movs	r1, #0
 80022be:	4618      	mov	r0, r3
 80022c0:	f006 fd07 	bl	8008cd2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022c4:	f107 0308 	add.w	r3, r7, #8
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	60da      	str	r2, [r3, #12]
 80022d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022d4:	2300      	movs	r3, #0
 80022d6:	607b      	str	r3, [r7, #4]
 80022d8:	4b29      	ldr	r3, [pc, #164]	@ (8002380 <SystemClock_Config+0xd0>)
 80022da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022dc:	4a28      	ldr	r2, [pc, #160]	@ (8002380 <SystemClock_Config+0xd0>)
 80022de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80022e4:	4b26      	ldr	r3, [pc, #152]	@ (8002380 <SystemClock_Config+0xd0>)
 80022e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ec:	607b      	str	r3, [r7, #4]
 80022ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022f0:	2300      	movs	r3, #0
 80022f2:	603b      	str	r3, [r7, #0]
 80022f4:	4b23      	ldr	r3, [pc, #140]	@ (8002384 <SystemClock_Config+0xd4>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a22      	ldr	r2, [pc, #136]	@ (8002384 <SystemClock_Config+0xd4>)
 80022fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022fe:	6013      	str	r3, [r2, #0]
 8002300:	4b20      	ldr	r3, [pc, #128]	@ (8002384 <SystemClock_Config+0xd4>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002308:	603b      	str	r3, [r7, #0]
 800230a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800230c:	2301      	movs	r3, #1
 800230e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002310:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002314:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002316:	2302      	movs	r3, #2
 8002318:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800231a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800231e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002320:	2304      	movs	r3, #4
 8002322:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002324:	23a8      	movs	r3, #168	@ 0xa8
 8002326:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002328:	2302      	movs	r3, #2
 800232a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800232c:	2302      	movs	r3, #2
 800232e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002330:	2302      	movs	r3, #2
 8002332:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002334:	f107 031c 	add.w	r3, r7, #28
 8002338:	4618      	mov	r0, r3
 800233a:	f003 fabf 	bl	80058bc <HAL_RCC_OscConfig>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002344:	f000 fa60 	bl	8002808 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002348:	230f      	movs	r3, #15
 800234a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800234c:	2302      	movs	r3, #2
 800234e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002350:	2300      	movs	r3, #0
 8002352:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002354:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002358:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800235a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800235e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002360:	f107 0308 	add.w	r3, r7, #8
 8002364:	2105      	movs	r1, #5
 8002366:	4618      	mov	r0, r3
 8002368:	f002 ff92 	bl	8005290 <HAL_RCC_ClockConfig>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002372:	f000 fa49 	bl	8002808 <Error_Handler>
  }
}
 8002376:	bf00      	nop
 8002378:	3750      	adds	r7, #80	@ 0x50
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800
 8002384:	40007000 	.word	0x40007000

08002388 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800238e:	463b      	mov	r3, r7
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800239a:	4b21      	ldr	r3, [pc, #132]	@ (8002420 <MX_ADC1_Init+0x98>)
 800239c:	4a21      	ldr	r2, [pc, #132]	@ (8002424 <MX_ADC1_Init+0x9c>)
 800239e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80023a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002420 <MX_ADC1_Init+0x98>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80023a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002420 <MX_ADC1_Init+0x98>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80023ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002420 <MX_ADC1_Init+0x98>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80023b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002420 <MX_ADC1_Init+0x98>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80023b8:	4b19      	ldr	r3, [pc, #100]	@ (8002420 <MX_ADC1_Init+0x98>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023c0:	4b17      	ldr	r3, [pc, #92]	@ (8002420 <MX_ADC1_Init+0x98>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023c6:	4b16      	ldr	r3, [pc, #88]	@ (8002420 <MX_ADC1_Init+0x98>)
 80023c8:	4a17      	ldr	r2, [pc, #92]	@ (8002428 <MX_ADC1_Init+0xa0>)
 80023ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023cc:	4b14      	ldr	r3, [pc, #80]	@ (8002420 <MX_ADC1_Init+0x98>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80023d2:	4b13      	ldr	r3, [pc, #76]	@ (8002420 <MX_ADC1_Init+0x98>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80023d8:	4b11      	ldr	r3, [pc, #68]	@ (8002420 <MX_ADC1_Init+0x98>)
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80023e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002420 <MX_ADC1_Init+0x98>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80023e6:	480e      	ldr	r0, [pc, #56]	@ (8002420 <MX_ADC1_Init+0x98>)
 80023e8:	f001 fbe6 	bl	8003bb8 <HAL_ADC_Init>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80023f2:	f000 fa09 	bl	8002808 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80023fa:	2301      	movs	r3, #1
 80023fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80023fe:	2300      	movs	r3, #0
 8002400:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002402:	463b      	mov	r3, r7
 8002404:	4619      	mov	r1, r3
 8002406:	4806      	ldr	r0, [pc, #24]	@ (8002420 <MX_ADC1_Init+0x98>)
 8002408:	f001 fe58 	bl	80040bc <HAL_ADC_ConfigChannel>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002412:	f000 f9f9 	bl	8002808 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002416:	bf00      	nop
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	2000020c 	.word	0x2000020c
 8002424:	40012000 	.word	0x40012000
 8002428:	0f000001 	.word	0x0f000001

0800242c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002432:	463b      	mov	r3, r7
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800243e:	4b21      	ldr	r3, [pc, #132]	@ (80024c4 <MX_ADC2_Init+0x98>)
 8002440:	4a21      	ldr	r2, [pc, #132]	@ (80024c8 <MX_ADC2_Init+0x9c>)
 8002442:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002444:	4b1f      	ldr	r3, [pc, #124]	@ (80024c4 <MX_ADC2_Init+0x98>)
 8002446:	2200      	movs	r2, #0
 8002448:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800244a:	4b1e      	ldr	r3, [pc, #120]	@ (80024c4 <MX_ADC2_Init+0x98>)
 800244c:	2200      	movs	r2, #0
 800244e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8002450:	4b1c      	ldr	r3, [pc, #112]	@ (80024c4 <MX_ADC2_Init+0x98>)
 8002452:	2200      	movs	r2, #0
 8002454:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002456:	4b1b      	ldr	r3, [pc, #108]	@ (80024c4 <MX_ADC2_Init+0x98>)
 8002458:	2201      	movs	r2, #1
 800245a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800245c:	4b19      	ldr	r3, [pc, #100]	@ (80024c4 <MX_ADC2_Init+0x98>)
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002464:	4b17      	ldr	r3, [pc, #92]	@ (80024c4 <MX_ADC2_Init+0x98>)
 8002466:	2200      	movs	r2, #0
 8002468:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800246a:	4b16      	ldr	r3, [pc, #88]	@ (80024c4 <MX_ADC2_Init+0x98>)
 800246c:	4a17      	ldr	r2, [pc, #92]	@ (80024cc <MX_ADC2_Init+0xa0>)
 800246e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002470:	4b14      	ldr	r3, [pc, #80]	@ (80024c4 <MX_ADC2_Init+0x98>)
 8002472:	2200      	movs	r2, #0
 8002474:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002476:	4b13      	ldr	r3, [pc, #76]	@ (80024c4 <MX_ADC2_Init+0x98>)
 8002478:	2201      	movs	r2, #1
 800247a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800247c:	4b11      	ldr	r3, [pc, #68]	@ (80024c4 <MX_ADC2_Init+0x98>)
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002484:	4b0f      	ldr	r3, [pc, #60]	@ (80024c4 <MX_ADC2_Init+0x98>)
 8002486:	2200      	movs	r2, #0
 8002488:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800248a:	480e      	ldr	r0, [pc, #56]	@ (80024c4 <MX_ADC2_Init+0x98>)
 800248c:	f001 fb94 	bl	8003bb8 <HAL_ADC_Init>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8002496:	f000 f9b7 	bl	8002808 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800249a:	2301      	movs	r3, #1
 800249c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800249e:	2301      	movs	r3, #1
 80024a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80024a2:	2300      	movs	r3, #0
 80024a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80024a6:	463b      	mov	r3, r7
 80024a8:	4619      	mov	r1, r3
 80024aa:	4806      	ldr	r0, [pc, #24]	@ (80024c4 <MX_ADC2_Init+0x98>)
 80024ac:	f001 fe06 	bl	80040bc <HAL_ADC_ConfigChannel>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80024b6:	f000 f9a7 	bl	8002808 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80024ba:	bf00      	nop
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20000254 	.word	0x20000254
 80024c8:	40012100 	.word	0x40012100
 80024cc:	0f000001 	.word	0x0f000001

080024d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80024d4:	4b17      	ldr	r3, [pc, #92]	@ (8002534 <MX_SPI1_Init+0x64>)
 80024d6:	4a18      	ldr	r2, [pc, #96]	@ (8002538 <MX_SPI1_Init+0x68>)
 80024d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024da:	4b16      	ldr	r3, [pc, #88]	@ (8002534 <MX_SPI1_Init+0x64>)
 80024dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80024e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80024e2:	4b14      	ldr	r3, [pc, #80]	@ (8002534 <MX_SPI1_Init+0x64>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024e8:	4b12      	ldr	r3, [pc, #72]	@ (8002534 <MX_SPI1_Init+0x64>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024ee:	4b11      	ldr	r3, [pc, #68]	@ (8002534 <MX_SPI1_Init+0x64>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002534 <MX_SPI1_Init+0x64>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80024fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002534 <MX_SPI1_Init+0x64>)
 80024fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002500:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002502:	4b0c      	ldr	r3, [pc, #48]	@ (8002534 <MX_SPI1_Init+0x64>)
 8002504:	2228      	movs	r2, #40	@ 0x28
 8002506:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002508:	4b0a      	ldr	r3, [pc, #40]	@ (8002534 <MX_SPI1_Init+0x64>)
 800250a:	2200      	movs	r2, #0
 800250c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800250e:	4b09      	ldr	r3, [pc, #36]	@ (8002534 <MX_SPI1_Init+0x64>)
 8002510:	2200      	movs	r2, #0
 8002512:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002514:	4b07      	ldr	r3, [pc, #28]	@ (8002534 <MX_SPI1_Init+0x64>)
 8002516:	2200      	movs	r2, #0
 8002518:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800251a:	4b06      	ldr	r3, [pc, #24]	@ (8002534 <MX_SPI1_Init+0x64>)
 800251c:	220a      	movs	r2, #10
 800251e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002520:	4804      	ldr	r0, [pc, #16]	@ (8002534 <MX_SPI1_Init+0x64>)
 8002522:	f003 fc69 	bl	8005df8 <HAL_SPI_Init>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800252c:	f000 f96c 	bl	8002808 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002530:	bf00      	nop
 8002532:	bd80      	pop	{r7, pc}
 8002534:	2000035c 	.word	0x2000035c
 8002538:	40013000 	.word	0x40013000

0800253c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002540:	4b17      	ldr	r3, [pc, #92]	@ (80025a0 <MX_SPI3_Init+0x64>)
 8002542:	4a18      	ldr	r2, [pc, #96]	@ (80025a4 <MX_SPI3_Init+0x68>)
 8002544:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002546:	4b16      	ldr	r3, [pc, #88]	@ (80025a0 <MX_SPI3_Init+0x64>)
 8002548:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800254c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800254e:	4b14      	ldr	r3, [pc, #80]	@ (80025a0 <MX_SPI3_Init+0x64>)
 8002550:	2200      	movs	r2, #0
 8002552:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002554:	4b12      	ldr	r3, [pc, #72]	@ (80025a0 <MX_SPI3_Init+0x64>)
 8002556:	2200      	movs	r2, #0
 8002558:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800255a:	4b11      	ldr	r3, [pc, #68]	@ (80025a0 <MX_SPI3_Init+0x64>)
 800255c:	2200      	movs	r2, #0
 800255e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002560:	4b0f      	ldr	r3, [pc, #60]	@ (80025a0 <MX_SPI3_Init+0x64>)
 8002562:	2200      	movs	r2, #0
 8002564:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002566:	4b0e      	ldr	r3, [pc, #56]	@ (80025a0 <MX_SPI3_Init+0x64>)
 8002568:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800256c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800256e:	4b0c      	ldr	r3, [pc, #48]	@ (80025a0 <MX_SPI3_Init+0x64>)
 8002570:	2200      	movs	r2, #0
 8002572:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002574:	4b0a      	ldr	r3, [pc, #40]	@ (80025a0 <MX_SPI3_Init+0x64>)
 8002576:	2200      	movs	r2, #0
 8002578:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800257a:	4b09      	ldr	r3, [pc, #36]	@ (80025a0 <MX_SPI3_Init+0x64>)
 800257c:	2200      	movs	r2, #0
 800257e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002580:	4b07      	ldr	r3, [pc, #28]	@ (80025a0 <MX_SPI3_Init+0x64>)
 8002582:	2200      	movs	r2, #0
 8002584:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002586:	4b06      	ldr	r3, [pc, #24]	@ (80025a0 <MX_SPI3_Init+0x64>)
 8002588:	220a      	movs	r2, #10
 800258a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800258c:	4804      	ldr	r0, [pc, #16]	@ (80025a0 <MX_SPI3_Init+0x64>)
 800258e:	f003 fc33 	bl	8005df8 <HAL_SPI_Init>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002598:	f000 f936 	bl	8002808 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800259c:	bf00      	nop
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	200003b4 	.word	0x200003b4
 80025a4:	40003c00 	.word	0x40003c00

080025a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ae:	f107 0308 	add.w	r3, r7, #8
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	605a      	str	r2, [r3, #4]
 80025b8:	609a      	str	r2, [r3, #8]
 80025ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025bc:	463b      	mov	r3, r7
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025c4:	4b1d      	ldr	r3, [pc, #116]	@ (800263c <MX_TIM2_Init+0x94>)
 80025c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80025ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41;
 80025cc:	4b1b      	ldr	r3, [pc, #108]	@ (800263c <MX_TIM2_Init+0x94>)
 80025ce:	2229      	movs	r2, #41	@ 0x29
 80025d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d2:	4b1a      	ldr	r3, [pc, #104]	@ (800263c <MX_TIM2_Init+0x94>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80025d8:	4b18      	ldr	r3, [pc, #96]	@ (800263c <MX_TIM2_Init+0x94>)
 80025da:	f04f 32ff 	mov.w	r2, #4294967295
 80025de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e0:	4b16      	ldr	r3, [pc, #88]	@ (800263c <MX_TIM2_Init+0x94>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025e6:	4b15      	ldr	r3, [pc, #84]	@ (800263c <MX_TIM2_Init+0x94>)
 80025e8:	2280      	movs	r2, #128	@ 0x80
 80025ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025ec:	4813      	ldr	r0, [pc, #76]	@ (800263c <MX_TIM2_Init+0x94>)
 80025ee:	f003 fead 	bl	800634c <HAL_TIM_Base_Init>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80025f8:	f000 f906 	bl	8002808 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002600:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002602:	f107 0308 	add.w	r3, r7, #8
 8002606:	4619      	mov	r1, r3
 8002608:	480c      	ldr	r0, [pc, #48]	@ (800263c <MX_TIM2_Init+0x94>)
 800260a:	f003 ff57 	bl	80064bc <HAL_TIM_ConfigClockSource>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002614:	f000 f8f8 	bl	8002808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002618:	2300      	movs	r3, #0
 800261a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800261c:	2300      	movs	r3, #0
 800261e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002620:	463b      	mov	r3, r7
 8002622:	4619      	mov	r1, r3
 8002624:	4805      	ldr	r0, [pc, #20]	@ (800263c <MX_TIM2_Init+0x94>)
 8002626:	f004 f957 	bl	80068d8 <HAL_TIMEx_MasterConfigSynchronization>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002630:	f000 f8ea 	bl	8002808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002634:	bf00      	nop
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	2000040c 	.word	0x2000040c

08002640 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	607b      	str	r3, [r7, #4]
 800264a:	4b10      	ldr	r3, [pc, #64]	@ (800268c <MX_DMA_Init+0x4c>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264e:	4a0f      	ldr	r2, [pc, #60]	@ (800268c <MX_DMA_Init+0x4c>)
 8002650:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002654:	6313      	str	r3, [r2, #48]	@ 0x30
 8002656:	4b0d      	ldr	r3, [pc, #52]	@ (800268c <MX_DMA_Init+0x4c>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800265e:	607b      	str	r3, [r7, #4]
 8002660:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002662:	2200      	movs	r2, #0
 8002664:	2100      	movs	r1, #0
 8002666:	2038      	movs	r0, #56	@ 0x38
 8002668:	f002 f8bd 	bl	80047e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800266c:	2038      	movs	r0, #56	@ 0x38
 800266e:	f002 f8d6 	bl	800481e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002672:	2200      	movs	r2, #0
 8002674:	2100      	movs	r1, #0
 8002676:	203a      	movs	r0, #58	@ 0x3a
 8002678:	f002 f8b5 	bl	80047e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800267c:	203a      	movs	r0, #58	@ 0x3a
 800267e:	f002 f8ce 	bl	800481e <HAL_NVIC_EnableIRQ>

}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40023800 	.word	0x40023800

08002690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08a      	sub	sp, #40	@ 0x28
 8002694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002696:	f107 0314 	add.w	r3, r7, #20
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	605a      	str	r2, [r3, #4]
 80026a0:	609a      	str	r2, [r3, #8]
 80026a2:	60da      	str	r2, [r3, #12]
 80026a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	4b42      	ldr	r3, [pc, #264]	@ (80027b4 <MX_GPIO_Init+0x124>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ae:	4a41      	ldr	r2, [pc, #260]	@ (80027b4 <MX_GPIO_Init+0x124>)
 80026b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026b6:	4b3f      	ldr	r3, [pc, #252]	@ (80027b4 <MX_GPIO_Init+0x124>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	4b3b      	ldr	r3, [pc, #236]	@ (80027b4 <MX_GPIO_Init+0x124>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ca:	4a3a      	ldr	r2, [pc, #232]	@ (80027b4 <MX_GPIO_Init+0x124>)
 80026cc:	f043 0304 	orr.w	r3, r3, #4
 80026d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026d2:	4b38      	ldr	r3, [pc, #224]	@ (80027b4 <MX_GPIO_Init+0x124>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	4b34      	ldr	r3, [pc, #208]	@ (80027b4 <MX_GPIO_Init+0x124>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e6:	4a33      	ldr	r2, [pc, #204]	@ (80027b4 <MX_GPIO_Init+0x124>)
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ee:	4b31      	ldr	r3, [pc, #196]	@ (80027b4 <MX_GPIO_Init+0x124>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	60bb      	str	r3, [r7, #8]
 80026f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	607b      	str	r3, [r7, #4]
 80026fe:	4b2d      	ldr	r3, [pc, #180]	@ (80027b4 <MX_GPIO_Init+0x124>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002702:	4a2c      	ldr	r2, [pc, #176]	@ (80027b4 <MX_GPIO_Init+0x124>)
 8002704:	f043 0302 	orr.w	r3, r3, #2
 8002708:	6313      	str	r3, [r2, #48]	@ 0x30
 800270a:	4b2a      	ldr	r3, [pc, #168]	@ (80027b4 <MX_GPIO_Init+0x124>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	607b      	str	r3, [r7, #4]
 8002714:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_NCS_Pin|LCD_RST_Pin|LCD_DC_Pin|LCD_LED_Pin
 8002716:	2201      	movs	r2, #1
 8002718:	f240 110f 	movw	r1, #271	@ 0x10f
 800271c:	4826      	ldr	r0, [pc, #152]	@ (80027b8 <MX_GPIO_Init+0x128>)
 800271e:	f002 fd9d 	bl	800525c <HAL_GPIO_WritePin>
                          |RANGE_1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RANGE_3_Pin|RANGE_2_Pin|RANGE_0_Pin, GPIO_PIN_RESET);
 8002722:	2200      	movs	r2, #0
 8002724:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 8002728:	4823      	ldr	r0, [pc, #140]	@ (80027b8 <MX_GPIO_Init+0x128>)
 800272a:	f002 fd97 	bl	800525c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AD9833_NCS_Pin|MCP3202_NCS_Pin, GPIO_PIN_SET);
 800272e:	2201      	movs	r2, #1
 8002730:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002734:	4821      	ldr	r0, [pc, #132]	@ (80027bc <MX_GPIO_Init+0x12c>)
 8002736:	f002 fd91 	bl	800525c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_NCS_Pin LCD_RST_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_NCS_Pin|LCD_RST_Pin|LCD_DC_Pin;
 800273a:	2307      	movs	r3, #7
 800273c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800273e:	2301      	movs	r3, #1
 8002740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002746:	2303      	movs	r3, #3
 8002748:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800274a:	f107 0314 	add.w	r3, r7, #20
 800274e:	4619      	mov	r1, r3
 8002750:	4819      	ldr	r0, [pc, #100]	@ (80027b8 <MX_GPIO_Init+0x128>)
 8002752:	f002 fbef 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_LED_Pin RANGE_3_Pin RANGE_2_Pin RANGE_1_Pin
                           RANGE_0_Pin */
  GPIO_InitStruct.Pin = LCD_LED_Pin|RANGE_3_Pin|RANGE_2_Pin|RANGE_1_Pin
 8002756:	f44f 7372 	mov.w	r3, #968	@ 0x3c8
 800275a:	617b      	str	r3, [r7, #20]
                          |RANGE_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800275c:	2301      	movs	r3, #1
 800275e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002764:	2300      	movs	r3, #0
 8002766:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002768:	f107 0314 	add.w	r3, r7, #20
 800276c:	4619      	mov	r1, r3
 800276e:	4812      	ldr	r0, [pc, #72]	@ (80027b8 <MX_GPIO_Init+0x128>)
 8002770:	f002 fbe0 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002774:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800277a:	2300      	movs	r3, #0
 800277c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002782:	f107 0314 	add.w	r3, r7, #20
 8002786:	4619      	mov	r1, r3
 8002788:	480d      	ldr	r0, [pc, #52]	@ (80027c0 <MX_GPIO_Init+0x130>)
 800278a:	f002 fbd3 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD9833_NCS_Pin MCP3202_NCS_Pin */
  GPIO_InitStruct.Pin = AD9833_NCS_Pin|MCP3202_NCS_Pin;
 800278e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002794:	2301      	movs	r3, #1
 8002796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	2300      	movs	r3, #0
 800279a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279c:	2303      	movs	r3, #3
 800279e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a0:	f107 0314 	add.w	r3, r7, #20
 80027a4:	4619      	mov	r1, r3
 80027a6:	4805      	ldr	r0, [pc, #20]	@ (80027bc <MX_GPIO_Init+0x12c>)
 80027a8:	f002 fbc4 	bl	8004f34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80027ac:	bf00      	nop
 80027ae:	3728      	adds	r7, #40	@ 0x28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40023800 	.word	0x40023800
 80027b8:	40020800 	.word	0x40020800
 80027bc:	40020000 	.word	0x40020000
 80027c0:	40020400 	.word	0x40020400

080027c4 <HAL_ADC_ConvCpltCallback>:
		frequency = 1000;
	}
	FREQ_UPDATE_NEEDED = 1;
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
	// WE're done collecting samples
	if (hadc == &hadc1) {
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a0a      	ldr	r2, [pc, #40]	@ (80027f8 <HAL_ADC_ConvCpltCallback+0x34>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d103      	bne.n	80027dc <HAL_ADC_ConvCpltCallback+0x18>
		CH1_DONE_SAMPLING = true;
 80027d4:	4b09      	ldr	r3, [pc, #36]	@ (80027fc <HAL_ADC_ConvCpltCallback+0x38>)
 80027d6:	2201      	movs	r2, #1
 80027d8:	701a      	strb	r2, [r3, #0]
	}
	else if (hadc == &hadc2) {
		CH0_DONE_SAMPLING = true;
	}
}
 80027da:	e006      	b.n	80027ea <HAL_ADC_ConvCpltCallback+0x26>
	else if (hadc == &hadc2) {
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a08      	ldr	r2, [pc, #32]	@ (8002800 <HAL_ADC_ConvCpltCallback+0x3c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d102      	bne.n	80027ea <HAL_ADC_ConvCpltCallback+0x26>
		CH0_DONE_SAMPLING = true;
 80027e4:	4b07      	ldr	r3, [pc, #28]	@ (8002804 <HAL_ADC_ConvCpltCallback+0x40>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	701a      	strb	r2, [r3, #0]
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	2000020c 	.word	0x2000020c
 80027fc:	20002395 	.word	0x20002395
 8002800:	20000254 	.word	0x20000254
 8002804:	20002394 	.word	0x20002394

08002808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800280c:	b672      	cpsid	i
}
 800280e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002810:	bf00      	nop
 8002812:	e7fd      	b.n	8002810 <Error_Handler+0x8>

08002814 <__row_col_mult_sum_1__>:
// This file will be used to fit a sine wave to collected data.
#include <math.h>
#include <main.h>

float __row_col_mult_sum_1__(int N, float A1[3][N], int row1, float A2[N][3], int col2){
 8002814:	b4b0      	push	{r4, r5, r7}
 8002816:	b089      	sub	sp, #36	@ 0x24
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
 8002820:	603b      	str	r3, [r7, #0]
 8002822:	68f9      	ldr	r1, [r7, #12]
 8002824:	1e4b      	subs	r3, r1, #1
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	460a      	mov	r2, r1
 800282a:	2300      	movs	r3, #0
 800282c:	4614      	mov	r4, r2
 800282e:	461d      	mov	r5, r3
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	016b      	lsls	r3, r5, #5
 800283a:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800283e:	0162      	lsls	r2, r4, #5
	// Sums the multiple of row row1 in A1 with the corresponding values in column col2 of A2
	float sum = 0;
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < N; i++) {
 8002846:	2300      	movs	r3, #0
 8002848:	61bb      	str	r3, [r7, #24]
 800284a:	e023      	b.n	8002894 <__row_col_mult_sum_1__+0x80>
	    sum += A1[row1][i] * A2[i][col2];
 800284c:	460a      	mov	r2, r1
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	fb02 f303 	mul.w	r3, r2, r3
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	441a      	add	r2, r3
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	ed93 7a00 	vldr	s14, [r3]
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4613      	mov	r3, r2
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	4413      	add	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	461a      	mov	r2, r3
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	441a      	add	r2, r3
 8002874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	edd3 7a00 	vldr	s15, [r3]
 800287e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002882:	ed97 7a07 	vldr	s14, [r7, #28]
 8002886:	ee77 7a27 	vadd.f32	s15, s14, s15
 800288a:	edc7 7a07 	vstr	s15, [r7, #28]
	for (int i = 0; i < N; i++) {
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	3301      	adds	r3, #1
 8002892:	61bb      	str	r3, [r7, #24]
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	429a      	cmp	r2, r3
 800289a:	dbd7      	blt.n	800284c <__row_col_mult_sum_1__+0x38>
	}
	return sum;
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	ee07 3a90 	vmov	s15, r3
}
 80028a2:	eeb0 0a67 	vmov.f32	s0, s15
 80028a6:	3724      	adds	r7, #36	@ 0x24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bcb0      	pop	{r4, r5, r7}
 80028ac:	4770      	bx	lr

080028ae <__row_col_mult_sum_2__>:

float __row_col_mult_sum_2__(int N, float A[3][N], int row1, float B[]) {
 80028ae:	b4b0      	push	{r4, r5, r7}
 80028b0:	b089      	sub	sp, #36	@ 0x24
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	60f8      	str	r0, [r7, #12]
 80028b6:	60b9      	str	r1, [r7, #8]
 80028b8:	607a      	str	r2, [r7, #4]
 80028ba:	603b      	str	r3, [r7, #0]
 80028bc:	68f9      	ldr	r1, [r7, #12]
 80028be:	1e4b      	subs	r3, r1, #1
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	460a      	mov	r2, r1
 80028c4:	2300      	movs	r3, #0
 80028c6:	4614      	mov	r4, r2
 80028c8:	461d      	mov	r5, r3
 80028ca:	f04f 0200 	mov.w	r2, #0
 80028ce:	f04f 0300 	mov.w	r3, #0
 80028d2:	016b      	lsls	r3, r5, #5
 80028d4:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80028d8:	0162      	lsls	r2, r4, #5

    float sum = 0;
 80028da:	f04f 0300 	mov.w	r3, #0
 80028de:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < N; i++) {
 80028e0:	2300      	movs	r3, #0
 80028e2:	61bb      	str	r3, [r7, #24]
 80028e4:	e01c      	b.n	8002920 <__row_col_mult_sum_2__+0x72>
        sum += A[row1][i] * B[i];
 80028e6:	460a      	mov	r2, r1
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	fb02 f303 	mul.w	r3, r2, r3
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	441a      	add	r2, r3
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	ed93 7a00 	vldr	s14, [r3]
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	4413      	add	r3, r2
 8002906:	edd3 7a00 	vldr	s15, [r3]
 800290a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800290e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002912:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002916:	edc7 7a07 	vstr	s15, [r7, #28]
    for (int i = 0; i < N; i++) {
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	3301      	adds	r3, #1
 800291e:	61bb      	str	r3, [r7, #24]
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	429a      	cmp	r2, r3
 8002926:	dbde      	blt.n	80028e6 <__row_col_mult_sum_2__+0x38>
    }
    return sum;
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	ee07 3a90 	vmov	s15, r3
}
 800292e:	eeb0 0a67 	vmov.f32	s0, s15
 8002932:	3724      	adds	r7, #36	@ 0x24
 8002934:	46bd      	mov	sp, r7
 8002936:	bcb0      	pop	{r4, r5, r7}
 8002938:	4770      	bx	lr

0800293a <ATA_Nx3>:
/* This function takes the input Nx3 matrix, then multiplies it by its transpose
* O = (A Transpose) * A
* The result of this will be a 3x3 matrix. The data will be stored in a two-dimensional
* array that is passed to the function.
*/
void ATA_Nx3(const int N, float A[N][3], float O[3][3]) {
 800293a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800293e:	b093      	sub	sp, #76	@ 0x4c
 8002940:	af02      	add	r7, sp, #8
 8002942:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002944:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002946:	627a      	str	r2, [r7, #36]	@ 0x24
 8002948:	466b      	mov	r3, sp
 800294a:	623b      	str	r3, [r7, #32]
    // I'm not using input validation. Make sure that the input is correct.
    float AT[3][N];
 800294c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800294e:	3b01      	subs	r3, #1
 8002950:	637b      	str	r3, [r7, #52]	@ 0x34
 8002952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002954:	2200      	movs	r2, #0
 8002956:	469a      	mov	sl, r3
 8002958:	4693      	mov	fp, r2
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	f04f 0300 	mov.w	r3, #0
 8002962:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8002966:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 800296a:	ea4f 124a 	mov.w	r2, sl, lsl #5
 800296e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002970:	009e      	lsls	r6, r3, #2
 8002972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002974:	2200      	movs	r2, #0
 8002976:	61bb      	str	r3, [r7, #24]
 8002978:	61fa      	str	r2, [r7, #28]
 800297a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800297e:	4652      	mov	r2, sl
 8002980:	465b      	mov	r3, fp
 8002982:	1891      	adds	r1, r2, r2
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	415b      	adcs	r3, r3
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800298e:	4651      	mov	r1, sl
 8002990:	eb12 0801 	adds.w	r8, r2, r1
 8002994:	4659      	mov	r1, fp
 8002996:	eb43 0901 	adc.w	r9, r3, r1
 800299a:	f04f 0200 	mov.w	r2, #0
 800299e:	f04f 0300 	mov.w	r3, #0
 80029a2:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80029a6:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80029aa:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80029ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029b0:	2200      	movs	r2, #0
 80029b2:	613b      	str	r3, [r7, #16]
 80029b4:	617a      	str	r2, [r7, #20]
 80029b6:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80029ba:	4642      	mov	r2, r8
 80029bc:	464b      	mov	r3, r9
 80029be:	1891      	adds	r1, r2, r2
 80029c0:	6039      	str	r1, [r7, #0]
 80029c2:	415b      	adcs	r3, r3
 80029c4:	607b      	str	r3, [r7, #4]
 80029c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029ca:	4641      	mov	r1, r8
 80029cc:	1854      	adds	r4, r2, r1
 80029ce:	4649      	mov	r1, r9
 80029d0:	eb43 0101 	adc.w	r1, r3, r1
 80029d4:	460d      	mov	r5, r1
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	016b      	lsls	r3, r5, #5
 80029e0:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80029e4:	0162      	lsls	r2, r4, #5
 80029e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029e8:	4613      	mov	r3, r2
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	4413      	add	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	3307      	adds	r3, #7
 80029f2:	08db      	lsrs	r3, r3, #3
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	ebad 0d03 	sub.w	sp, sp, r3
 80029fa:	ab02      	add	r3, sp, #8
 80029fc:	3303      	adds	r3, #3
 80029fe:	089b      	lsrs	r3, r3, #2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	633b      	str	r3, [r7, #48]	@ 0x30
    // correct i think
    for (int i = 0; i < N; i++) {
 8002a04:	2300      	movs	r3, #0
 8002a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a08:	e031      	b.n	8002a6e <ATA_Nx3+0x134>
        AT[0][i] = A[i][0];
 8002a0a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	4413      	add	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	461a      	mov	r2, r3
 8002a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a18:	4413      	add	r3, r2
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002a1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	440b      	add	r3, r1
 8002a24:	601a      	str	r2, [r3, #0]
        AT[1][i] = A[i][1];
 8002a26:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a28:	4613      	mov	r3, r2
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	461a      	mov	r2, r3
 8002a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a34:	4413      	add	r3, r2
 8002a36:	08b0      	lsrs	r0, r6, #2
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002a3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a3e:	4403      	add	r3, r0
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	440b      	add	r3, r1
 8002a44:	601a      	str	r2, [r3, #0]
        AT[2][i] = A[i][2];
 8002a46:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a48:	4613      	mov	r3, r2
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	461a      	mov	r2, r3
 8002a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a54:	441a      	add	r2, r3
 8002a56:	08b3      	lsrs	r3, r6, #2
 8002a58:	6892      	ldr	r2, [r2, #8]
 8002a5a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002a5c:	0058      	lsls	r0, r3, #1
 8002a5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a60:	4403      	add	r3, r0
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	440b      	add	r3, r1
 8002a66:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < N; i++) {
 8002a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a6e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a72:	429a      	cmp	r2, r3
 8002a74:	dbc9      	blt.n	8002a0a <ATA_Nx3+0xd0>
    }

    for (int i = 0; i < 3; i++) {
 8002a76:	2300      	movs	r3, #0
 8002a78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a7a:	e036      	b.n	8002aea <ATA_Nx3+0x1b0>
        O[0][i] = __row_col_mult_sum_1__(N, AT, 0, A, i);
 8002a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a82:	2200      	movs	r2, #0
 8002a84:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002a86:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002a88:	f7ff fec4 	bl	8002814 <__row_col_mult_sum_1__>
 8002a8c:	eef0 7a40 	vmov.f32	s15, s0
 8002a90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	edc3 7a00 	vstr	s15, [r3]
        O[1][i] = __row_col_mult_sum_1__(N, AT, 1, A, i);
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9e:	f103 040c 	add.w	r4, r3, #12
 8002aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002aac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002aae:	f7ff feb1 	bl	8002814 <__row_col_mult_sum_1__>
 8002ab2:	eef0 7a40 	vmov.f32	s15, s0
 8002ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4423      	add	r3, r4
 8002abc:	edc3 7a00 	vstr	s15, [r3]
        O[2][i] = __row_col_mult_sum_1__(N, AT, 2, A, i);
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac2:	f103 0418 	add.w	r4, r3, #24
 8002ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002acc:	2202      	movs	r2, #2
 8002ace:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002ad0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002ad2:	f7ff fe9f 	bl	8002814 <__row_col_mult_sum_1__>
 8002ad6:	eef0 7a40 	vmov.f32	s15, s0
 8002ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4423      	add	r3, r4
 8002ae0:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++) {
 8002ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	ddc5      	ble.n	8002a7c <ATA_Nx3+0x142>
    }
    return;
 8002af0:	bf00      	nop
 8002af2:	f8d7 d020 	ldr.w	sp, [r7, #32]
}
 8002af6:	3744      	adds	r7, #68	@ 0x44
 8002af8:	46bd      	mov	sp, r7
 8002afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002afe <ATB_Nx3_Nx1>:

void ATB_Nx3_Nx1(int N, float A[N][3], float B[], float O[3][1]) {
 8002afe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b02:	b093      	sub	sp, #76	@ 0x4c
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6378      	str	r0, [r7, #52]	@ 0x34
 8002b08:	6339      	str	r1, [r7, #48]	@ 0x30
 8002b0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b0e:	466b      	mov	r3, sp
 8002b10:	607b      	str	r3, [r7, #4]
    // Here, B is treated as a column vecter, though the input should be in row vector form.

    // I'm not using input validation. Make sure that the input is correct.
    float AT[3][N];
 8002b12:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002b14:	1e4b      	subs	r3, r1, #1
 8002b16:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b18:	460a      	mov	r2, r1
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	4692      	mov	sl, r2
 8002b1e:	469b      	mov	fp, r3
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	f04f 0300 	mov.w	r3, #0
 8002b28:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8002b2c:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8002b30:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8002b34:	460b      	mov	r3, r1
 8002b36:	009e      	lsls	r6, r3, #2
 8002b38:	460a      	mov	r2, r1
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	623a      	str	r2, [r7, #32]
 8002b3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b40:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 8002b44:	4652      	mov	r2, sl
 8002b46:	465b      	mov	r3, fp
 8002b48:	1890      	adds	r0, r2, r2
 8002b4a:	6138      	str	r0, [r7, #16]
 8002b4c:	415b      	adcs	r3, r3
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002b54:	4650      	mov	r0, sl
 8002b56:	eb12 0800 	adds.w	r8, r2, r0
 8002b5a:	4658      	mov	r0, fp
 8002b5c:	eb43 0900 	adc.w	r9, r3, r0
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8002b6c:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8002b70:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8002b74:	460a      	mov	r2, r1
 8002b76:	2300      	movs	r3, #0
 8002b78:	61ba      	str	r2, [r7, #24]
 8002b7a:	61fb      	str	r3, [r7, #28]
 8002b7c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002b80:	4642      	mov	r2, r8
 8002b82:	464b      	mov	r3, r9
 8002b84:	1890      	adds	r0, r2, r2
 8002b86:	60b8      	str	r0, [r7, #8]
 8002b88:	415b      	adcs	r3, r3
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b90:	4640      	mov	r0, r8
 8002b92:	1814      	adds	r4, r2, r0
 8002b94:	4648      	mov	r0, r9
 8002b96:	eb43 0000 	adc.w	r0, r3, r0
 8002b9a:	4605      	mov	r5, r0
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	f04f 0300 	mov.w	r3, #0
 8002ba4:	016b      	lsls	r3, r5, #5
 8002ba6:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002baa:	0162      	lsls	r2, r4, #5
 8002bac:	460a      	mov	r2, r1
 8002bae:	4613      	mov	r3, r2
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	4413      	add	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	3307      	adds	r3, #7
 8002bb8:	08db      	lsrs	r3, r3, #3
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	ebad 0d03 	sub.w	sp, sp, r3
 8002bc0:	466b      	mov	r3, sp
 8002bc2:	3303      	adds	r3, #3
 8002bc4:	089b      	lsrs	r3, r3, #2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (int i = 0; i < N; i++) {
 8002bca:	2300      	movs	r3, #0
 8002bcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bce:	e031      	b.n	8002c34 <ATB_Nx3_Nx1+0x136>
        AT[0][i] = A[i][0];
 8002bd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	4413      	add	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	461a      	mov	r2, r3
 8002bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bde:	4413      	add	r3, r2
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002be4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	601a      	str	r2, [r3, #0]
        AT[1][i] = A[i][1];
 8002bec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002bee:	4613      	mov	r3, r2
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	4413      	add	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bfa:	4413      	add	r3, r2
 8002bfc:	08b0      	lsrs	r0, r6, #2
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002c02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c04:	4403      	add	r3, r0
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	601a      	str	r2, [r3, #0]
        AT[2][i] = A[i][2];
 8002c0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c0e:	4613      	mov	r3, r2
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	4413      	add	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	461a      	mov	r2, r3
 8002c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c1a:	441a      	add	r2, r3
 8002c1c:	08b3      	lsrs	r3, r6, #2
 8002c1e:	6892      	ldr	r2, [r2, #8]
 8002c20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002c22:	0058      	lsls	r0, r3, #1
 8002c24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c26:	4403      	add	r3, r0
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < N; i++) {
 8002c2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c30:	3301      	adds	r3, #1
 8002c32:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	dbc9      	blt.n	8002bd0 <ATB_Nx3_Nx1+0xd2>
    }
    O[0][0] = __row_col_mult_sum_2__(N, AT, 0, B);
 8002c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c3e:	2200      	movs	r2, #0
 8002c40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002c42:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002c44:	f7ff fe33 	bl	80028ae <__row_col_mult_sum_2__>
 8002c48:	eef0 7a40 	vmov.f32	s15, s0
 8002c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c4e:	edc3 7a00 	vstr	s15, [r3]
    O[1][0] = __row_col_mult_sum_2__(N, AT, 1, B);
 8002c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c54:	1d1c      	adds	r4, r3, #4
 8002c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c58:	2201      	movs	r2, #1
 8002c5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002c5c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002c5e:	f7ff fe26 	bl	80028ae <__row_col_mult_sum_2__>
 8002c62:	eef0 7a40 	vmov.f32	s15, s0
 8002c66:	edc4 7a00 	vstr	s15, [r4]
    O[2][0] = __row_col_mult_sum_2__(N, AT, 2, B);
 8002c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c6c:	f103 0408 	add.w	r4, r3, #8
 8002c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c72:	2202      	movs	r2, #2
 8002c74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002c76:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002c78:	f7ff fe19 	bl	80028ae <__row_col_mult_sum_2__>
 8002c7c:	eef0 7a40 	vmov.f32	s15, s0
 8002c80:	edc4 7a00 	vstr	s15, [r4]

    return;
 8002c84:	bf00      	nop
 8002c86:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
 8002c8a:	374c      	adds	r7, #76	@ 0x4c
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002c92 <invert_3x3>:

// Function is verified to work
void invert_3x3(float A[3][3], float O[3][3]) {
 8002c92:	b480      	push	{r7}
 8002c94:	b093      	sub	sp, #76	@ 0x4c
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
 8002c9a:	6039      	str	r1, [r7, #0]
    // Will take the contents of matrix A and place the matrix inverse in O.

    // Find the cofactor matrix of A, place contents in O
    O[0][0] = A[1][1] * A[2][2] - A[1][2] * A[2][1]; // X
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	330c      	adds	r3, #12
 8002ca0:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3318      	adds	r3, #24
 8002ca8:	edd3 7a02 	vldr	s15, [r3, #8]
 8002cac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	330c      	adds	r3, #12
 8002cb4:	edd3 6a02 	vldr	s13, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3318      	adds	r3, #24
 8002cbc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002cc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	edc3 7a00 	vstr	s15, [r3]
    O[0][1] = -(A[1][0] * A[2][2] - A[1][2] * A[2][0]); // X
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	330c      	adds	r3, #12
 8002cd2:	ed93 7a00 	vldr	s14, [r3]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3318      	adds	r3, #24
 8002cda:	edd3 7a02 	vldr	s15, [r3, #8]
 8002cde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	330c      	adds	r3, #12
 8002ce6:	edd3 6a02 	vldr	s13, [r3, #8]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3318      	adds	r3, #24
 8002cee:	edd3 7a00 	vldr	s15, [r3]
 8002cf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cfa:	eef1 7a67 	vneg.f32	s15, s15
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	edc3 7a01 	vstr	s15, [r3, #4]
    O[0][2] = A[1][0] * A[2][1] - A[1][1] * A[2][0]; // X
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	330c      	adds	r3, #12
 8002d08:	ed93 7a00 	vldr	s14, [r3]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3318      	adds	r3, #24
 8002d10:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	330c      	adds	r3, #12
 8002d1c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3318      	adds	r3, #24
 8002d24:	edd3 7a00 	vldr	s15, [r3]
 8002d28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	edc3 7a02 	vstr	s15, [r3, #8]

    O[1][0] = -(A[0][1] * A[2][2] - A[0][2] * A[2][1]); // X
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3318      	adds	r3, #24
 8002d40:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	edd3 6a02 	vldr	s13, [r3, #8]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	3318      	adds	r3, #24
 8002d52:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	330c      	adds	r3, #12
 8002d62:	eef1 7a67 	vneg.f32	s15, s15
 8002d66:	edc3 7a00 	vstr	s15, [r3]
    O[1][1] = A[0][0] * A[2][2] - A[0][2] * A[2][0]; // X
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	ed93 7a00 	vldr	s14, [r3]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3318      	adds	r3, #24
 8002d74:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3318      	adds	r3, #24
 8002d86:	edd3 7a00 	vldr	s15, [r3]
 8002d8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	330c      	adds	r3, #12
 8002d92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d96:	edc3 7a01 	vstr	s15, [r3, #4]
    O[1][2] = -(A[0][0] * A[2][1] - A[0][1] * A[2][0]); // X
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	ed93 7a00 	vldr	s14, [r3]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3318      	adds	r3, #24
 8002da4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002da8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	edd3 6a01 	vldr	s13, [r3, #4]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	3318      	adds	r3, #24
 8002db6:	edd3 7a00 	vldr	s15, [r3]
 8002dba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	330c      	adds	r3, #12
 8002dc6:	eef1 7a67 	vneg.f32	s15, s15
 8002dca:	edc3 7a02 	vstr	s15, [r3, #8]

    O[2][0] = A[0][1] * A[1][2] - A[0][2] * A[1][1]; // X
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	ed93 7a01 	vldr	s14, [r3, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	330c      	adds	r3, #12
 8002dd8:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ddc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	edd3 6a02 	vldr	s13, [r3, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	330c      	adds	r3, #12
 8002dea:	edd3 7a01 	vldr	s15, [r3, #4]
 8002dee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	3318      	adds	r3, #24
 8002df6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dfa:	edc3 7a00 	vstr	s15, [r3]
    O[2][1] = -(A[0][0] * A[1][2] - A[0][2] * A[1][0]); // X
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	ed93 7a00 	vldr	s14, [r3]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	330c      	adds	r3, #12
 8002e08:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	edd3 6a02 	vldr	s13, [r3, #8]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	330c      	adds	r3, #12
 8002e1a:	edd3 7a00 	vldr	s15, [r3]
 8002e1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	3318      	adds	r3, #24
 8002e2a:	eef1 7a67 	vneg.f32	s15, s15
 8002e2e:	edc3 7a01 	vstr	s15, [r3, #4]
    O[2][2] = A[0][0] * A[1][1] - A[0][1] * A[1][0]; // X
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	ed93 7a00 	vldr	s14, [r3]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	330c      	adds	r3, #12
 8002e3c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	edd3 6a01 	vldr	s13, [r3, #4]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	330c      	adds	r3, #12
 8002e4e:	edd3 7a00 	vldr	s15, [r3]
 8002e52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	3318      	adds	r3, #24
 8002e5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e5e:	edc3 7a02 	vstr	s15, [r3, #8]

    // Find the Adjoint matrix ( Transpose the cofactor matrix )
    float OT[3][3];
    for (int i = 0; i < 3; i++) {
 8002e62:	2300      	movs	r3, #0
 8002e64:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e66:	e031      	b.n	8002ecc <invert_3x3+0x23a>
        OT[0][i] = O[i][0];
 8002e68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	4413      	add	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	461a      	mov	r2, r3
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	4413      	add	r3, r2
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	3348      	adds	r3, #72	@ 0x48
 8002e80:	443b      	add	r3, r7
 8002e82:	3b40      	subs	r3, #64	@ 0x40
 8002e84:	601a      	str	r2, [r3, #0]
        OT[1][i] = O[i][1];
 8002e86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e88:	4613      	mov	r3, r2
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	4413      	add	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	461a      	mov	r2, r3
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	4413      	add	r3, r2
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e9a:	3303      	adds	r3, #3
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	3348      	adds	r3, #72	@ 0x48
 8002ea0:	443b      	add	r3, r7
 8002ea2:	3b40      	subs	r3, #64	@ 0x40
 8002ea4:	601a      	str	r2, [r3, #0]
        OT[2][i] = O[i][2];
 8002ea6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	4413      	add	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002eba:	3306      	adds	r3, #6
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	3348      	adds	r3, #72	@ 0x48
 8002ec0:	443b      	add	r3, r7
 8002ec2:	3b40      	subs	r3, #64	@ 0x40
 8002ec4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8002ec6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ec8:	3301      	adds	r3, #1
 8002eca:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ecc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	ddca      	ble.n	8002e68 <invert_3x3+0x1d6>
    }

    // Replace contents in O
    for (int i = 0; i < 3; i++) {
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ed6:	e038      	b.n	8002f4a <invert_3x3+0x2b8>
        O[i][0] = OT[i][0];
 8002ed8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002eda:	4613      	mov	r3, r2
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	4413      	add	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	1899      	adds	r1, r3, r2
 8002ee8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002eea:	4613      	mov	r3, r2
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	4413      	add	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	3348      	adds	r3, #72	@ 0x48
 8002ef4:	443b      	add	r3, r7
 8002ef6:	3b40      	subs	r3, #64	@ 0x40
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	600b      	str	r3, [r1, #0]
        O[i][1] = OT[i][1];
 8002efc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002efe:	4613      	mov	r3, r2
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	4413      	add	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	461a      	mov	r2, r3
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	1899      	adds	r1, r3, r2
 8002f0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f0e:	4613      	mov	r3, r2
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	4413      	add	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	3348      	adds	r3, #72	@ 0x48
 8002f18:	443b      	add	r3, r7
 8002f1a:	3b3c      	subs	r3, #60	@ 0x3c
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	604b      	str	r3, [r1, #4]
        O[i][2] = OT[i][2];
 8002f20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f22:	4613      	mov	r3, r2
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	4413      	add	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	1899      	adds	r1, r3, r2
 8002f30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f32:	4613      	mov	r3, r2
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	4413      	add	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	3348      	adds	r3, #72	@ 0x48
 8002f3c:	443b      	add	r3, r7
 8002f3e:	3b38      	subs	r3, #56	@ 0x38
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	608b      	str	r3, [r1, #8]
    for (int i = 0; i < 3; i++) {
 8002f44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f46:	3301      	adds	r3, #1
 8002f48:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	ddc3      	ble.n	8002ed8 <invert_3x3+0x246>
    }

    // Find determinant of A, divide contents of O and replace
    float d1 = A[0][0] * (A[1][1] * A[2][2] - A[1][2] * A[2][1]);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	ed93 7a00 	vldr	s14, [r3]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	330c      	adds	r3, #12
 8002f5a:	edd3 6a01 	vldr	s13, [r3, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	3318      	adds	r3, #24
 8002f62:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f66:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	330c      	adds	r3, #12
 8002f6e:	ed93 6a02 	vldr	s12, [r3, #8]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3318      	adds	r3, #24
 8002f76:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f7a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002f7e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f86:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float d2 = -A[0][1] * (A[1][0] * A[2][2] - A[1][2] * A[2][0]);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f90:	eeb1 7a67 	vneg.f32	s14, s15
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	330c      	adds	r3, #12
 8002f98:	edd3 6a00 	vldr	s13, [r3]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3318      	adds	r3, #24
 8002fa0:	edd3 7a02 	vldr	s15, [r3, #8]
 8002fa4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	330c      	adds	r3, #12
 8002fac:	ed93 6a02 	vldr	s12, [r3, #8]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3318      	adds	r3, #24
 8002fb4:	edd3 7a00 	vldr	s15, [r3]
 8002fb8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002fbc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fc4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    float d3 = A[0][2] * (A[1][0] * A[2][1] - A[1][1] * A[2][0]);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	ed93 7a02 	vldr	s14, [r3, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	330c      	adds	r3, #12
 8002fd2:	edd3 6a00 	vldr	s13, [r3]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3318      	adds	r3, #24
 8002fda:	edd3 7a01 	vldr	s15, [r3, #4]
 8002fde:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	330c      	adds	r3, #12
 8002fe6:	ed93 6a01 	vldr	s12, [r3, #4]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3318      	adds	r3, #24
 8002fee:	edd3 7a00 	vldr	s15, [r3]
 8002ff2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002ff6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ffe:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    float determinant = d1 + d2 + d3;
 8003002:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8003006:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800300a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800300e:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003012:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003016:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    // Technically I don't have to do the additional calculations of
    // the cofactors but I'm leaving it for clarity

    if (determinant == 0.0) {
 800301a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800301e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003026:	d041      	beq.n	80030ac <invert_3x3+0x41a>
        return;
    }

    for (int i = 0; i < 3; i++) {
 8003028:	2300      	movs	r3, #0
 800302a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800302c:	e03a      	b.n	80030a4 <invert_3x3+0x412>
        O[0][i] /= determinant;
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	edd3 6a00 	vldr	s13, [r3]
 800303a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800303e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	edc3 7a00 	vstr	s15, [r3]
        O[1][i] /= determinant;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	f103 020c 	add.w	r2, r3, #12
 8003054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	edd3 6a00 	vldr	s13, [r3]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	f103 020c 	add.w	r2, r3, #12
 8003064:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003068:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800306c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	edc3 7a00 	vstr	s15, [r3]
        O[2][i] /= determinant;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	f103 0218 	add.w	r2, r3, #24
 800307c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	edd3 6a00 	vldr	s13, [r3]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	f103 0218 	add.w	r2, r3, #24
 800308c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003090:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003094:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++) {
 800309e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030a0:	3301      	adds	r3, #1
 80030a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	ddc1      	ble.n	800302e <invert_3x3+0x39c>
 80030aa:	e000      	b.n	80030ae <invert_3x3+0x41c>
        return;
 80030ac:	bf00      	nop
    }
}
 80030ae:	374c      	adds	r7, #76	@ 0x4c
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <Matrix_Multiply_3x3_3x1>:


void Matrix_Multiply_3x3_3x1(float A[3][3], float B[3][1], float O[3][1]) {
 80030b8:	b480      	push	{r7}
 80030ba:	b087      	sub	sp, #28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 3; i++) {
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	e035      	b.n	8003136 <Matrix_Multiply_3x3_3x1+0x7e>
        O[i][0] = 0; // Initialize the output element to zero
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	4413      	add	r3, r2
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < 3; j++) {
 80030d8:	2300      	movs	r3, #0
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	e025      	b.n	800312a <Matrix_Multiply_3x3_3x1+0x72>
            O[i][0] += A[i][j] * B[j][0];
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	4413      	add	r3, r2
 80030e6:	ed93 7a00 	vldr	s14, [r3]
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	4613      	mov	r3, r2
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	461a      	mov	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	441a      	add	r2, r3
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	edd3 6a00 	vldr	s13, [r3]
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	4413      	add	r3, r2
 800310c:	edd3 7a00 	vldr	s15, [r3]
 8003110:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	4413      	add	r3, r2
 800311c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003120:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	3301      	adds	r3, #1
 8003128:	613b      	str	r3, [r7, #16]
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	2b02      	cmp	r3, #2
 800312e:	ddd6      	ble.n	80030de <Matrix_Multiply_3x3_3x1+0x26>
    for (int i = 0; i < 3; i++) {
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	3301      	adds	r3, #1
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2b02      	cmp	r3, #2
 800313a:	ddc6      	ble.n	80030ca <Matrix_Multiply_3x3_3x1+0x12>
        }
    }
}
 800313c:	bf00      	nop
 800313e:	bf00      	nop
 8003140:	371c      	adds	r7, #28
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	0000      	movs	r0, r0
 800314c:	0000      	movs	r0, r0
	...

08003150 <least_squares_sine>:

void least_squares_sine(int N, float frequency, float sampleRate, float offset_us, float data[],
    float* bestAmplitude, float* bestPhase, float* bestOffset) {
 8003150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003154:	b0ab      	sub	sp, #172	@ 0xac
 8003156:	af00      	add	r7, sp, #0
 8003158:	6378      	str	r0, [r7, #52]	@ 0x34
 800315a:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
 800315e:	edc7 0a0b 	vstr	s1, [r7, #44]	@ 0x2c
 8003162:	ed87 1a0a 	vstr	s2, [r7, #40]	@ 0x28
 8003166:	6279      	str	r1, [r7, #36]	@ 0x24
 8003168:	623a      	str	r2, [r7, #32]
 800316a:	61fb      	str	r3, [r7, #28]
 800316c:	466b      	mov	r3, sp
 800316e:	461e      	mov	r6, r3
    float basis[N][3];
 8003170:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003172:	1e4b      	subs	r3, r1, #1
 8003174:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003178:	460a      	mov	r2, r1
 800317a:	2300      	movs	r3, #0
 800317c:	613a      	str	r2, [r7, #16]
 800317e:	617b      	str	r3, [r7, #20]
 8003180:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003184:	1890      	adds	r0, r2, r2
 8003186:	60b8      	str	r0, [r7, #8]
 8003188:	415b      	adcs	r3, r3
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003190:	6938      	ldr	r0, [r7, #16]
 8003192:	eb12 0800 	adds.w	r8, r2, r0
 8003196:	6978      	ldr	r0, [r7, #20]
 8003198:	eb43 0900 	adc.w	r9, r3, r0
 800319c:	f04f 0200 	mov.w	r2, #0
 80031a0:	f04f 0300 	mov.w	r3, #0
 80031a4:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80031a8:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80031ac:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80031b0:	460a      	mov	r2, r1
 80031b2:	2300      	movs	r3, #0
 80031b4:	4692      	mov	sl, r2
 80031b6:	469b      	mov	fp, r3
 80031b8:	4652      	mov	r2, sl
 80031ba:	465b      	mov	r3, fp
 80031bc:	1890      	adds	r0, r2, r2
 80031be:	6038      	str	r0, [r7, #0]
 80031c0:	415b      	adcs	r3, r3
 80031c2:	607b      	str	r3, [r7, #4]
 80031c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031c8:	eb12 040a 	adds.w	r4, r2, sl
 80031cc:	eb43 050b 	adc.w	r5, r3, fp
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	016b      	lsls	r3, r5, #5
 80031da:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80031de:	0162      	lsls	r2, r4, #5
 80031e0:	460a      	mov	r2, r1
 80031e2:	4613      	mov	r3, r2
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	4413      	add	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	3307      	adds	r3, #7
 80031ec:	08db      	lsrs	r3, r3, #3
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	ebad 0d03 	sub.w	sp, sp, r3
 80031f4:	466b      	mov	r3, sp
 80031f6:	3303      	adds	r3, #3
 80031f8:	089b      	lsrs	r3, r3, #2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    for (int i = 0; i < N; i++) {
 8003200:	2300      	movs	r3, #0
 8003202:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003206:	e0a6      	b.n	8003356 <least_squares_sine+0x206>
        basis[i][0] = sin(2 * M_PI * frequency * (((float)i / sampleRate)+ offset_us / 1e6));
 8003208:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800320a:	f7fd f9bd 	bl	8000588 <__aeabi_f2d>
 800320e:	a388      	add	r3, pc, #544	@ (adr r3, 8003430 <least_squares_sine+0x2e0>)
 8003210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003214:	f7fd fa10 	bl	8000638 <__aeabi_dmul>
 8003218:	4602      	mov	r2, r0
 800321a:	460b      	mov	r3, r1
 800321c:	4690      	mov	r8, r2
 800321e:	4699      	mov	r9, r3
 8003220:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003224:	ee07 3a90 	vmov	s15, r3
 8003228:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800322c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003230:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003234:	ee16 0a90 	vmov	r0, s13
 8003238:	f7fd f9a6 	bl	8000588 <__aeabi_f2d>
 800323c:	4604      	mov	r4, r0
 800323e:	460d      	mov	r5, r1
 8003240:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003242:	f7fd f9a1 	bl	8000588 <__aeabi_f2d>
 8003246:	a37c      	add	r3, pc, #496	@ (adr r3, 8003438 <least_squares_sine+0x2e8>)
 8003248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324c:	f7fd fb1e 	bl	800088c <__aeabi_ddiv>
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	4620      	mov	r0, r4
 8003256:	4629      	mov	r1, r5
 8003258:	f7fd f838 	bl	80002cc <__adddf3>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4640      	mov	r0, r8
 8003262:	4649      	mov	r1, r9
 8003264:	f7fd f9e8 	bl	8000638 <__aeabi_dmul>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	ec43 2b17 	vmov	d7, r2, r3
 8003270:	eeb0 0a47 	vmov.f32	s0, s14
 8003274:	eef0 0a67 	vmov.f32	s1, s15
 8003278:	f003 fdce 	bl	8006e18 <sin>
 800327c:	ec53 2b10 	vmov	r2, r3, d0
 8003280:	4610      	mov	r0, r2
 8003282:	4619      	mov	r1, r3
 8003284:	f7fd fcb0 	bl	8000be8 <__aeabi_d2f>
 8003288:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 800328c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003290:	4613      	mov	r3, r2
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	4413      	add	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	6018      	str	r0, [r3, #0]
        basis[i][1] = cos(2 * M_PI * frequency * (((float)i / sampleRate)+ offset_us / 1e6));
 800329c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800329e:	f7fd f973 	bl	8000588 <__aeabi_f2d>
 80032a2:	a363      	add	r3, pc, #396	@ (adr r3, 8003430 <least_squares_sine+0x2e0>)
 80032a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a8:	f7fd f9c6 	bl	8000638 <__aeabi_dmul>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	4690      	mov	r8, r2
 80032b2:	4699      	mov	r9, r3
 80032b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80032b8:	ee07 3a90 	vmov	s15, r3
 80032bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032c0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80032c4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80032c8:	ee16 0a90 	vmov	r0, s13
 80032cc:	f7fd f95c 	bl	8000588 <__aeabi_f2d>
 80032d0:	4604      	mov	r4, r0
 80032d2:	460d      	mov	r5, r1
 80032d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032d6:	f7fd f957 	bl	8000588 <__aeabi_f2d>
 80032da:	a357      	add	r3, pc, #348	@ (adr r3, 8003438 <least_squares_sine+0x2e8>)
 80032dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e0:	f7fd fad4 	bl	800088c <__aeabi_ddiv>
 80032e4:	4602      	mov	r2, r0
 80032e6:	460b      	mov	r3, r1
 80032e8:	4620      	mov	r0, r4
 80032ea:	4629      	mov	r1, r5
 80032ec:	f7fc ffee 	bl	80002cc <__adddf3>
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	4640      	mov	r0, r8
 80032f6:	4649      	mov	r1, r9
 80032f8:	f7fd f99e 	bl	8000638 <__aeabi_dmul>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	ec43 2b17 	vmov	d7, r2, r3
 8003304:	eeb0 0a47 	vmov.f32	s0, s14
 8003308:	eef0 0a67 	vmov.f32	s1, s15
 800330c:	f003 fd28 	bl	8006d60 <cos>
 8003310:	ec53 2b10 	vmov	r2, r3, d0
 8003314:	4610      	mov	r0, r2
 8003316:	4619      	mov	r1, r3
 8003318:	f7fd fc66 	bl	8000be8 <__aeabi_d2f>
 800331c:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003320:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003324:	4613      	mov	r3, r2
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	4413      	add	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	3304      	adds	r3, #4
 8003330:	6018      	str	r0, [r3, #0]
        basis[i][2] = 1;
 8003332:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003336:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800333a:	4613      	mov	r3, r2
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	4413      	add	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	440b      	add	r3, r1
 8003344:	3308      	adds	r3, #8
 8003346:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800334a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < N; i++) {
 800334c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003350:	3301      	adds	r3, #1
 8003352:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003356:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800335a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800335c:	429a      	cmp	r2, r3
 800335e:	f6ff af53 	blt.w	8003208 <least_squares_sine+0xb8>
    }

    float ATA[3][3];
    ATA_Nx3(N, basis, ATA); // Same
 8003362:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8003366:	461a      	mov	r2, r3
 8003368:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 800336c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800336e:	f7ff fae4 	bl	800293a <ATA_Nx3>

    float ATAI[3][3];
    invert_3x3(ATA, ATAI); // Same
 8003372:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8003376:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800337a:	4611      	mov	r1, r2
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff fc88 	bl	8002c92 <invert_3x3>

    float ATB[3][1];
    ATB_Nx3_Nx1(N, basis, data, ATB); // same
 8003382:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003388:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 800338c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800338e:	f7ff fbb6 	bl	8002afe <ATB_Nx3_Nx1>

    float X[3][1];
    Matrix_Multiply_3x3_3x1(ATAI, ATB, X); // Different
 8003392:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8003396:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800339a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff fe8a 	bl	80030b8 <Matrix_Multiply_3x3_3x1>

    *bestAmplitude = sqrt(X[0][0] * X[0][0] + X[1][0] * X[1][0]);
 80033a4:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80033a8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80033ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033b0:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 80033b4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80033b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033c0:	ee17 0a90 	vmov	r0, s15
 80033c4:	f7fd f8e0 	bl	8000588 <__aeabi_f2d>
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	ec43 2b10 	vmov	d0, r2, r3
 80033d0:	f003 fb00 	bl	80069d4 <sqrt>
 80033d4:	ec53 2b10 	vmov	r2, r3, d0
 80033d8:	4610      	mov	r0, r2
 80033da:	4619      	mov	r1, r3
 80033dc:	f7fd fc04 	bl	8000be8 <__aeabi_d2f>
 80033e0:	4602      	mov	r2, r0
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	601a      	str	r2, [r3, #0]
    *bestPhase = atan2(X[1][0], X[0][0]);
 80033e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fd f8cd 	bl	8000588 <__aeabi_f2d>
 80033ee:	4604      	mov	r4, r0
 80033f0:	460d      	mov	r5, r1
 80033f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fd f8c7 	bl	8000588 <__aeabi_f2d>
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	ec43 2b11 	vmov	d1, r2, r3
 8003402:	ec45 4b10 	vmov	d0, r4, r5
 8003406:	f003 fae3 	bl	80069d0 <atan2>
 800340a:	ec53 2b10 	vmov	r2, r3, d0
 800340e:	4610      	mov	r0, r2
 8003410:	4619      	mov	r1, r3
 8003412:	f7fd fbe9 	bl	8000be8 <__aeabi_d2f>
 8003416:	4602      	mov	r2, r0
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	601a      	str	r2, [r3, #0]
    *bestOffset = X[2][0];
 800341c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800341e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	46b5      	mov	sp, r6
}
 8003426:	bf00      	nop
 8003428:	37ac      	adds	r7, #172	@ 0xac
 800342a:	46bd      	mov	sp, r7
 800342c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003430:	54442d18 	.word	0x54442d18
 8003434:	401921fb 	.word	0x401921fb
 8003438:	00000000 	.word	0x00000000
 800343c:	412e8480 	.word	0x412e8480

08003440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	607b      	str	r3, [r7, #4]
 800344a:	4b10      	ldr	r3, [pc, #64]	@ (800348c <HAL_MspInit+0x4c>)
 800344c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800344e:	4a0f      	ldr	r2, [pc, #60]	@ (800348c <HAL_MspInit+0x4c>)
 8003450:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003454:	6453      	str	r3, [r2, #68]	@ 0x44
 8003456:	4b0d      	ldr	r3, [pc, #52]	@ (800348c <HAL_MspInit+0x4c>)
 8003458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800345e:	607b      	str	r3, [r7, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003462:	2300      	movs	r3, #0
 8003464:	603b      	str	r3, [r7, #0]
 8003466:	4b09      	ldr	r3, [pc, #36]	@ (800348c <HAL_MspInit+0x4c>)
 8003468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346a:	4a08      	ldr	r2, [pc, #32]	@ (800348c <HAL_MspInit+0x4c>)
 800346c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003470:	6413      	str	r3, [r2, #64]	@ 0x40
 8003472:	4b06      	ldr	r3, [pc, #24]	@ (800348c <HAL_MspInit+0x4c>)
 8003474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	40023800 	.word	0x40023800

08003490 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b08c      	sub	sp, #48	@ 0x30
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003498:	f107 031c 	add.w	r3, r7, #28
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	605a      	str	r2, [r3, #4]
 80034a2:	609a      	str	r2, [r3, #8]
 80034a4:	60da      	str	r2, [r3, #12]
 80034a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a66      	ldr	r2, [pc, #408]	@ (8003648 <HAL_ADC_MspInit+0x1b8>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d160      	bne.n	8003574 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80034b2:	2300      	movs	r3, #0
 80034b4:	61bb      	str	r3, [r7, #24]
 80034b6:	4b65      	ldr	r3, [pc, #404]	@ (800364c <HAL_ADC_MspInit+0x1bc>)
 80034b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ba:	4a64      	ldr	r2, [pc, #400]	@ (800364c <HAL_ADC_MspInit+0x1bc>)
 80034bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80034c2:	4b62      	ldr	r3, [pc, #392]	@ (800364c <HAL_ADC_MspInit+0x1bc>)
 80034c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ca:	61bb      	str	r3, [r7, #24]
 80034cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ce:	2300      	movs	r3, #0
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	4b5e      	ldr	r3, [pc, #376]	@ (800364c <HAL_ADC_MspInit+0x1bc>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d6:	4a5d      	ldr	r2, [pc, #372]	@ (800364c <HAL_ADC_MspInit+0x1bc>)
 80034d8:	f043 0301 	orr.w	r3, r3, #1
 80034dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80034de:	4b5b      	ldr	r3, [pc, #364]	@ (800364c <HAL_ADC_MspInit+0x1bc>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	617b      	str	r3, [r7, #20]
 80034e8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_CH0_Pin|ADC_CH1_Pin;
 80034ea:	2303      	movs	r3, #3
 80034ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034ee:	2303      	movs	r3, #3
 80034f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f2:	2300      	movs	r3, #0
 80034f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f6:	f107 031c 	add.w	r3, r7, #28
 80034fa:	4619      	mov	r1, r3
 80034fc:	4854      	ldr	r0, [pc, #336]	@ (8003650 <HAL_ADC_MspInit+0x1c0>)
 80034fe:	f001 fd19 	bl	8004f34 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003502:	4b54      	ldr	r3, [pc, #336]	@ (8003654 <HAL_ADC_MspInit+0x1c4>)
 8003504:	4a54      	ldr	r2, [pc, #336]	@ (8003658 <HAL_ADC_MspInit+0x1c8>)
 8003506:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003508:	4b52      	ldr	r3, [pc, #328]	@ (8003654 <HAL_ADC_MspInit+0x1c4>)
 800350a:	2200      	movs	r2, #0
 800350c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800350e:	4b51      	ldr	r3, [pc, #324]	@ (8003654 <HAL_ADC_MspInit+0x1c4>)
 8003510:	2200      	movs	r2, #0
 8003512:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003514:	4b4f      	ldr	r3, [pc, #316]	@ (8003654 <HAL_ADC_MspInit+0x1c4>)
 8003516:	2200      	movs	r2, #0
 8003518:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800351a:	4b4e      	ldr	r3, [pc, #312]	@ (8003654 <HAL_ADC_MspInit+0x1c4>)
 800351c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003520:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003522:	4b4c      	ldr	r3, [pc, #304]	@ (8003654 <HAL_ADC_MspInit+0x1c4>)
 8003524:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003528:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800352a:	4b4a      	ldr	r3, [pc, #296]	@ (8003654 <HAL_ADC_MspInit+0x1c4>)
 800352c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003530:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003532:	4b48      	ldr	r3, [pc, #288]	@ (8003654 <HAL_ADC_MspInit+0x1c4>)
 8003534:	2200      	movs	r2, #0
 8003536:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003538:	4b46      	ldr	r3, [pc, #280]	@ (8003654 <HAL_ADC_MspInit+0x1c4>)
 800353a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800353e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003540:	4b44      	ldr	r3, [pc, #272]	@ (8003654 <HAL_ADC_MspInit+0x1c4>)
 8003542:	2200      	movs	r2, #0
 8003544:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003546:	4843      	ldr	r0, [pc, #268]	@ (8003654 <HAL_ADC_MspInit+0x1c4>)
 8003548:	f001 f984 	bl	8004854 <HAL_DMA_Init>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003552:	f7ff f959 	bl	8002808 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a3e      	ldr	r2, [pc, #248]	@ (8003654 <HAL_ADC_MspInit+0x1c4>)
 800355a:	639a      	str	r2, [r3, #56]	@ 0x38
 800355c:	4a3d      	ldr	r2, [pc, #244]	@ (8003654 <HAL_ADC_MspInit+0x1c4>)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 15, 0);
 8003562:	2200      	movs	r2, #0
 8003564:	210f      	movs	r1, #15
 8003566:	2012      	movs	r0, #18
 8003568:	f001 f93d 	bl	80047e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800356c:	2012      	movs	r0, #18
 800356e:	f001 f956 	bl	800481e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003572:	e065      	b.n	8003640 <HAL_ADC_MspInit+0x1b0>
  else if(hadc->Instance==ADC2)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a38      	ldr	r2, [pc, #224]	@ (800365c <HAL_ADC_MspInit+0x1cc>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d160      	bne.n	8003640 <HAL_ADC_MspInit+0x1b0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800357e:	2300      	movs	r3, #0
 8003580:	613b      	str	r3, [r7, #16]
 8003582:	4b32      	ldr	r3, [pc, #200]	@ (800364c <HAL_ADC_MspInit+0x1bc>)
 8003584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003586:	4a31      	ldr	r2, [pc, #196]	@ (800364c <HAL_ADC_MspInit+0x1bc>)
 8003588:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800358c:	6453      	str	r3, [r2, #68]	@ 0x44
 800358e:	4b2f      	ldr	r3, [pc, #188]	@ (800364c <HAL_ADC_MspInit+0x1bc>)
 8003590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003592:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003596:	613b      	str	r3, [r7, #16]
 8003598:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800359a:	2300      	movs	r3, #0
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	4b2b      	ldr	r3, [pc, #172]	@ (800364c <HAL_ADC_MspInit+0x1bc>)
 80035a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a2:	4a2a      	ldr	r2, [pc, #168]	@ (800364c <HAL_ADC_MspInit+0x1bc>)
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80035aa:	4b28      	ldr	r3, [pc, #160]	@ (800364c <HAL_ADC_MspInit+0x1bc>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC_CH1_Pin;
 80035b6:	2302      	movs	r3, #2
 80035b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035ba:	2303      	movs	r3, #3
 80035bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035be:	2300      	movs	r3, #0
 80035c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ADC_CH1_GPIO_Port, &GPIO_InitStruct);
 80035c2:	f107 031c 	add.w	r3, r7, #28
 80035c6:	4619      	mov	r1, r3
 80035c8:	4821      	ldr	r0, [pc, #132]	@ (8003650 <HAL_ADC_MspInit+0x1c0>)
 80035ca:	f001 fcb3 	bl	8004f34 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80035ce:	4b24      	ldr	r3, [pc, #144]	@ (8003660 <HAL_ADC_MspInit+0x1d0>)
 80035d0:	4a24      	ldr	r2, [pc, #144]	@ (8003664 <HAL_ADC_MspInit+0x1d4>)
 80035d2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80035d4:	4b22      	ldr	r3, [pc, #136]	@ (8003660 <HAL_ADC_MspInit+0x1d0>)
 80035d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035da:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035dc:	4b20      	ldr	r3, [pc, #128]	@ (8003660 <HAL_ADC_MspInit+0x1d0>)
 80035de:	2200      	movs	r2, #0
 80035e0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80035e2:	4b1f      	ldr	r3, [pc, #124]	@ (8003660 <HAL_ADC_MspInit+0x1d0>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80035e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003660 <HAL_ADC_MspInit+0x1d0>)
 80035ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035ee:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80035f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003660 <HAL_ADC_MspInit+0x1d0>)
 80035f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035f6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80035f8:	4b19      	ldr	r3, [pc, #100]	@ (8003660 <HAL_ADC_MspInit+0x1d0>)
 80035fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035fe:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8003600:	4b17      	ldr	r3, [pc, #92]	@ (8003660 <HAL_ADC_MspInit+0x1d0>)
 8003602:	2200      	movs	r2, #0
 8003604:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003606:	4b16      	ldr	r3, [pc, #88]	@ (8003660 <HAL_ADC_MspInit+0x1d0>)
 8003608:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800360c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800360e:	4b14      	ldr	r3, [pc, #80]	@ (8003660 <HAL_ADC_MspInit+0x1d0>)
 8003610:	2200      	movs	r2, #0
 8003612:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003614:	4812      	ldr	r0, [pc, #72]	@ (8003660 <HAL_ADC_MspInit+0x1d0>)
 8003616:	f001 f91d 	bl	8004854 <HAL_DMA_Init>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <HAL_ADC_MspInit+0x194>
      Error_Handler();
 8003620:	f7ff f8f2 	bl	8002808 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a0e      	ldr	r2, [pc, #56]	@ (8003660 <HAL_ADC_MspInit+0x1d0>)
 8003628:	639a      	str	r2, [r3, #56]	@ 0x38
 800362a:	4a0d      	ldr	r2, [pc, #52]	@ (8003660 <HAL_ADC_MspInit+0x1d0>)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 15, 0);
 8003630:	2200      	movs	r2, #0
 8003632:	210f      	movs	r1, #15
 8003634:	2012      	movs	r0, #18
 8003636:	f001 f8d6 	bl	80047e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800363a:	2012      	movs	r0, #18
 800363c:	f001 f8ef 	bl	800481e <HAL_NVIC_EnableIRQ>
}
 8003640:	bf00      	nop
 8003642:	3730      	adds	r7, #48	@ 0x30
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40012000 	.word	0x40012000
 800364c:	40023800 	.word	0x40023800
 8003650:	40020000 	.word	0x40020000
 8003654:	2000029c 	.word	0x2000029c
 8003658:	40026410 	.word	0x40026410
 800365c:	40012100 	.word	0x40012100
 8003660:	200002fc 	.word	0x200002fc
 8003664:	40026440 	.word	0x40026440

08003668 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b08c      	sub	sp, #48	@ 0x30
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003670:	f107 031c 	add.w	r3, r7, #28
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	605a      	str	r2, [r3, #4]
 800367a:	609a      	str	r2, [r3, #8]
 800367c:	60da      	str	r2, [r3, #12]
 800367e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a41      	ldr	r2, [pc, #260]	@ (800378c <HAL_SPI_MspInit+0x124>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d12c      	bne.n	80036e4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800368a:	2300      	movs	r3, #0
 800368c:	61bb      	str	r3, [r7, #24]
 800368e:	4b40      	ldr	r3, [pc, #256]	@ (8003790 <HAL_SPI_MspInit+0x128>)
 8003690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003692:	4a3f      	ldr	r2, [pc, #252]	@ (8003790 <HAL_SPI_MspInit+0x128>)
 8003694:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003698:	6453      	str	r3, [r2, #68]	@ 0x44
 800369a:	4b3d      	ldr	r3, [pc, #244]	@ (8003790 <HAL_SPI_MspInit+0x128>)
 800369c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036a2:	61bb      	str	r3, [r7, #24]
 80036a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036a6:	2300      	movs	r3, #0
 80036a8:	617b      	str	r3, [r7, #20]
 80036aa:	4b39      	ldr	r3, [pc, #228]	@ (8003790 <HAL_SPI_MspInit+0x128>)
 80036ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ae:	4a38      	ldr	r2, [pc, #224]	@ (8003790 <HAL_SPI_MspInit+0x128>)
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80036b6:	4b36      	ldr	r3, [pc, #216]	@ (8003790 <HAL_SPI_MspInit+0x128>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	617b      	str	r3, [r7, #20]
 80036c0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80036c2:	23e0      	movs	r3, #224	@ 0xe0
 80036c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c6:	2302      	movs	r3, #2
 80036c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ce:	2303      	movs	r3, #3
 80036d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80036d2:	2305      	movs	r3, #5
 80036d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d6:	f107 031c 	add.w	r3, r7, #28
 80036da:	4619      	mov	r1, r3
 80036dc:	482d      	ldr	r0, [pc, #180]	@ (8003794 <HAL_SPI_MspInit+0x12c>)
 80036de:	f001 fc29 	bl	8004f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80036e2:	e04f      	b.n	8003784 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI3)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a2b      	ldr	r2, [pc, #172]	@ (8003798 <HAL_SPI_MspInit+0x130>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d14a      	bne.n	8003784 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80036ee:	2300      	movs	r3, #0
 80036f0:	613b      	str	r3, [r7, #16]
 80036f2:	4b27      	ldr	r3, [pc, #156]	@ (8003790 <HAL_SPI_MspInit+0x128>)
 80036f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f6:	4a26      	ldr	r2, [pc, #152]	@ (8003790 <HAL_SPI_MspInit+0x128>)
 80036f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80036fe:	4b24      	ldr	r3, [pc, #144]	@ (8003790 <HAL_SPI_MspInit+0x128>)
 8003700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003702:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003706:	613b      	str	r3, [r7, #16]
 8003708:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]
 800370e:	4b20      	ldr	r3, [pc, #128]	@ (8003790 <HAL_SPI_MspInit+0x128>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003712:	4a1f      	ldr	r2, [pc, #124]	@ (8003790 <HAL_SPI_MspInit+0x128>)
 8003714:	f043 0302 	orr.w	r3, r3, #2
 8003718:	6313      	str	r3, [r2, #48]	@ 0x30
 800371a:	4b1d      	ldr	r3, [pc, #116]	@ (8003790 <HAL_SPI_MspInit+0x128>)
 800371c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003726:	2300      	movs	r3, #0
 8003728:	60bb      	str	r3, [r7, #8]
 800372a:	4b19      	ldr	r3, [pc, #100]	@ (8003790 <HAL_SPI_MspInit+0x128>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372e:	4a18      	ldr	r2, [pc, #96]	@ (8003790 <HAL_SPI_MspInit+0x128>)
 8003730:	f043 0304 	orr.w	r3, r3, #4
 8003734:	6313      	str	r3, [r2, #48]	@ 0x30
 8003736:	4b16      	ldr	r3, [pc, #88]	@ (8003790 <HAL_SPI_MspInit+0x128>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373a:	f003 0304 	and.w	r3, r3, #4
 800373e:	60bb      	str	r3, [r7, #8]
 8003740:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003742:	2304      	movs	r3, #4
 8003744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003746:	2302      	movs	r3, #2
 8003748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374a:	2300      	movs	r3, #0
 800374c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800374e:	2303      	movs	r3, #3
 8003750:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8003752:	2307      	movs	r3, #7
 8003754:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003756:	f107 031c 	add.w	r3, r7, #28
 800375a:	4619      	mov	r1, r3
 800375c:	480f      	ldr	r0, [pc, #60]	@ (800379c <HAL_SPI_MspInit+0x134>)
 800375e:	f001 fbe9 	bl	8004f34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003762:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003768:	2302      	movs	r3, #2
 800376a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376c:	2300      	movs	r3, #0
 800376e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003770:	2303      	movs	r3, #3
 8003772:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003774:	2306      	movs	r3, #6
 8003776:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003778:	f107 031c 	add.w	r3, r7, #28
 800377c:	4619      	mov	r1, r3
 800377e:	4808      	ldr	r0, [pc, #32]	@ (80037a0 <HAL_SPI_MspInit+0x138>)
 8003780:	f001 fbd8 	bl	8004f34 <HAL_GPIO_Init>
}
 8003784:	bf00      	nop
 8003786:	3730      	adds	r7, #48	@ 0x30
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40013000 	.word	0x40013000
 8003790:	40023800 	.word	0x40023800
 8003794:	40020000 	.word	0x40020000
 8003798:	40003c00 	.word	0x40003c00
 800379c:	40020400 	.word	0x40020400
 80037a0:	40020800 	.word	0x40020800

080037a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037b4:	d10d      	bne.n	80037d2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037b6:	2300      	movs	r3, #0
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	4b09      	ldr	r3, [pc, #36]	@ (80037e0 <HAL_TIM_Base_MspInit+0x3c>)
 80037bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037be:	4a08      	ldr	r2, [pc, #32]	@ (80037e0 <HAL_TIM_Base_MspInit+0x3c>)
 80037c0:	f043 0301 	orr.w	r3, r3, #1
 80037c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80037c6:	4b06      	ldr	r3, [pc, #24]	@ (80037e0 <HAL_TIM_Base_MspInit+0x3c>)
 80037c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80037d2:	bf00      	nop
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40023800 	.word	0x40023800

080037e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80037e8:	bf00      	nop
 80037ea:	e7fd      	b.n	80037e8 <NMI_Handler+0x4>

080037ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037f0:	bf00      	nop
 80037f2:	e7fd      	b.n	80037f0 <HardFault_Handler+0x4>

080037f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037f8:	bf00      	nop
 80037fa:	e7fd      	b.n	80037f8 <MemManage_Handler+0x4>

080037fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003800:	bf00      	nop
 8003802:	e7fd      	b.n	8003800 <BusFault_Handler+0x4>

08003804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003808:	bf00      	nop
 800380a:	e7fd      	b.n	8003808 <UsageFault_Handler+0x4>

0800380c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003810:	bf00      	nop
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800381a:	b480      	push	{r7}
 800381c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800381e:	bf00      	nop
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800382c:	bf00      	nop
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800383a:	f000 f979 	bl	8003b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800383e:	bf00      	nop
 8003840:	bd80      	pop	{r7, pc}
	...

08003844 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003848:	4803      	ldr	r0, [pc, #12]	@ (8003858 <ADC_IRQHandler+0x14>)
 800384a:	f000 f9f8 	bl	8003c3e <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800384e:	4803      	ldr	r0, [pc, #12]	@ (800385c <ADC_IRQHandler+0x18>)
 8003850:	f000 f9f5 	bl	8003c3e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003854:	bf00      	nop
 8003856:	bd80      	pop	{r7, pc}
 8003858:	2000020c 	.word	0x2000020c
 800385c:	20000254 	.word	0x20000254

08003860 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003864:	4802      	ldr	r0, [pc, #8]	@ (8003870 <DMA2_Stream0_IRQHandler+0x10>)
 8003866:	f001 f8fb 	bl	8004a60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800386a:	bf00      	nop
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	2000029c 	.word	0x2000029c

08003874 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003878:	4802      	ldr	r0, [pc, #8]	@ (8003884 <DMA2_Stream2_IRQHandler+0x10>)
 800387a:	f001 f8f1 	bl	8004a60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800387e:	bf00      	nop
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	200002fc 	.word	0x200002fc

08003888 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  return 1;
 800388c:	2301      	movs	r3, #1
}
 800388e:	4618      	mov	r0, r3
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <_kill>:

int _kill(int pid, int sig)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80038a2:	f005 fa69 	bl	8008d78 <__errno>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2216      	movs	r2, #22
 80038aa:	601a      	str	r2, [r3, #0]
  return -1;
 80038ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <_exit>:

void _exit (int status)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80038c0:	f04f 31ff 	mov.w	r1, #4294967295
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7ff ffe7 	bl	8003898 <_kill>
  while (1) {}    /* Make sure we hang here */
 80038ca:	bf00      	nop
 80038cc:	e7fd      	b.n	80038ca <_exit+0x12>

080038ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b086      	sub	sp, #24
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	60f8      	str	r0, [r7, #12]
 80038d6:	60b9      	str	r1, [r7, #8]
 80038d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038da:	2300      	movs	r3, #0
 80038dc:	617b      	str	r3, [r7, #20]
 80038de:	e00a      	b.n	80038f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80038e0:	f3af 8000 	nop.w
 80038e4:	4601      	mov	r1, r0
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	1c5a      	adds	r2, r3, #1
 80038ea:	60ba      	str	r2, [r7, #8]
 80038ec:	b2ca      	uxtb	r2, r1
 80038ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	3301      	adds	r3, #1
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	dbf0      	blt.n	80038e0 <_read+0x12>
  }

  return len;
 80038fe:	687b      	ldr	r3, [r7, #4]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3718      	adds	r7, #24
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003914:	2300      	movs	r3, #0
 8003916:	617b      	str	r3, [r7, #20]
 8003918:	e009      	b.n	800392e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	1c5a      	adds	r2, r3, #1
 800391e:	60ba      	str	r2, [r7, #8]
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	3301      	adds	r3, #1
 800392c:	617b      	str	r3, [r7, #20]
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	429a      	cmp	r2, r3
 8003934:	dbf1      	blt.n	800391a <_write+0x12>
  }
  return len;
 8003936:	687b      	ldr	r3, [r7, #4]
}
 8003938:	4618      	mov	r0, r3
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <_close>:

int _close(int file)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003948:	f04f 33ff 	mov.w	r3, #4294967295
}
 800394c:	4618      	mov	r0, r3
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003968:	605a      	str	r2, [r3, #4]
  return 0;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <_isatty>:

int _isatty(int file)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003980:	2301      	movs	r3, #1
}
 8003982:	4618      	mov	r0, r3
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800398e:	b480      	push	{r7}
 8003990:	b085      	sub	sp, #20
 8003992:	af00      	add	r7, sp, #0
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039b0:	4a14      	ldr	r2, [pc, #80]	@ (8003a04 <_sbrk+0x5c>)
 80039b2:	4b15      	ldr	r3, [pc, #84]	@ (8003a08 <_sbrk+0x60>)
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039bc:	4b13      	ldr	r3, [pc, #76]	@ (8003a0c <_sbrk+0x64>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d102      	bne.n	80039ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039c4:	4b11      	ldr	r3, [pc, #68]	@ (8003a0c <_sbrk+0x64>)
 80039c6:	4a12      	ldr	r2, [pc, #72]	@ (8003a10 <_sbrk+0x68>)
 80039c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039ca:	4b10      	ldr	r3, [pc, #64]	@ (8003a0c <_sbrk+0x64>)
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4413      	add	r3, r2
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d207      	bcs.n	80039e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039d8:	f005 f9ce 	bl	8008d78 <__errno>
 80039dc:	4603      	mov	r3, r0
 80039de:	220c      	movs	r2, #12
 80039e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039e2:	f04f 33ff 	mov.w	r3, #4294967295
 80039e6:	e009      	b.n	80039fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039e8:	4b08      	ldr	r3, [pc, #32]	@ (8003a0c <_sbrk+0x64>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039ee:	4b07      	ldr	r3, [pc, #28]	@ (8003a0c <_sbrk+0x64>)
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4413      	add	r3, r2
 80039f6:	4a05      	ldr	r2, [pc, #20]	@ (8003a0c <_sbrk+0x64>)
 80039f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039fa:	68fb      	ldr	r3, [r7, #12]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3718      	adds	r7, #24
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	20020000 	.word	0x20020000
 8003a08:	00000400 	.word	0x00000400
 8003a0c:	20002398 	.word	0x20002398
 8003a10:	200024f0 	.word	0x200024f0

08003a14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a18:	4b06      	ldr	r3, [pc, #24]	@ (8003a34 <SystemInit+0x20>)
 8003a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a1e:	4a05      	ldr	r2, [pc, #20]	@ (8003a34 <SystemInit+0x20>)
 8003a20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a28:	bf00      	nop
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	e000ed00 	.word	0xe000ed00

08003a38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003a38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003a70 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003a3c:	f7ff ffea 	bl	8003a14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a40:	480c      	ldr	r0, [pc, #48]	@ (8003a74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a42:	490d      	ldr	r1, [pc, #52]	@ (8003a78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a44:	4a0d      	ldr	r2, [pc, #52]	@ (8003a7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a48:	e002      	b.n	8003a50 <LoopCopyDataInit>

08003a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a4e:	3304      	adds	r3, #4

08003a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a54:	d3f9      	bcc.n	8003a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a56:	4a0a      	ldr	r2, [pc, #40]	@ (8003a80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003a58:	4c0a      	ldr	r4, [pc, #40]	@ (8003a84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a5c:	e001      	b.n	8003a62 <LoopFillZerobss>

08003a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a60:	3204      	adds	r2, #4

08003a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a64:	d3fb      	bcc.n	8003a5e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003a66:	f005 f98d 	bl	8008d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a6a:	f7fe fa91 	bl	8001f90 <main>
  bx  lr    
 8003a6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a78:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003a7c:	0800b720 	.word	0x0800b720
  ldr r2, =_sbss
 8003a80:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003a84:	200024ec 	.word	0x200024ec

08003a88 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a88:	e7fe      	b.n	8003a88 <CAN1_RX0_IRQHandler>
	...

08003a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a90:	4b0e      	ldr	r3, [pc, #56]	@ (8003acc <HAL_Init+0x40>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a0d      	ldr	r2, [pc, #52]	@ (8003acc <HAL_Init+0x40>)
 8003a96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003acc <HAL_Init+0x40>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a0a      	ldr	r2, [pc, #40]	@ (8003acc <HAL_Init+0x40>)
 8003aa2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003aa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003aa8:	4b08      	ldr	r3, [pc, #32]	@ (8003acc <HAL_Init+0x40>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a07      	ldr	r2, [pc, #28]	@ (8003acc <HAL_Init+0x40>)
 8003aae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ab2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ab4:	2003      	movs	r0, #3
 8003ab6:	f000 fe8b 	bl	80047d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003aba:	200f      	movs	r0, #15
 8003abc:	f000 f808 	bl	8003ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ac0:	f7ff fcbe 	bl	8003440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	40023c00 	.word	0x40023c00

08003ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ad8:	4b12      	ldr	r3, [pc, #72]	@ (8003b24 <HAL_InitTick+0x54>)
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	4b12      	ldr	r3, [pc, #72]	@ (8003b28 <HAL_InitTick+0x58>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 fea3 	bl	800483a <HAL_SYSTICK_Config>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e00e      	b.n	8003b1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b0f      	cmp	r3, #15
 8003b02:	d80a      	bhi.n	8003b1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b04:	2200      	movs	r2, #0
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	f04f 30ff 	mov.w	r0, #4294967295
 8003b0c:	f000 fe6b 	bl	80047e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b10:	4a06      	ldr	r2, [pc, #24]	@ (8003b2c <HAL_InitTick+0x5c>)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
 8003b18:	e000      	b.n	8003b1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	2000000c 	.word	0x2000000c
 8003b28:	20000014 	.word	0x20000014
 8003b2c:	20000010 	.word	0x20000010

08003b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b34:	4b06      	ldr	r3, [pc, #24]	@ (8003b50 <HAL_IncTick+0x20>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	4b06      	ldr	r3, [pc, #24]	@ (8003b54 <HAL_IncTick+0x24>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4413      	add	r3, r2
 8003b40:	4a04      	ldr	r2, [pc, #16]	@ (8003b54 <HAL_IncTick+0x24>)
 8003b42:	6013      	str	r3, [r2, #0]
}
 8003b44:	bf00      	nop
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	20000014 	.word	0x20000014
 8003b54:	2000239c 	.word	0x2000239c

08003b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b5c:	4b03      	ldr	r3, [pc, #12]	@ (8003b6c <HAL_GetTick+0x14>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	2000239c 	.word	0x2000239c

08003b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b78:	f7ff ffee 	bl	8003b58 <HAL_GetTick>
 8003b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b88:	d005      	beq.n	8003b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8003bb4 <HAL_Delay+0x44>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4413      	add	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b96:	bf00      	nop
 8003b98:	f7ff ffde 	bl	8003b58 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d8f7      	bhi.n	8003b98 <HAL_Delay+0x28>
  {
  }
}
 8003ba8:	bf00      	nop
 8003baa:	bf00      	nop
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20000014 	.word	0x20000014

08003bb8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e033      	b.n	8003c36 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d109      	bne.n	8003bea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7ff fc5a 	bl	8003490 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bee:	f003 0310 	and.w	r3, r3, #16
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d118      	bne.n	8003c28 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003bfe:	f023 0302 	bic.w	r3, r3, #2
 8003c02:	f043 0202 	orr.w	r2, r3, #2
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 fb88 	bl	8004320 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1a:	f023 0303 	bic.w	r3, r3, #3
 8003c1e:	f043 0201 	orr.w	r2, r3, #1
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c26:	e001      	b.n	8003c2c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b086      	sub	sp, #24
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	f003 0320 	and.w	r3, r3, #32
 8003c6c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d049      	beq.n	8003d08 <HAL_ADC_IRQHandler+0xca>
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d046      	beq.n	8003d08 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7e:	f003 0310 	and.w	r3, r3, #16
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d105      	bne.n	8003c92 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d12b      	bne.n	8003cf8 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d127      	bne.n	8003cf8 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cae:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d006      	beq.n	8003cc4 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d119      	bne.n	8003cf8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f022 0220 	bic.w	r2, r2, #32
 8003cd2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d105      	bne.n	8003cf8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf0:	f043 0201 	orr.w	r2, r3, #1
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f7fe fd63 	bl	80027c4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f06f 0212 	mvn.w	r2, #18
 8003d06:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f003 0304 	and.w	r3, r3, #4
 8003d0e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d16:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d057      	beq.n	8003dce <HAL_ADC_IRQHandler+0x190>
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d054      	beq.n	8003dce <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d28:	f003 0310 	and.w	r3, r3, #16
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d105      	bne.n	8003d3c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d34:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d139      	bne.n	8003dbe <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d50:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d006      	beq.n	8003d66 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d12b      	bne.n	8003dbe <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d124      	bne.n	8003dbe <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d11d      	bne.n	8003dbe <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d119      	bne.n	8003dbe <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d98:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d105      	bne.n	8003dbe <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db6:	f043 0201 	orr.w	r2, r3, #1
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 fc2c 	bl	800461c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f06f 020c 	mvn.w	r2, #12
 8003dcc:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ddc:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d017      	beq.n	8003e14 <HAL_ADC_IRQHandler+0x1d6>
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d014      	beq.n	8003e14 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d10d      	bne.n	8003e14 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f945 	bl	8004094 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f06f 0201 	mvn.w	r2, #1
 8003e12:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f003 0320 	and.w	r3, r3, #32
 8003e1a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e22:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d015      	beq.n	8003e56 <HAL_ADC_IRQHandler+0x218>
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d012      	beq.n	8003e56 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e34:	f043 0202 	orr.w	r2, r3, #2
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f06f 0220 	mvn.w	r2, #32
 8003e44:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f92e 	bl	80040a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f06f 0220 	mvn.w	r2, #32
 8003e54:	601a      	str	r2, [r3, #0]
  }
}
 8003e56:	bf00      	nop
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
	...

08003e60 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d101      	bne.n	8003e7e <HAL_ADC_Start_DMA+0x1e>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	e0e9      	b.n	8004052 <HAL_ADC_Start_DMA+0x1f2>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d018      	beq.n	8003ec6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689a      	ldr	r2, [r3, #8]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0201 	orr.w	r2, r2, #1
 8003ea2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ea4:	4b6d      	ldr	r3, [pc, #436]	@ (800405c <HAL_ADC_Start_DMA+0x1fc>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a6d      	ldr	r2, [pc, #436]	@ (8004060 <HAL_ADC_Start_DMA+0x200>)
 8003eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003eae:	0c9a      	lsrs	r2, r3, #18
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	4413      	add	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003eb8:	e002      	b.n	8003ec0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1f9      	bne.n	8003eba <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ed0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ed4:	d107      	bne.n	8003ee6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ee4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	f040 80a1 	bne.w	8004038 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efa:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003efe:	f023 0301 	bic.w	r3, r3, #1
 8003f02:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d007      	beq.n	8003f28 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003f20:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f34:	d106      	bne.n	8003f44 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f3a:	f023 0206 	bic.w	r2, r3, #6
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	645a      	str	r2, [r3, #68]	@ 0x44
 8003f42:	e002      	b.n	8003f4a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f52:	4b44      	ldr	r3, [pc, #272]	@ (8004064 <HAL_ADC_Start_DMA+0x204>)
 8003f54:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f5a:	4a43      	ldr	r2, [pc, #268]	@ (8004068 <HAL_ADC_Start_DMA+0x208>)
 8003f5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f62:	4a42      	ldr	r2, [pc, #264]	@ (800406c <HAL_ADC_Start_DMA+0x20c>)
 8003f64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f6a:	4a41      	ldr	r2, [pc, #260]	@ (8004070 <HAL_ADC_Start_DMA+0x210>)
 8003f6c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003f76:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003f86:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f96:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	334c      	adds	r3, #76	@ 0x4c
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f000 fd02 	bl	80049b0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f003 031f 	and.w	r3, r3, #31
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d12a      	bne.n	800400e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a2d      	ldr	r2, [pc, #180]	@ (8004074 <HAL_ADC_Start_DMA+0x214>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d015      	beq.n	8003fee <HAL_ADC_Start_DMA+0x18e>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a2c      	ldr	r2, [pc, #176]	@ (8004078 <HAL_ADC_Start_DMA+0x218>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d105      	bne.n	8003fd8 <HAL_ADC_Start_DMA+0x178>
 8003fcc:	4b25      	ldr	r3, [pc, #148]	@ (8004064 <HAL_ADC_Start_DMA+0x204>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f003 031f 	and.w	r3, r3, #31
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00a      	beq.n	8003fee <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a27      	ldr	r2, [pc, #156]	@ (800407c <HAL_ADC_Start_DMA+0x21c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d136      	bne.n	8004050 <HAL_ADC_Start_DMA+0x1f0>
 8003fe2:	4b20      	ldr	r3, [pc, #128]	@ (8004064 <HAL_ADC_Start_DMA+0x204>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f003 0310 	and.w	r3, r3, #16
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d130      	bne.n	8004050 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d129      	bne.n	8004050 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689a      	ldr	r2, [r3, #8]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800400a:	609a      	str	r2, [r3, #8]
 800400c:	e020      	b.n	8004050 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a18      	ldr	r2, [pc, #96]	@ (8004074 <HAL_ADC_Start_DMA+0x214>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d11b      	bne.n	8004050 <HAL_ADC_Start_DMA+0x1f0>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d114      	bne.n	8004050 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004034:	609a      	str	r2, [r3, #8]
 8004036:	e00b      	b.n	8004050 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403c:	f043 0210 	orr.w	r2, r3, #16
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004048:	f043 0201 	orr.w	r2, r3, #1
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3718      	adds	r7, #24
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	2000000c 	.word	0x2000000c
 8004060:	431bde83 	.word	0x431bde83
 8004064:	40012300 	.word	0x40012300
 8004068:	08004519 	.word	0x08004519
 800406c:	080045d3 	.word	0x080045d3
 8004070:	080045ef 	.word	0x080045ef
 8004074:	40012000 	.word	0x40012000
 8004078:	40012100 	.word	0x40012100
 800407c:	40012200 	.word	0x40012200

08004080 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80040c6:	2300      	movs	r3, #0
 80040c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d101      	bne.n	80040d8 <HAL_ADC_ConfigChannel+0x1c>
 80040d4:	2302      	movs	r3, #2
 80040d6:	e113      	b.n	8004300 <HAL_ADC_ConfigChannel+0x244>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b09      	cmp	r3, #9
 80040e6:	d925      	bls.n	8004134 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68d9      	ldr	r1, [r3, #12]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	461a      	mov	r2, r3
 80040f6:	4613      	mov	r3, r2
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	4413      	add	r3, r2
 80040fc:	3b1e      	subs	r3, #30
 80040fe:	2207      	movs	r2, #7
 8004100:	fa02 f303 	lsl.w	r3, r2, r3
 8004104:	43da      	mvns	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	400a      	ands	r2, r1
 800410c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68d9      	ldr	r1, [r3, #12]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	b29b      	uxth	r3, r3
 800411e:	4618      	mov	r0, r3
 8004120:	4603      	mov	r3, r0
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	4403      	add	r3, r0
 8004126:	3b1e      	subs	r3, #30
 8004128:	409a      	lsls	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	60da      	str	r2, [r3, #12]
 8004132:	e022      	b.n	800417a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6919      	ldr	r1, [r3, #16]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	b29b      	uxth	r3, r3
 8004140:	461a      	mov	r2, r3
 8004142:	4613      	mov	r3, r2
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	4413      	add	r3, r2
 8004148:	2207      	movs	r2, #7
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	43da      	mvns	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	400a      	ands	r2, r1
 8004156:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6919      	ldr	r1, [r3, #16]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	689a      	ldr	r2, [r3, #8]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	b29b      	uxth	r3, r3
 8004168:	4618      	mov	r0, r3
 800416a:	4603      	mov	r3, r0
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	4403      	add	r3, r0
 8004170:	409a      	lsls	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2b06      	cmp	r3, #6
 8004180:	d824      	bhi.n	80041cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	4613      	mov	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	3b05      	subs	r3, #5
 8004194:	221f      	movs	r2, #31
 8004196:	fa02 f303 	lsl.w	r3, r2, r3
 800419a:	43da      	mvns	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	400a      	ands	r2, r1
 80041a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	4618      	mov	r0, r3
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	4613      	mov	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4413      	add	r3, r2
 80041bc:	3b05      	subs	r3, #5
 80041be:	fa00 f203 	lsl.w	r2, r0, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80041ca:	e04c      	b.n	8004266 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	2b0c      	cmp	r3, #12
 80041d2:	d824      	bhi.n	800421e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	4613      	mov	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	3b23      	subs	r3, #35	@ 0x23
 80041e6:	221f      	movs	r2, #31
 80041e8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ec:	43da      	mvns	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	400a      	ands	r2, r1
 80041f4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	b29b      	uxth	r3, r3
 8004202:	4618      	mov	r0, r3
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	4613      	mov	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	3b23      	subs	r3, #35	@ 0x23
 8004210:	fa00 f203 	lsl.w	r2, r0, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	631a      	str	r2, [r3, #48]	@ 0x30
 800421c:	e023      	b.n	8004266 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	4613      	mov	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	3b41      	subs	r3, #65	@ 0x41
 8004230:	221f      	movs	r2, #31
 8004232:	fa02 f303 	lsl.w	r3, r2, r3
 8004236:	43da      	mvns	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	400a      	ands	r2, r1
 800423e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	b29b      	uxth	r3, r3
 800424c:	4618      	mov	r0, r3
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	4613      	mov	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	3b41      	subs	r3, #65	@ 0x41
 800425a:	fa00 f203 	lsl.w	r2, r0, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004266:	4b29      	ldr	r3, [pc, #164]	@ (800430c <HAL_ADC_ConfigChannel+0x250>)
 8004268:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a28      	ldr	r2, [pc, #160]	@ (8004310 <HAL_ADC_ConfigChannel+0x254>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d10f      	bne.n	8004294 <HAL_ADC_ConfigChannel+0x1d8>
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2b12      	cmp	r3, #18
 800427a:	d10b      	bne.n	8004294 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a1d      	ldr	r2, [pc, #116]	@ (8004310 <HAL_ADC_ConfigChannel+0x254>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d12b      	bne.n	80042f6 <HAL_ADC_ConfigChannel+0x23a>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a1c      	ldr	r2, [pc, #112]	@ (8004314 <HAL_ADC_ConfigChannel+0x258>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d003      	beq.n	80042b0 <HAL_ADC_ConfigChannel+0x1f4>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b11      	cmp	r3, #17
 80042ae:	d122      	bne.n	80042f6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a11      	ldr	r2, [pc, #68]	@ (8004314 <HAL_ADC_ConfigChannel+0x258>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d111      	bne.n	80042f6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80042d2:	4b11      	ldr	r3, [pc, #68]	@ (8004318 <HAL_ADC_ConfigChannel+0x25c>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a11      	ldr	r2, [pc, #68]	@ (800431c <HAL_ADC_ConfigChannel+0x260>)
 80042d8:	fba2 2303 	umull	r2, r3, r2, r3
 80042dc:	0c9a      	lsrs	r2, r3, #18
 80042de:	4613      	mov	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80042e8:	e002      	b.n	80042f0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	3b01      	subs	r3, #1
 80042ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1f9      	bne.n	80042ea <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3714      	adds	r7, #20
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	40012300 	.word	0x40012300
 8004310:	40012000 	.word	0x40012000
 8004314:	10000012 	.word	0x10000012
 8004318:	2000000c 	.word	0x2000000c
 800431c:	431bde83 	.word	0x431bde83

08004320 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004328:	4b79      	ldr	r3, [pc, #484]	@ (8004510 <ADC_Init+0x1f0>)
 800432a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	431a      	orrs	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004354:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6859      	ldr	r1, [r3, #4]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	021a      	lsls	r2, r3, #8
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004378:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6859      	ldr	r1, [r3, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689a      	ldr	r2, [r3, #8]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800439a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6899      	ldr	r1, [r3, #8]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b2:	4a58      	ldr	r2, [pc, #352]	@ (8004514 <ADC_Init+0x1f4>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d022      	beq.n	80043fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689a      	ldr	r2, [r3, #8]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80043c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6899      	ldr	r1, [r3, #8]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80043e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6899      	ldr	r1, [r3, #8]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	609a      	str	r2, [r3, #8]
 80043fc:	e00f      	b.n	800441e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800440c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800441c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 0202 	bic.w	r2, r2, #2
 800442c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6899      	ldr	r1, [r3, #8]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	7e1b      	ldrb	r3, [r3, #24]
 8004438:	005a      	lsls	r2, r3, #1
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d01b      	beq.n	8004484 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800445a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800446a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6859      	ldr	r1, [r3, #4]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004476:	3b01      	subs	r3, #1
 8004478:	035a      	lsls	r2, r3, #13
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	605a      	str	r2, [r3, #4]
 8004482:	e007      	b.n	8004494 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004492:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80044a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	051a      	lsls	r2, r3, #20
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80044c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6899      	ldr	r1, [r3, #8]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80044d6:	025a      	lsls	r2, r3, #9
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689a      	ldr	r2, [r3, #8]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6899      	ldr	r1, [r3, #8]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	029a      	lsls	r2, r3, #10
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	609a      	str	r2, [r3, #8]
}
 8004504:	bf00      	nop
 8004506:	3714      	adds	r7, #20
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	40012300 	.word	0x40012300
 8004514:	0f000001 	.word	0x0f000001

08004518 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004524:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800452e:	2b00      	cmp	r3, #0
 8004530:	d13c      	bne.n	80045ac <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004536:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d12b      	bne.n	80045a4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004550:	2b00      	cmp	r3, #0
 8004552:	d127      	bne.n	80045a4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800455a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800455e:	2b00      	cmp	r3, #0
 8004560:	d006      	beq.n	8004570 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800456c:	2b00      	cmp	r3, #0
 800456e:	d119      	bne.n	80045a4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 0220 	bic.w	r2, r2, #32
 800457e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004584:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004590:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d105      	bne.n	80045a4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459c:	f043 0201 	orr.w	r2, r3, #1
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f7fe f90d 	bl	80027c4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80045aa:	e00e      	b.n	80045ca <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b0:	f003 0310 	and.w	r3, r3, #16
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d003      	beq.n	80045c0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f7ff fd75 	bl	80040a8 <HAL_ADC_ErrorCallback>
}
 80045be:	e004      	b.n	80045ca <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	4798      	blx	r3
}
 80045ca:	bf00      	nop
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b084      	sub	sp, #16
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045de:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f7ff fd4d 	bl	8004080 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045e6:	bf00      	nop
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b084      	sub	sp, #16
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045fa:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2240      	movs	r2, #64	@ 0x40
 8004600:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004606:	f043 0204 	orr.w	r2, r3, #4
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f7ff fd4a 	bl	80040a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004614:	bf00      	nop
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f003 0307 	and.w	r3, r3, #7
 800463e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004640:	4b0c      	ldr	r3, [pc, #48]	@ (8004674 <__NVIC_SetPriorityGrouping+0x44>)
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004646:	68ba      	ldr	r2, [r7, #8]
 8004648:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800464c:	4013      	ands	r3, r2
 800464e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004658:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800465c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004662:	4a04      	ldr	r2, [pc, #16]	@ (8004674 <__NVIC_SetPriorityGrouping+0x44>)
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	60d3      	str	r3, [r2, #12]
}
 8004668:	bf00      	nop
 800466a:	3714      	adds	r7, #20
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	e000ed00 	.word	0xe000ed00

08004678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800467c:	4b04      	ldr	r3, [pc, #16]	@ (8004690 <__NVIC_GetPriorityGrouping+0x18>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	0a1b      	lsrs	r3, r3, #8
 8004682:	f003 0307 	and.w	r3, r3, #7
}
 8004686:	4618      	mov	r0, r3
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	e000ed00 	.word	0xe000ed00

08004694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	4603      	mov	r3, r0
 800469c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800469e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	db0b      	blt.n	80046be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046a6:	79fb      	ldrb	r3, [r7, #7]
 80046a8:	f003 021f 	and.w	r2, r3, #31
 80046ac:	4907      	ldr	r1, [pc, #28]	@ (80046cc <__NVIC_EnableIRQ+0x38>)
 80046ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b2:	095b      	lsrs	r3, r3, #5
 80046b4:	2001      	movs	r0, #1
 80046b6:	fa00 f202 	lsl.w	r2, r0, r2
 80046ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80046be:	bf00      	nop
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	e000e100 	.word	0xe000e100

080046d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	4603      	mov	r3, r0
 80046d8:	6039      	str	r1, [r7, #0]
 80046da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	db0a      	blt.n	80046fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	490c      	ldr	r1, [pc, #48]	@ (800471c <__NVIC_SetPriority+0x4c>)
 80046ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ee:	0112      	lsls	r2, r2, #4
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	440b      	add	r3, r1
 80046f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046f8:	e00a      	b.n	8004710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	4908      	ldr	r1, [pc, #32]	@ (8004720 <__NVIC_SetPriority+0x50>)
 8004700:	79fb      	ldrb	r3, [r7, #7]
 8004702:	f003 030f 	and.w	r3, r3, #15
 8004706:	3b04      	subs	r3, #4
 8004708:	0112      	lsls	r2, r2, #4
 800470a:	b2d2      	uxtb	r2, r2
 800470c:	440b      	add	r3, r1
 800470e:	761a      	strb	r2, [r3, #24]
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	e000e100 	.word	0xe000e100
 8004720:	e000ed00 	.word	0xe000ed00

08004724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004724:	b480      	push	{r7}
 8004726:	b089      	sub	sp, #36	@ 0x24
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f003 0307 	and.w	r3, r3, #7
 8004736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	f1c3 0307 	rsb	r3, r3, #7
 800473e:	2b04      	cmp	r3, #4
 8004740:	bf28      	it	cs
 8004742:	2304      	movcs	r3, #4
 8004744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	3304      	adds	r3, #4
 800474a:	2b06      	cmp	r3, #6
 800474c:	d902      	bls.n	8004754 <NVIC_EncodePriority+0x30>
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	3b03      	subs	r3, #3
 8004752:	e000      	b.n	8004756 <NVIC_EncodePriority+0x32>
 8004754:	2300      	movs	r3, #0
 8004756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004758:	f04f 32ff 	mov.w	r2, #4294967295
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	43da      	mvns	r2, r3
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	401a      	ands	r2, r3
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800476c:	f04f 31ff 	mov.w	r1, #4294967295
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	fa01 f303 	lsl.w	r3, r1, r3
 8004776:	43d9      	mvns	r1, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800477c:	4313      	orrs	r3, r2
         );
}
 800477e:	4618      	mov	r0, r3
 8004780:	3724      	adds	r7, #36	@ 0x24
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
	...

0800478c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3b01      	subs	r3, #1
 8004798:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800479c:	d301      	bcc.n	80047a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800479e:	2301      	movs	r3, #1
 80047a0:	e00f      	b.n	80047c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047a2:	4a0a      	ldr	r2, [pc, #40]	@ (80047cc <SysTick_Config+0x40>)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047aa:	210f      	movs	r1, #15
 80047ac:	f04f 30ff 	mov.w	r0, #4294967295
 80047b0:	f7ff ff8e 	bl	80046d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047b4:	4b05      	ldr	r3, [pc, #20]	@ (80047cc <SysTick_Config+0x40>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047ba:	4b04      	ldr	r3, [pc, #16]	@ (80047cc <SysTick_Config+0x40>)
 80047bc:	2207      	movs	r2, #7
 80047be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	e000e010 	.word	0xe000e010

080047d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f7ff ff29 	bl	8004630 <__NVIC_SetPriorityGrouping>
}
 80047de:	bf00      	nop
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b086      	sub	sp, #24
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	4603      	mov	r3, r0
 80047ee:	60b9      	str	r1, [r7, #8]
 80047f0:	607a      	str	r2, [r7, #4]
 80047f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047f8:	f7ff ff3e 	bl	8004678 <__NVIC_GetPriorityGrouping>
 80047fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	68b9      	ldr	r1, [r7, #8]
 8004802:	6978      	ldr	r0, [r7, #20]
 8004804:	f7ff ff8e 	bl	8004724 <NVIC_EncodePriority>
 8004808:	4602      	mov	r2, r0
 800480a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800480e:	4611      	mov	r1, r2
 8004810:	4618      	mov	r0, r3
 8004812:	f7ff ff5d 	bl	80046d0 <__NVIC_SetPriority>
}
 8004816:	bf00      	nop
 8004818:	3718      	adds	r7, #24
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b082      	sub	sp, #8
 8004822:	af00      	add	r7, sp, #0
 8004824:	4603      	mov	r3, r0
 8004826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800482c:	4618      	mov	r0, r3
 800482e:	f7ff ff31 	bl	8004694 <__NVIC_EnableIRQ>
}
 8004832:	bf00      	nop
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b082      	sub	sp, #8
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7ff ffa2 	bl	800478c <SysTick_Config>
 8004848:	4603      	mov	r3, r0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
	...

08004854 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800485c:	2300      	movs	r3, #0
 800485e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004860:	f7ff f97a 	bl	8003b58 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e099      	b.n	80049a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0201 	bic.w	r2, r2, #1
 800488e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004890:	e00f      	b.n	80048b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004892:	f7ff f961 	bl	8003b58 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b05      	cmp	r3, #5
 800489e:	d908      	bls.n	80048b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2220      	movs	r2, #32
 80048a4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2203      	movs	r2, #3
 80048aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e078      	b.n	80049a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1e8      	bne.n	8004892 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	4b38      	ldr	r3, [pc, #224]	@ (80049ac <HAL_DMA_Init+0x158>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	4313      	orrs	r3, r2
 8004902:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004908:	2b04      	cmp	r3, #4
 800490a:	d107      	bne.n	800491c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004914:	4313      	orrs	r3, r2
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	4313      	orrs	r3, r2
 800491a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f023 0307 	bic.w	r3, r3, #7
 8004932:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	4313      	orrs	r3, r2
 800493c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004942:	2b04      	cmp	r3, #4
 8004944:	d117      	bne.n	8004976 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	4313      	orrs	r3, r2
 800494e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00e      	beq.n	8004976 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 fa6f 	bl	8004e3c <DMA_CheckFifoParam>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d008      	beq.n	8004976 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2240      	movs	r2, #64	@ 0x40
 8004968:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004972:	2301      	movs	r3, #1
 8004974:	e016      	b.n	80049a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 fa26 	bl	8004dd0 <DMA_CalcBaseAndBitshift>
 8004984:	4603      	mov	r3, r0
 8004986:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800498c:	223f      	movs	r2, #63	@ 0x3f
 800498e:	409a      	lsls	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3718      	adds	r7, #24
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	f010803f 	.word	0xf010803f

080049b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
 80049bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049be:	2300      	movs	r3, #0
 80049c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d101      	bne.n	80049d6 <HAL_DMA_Start_IT+0x26>
 80049d2:	2302      	movs	r3, #2
 80049d4:	e040      	b.n	8004a58 <HAL_DMA_Start_IT+0xa8>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d12f      	bne.n	8004a4a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2202      	movs	r2, #2
 80049ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	68b9      	ldr	r1, [r7, #8]
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 f9b8 	bl	8004d74 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a08:	223f      	movs	r2, #63	@ 0x3f
 8004a0a:	409a      	lsls	r2, r3
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0216 	orr.w	r2, r2, #22
 8004a1e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d007      	beq.n	8004a38 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0208 	orr.w	r2, r2, #8
 8004a36:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0201 	orr.w	r2, r2, #1
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	e005      	b.n	8004a56 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004a52:	2302      	movs	r3, #2
 8004a54:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3718      	adds	r7, #24
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a6c:	4b8e      	ldr	r3, [pc, #568]	@ (8004ca8 <HAL_DMA_IRQHandler+0x248>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a8e      	ldr	r2, [pc, #568]	@ (8004cac <HAL_DMA_IRQHandler+0x24c>)
 8004a72:	fba2 2303 	umull	r2, r3, r2, r3
 8004a76:	0a9b      	lsrs	r3, r3, #10
 8004a78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a8a:	2208      	movs	r2, #8
 8004a8c:	409a      	lsls	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4013      	ands	r3, r2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d01a      	beq.n	8004acc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d013      	beq.n	8004acc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0204 	bic.w	r2, r2, #4
 8004ab2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ab8:	2208      	movs	r2, #8
 8004aba:	409a      	lsls	r2, r3
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ac4:	f043 0201 	orr.w	r2, r3, #1
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	409a      	lsls	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d012      	beq.n	8004b02 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00b      	beq.n	8004b02 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aee:	2201      	movs	r2, #1
 8004af0:	409a      	lsls	r2, r3
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004afa:	f043 0202 	orr.w	r2, r3, #2
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b06:	2204      	movs	r2, #4
 8004b08:	409a      	lsls	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d012      	beq.n	8004b38 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00b      	beq.n	8004b38 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b24:	2204      	movs	r2, #4
 8004b26:	409a      	lsls	r2, r3
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b30:	f043 0204 	orr.w	r2, r3, #4
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b3c:	2210      	movs	r2, #16
 8004b3e:	409a      	lsls	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4013      	ands	r3, r2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d043      	beq.n	8004bd0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0308 	and.w	r3, r3, #8
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d03c      	beq.n	8004bd0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b5a:	2210      	movs	r2, #16
 8004b5c:	409a      	lsls	r2, r3
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d018      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d108      	bne.n	8004b90 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d024      	beq.n	8004bd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	4798      	blx	r3
 8004b8e:	e01f      	b.n	8004bd0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d01b      	beq.n	8004bd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	4798      	blx	r3
 8004ba0:	e016      	b.n	8004bd0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d107      	bne.n	8004bc0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0208 	bic.w	r2, r2, #8
 8004bbe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d003      	beq.n	8004bd0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	409a      	lsls	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 808f 	beq.w	8004d00 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0310 	and.w	r3, r3, #16
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 8087 	beq.w	8004d00 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	409a      	lsls	r2, r3
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b05      	cmp	r3, #5
 8004c08:	d136      	bne.n	8004c78 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 0216 	bic.w	r2, r2, #22
 8004c18:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	695a      	ldr	r2, [r3, #20]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c28:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d103      	bne.n	8004c3a <HAL_DMA_IRQHandler+0x1da>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d007      	beq.n	8004c4a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0208 	bic.w	r2, r2, #8
 8004c48:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c4e:	223f      	movs	r2, #63	@ 0x3f
 8004c50:	409a      	lsls	r2, r3
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d07e      	beq.n	8004d6c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	4798      	blx	r3
        }
        return;
 8004c76:	e079      	b.n	8004d6c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d01d      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10d      	bne.n	8004cb0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d031      	beq.n	8004d00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	4798      	blx	r3
 8004ca4:	e02c      	b.n	8004d00 <HAL_DMA_IRQHandler+0x2a0>
 8004ca6:	bf00      	nop
 8004ca8:	2000000c 	.word	0x2000000c
 8004cac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d023      	beq.n	8004d00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	4798      	blx	r3
 8004cc0:	e01e      	b.n	8004d00 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10f      	bne.n	8004cf0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 0210 	bic.w	r2, r2, #16
 8004cde:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d003      	beq.n	8004d00 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d032      	beq.n	8004d6e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d022      	beq.n	8004d5a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2205      	movs	r2, #5
 8004d18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0201 	bic.w	r2, r2, #1
 8004d2a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	60bb      	str	r3, [r7, #8]
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d307      	bcc.n	8004d48 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1f2      	bne.n	8004d2c <HAL_DMA_IRQHandler+0x2cc>
 8004d46:	e000      	b.n	8004d4a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004d48:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d005      	beq.n	8004d6e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	4798      	blx	r3
 8004d6a:	e000      	b.n	8004d6e <HAL_DMA_IRQHandler+0x30e>
        return;
 8004d6c:	bf00      	nop
    }
  }
}
 8004d6e:	3718      	adds	r7, #24
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
 8004d80:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004d90:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	2b40      	cmp	r3, #64	@ 0x40
 8004da0:	d108      	bne.n	8004db4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004db2:	e007      	b.n	8004dc4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	60da      	str	r2, [r3, #12]
}
 8004dc4:	bf00      	nop
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	3b10      	subs	r3, #16
 8004de0:	4a14      	ldr	r2, [pc, #80]	@ (8004e34 <DMA_CalcBaseAndBitshift+0x64>)
 8004de2:	fba2 2303 	umull	r2, r3, r2, r3
 8004de6:	091b      	lsrs	r3, r3, #4
 8004de8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004dea:	4a13      	ldr	r2, [pc, #76]	@ (8004e38 <DMA_CalcBaseAndBitshift+0x68>)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4413      	add	r3, r2
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	461a      	mov	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2b03      	cmp	r3, #3
 8004dfc:	d909      	bls.n	8004e12 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004e06:	f023 0303 	bic.w	r3, r3, #3
 8004e0a:	1d1a      	adds	r2, r3, #4
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e10:	e007      	b.n	8004e22 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004e1a:	f023 0303 	bic.w	r3, r3, #3
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	aaaaaaab 	.word	0xaaaaaaab
 8004e38:	0800b14c 	.word	0x0800b14c

08004e3c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e44:	2300      	movs	r3, #0
 8004e46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d11f      	bne.n	8004e96 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	2b03      	cmp	r3, #3
 8004e5a:	d856      	bhi.n	8004f0a <DMA_CheckFifoParam+0xce>
 8004e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e64 <DMA_CheckFifoParam+0x28>)
 8004e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e62:	bf00      	nop
 8004e64:	08004e75 	.word	0x08004e75
 8004e68:	08004e87 	.word	0x08004e87
 8004e6c:	08004e75 	.word	0x08004e75
 8004e70:	08004f0b 	.word	0x08004f0b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d046      	beq.n	8004f0e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e84:	e043      	b.n	8004f0e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e8e:	d140      	bne.n	8004f12 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e94:	e03d      	b.n	8004f12 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e9e:	d121      	bne.n	8004ee4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	2b03      	cmp	r3, #3
 8004ea4:	d837      	bhi.n	8004f16 <DMA_CheckFifoParam+0xda>
 8004ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8004eac <DMA_CheckFifoParam+0x70>)
 8004ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eac:	08004ebd 	.word	0x08004ebd
 8004eb0:	08004ec3 	.word	0x08004ec3
 8004eb4:	08004ebd 	.word	0x08004ebd
 8004eb8:	08004ed5 	.word	0x08004ed5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8004ec0:	e030      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d025      	beq.n	8004f1a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ed2:	e022      	b.n	8004f1a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004edc:	d11f      	bne.n	8004f1e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004ee2:	e01c      	b.n	8004f1e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d903      	bls.n	8004ef2 <DMA_CheckFifoParam+0xb6>
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	2b03      	cmp	r3, #3
 8004eee:	d003      	beq.n	8004ef8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ef0:	e018      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	73fb      	strb	r3, [r7, #15]
      break;
 8004ef6:	e015      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00e      	beq.n	8004f22 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	73fb      	strb	r3, [r7, #15]
      break;
 8004f08:	e00b      	b.n	8004f22 <DMA_CheckFifoParam+0xe6>
      break;
 8004f0a:	bf00      	nop
 8004f0c:	e00a      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
      break;
 8004f0e:	bf00      	nop
 8004f10:	e008      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
      break;
 8004f12:	bf00      	nop
 8004f14:	e006      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
      break;
 8004f16:	bf00      	nop
 8004f18:	e004      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
      break;
 8004f1a:	bf00      	nop
 8004f1c:	e002      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
      break;   
 8004f1e:	bf00      	nop
 8004f20:	e000      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
      break;
 8004f22:	bf00      	nop
    }
  } 
  
  return status; 
 8004f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop

08004f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b089      	sub	sp, #36	@ 0x24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f46:	2300      	movs	r3, #0
 8004f48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	61fb      	str	r3, [r7, #28]
 8004f4e:	e165      	b.n	800521c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f50:	2201      	movs	r2, #1
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	fa02 f303 	lsl.w	r3, r2, r3
 8004f58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	4013      	ands	r3, r2
 8004f62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	f040 8154 	bne.w	8005216 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f003 0303 	and.w	r3, r3, #3
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d005      	beq.n	8004f86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d130      	bne.n	8004fe8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	2203      	movs	r2, #3
 8004f92:	fa02 f303 	lsl.w	r3, r2, r3
 8004f96:	43db      	mvns	r3, r3
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	68da      	ldr	r2, [r3, #12]
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	005b      	lsls	r3, r3, #1
 8004fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	091b      	lsrs	r3, r3, #4
 8004fd2:	f003 0201 	and.w	r2, r3, #1
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f003 0303 	and.w	r3, r3, #3
 8004ff0:	2b03      	cmp	r3, #3
 8004ff2:	d017      	beq.n	8005024 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	2203      	movs	r2, #3
 8005000:	fa02 f303 	lsl.w	r3, r2, r3
 8005004:	43db      	mvns	r3, r3
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	4013      	ands	r3, r2
 800500a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	fa02 f303 	lsl.w	r3, r2, r3
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	4313      	orrs	r3, r2
 800501c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f003 0303 	and.w	r3, r3, #3
 800502c:	2b02      	cmp	r3, #2
 800502e:	d123      	bne.n	8005078 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	08da      	lsrs	r2, r3, #3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3208      	adds	r2, #8
 8005038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800503c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	f003 0307 	and.w	r3, r3, #7
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	220f      	movs	r2, #15
 8005048:	fa02 f303 	lsl.w	r3, r2, r3
 800504c:	43db      	mvns	r3, r3
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	4013      	ands	r3, r2
 8005052:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	691a      	ldr	r2, [r3, #16]
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	f003 0307 	and.w	r3, r3, #7
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	fa02 f303 	lsl.w	r3, r2, r3
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	4313      	orrs	r3, r2
 8005068:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	08da      	lsrs	r2, r3, #3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	3208      	adds	r2, #8
 8005072:	69b9      	ldr	r1, [r7, #24]
 8005074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	005b      	lsls	r3, r3, #1
 8005082:	2203      	movs	r2, #3
 8005084:	fa02 f303 	lsl.w	r3, r2, r3
 8005088:	43db      	mvns	r3, r3
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	4013      	ands	r3, r2
 800508e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f003 0203 	and.w	r2, r3, #3
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	005b      	lsls	r3, r3, #1
 800509c:	fa02 f303 	lsl.w	r3, r2, r3
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 80ae 	beq.w	8005216 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050ba:	2300      	movs	r3, #0
 80050bc:	60fb      	str	r3, [r7, #12]
 80050be:	4b5d      	ldr	r3, [pc, #372]	@ (8005234 <HAL_GPIO_Init+0x300>)
 80050c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050c2:	4a5c      	ldr	r2, [pc, #368]	@ (8005234 <HAL_GPIO_Init+0x300>)
 80050c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80050c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80050ca:	4b5a      	ldr	r3, [pc, #360]	@ (8005234 <HAL_GPIO_Init+0x300>)
 80050cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050d6:	4a58      	ldr	r2, [pc, #352]	@ (8005238 <HAL_GPIO_Init+0x304>)
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	089b      	lsrs	r3, r3, #2
 80050dc:	3302      	adds	r3, #2
 80050de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	f003 0303 	and.w	r3, r3, #3
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	220f      	movs	r2, #15
 80050ee:	fa02 f303 	lsl.w	r3, r2, r3
 80050f2:	43db      	mvns	r3, r3
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	4013      	ands	r3, r2
 80050f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a4f      	ldr	r2, [pc, #316]	@ (800523c <HAL_GPIO_Init+0x308>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d025      	beq.n	800514e <HAL_GPIO_Init+0x21a>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a4e      	ldr	r2, [pc, #312]	@ (8005240 <HAL_GPIO_Init+0x30c>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d01f      	beq.n	800514a <HAL_GPIO_Init+0x216>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a4d      	ldr	r2, [pc, #308]	@ (8005244 <HAL_GPIO_Init+0x310>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d019      	beq.n	8005146 <HAL_GPIO_Init+0x212>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a4c      	ldr	r2, [pc, #304]	@ (8005248 <HAL_GPIO_Init+0x314>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d013      	beq.n	8005142 <HAL_GPIO_Init+0x20e>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a4b      	ldr	r2, [pc, #300]	@ (800524c <HAL_GPIO_Init+0x318>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d00d      	beq.n	800513e <HAL_GPIO_Init+0x20a>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a4a      	ldr	r2, [pc, #296]	@ (8005250 <HAL_GPIO_Init+0x31c>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d007      	beq.n	800513a <HAL_GPIO_Init+0x206>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a49      	ldr	r2, [pc, #292]	@ (8005254 <HAL_GPIO_Init+0x320>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d101      	bne.n	8005136 <HAL_GPIO_Init+0x202>
 8005132:	2306      	movs	r3, #6
 8005134:	e00c      	b.n	8005150 <HAL_GPIO_Init+0x21c>
 8005136:	2307      	movs	r3, #7
 8005138:	e00a      	b.n	8005150 <HAL_GPIO_Init+0x21c>
 800513a:	2305      	movs	r3, #5
 800513c:	e008      	b.n	8005150 <HAL_GPIO_Init+0x21c>
 800513e:	2304      	movs	r3, #4
 8005140:	e006      	b.n	8005150 <HAL_GPIO_Init+0x21c>
 8005142:	2303      	movs	r3, #3
 8005144:	e004      	b.n	8005150 <HAL_GPIO_Init+0x21c>
 8005146:	2302      	movs	r3, #2
 8005148:	e002      	b.n	8005150 <HAL_GPIO_Init+0x21c>
 800514a:	2301      	movs	r3, #1
 800514c:	e000      	b.n	8005150 <HAL_GPIO_Init+0x21c>
 800514e:	2300      	movs	r3, #0
 8005150:	69fa      	ldr	r2, [r7, #28]
 8005152:	f002 0203 	and.w	r2, r2, #3
 8005156:	0092      	lsls	r2, r2, #2
 8005158:	4093      	lsls	r3, r2
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	4313      	orrs	r3, r2
 800515e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005160:	4935      	ldr	r1, [pc, #212]	@ (8005238 <HAL_GPIO_Init+0x304>)
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	089b      	lsrs	r3, r3, #2
 8005166:	3302      	adds	r3, #2
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800516e:	4b3a      	ldr	r3, [pc, #232]	@ (8005258 <HAL_GPIO_Init+0x324>)
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	43db      	mvns	r3, r3
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	4013      	ands	r3, r2
 800517c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	4313      	orrs	r3, r2
 8005190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005192:	4a31      	ldr	r2, [pc, #196]	@ (8005258 <HAL_GPIO_Init+0x324>)
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005198:	4b2f      	ldr	r3, [pc, #188]	@ (8005258 <HAL_GPIO_Init+0x324>)
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	43db      	mvns	r3, r3
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	4013      	ands	r3, r2
 80051a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d003      	beq.n	80051bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80051bc:	4a26      	ldr	r2, [pc, #152]	@ (8005258 <HAL_GPIO_Init+0x324>)
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80051c2:	4b25      	ldr	r3, [pc, #148]	@ (8005258 <HAL_GPIO_Init+0x324>)
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	43db      	mvns	r3, r3
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	4013      	ands	r3, r2
 80051d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80051e6:	4a1c      	ldr	r2, [pc, #112]	@ (8005258 <HAL_GPIO_Init+0x324>)
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051ec:	4b1a      	ldr	r3, [pc, #104]	@ (8005258 <HAL_GPIO_Init+0x324>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	43db      	mvns	r3, r3
 80051f6:	69ba      	ldr	r2, [r7, #24]
 80051f8:	4013      	ands	r3, r2
 80051fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d003      	beq.n	8005210 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	4313      	orrs	r3, r2
 800520e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005210:	4a11      	ldr	r2, [pc, #68]	@ (8005258 <HAL_GPIO_Init+0x324>)
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	3301      	adds	r3, #1
 800521a:	61fb      	str	r3, [r7, #28]
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	2b0f      	cmp	r3, #15
 8005220:	f67f ae96 	bls.w	8004f50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005224:	bf00      	nop
 8005226:	bf00      	nop
 8005228:	3724      	adds	r7, #36	@ 0x24
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	40023800 	.word	0x40023800
 8005238:	40013800 	.word	0x40013800
 800523c:	40020000 	.word	0x40020000
 8005240:	40020400 	.word	0x40020400
 8005244:	40020800 	.word	0x40020800
 8005248:	40020c00 	.word	0x40020c00
 800524c:	40021000 	.word	0x40021000
 8005250:	40021400 	.word	0x40021400
 8005254:	40021800 	.word	0x40021800
 8005258:	40013c00 	.word	0x40013c00

0800525c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	460b      	mov	r3, r1
 8005266:	807b      	strh	r3, [r7, #2]
 8005268:	4613      	mov	r3, r2
 800526a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800526c:	787b      	ldrb	r3, [r7, #1]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005272:	887a      	ldrh	r2, [r7, #2]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005278:	e003      	b.n	8005282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800527a:	887b      	ldrh	r3, [r7, #2]
 800527c:	041a      	lsls	r2, r3, #16
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	619a      	str	r2, [r3, #24]
}
 8005282:	bf00      	nop
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
	...

08005290 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e0cc      	b.n	800543e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052a4:	4b68      	ldr	r3, [pc, #416]	@ (8005448 <HAL_RCC_ClockConfig+0x1b8>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 030f 	and.w	r3, r3, #15
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d90c      	bls.n	80052cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052b2:	4b65      	ldr	r3, [pc, #404]	@ (8005448 <HAL_RCC_ClockConfig+0x1b8>)
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	b2d2      	uxtb	r2, r2
 80052b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ba:	4b63      	ldr	r3, [pc, #396]	@ (8005448 <HAL_RCC_ClockConfig+0x1b8>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 030f 	and.w	r3, r3, #15
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d001      	beq.n	80052cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e0b8      	b.n	800543e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d020      	beq.n	800531a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d005      	beq.n	80052f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052e4:	4b59      	ldr	r3, [pc, #356]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	4a58      	ldr	r2, [pc, #352]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 80052ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80052ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0308 	and.w	r3, r3, #8
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d005      	beq.n	8005308 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052fc:	4b53      	ldr	r3, [pc, #332]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	4a52      	ldr	r2, [pc, #328]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 8005302:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005306:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005308:	4b50      	ldr	r3, [pc, #320]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	494d      	ldr	r1, [pc, #308]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 8005316:	4313      	orrs	r3, r2
 8005318:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	d044      	beq.n	80053b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d107      	bne.n	800533e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800532e:	4b47      	ldr	r3, [pc, #284]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d119      	bne.n	800536e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e07f      	b.n	800543e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	2b02      	cmp	r3, #2
 8005344:	d003      	beq.n	800534e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800534a:	2b03      	cmp	r3, #3
 800534c:	d107      	bne.n	800535e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800534e:	4b3f      	ldr	r3, [pc, #252]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d109      	bne.n	800536e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e06f      	b.n	800543e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800535e:	4b3b      	ldr	r3, [pc, #236]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e067      	b.n	800543e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800536e:	4b37      	ldr	r3, [pc, #220]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f023 0203 	bic.w	r2, r3, #3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	4934      	ldr	r1, [pc, #208]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 800537c:	4313      	orrs	r3, r2
 800537e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005380:	f7fe fbea 	bl	8003b58 <HAL_GetTick>
 8005384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005386:	e00a      	b.n	800539e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005388:	f7fe fbe6 	bl	8003b58 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005396:	4293      	cmp	r3, r2
 8005398:	d901      	bls.n	800539e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e04f      	b.n	800543e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800539e:	4b2b      	ldr	r3, [pc, #172]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f003 020c 	and.w	r2, r3, #12
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d1eb      	bne.n	8005388 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053b0:	4b25      	ldr	r3, [pc, #148]	@ (8005448 <HAL_RCC_ClockConfig+0x1b8>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 030f 	and.w	r3, r3, #15
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d20c      	bcs.n	80053d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053be:	4b22      	ldr	r3, [pc, #136]	@ (8005448 <HAL_RCC_ClockConfig+0x1b8>)
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	b2d2      	uxtb	r2, r2
 80053c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053c6:	4b20      	ldr	r3, [pc, #128]	@ (8005448 <HAL_RCC_ClockConfig+0x1b8>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 030f 	and.w	r3, r3, #15
 80053ce:	683a      	ldr	r2, [r7, #0]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d001      	beq.n	80053d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e032      	b.n	800543e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d008      	beq.n	80053f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053e4:	4b19      	ldr	r3, [pc, #100]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	4916      	ldr	r1, [pc, #88]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0308 	and.w	r3, r3, #8
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d009      	beq.n	8005416 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005402:	4b12      	ldr	r3, [pc, #72]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	00db      	lsls	r3, r3, #3
 8005410:	490e      	ldr	r1, [pc, #56]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 8005412:	4313      	orrs	r3, r2
 8005414:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005416:	f000 f821 	bl	800545c <HAL_RCC_GetSysClockFreq>
 800541a:	4602      	mov	r2, r0
 800541c:	4b0b      	ldr	r3, [pc, #44]	@ (800544c <HAL_RCC_ClockConfig+0x1bc>)
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	091b      	lsrs	r3, r3, #4
 8005422:	f003 030f 	and.w	r3, r3, #15
 8005426:	490a      	ldr	r1, [pc, #40]	@ (8005450 <HAL_RCC_ClockConfig+0x1c0>)
 8005428:	5ccb      	ldrb	r3, [r1, r3]
 800542a:	fa22 f303 	lsr.w	r3, r2, r3
 800542e:	4a09      	ldr	r2, [pc, #36]	@ (8005454 <HAL_RCC_ClockConfig+0x1c4>)
 8005430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005432:	4b09      	ldr	r3, [pc, #36]	@ (8005458 <HAL_RCC_ClockConfig+0x1c8>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4618      	mov	r0, r3
 8005438:	f7fe fb4a 	bl	8003ad0 <HAL_InitTick>

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	40023c00 	.word	0x40023c00
 800544c:	40023800 	.word	0x40023800
 8005450:	0800b13c 	.word	0x0800b13c
 8005454:	2000000c 	.word	0x2000000c
 8005458:	20000010 	.word	0x20000010

0800545c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800545c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005460:	b0ae      	sub	sp, #184	@ 0xb8
 8005462:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005464:	2300      	movs	r3, #0
 8005466:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800546a:	2300      	movs	r3, #0
 800546c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8005476:	2300      	movs	r3, #0
 8005478:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800547c:	2300      	movs	r3, #0
 800547e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005482:	4bcb      	ldr	r3, [pc, #812]	@ (80057b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 030c 	and.w	r3, r3, #12
 800548a:	2b0c      	cmp	r3, #12
 800548c:	f200 8206 	bhi.w	800589c <HAL_RCC_GetSysClockFreq+0x440>
 8005490:	a201      	add	r2, pc, #4	@ (adr r2, 8005498 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005496:	bf00      	nop
 8005498:	080054cd 	.word	0x080054cd
 800549c:	0800589d 	.word	0x0800589d
 80054a0:	0800589d 	.word	0x0800589d
 80054a4:	0800589d 	.word	0x0800589d
 80054a8:	080054d5 	.word	0x080054d5
 80054ac:	0800589d 	.word	0x0800589d
 80054b0:	0800589d 	.word	0x0800589d
 80054b4:	0800589d 	.word	0x0800589d
 80054b8:	080054dd 	.word	0x080054dd
 80054bc:	0800589d 	.word	0x0800589d
 80054c0:	0800589d 	.word	0x0800589d
 80054c4:	0800589d 	.word	0x0800589d
 80054c8:	080056cd 	.word	0x080056cd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054cc:	4bb9      	ldr	r3, [pc, #740]	@ (80057b4 <HAL_RCC_GetSysClockFreq+0x358>)
 80054ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80054d2:	e1e7      	b.n	80058a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054d4:	4bb8      	ldr	r3, [pc, #736]	@ (80057b8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80054d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80054da:	e1e3      	b.n	80058a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054dc:	4bb4      	ldr	r3, [pc, #720]	@ (80057b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054e8:	4bb1      	ldr	r3, [pc, #708]	@ (80057b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d071      	beq.n	80055d8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054f4:	4bae      	ldr	r3, [pc, #696]	@ (80057b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	099b      	lsrs	r3, r3, #6
 80054fa:	2200      	movs	r2, #0
 80054fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005500:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005504:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800550c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005510:	2300      	movs	r3, #0
 8005512:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005516:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800551a:	4622      	mov	r2, r4
 800551c:	462b      	mov	r3, r5
 800551e:	f04f 0000 	mov.w	r0, #0
 8005522:	f04f 0100 	mov.w	r1, #0
 8005526:	0159      	lsls	r1, r3, #5
 8005528:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800552c:	0150      	lsls	r0, r2, #5
 800552e:	4602      	mov	r2, r0
 8005530:	460b      	mov	r3, r1
 8005532:	4621      	mov	r1, r4
 8005534:	1a51      	subs	r1, r2, r1
 8005536:	6439      	str	r1, [r7, #64]	@ 0x40
 8005538:	4629      	mov	r1, r5
 800553a:	eb63 0301 	sbc.w	r3, r3, r1
 800553e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005540:	f04f 0200 	mov.w	r2, #0
 8005544:	f04f 0300 	mov.w	r3, #0
 8005548:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800554c:	4649      	mov	r1, r9
 800554e:	018b      	lsls	r3, r1, #6
 8005550:	4641      	mov	r1, r8
 8005552:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005556:	4641      	mov	r1, r8
 8005558:	018a      	lsls	r2, r1, #6
 800555a:	4641      	mov	r1, r8
 800555c:	1a51      	subs	r1, r2, r1
 800555e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005560:	4649      	mov	r1, r9
 8005562:	eb63 0301 	sbc.w	r3, r3, r1
 8005566:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005568:	f04f 0200 	mov.w	r2, #0
 800556c:	f04f 0300 	mov.w	r3, #0
 8005570:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005574:	4649      	mov	r1, r9
 8005576:	00cb      	lsls	r3, r1, #3
 8005578:	4641      	mov	r1, r8
 800557a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800557e:	4641      	mov	r1, r8
 8005580:	00ca      	lsls	r2, r1, #3
 8005582:	4610      	mov	r0, r2
 8005584:	4619      	mov	r1, r3
 8005586:	4603      	mov	r3, r0
 8005588:	4622      	mov	r2, r4
 800558a:	189b      	adds	r3, r3, r2
 800558c:	633b      	str	r3, [r7, #48]	@ 0x30
 800558e:	462b      	mov	r3, r5
 8005590:	460a      	mov	r2, r1
 8005592:	eb42 0303 	adc.w	r3, r2, r3
 8005596:	637b      	str	r3, [r7, #52]	@ 0x34
 8005598:	f04f 0200 	mov.w	r2, #0
 800559c:	f04f 0300 	mov.w	r3, #0
 80055a0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80055a4:	4629      	mov	r1, r5
 80055a6:	024b      	lsls	r3, r1, #9
 80055a8:	4621      	mov	r1, r4
 80055aa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80055ae:	4621      	mov	r1, r4
 80055b0:	024a      	lsls	r2, r1, #9
 80055b2:	4610      	mov	r0, r2
 80055b4:	4619      	mov	r1, r3
 80055b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055ba:	2200      	movs	r2, #0
 80055bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80055c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80055c4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80055c8:	f7fb fb5e 	bl	8000c88 <__aeabi_uldivmod>
 80055cc:	4602      	mov	r2, r0
 80055ce:	460b      	mov	r3, r1
 80055d0:	4613      	mov	r3, r2
 80055d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055d6:	e067      	b.n	80056a8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055d8:	4b75      	ldr	r3, [pc, #468]	@ (80057b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	099b      	lsrs	r3, r3, #6
 80055de:	2200      	movs	r2, #0
 80055e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80055e4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80055e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80055ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80055f2:	2300      	movs	r3, #0
 80055f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80055f6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80055fa:	4622      	mov	r2, r4
 80055fc:	462b      	mov	r3, r5
 80055fe:	f04f 0000 	mov.w	r0, #0
 8005602:	f04f 0100 	mov.w	r1, #0
 8005606:	0159      	lsls	r1, r3, #5
 8005608:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800560c:	0150      	lsls	r0, r2, #5
 800560e:	4602      	mov	r2, r0
 8005610:	460b      	mov	r3, r1
 8005612:	4621      	mov	r1, r4
 8005614:	1a51      	subs	r1, r2, r1
 8005616:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005618:	4629      	mov	r1, r5
 800561a:	eb63 0301 	sbc.w	r3, r3, r1
 800561e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005620:	f04f 0200 	mov.w	r2, #0
 8005624:	f04f 0300 	mov.w	r3, #0
 8005628:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800562c:	4649      	mov	r1, r9
 800562e:	018b      	lsls	r3, r1, #6
 8005630:	4641      	mov	r1, r8
 8005632:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005636:	4641      	mov	r1, r8
 8005638:	018a      	lsls	r2, r1, #6
 800563a:	4641      	mov	r1, r8
 800563c:	ebb2 0a01 	subs.w	sl, r2, r1
 8005640:	4649      	mov	r1, r9
 8005642:	eb63 0b01 	sbc.w	fp, r3, r1
 8005646:	f04f 0200 	mov.w	r2, #0
 800564a:	f04f 0300 	mov.w	r3, #0
 800564e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005652:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005656:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800565a:	4692      	mov	sl, r2
 800565c:	469b      	mov	fp, r3
 800565e:	4623      	mov	r3, r4
 8005660:	eb1a 0303 	adds.w	r3, sl, r3
 8005664:	623b      	str	r3, [r7, #32]
 8005666:	462b      	mov	r3, r5
 8005668:	eb4b 0303 	adc.w	r3, fp, r3
 800566c:	627b      	str	r3, [r7, #36]	@ 0x24
 800566e:	f04f 0200 	mov.w	r2, #0
 8005672:	f04f 0300 	mov.w	r3, #0
 8005676:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800567a:	4629      	mov	r1, r5
 800567c:	028b      	lsls	r3, r1, #10
 800567e:	4621      	mov	r1, r4
 8005680:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005684:	4621      	mov	r1, r4
 8005686:	028a      	lsls	r2, r1, #10
 8005688:	4610      	mov	r0, r2
 800568a:	4619      	mov	r1, r3
 800568c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005690:	2200      	movs	r2, #0
 8005692:	673b      	str	r3, [r7, #112]	@ 0x70
 8005694:	677a      	str	r2, [r7, #116]	@ 0x74
 8005696:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800569a:	f7fb faf5 	bl	8000c88 <__aeabi_uldivmod>
 800569e:	4602      	mov	r2, r0
 80056a0:	460b      	mov	r3, r1
 80056a2:	4613      	mov	r3, r2
 80056a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80056a8:	4b41      	ldr	r3, [pc, #260]	@ (80057b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	0c1b      	lsrs	r3, r3, #16
 80056ae:	f003 0303 	and.w	r3, r3, #3
 80056b2:	3301      	adds	r3, #1
 80056b4:	005b      	lsls	r3, r3, #1
 80056b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80056ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80056be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80056c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80056ca:	e0eb      	b.n	80058a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056cc:	4b38      	ldr	r3, [pc, #224]	@ (80057b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056d8:	4b35      	ldr	r3, [pc, #212]	@ (80057b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d06b      	beq.n	80057bc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056e4:	4b32      	ldr	r3, [pc, #200]	@ (80057b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	099b      	lsrs	r3, r3, #6
 80056ea:	2200      	movs	r2, #0
 80056ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80056f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80056f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056f6:	663b      	str	r3, [r7, #96]	@ 0x60
 80056f8:	2300      	movs	r3, #0
 80056fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80056fc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005700:	4622      	mov	r2, r4
 8005702:	462b      	mov	r3, r5
 8005704:	f04f 0000 	mov.w	r0, #0
 8005708:	f04f 0100 	mov.w	r1, #0
 800570c:	0159      	lsls	r1, r3, #5
 800570e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005712:	0150      	lsls	r0, r2, #5
 8005714:	4602      	mov	r2, r0
 8005716:	460b      	mov	r3, r1
 8005718:	4621      	mov	r1, r4
 800571a:	1a51      	subs	r1, r2, r1
 800571c:	61b9      	str	r1, [r7, #24]
 800571e:	4629      	mov	r1, r5
 8005720:	eb63 0301 	sbc.w	r3, r3, r1
 8005724:	61fb      	str	r3, [r7, #28]
 8005726:	f04f 0200 	mov.w	r2, #0
 800572a:	f04f 0300 	mov.w	r3, #0
 800572e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005732:	4659      	mov	r1, fp
 8005734:	018b      	lsls	r3, r1, #6
 8005736:	4651      	mov	r1, sl
 8005738:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800573c:	4651      	mov	r1, sl
 800573e:	018a      	lsls	r2, r1, #6
 8005740:	4651      	mov	r1, sl
 8005742:	ebb2 0801 	subs.w	r8, r2, r1
 8005746:	4659      	mov	r1, fp
 8005748:	eb63 0901 	sbc.w	r9, r3, r1
 800574c:	f04f 0200 	mov.w	r2, #0
 8005750:	f04f 0300 	mov.w	r3, #0
 8005754:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005758:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800575c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005760:	4690      	mov	r8, r2
 8005762:	4699      	mov	r9, r3
 8005764:	4623      	mov	r3, r4
 8005766:	eb18 0303 	adds.w	r3, r8, r3
 800576a:	613b      	str	r3, [r7, #16]
 800576c:	462b      	mov	r3, r5
 800576e:	eb49 0303 	adc.w	r3, r9, r3
 8005772:	617b      	str	r3, [r7, #20]
 8005774:	f04f 0200 	mov.w	r2, #0
 8005778:	f04f 0300 	mov.w	r3, #0
 800577c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005780:	4629      	mov	r1, r5
 8005782:	024b      	lsls	r3, r1, #9
 8005784:	4621      	mov	r1, r4
 8005786:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800578a:	4621      	mov	r1, r4
 800578c:	024a      	lsls	r2, r1, #9
 800578e:	4610      	mov	r0, r2
 8005790:	4619      	mov	r1, r3
 8005792:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005796:	2200      	movs	r2, #0
 8005798:	65bb      	str	r3, [r7, #88]	@ 0x58
 800579a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800579c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80057a0:	f7fb fa72 	bl	8000c88 <__aeabi_uldivmod>
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	4613      	mov	r3, r2
 80057aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057ae:	e065      	b.n	800587c <HAL_RCC_GetSysClockFreq+0x420>
 80057b0:	40023800 	.word	0x40023800
 80057b4:	00f42400 	.word	0x00f42400
 80057b8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057bc:	4b3d      	ldr	r3, [pc, #244]	@ (80058b4 <HAL_RCC_GetSysClockFreq+0x458>)
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	099b      	lsrs	r3, r3, #6
 80057c2:	2200      	movs	r2, #0
 80057c4:	4618      	mov	r0, r3
 80057c6:	4611      	mov	r1, r2
 80057c8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80057cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80057ce:	2300      	movs	r3, #0
 80057d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80057d2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80057d6:	4642      	mov	r2, r8
 80057d8:	464b      	mov	r3, r9
 80057da:	f04f 0000 	mov.w	r0, #0
 80057de:	f04f 0100 	mov.w	r1, #0
 80057e2:	0159      	lsls	r1, r3, #5
 80057e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057e8:	0150      	lsls	r0, r2, #5
 80057ea:	4602      	mov	r2, r0
 80057ec:	460b      	mov	r3, r1
 80057ee:	4641      	mov	r1, r8
 80057f0:	1a51      	subs	r1, r2, r1
 80057f2:	60b9      	str	r1, [r7, #8]
 80057f4:	4649      	mov	r1, r9
 80057f6:	eb63 0301 	sbc.w	r3, r3, r1
 80057fa:	60fb      	str	r3, [r7, #12]
 80057fc:	f04f 0200 	mov.w	r2, #0
 8005800:	f04f 0300 	mov.w	r3, #0
 8005804:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005808:	4659      	mov	r1, fp
 800580a:	018b      	lsls	r3, r1, #6
 800580c:	4651      	mov	r1, sl
 800580e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005812:	4651      	mov	r1, sl
 8005814:	018a      	lsls	r2, r1, #6
 8005816:	4651      	mov	r1, sl
 8005818:	1a54      	subs	r4, r2, r1
 800581a:	4659      	mov	r1, fp
 800581c:	eb63 0501 	sbc.w	r5, r3, r1
 8005820:	f04f 0200 	mov.w	r2, #0
 8005824:	f04f 0300 	mov.w	r3, #0
 8005828:	00eb      	lsls	r3, r5, #3
 800582a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800582e:	00e2      	lsls	r2, r4, #3
 8005830:	4614      	mov	r4, r2
 8005832:	461d      	mov	r5, r3
 8005834:	4643      	mov	r3, r8
 8005836:	18e3      	adds	r3, r4, r3
 8005838:	603b      	str	r3, [r7, #0]
 800583a:	464b      	mov	r3, r9
 800583c:	eb45 0303 	adc.w	r3, r5, r3
 8005840:	607b      	str	r3, [r7, #4]
 8005842:	f04f 0200 	mov.w	r2, #0
 8005846:	f04f 0300 	mov.w	r3, #0
 800584a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800584e:	4629      	mov	r1, r5
 8005850:	028b      	lsls	r3, r1, #10
 8005852:	4621      	mov	r1, r4
 8005854:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005858:	4621      	mov	r1, r4
 800585a:	028a      	lsls	r2, r1, #10
 800585c:	4610      	mov	r0, r2
 800585e:	4619      	mov	r1, r3
 8005860:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005864:	2200      	movs	r2, #0
 8005866:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005868:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800586a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800586e:	f7fb fa0b 	bl	8000c88 <__aeabi_uldivmod>
 8005872:	4602      	mov	r2, r0
 8005874:	460b      	mov	r3, r1
 8005876:	4613      	mov	r3, r2
 8005878:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800587c:	4b0d      	ldr	r3, [pc, #52]	@ (80058b4 <HAL_RCC_GetSysClockFreq+0x458>)
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	0f1b      	lsrs	r3, r3, #28
 8005882:	f003 0307 	and.w	r3, r3, #7
 8005886:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800588a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800588e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005892:	fbb2 f3f3 	udiv	r3, r2, r3
 8005896:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800589a:	e003      	b.n	80058a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800589c:	4b06      	ldr	r3, [pc, #24]	@ (80058b8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800589e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80058a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	37b8      	adds	r7, #184	@ 0xb8
 80058ac:	46bd      	mov	sp, r7
 80058ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058b2:	bf00      	nop
 80058b4:	40023800 	.word	0x40023800
 80058b8:	00f42400 	.word	0x00f42400

080058bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e28d      	b.n	8005dea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f000 8083 	beq.w	80059e2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80058dc:	4b94      	ldr	r3, [pc, #592]	@ (8005b30 <HAL_RCC_OscConfig+0x274>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f003 030c 	and.w	r3, r3, #12
 80058e4:	2b04      	cmp	r3, #4
 80058e6:	d019      	beq.n	800591c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80058e8:	4b91      	ldr	r3, [pc, #580]	@ (8005b30 <HAL_RCC_OscConfig+0x274>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f003 030c 	and.w	r3, r3, #12
        || \
 80058f0:	2b08      	cmp	r3, #8
 80058f2:	d106      	bne.n	8005902 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80058f4:	4b8e      	ldr	r3, [pc, #568]	@ (8005b30 <HAL_RCC_OscConfig+0x274>)
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005900:	d00c      	beq.n	800591c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005902:	4b8b      	ldr	r3, [pc, #556]	@ (8005b30 <HAL_RCC_OscConfig+0x274>)
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800590a:	2b0c      	cmp	r3, #12
 800590c:	d112      	bne.n	8005934 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800590e:	4b88      	ldr	r3, [pc, #544]	@ (8005b30 <HAL_RCC_OscConfig+0x274>)
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005916:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800591a:	d10b      	bne.n	8005934 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800591c:	4b84      	ldr	r3, [pc, #528]	@ (8005b30 <HAL_RCC_OscConfig+0x274>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d05b      	beq.n	80059e0 <HAL_RCC_OscConfig+0x124>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d157      	bne.n	80059e0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e25a      	b.n	8005dea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800593c:	d106      	bne.n	800594c <HAL_RCC_OscConfig+0x90>
 800593e:	4b7c      	ldr	r3, [pc, #496]	@ (8005b30 <HAL_RCC_OscConfig+0x274>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a7b      	ldr	r2, [pc, #492]	@ (8005b30 <HAL_RCC_OscConfig+0x274>)
 8005944:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005948:	6013      	str	r3, [r2, #0]
 800594a:	e01d      	b.n	8005988 <HAL_RCC_OscConfig+0xcc>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005954:	d10c      	bne.n	8005970 <HAL_RCC_OscConfig+0xb4>
 8005956:	4b76      	ldr	r3, [pc, #472]	@ (8005b30 <HAL_RCC_OscConfig+0x274>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a75      	ldr	r2, [pc, #468]	@ (8005b30 <HAL_RCC_OscConfig+0x274>)
 800595c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005960:	6013      	str	r3, [r2, #0]
 8005962:	4b73      	ldr	r3, [pc, #460]	@ (8005b30 <HAL_RCC_OscConfig+0x274>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a72      	ldr	r2, [pc, #456]	@ (8005b30 <HAL_RCC_OscConfig+0x274>)
 8005968:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800596c:	6013      	str	r3, [r2, #0]
 800596e:	e00b      	b.n	8005988 <HAL_RCC_OscConfig+0xcc>
 8005970:	4b6f      	ldr	r3, [pc, #444]	@ (8005b30 <HAL_RCC_OscConfig+0x274>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a6e      	ldr	r2, [pc, #440]	@ (8005b30 <HAL_RCC_OscConfig+0x274>)
 8005976:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800597a:	6013      	str	r3, [r2, #0]
 800597c:	4b6c      	ldr	r3, [pc, #432]	@ (8005b30 <HAL_RCC_OscConfig+0x274>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a6b      	ldr	r2, [pc, #428]	@ (8005b30 <HAL_RCC_OscConfig+0x274>)
 8005982:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005986:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d013      	beq.n	80059b8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005990:	f7fe f8e2 	bl	8003b58 <HAL_GetTick>
 8005994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005996:	e008      	b.n	80059aa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005998:	f7fe f8de 	bl	8003b58 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b64      	cmp	r3, #100	@ 0x64
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e21f      	b.n	8005dea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059aa:	4b61      	ldr	r3, [pc, #388]	@ (8005b30 <HAL_RCC_OscConfig+0x274>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d0f0      	beq.n	8005998 <HAL_RCC_OscConfig+0xdc>
 80059b6:	e014      	b.n	80059e2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b8:	f7fe f8ce 	bl	8003b58 <HAL_GetTick>
 80059bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059be:	e008      	b.n	80059d2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059c0:	f7fe f8ca 	bl	8003b58 <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	2b64      	cmp	r3, #100	@ 0x64
 80059cc:	d901      	bls.n	80059d2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e20b      	b.n	8005dea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059d2:	4b57      	ldr	r3, [pc, #348]	@ (8005b30 <HAL_RCC_OscConfig+0x274>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1f0      	bne.n	80059c0 <HAL_RCC_OscConfig+0x104>
 80059de:	e000      	b.n	80059e2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d06f      	beq.n	8005ace <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80059ee:	4b50      	ldr	r3, [pc, #320]	@ (8005b30 <HAL_RCC_OscConfig+0x274>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f003 030c 	and.w	r3, r3, #12
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d017      	beq.n	8005a2a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80059fa:	4b4d      	ldr	r3, [pc, #308]	@ (8005b30 <HAL_RCC_OscConfig+0x274>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f003 030c 	and.w	r3, r3, #12
        || \
 8005a02:	2b08      	cmp	r3, #8
 8005a04:	d105      	bne.n	8005a12 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005a06:	4b4a      	ldr	r3, [pc, #296]	@ (8005b30 <HAL_RCC_OscConfig+0x274>)
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00b      	beq.n	8005a2a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a12:	4b47      	ldr	r3, [pc, #284]	@ (8005b30 <HAL_RCC_OscConfig+0x274>)
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005a1a:	2b0c      	cmp	r3, #12
 8005a1c:	d11c      	bne.n	8005a58 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a1e:	4b44      	ldr	r3, [pc, #272]	@ (8005b30 <HAL_RCC_OscConfig+0x274>)
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d116      	bne.n	8005a58 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a2a:	4b41      	ldr	r3, [pc, #260]	@ (8005b30 <HAL_RCC_OscConfig+0x274>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d005      	beq.n	8005a42 <HAL_RCC_OscConfig+0x186>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d001      	beq.n	8005a42 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e1d3      	b.n	8005dea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a42:	4b3b      	ldr	r3, [pc, #236]	@ (8005b30 <HAL_RCC_OscConfig+0x274>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	00db      	lsls	r3, r3, #3
 8005a50:	4937      	ldr	r1, [pc, #220]	@ (8005b30 <HAL_RCC_OscConfig+0x274>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a56:	e03a      	b.n	8005ace <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d020      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a60:	4b34      	ldr	r3, [pc, #208]	@ (8005b34 <HAL_RCC_OscConfig+0x278>)
 8005a62:	2201      	movs	r2, #1
 8005a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a66:	f7fe f877 	bl	8003b58 <HAL_GetTick>
 8005a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a6c:	e008      	b.n	8005a80 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a6e:	f7fe f873 	bl	8003b58 <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d901      	bls.n	8005a80 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e1b4      	b.n	8005dea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a80:	4b2b      	ldr	r3, [pc, #172]	@ (8005b30 <HAL_RCC_OscConfig+0x274>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0302 	and.w	r3, r3, #2
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d0f0      	beq.n	8005a6e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a8c:	4b28      	ldr	r3, [pc, #160]	@ (8005b30 <HAL_RCC_OscConfig+0x274>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	00db      	lsls	r3, r3, #3
 8005a9a:	4925      	ldr	r1, [pc, #148]	@ (8005b30 <HAL_RCC_OscConfig+0x274>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	600b      	str	r3, [r1, #0]
 8005aa0:	e015      	b.n	8005ace <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005aa2:	4b24      	ldr	r3, [pc, #144]	@ (8005b34 <HAL_RCC_OscConfig+0x278>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa8:	f7fe f856 	bl	8003b58 <HAL_GetTick>
 8005aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aae:	e008      	b.n	8005ac2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ab0:	f7fe f852 	bl	8003b58 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d901      	bls.n	8005ac2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e193      	b.n	8005dea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8005b30 <HAL_RCC_OscConfig+0x274>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1f0      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0308 	and.w	r3, r3, #8
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d036      	beq.n	8005b48 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d016      	beq.n	8005b10 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ae2:	4b15      	ldr	r3, [pc, #84]	@ (8005b38 <HAL_RCC_OscConfig+0x27c>)
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae8:	f7fe f836 	bl	8003b58 <HAL_GetTick>
 8005aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005aee:	e008      	b.n	8005b02 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005af0:	f7fe f832 	bl	8003b58 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d901      	bls.n	8005b02 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e173      	b.n	8005dea <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b02:	4b0b      	ldr	r3, [pc, #44]	@ (8005b30 <HAL_RCC_OscConfig+0x274>)
 8005b04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b06:	f003 0302 	and.w	r3, r3, #2
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d0f0      	beq.n	8005af0 <HAL_RCC_OscConfig+0x234>
 8005b0e:	e01b      	b.n	8005b48 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b10:	4b09      	ldr	r3, [pc, #36]	@ (8005b38 <HAL_RCC_OscConfig+0x27c>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b16:	f7fe f81f 	bl	8003b58 <HAL_GetTick>
 8005b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b1c:	e00e      	b.n	8005b3c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b1e:	f7fe f81b 	bl	8003b58 <HAL_GetTick>
 8005b22:	4602      	mov	r2, r0
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d907      	bls.n	8005b3c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e15c      	b.n	8005dea <HAL_RCC_OscConfig+0x52e>
 8005b30:	40023800 	.word	0x40023800
 8005b34:	42470000 	.word	0x42470000
 8005b38:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b3c:	4b8a      	ldr	r3, [pc, #552]	@ (8005d68 <HAL_RCC_OscConfig+0x4ac>)
 8005b3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b40:	f003 0302 	and.w	r3, r3, #2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1ea      	bne.n	8005b1e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0304 	and.w	r3, r3, #4
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 8097 	beq.w	8005c84 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b56:	2300      	movs	r3, #0
 8005b58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b5a:	4b83      	ldr	r3, [pc, #524]	@ (8005d68 <HAL_RCC_OscConfig+0x4ac>)
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10f      	bne.n	8005b86 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b66:	2300      	movs	r3, #0
 8005b68:	60bb      	str	r3, [r7, #8]
 8005b6a:	4b7f      	ldr	r3, [pc, #508]	@ (8005d68 <HAL_RCC_OscConfig+0x4ac>)
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6e:	4a7e      	ldr	r2, [pc, #504]	@ (8005d68 <HAL_RCC_OscConfig+0x4ac>)
 8005b70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b74:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b76:	4b7c      	ldr	r3, [pc, #496]	@ (8005d68 <HAL_RCC_OscConfig+0x4ac>)
 8005b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b7e:	60bb      	str	r3, [r7, #8]
 8005b80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b82:	2301      	movs	r3, #1
 8005b84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b86:	4b79      	ldr	r3, [pc, #484]	@ (8005d6c <HAL_RCC_OscConfig+0x4b0>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d118      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b92:	4b76      	ldr	r3, [pc, #472]	@ (8005d6c <HAL_RCC_OscConfig+0x4b0>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a75      	ldr	r2, [pc, #468]	@ (8005d6c <HAL_RCC_OscConfig+0x4b0>)
 8005b98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b9e:	f7fd ffdb 	bl	8003b58 <HAL_GetTick>
 8005ba2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ba4:	e008      	b.n	8005bb8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ba6:	f7fd ffd7 	bl	8003b58 <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d901      	bls.n	8005bb8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e118      	b.n	8005dea <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bb8:	4b6c      	ldr	r3, [pc, #432]	@ (8005d6c <HAL_RCC_OscConfig+0x4b0>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d0f0      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d106      	bne.n	8005bda <HAL_RCC_OscConfig+0x31e>
 8005bcc:	4b66      	ldr	r3, [pc, #408]	@ (8005d68 <HAL_RCC_OscConfig+0x4ac>)
 8005bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bd0:	4a65      	ldr	r2, [pc, #404]	@ (8005d68 <HAL_RCC_OscConfig+0x4ac>)
 8005bd2:	f043 0301 	orr.w	r3, r3, #1
 8005bd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bd8:	e01c      	b.n	8005c14 <HAL_RCC_OscConfig+0x358>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	2b05      	cmp	r3, #5
 8005be0:	d10c      	bne.n	8005bfc <HAL_RCC_OscConfig+0x340>
 8005be2:	4b61      	ldr	r3, [pc, #388]	@ (8005d68 <HAL_RCC_OscConfig+0x4ac>)
 8005be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005be6:	4a60      	ldr	r2, [pc, #384]	@ (8005d68 <HAL_RCC_OscConfig+0x4ac>)
 8005be8:	f043 0304 	orr.w	r3, r3, #4
 8005bec:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bee:	4b5e      	ldr	r3, [pc, #376]	@ (8005d68 <HAL_RCC_OscConfig+0x4ac>)
 8005bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bf2:	4a5d      	ldr	r2, [pc, #372]	@ (8005d68 <HAL_RCC_OscConfig+0x4ac>)
 8005bf4:	f043 0301 	orr.w	r3, r3, #1
 8005bf8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bfa:	e00b      	b.n	8005c14 <HAL_RCC_OscConfig+0x358>
 8005bfc:	4b5a      	ldr	r3, [pc, #360]	@ (8005d68 <HAL_RCC_OscConfig+0x4ac>)
 8005bfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c00:	4a59      	ldr	r2, [pc, #356]	@ (8005d68 <HAL_RCC_OscConfig+0x4ac>)
 8005c02:	f023 0301 	bic.w	r3, r3, #1
 8005c06:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c08:	4b57      	ldr	r3, [pc, #348]	@ (8005d68 <HAL_RCC_OscConfig+0x4ac>)
 8005c0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c0c:	4a56      	ldr	r2, [pc, #344]	@ (8005d68 <HAL_RCC_OscConfig+0x4ac>)
 8005c0e:	f023 0304 	bic.w	r3, r3, #4
 8005c12:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d015      	beq.n	8005c48 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c1c:	f7fd ff9c 	bl	8003b58 <HAL_GetTick>
 8005c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c22:	e00a      	b.n	8005c3a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c24:	f7fd ff98 	bl	8003b58 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e0d7      	b.n	8005dea <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c3a:	4b4b      	ldr	r3, [pc, #300]	@ (8005d68 <HAL_RCC_OscConfig+0x4ac>)
 8005c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d0ee      	beq.n	8005c24 <HAL_RCC_OscConfig+0x368>
 8005c46:	e014      	b.n	8005c72 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c48:	f7fd ff86 	bl	8003b58 <HAL_GetTick>
 8005c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c4e:	e00a      	b.n	8005c66 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c50:	f7fd ff82 	bl	8003b58 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d901      	bls.n	8005c66 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e0c1      	b.n	8005dea <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c66:	4b40      	ldr	r3, [pc, #256]	@ (8005d68 <HAL_RCC_OscConfig+0x4ac>)
 8005c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c6a:	f003 0302 	and.w	r3, r3, #2
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1ee      	bne.n	8005c50 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c72:	7dfb      	ldrb	r3, [r7, #23]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d105      	bne.n	8005c84 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c78:	4b3b      	ldr	r3, [pc, #236]	@ (8005d68 <HAL_RCC_OscConfig+0x4ac>)
 8005c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c7c:	4a3a      	ldr	r2, [pc, #232]	@ (8005d68 <HAL_RCC_OscConfig+0x4ac>)
 8005c7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c82:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f000 80ad 	beq.w	8005de8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c8e:	4b36      	ldr	r3, [pc, #216]	@ (8005d68 <HAL_RCC_OscConfig+0x4ac>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f003 030c 	and.w	r3, r3, #12
 8005c96:	2b08      	cmp	r3, #8
 8005c98:	d060      	beq.n	8005d5c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d145      	bne.n	8005d2e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ca2:	4b33      	ldr	r3, [pc, #204]	@ (8005d70 <HAL_RCC_OscConfig+0x4b4>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca8:	f7fd ff56 	bl	8003b58 <HAL_GetTick>
 8005cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cae:	e008      	b.n	8005cc2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cb0:	f7fd ff52 	bl	8003b58 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e093      	b.n	8005dea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cc2:	4b29      	ldr	r3, [pc, #164]	@ (8005d68 <HAL_RCC_OscConfig+0x4ac>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1f0      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	69da      	ldr	r2, [r3, #28]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	431a      	orrs	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cdc:	019b      	lsls	r3, r3, #6
 8005cde:	431a      	orrs	r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce4:	085b      	lsrs	r3, r3, #1
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	041b      	lsls	r3, r3, #16
 8005cea:	431a      	orrs	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf0:	061b      	lsls	r3, r3, #24
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cf8:	071b      	lsls	r3, r3, #28
 8005cfa:	491b      	ldr	r1, [pc, #108]	@ (8005d68 <HAL_RCC_OscConfig+0x4ac>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d00:	4b1b      	ldr	r3, [pc, #108]	@ (8005d70 <HAL_RCC_OscConfig+0x4b4>)
 8005d02:	2201      	movs	r2, #1
 8005d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d06:	f7fd ff27 	bl	8003b58 <HAL_GetTick>
 8005d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d0c:	e008      	b.n	8005d20 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d0e:	f7fd ff23 	bl	8003b58 <HAL_GetTick>
 8005d12:	4602      	mov	r2, r0
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d901      	bls.n	8005d20 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e064      	b.n	8005dea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d20:	4b11      	ldr	r3, [pc, #68]	@ (8005d68 <HAL_RCC_OscConfig+0x4ac>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d0f0      	beq.n	8005d0e <HAL_RCC_OscConfig+0x452>
 8005d2c:	e05c      	b.n	8005de8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d2e:	4b10      	ldr	r3, [pc, #64]	@ (8005d70 <HAL_RCC_OscConfig+0x4b4>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d34:	f7fd ff10 	bl	8003b58 <HAL_GetTick>
 8005d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d3a:	e008      	b.n	8005d4e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d3c:	f7fd ff0c 	bl	8003b58 <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d901      	bls.n	8005d4e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e04d      	b.n	8005dea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d4e:	4b06      	ldr	r3, [pc, #24]	@ (8005d68 <HAL_RCC_OscConfig+0x4ac>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1f0      	bne.n	8005d3c <HAL_RCC_OscConfig+0x480>
 8005d5a:	e045      	b.n	8005de8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d107      	bne.n	8005d74 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e040      	b.n	8005dea <HAL_RCC_OscConfig+0x52e>
 8005d68:	40023800 	.word	0x40023800
 8005d6c:	40007000 	.word	0x40007000
 8005d70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d74:	4b1f      	ldr	r3, [pc, #124]	@ (8005df4 <HAL_RCC_OscConfig+0x538>)
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d030      	beq.n	8005de4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d129      	bne.n	8005de4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d122      	bne.n	8005de4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005da4:	4013      	ands	r3, r2
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005daa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d119      	bne.n	8005de4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dba:	085b      	lsrs	r3, r3, #1
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d10f      	bne.n	8005de4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d107      	bne.n	8005de4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dde:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d001      	beq.n	8005de8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e000      	b.n	8005dea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3718      	adds	r7, #24
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	40023800 	.word	0x40023800

08005df8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e07b      	b.n	8005f02 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d108      	bne.n	8005e24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e1a:	d009      	beq.n	8005e30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	61da      	str	r2, [r3, #28]
 8005e22:	e005      	b.n	8005e30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d106      	bne.n	8005e50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7fd fc0c 	bl	8003668 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005e78:	431a      	orrs	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e82:	431a      	orrs	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	f003 0302 	and.w	r3, r3, #2
 8005e8c:	431a      	orrs	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	431a      	orrs	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ea0:	431a      	orrs	r2, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a1b      	ldr	r3, [r3, #32]
 8005eb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eb4:	ea42 0103 	orr.w	r1, r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ebc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	0c1b      	lsrs	r3, r3, #16
 8005ece:	f003 0104 	and.w	r1, r3, #4
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed6:	f003 0210 	and.w	r2, r3, #16
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	69da      	ldr	r2, [r3, #28]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ef0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3708      	adds	r7, #8
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b088      	sub	sp, #32
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	60f8      	str	r0, [r7, #12]
 8005f12:	60b9      	str	r1, [r7, #8]
 8005f14:	603b      	str	r3, [r7, #0]
 8005f16:	4613      	mov	r3, r2
 8005f18:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f1a:	f7fd fe1d 	bl	8003b58 <HAL_GetTick>
 8005f1e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005f20:	88fb      	ldrh	r3, [r7, #6]
 8005f22:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d001      	beq.n	8005f34 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005f30:	2302      	movs	r3, #2
 8005f32:	e12a      	b.n	800618a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d002      	beq.n	8005f40 <HAL_SPI_Transmit+0x36>
 8005f3a:	88fb      	ldrh	r3, [r7, #6]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d101      	bne.n	8005f44 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e122      	b.n	800618a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d101      	bne.n	8005f52 <HAL_SPI_Transmit+0x48>
 8005f4e:	2302      	movs	r3, #2
 8005f50:	e11b      	b.n	800618a <HAL_SPI_Transmit+0x280>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2203      	movs	r2, #3
 8005f5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	88fa      	ldrh	r2, [r7, #6]
 8005f72:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	88fa      	ldrh	r2, [r7, #6]
 8005f78:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fa0:	d10f      	bne.n	8005fc2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fb0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fc0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fcc:	2b40      	cmp	r3, #64	@ 0x40
 8005fce:	d007      	beq.n	8005fe0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fde:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fe8:	d152      	bne.n	8006090 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d002      	beq.n	8005ff8 <HAL_SPI_Transmit+0xee>
 8005ff2:	8b7b      	ldrh	r3, [r7, #26]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d145      	bne.n	8006084 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ffc:	881a      	ldrh	r2, [r3, #0]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006008:	1c9a      	adds	r2, r3, #2
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006012:	b29b      	uxth	r3, r3
 8006014:	3b01      	subs	r3, #1
 8006016:	b29a      	uxth	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800601c:	e032      	b.n	8006084 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f003 0302 	and.w	r3, r3, #2
 8006028:	2b02      	cmp	r3, #2
 800602a:	d112      	bne.n	8006052 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006030:	881a      	ldrh	r2, [r3, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800603c:	1c9a      	adds	r2, r3, #2
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006046:	b29b      	uxth	r3, r3
 8006048:	3b01      	subs	r3, #1
 800604a:	b29a      	uxth	r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006050:	e018      	b.n	8006084 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006052:	f7fd fd81 	bl	8003b58 <HAL_GetTick>
 8006056:	4602      	mov	r2, r0
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	429a      	cmp	r2, r3
 8006060:	d803      	bhi.n	800606a <HAL_SPI_Transmit+0x160>
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006068:	d102      	bne.n	8006070 <HAL_SPI_Transmit+0x166>
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d109      	bne.n	8006084 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e082      	b.n	800618a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006088:	b29b      	uxth	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1c7      	bne.n	800601e <HAL_SPI_Transmit+0x114>
 800608e:	e053      	b.n	8006138 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d002      	beq.n	800609e <HAL_SPI_Transmit+0x194>
 8006098:	8b7b      	ldrh	r3, [r7, #26]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d147      	bne.n	800612e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	330c      	adds	r3, #12
 80060a8:	7812      	ldrb	r2, [r2, #0]
 80060aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b0:	1c5a      	adds	r2, r3, #1
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	3b01      	subs	r3, #1
 80060be:	b29a      	uxth	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80060c4:	e033      	b.n	800612e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f003 0302 	and.w	r3, r3, #2
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d113      	bne.n	80060fc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	330c      	adds	r3, #12
 80060de:	7812      	ldrb	r2, [r2, #0]
 80060e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060e6:	1c5a      	adds	r2, r3, #1
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	3b01      	subs	r3, #1
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80060fa:	e018      	b.n	800612e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060fc:	f7fd fd2c 	bl	8003b58 <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	683a      	ldr	r2, [r7, #0]
 8006108:	429a      	cmp	r2, r3
 800610a:	d803      	bhi.n	8006114 <HAL_SPI_Transmit+0x20a>
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006112:	d102      	bne.n	800611a <HAL_SPI_Transmit+0x210>
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d109      	bne.n	800612e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e02d      	b.n	800618a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006132:	b29b      	uxth	r3, r3
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1c6      	bne.n	80060c6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006138:	69fa      	ldr	r2, [r7, #28]
 800613a:	6839      	ldr	r1, [r7, #0]
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 f8b1 	bl	80062a4 <SPI_EndRxTxTransaction>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d002      	beq.n	800614e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2220      	movs	r2, #32
 800614c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10a      	bne.n	800616c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006156:	2300      	movs	r3, #0
 8006158:	617b      	str	r3, [r7, #20]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	617b      	str	r3, [r7, #20]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	617b      	str	r3, [r7, #20]
 800616a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006180:	2b00      	cmp	r3, #0
 8006182:	d001      	beq.n	8006188 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e000      	b.n	800618a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006188:	2300      	movs	r3, #0
  }
}
 800618a:	4618      	mov	r0, r3
 800618c:	3720      	adds	r7, #32
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
	...

08006194 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b088      	sub	sp, #32
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	603b      	str	r3, [r7, #0]
 80061a0:	4613      	mov	r3, r2
 80061a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061a4:	f7fd fcd8 	bl	8003b58 <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ac:	1a9b      	subs	r3, r3, r2
 80061ae:	683a      	ldr	r2, [r7, #0]
 80061b0:	4413      	add	r3, r2
 80061b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061b4:	f7fd fcd0 	bl	8003b58 <HAL_GetTick>
 80061b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061ba:	4b39      	ldr	r3, [pc, #228]	@ (80062a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	015b      	lsls	r3, r3, #5
 80061c0:	0d1b      	lsrs	r3, r3, #20
 80061c2:	69fa      	ldr	r2, [r7, #28]
 80061c4:	fb02 f303 	mul.w	r3, r2, r3
 80061c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061ca:	e054      	b.n	8006276 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d2:	d050      	beq.n	8006276 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061d4:	f7fd fcc0 	bl	8003b58 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	69fa      	ldr	r2, [r7, #28]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d902      	bls.n	80061ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d13d      	bne.n	8006266 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80061f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006202:	d111      	bne.n	8006228 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800620c:	d004      	beq.n	8006218 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006216:	d107      	bne.n	8006228 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006226:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800622c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006230:	d10f      	bne.n	8006252 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006240:	601a      	str	r2, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006250:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	e017      	b.n	8006296 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d101      	bne.n	8006270 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800626c:	2300      	movs	r3, #0
 800626e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	3b01      	subs	r3, #1
 8006274:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	4013      	ands	r3, r2
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	429a      	cmp	r2, r3
 8006284:	bf0c      	ite	eq
 8006286:	2301      	moveq	r3, #1
 8006288:	2300      	movne	r3, #0
 800628a:	b2db      	uxtb	r3, r3
 800628c:	461a      	mov	r2, r3
 800628e:	79fb      	ldrb	r3, [r7, #7]
 8006290:	429a      	cmp	r2, r3
 8006292:	d19b      	bne.n	80061cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3720      	adds	r7, #32
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	2000000c 	.word	0x2000000c

080062a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b088      	sub	sp, #32
 80062a8:	af02      	add	r7, sp, #8
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	9300      	str	r3, [sp, #0]
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	2201      	movs	r2, #1
 80062b8:	2102      	movs	r1, #2
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f7ff ff6a 	bl	8006194 <SPI_WaitFlagStateUntilTimeout>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d007      	beq.n	80062d6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062ca:	f043 0220 	orr.w	r2, r3, #32
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e032      	b.n	800633c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80062d6:	4b1b      	ldr	r3, [pc, #108]	@ (8006344 <SPI_EndRxTxTransaction+0xa0>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a1b      	ldr	r2, [pc, #108]	@ (8006348 <SPI_EndRxTxTransaction+0xa4>)
 80062dc:	fba2 2303 	umull	r2, r3, r2, r3
 80062e0:	0d5b      	lsrs	r3, r3, #21
 80062e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80062e6:	fb02 f303 	mul.w	r3, r2, r3
 80062ea:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062f4:	d112      	bne.n	800631c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	9300      	str	r3, [sp, #0]
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	2200      	movs	r2, #0
 80062fe:	2180      	movs	r1, #128	@ 0x80
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f7ff ff47 	bl	8006194 <SPI_WaitFlagStateUntilTimeout>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d016      	beq.n	800633a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006310:	f043 0220 	orr.w	r2, r3, #32
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e00f      	b.n	800633c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00a      	beq.n	8006338 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	3b01      	subs	r3, #1
 8006326:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006332:	2b80      	cmp	r3, #128	@ 0x80
 8006334:	d0f2      	beq.n	800631c <SPI_EndRxTxTransaction+0x78>
 8006336:	e000      	b.n	800633a <SPI_EndRxTxTransaction+0x96>
        break;
 8006338:	bf00      	nop
  }

  return HAL_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3718      	adds	r7, #24
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	2000000c 	.word	0x2000000c
 8006348:	165e9f81 	.word	0x165e9f81

0800634c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e041      	b.n	80063e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006364:	b2db      	uxtb	r3, r3
 8006366:	2b00      	cmp	r3, #0
 8006368:	d106      	bne.n	8006378 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f7fd fa16 	bl	80037a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2202      	movs	r2, #2
 800637c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	3304      	adds	r3, #4
 8006388:	4619      	mov	r1, r3
 800638a:	4610      	mov	r0, r2
 800638c:	f000 f95e 	bl	800664c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
	...

080063ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d001      	beq.n	8006404 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e046      	b.n	8006492 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2202      	movs	r2, #2
 8006408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a23      	ldr	r2, [pc, #140]	@ (80064a0 <HAL_TIM_Base_Start+0xb4>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d022      	beq.n	800645c <HAL_TIM_Base_Start+0x70>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800641e:	d01d      	beq.n	800645c <HAL_TIM_Base_Start+0x70>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a1f      	ldr	r2, [pc, #124]	@ (80064a4 <HAL_TIM_Base_Start+0xb8>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d018      	beq.n	800645c <HAL_TIM_Base_Start+0x70>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a1e      	ldr	r2, [pc, #120]	@ (80064a8 <HAL_TIM_Base_Start+0xbc>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d013      	beq.n	800645c <HAL_TIM_Base_Start+0x70>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a1c      	ldr	r2, [pc, #112]	@ (80064ac <HAL_TIM_Base_Start+0xc0>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d00e      	beq.n	800645c <HAL_TIM_Base_Start+0x70>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a1b      	ldr	r2, [pc, #108]	@ (80064b0 <HAL_TIM_Base_Start+0xc4>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d009      	beq.n	800645c <HAL_TIM_Base_Start+0x70>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a19      	ldr	r2, [pc, #100]	@ (80064b4 <HAL_TIM_Base_Start+0xc8>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d004      	beq.n	800645c <HAL_TIM_Base_Start+0x70>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a18      	ldr	r2, [pc, #96]	@ (80064b8 <HAL_TIM_Base_Start+0xcc>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d111      	bne.n	8006480 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f003 0307 	and.w	r3, r3, #7
 8006466:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2b06      	cmp	r3, #6
 800646c:	d010      	beq.n	8006490 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f042 0201 	orr.w	r2, r2, #1
 800647c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800647e:	e007      	b.n	8006490 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f042 0201 	orr.w	r2, r2, #1
 800648e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3714      	adds	r7, #20
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	40010000 	.word	0x40010000
 80064a4:	40000400 	.word	0x40000400
 80064a8:	40000800 	.word	0x40000800
 80064ac:	40000c00 	.word	0x40000c00
 80064b0:	40010400 	.word	0x40010400
 80064b4:	40014000 	.word	0x40014000
 80064b8:	40001800 	.word	0x40001800

080064bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064c6:	2300      	movs	r3, #0
 80064c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d101      	bne.n	80064d8 <HAL_TIM_ConfigClockSource+0x1c>
 80064d4:	2302      	movs	r3, #2
 80064d6:	e0b4      	b.n	8006642 <HAL_TIM_ConfigClockSource+0x186>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2202      	movs	r2, #2
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80064f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006510:	d03e      	beq.n	8006590 <HAL_TIM_ConfigClockSource+0xd4>
 8006512:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006516:	f200 8087 	bhi.w	8006628 <HAL_TIM_ConfigClockSource+0x16c>
 800651a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800651e:	f000 8086 	beq.w	800662e <HAL_TIM_ConfigClockSource+0x172>
 8006522:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006526:	d87f      	bhi.n	8006628 <HAL_TIM_ConfigClockSource+0x16c>
 8006528:	2b70      	cmp	r3, #112	@ 0x70
 800652a:	d01a      	beq.n	8006562 <HAL_TIM_ConfigClockSource+0xa6>
 800652c:	2b70      	cmp	r3, #112	@ 0x70
 800652e:	d87b      	bhi.n	8006628 <HAL_TIM_ConfigClockSource+0x16c>
 8006530:	2b60      	cmp	r3, #96	@ 0x60
 8006532:	d050      	beq.n	80065d6 <HAL_TIM_ConfigClockSource+0x11a>
 8006534:	2b60      	cmp	r3, #96	@ 0x60
 8006536:	d877      	bhi.n	8006628 <HAL_TIM_ConfigClockSource+0x16c>
 8006538:	2b50      	cmp	r3, #80	@ 0x50
 800653a:	d03c      	beq.n	80065b6 <HAL_TIM_ConfigClockSource+0xfa>
 800653c:	2b50      	cmp	r3, #80	@ 0x50
 800653e:	d873      	bhi.n	8006628 <HAL_TIM_ConfigClockSource+0x16c>
 8006540:	2b40      	cmp	r3, #64	@ 0x40
 8006542:	d058      	beq.n	80065f6 <HAL_TIM_ConfigClockSource+0x13a>
 8006544:	2b40      	cmp	r3, #64	@ 0x40
 8006546:	d86f      	bhi.n	8006628 <HAL_TIM_ConfigClockSource+0x16c>
 8006548:	2b30      	cmp	r3, #48	@ 0x30
 800654a:	d064      	beq.n	8006616 <HAL_TIM_ConfigClockSource+0x15a>
 800654c:	2b30      	cmp	r3, #48	@ 0x30
 800654e:	d86b      	bhi.n	8006628 <HAL_TIM_ConfigClockSource+0x16c>
 8006550:	2b20      	cmp	r3, #32
 8006552:	d060      	beq.n	8006616 <HAL_TIM_ConfigClockSource+0x15a>
 8006554:	2b20      	cmp	r3, #32
 8006556:	d867      	bhi.n	8006628 <HAL_TIM_ConfigClockSource+0x16c>
 8006558:	2b00      	cmp	r3, #0
 800655a:	d05c      	beq.n	8006616 <HAL_TIM_ConfigClockSource+0x15a>
 800655c:	2b10      	cmp	r3, #16
 800655e:	d05a      	beq.n	8006616 <HAL_TIM_ConfigClockSource+0x15a>
 8006560:	e062      	b.n	8006628 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006572:	f000 f991 	bl	8006898 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006584:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	609a      	str	r2, [r3, #8]
      break;
 800658e:	e04f      	b.n	8006630 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065a0:	f000 f97a 	bl	8006898 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	689a      	ldr	r2, [r3, #8]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065b2:	609a      	str	r2, [r3, #8]
      break;
 80065b4:	e03c      	b.n	8006630 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065c2:	461a      	mov	r2, r3
 80065c4:	f000 f8ee 	bl	80067a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2150      	movs	r1, #80	@ 0x50
 80065ce:	4618      	mov	r0, r3
 80065d0:	f000 f947 	bl	8006862 <TIM_ITRx_SetConfig>
      break;
 80065d4:	e02c      	b.n	8006630 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80065e2:	461a      	mov	r2, r3
 80065e4:	f000 f90d 	bl	8006802 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2160      	movs	r1, #96	@ 0x60
 80065ee:	4618      	mov	r0, r3
 80065f0:	f000 f937 	bl	8006862 <TIM_ITRx_SetConfig>
      break;
 80065f4:	e01c      	b.n	8006630 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006602:	461a      	mov	r2, r3
 8006604:	f000 f8ce 	bl	80067a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2140      	movs	r1, #64	@ 0x40
 800660e:	4618      	mov	r0, r3
 8006610:	f000 f927 	bl	8006862 <TIM_ITRx_SetConfig>
      break;
 8006614:	e00c      	b.n	8006630 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4619      	mov	r1, r3
 8006620:	4610      	mov	r0, r2
 8006622:	f000 f91e 	bl	8006862 <TIM_ITRx_SetConfig>
      break;
 8006626:	e003      	b.n	8006630 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	73fb      	strb	r3, [r7, #15]
      break;
 800662c:	e000      	b.n	8006630 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800662e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006640:	7bfb      	ldrb	r3, [r7, #15]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
	...

0800664c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a46      	ldr	r2, [pc, #280]	@ (8006778 <TIM_Base_SetConfig+0x12c>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d013      	beq.n	800668c <TIM_Base_SetConfig+0x40>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800666a:	d00f      	beq.n	800668c <TIM_Base_SetConfig+0x40>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a43      	ldr	r2, [pc, #268]	@ (800677c <TIM_Base_SetConfig+0x130>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d00b      	beq.n	800668c <TIM_Base_SetConfig+0x40>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a42      	ldr	r2, [pc, #264]	@ (8006780 <TIM_Base_SetConfig+0x134>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d007      	beq.n	800668c <TIM_Base_SetConfig+0x40>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a41      	ldr	r2, [pc, #260]	@ (8006784 <TIM_Base_SetConfig+0x138>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d003      	beq.n	800668c <TIM_Base_SetConfig+0x40>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a40      	ldr	r2, [pc, #256]	@ (8006788 <TIM_Base_SetConfig+0x13c>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d108      	bne.n	800669e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006692:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	4313      	orrs	r3, r2
 800669c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a35      	ldr	r2, [pc, #212]	@ (8006778 <TIM_Base_SetConfig+0x12c>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d02b      	beq.n	80066fe <TIM_Base_SetConfig+0xb2>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066ac:	d027      	beq.n	80066fe <TIM_Base_SetConfig+0xb2>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a32      	ldr	r2, [pc, #200]	@ (800677c <TIM_Base_SetConfig+0x130>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d023      	beq.n	80066fe <TIM_Base_SetConfig+0xb2>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a31      	ldr	r2, [pc, #196]	@ (8006780 <TIM_Base_SetConfig+0x134>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d01f      	beq.n	80066fe <TIM_Base_SetConfig+0xb2>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a30      	ldr	r2, [pc, #192]	@ (8006784 <TIM_Base_SetConfig+0x138>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d01b      	beq.n	80066fe <TIM_Base_SetConfig+0xb2>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a2f      	ldr	r2, [pc, #188]	@ (8006788 <TIM_Base_SetConfig+0x13c>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d017      	beq.n	80066fe <TIM_Base_SetConfig+0xb2>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a2e      	ldr	r2, [pc, #184]	@ (800678c <TIM_Base_SetConfig+0x140>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d013      	beq.n	80066fe <TIM_Base_SetConfig+0xb2>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a2d      	ldr	r2, [pc, #180]	@ (8006790 <TIM_Base_SetConfig+0x144>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d00f      	beq.n	80066fe <TIM_Base_SetConfig+0xb2>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a2c      	ldr	r2, [pc, #176]	@ (8006794 <TIM_Base_SetConfig+0x148>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d00b      	beq.n	80066fe <TIM_Base_SetConfig+0xb2>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a2b      	ldr	r2, [pc, #172]	@ (8006798 <TIM_Base_SetConfig+0x14c>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d007      	beq.n	80066fe <TIM_Base_SetConfig+0xb2>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a2a      	ldr	r2, [pc, #168]	@ (800679c <TIM_Base_SetConfig+0x150>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d003      	beq.n	80066fe <TIM_Base_SetConfig+0xb2>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a29      	ldr	r2, [pc, #164]	@ (80067a0 <TIM_Base_SetConfig+0x154>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d108      	bne.n	8006710 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006704:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	4313      	orrs	r3, r2
 800670e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	4313      	orrs	r3, r2
 800671c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	689a      	ldr	r2, [r3, #8]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a10      	ldr	r2, [pc, #64]	@ (8006778 <TIM_Base_SetConfig+0x12c>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d003      	beq.n	8006744 <TIM_Base_SetConfig+0xf8>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a12      	ldr	r2, [pc, #72]	@ (8006788 <TIM_Base_SetConfig+0x13c>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d103      	bne.n	800674c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	691a      	ldr	r2, [r3, #16]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	f003 0301 	and.w	r3, r3, #1
 800675a:	2b01      	cmp	r3, #1
 800675c:	d105      	bne.n	800676a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	f023 0201 	bic.w	r2, r3, #1
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	611a      	str	r2, [r3, #16]
  }
}
 800676a:	bf00      	nop
 800676c:	3714      	adds	r7, #20
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	40010000 	.word	0x40010000
 800677c:	40000400 	.word	0x40000400
 8006780:	40000800 	.word	0x40000800
 8006784:	40000c00 	.word	0x40000c00
 8006788:	40010400 	.word	0x40010400
 800678c:	40014000 	.word	0x40014000
 8006790:	40014400 	.word	0x40014400
 8006794:	40014800 	.word	0x40014800
 8006798:	40001800 	.word	0x40001800
 800679c:	40001c00 	.word	0x40001c00
 80067a0:	40002000 	.word	0x40002000

080067a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	f023 0201 	bic.w	r2, r3, #1
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	011b      	lsls	r3, r3, #4
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f023 030a 	bic.w	r3, r3, #10
 80067e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	621a      	str	r2, [r3, #32]
}
 80067f6:	bf00      	nop
 80067f8:	371c      	adds	r7, #28
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006802:	b480      	push	{r7}
 8006804:	b087      	sub	sp, #28
 8006806:	af00      	add	r7, sp, #0
 8006808:	60f8      	str	r0, [r7, #12]
 800680a:	60b9      	str	r1, [r7, #8]
 800680c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6a1b      	ldr	r3, [r3, #32]
 8006818:	f023 0210 	bic.w	r2, r3, #16
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800682c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	031b      	lsls	r3, r3, #12
 8006832:	693a      	ldr	r2, [r7, #16]
 8006834:	4313      	orrs	r3, r2
 8006836:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800683e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	011b      	lsls	r3, r3, #4
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	4313      	orrs	r3, r2
 8006848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	697a      	ldr	r2, [r7, #20]
 8006854:	621a      	str	r2, [r3, #32]
}
 8006856:	bf00      	nop
 8006858:	371c      	adds	r7, #28
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr

08006862 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006862:	b480      	push	{r7}
 8006864:	b085      	sub	sp, #20
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
 800686a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006878:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800687a:	683a      	ldr	r2, [r7, #0]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	4313      	orrs	r3, r2
 8006880:	f043 0307 	orr.w	r3, r3, #7
 8006884:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	609a      	str	r2, [r3, #8]
}
 800688c:	bf00      	nop
 800688e:	3714      	adds	r7, #20
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006898:	b480      	push	{r7}
 800689a:	b087      	sub	sp, #28
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
 80068a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80068b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	021a      	lsls	r2, r3, #8
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	431a      	orrs	r2, r3
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	4313      	orrs	r3, r2
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	609a      	str	r2, [r3, #8]
}
 80068cc:	bf00      	nop
 80068ce:	371c      	adds	r7, #28
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d101      	bne.n	80068f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068ec:	2302      	movs	r3, #2
 80068ee:	e05a      	b.n	80069a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2202      	movs	r2, #2
 80068fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006916:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	4313      	orrs	r3, r2
 8006920:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a21      	ldr	r2, [pc, #132]	@ (80069b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d022      	beq.n	800697a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800693c:	d01d      	beq.n	800697a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a1d      	ldr	r2, [pc, #116]	@ (80069b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d018      	beq.n	800697a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a1b      	ldr	r2, [pc, #108]	@ (80069bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d013      	beq.n	800697a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a1a      	ldr	r2, [pc, #104]	@ (80069c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d00e      	beq.n	800697a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a18      	ldr	r2, [pc, #96]	@ (80069c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d009      	beq.n	800697a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a17      	ldr	r2, [pc, #92]	@ (80069c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d004      	beq.n	800697a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a15      	ldr	r2, [pc, #84]	@ (80069cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d10c      	bne.n	8006994 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006980:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	68ba      	ldr	r2, [r7, #8]
 8006988:	4313      	orrs	r3, r2
 800698a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3714      	adds	r7, #20
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	40010000 	.word	0x40010000
 80069b8:	40000400 	.word	0x40000400
 80069bc:	40000800 	.word	0x40000800
 80069c0:	40000c00 	.word	0x40000c00
 80069c4:	40010400 	.word	0x40010400
 80069c8:	40014000 	.word	0x40014000
 80069cc:	40001800 	.word	0x40001800

080069d0 <atan2>:
 80069d0:	f000 bcd6 	b.w	8007380 <__ieee754_atan2>

080069d4 <sqrt>:
 80069d4:	b538      	push	{r3, r4, r5, lr}
 80069d6:	ed2d 8b02 	vpush	{d8}
 80069da:	ec55 4b10 	vmov	r4, r5, d0
 80069de:	f000 fa6f 	bl	8006ec0 <__ieee754_sqrt>
 80069e2:	4622      	mov	r2, r4
 80069e4:	462b      	mov	r3, r5
 80069e6:	4620      	mov	r0, r4
 80069e8:	4629      	mov	r1, r5
 80069ea:	eeb0 8a40 	vmov.f32	s16, s0
 80069ee:	eef0 8a60 	vmov.f32	s17, s1
 80069f2:	f7fa f8bb 	bl	8000b6c <__aeabi_dcmpun>
 80069f6:	b990      	cbnz	r0, 8006a1e <sqrt+0x4a>
 80069f8:	2200      	movs	r2, #0
 80069fa:	2300      	movs	r3, #0
 80069fc:	4620      	mov	r0, r4
 80069fe:	4629      	mov	r1, r5
 8006a00:	f7fa f88c 	bl	8000b1c <__aeabi_dcmplt>
 8006a04:	b158      	cbz	r0, 8006a1e <sqrt+0x4a>
 8006a06:	f002 f9b7 	bl	8008d78 <__errno>
 8006a0a:	2321      	movs	r3, #33	@ 0x21
 8006a0c:	6003      	str	r3, [r0, #0]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	2300      	movs	r3, #0
 8006a12:	4610      	mov	r0, r2
 8006a14:	4619      	mov	r1, r3
 8006a16:	f7f9 ff39 	bl	800088c <__aeabi_ddiv>
 8006a1a:	ec41 0b18 	vmov	d8, r0, r1
 8006a1e:	eeb0 0a48 	vmov.f32	s0, s16
 8006a22:	eef0 0a68 	vmov.f32	s1, s17
 8006a26:	ecbd 8b02 	vpop	{d8}
 8006a2a:	bd38      	pop	{r3, r4, r5, pc}
 8006a2c:	0000      	movs	r0, r0
	...

08006a30 <atan>:
 8006a30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a34:	ec55 4b10 	vmov	r4, r5, d0
 8006a38:	4bbf      	ldr	r3, [pc, #764]	@ (8006d38 <atan+0x308>)
 8006a3a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8006a3e:	429e      	cmp	r6, r3
 8006a40:	46ab      	mov	fp, r5
 8006a42:	d918      	bls.n	8006a76 <atan+0x46>
 8006a44:	4bbd      	ldr	r3, [pc, #756]	@ (8006d3c <atan+0x30c>)
 8006a46:	429e      	cmp	r6, r3
 8006a48:	d801      	bhi.n	8006a4e <atan+0x1e>
 8006a4a:	d109      	bne.n	8006a60 <atan+0x30>
 8006a4c:	b144      	cbz	r4, 8006a60 <atan+0x30>
 8006a4e:	4622      	mov	r2, r4
 8006a50:	462b      	mov	r3, r5
 8006a52:	4620      	mov	r0, r4
 8006a54:	4629      	mov	r1, r5
 8006a56:	f7f9 fc39 	bl	80002cc <__adddf3>
 8006a5a:	4604      	mov	r4, r0
 8006a5c:	460d      	mov	r5, r1
 8006a5e:	e006      	b.n	8006a6e <atan+0x3e>
 8006a60:	f1bb 0f00 	cmp.w	fp, #0
 8006a64:	f340 812b 	ble.w	8006cbe <atan+0x28e>
 8006a68:	a597      	add	r5, pc, #604	@ (adr r5, 8006cc8 <atan+0x298>)
 8006a6a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006a6e:	ec45 4b10 	vmov	d0, r4, r5
 8006a72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a76:	4bb2      	ldr	r3, [pc, #712]	@ (8006d40 <atan+0x310>)
 8006a78:	429e      	cmp	r6, r3
 8006a7a:	d813      	bhi.n	8006aa4 <atan+0x74>
 8006a7c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8006a80:	429e      	cmp	r6, r3
 8006a82:	d80c      	bhi.n	8006a9e <atan+0x6e>
 8006a84:	a392      	add	r3, pc, #584	@ (adr r3, 8006cd0 <atan+0x2a0>)
 8006a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	4629      	mov	r1, r5
 8006a8e:	f7f9 fc1d 	bl	80002cc <__adddf3>
 8006a92:	4bac      	ldr	r3, [pc, #688]	@ (8006d44 <atan+0x314>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	f7fa f85f 	bl	8000b58 <__aeabi_dcmpgt>
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	d1e7      	bne.n	8006a6e <atan+0x3e>
 8006a9e:	f04f 3aff 	mov.w	sl, #4294967295
 8006aa2:	e029      	b.n	8006af8 <atan+0xc8>
 8006aa4:	f000 f9b0 	bl	8006e08 <fabs>
 8006aa8:	4ba7      	ldr	r3, [pc, #668]	@ (8006d48 <atan+0x318>)
 8006aaa:	429e      	cmp	r6, r3
 8006aac:	ec55 4b10 	vmov	r4, r5, d0
 8006ab0:	f200 80bc 	bhi.w	8006c2c <atan+0x1fc>
 8006ab4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8006ab8:	429e      	cmp	r6, r3
 8006aba:	f200 809e 	bhi.w	8006bfa <atan+0x1ca>
 8006abe:	4622      	mov	r2, r4
 8006ac0:	462b      	mov	r3, r5
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	4629      	mov	r1, r5
 8006ac6:	f7f9 fc01 	bl	80002cc <__adddf3>
 8006aca:	4b9e      	ldr	r3, [pc, #632]	@ (8006d44 <atan+0x314>)
 8006acc:	2200      	movs	r2, #0
 8006ace:	f7f9 fbfb 	bl	80002c8 <__aeabi_dsub>
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	4606      	mov	r6, r0
 8006ad6:	460f      	mov	r7, r1
 8006ad8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006adc:	4620      	mov	r0, r4
 8006ade:	4629      	mov	r1, r5
 8006ae0:	f7f9 fbf4 	bl	80002cc <__adddf3>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	4630      	mov	r0, r6
 8006aea:	4639      	mov	r1, r7
 8006aec:	f7f9 fece 	bl	800088c <__aeabi_ddiv>
 8006af0:	f04f 0a00 	mov.w	sl, #0
 8006af4:	4604      	mov	r4, r0
 8006af6:	460d      	mov	r5, r1
 8006af8:	4622      	mov	r2, r4
 8006afa:	462b      	mov	r3, r5
 8006afc:	4620      	mov	r0, r4
 8006afe:	4629      	mov	r1, r5
 8006b00:	f7f9 fd9a 	bl	8000638 <__aeabi_dmul>
 8006b04:	4602      	mov	r2, r0
 8006b06:	460b      	mov	r3, r1
 8006b08:	4680      	mov	r8, r0
 8006b0a:	4689      	mov	r9, r1
 8006b0c:	f7f9 fd94 	bl	8000638 <__aeabi_dmul>
 8006b10:	a371      	add	r3, pc, #452	@ (adr r3, 8006cd8 <atan+0x2a8>)
 8006b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b16:	4606      	mov	r6, r0
 8006b18:	460f      	mov	r7, r1
 8006b1a:	f7f9 fd8d 	bl	8000638 <__aeabi_dmul>
 8006b1e:	a370      	add	r3, pc, #448	@ (adr r3, 8006ce0 <atan+0x2b0>)
 8006b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b24:	f7f9 fbd2 	bl	80002cc <__adddf3>
 8006b28:	4632      	mov	r2, r6
 8006b2a:	463b      	mov	r3, r7
 8006b2c:	f7f9 fd84 	bl	8000638 <__aeabi_dmul>
 8006b30:	a36d      	add	r3, pc, #436	@ (adr r3, 8006ce8 <atan+0x2b8>)
 8006b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b36:	f7f9 fbc9 	bl	80002cc <__adddf3>
 8006b3a:	4632      	mov	r2, r6
 8006b3c:	463b      	mov	r3, r7
 8006b3e:	f7f9 fd7b 	bl	8000638 <__aeabi_dmul>
 8006b42:	a36b      	add	r3, pc, #428	@ (adr r3, 8006cf0 <atan+0x2c0>)
 8006b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b48:	f7f9 fbc0 	bl	80002cc <__adddf3>
 8006b4c:	4632      	mov	r2, r6
 8006b4e:	463b      	mov	r3, r7
 8006b50:	f7f9 fd72 	bl	8000638 <__aeabi_dmul>
 8006b54:	a368      	add	r3, pc, #416	@ (adr r3, 8006cf8 <atan+0x2c8>)
 8006b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5a:	f7f9 fbb7 	bl	80002cc <__adddf3>
 8006b5e:	4632      	mov	r2, r6
 8006b60:	463b      	mov	r3, r7
 8006b62:	f7f9 fd69 	bl	8000638 <__aeabi_dmul>
 8006b66:	a366      	add	r3, pc, #408	@ (adr r3, 8006d00 <atan+0x2d0>)
 8006b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6c:	f7f9 fbae 	bl	80002cc <__adddf3>
 8006b70:	4642      	mov	r2, r8
 8006b72:	464b      	mov	r3, r9
 8006b74:	f7f9 fd60 	bl	8000638 <__aeabi_dmul>
 8006b78:	a363      	add	r3, pc, #396	@ (adr r3, 8006d08 <atan+0x2d8>)
 8006b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7e:	4680      	mov	r8, r0
 8006b80:	4689      	mov	r9, r1
 8006b82:	4630      	mov	r0, r6
 8006b84:	4639      	mov	r1, r7
 8006b86:	f7f9 fd57 	bl	8000638 <__aeabi_dmul>
 8006b8a:	a361      	add	r3, pc, #388	@ (adr r3, 8006d10 <atan+0x2e0>)
 8006b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b90:	f7f9 fb9a 	bl	80002c8 <__aeabi_dsub>
 8006b94:	4632      	mov	r2, r6
 8006b96:	463b      	mov	r3, r7
 8006b98:	f7f9 fd4e 	bl	8000638 <__aeabi_dmul>
 8006b9c:	a35e      	add	r3, pc, #376	@ (adr r3, 8006d18 <atan+0x2e8>)
 8006b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba2:	f7f9 fb91 	bl	80002c8 <__aeabi_dsub>
 8006ba6:	4632      	mov	r2, r6
 8006ba8:	463b      	mov	r3, r7
 8006baa:	f7f9 fd45 	bl	8000638 <__aeabi_dmul>
 8006bae:	a35c      	add	r3, pc, #368	@ (adr r3, 8006d20 <atan+0x2f0>)
 8006bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb4:	f7f9 fb88 	bl	80002c8 <__aeabi_dsub>
 8006bb8:	4632      	mov	r2, r6
 8006bba:	463b      	mov	r3, r7
 8006bbc:	f7f9 fd3c 	bl	8000638 <__aeabi_dmul>
 8006bc0:	a359      	add	r3, pc, #356	@ (adr r3, 8006d28 <atan+0x2f8>)
 8006bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc6:	f7f9 fb7f 	bl	80002c8 <__aeabi_dsub>
 8006bca:	4632      	mov	r2, r6
 8006bcc:	463b      	mov	r3, r7
 8006bce:	f7f9 fd33 	bl	8000638 <__aeabi_dmul>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	4640      	mov	r0, r8
 8006bd8:	4649      	mov	r1, r9
 8006bda:	f7f9 fb77 	bl	80002cc <__adddf3>
 8006bde:	4622      	mov	r2, r4
 8006be0:	462b      	mov	r3, r5
 8006be2:	f7f9 fd29 	bl	8000638 <__aeabi_dmul>
 8006be6:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006bea:	4602      	mov	r2, r0
 8006bec:	460b      	mov	r3, r1
 8006bee:	d148      	bne.n	8006c82 <atan+0x252>
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	4629      	mov	r1, r5
 8006bf4:	f7f9 fb68 	bl	80002c8 <__aeabi_dsub>
 8006bf8:	e72f      	b.n	8006a5a <atan+0x2a>
 8006bfa:	4b52      	ldr	r3, [pc, #328]	@ (8006d44 <atan+0x314>)
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	4620      	mov	r0, r4
 8006c00:	4629      	mov	r1, r5
 8006c02:	f7f9 fb61 	bl	80002c8 <__aeabi_dsub>
 8006c06:	4b4f      	ldr	r3, [pc, #316]	@ (8006d44 <atan+0x314>)
 8006c08:	4606      	mov	r6, r0
 8006c0a:	460f      	mov	r7, r1
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	4620      	mov	r0, r4
 8006c10:	4629      	mov	r1, r5
 8006c12:	f7f9 fb5b 	bl	80002cc <__adddf3>
 8006c16:	4602      	mov	r2, r0
 8006c18:	460b      	mov	r3, r1
 8006c1a:	4630      	mov	r0, r6
 8006c1c:	4639      	mov	r1, r7
 8006c1e:	f7f9 fe35 	bl	800088c <__aeabi_ddiv>
 8006c22:	f04f 0a01 	mov.w	sl, #1
 8006c26:	4604      	mov	r4, r0
 8006c28:	460d      	mov	r5, r1
 8006c2a:	e765      	b.n	8006af8 <atan+0xc8>
 8006c2c:	4b47      	ldr	r3, [pc, #284]	@ (8006d4c <atan+0x31c>)
 8006c2e:	429e      	cmp	r6, r3
 8006c30:	d21c      	bcs.n	8006c6c <atan+0x23c>
 8006c32:	4b47      	ldr	r3, [pc, #284]	@ (8006d50 <atan+0x320>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	4620      	mov	r0, r4
 8006c38:	4629      	mov	r1, r5
 8006c3a:	f7f9 fb45 	bl	80002c8 <__aeabi_dsub>
 8006c3e:	4b44      	ldr	r3, [pc, #272]	@ (8006d50 <atan+0x320>)
 8006c40:	4606      	mov	r6, r0
 8006c42:	460f      	mov	r7, r1
 8006c44:	2200      	movs	r2, #0
 8006c46:	4620      	mov	r0, r4
 8006c48:	4629      	mov	r1, r5
 8006c4a:	f7f9 fcf5 	bl	8000638 <__aeabi_dmul>
 8006c4e:	4b3d      	ldr	r3, [pc, #244]	@ (8006d44 <atan+0x314>)
 8006c50:	2200      	movs	r2, #0
 8006c52:	f7f9 fb3b 	bl	80002cc <__adddf3>
 8006c56:	4602      	mov	r2, r0
 8006c58:	460b      	mov	r3, r1
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	4639      	mov	r1, r7
 8006c5e:	f7f9 fe15 	bl	800088c <__aeabi_ddiv>
 8006c62:	f04f 0a02 	mov.w	sl, #2
 8006c66:	4604      	mov	r4, r0
 8006c68:	460d      	mov	r5, r1
 8006c6a:	e745      	b.n	8006af8 <atan+0xc8>
 8006c6c:	4622      	mov	r2, r4
 8006c6e:	462b      	mov	r3, r5
 8006c70:	4938      	ldr	r1, [pc, #224]	@ (8006d54 <atan+0x324>)
 8006c72:	2000      	movs	r0, #0
 8006c74:	f7f9 fe0a 	bl	800088c <__aeabi_ddiv>
 8006c78:	f04f 0a03 	mov.w	sl, #3
 8006c7c:	4604      	mov	r4, r0
 8006c7e:	460d      	mov	r5, r1
 8006c80:	e73a      	b.n	8006af8 <atan+0xc8>
 8006c82:	4b35      	ldr	r3, [pc, #212]	@ (8006d58 <atan+0x328>)
 8006c84:	4e35      	ldr	r6, [pc, #212]	@ (8006d5c <atan+0x32c>)
 8006c86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8e:	f7f9 fb1b 	bl	80002c8 <__aeabi_dsub>
 8006c92:	4622      	mov	r2, r4
 8006c94:	462b      	mov	r3, r5
 8006c96:	f7f9 fb17 	bl	80002c8 <__aeabi_dsub>
 8006c9a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006ca6:	f7f9 fb0f 	bl	80002c8 <__aeabi_dsub>
 8006caa:	f1bb 0f00 	cmp.w	fp, #0
 8006cae:	4604      	mov	r4, r0
 8006cb0:	460d      	mov	r5, r1
 8006cb2:	f6bf aedc 	bge.w	8006a6e <atan+0x3e>
 8006cb6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006cba:	461d      	mov	r5, r3
 8006cbc:	e6d7      	b.n	8006a6e <atan+0x3e>
 8006cbe:	a51c      	add	r5, pc, #112	@ (adr r5, 8006d30 <atan+0x300>)
 8006cc0:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006cc4:	e6d3      	b.n	8006a6e <atan+0x3e>
 8006cc6:	bf00      	nop
 8006cc8:	54442d18 	.word	0x54442d18
 8006ccc:	3ff921fb 	.word	0x3ff921fb
 8006cd0:	8800759c 	.word	0x8800759c
 8006cd4:	7e37e43c 	.word	0x7e37e43c
 8006cd8:	e322da11 	.word	0xe322da11
 8006cdc:	3f90ad3a 	.word	0x3f90ad3a
 8006ce0:	24760deb 	.word	0x24760deb
 8006ce4:	3fa97b4b 	.word	0x3fa97b4b
 8006ce8:	a0d03d51 	.word	0xa0d03d51
 8006cec:	3fb10d66 	.word	0x3fb10d66
 8006cf0:	c54c206e 	.word	0xc54c206e
 8006cf4:	3fb745cd 	.word	0x3fb745cd
 8006cf8:	920083ff 	.word	0x920083ff
 8006cfc:	3fc24924 	.word	0x3fc24924
 8006d00:	5555550d 	.word	0x5555550d
 8006d04:	3fd55555 	.word	0x3fd55555
 8006d08:	2c6a6c2f 	.word	0x2c6a6c2f
 8006d0c:	bfa2b444 	.word	0xbfa2b444
 8006d10:	52defd9a 	.word	0x52defd9a
 8006d14:	3fadde2d 	.word	0x3fadde2d
 8006d18:	af749a6d 	.word	0xaf749a6d
 8006d1c:	3fb3b0f2 	.word	0x3fb3b0f2
 8006d20:	fe231671 	.word	0xfe231671
 8006d24:	3fbc71c6 	.word	0x3fbc71c6
 8006d28:	9998ebc4 	.word	0x9998ebc4
 8006d2c:	3fc99999 	.word	0x3fc99999
 8006d30:	54442d18 	.word	0x54442d18
 8006d34:	bff921fb 	.word	0xbff921fb
 8006d38:	440fffff 	.word	0x440fffff
 8006d3c:	7ff00000 	.word	0x7ff00000
 8006d40:	3fdbffff 	.word	0x3fdbffff
 8006d44:	3ff00000 	.word	0x3ff00000
 8006d48:	3ff2ffff 	.word	0x3ff2ffff
 8006d4c:	40038000 	.word	0x40038000
 8006d50:	3ff80000 	.word	0x3ff80000
 8006d54:	bff00000 	.word	0xbff00000
 8006d58:	0800b158 	.word	0x0800b158
 8006d5c:	0800b178 	.word	0x0800b178

08006d60 <cos>:
 8006d60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d62:	ec53 2b10 	vmov	r2, r3, d0
 8006d66:	4826      	ldr	r0, [pc, #152]	@ (8006e00 <cos+0xa0>)
 8006d68:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006d6c:	4281      	cmp	r1, r0
 8006d6e:	d806      	bhi.n	8006d7e <cos+0x1e>
 8006d70:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8006df8 <cos+0x98>
 8006d74:	b005      	add	sp, #20
 8006d76:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d7a:	f000 b97d 	b.w	8007078 <__kernel_cos>
 8006d7e:	4821      	ldr	r0, [pc, #132]	@ (8006e04 <cos+0xa4>)
 8006d80:	4281      	cmp	r1, r0
 8006d82:	d908      	bls.n	8006d96 <cos+0x36>
 8006d84:	4610      	mov	r0, r2
 8006d86:	4619      	mov	r1, r3
 8006d88:	f7f9 fa9e 	bl	80002c8 <__aeabi_dsub>
 8006d8c:	ec41 0b10 	vmov	d0, r0, r1
 8006d90:	b005      	add	sp, #20
 8006d92:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d96:	4668      	mov	r0, sp
 8006d98:	f000 fbba 	bl	8007510 <__ieee754_rem_pio2>
 8006d9c:	f000 0003 	and.w	r0, r0, #3
 8006da0:	2801      	cmp	r0, #1
 8006da2:	d00b      	beq.n	8006dbc <cos+0x5c>
 8006da4:	2802      	cmp	r0, #2
 8006da6:	d015      	beq.n	8006dd4 <cos+0x74>
 8006da8:	b9d8      	cbnz	r0, 8006de2 <cos+0x82>
 8006daa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006dae:	ed9d 0b00 	vldr	d0, [sp]
 8006db2:	f000 f961 	bl	8007078 <__kernel_cos>
 8006db6:	ec51 0b10 	vmov	r0, r1, d0
 8006dba:	e7e7      	b.n	8006d8c <cos+0x2c>
 8006dbc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006dc0:	ed9d 0b00 	vldr	d0, [sp]
 8006dc4:	f000 fa20 	bl	8007208 <__kernel_sin>
 8006dc8:	ec53 2b10 	vmov	r2, r3, d0
 8006dcc:	4610      	mov	r0, r2
 8006dce:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006dd2:	e7db      	b.n	8006d8c <cos+0x2c>
 8006dd4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006dd8:	ed9d 0b00 	vldr	d0, [sp]
 8006ddc:	f000 f94c 	bl	8007078 <__kernel_cos>
 8006de0:	e7f2      	b.n	8006dc8 <cos+0x68>
 8006de2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006de6:	ed9d 0b00 	vldr	d0, [sp]
 8006dea:	2001      	movs	r0, #1
 8006dec:	f000 fa0c 	bl	8007208 <__kernel_sin>
 8006df0:	e7e1      	b.n	8006db6 <cos+0x56>
 8006df2:	bf00      	nop
 8006df4:	f3af 8000 	nop.w
	...
 8006e00:	3fe921fb 	.word	0x3fe921fb
 8006e04:	7fefffff 	.word	0x7fefffff

08006e08 <fabs>:
 8006e08:	ec51 0b10 	vmov	r0, r1, d0
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006e12:	ec43 2b10 	vmov	d0, r2, r3
 8006e16:	4770      	bx	lr

08006e18 <sin>:
 8006e18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e1a:	ec53 2b10 	vmov	r2, r3, d0
 8006e1e:	4826      	ldr	r0, [pc, #152]	@ (8006eb8 <sin+0xa0>)
 8006e20:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006e24:	4281      	cmp	r1, r0
 8006e26:	d807      	bhi.n	8006e38 <sin+0x20>
 8006e28:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8006eb0 <sin+0x98>
 8006e2c:	2000      	movs	r0, #0
 8006e2e:	b005      	add	sp, #20
 8006e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e34:	f000 b9e8 	b.w	8007208 <__kernel_sin>
 8006e38:	4820      	ldr	r0, [pc, #128]	@ (8006ebc <sin+0xa4>)
 8006e3a:	4281      	cmp	r1, r0
 8006e3c:	d908      	bls.n	8006e50 <sin+0x38>
 8006e3e:	4610      	mov	r0, r2
 8006e40:	4619      	mov	r1, r3
 8006e42:	f7f9 fa41 	bl	80002c8 <__aeabi_dsub>
 8006e46:	ec41 0b10 	vmov	d0, r0, r1
 8006e4a:	b005      	add	sp, #20
 8006e4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e50:	4668      	mov	r0, sp
 8006e52:	f000 fb5d 	bl	8007510 <__ieee754_rem_pio2>
 8006e56:	f000 0003 	and.w	r0, r0, #3
 8006e5a:	2801      	cmp	r0, #1
 8006e5c:	d00c      	beq.n	8006e78 <sin+0x60>
 8006e5e:	2802      	cmp	r0, #2
 8006e60:	d011      	beq.n	8006e86 <sin+0x6e>
 8006e62:	b9e8      	cbnz	r0, 8006ea0 <sin+0x88>
 8006e64:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006e68:	ed9d 0b00 	vldr	d0, [sp]
 8006e6c:	2001      	movs	r0, #1
 8006e6e:	f000 f9cb 	bl	8007208 <__kernel_sin>
 8006e72:	ec51 0b10 	vmov	r0, r1, d0
 8006e76:	e7e6      	b.n	8006e46 <sin+0x2e>
 8006e78:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006e7c:	ed9d 0b00 	vldr	d0, [sp]
 8006e80:	f000 f8fa 	bl	8007078 <__kernel_cos>
 8006e84:	e7f5      	b.n	8006e72 <sin+0x5a>
 8006e86:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006e8a:	ed9d 0b00 	vldr	d0, [sp]
 8006e8e:	2001      	movs	r0, #1
 8006e90:	f000 f9ba 	bl	8007208 <__kernel_sin>
 8006e94:	ec53 2b10 	vmov	r2, r3, d0
 8006e98:	4610      	mov	r0, r2
 8006e9a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006e9e:	e7d2      	b.n	8006e46 <sin+0x2e>
 8006ea0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006ea4:	ed9d 0b00 	vldr	d0, [sp]
 8006ea8:	f000 f8e6 	bl	8007078 <__kernel_cos>
 8006eac:	e7f2      	b.n	8006e94 <sin+0x7c>
 8006eae:	bf00      	nop
	...
 8006eb8:	3fe921fb 	.word	0x3fe921fb
 8006ebc:	7fefffff 	.word	0x7fefffff

08006ec0 <__ieee754_sqrt>:
 8006ec0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec4:	4a68      	ldr	r2, [pc, #416]	@ (8007068 <__ieee754_sqrt+0x1a8>)
 8006ec6:	ec55 4b10 	vmov	r4, r5, d0
 8006eca:	43aa      	bics	r2, r5
 8006ecc:	462b      	mov	r3, r5
 8006ece:	4621      	mov	r1, r4
 8006ed0:	d110      	bne.n	8006ef4 <__ieee754_sqrt+0x34>
 8006ed2:	4622      	mov	r2, r4
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	4629      	mov	r1, r5
 8006ed8:	f7f9 fbae 	bl	8000638 <__aeabi_dmul>
 8006edc:	4602      	mov	r2, r0
 8006ede:	460b      	mov	r3, r1
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	4629      	mov	r1, r5
 8006ee4:	f7f9 f9f2 	bl	80002cc <__adddf3>
 8006ee8:	4604      	mov	r4, r0
 8006eea:	460d      	mov	r5, r1
 8006eec:	ec45 4b10 	vmov	d0, r4, r5
 8006ef0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ef4:	2d00      	cmp	r5, #0
 8006ef6:	dc0e      	bgt.n	8006f16 <__ieee754_sqrt+0x56>
 8006ef8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8006efc:	4322      	orrs	r2, r4
 8006efe:	d0f5      	beq.n	8006eec <__ieee754_sqrt+0x2c>
 8006f00:	b19d      	cbz	r5, 8006f2a <__ieee754_sqrt+0x6a>
 8006f02:	4622      	mov	r2, r4
 8006f04:	4620      	mov	r0, r4
 8006f06:	4629      	mov	r1, r5
 8006f08:	f7f9 f9de 	bl	80002c8 <__aeabi_dsub>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	460b      	mov	r3, r1
 8006f10:	f7f9 fcbc 	bl	800088c <__aeabi_ddiv>
 8006f14:	e7e8      	b.n	8006ee8 <__ieee754_sqrt+0x28>
 8006f16:	152a      	asrs	r2, r5, #20
 8006f18:	d115      	bne.n	8006f46 <__ieee754_sqrt+0x86>
 8006f1a:	2000      	movs	r0, #0
 8006f1c:	e009      	b.n	8006f32 <__ieee754_sqrt+0x72>
 8006f1e:	0acb      	lsrs	r3, r1, #11
 8006f20:	3a15      	subs	r2, #21
 8006f22:	0549      	lsls	r1, r1, #21
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d0fa      	beq.n	8006f1e <__ieee754_sqrt+0x5e>
 8006f28:	e7f7      	b.n	8006f1a <__ieee754_sqrt+0x5a>
 8006f2a:	462a      	mov	r2, r5
 8006f2c:	e7fa      	b.n	8006f24 <__ieee754_sqrt+0x64>
 8006f2e:	005b      	lsls	r3, r3, #1
 8006f30:	3001      	adds	r0, #1
 8006f32:	02dc      	lsls	r4, r3, #11
 8006f34:	d5fb      	bpl.n	8006f2e <__ieee754_sqrt+0x6e>
 8006f36:	1e44      	subs	r4, r0, #1
 8006f38:	1b12      	subs	r2, r2, r4
 8006f3a:	f1c0 0420 	rsb	r4, r0, #32
 8006f3e:	fa21 f404 	lsr.w	r4, r1, r4
 8006f42:	4323      	orrs	r3, r4
 8006f44:	4081      	lsls	r1, r0
 8006f46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f4a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8006f4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f52:	07d2      	lsls	r2, r2, #31
 8006f54:	bf5c      	itt	pl
 8006f56:	005b      	lslpl	r3, r3, #1
 8006f58:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8006f5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006f60:	bf58      	it	pl
 8006f62:	0049      	lslpl	r1, r1, #1
 8006f64:	2600      	movs	r6, #0
 8006f66:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8006f6a:	106d      	asrs	r5, r5, #1
 8006f6c:	0049      	lsls	r1, r1, #1
 8006f6e:	2016      	movs	r0, #22
 8006f70:	4632      	mov	r2, r6
 8006f72:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8006f76:	1917      	adds	r7, r2, r4
 8006f78:	429f      	cmp	r7, r3
 8006f7a:	bfde      	ittt	le
 8006f7c:	193a      	addle	r2, r7, r4
 8006f7e:	1bdb      	suble	r3, r3, r7
 8006f80:	1936      	addle	r6, r6, r4
 8006f82:	0fcf      	lsrs	r7, r1, #31
 8006f84:	3801      	subs	r0, #1
 8006f86:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8006f8a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006f8e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006f92:	d1f0      	bne.n	8006f76 <__ieee754_sqrt+0xb6>
 8006f94:	4604      	mov	r4, r0
 8006f96:	2720      	movs	r7, #32
 8006f98:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	eb00 0e0c 	add.w	lr, r0, ip
 8006fa2:	db02      	blt.n	8006faa <__ieee754_sqrt+0xea>
 8006fa4:	d113      	bne.n	8006fce <__ieee754_sqrt+0x10e>
 8006fa6:	458e      	cmp	lr, r1
 8006fa8:	d811      	bhi.n	8006fce <__ieee754_sqrt+0x10e>
 8006faa:	f1be 0f00 	cmp.w	lr, #0
 8006fae:	eb0e 000c 	add.w	r0, lr, ip
 8006fb2:	da42      	bge.n	800703a <__ieee754_sqrt+0x17a>
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	db40      	blt.n	800703a <__ieee754_sqrt+0x17a>
 8006fb8:	f102 0801 	add.w	r8, r2, #1
 8006fbc:	1a9b      	subs	r3, r3, r2
 8006fbe:	458e      	cmp	lr, r1
 8006fc0:	bf88      	it	hi
 8006fc2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006fc6:	eba1 010e 	sub.w	r1, r1, lr
 8006fca:	4464      	add	r4, ip
 8006fcc:	4642      	mov	r2, r8
 8006fce:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8006fd2:	3f01      	subs	r7, #1
 8006fd4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8006fd8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006fdc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006fe0:	d1dc      	bne.n	8006f9c <__ieee754_sqrt+0xdc>
 8006fe2:	4319      	orrs	r1, r3
 8006fe4:	d01b      	beq.n	800701e <__ieee754_sqrt+0x15e>
 8006fe6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800706c <__ieee754_sqrt+0x1ac>
 8006fea:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8007070 <__ieee754_sqrt+0x1b0>
 8006fee:	e9da 0100 	ldrd	r0, r1, [sl]
 8006ff2:	e9db 2300 	ldrd	r2, r3, [fp]
 8006ff6:	f7f9 f967 	bl	80002c8 <__aeabi_dsub>
 8006ffa:	e9da 8900 	ldrd	r8, r9, [sl]
 8006ffe:	4602      	mov	r2, r0
 8007000:	460b      	mov	r3, r1
 8007002:	4640      	mov	r0, r8
 8007004:	4649      	mov	r1, r9
 8007006:	f7f9 fd93 	bl	8000b30 <__aeabi_dcmple>
 800700a:	b140      	cbz	r0, 800701e <__ieee754_sqrt+0x15e>
 800700c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007010:	e9da 0100 	ldrd	r0, r1, [sl]
 8007014:	e9db 2300 	ldrd	r2, r3, [fp]
 8007018:	d111      	bne.n	800703e <__ieee754_sqrt+0x17e>
 800701a:	3601      	adds	r6, #1
 800701c:	463c      	mov	r4, r7
 800701e:	1072      	asrs	r2, r6, #1
 8007020:	0863      	lsrs	r3, r4, #1
 8007022:	07f1      	lsls	r1, r6, #31
 8007024:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8007028:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800702c:	bf48      	it	mi
 800702e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8007032:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8007036:	4618      	mov	r0, r3
 8007038:	e756      	b.n	8006ee8 <__ieee754_sqrt+0x28>
 800703a:	4690      	mov	r8, r2
 800703c:	e7be      	b.n	8006fbc <__ieee754_sqrt+0xfc>
 800703e:	f7f9 f945 	bl	80002cc <__adddf3>
 8007042:	e9da 8900 	ldrd	r8, r9, [sl]
 8007046:	4602      	mov	r2, r0
 8007048:	460b      	mov	r3, r1
 800704a:	4640      	mov	r0, r8
 800704c:	4649      	mov	r1, r9
 800704e:	f7f9 fd65 	bl	8000b1c <__aeabi_dcmplt>
 8007052:	b120      	cbz	r0, 800705e <__ieee754_sqrt+0x19e>
 8007054:	1ca0      	adds	r0, r4, #2
 8007056:	bf08      	it	eq
 8007058:	3601      	addeq	r6, #1
 800705a:	3402      	adds	r4, #2
 800705c:	e7df      	b.n	800701e <__ieee754_sqrt+0x15e>
 800705e:	1c63      	adds	r3, r4, #1
 8007060:	f023 0401 	bic.w	r4, r3, #1
 8007064:	e7db      	b.n	800701e <__ieee754_sqrt+0x15e>
 8007066:	bf00      	nop
 8007068:	7ff00000 	.word	0x7ff00000
 800706c:	20000020 	.word	0x20000020
 8007070:	20000018 	.word	0x20000018
 8007074:	00000000 	.word	0x00000000

08007078 <__kernel_cos>:
 8007078:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800707c:	ec57 6b10 	vmov	r6, r7, d0
 8007080:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007084:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8007088:	ed8d 1b00 	vstr	d1, [sp]
 800708c:	d206      	bcs.n	800709c <__kernel_cos+0x24>
 800708e:	4630      	mov	r0, r6
 8007090:	4639      	mov	r1, r7
 8007092:	f7f9 fd81 	bl	8000b98 <__aeabi_d2iz>
 8007096:	2800      	cmp	r0, #0
 8007098:	f000 8088 	beq.w	80071ac <__kernel_cos+0x134>
 800709c:	4632      	mov	r2, r6
 800709e:	463b      	mov	r3, r7
 80070a0:	4630      	mov	r0, r6
 80070a2:	4639      	mov	r1, r7
 80070a4:	f7f9 fac8 	bl	8000638 <__aeabi_dmul>
 80070a8:	4b51      	ldr	r3, [pc, #324]	@ (80071f0 <__kernel_cos+0x178>)
 80070aa:	2200      	movs	r2, #0
 80070ac:	4604      	mov	r4, r0
 80070ae:	460d      	mov	r5, r1
 80070b0:	f7f9 fac2 	bl	8000638 <__aeabi_dmul>
 80070b4:	a340      	add	r3, pc, #256	@ (adr r3, 80071b8 <__kernel_cos+0x140>)
 80070b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ba:	4682      	mov	sl, r0
 80070bc:	468b      	mov	fp, r1
 80070be:	4620      	mov	r0, r4
 80070c0:	4629      	mov	r1, r5
 80070c2:	f7f9 fab9 	bl	8000638 <__aeabi_dmul>
 80070c6:	a33e      	add	r3, pc, #248	@ (adr r3, 80071c0 <__kernel_cos+0x148>)
 80070c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070cc:	f7f9 f8fe 	bl	80002cc <__adddf3>
 80070d0:	4622      	mov	r2, r4
 80070d2:	462b      	mov	r3, r5
 80070d4:	f7f9 fab0 	bl	8000638 <__aeabi_dmul>
 80070d8:	a33b      	add	r3, pc, #236	@ (adr r3, 80071c8 <__kernel_cos+0x150>)
 80070da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070de:	f7f9 f8f3 	bl	80002c8 <__aeabi_dsub>
 80070e2:	4622      	mov	r2, r4
 80070e4:	462b      	mov	r3, r5
 80070e6:	f7f9 faa7 	bl	8000638 <__aeabi_dmul>
 80070ea:	a339      	add	r3, pc, #228	@ (adr r3, 80071d0 <__kernel_cos+0x158>)
 80070ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f0:	f7f9 f8ec 	bl	80002cc <__adddf3>
 80070f4:	4622      	mov	r2, r4
 80070f6:	462b      	mov	r3, r5
 80070f8:	f7f9 fa9e 	bl	8000638 <__aeabi_dmul>
 80070fc:	a336      	add	r3, pc, #216	@ (adr r3, 80071d8 <__kernel_cos+0x160>)
 80070fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007102:	f7f9 f8e1 	bl	80002c8 <__aeabi_dsub>
 8007106:	4622      	mov	r2, r4
 8007108:	462b      	mov	r3, r5
 800710a:	f7f9 fa95 	bl	8000638 <__aeabi_dmul>
 800710e:	a334      	add	r3, pc, #208	@ (adr r3, 80071e0 <__kernel_cos+0x168>)
 8007110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007114:	f7f9 f8da 	bl	80002cc <__adddf3>
 8007118:	4622      	mov	r2, r4
 800711a:	462b      	mov	r3, r5
 800711c:	f7f9 fa8c 	bl	8000638 <__aeabi_dmul>
 8007120:	4622      	mov	r2, r4
 8007122:	462b      	mov	r3, r5
 8007124:	f7f9 fa88 	bl	8000638 <__aeabi_dmul>
 8007128:	e9dd 2300 	ldrd	r2, r3, [sp]
 800712c:	4604      	mov	r4, r0
 800712e:	460d      	mov	r5, r1
 8007130:	4630      	mov	r0, r6
 8007132:	4639      	mov	r1, r7
 8007134:	f7f9 fa80 	bl	8000638 <__aeabi_dmul>
 8007138:	460b      	mov	r3, r1
 800713a:	4602      	mov	r2, r0
 800713c:	4629      	mov	r1, r5
 800713e:	4620      	mov	r0, r4
 8007140:	f7f9 f8c2 	bl	80002c8 <__aeabi_dsub>
 8007144:	4b2b      	ldr	r3, [pc, #172]	@ (80071f4 <__kernel_cos+0x17c>)
 8007146:	4598      	cmp	r8, r3
 8007148:	4606      	mov	r6, r0
 800714a:	460f      	mov	r7, r1
 800714c:	d810      	bhi.n	8007170 <__kernel_cos+0xf8>
 800714e:	4602      	mov	r2, r0
 8007150:	460b      	mov	r3, r1
 8007152:	4650      	mov	r0, sl
 8007154:	4659      	mov	r1, fp
 8007156:	f7f9 f8b7 	bl	80002c8 <__aeabi_dsub>
 800715a:	460b      	mov	r3, r1
 800715c:	4926      	ldr	r1, [pc, #152]	@ (80071f8 <__kernel_cos+0x180>)
 800715e:	4602      	mov	r2, r0
 8007160:	2000      	movs	r0, #0
 8007162:	f7f9 f8b1 	bl	80002c8 <__aeabi_dsub>
 8007166:	ec41 0b10 	vmov	d0, r0, r1
 800716a:	b003      	add	sp, #12
 800716c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007170:	4b22      	ldr	r3, [pc, #136]	@ (80071fc <__kernel_cos+0x184>)
 8007172:	4921      	ldr	r1, [pc, #132]	@ (80071f8 <__kernel_cos+0x180>)
 8007174:	4598      	cmp	r8, r3
 8007176:	bf8c      	ite	hi
 8007178:	4d21      	ldrhi	r5, [pc, #132]	@ (8007200 <__kernel_cos+0x188>)
 800717a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800717e:	2400      	movs	r4, #0
 8007180:	4622      	mov	r2, r4
 8007182:	462b      	mov	r3, r5
 8007184:	2000      	movs	r0, #0
 8007186:	f7f9 f89f 	bl	80002c8 <__aeabi_dsub>
 800718a:	4622      	mov	r2, r4
 800718c:	4680      	mov	r8, r0
 800718e:	4689      	mov	r9, r1
 8007190:	462b      	mov	r3, r5
 8007192:	4650      	mov	r0, sl
 8007194:	4659      	mov	r1, fp
 8007196:	f7f9 f897 	bl	80002c8 <__aeabi_dsub>
 800719a:	4632      	mov	r2, r6
 800719c:	463b      	mov	r3, r7
 800719e:	f7f9 f893 	bl	80002c8 <__aeabi_dsub>
 80071a2:	4602      	mov	r2, r0
 80071a4:	460b      	mov	r3, r1
 80071a6:	4640      	mov	r0, r8
 80071a8:	4649      	mov	r1, r9
 80071aa:	e7da      	b.n	8007162 <__kernel_cos+0xea>
 80071ac:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80071e8 <__kernel_cos+0x170>
 80071b0:	e7db      	b.n	800716a <__kernel_cos+0xf2>
 80071b2:	bf00      	nop
 80071b4:	f3af 8000 	nop.w
 80071b8:	be8838d4 	.word	0xbe8838d4
 80071bc:	bda8fae9 	.word	0xbda8fae9
 80071c0:	bdb4b1c4 	.word	0xbdb4b1c4
 80071c4:	3e21ee9e 	.word	0x3e21ee9e
 80071c8:	809c52ad 	.word	0x809c52ad
 80071cc:	3e927e4f 	.word	0x3e927e4f
 80071d0:	19cb1590 	.word	0x19cb1590
 80071d4:	3efa01a0 	.word	0x3efa01a0
 80071d8:	16c15177 	.word	0x16c15177
 80071dc:	3f56c16c 	.word	0x3f56c16c
 80071e0:	5555554c 	.word	0x5555554c
 80071e4:	3fa55555 	.word	0x3fa55555
 80071e8:	00000000 	.word	0x00000000
 80071ec:	3ff00000 	.word	0x3ff00000
 80071f0:	3fe00000 	.word	0x3fe00000
 80071f4:	3fd33332 	.word	0x3fd33332
 80071f8:	3ff00000 	.word	0x3ff00000
 80071fc:	3fe90000 	.word	0x3fe90000
 8007200:	3fd20000 	.word	0x3fd20000
 8007204:	00000000 	.word	0x00000000

08007208 <__kernel_sin>:
 8007208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800720c:	ec55 4b10 	vmov	r4, r5, d0
 8007210:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007214:	b085      	sub	sp, #20
 8007216:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800721a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800721e:	4680      	mov	r8, r0
 8007220:	d205      	bcs.n	800722e <__kernel_sin+0x26>
 8007222:	4620      	mov	r0, r4
 8007224:	4629      	mov	r1, r5
 8007226:	f7f9 fcb7 	bl	8000b98 <__aeabi_d2iz>
 800722a:	2800      	cmp	r0, #0
 800722c:	d052      	beq.n	80072d4 <__kernel_sin+0xcc>
 800722e:	4622      	mov	r2, r4
 8007230:	462b      	mov	r3, r5
 8007232:	4620      	mov	r0, r4
 8007234:	4629      	mov	r1, r5
 8007236:	f7f9 f9ff 	bl	8000638 <__aeabi_dmul>
 800723a:	4682      	mov	sl, r0
 800723c:	468b      	mov	fp, r1
 800723e:	4602      	mov	r2, r0
 8007240:	460b      	mov	r3, r1
 8007242:	4620      	mov	r0, r4
 8007244:	4629      	mov	r1, r5
 8007246:	f7f9 f9f7 	bl	8000638 <__aeabi_dmul>
 800724a:	a342      	add	r3, pc, #264	@ (adr r3, 8007354 <__kernel_sin+0x14c>)
 800724c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007250:	e9cd 0100 	strd	r0, r1, [sp]
 8007254:	4650      	mov	r0, sl
 8007256:	4659      	mov	r1, fp
 8007258:	f7f9 f9ee 	bl	8000638 <__aeabi_dmul>
 800725c:	a33f      	add	r3, pc, #252	@ (adr r3, 800735c <__kernel_sin+0x154>)
 800725e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007262:	f7f9 f831 	bl	80002c8 <__aeabi_dsub>
 8007266:	4652      	mov	r2, sl
 8007268:	465b      	mov	r3, fp
 800726a:	f7f9 f9e5 	bl	8000638 <__aeabi_dmul>
 800726e:	a33d      	add	r3, pc, #244	@ (adr r3, 8007364 <__kernel_sin+0x15c>)
 8007270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007274:	f7f9 f82a 	bl	80002cc <__adddf3>
 8007278:	4652      	mov	r2, sl
 800727a:	465b      	mov	r3, fp
 800727c:	f7f9 f9dc 	bl	8000638 <__aeabi_dmul>
 8007280:	a33a      	add	r3, pc, #232	@ (adr r3, 800736c <__kernel_sin+0x164>)
 8007282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007286:	f7f9 f81f 	bl	80002c8 <__aeabi_dsub>
 800728a:	4652      	mov	r2, sl
 800728c:	465b      	mov	r3, fp
 800728e:	f7f9 f9d3 	bl	8000638 <__aeabi_dmul>
 8007292:	a338      	add	r3, pc, #224	@ (adr r3, 8007374 <__kernel_sin+0x16c>)
 8007294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007298:	f7f9 f818 	bl	80002cc <__adddf3>
 800729c:	4606      	mov	r6, r0
 800729e:	460f      	mov	r7, r1
 80072a0:	f1b8 0f00 	cmp.w	r8, #0
 80072a4:	d11b      	bne.n	80072de <__kernel_sin+0xd6>
 80072a6:	4602      	mov	r2, r0
 80072a8:	460b      	mov	r3, r1
 80072aa:	4650      	mov	r0, sl
 80072ac:	4659      	mov	r1, fp
 80072ae:	f7f9 f9c3 	bl	8000638 <__aeabi_dmul>
 80072b2:	a325      	add	r3, pc, #148	@ (adr r3, 8007348 <__kernel_sin+0x140>)
 80072b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b8:	f7f9 f806 	bl	80002c8 <__aeabi_dsub>
 80072bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072c0:	f7f9 f9ba 	bl	8000638 <__aeabi_dmul>
 80072c4:	4602      	mov	r2, r0
 80072c6:	460b      	mov	r3, r1
 80072c8:	4620      	mov	r0, r4
 80072ca:	4629      	mov	r1, r5
 80072cc:	f7f8 fffe 	bl	80002cc <__adddf3>
 80072d0:	4604      	mov	r4, r0
 80072d2:	460d      	mov	r5, r1
 80072d4:	ec45 4b10 	vmov	d0, r4, r5
 80072d8:	b005      	add	sp, #20
 80072da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072e2:	4b1b      	ldr	r3, [pc, #108]	@ (8007350 <__kernel_sin+0x148>)
 80072e4:	2200      	movs	r2, #0
 80072e6:	f7f9 f9a7 	bl	8000638 <__aeabi_dmul>
 80072ea:	4632      	mov	r2, r6
 80072ec:	4680      	mov	r8, r0
 80072ee:	4689      	mov	r9, r1
 80072f0:	463b      	mov	r3, r7
 80072f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072f6:	f7f9 f99f 	bl	8000638 <__aeabi_dmul>
 80072fa:	4602      	mov	r2, r0
 80072fc:	460b      	mov	r3, r1
 80072fe:	4640      	mov	r0, r8
 8007300:	4649      	mov	r1, r9
 8007302:	f7f8 ffe1 	bl	80002c8 <__aeabi_dsub>
 8007306:	4652      	mov	r2, sl
 8007308:	465b      	mov	r3, fp
 800730a:	f7f9 f995 	bl	8000638 <__aeabi_dmul>
 800730e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007312:	f7f8 ffd9 	bl	80002c8 <__aeabi_dsub>
 8007316:	a30c      	add	r3, pc, #48	@ (adr r3, 8007348 <__kernel_sin+0x140>)
 8007318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731c:	4606      	mov	r6, r0
 800731e:	460f      	mov	r7, r1
 8007320:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007324:	f7f9 f988 	bl	8000638 <__aeabi_dmul>
 8007328:	4602      	mov	r2, r0
 800732a:	460b      	mov	r3, r1
 800732c:	4630      	mov	r0, r6
 800732e:	4639      	mov	r1, r7
 8007330:	f7f8 ffcc 	bl	80002cc <__adddf3>
 8007334:	4602      	mov	r2, r0
 8007336:	460b      	mov	r3, r1
 8007338:	4620      	mov	r0, r4
 800733a:	4629      	mov	r1, r5
 800733c:	f7f8 ffc4 	bl	80002c8 <__aeabi_dsub>
 8007340:	e7c6      	b.n	80072d0 <__kernel_sin+0xc8>
 8007342:	bf00      	nop
 8007344:	f3af 8000 	nop.w
 8007348:	55555549 	.word	0x55555549
 800734c:	3fc55555 	.word	0x3fc55555
 8007350:	3fe00000 	.word	0x3fe00000
 8007354:	5acfd57c 	.word	0x5acfd57c
 8007358:	3de5d93a 	.word	0x3de5d93a
 800735c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007360:	3e5ae5e6 	.word	0x3e5ae5e6
 8007364:	57b1fe7d 	.word	0x57b1fe7d
 8007368:	3ec71de3 	.word	0x3ec71de3
 800736c:	19c161d5 	.word	0x19c161d5
 8007370:	3f2a01a0 	.word	0x3f2a01a0
 8007374:	1110f8a6 	.word	0x1110f8a6
 8007378:	3f811111 	.word	0x3f811111
 800737c:	00000000 	.word	0x00000000

08007380 <__ieee754_atan2>:
 8007380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007384:	ec57 6b11 	vmov	r6, r7, d1
 8007388:	4273      	negs	r3, r6
 800738a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8007508 <__ieee754_atan2+0x188>
 800738e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8007392:	4333      	orrs	r3, r6
 8007394:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007398:	4543      	cmp	r3, r8
 800739a:	ec51 0b10 	vmov	r0, r1, d0
 800739e:	4635      	mov	r5, r6
 80073a0:	d809      	bhi.n	80073b6 <__ieee754_atan2+0x36>
 80073a2:	4244      	negs	r4, r0
 80073a4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80073a8:	4304      	orrs	r4, r0
 80073aa:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80073ae:	4544      	cmp	r4, r8
 80073b0:	468e      	mov	lr, r1
 80073b2:	4681      	mov	r9, r0
 80073b4:	d907      	bls.n	80073c6 <__ieee754_atan2+0x46>
 80073b6:	4632      	mov	r2, r6
 80073b8:	463b      	mov	r3, r7
 80073ba:	f7f8 ff87 	bl	80002cc <__adddf3>
 80073be:	ec41 0b10 	vmov	d0, r0, r1
 80073c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073c6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80073ca:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80073ce:	4334      	orrs	r4, r6
 80073d0:	d103      	bne.n	80073da <__ieee754_atan2+0x5a>
 80073d2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073d6:	f7ff bb2b 	b.w	8006a30 <atan>
 80073da:	17bc      	asrs	r4, r7, #30
 80073dc:	f004 0402 	and.w	r4, r4, #2
 80073e0:	ea53 0909 	orrs.w	r9, r3, r9
 80073e4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80073e8:	d107      	bne.n	80073fa <__ieee754_atan2+0x7a>
 80073ea:	2c02      	cmp	r4, #2
 80073ec:	d05f      	beq.n	80074ae <__ieee754_atan2+0x12e>
 80073ee:	2c03      	cmp	r4, #3
 80073f0:	d1e5      	bne.n	80073be <__ieee754_atan2+0x3e>
 80073f2:	a141      	add	r1, pc, #260	@ (adr r1, 80074f8 <__ieee754_atan2+0x178>)
 80073f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073f8:	e7e1      	b.n	80073be <__ieee754_atan2+0x3e>
 80073fa:	4315      	orrs	r5, r2
 80073fc:	d106      	bne.n	800740c <__ieee754_atan2+0x8c>
 80073fe:	f1be 0f00 	cmp.w	lr, #0
 8007402:	da5f      	bge.n	80074c4 <__ieee754_atan2+0x144>
 8007404:	a13e      	add	r1, pc, #248	@ (adr r1, 8007500 <__ieee754_atan2+0x180>)
 8007406:	e9d1 0100 	ldrd	r0, r1, [r1]
 800740a:	e7d8      	b.n	80073be <__ieee754_atan2+0x3e>
 800740c:	4542      	cmp	r2, r8
 800740e:	d10f      	bne.n	8007430 <__ieee754_atan2+0xb0>
 8007410:	4293      	cmp	r3, r2
 8007412:	f104 34ff 	add.w	r4, r4, #4294967295
 8007416:	d107      	bne.n	8007428 <__ieee754_atan2+0xa8>
 8007418:	2c02      	cmp	r4, #2
 800741a:	d84c      	bhi.n	80074b6 <__ieee754_atan2+0x136>
 800741c:	4b34      	ldr	r3, [pc, #208]	@ (80074f0 <__ieee754_atan2+0x170>)
 800741e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007422:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007426:	e7ca      	b.n	80073be <__ieee754_atan2+0x3e>
 8007428:	2c02      	cmp	r4, #2
 800742a:	d848      	bhi.n	80074be <__ieee754_atan2+0x13e>
 800742c:	4b31      	ldr	r3, [pc, #196]	@ (80074f4 <__ieee754_atan2+0x174>)
 800742e:	e7f6      	b.n	800741e <__ieee754_atan2+0x9e>
 8007430:	4543      	cmp	r3, r8
 8007432:	d0e4      	beq.n	80073fe <__ieee754_atan2+0x7e>
 8007434:	1a9b      	subs	r3, r3, r2
 8007436:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800743a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800743e:	da1e      	bge.n	800747e <__ieee754_atan2+0xfe>
 8007440:	2f00      	cmp	r7, #0
 8007442:	da01      	bge.n	8007448 <__ieee754_atan2+0xc8>
 8007444:	323c      	adds	r2, #60	@ 0x3c
 8007446:	db1e      	blt.n	8007486 <__ieee754_atan2+0x106>
 8007448:	4632      	mov	r2, r6
 800744a:	463b      	mov	r3, r7
 800744c:	f7f9 fa1e 	bl	800088c <__aeabi_ddiv>
 8007450:	ec41 0b10 	vmov	d0, r0, r1
 8007454:	f7ff fcd8 	bl	8006e08 <fabs>
 8007458:	f7ff faea 	bl	8006a30 <atan>
 800745c:	ec51 0b10 	vmov	r0, r1, d0
 8007460:	2c01      	cmp	r4, #1
 8007462:	d013      	beq.n	800748c <__ieee754_atan2+0x10c>
 8007464:	2c02      	cmp	r4, #2
 8007466:	d015      	beq.n	8007494 <__ieee754_atan2+0x114>
 8007468:	2c00      	cmp	r4, #0
 800746a:	d0a8      	beq.n	80073be <__ieee754_atan2+0x3e>
 800746c:	a318      	add	r3, pc, #96	@ (adr r3, 80074d0 <__ieee754_atan2+0x150>)
 800746e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007472:	f7f8 ff29 	bl	80002c8 <__aeabi_dsub>
 8007476:	a318      	add	r3, pc, #96	@ (adr r3, 80074d8 <__ieee754_atan2+0x158>)
 8007478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747c:	e014      	b.n	80074a8 <__ieee754_atan2+0x128>
 800747e:	a118      	add	r1, pc, #96	@ (adr r1, 80074e0 <__ieee754_atan2+0x160>)
 8007480:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007484:	e7ec      	b.n	8007460 <__ieee754_atan2+0xe0>
 8007486:	2000      	movs	r0, #0
 8007488:	2100      	movs	r1, #0
 800748a:	e7e9      	b.n	8007460 <__ieee754_atan2+0xe0>
 800748c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007490:	4619      	mov	r1, r3
 8007492:	e794      	b.n	80073be <__ieee754_atan2+0x3e>
 8007494:	a30e      	add	r3, pc, #56	@ (adr r3, 80074d0 <__ieee754_atan2+0x150>)
 8007496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749a:	f7f8 ff15 	bl	80002c8 <__aeabi_dsub>
 800749e:	4602      	mov	r2, r0
 80074a0:	460b      	mov	r3, r1
 80074a2:	a10d      	add	r1, pc, #52	@ (adr r1, 80074d8 <__ieee754_atan2+0x158>)
 80074a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074a8:	f7f8 ff0e 	bl	80002c8 <__aeabi_dsub>
 80074ac:	e787      	b.n	80073be <__ieee754_atan2+0x3e>
 80074ae:	a10a      	add	r1, pc, #40	@ (adr r1, 80074d8 <__ieee754_atan2+0x158>)
 80074b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074b4:	e783      	b.n	80073be <__ieee754_atan2+0x3e>
 80074b6:	a10c      	add	r1, pc, #48	@ (adr r1, 80074e8 <__ieee754_atan2+0x168>)
 80074b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074bc:	e77f      	b.n	80073be <__ieee754_atan2+0x3e>
 80074be:	2000      	movs	r0, #0
 80074c0:	2100      	movs	r1, #0
 80074c2:	e77c      	b.n	80073be <__ieee754_atan2+0x3e>
 80074c4:	a106      	add	r1, pc, #24	@ (adr r1, 80074e0 <__ieee754_atan2+0x160>)
 80074c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074ca:	e778      	b.n	80073be <__ieee754_atan2+0x3e>
 80074cc:	f3af 8000 	nop.w
 80074d0:	33145c07 	.word	0x33145c07
 80074d4:	3ca1a626 	.word	0x3ca1a626
 80074d8:	54442d18 	.word	0x54442d18
 80074dc:	400921fb 	.word	0x400921fb
 80074e0:	54442d18 	.word	0x54442d18
 80074e4:	3ff921fb 	.word	0x3ff921fb
 80074e8:	54442d18 	.word	0x54442d18
 80074ec:	3fe921fb 	.word	0x3fe921fb
 80074f0:	0800b1b0 	.word	0x0800b1b0
 80074f4:	0800b198 	.word	0x0800b198
 80074f8:	54442d18 	.word	0x54442d18
 80074fc:	c00921fb 	.word	0xc00921fb
 8007500:	54442d18 	.word	0x54442d18
 8007504:	bff921fb 	.word	0xbff921fb
 8007508:	7ff00000 	.word	0x7ff00000
 800750c:	00000000 	.word	0x00000000

08007510 <__ieee754_rem_pio2>:
 8007510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007514:	ec57 6b10 	vmov	r6, r7, d0
 8007518:	4bc5      	ldr	r3, [pc, #788]	@ (8007830 <__ieee754_rem_pio2+0x320>)
 800751a:	b08d      	sub	sp, #52	@ 0x34
 800751c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007520:	4598      	cmp	r8, r3
 8007522:	4604      	mov	r4, r0
 8007524:	9704      	str	r7, [sp, #16]
 8007526:	d807      	bhi.n	8007538 <__ieee754_rem_pio2+0x28>
 8007528:	2200      	movs	r2, #0
 800752a:	2300      	movs	r3, #0
 800752c:	ed80 0b00 	vstr	d0, [r0]
 8007530:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007534:	2500      	movs	r5, #0
 8007536:	e028      	b.n	800758a <__ieee754_rem_pio2+0x7a>
 8007538:	4bbe      	ldr	r3, [pc, #760]	@ (8007834 <__ieee754_rem_pio2+0x324>)
 800753a:	4598      	cmp	r8, r3
 800753c:	d878      	bhi.n	8007630 <__ieee754_rem_pio2+0x120>
 800753e:	9b04      	ldr	r3, [sp, #16]
 8007540:	4dbd      	ldr	r5, [pc, #756]	@ (8007838 <__ieee754_rem_pio2+0x328>)
 8007542:	2b00      	cmp	r3, #0
 8007544:	4630      	mov	r0, r6
 8007546:	a3ac      	add	r3, pc, #688	@ (adr r3, 80077f8 <__ieee754_rem_pio2+0x2e8>)
 8007548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754c:	4639      	mov	r1, r7
 800754e:	dd38      	ble.n	80075c2 <__ieee754_rem_pio2+0xb2>
 8007550:	f7f8 feba 	bl	80002c8 <__aeabi_dsub>
 8007554:	45a8      	cmp	r8, r5
 8007556:	4606      	mov	r6, r0
 8007558:	460f      	mov	r7, r1
 800755a:	d01a      	beq.n	8007592 <__ieee754_rem_pio2+0x82>
 800755c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8007800 <__ieee754_rem_pio2+0x2f0>)
 800755e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007562:	f7f8 feb1 	bl	80002c8 <__aeabi_dsub>
 8007566:	4602      	mov	r2, r0
 8007568:	460b      	mov	r3, r1
 800756a:	4680      	mov	r8, r0
 800756c:	4689      	mov	r9, r1
 800756e:	4630      	mov	r0, r6
 8007570:	4639      	mov	r1, r7
 8007572:	f7f8 fea9 	bl	80002c8 <__aeabi_dsub>
 8007576:	a3a2      	add	r3, pc, #648	@ (adr r3, 8007800 <__ieee754_rem_pio2+0x2f0>)
 8007578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757c:	f7f8 fea4 	bl	80002c8 <__aeabi_dsub>
 8007580:	e9c4 8900 	strd	r8, r9, [r4]
 8007584:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007588:	2501      	movs	r5, #1
 800758a:	4628      	mov	r0, r5
 800758c:	b00d      	add	sp, #52	@ 0x34
 800758e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007592:	a39d      	add	r3, pc, #628	@ (adr r3, 8007808 <__ieee754_rem_pio2+0x2f8>)
 8007594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007598:	f7f8 fe96 	bl	80002c8 <__aeabi_dsub>
 800759c:	a39c      	add	r3, pc, #624	@ (adr r3, 8007810 <__ieee754_rem_pio2+0x300>)
 800759e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a2:	4606      	mov	r6, r0
 80075a4:	460f      	mov	r7, r1
 80075a6:	f7f8 fe8f 	bl	80002c8 <__aeabi_dsub>
 80075aa:	4602      	mov	r2, r0
 80075ac:	460b      	mov	r3, r1
 80075ae:	4680      	mov	r8, r0
 80075b0:	4689      	mov	r9, r1
 80075b2:	4630      	mov	r0, r6
 80075b4:	4639      	mov	r1, r7
 80075b6:	f7f8 fe87 	bl	80002c8 <__aeabi_dsub>
 80075ba:	a395      	add	r3, pc, #596	@ (adr r3, 8007810 <__ieee754_rem_pio2+0x300>)
 80075bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c0:	e7dc      	b.n	800757c <__ieee754_rem_pio2+0x6c>
 80075c2:	f7f8 fe83 	bl	80002cc <__adddf3>
 80075c6:	45a8      	cmp	r8, r5
 80075c8:	4606      	mov	r6, r0
 80075ca:	460f      	mov	r7, r1
 80075cc:	d018      	beq.n	8007600 <__ieee754_rem_pio2+0xf0>
 80075ce:	a38c      	add	r3, pc, #560	@ (adr r3, 8007800 <__ieee754_rem_pio2+0x2f0>)
 80075d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d4:	f7f8 fe7a 	bl	80002cc <__adddf3>
 80075d8:	4602      	mov	r2, r0
 80075da:	460b      	mov	r3, r1
 80075dc:	4680      	mov	r8, r0
 80075de:	4689      	mov	r9, r1
 80075e0:	4630      	mov	r0, r6
 80075e2:	4639      	mov	r1, r7
 80075e4:	f7f8 fe70 	bl	80002c8 <__aeabi_dsub>
 80075e8:	a385      	add	r3, pc, #532	@ (adr r3, 8007800 <__ieee754_rem_pio2+0x2f0>)
 80075ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ee:	f7f8 fe6d 	bl	80002cc <__adddf3>
 80075f2:	f04f 35ff 	mov.w	r5, #4294967295
 80075f6:	e9c4 8900 	strd	r8, r9, [r4]
 80075fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80075fe:	e7c4      	b.n	800758a <__ieee754_rem_pio2+0x7a>
 8007600:	a381      	add	r3, pc, #516	@ (adr r3, 8007808 <__ieee754_rem_pio2+0x2f8>)
 8007602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007606:	f7f8 fe61 	bl	80002cc <__adddf3>
 800760a:	a381      	add	r3, pc, #516	@ (adr r3, 8007810 <__ieee754_rem_pio2+0x300>)
 800760c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007610:	4606      	mov	r6, r0
 8007612:	460f      	mov	r7, r1
 8007614:	f7f8 fe5a 	bl	80002cc <__adddf3>
 8007618:	4602      	mov	r2, r0
 800761a:	460b      	mov	r3, r1
 800761c:	4680      	mov	r8, r0
 800761e:	4689      	mov	r9, r1
 8007620:	4630      	mov	r0, r6
 8007622:	4639      	mov	r1, r7
 8007624:	f7f8 fe50 	bl	80002c8 <__aeabi_dsub>
 8007628:	a379      	add	r3, pc, #484	@ (adr r3, 8007810 <__ieee754_rem_pio2+0x300>)
 800762a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762e:	e7de      	b.n	80075ee <__ieee754_rem_pio2+0xde>
 8007630:	4b82      	ldr	r3, [pc, #520]	@ (800783c <__ieee754_rem_pio2+0x32c>)
 8007632:	4598      	cmp	r8, r3
 8007634:	f200 80d1 	bhi.w	80077da <__ieee754_rem_pio2+0x2ca>
 8007638:	f7ff fbe6 	bl	8006e08 <fabs>
 800763c:	ec57 6b10 	vmov	r6, r7, d0
 8007640:	a375      	add	r3, pc, #468	@ (adr r3, 8007818 <__ieee754_rem_pio2+0x308>)
 8007642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007646:	4630      	mov	r0, r6
 8007648:	4639      	mov	r1, r7
 800764a:	f7f8 fff5 	bl	8000638 <__aeabi_dmul>
 800764e:	4b7c      	ldr	r3, [pc, #496]	@ (8007840 <__ieee754_rem_pio2+0x330>)
 8007650:	2200      	movs	r2, #0
 8007652:	f7f8 fe3b 	bl	80002cc <__adddf3>
 8007656:	f7f9 fa9f 	bl	8000b98 <__aeabi_d2iz>
 800765a:	4605      	mov	r5, r0
 800765c:	f7f8 ff82 	bl	8000564 <__aeabi_i2d>
 8007660:	4602      	mov	r2, r0
 8007662:	460b      	mov	r3, r1
 8007664:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007668:	a363      	add	r3, pc, #396	@ (adr r3, 80077f8 <__ieee754_rem_pio2+0x2e8>)
 800766a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766e:	f7f8 ffe3 	bl	8000638 <__aeabi_dmul>
 8007672:	4602      	mov	r2, r0
 8007674:	460b      	mov	r3, r1
 8007676:	4630      	mov	r0, r6
 8007678:	4639      	mov	r1, r7
 800767a:	f7f8 fe25 	bl	80002c8 <__aeabi_dsub>
 800767e:	a360      	add	r3, pc, #384	@ (adr r3, 8007800 <__ieee754_rem_pio2+0x2f0>)
 8007680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007684:	4682      	mov	sl, r0
 8007686:	468b      	mov	fp, r1
 8007688:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800768c:	f7f8 ffd4 	bl	8000638 <__aeabi_dmul>
 8007690:	2d1f      	cmp	r5, #31
 8007692:	4606      	mov	r6, r0
 8007694:	460f      	mov	r7, r1
 8007696:	dc0c      	bgt.n	80076b2 <__ieee754_rem_pio2+0x1a2>
 8007698:	4b6a      	ldr	r3, [pc, #424]	@ (8007844 <__ieee754_rem_pio2+0x334>)
 800769a:	1e6a      	subs	r2, r5, #1
 800769c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076a0:	4543      	cmp	r3, r8
 80076a2:	d006      	beq.n	80076b2 <__ieee754_rem_pio2+0x1a2>
 80076a4:	4632      	mov	r2, r6
 80076a6:	463b      	mov	r3, r7
 80076a8:	4650      	mov	r0, sl
 80076aa:	4659      	mov	r1, fp
 80076ac:	f7f8 fe0c 	bl	80002c8 <__aeabi_dsub>
 80076b0:	e00e      	b.n	80076d0 <__ieee754_rem_pio2+0x1c0>
 80076b2:	463b      	mov	r3, r7
 80076b4:	4632      	mov	r2, r6
 80076b6:	4650      	mov	r0, sl
 80076b8:	4659      	mov	r1, fp
 80076ba:	f7f8 fe05 	bl	80002c8 <__aeabi_dsub>
 80076be:	ea4f 5328 	mov.w	r3, r8, asr #20
 80076c2:	9305      	str	r3, [sp, #20]
 80076c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80076c8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80076cc:	2b10      	cmp	r3, #16
 80076ce:	dc02      	bgt.n	80076d6 <__ieee754_rem_pio2+0x1c6>
 80076d0:	e9c4 0100 	strd	r0, r1, [r4]
 80076d4:	e039      	b.n	800774a <__ieee754_rem_pio2+0x23a>
 80076d6:	a34c      	add	r3, pc, #304	@ (adr r3, 8007808 <__ieee754_rem_pio2+0x2f8>)
 80076d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076e0:	f7f8 ffaa 	bl	8000638 <__aeabi_dmul>
 80076e4:	4606      	mov	r6, r0
 80076e6:	460f      	mov	r7, r1
 80076e8:	4602      	mov	r2, r0
 80076ea:	460b      	mov	r3, r1
 80076ec:	4650      	mov	r0, sl
 80076ee:	4659      	mov	r1, fp
 80076f0:	f7f8 fdea 	bl	80002c8 <__aeabi_dsub>
 80076f4:	4602      	mov	r2, r0
 80076f6:	460b      	mov	r3, r1
 80076f8:	4680      	mov	r8, r0
 80076fa:	4689      	mov	r9, r1
 80076fc:	4650      	mov	r0, sl
 80076fe:	4659      	mov	r1, fp
 8007700:	f7f8 fde2 	bl	80002c8 <__aeabi_dsub>
 8007704:	4632      	mov	r2, r6
 8007706:	463b      	mov	r3, r7
 8007708:	f7f8 fdde 	bl	80002c8 <__aeabi_dsub>
 800770c:	a340      	add	r3, pc, #256	@ (adr r3, 8007810 <__ieee754_rem_pio2+0x300>)
 800770e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007712:	4606      	mov	r6, r0
 8007714:	460f      	mov	r7, r1
 8007716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800771a:	f7f8 ff8d 	bl	8000638 <__aeabi_dmul>
 800771e:	4632      	mov	r2, r6
 8007720:	463b      	mov	r3, r7
 8007722:	f7f8 fdd1 	bl	80002c8 <__aeabi_dsub>
 8007726:	4602      	mov	r2, r0
 8007728:	460b      	mov	r3, r1
 800772a:	4606      	mov	r6, r0
 800772c:	460f      	mov	r7, r1
 800772e:	4640      	mov	r0, r8
 8007730:	4649      	mov	r1, r9
 8007732:	f7f8 fdc9 	bl	80002c8 <__aeabi_dsub>
 8007736:	9a05      	ldr	r2, [sp, #20]
 8007738:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800773c:	1ad3      	subs	r3, r2, r3
 800773e:	2b31      	cmp	r3, #49	@ 0x31
 8007740:	dc20      	bgt.n	8007784 <__ieee754_rem_pio2+0x274>
 8007742:	e9c4 0100 	strd	r0, r1, [r4]
 8007746:	46c2      	mov	sl, r8
 8007748:	46cb      	mov	fp, r9
 800774a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800774e:	4650      	mov	r0, sl
 8007750:	4642      	mov	r2, r8
 8007752:	464b      	mov	r3, r9
 8007754:	4659      	mov	r1, fp
 8007756:	f7f8 fdb7 	bl	80002c8 <__aeabi_dsub>
 800775a:	463b      	mov	r3, r7
 800775c:	4632      	mov	r2, r6
 800775e:	f7f8 fdb3 	bl	80002c8 <__aeabi_dsub>
 8007762:	9b04      	ldr	r3, [sp, #16]
 8007764:	2b00      	cmp	r3, #0
 8007766:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800776a:	f6bf af0e 	bge.w	800758a <__ieee754_rem_pio2+0x7a>
 800776e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8007772:	6063      	str	r3, [r4, #4]
 8007774:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007778:	f8c4 8000 	str.w	r8, [r4]
 800777c:	60a0      	str	r0, [r4, #8]
 800777e:	60e3      	str	r3, [r4, #12]
 8007780:	426d      	negs	r5, r5
 8007782:	e702      	b.n	800758a <__ieee754_rem_pio2+0x7a>
 8007784:	a326      	add	r3, pc, #152	@ (adr r3, 8007820 <__ieee754_rem_pio2+0x310>)
 8007786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800778e:	f7f8 ff53 	bl	8000638 <__aeabi_dmul>
 8007792:	4606      	mov	r6, r0
 8007794:	460f      	mov	r7, r1
 8007796:	4602      	mov	r2, r0
 8007798:	460b      	mov	r3, r1
 800779a:	4640      	mov	r0, r8
 800779c:	4649      	mov	r1, r9
 800779e:	f7f8 fd93 	bl	80002c8 <__aeabi_dsub>
 80077a2:	4602      	mov	r2, r0
 80077a4:	460b      	mov	r3, r1
 80077a6:	4682      	mov	sl, r0
 80077a8:	468b      	mov	fp, r1
 80077aa:	4640      	mov	r0, r8
 80077ac:	4649      	mov	r1, r9
 80077ae:	f7f8 fd8b 	bl	80002c8 <__aeabi_dsub>
 80077b2:	4632      	mov	r2, r6
 80077b4:	463b      	mov	r3, r7
 80077b6:	f7f8 fd87 	bl	80002c8 <__aeabi_dsub>
 80077ba:	a31b      	add	r3, pc, #108	@ (adr r3, 8007828 <__ieee754_rem_pio2+0x318>)
 80077bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c0:	4606      	mov	r6, r0
 80077c2:	460f      	mov	r7, r1
 80077c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077c8:	f7f8 ff36 	bl	8000638 <__aeabi_dmul>
 80077cc:	4632      	mov	r2, r6
 80077ce:	463b      	mov	r3, r7
 80077d0:	f7f8 fd7a 	bl	80002c8 <__aeabi_dsub>
 80077d4:	4606      	mov	r6, r0
 80077d6:	460f      	mov	r7, r1
 80077d8:	e764      	b.n	80076a4 <__ieee754_rem_pio2+0x194>
 80077da:	4b1b      	ldr	r3, [pc, #108]	@ (8007848 <__ieee754_rem_pio2+0x338>)
 80077dc:	4598      	cmp	r8, r3
 80077de:	d935      	bls.n	800784c <__ieee754_rem_pio2+0x33c>
 80077e0:	4632      	mov	r2, r6
 80077e2:	463b      	mov	r3, r7
 80077e4:	4630      	mov	r0, r6
 80077e6:	4639      	mov	r1, r7
 80077e8:	f7f8 fd6e 	bl	80002c8 <__aeabi_dsub>
 80077ec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80077f0:	e9c4 0100 	strd	r0, r1, [r4]
 80077f4:	e69e      	b.n	8007534 <__ieee754_rem_pio2+0x24>
 80077f6:	bf00      	nop
 80077f8:	54400000 	.word	0x54400000
 80077fc:	3ff921fb 	.word	0x3ff921fb
 8007800:	1a626331 	.word	0x1a626331
 8007804:	3dd0b461 	.word	0x3dd0b461
 8007808:	1a600000 	.word	0x1a600000
 800780c:	3dd0b461 	.word	0x3dd0b461
 8007810:	2e037073 	.word	0x2e037073
 8007814:	3ba3198a 	.word	0x3ba3198a
 8007818:	6dc9c883 	.word	0x6dc9c883
 800781c:	3fe45f30 	.word	0x3fe45f30
 8007820:	2e000000 	.word	0x2e000000
 8007824:	3ba3198a 	.word	0x3ba3198a
 8007828:	252049c1 	.word	0x252049c1
 800782c:	397b839a 	.word	0x397b839a
 8007830:	3fe921fb 	.word	0x3fe921fb
 8007834:	4002d97b 	.word	0x4002d97b
 8007838:	3ff921fb 	.word	0x3ff921fb
 800783c:	413921fb 	.word	0x413921fb
 8007840:	3fe00000 	.word	0x3fe00000
 8007844:	0800b1c8 	.word	0x0800b1c8
 8007848:	7fefffff 	.word	0x7fefffff
 800784c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8007850:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8007854:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8007858:	4630      	mov	r0, r6
 800785a:	460f      	mov	r7, r1
 800785c:	f7f9 f99c 	bl	8000b98 <__aeabi_d2iz>
 8007860:	f7f8 fe80 	bl	8000564 <__aeabi_i2d>
 8007864:	4602      	mov	r2, r0
 8007866:	460b      	mov	r3, r1
 8007868:	4630      	mov	r0, r6
 800786a:	4639      	mov	r1, r7
 800786c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007870:	f7f8 fd2a 	bl	80002c8 <__aeabi_dsub>
 8007874:	4b22      	ldr	r3, [pc, #136]	@ (8007900 <__ieee754_rem_pio2+0x3f0>)
 8007876:	2200      	movs	r2, #0
 8007878:	f7f8 fede 	bl	8000638 <__aeabi_dmul>
 800787c:	460f      	mov	r7, r1
 800787e:	4606      	mov	r6, r0
 8007880:	f7f9 f98a 	bl	8000b98 <__aeabi_d2iz>
 8007884:	f7f8 fe6e 	bl	8000564 <__aeabi_i2d>
 8007888:	4602      	mov	r2, r0
 800788a:	460b      	mov	r3, r1
 800788c:	4630      	mov	r0, r6
 800788e:	4639      	mov	r1, r7
 8007890:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007894:	f7f8 fd18 	bl	80002c8 <__aeabi_dsub>
 8007898:	4b19      	ldr	r3, [pc, #100]	@ (8007900 <__ieee754_rem_pio2+0x3f0>)
 800789a:	2200      	movs	r2, #0
 800789c:	f7f8 fecc 	bl	8000638 <__aeabi_dmul>
 80078a0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80078a4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80078a8:	f04f 0803 	mov.w	r8, #3
 80078ac:	2600      	movs	r6, #0
 80078ae:	2700      	movs	r7, #0
 80078b0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80078b4:	4632      	mov	r2, r6
 80078b6:	463b      	mov	r3, r7
 80078b8:	46c2      	mov	sl, r8
 80078ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80078be:	f7f9 f923 	bl	8000b08 <__aeabi_dcmpeq>
 80078c2:	2800      	cmp	r0, #0
 80078c4:	d1f4      	bne.n	80078b0 <__ieee754_rem_pio2+0x3a0>
 80078c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007904 <__ieee754_rem_pio2+0x3f4>)
 80078c8:	9301      	str	r3, [sp, #4]
 80078ca:	2302      	movs	r3, #2
 80078cc:	9300      	str	r3, [sp, #0]
 80078ce:	462a      	mov	r2, r5
 80078d0:	4653      	mov	r3, sl
 80078d2:	4621      	mov	r1, r4
 80078d4:	a806      	add	r0, sp, #24
 80078d6:	f000 f897 	bl	8007a08 <__kernel_rem_pio2>
 80078da:	9b04      	ldr	r3, [sp, #16]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	4605      	mov	r5, r0
 80078e0:	f6bf ae53 	bge.w	800758a <__ieee754_rem_pio2+0x7a>
 80078e4:	e9d4 2100 	ldrd	r2, r1, [r4]
 80078e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80078ec:	e9c4 2300 	strd	r2, r3, [r4]
 80078f0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80078f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80078f8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80078fc:	e740      	b.n	8007780 <__ieee754_rem_pio2+0x270>
 80078fe:	bf00      	nop
 8007900:	41700000 	.word	0x41700000
 8007904:	0800b248 	.word	0x0800b248

08007908 <scalbn>:
 8007908:	b570      	push	{r4, r5, r6, lr}
 800790a:	ec55 4b10 	vmov	r4, r5, d0
 800790e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007912:	4606      	mov	r6, r0
 8007914:	462b      	mov	r3, r5
 8007916:	b991      	cbnz	r1, 800793e <scalbn+0x36>
 8007918:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800791c:	4323      	orrs	r3, r4
 800791e:	d03d      	beq.n	800799c <scalbn+0x94>
 8007920:	4b35      	ldr	r3, [pc, #212]	@ (80079f8 <scalbn+0xf0>)
 8007922:	4620      	mov	r0, r4
 8007924:	4629      	mov	r1, r5
 8007926:	2200      	movs	r2, #0
 8007928:	f7f8 fe86 	bl	8000638 <__aeabi_dmul>
 800792c:	4b33      	ldr	r3, [pc, #204]	@ (80079fc <scalbn+0xf4>)
 800792e:	429e      	cmp	r6, r3
 8007930:	4604      	mov	r4, r0
 8007932:	460d      	mov	r5, r1
 8007934:	da0f      	bge.n	8007956 <scalbn+0x4e>
 8007936:	a328      	add	r3, pc, #160	@ (adr r3, 80079d8 <scalbn+0xd0>)
 8007938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793c:	e01e      	b.n	800797c <scalbn+0x74>
 800793e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8007942:	4291      	cmp	r1, r2
 8007944:	d10b      	bne.n	800795e <scalbn+0x56>
 8007946:	4622      	mov	r2, r4
 8007948:	4620      	mov	r0, r4
 800794a:	4629      	mov	r1, r5
 800794c:	f7f8 fcbe 	bl	80002cc <__adddf3>
 8007950:	4604      	mov	r4, r0
 8007952:	460d      	mov	r5, r1
 8007954:	e022      	b.n	800799c <scalbn+0x94>
 8007956:	460b      	mov	r3, r1
 8007958:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800795c:	3936      	subs	r1, #54	@ 0x36
 800795e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8007962:	4296      	cmp	r6, r2
 8007964:	dd0d      	ble.n	8007982 <scalbn+0x7a>
 8007966:	2d00      	cmp	r5, #0
 8007968:	a11d      	add	r1, pc, #116	@ (adr r1, 80079e0 <scalbn+0xd8>)
 800796a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800796e:	da02      	bge.n	8007976 <scalbn+0x6e>
 8007970:	a11d      	add	r1, pc, #116	@ (adr r1, 80079e8 <scalbn+0xe0>)
 8007972:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007976:	a31a      	add	r3, pc, #104	@ (adr r3, 80079e0 <scalbn+0xd8>)
 8007978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797c:	f7f8 fe5c 	bl	8000638 <__aeabi_dmul>
 8007980:	e7e6      	b.n	8007950 <scalbn+0x48>
 8007982:	1872      	adds	r2, r6, r1
 8007984:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8007988:	428a      	cmp	r2, r1
 800798a:	dcec      	bgt.n	8007966 <scalbn+0x5e>
 800798c:	2a00      	cmp	r2, #0
 800798e:	dd08      	ble.n	80079a2 <scalbn+0x9a>
 8007990:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007994:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007998:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800799c:	ec45 4b10 	vmov	d0, r4, r5
 80079a0:	bd70      	pop	{r4, r5, r6, pc}
 80079a2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80079a6:	da08      	bge.n	80079ba <scalbn+0xb2>
 80079a8:	2d00      	cmp	r5, #0
 80079aa:	a10b      	add	r1, pc, #44	@ (adr r1, 80079d8 <scalbn+0xd0>)
 80079ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079b0:	dac1      	bge.n	8007936 <scalbn+0x2e>
 80079b2:	a10f      	add	r1, pc, #60	@ (adr r1, 80079f0 <scalbn+0xe8>)
 80079b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079b8:	e7bd      	b.n	8007936 <scalbn+0x2e>
 80079ba:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80079be:	3236      	adds	r2, #54	@ 0x36
 80079c0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80079c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80079c8:	4620      	mov	r0, r4
 80079ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007a00 <scalbn+0xf8>)
 80079cc:	4629      	mov	r1, r5
 80079ce:	2200      	movs	r2, #0
 80079d0:	e7d4      	b.n	800797c <scalbn+0x74>
 80079d2:	bf00      	nop
 80079d4:	f3af 8000 	nop.w
 80079d8:	c2f8f359 	.word	0xc2f8f359
 80079dc:	01a56e1f 	.word	0x01a56e1f
 80079e0:	8800759c 	.word	0x8800759c
 80079e4:	7e37e43c 	.word	0x7e37e43c
 80079e8:	8800759c 	.word	0x8800759c
 80079ec:	fe37e43c 	.word	0xfe37e43c
 80079f0:	c2f8f359 	.word	0xc2f8f359
 80079f4:	81a56e1f 	.word	0x81a56e1f
 80079f8:	43500000 	.word	0x43500000
 80079fc:	ffff3cb0 	.word	0xffff3cb0
 8007a00:	3c900000 	.word	0x3c900000
 8007a04:	00000000 	.word	0x00000000

08007a08 <__kernel_rem_pio2>:
 8007a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a0c:	ed2d 8b02 	vpush	{d8}
 8007a10:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8007a14:	f112 0f14 	cmn.w	r2, #20
 8007a18:	9306      	str	r3, [sp, #24]
 8007a1a:	9104      	str	r1, [sp, #16]
 8007a1c:	4bbe      	ldr	r3, [pc, #760]	@ (8007d18 <__kernel_rem_pio2+0x310>)
 8007a1e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8007a20:	9008      	str	r0, [sp, #32]
 8007a22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007a26:	9300      	str	r3, [sp, #0]
 8007a28:	9b06      	ldr	r3, [sp, #24]
 8007a2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007a2e:	bfa8      	it	ge
 8007a30:	1ed4      	subge	r4, r2, #3
 8007a32:	9305      	str	r3, [sp, #20]
 8007a34:	bfb2      	itee	lt
 8007a36:	2400      	movlt	r4, #0
 8007a38:	2318      	movge	r3, #24
 8007a3a:	fb94 f4f3 	sdivge	r4, r4, r3
 8007a3e:	f06f 0317 	mvn.w	r3, #23
 8007a42:	fb04 3303 	mla	r3, r4, r3, r3
 8007a46:	eb03 0b02 	add.w	fp, r3, r2
 8007a4a:	9b00      	ldr	r3, [sp, #0]
 8007a4c:	9a05      	ldr	r2, [sp, #20]
 8007a4e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8007d08 <__kernel_rem_pio2+0x300>
 8007a52:	eb03 0802 	add.w	r8, r3, r2
 8007a56:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8007a58:	1aa7      	subs	r7, r4, r2
 8007a5a:	ae20      	add	r6, sp, #128	@ 0x80
 8007a5c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007a60:	2500      	movs	r5, #0
 8007a62:	4545      	cmp	r5, r8
 8007a64:	dd13      	ble.n	8007a8e <__kernel_rem_pio2+0x86>
 8007a66:	9b06      	ldr	r3, [sp, #24]
 8007a68:	aa20      	add	r2, sp, #128	@ 0x80
 8007a6a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007a6e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8007a72:	f04f 0800 	mov.w	r8, #0
 8007a76:	9b00      	ldr	r3, [sp, #0]
 8007a78:	4598      	cmp	r8, r3
 8007a7a:	dc31      	bgt.n	8007ae0 <__kernel_rem_pio2+0xd8>
 8007a7c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8007d08 <__kernel_rem_pio2+0x300>
 8007a80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a84:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007a88:	462f      	mov	r7, r5
 8007a8a:	2600      	movs	r6, #0
 8007a8c:	e01b      	b.n	8007ac6 <__kernel_rem_pio2+0xbe>
 8007a8e:	42ef      	cmn	r7, r5
 8007a90:	d407      	bmi.n	8007aa2 <__kernel_rem_pio2+0x9a>
 8007a92:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007a96:	f7f8 fd65 	bl	8000564 <__aeabi_i2d>
 8007a9a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007a9e:	3501      	adds	r5, #1
 8007aa0:	e7df      	b.n	8007a62 <__kernel_rem_pio2+0x5a>
 8007aa2:	ec51 0b18 	vmov	r0, r1, d8
 8007aa6:	e7f8      	b.n	8007a9a <__kernel_rem_pio2+0x92>
 8007aa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007aac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007ab0:	f7f8 fdc2 	bl	8000638 <__aeabi_dmul>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007abc:	f7f8 fc06 	bl	80002cc <__adddf3>
 8007ac0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ac4:	3601      	adds	r6, #1
 8007ac6:	9b05      	ldr	r3, [sp, #20]
 8007ac8:	429e      	cmp	r6, r3
 8007aca:	f1a7 0708 	sub.w	r7, r7, #8
 8007ace:	ddeb      	ble.n	8007aa8 <__kernel_rem_pio2+0xa0>
 8007ad0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007ad4:	f108 0801 	add.w	r8, r8, #1
 8007ad8:	ecaa 7b02 	vstmia	sl!, {d7}
 8007adc:	3508      	adds	r5, #8
 8007ade:	e7ca      	b.n	8007a76 <__kernel_rem_pio2+0x6e>
 8007ae0:	9b00      	ldr	r3, [sp, #0]
 8007ae2:	f8dd 8000 	ldr.w	r8, [sp]
 8007ae6:	aa0c      	add	r2, sp, #48	@ 0x30
 8007ae8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007aec:	930a      	str	r3, [sp, #40]	@ 0x28
 8007aee:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8007af0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007af4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007af6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8007afa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007afc:	ab98      	add	r3, sp, #608	@ 0x260
 8007afe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007b02:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8007b06:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007b0a:	ac0c      	add	r4, sp, #48	@ 0x30
 8007b0c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8007b0e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8007b12:	46a1      	mov	r9, r4
 8007b14:	46c2      	mov	sl, r8
 8007b16:	f1ba 0f00 	cmp.w	sl, #0
 8007b1a:	f1a5 0508 	sub.w	r5, r5, #8
 8007b1e:	dc77      	bgt.n	8007c10 <__kernel_rem_pio2+0x208>
 8007b20:	4658      	mov	r0, fp
 8007b22:	ed9d 0b02 	vldr	d0, [sp, #8]
 8007b26:	f7ff feef 	bl	8007908 <scalbn>
 8007b2a:	ec57 6b10 	vmov	r6, r7, d0
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8007b34:	4630      	mov	r0, r6
 8007b36:	4639      	mov	r1, r7
 8007b38:	f7f8 fd7e 	bl	8000638 <__aeabi_dmul>
 8007b3c:	ec41 0b10 	vmov	d0, r0, r1
 8007b40:	f000 faba 	bl	80080b8 <floor>
 8007b44:	4b75      	ldr	r3, [pc, #468]	@ (8007d1c <__kernel_rem_pio2+0x314>)
 8007b46:	ec51 0b10 	vmov	r0, r1, d0
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f7f8 fd74 	bl	8000638 <__aeabi_dmul>
 8007b50:	4602      	mov	r2, r0
 8007b52:	460b      	mov	r3, r1
 8007b54:	4630      	mov	r0, r6
 8007b56:	4639      	mov	r1, r7
 8007b58:	f7f8 fbb6 	bl	80002c8 <__aeabi_dsub>
 8007b5c:	460f      	mov	r7, r1
 8007b5e:	4606      	mov	r6, r0
 8007b60:	f7f9 f81a 	bl	8000b98 <__aeabi_d2iz>
 8007b64:	9002      	str	r0, [sp, #8]
 8007b66:	f7f8 fcfd 	bl	8000564 <__aeabi_i2d>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	4630      	mov	r0, r6
 8007b70:	4639      	mov	r1, r7
 8007b72:	f7f8 fba9 	bl	80002c8 <__aeabi_dsub>
 8007b76:	f1bb 0f00 	cmp.w	fp, #0
 8007b7a:	4606      	mov	r6, r0
 8007b7c:	460f      	mov	r7, r1
 8007b7e:	dd6c      	ble.n	8007c5a <__kernel_rem_pio2+0x252>
 8007b80:	f108 31ff 	add.w	r1, r8, #4294967295
 8007b84:	ab0c      	add	r3, sp, #48	@ 0x30
 8007b86:	9d02      	ldr	r5, [sp, #8]
 8007b88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007b8c:	f1cb 0018 	rsb	r0, fp, #24
 8007b90:	fa43 f200 	asr.w	r2, r3, r0
 8007b94:	4415      	add	r5, r2
 8007b96:	4082      	lsls	r2, r0
 8007b98:	1a9b      	subs	r3, r3, r2
 8007b9a:	aa0c      	add	r2, sp, #48	@ 0x30
 8007b9c:	9502      	str	r5, [sp, #8]
 8007b9e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8007ba2:	f1cb 0217 	rsb	r2, fp, #23
 8007ba6:	fa43 f902 	asr.w	r9, r3, r2
 8007baa:	f1b9 0f00 	cmp.w	r9, #0
 8007bae:	dd64      	ble.n	8007c7a <__kernel_rem_pio2+0x272>
 8007bb0:	9b02      	ldr	r3, [sp, #8]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	9302      	str	r3, [sp, #8]
 8007bb8:	4615      	mov	r5, r2
 8007bba:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8007bbe:	4590      	cmp	r8, r2
 8007bc0:	f300 80b8 	bgt.w	8007d34 <__kernel_rem_pio2+0x32c>
 8007bc4:	f1bb 0f00 	cmp.w	fp, #0
 8007bc8:	dd07      	ble.n	8007bda <__kernel_rem_pio2+0x1d2>
 8007bca:	f1bb 0f01 	cmp.w	fp, #1
 8007bce:	f000 80bf 	beq.w	8007d50 <__kernel_rem_pio2+0x348>
 8007bd2:	f1bb 0f02 	cmp.w	fp, #2
 8007bd6:	f000 80c6 	beq.w	8007d66 <__kernel_rem_pio2+0x35e>
 8007bda:	f1b9 0f02 	cmp.w	r9, #2
 8007bde:	d14c      	bne.n	8007c7a <__kernel_rem_pio2+0x272>
 8007be0:	4632      	mov	r2, r6
 8007be2:	463b      	mov	r3, r7
 8007be4:	494e      	ldr	r1, [pc, #312]	@ (8007d20 <__kernel_rem_pio2+0x318>)
 8007be6:	2000      	movs	r0, #0
 8007be8:	f7f8 fb6e 	bl	80002c8 <__aeabi_dsub>
 8007bec:	4606      	mov	r6, r0
 8007bee:	460f      	mov	r7, r1
 8007bf0:	2d00      	cmp	r5, #0
 8007bf2:	d042      	beq.n	8007c7a <__kernel_rem_pio2+0x272>
 8007bf4:	4658      	mov	r0, fp
 8007bf6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8007d10 <__kernel_rem_pio2+0x308>
 8007bfa:	f7ff fe85 	bl	8007908 <scalbn>
 8007bfe:	4630      	mov	r0, r6
 8007c00:	4639      	mov	r1, r7
 8007c02:	ec53 2b10 	vmov	r2, r3, d0
 8007c06:	f7f8 fb5f 	bl	80002c8 <__aeabi_dsub>
 8007c0a:	4606      	mov	r6, r0
 8007c0c:	460f      	mov	r7, r1
 8007c0e:	e034      	b.n	8007c7a <__kernel_rem_pio2+0x272>
 8007c10:	4b44      	ldr	r3, [pc, #272]	@ (8007d24 <__kernel_rem_pio2+0x31c>)
 8007c12:	2200      	movs	r2, #0
 8007c14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c18:	f7f8 fd0e 	bl	8000638 <__aeabi_dmul>
 8007c1c:	f7f8 ffbc 	bl	8000b98 <__aeabi_d2iz>
 8007c20:	f7f8 fca0 	bl	8000564 <__aeabi_i2d>
 8007c24:	4b40      	ldr	r3, [pc, #256]	@ (8007d28 <__kernel_rem_pio2+0x320>)
 8007c26:	2200      	movs	r2, #0
 8007c28:	4606      	mov	r6, r0
 8007c2a:	460f      	mov	r7, r1
 8007c2c:	f7f8 fd04 	bl	8000638 <__aeabi_dmul>
 8007c30:	4602      	mov	r2, r0
 8007c32:	460b      	mov	r3, r1
 8007c34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c38:	f7f8 fb46 	bl	80002c8 <__aeabi_dsub>
 8007c3c:	f7f8 ffac 	bl	8000b98 <__aeabi_d2iz>
 8007c40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c44:	f849 0b04 	str.w	r0, [r9], #4
 8007c48:	4639      	mov	r1, r7
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	f7f8 fb3e 	bl	80002cc <__adddf3>
 8007c50:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c58:	e75d      	b.n	8007b16 <__kernel_rem_pio2+0x10e>
 8007c5a:	d107      	bne.n	8007c6c <__kernel_rem_pio2+0x264>
 8007c5c:	f108 33ff 	add.w	r3, r8, #4294967295
 8007c60:	aa0c      	add	r2, sp, #48	@ 0x30
 8007c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c66:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8007c6a:	e79e      	b.n	8007baa <__kernel_rem_pio2+0x1a2>
 8007c6c:	4b2f      	ldr	r3, [pc, #188]	@ (8007d2c <__kernel_rem_pio2+0x324>)
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f7f8 ff68 	bl	8000b44 <__aeabi_dcmpge>
 8007c74:	2800      	cmp	r0, #0
 8007c76:	d143      	bne.n	8007d00 <__kernel_rem_pio2+0x2f8>
 8007c78:	4681      	mov	r9, r0
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	4630      	mov	r0, r6
 8007c80:	4639      	mov	r1, r7
 8007c82:	f7f8 ff41 	bl	8000b08 <__aeabi_dcmpeq>
 8007c86:	2800      	cmp	r0, #0
 8007c88:	f000 80bf 	beq.w	8007e0a <__kernel_rem_pio2+0x402>
 8007c8c:	f108 33ff 	add.w	r3, r8, #4294967295
 8007c90:	2200      	movs	r2, #0
 8007c92:	9900      	ldr	r1, [sp, #0]
 8007c94:	428b      	cmp	r3, r1
 8007c96:	da6e      	bge.n	8007d76 <__kernel_rem_pio2+0x36e>
 8007c98:	2a00      	cmp	r2, #0
 8007c9a:	f000 8089 	beq.w	8007db0 <__kernel_rem_pio2+0x3a8>
 8007c9e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007ca2:	ab0c      	add	r3, sp, #48	@ 0x30
 8007ca4:	f1ab 0b18 	sub.w	fp, fp, #24
 8007ca8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d0f6      	beq.n	8007c9e <__kernel_rem_pio2+0x296>
 8007cb0:	4658      	mov	r0, fp
 8007cb2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8007d10 <__kernel_rem_pio2+0x308>
 8007cb6:	f7ff fe27 	bl	8007908 <scalbn>
 8007cba:	f108 0301 	add.w	r3, r8, #1
 8007cbe:	00da      	lsls	r2, r3, #3
 8007cc0:	9205      	str	r2, [sp, #20]
 8007cc2:	ec55 4b10 	vmov	r4, r5, d0
 8007cc6:	aa70      	add	r2, sp, #448	@ 0x1c0
 8007cc8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8007d24 <__kernel_rem_pio2+0x31c>
 8007ccc:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8007cd0:	4646      	mov	r6, r8
 8007cd2:	f04f 0a00 	mov.w	sl, #0
 8007cd6:	2e00      	cmp	r6, #0
 8007cd8:	f280 80cf 	bge.w	8007e7a <__kernel_rem_pio2+0x472>
 8007cdc:	4644      	mov	r4, r8
 8007cde:	2c00      	cmp	r4, #0
 8007ce0:	f2c0 80fd 	blt.w	8007ede <__kernel_rem_pio2+0x4d6>
 8007ce4:	4b12      	ldr	r3, [pc, #72]	@ (8007d30 <__kernel_rem_pio2+0x328>)
 8007ce6:	461f      	mov	r7, r3
 8007ce8:	ab70      	add	r3, sp, #448	@ 0x1c0
 8007cea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007cee:	9306      	str	r3, [sp, #24]
 8007cf0:	f04f 0a00 	mov.w	sl, #0
 8007cf4:	f04f 0b00 	mov.w	fp, #0
 8007cf8:	2600      	movs	r6, #0
 8007cfa:	eba8 0504 	sub.w	r5, r8, r4
 8007cfe:	e0e2      	b.n	8007ec6 <__kernel_rem_pio2+0x4be>
 8007d00:	f04f 0902 	mov.w	r9, #2
 8007d04:	e754      	b.n	8007bb0 <__kernel_rem_pio2+0x1a8>
 8007d06:	bf00      	nop
	...
 8007d14:	3ff00000 	.word	0x3ff00000
 8007d18:	0800b390 	.word	0x0800b390
 8007d1c:	40200000 	.word	0x40200000
 8007d20:	3ff00000 	.word	0x3ff00000
 8007d24:	3e700000 	.word	0x3e700000
 8007d28:	41700000 	.word	0x41700000
 8007d2c:	3fe00000 	.word	0x3fe00000
 8007d30:	0800b350 	.word	0x0800b350
 8007d34:	f854 3b04 	ldr.w	r3, [r4], #4
 8007d38:	b945      	cbnz	r5, 8007d4c <__kernel_rem_pio2+0x344>
 8007d3a:	b123      	cbz	r3, 8007d46 <__kernel_rem_pio2+0x33e>
 8007d3c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8007d40:	f844 3c04 	str.w	r3, [r4, #-4]
 8007d44:	2301      	movs	r3, #1
 8007d46:	3201      	adds	r2, #1
 8007d48:	461d      	mov	r5, r3
 8007d4a:	e738      	b.n	8007bbe <__kernel_rem_pio2+0x1b6>
 8007d4c:	1acb      	subs	r3, r1, r3
 8007d4e:	e7f7      	b.n	8007d40 <__kernel_rem_pio2+0x338>
 8007d50:	f108 32ff 	add.w	r2, r8, #4294967295
 8007d54:	ab0c      	add	r3, sp, #48	@ 0x30
 8007d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d5a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007d5e:	a90c      	add	r1, sp, #48	@ 0x30
 8007d60:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007d64:	e739      	b.n	8007bda <__kernel_rem_pio2+0x1d2>
 8007d66:	f108 32ff 	add.w	r2, r8, #4294967295
 8007d6a:	ab0c      	add	r3, sp, #48	@ 0x30
 8007d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d70:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007d74:	e7f3      	b.n	8007d5e <__kernel_rem_pio2+0x356>
 8007d76:	a90c      	add	r1, sp, #48	@ 0x30
 8007d78:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	430a      	orrs	r2, r1
 8007d80:	e787      	b.n	8007c92 <__kernel_rem_pio2+0x28a>
 8007d82:	3401      	adds	r4, #1
 8007d84:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007d88:	2a00      	cmp	r2, #0
 8007d8a:	d0fa      	beq.n	8007d82 <__kernel_rem_pio2+0x37a>
 8007d8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d8e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007d92:	eb0d 0503 	add.w	r5, sp, r3
 8007d96:	9b06      	ldr	r3, [sp, #24]
 8007d98:	aa20      	add	r2, sp, #128	@ 0x80
 8007d9a:	4443      	add	r3, r8
 8007d9c:	f108 0701 	add.w	r7, r8, #1
 8007da0:	3d98      	subs	r5, #152	@ 0x98
 8007da2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8007da6:	4444      	add	r4, r8
 8007da8:	42bc      	cmp	r4, r7
 8007daa:	da04      	bge.n	8007db6 <__kernel_rem_pio2+0x3ae>
 8007dac:	46a0      	mov	r8, r4
 8007dae:	e6a2      	b.n	8007af6 <__kernel_rem_pio2+0xee>
 8007db0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007db2:	2401      	movs	r4, #1
 8007db4:	e7e6      	b.n	8007d84 <__kernel_rem_pio2+0x37c>
 8007db6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007db8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8007dbc:	f7f8 fbd2 	bl	8000564 <__aeabi_i2d>
 8007dc0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8008088 <__kernel_rem_pio2+0x680>
 8007dc4:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007dc8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007dcc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007dd0:	46b2      	mov	sl, r6
 8007dd2:	f04f 0800 	mov.w	r8, #0
 8007dd6:	9b05      	ldr	r3, [sp, #20]
 8007dd8:	4598      	cmp	r8, r3
 8007dda:	dd05      	ble.n	8007de8 <__kernel_rem_pio2+0x3e0>
 8007ddc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007de0:	3701      	adds	r7, #1
 8007de2:	eca5 7b02 	vstmia	r5!, {d7}
 8007de6:	e7df      	b.n	8007da8 <__kernel_rem_pio2+0x3a0>
 8007de8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8007dec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007df0:	f7f8 fc22 	bl	8000638 <__aeabi_dmul>
 8007df4:	4602      	mov	r2, r0
 8007df6:	460b      	mov	r3, r1
 8007df8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dfc:	f7f8 fa66 	bl	80002cc <__adddf3>
 8007e00:	f108 0801 	add.w	r8, r8, #1
 8007e04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e08:	e7e5      	b.n	8007dd6 <__kernel_rem_pio2+0x3ce>
 8007e0a:	f1cb 0000 	rsb	r0, fp, #0
 8007e0e:	ec47 6b10 	vmov	d0, r6, r7
 8007e12:	f7ff fd79 	bl	8007908 <scalbn>
 8007e16:	ec55 4b10 	vmov	r4, r5, d0
 8007e1a:	4b9d      	ldr	r3, [pc, #628]	@ (8008090 <__kernel_rem_pio2+0x688>)
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	4620      	mov	r0, r4
 8007e20:	4629      	mov	r1, r5
 8007e22:	f7f8 fe8f 	bl	8000b44 <__aeabi_dcmpge>
 8007e26:	b300      	cbz	r0, 8007e6a <__kernel_rem_pio2+0x462>
 8007e28:	4b9a      	ldr	r3, [pc, #616]	@ (8008094 <__kernel_rem_pio2+0x68c>)
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	4629      	mov	r1, r5
 8007e30:	f7f8 fc02 	bl	8000638 <__aeabi_dmul>
 8007e34:	f7f8 feb0 	bl	8000b98 <__aeabi_d2iz>
 8007e38:	4606      	mov	r6, r0
 8007e3a:	f7f8 fb93 	bl	8000564 <__aeabi_i2d>
 8007e3e:	4b94      	ldr	r3, [pc, #592]	@ (8008090 <__kernel_rem_pio2+0x688>)
 8007e40:	2200      	movs	r2, #0
 8007e42:	f7f8 fbf9 	bl	8000638 <__aeabi_dmul>
 8007e46:	460b      	mov	r3, r1
 8007e48:	4602      	mov	r2, r0
 8007e4a:	4629      	mov	r1, r5
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	f7f8 fa3b 	bl	80002c8 <__aeabi_dsub>
 8007e52:	f7f8 fea1 	bl	8000b98 <__aeabi_d2iz>
 8007e56:	ab0c      	add	r3, sp, #48	@ 0x30
 8007e58:	f10b 0b18 	add.w	fp, fp, #24
 8007e5c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007e60:	f108 0801 	add.w	r8, r8, #1
 8007e64:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8007e68:	e722      	b.n	8007cb0 <__kernel_rem_pio2+0x2a8>
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	4629      	mov	r1, r5
 8007e6e:	f7f8 fe93 	bl	8000b98 <__aeabi_d2iz>
 8007e72:	ab0c      	add	r3, sp, #48	@ 0x30
 8007e74:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007e78:	e71a      	b.n	8007cb0 <__kernel_rem_pio2+0x2a8>
 8007e7a:	ab0c      	add	r3, sp, #48	@ 0x30
 8007e7c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007e80:	f7f8 fb70 	bl	8000564 <__aeabi_i2d>
 8007e84:	4622      	mov	r2, r4
 8007e86:	462b      	mov	r3, r5
 8007e88:	f7f8 fbd6 	bl	8000638 <__aeabi_dmul>
 8007e8c:	4652      	mov	r2, sl
 8007e8e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8007e92:	465b      	mov	r3, fp
 8007e94:	4620      	mov	r0, r4
 8007e96:	4629      	mov	r1, r5
 8007e98:	f7f8 fbce 	bl	8000638 <__aeabi_dmul>
 8007e9c:	3e01      	subs	r6, #1
 8007e9e:	4604      	mov	r4, r0
 8007ea0:	460d      	mov	r5, r1
 8007ea2:	e718      	b.n	8007cd6 <__kernel_rem_pio2+0x2ce>
 8007ea4:	9906      	ldr	r1, [sp, #24]
 8007ea6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8007eaa:	9106      	str	r1, [sp, #24]
 8007eac:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8007eb0:	f7f8 fbc2 	bl	8000638 <__aeabi_dmul>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	4650      	mov	r0, sl
 8007eba:	4659      	mov	r1, fp
 8007ebc:	f7f8 fa06 	bl	80002cc <__adddf3>
 8007ec0:	3601      	adds	r6, #1
 8007ec2:	4682      	mov	sl, r0
 8007ec4:	468b      	mov	fp, r1
 8007ec6:	9b00      	ldr	r3, [sp, #0]
 8007ec8:	429e      	cmp	r6, r3
 8007eca:	dc01      	bgt.n	8007ed0 <__kernel_rem_pio2+0x4c8>
 8007ecc:	42b5      	cmp	r5, r6
 8007ece:	dae9      	bge.n	8007ea4 <__kernel_rem_pio2+0x49c>
 8007ed0:	ab48      	add	r3, sp, #288	@ 0x120
 8007ed2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007ed6:	e9c5 ab00 	strd	sl, fp, [r5]
 8007eda:	3c01      	subs	r4, #1
 8007edc:	e6ff      	b.n	8007cde <__kernel_rem_pio2+0x2d6>
 8007ede:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8007ee0:	2b02      	cmp	r3, #2
 8007ee2:	dc0b      	bgt.n	8007efc <__kernel_rem_pio2+0x4f4>
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	dc39      	bgt.n	8007f5c <__kernel_rem_pio2+0x554>
 8007ee8:	d05d      	beq.n	8007fa6 <__kernel_rem_pio2+0x59e>
 8007eea:	9b02      	ldr	r3, [sp, #8]
 8007eec:	f003 0007 	and.w	r0, r3, #7
 8007ef0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8007ef4:	ecbd 8b02 	vpop	{d8}
 8007ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007efc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8007efe:	2b03      	cmp	r3, #3
 8007f00:	d1f3      	bne.n	8007eea <__kernel_rem_pio2+0x4e2>
 8007f02:	9b05      	ldr	r3, [sp, #20]
 8007f04:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007f08:	eb0d 0403 	add.w	r4, sp, r3
 8007f0c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8007f10:	4625      	mov	r5, r4
 8007f12:	46c2      	mov	sl, r8
 8007f14:	f1ba 0f00 	cmp.w	sl, #0
 8007f18:	f1a5 0508 	sub.w	r5, r5, #8
 8007f1c:	dc6b      	bgt.n	8007ff6 <__kernel_rem_pio2+0x5ee>
 8007f1e:	4645      	mov	r5, r8
 8007f20:	2d01      	cmp	r5, #1
 8007f22:	f1a4 0408 	sub.w	r4, r4, #8
 8007f26:	f300 8087 	bgt.w	8008038 <__kernel_rem_pio2+0x630>
 8007f2a:	9c05      	ldr	r4, [sp, #20]
 8007f2c:	ab48      	add	r3, sp, #288	@ 0x120
 8007f2e:	441c      	add	r4, r3
 8007f30:	2000      	movs	r0, #0
 8007f32:	2100      	movs	r1, #0
 8007f34:	f1b8 0f01 	cmp.w	r8, #1
 8007f38:	f300 809c 	bgt.w	8008074 <__kernel_rem_pio2+0x66c>
 8007f3c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8007f40:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8007f44:	f1b9 0f00 	cmp.w	r9, #0
 8007f48:	f040 80a6 	bne.w	8008098 <__kernel_rem_pio2+0x690>
 8007f4c:	9b04      	ldr	r3, [sp, #16]
 8007f4e:	e9c3 7800 	strd	r7, r8, [r3]
 8007f52:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007f56:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007f5a:	e7c6      	b.n	8007eea <__kernel_rem_pio2+0x4e2>
 8007f5c:	9d05      	ldr	r5, [sp, #20]
 8007f5e:	ab48      	add	r3, sp, #288	@ 0x120
 8007f60:	441d      	add	r5, r3
 8007f62:	4644      	mov	r4, r8
 8007f64:	2000      	movs	r0, #0
 8007f66:	2100      	movs	r1, #0
 8007f68:	2c00      	cmp	r4, #0
 8007f6a:	da35      	bge.n	8007fd8 <__kernel_rem_pio2+0x5d0>
 8007f6c:	f1b9 0f00 	cmp.w	r9, #0
 8007f70:	d038      	beq.n	8007fe4 <__kernel_rem_pio2+0x5dc>
 8007f72:	4602      	mov	r2, r0
 8007f74:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007f78:	9c04      	ldr	r4, [sp, #16]
 8007f7a:	e9c4 2300 	strd	r2, r3, [r4]
 8007f7e:	4602      	mov	r2, r0
 8007f80:	460b      	mov	r3, r1
 8007f82:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8007f86:	f7f8 f99f 	bl	80002c8 <__aeabi_dsub>
 8007f8a:	ad4a      	add	r5, sp, #296	@ 0x128
 8007f8c:	2401      	movs	r4, #1
 8007f8e:	45a0      	cmp	r8, r4
 8007f90:	da2b      	bge.n	8007fea <__kernel_rem_pio2+0x5e2>
 8007f92:	f1b9 0f00 	cmp.w	r9, #0
 8007f96:	d002      	beq.n	8007f9e <__kernel_rem_pio2+0x596>
 8007f98:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	9b04      	ldr	r3, [sp, #16]
 8007fa0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007fa4:	e7a1      	b.n	8007eea <__kernel_rem_pio2+0x4e2>
 8007fa6:	9c05      	ldr	r4, [sp, #20]
 8007fa8:	ab48      	add	r3, sp, #288	@ 0x120
 8007faa:	441c      	add	r4, r3
 8007fac:	2000      	movs	r0, #0
 8007fae:	2100      	movs	r1, #0
 8007fb0:	f1b8 0f00 	cmp.w	r8, #0
 8007fb4:	da09      	bge.n	8007fca <__kernel_rem_pio2+0x5c2>
 8007fb6:	f1b9 0f00 	cmp.w	r9, #0
 8007fba:	d002      	beq.n	8007fc2 <__kernel_rem_pio2+0x5ba>
 8007fbc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	9b04      	ldr	r3, [sp, #16]
 8007fc4:	e9c3 0100 	strd	r0, r1, [r3]
 8007fc8:	e78f      	b.n	8007eea <__kernel_rem_pio2+0x4e2>
 8007fca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007fce:	f7f8 f97d 	bl	80002cc <__adddf3>
 8007fd2:	f108 38ff 	add.w	r8, r8, #4294967295
 8007fd6:	e7eb      	b.n	8007fb0 <__kernel_rem_pio2+0x5a8>
 8007fd8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8007fdc:	f7f8 f976 	bl	80002cc <__adddf3>
 8007fe0:	3c01      	subs	r4, #1
 8007fe2:	e7c1      	b.n	8007f68 <__kernel_rem_pio2+0x560>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	e7c6      	b.n	8007f78 <__kernel_rem_pio2+0x570>
 8007fea:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8007fee:	f7f8 f96d 	bl	80002cc <__adddf3>
 8007ff2:	3401      	adds	r4, #1
 8007ff4:	e7cb      	b.n	8007f8e <__kernel_rem_pio2+0x586>
 8007ff6:	ed95 7b00 	vldr	d7, [r5]
 8007ffa:	ed8d 7b00 	vstr	d7, [sp]
 8007ffe:	ed95 7b02 	vldr	d7, [r5, #8]
 8008002:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008006:	ec53 2b17 	vmov	r2, r3, d7
 800800a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800800e:	f7f8 f95d 	bl	80002cc <__adddf3>
 8008012:	4602      	mov	r2, r0
 8008014:	460b      	mov	r3, r1
 8008016:	4606      	mov	r6, r0
 8008018:	460f      	mov	r7, r1
 800801a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800801e:	f7f8 f953 	bl	80002c8 <__aeabi_dsub>
 8008022:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008026:	f7f8 f951 	bl	80002cc <__adddf3>
 800802a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800802e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8008032:	e9c5 6700 	strd	r6, r7, [r5]
 8008036:	e76d      	b.n	8007f14 <__kernel_rem_pio2+0x50c>
 8008038:	ed94 7b00 	vldr	d7, [r4]
 800803c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8008040:	ec51 0b17 	vmov	r0, r1, d7
 8008044:	4652      	mov	r2, sl
 8008046:	465b      	mov	r3, fp
 8008048:	ed8d 7b00 	vstr	d7, [sp]
 800804c:	f7f8 f93e 	bl	80002cc <__adddf3>
 8008050:	4602      	mov	r2, r0
 8008052:	460b      	mov	r3, r1
 8008054:	4606      	mov	r6, r0
 8008056:	460f      	mov	r7, r1
 8008058:	e9dd 0100 	ldrd	r0, r1, [sp]
 800805c:	f7f8 f934 	bl	80002c8 <__aeabi_dsub>
 8008060:	4652      	mov	r2, sl
 8008062:	465b      	mov	r3, fp
 8008064:	f7f8 f932 	bl	80002cc <__adddf3>
 8008068:	3d01      	subs	r5, #1
 800806a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800806e:	e9c4 6700 	strd	r6, r7, [r4]
 8008072:	e755      	b.n	8007f20 <__kernel_rem_pio2+0x518>
 8008074:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008078:	f7f8 f928 	bl	80002cc <__adddf3>
 800807c:	f108 38ff 	add.w	r8, r8, #4294967295
 8008080:	e758      	b.n	8007f34 <__kernel_rem_pio2+0x52c>
 8008082:	bf00      	nop
 8008084:	f3af 8000 	nop.w
	...
 8008090:	41700000 	.word	0x41700000
 8008094:	3e700000 	.word	0x3e700000
 8008098:	9b04      	ldr	r3, [sp, #16]
 800809a:	9a04      	ldr	r2, [sp, #16]
 800809c:	601f      	str	r7, [r3, #0]
 800809e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80080a2:	605c      	str	r4, [r3, #4]
 80080a4:	609d      	str	r5, [r3, #8]
 80080a6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80080aa:	60d3      	str	r3, [r2, #12]
 80080ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80080b0:	6110      	str	r0, [r2, #16]
 80080b2:	6153      	str	r3, [r2, #20]
 80080b4:	e719      	b.n	8007eea <__kernel_rem_pio2+0x4e2>
 80080b6:	bf00      	nop

080080b8 <floor>:
 80080b8:	ec51 0b10 	vmov	r0, r1, d0
 80080bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80080c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080c4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80080c8:	2e13      	cmp	r6, #19
 80080ca:	460c      	mov	r4, r1
 80080cc:	4605      	mov	r5, r0
 80080ce:	4680      	mov	r8, r0
 80080d0:	dc34      	bgt.n	800813c <floor+0x84>
 80080d2:	2e00      	cmp	r6, #0
 80080d4:	da17      	bge.n	8008106 <floor+0x4e>
 80080d6:	a332      	add	r3, pc, #200	@ (adr r3, 80081a0 <floor+0xe8>)
 80080d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080dc:	f7f8 f8f6 	bl	80002cc <__adddf3>
 80080e0:	2200      	movs	r2, #0
 80080e2:	2300      	movs	r3, #0
 80080e4:	f7f8 fd38 	bl	8000b58 <__aeabi_dcmpgt>
 80080e8:	b150      	cbz	r0, 8008100 <floor+0x48>
 80080ea:	2c00      	cmp	r4, #0
 80080ec:	da55      	bge.n	800819a <floor+0xe2>
 80080ee:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80080f2:	432c      	orrs	r4, r5
 80080f4:	2500      	movs	r5, #0
 80080f6:	42ac      	cmp	r4, r5
 80080f8:	4c2b      	ldr	r4, [pc, #172]	@ (80081a8 <floor+0xf0>)
 80080fa:	bf08      	it	eq
 80080fc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8008100:	4621      	mov	r1, r4
 8008102:	4628      	mov	r0, r5
 8008104:	e023      	b.n	800814e <floor+0x96>
 8008106:	4f29      	ldr	r7, [pc, #164]	@ (80081ac <floor+0xf4>)
 8008108:	4137      	asrs	r7, r6
 800810a:	ea01 0307 	and.w	r3, r1, r7
 800810e:	4303      	orrs	r3, r0
 8008110:	d01d      	beq.n	800814e <floor+0x96>
 8008112:	a323      	add	r3, pc, #140	@ (adr r3, 80081a0 <floor+0xe8>)
 8008114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008118:	f7f8 f8d8 	bl	80002cc <__adddf3>
 800811c:	2200      	movs	r2, #0
 800811e:	2300      	movs	r3, #0
 8008120:	f7f8 fd1a 	bl	8000b58 <__aeabi_dcmpgt>
 8008124:	2800      	cmp	r0, #0
 8008126:	d0eb      	beq.n	8008100 <floor+0x48>
 8008128:	2c00      	cmp	r4, #0
 800812a:	bfbe      	ittt	lt
 800812c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8008130:	4133      	asrlt	r3, r6
 8008132:	18e4      	addlt	r4, r4, r3
 8008134:	ea24 0407 	bic.w	r4, r4, r7
 8008138:	2500      	movs	r5, #0
 800813a:	e7e1      	b.n	8008100 <floor+0x48>
 800813c:	2e33      	cmp	r6, #51	@ 0x33
 800813e:	dd0a      	ble.n	8008156 <floor+0x9e>
 8008140:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8008144:	d103      	bne.n	800814e <floor+0x96>
 8008146:	4602      	mov	r2, r0
 8008148:	460b      	mov	r3, r1
 800814a:	f7f8 f8bf 	bl	80002cc <__adddf3>
 800814e:	ec41 0b10 	vmov	d0, r0, r1
 8008152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008156:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800815a:	f04f 37ff 	mov.w	r7, #4294967295
 800815e:	40df      	lsrs	r7, r3
 8008160:	4207      	tst	r7, r0
 8008162:	d0f4      	beq.n	800814e <floor+0x96>
 8008164:	a30e      	add	r3, pc, #56	@ (adr r3, 80081a0 <floor+0xe8>)
 8008166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816a:	f7f8 f8af 	bl	80002cc <__adddf3>
 800816e:	2200      	movs	r2, #0
 8008170:	2300      	movs	r3, #0
 8008172:	f7f8 fcf1 	bl	8000b58 <__aeabi_dcmpgt>
 8008176:	2800      	cmp	r0, #0
 8008178:	d0c2      	beq.n	8008100 <floor+0x48>
 800817a:	2c00      	cmp	r4, #0
 800817c:	da0a      	bge.n	8008194 <floor+0xdc>
 800817e:	2e14      	cmp	r6, #20
 8008180:	d101      	bne.n	8008186 <floor+0xce>
 8008182:	3401      	adds	r4, #1
 8008184:	e006      	b.n	8008194 <floor+0xdc>
 8008186:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800818a:	2301      	movs	r3, #1
 800818c:	40b3      	lsls	r3, r6
 800818e:	441d      	add	r5, r3
 8008190:	4545      	cmp	r5, r8
 8008192:	d3f6      	bcc.n	8008182 <floor+0xca>
 8008194:	ea25 0507 	bic.w	r5, r5, r7
 8008198:	e7b2      	b.n	8008100 <floor+0x48>
 800819a:	2500      	movs	r5, #0
 800819c:	462c      	mov	r4, r5
 800819e:	e7af      	b.n	8008100 <floor+0x48>
 80081a0:	8800759c 	.word	0x8800759c
 80081a4:	7e37e43c 	.word	0x7e37e43c
 80081a8:	bff00000 	.word	0xbff00000
 80081ac:	000fffff 	.word	0x000fffff

080081b0 <__cvt>:
 80081b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081b4:	ec57 6b10 	vmov	r6, r7, d0
 80081b8:	2f00      	cmp	r7, #0
 80081ba:	460c      	mov	r4, r1
 80081bc:	4619      	mov	r1, r3
 80081be:	463b      	mov	r3, r7
 80081c0:	bfbb      	ittet	lt
 80081c2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80081c6:	461f      	movlt	r7, r3
 80081c8:	2300      	movge	r3, #0
 80081ca:	232d      	movlt	r3, #45	@ 0x2d
 80081cc:	700b      	strb	r3, [r1, #0]
 80081ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80081d0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80081d4:	4691      	mov	r9, r2
 80081d6:	f023 0820 	bic.w	r8, r3, #32
 80081da:	bfbc      	itt	lt
 80081dc:	4632      	movlt	r2, r6
 80081de:	4616      	movlt	r6, r2
 80081e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80081e4:	d005      	beq.n	80081f2 <__cvt+0x42>
 80081e6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80081ea:	d100      	bne.n	80081ee <__cvt+0x3e>
 80081ec:	3401      	adds	r4, #1
 80081ee:	2102      	movs	r1, #2
 80081f0:	e000      	b.n	80081f4 <__cvt+0x44>
 80081f2:	2103      	movs	r1, #3
 80081f4:	ab03      	add	r3, sp, #12
 80081f6:	9301      	str	r3, [sp, #4]
 80081f8:	ab02      	add	r3, sp, #8
 80081fa:	9300      	str	r3, [sp, #0]
 80081fc:	ec47 6b10 	vmov	d0, r6, r7
 8008200:	4653      	mov	r3, sl
 8008202:	4622      	mov	r2, r4
 8008204:	f000 fe70 	bl	8008ee8 <_dtoa_r>
 8008208:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800820c:	4605      	mov	r5, r0
 800820e:	d119      	bne.n	8008244 <__cvt+0x94>
 8008210:	f019 0f01 	tst.w	r9, #1
 8008214:	d00e      	beq.n	8008234 <__cvt+0x84>
 8008216:	eb00 0904 	add.w	r9, r0, r4
 800821a:	2200      	movs	r2, #0
 800821c:	2300      	movs	r3, #0
 800821e:	4630      	mov	r0, r6
 8008220:	4639      	mov	r1, r7
 8008222:	f7f8 fc71 	bl	8000b08 <__aeabi_dcmpeq>
 8008226:	b108      	cbz	r0, 800822c <__cvt+0x7c>
 8008228:	f8cd 900c 	str.w	r9, [sp, #12]
 800822c:	2230      	movs	r2, #48	@ 0x30
 800822e:	9b03      	ldr	r3, [sp, #12]
 8008230:	454b      	cmp	r3, r9
 8008232:	d31e      	bcc.n	8008272 <__cvt+0xc2>
 8008234:	9b03      	ldr	r3, [sp, #12]
 8008236:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008238:	1b5b      	subs	r3, r3, r5
 800823a:	4628      	mov	r0, r5
 800823c:	6013      	str	r3, [r2, #0]
 800823e:	b004      	add	sp, #16
 8008240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008244:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008248:	eb00 0904 	add.w	r9, r0, r4
 800824c:	d1e5      	bne.n	800821a <__cvt+0x6a>
 800824e:	7803      	ldrb	r3, [r0, #0]
 8008250:	2b30      	cmp	r3, #48	@ 0x30
 8008252:	d10a      	bne.n	800826a <__cvt+0xba>
 8008254:	2200      	movs	r2, #0
 8008256:	2300      	movs	r3, #0
 8008258:	4630      	mov	r0, r6
 800825a:	4639      	mov	r1, r7
 800825c:	f7f8 fc54 	bl	8000b08 <__aeabi_dcmpeq>
 8008260:	b918      	cbnz	r0, 800826a <__cvt+0xba>
 8008262:	f1c4 0401 	rsb	r4, r4, #1
 8008266:	f8ca 4000 	str.w	r4, [sl]
 800826a:	f8da 3000 	ldr.w	r3, [sl]
 800826e:	4499      	add	r9, r3
 8008270:	e7d3      	b.n	800821a <__cvt+0x6a>
 8008272:	1c59      	adds	r1, r3, #1
 8008274:	9103      	str	r1, [sp, #12]
 8008276:	701a      	strb	r2, [r3, #0]
 8008278:	e7d9      	b.n	800822e <__cvt+0x7e>

0800827a <__exponent>:
 800827a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800827c:	2900      	cmp	r1, #0
 800827e:	bfba      	itte	lt
 8008280:	4249      	neglt	r1, r1
 8008282:	232d      	movlt	r3, #45	@ 0x2d
 8008284:	232b      	movge	r3, #43	@ 0x2b
 8008286:	2909      	cmp	r1, #9
 8008288:	7002      	strb	r2, [r0, #0]
 800828a:	7043      	strb	r3, [r0, #1]
 800828c:	dd29      	ble.n	80082e2 <__exponent+0x68>
 800828e:	f10d 0307 	add.w	r3, sp, #7
 8008292:	461d      	mov	r5, r3
 8008294:	270a      	movs	r7, #10
 8008296:	461a      	mov	r2, r3
 8008298:	fbb1 f6f7 	udiv	r6, r1, r7
 800829c:	fb07 1416 	mls	r4, r7, r6, r1
 80082a0:	3430      	adds	r4, #48	@ 0x30
 80082a2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80082a6:	460c      	mov	r4, r1
 80082a8:	2c63      	cmp	r4, #99	@ 0x63
 80082aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80082ae:	4631      	mov	r1, r6
 80082b0:	dcf1      	bgt.n	8008296 <__exponent+0x1c>
 80082b2:	3130      	adds	r1, #48	@ 0x30
 80082b4:	1e94      	subs	r4, r2, #2
 80082b6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80082ba:	1c41      	adds	r1, r0, #1
 80082bc:	4623      	mov	r3, r4
 80082be:	42ab      	cmp	r3, r5
 80082c0:	d30a      	bcc.n	80082d8 <__exponent+0x5e>
 80082c2:	f10d 0309 	add.w	r3, sp, #9
 80082c6:	1a9b      	subs	r3, r3, r2
 80082c8:	42ac      	cmp	r4, r5
 80082ca:	bf88      	it	hi
 80082cc:	2300      	movhi	r3, #0
 80082ce:	3302      	adds	r3, #2
 80082d0:	4403      	add	r3, r0
 80082d2:	1a18      	subs	r0, r3, r0
 80082d4:	b003      	add	sp, #12
 80082d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082d8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80082dc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80082e0:	e7ed      	b.n	80082be <__exponent+0x44>
 80082e2:	2330      	movs	r3, #48	@ 0x30
 80082e4:	3130      	adds	r1, #48	@ 0x30
 80082e6:	7083      	strb	r3, [r0, #2]
 80082e8:	70c1      	strb	r1, [r0, #3]
 80082ea:	1d03      	adds	r3, r0, #4
 80082ec:	e7f1      	b.n	80082d2 <__exponent+0x58>
	...

080082f0 <_printf_float>:
 80082f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f4:	b08d      	sub	sp, #52	@ 0x34
 80082f6:	460c      	mov	r4, r1
 80082f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80082fc:	4616      	mov	r6, r2
 80082fe:	461f      	mov	r7, r3
 8008300:	4605      	mov	r5, r0
 8008302:	f000 fcef 	bl	8008ce4 <_localeconv_r>
 8008306:	6803      	ldr	r3, [r0, #0]
 8008308:	9304      	str	r3, [sp, #16]
 800830a:	4618      	mov	r0, r3
 800830c:	f7f7 ffd0 	bl	80002b0 <strlen>
 8008310:	2300      	movs	r3, #0
 8008312:	930a      	str	r3, [sp, #40]	@ 0x28
 8008314:	f8d8 3000 	ldr.w	r3, [r8]
 8008318:	9005      	str	r0, [sp, #20]
 800831a:	3307      	adds	r3, #7
 800831c:	f023 0307 	bic.w	r3, r3, #7
 8008320:	f103 0208 	add.w	r2, r3, #8
 8008324:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008328:	f8d4 b000 	ldr.w	fp, [r4]
 800832c:	f8c8 2000 	str.w	r2, [r8]
 8008330:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008334:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008338:	9307      	str	r3, [sp, #28]
 800833a:	f8cd 8018 	str.w	r8, [sp, #24]
 800833e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008342:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008346:	4b9c      	ldr	r3, [pc, #624]	@ (80085b8 <_printf_float+0x2c8>)
 8008348:	f04f 32ff 	mov.w	r2, #4294967295
 800834c:	f7f8 fc0e 	bl	8000b6c <__aeabi_dcmpun>
 8008350:	bb70      	cbnz	r0, 80083b0 <_printf_float+0xc0>
 8008352:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008356:	4b98      	ldr	r3, [pc, #608]	@ (80085b8 <_printf_float+0x2c8>)
 8008358:	f04f 32ff 	mov.w	r2, #4294967295
 800835c:	f7f8 fbe8 	bl	8000b30 <__aeabi_dcmple>
 8008360:	bb30      	cbnz	r0, 80083b0 <_printf_float+0xc0>
 8008362:	2200      	movs	r2, #0
 8008364:	2300      	movs	r3, #0
 8008366:	4640      	mov	r0, r8
 8008368:	4649      	mov	r1, r9
 800836a:	f7f8 fbd7 	bl	8000b1c <__aeabi_dcmplt>
 800836e:	b110      	cbz	r0, 8008376 <_printf_float+0x86>
 8008370:	232d      	movs	r3, #45	@ 0x2d
 8008372:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008376:	4a91      	ldr	r2, [pc, #580]	@ (80085bc <_printf_float+0x2cc>)
 8008378:	4b91      	ldr	r3, [pc, #580]	@ (80085c0 <_printf_float+0x2d0>)
 800837a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800837e:	bf94      	ite	ls
 8008380:	4690      	movls	r8, r2
 8008382:	4698      	movhi	r8, r3
 8008384:	2303      	movs	r3, #3
 8008386:	6123      	str	r3, [r4, #16]
 8008388:	f02b 0304 	bic.w	r3, fp, #4
 800838c:	6023      	str	r3, [r4, #0]
 800838e:	f04f 0900 	mov.w	r9, #0
 8008392:	9700      	str	r7, [sp, #0]
 8008394:	4633      	mov	r3, r6
 8008396:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008398:	4621      	mov	r1, r4
 800839a:	4628      	mov	r0, r5
 800839c:	f000 f9d2 	bl	8008744 <_printf_common>
 80083a0:	3001      	adds	r0, #1
 80083a2:	f040 808d 	bne.w	80084c0 <_printf_float+0x1d0>
 80083a6:	f04f 30ff 	mov.w	r0, #4294967295
 80083aa:	b00d      	add	sp, #52	@ 0x34
 80083ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083b0:	4642      	mov	r2, r8
 80083b2:	464b      	mov	r3, r9
 80083b4:	4640      	mov	r0, r8
 80083b6:	4649      	mov	r1, r9
 80083b8:	f7f8 fbd8 	bl	8000b6c <__aeabi_dcmpun>
 80083bc:	b140      	cbz	r0, 80083d0 <_printf_float+0xe0>
 80083be:	464b      	mov	r3, r9
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	bfbc      	itt	lt
 80083c4:	232d      	movlt	r3, #45	@ 0x2d
 80083c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80083ca:	4a7e      	ldr	r2, [pc, #504]	@ (80085c4 <_printf_float+0x2d4>)
 80083cc:	4b7e      	ldr	r3, [pc, #504]	@ (80085c8 <_printf_float+0x2d8>)
 80083ce:	e7d4      	b.n	800837a <_printf_float+0x8a>
 80083d0:	6863      	ldr	r3, [r4, #4]
 80083d2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80083d6:	9206      	str	r2, [sp, #24]
 80083d8:	1c5a      	adds	r2, r3, #1
 80083da:	d13b      	bne.n	8008454 <_printf_float+0x164>
 80083dc:	2306      	movs	r3, #6
 80083de:	6063      	str	r3, [r4, #4]
 80083e0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80083e4:	2300      	movs	r3, #0
 80083e6:	6022      	str	r2, [r4, #0]
 80083e8:	9303      	str	r3, [sp, #12]
 80083ea:	ab0a      	add	r3, sp, #40	@ 0x28
 80083ec:	e9cd a301 	strd	sl, r3, [sp, #4]
 80083f0:	ab09      	add	r3, sp, #36	@ 0x24
 80083f2:	9300      	str	r3, [sp, #0]
 80083f4:	6861      	ldr	r1, [r4, #4]
 80083f6:	ec49 8b10 	vmov	d0, r8, r9
 80083fa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80083fe:	4628      	mov	r0, r5
 8008400:	f7ff fed6 	bl	80081b0 <__cvt>
 8008404:	9b06      	ldr	r3, [sp, #24]
 8008406:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008408:	2b47      	cmp	r3, #71	@ 0x47
 800840a:	4680      	mov	r8, r0
 800840c:	d129      	bne.n	8008462 <_printf_float+0x172>
 800840e:	1cc8      	adds	r0, r1, #3
 8008410:	db02      	blt.n	8008418 <_printf_float+0x128>
 8008412:	6863      	ldr	r3, [r4, #4]
 8008414:	4299      	cmp	r1, r3
 8008416:	dd41      	ble.n	800849c <_printf_float+0x1ac>
 8008418:	f1aa 0a02 	sub.w	sl, sl, #2
 800841c:	fa5f fa8a 	uxtb.w	sl, sl
 8008420:	3901      	subs	r1, #1
 8008422:	4652      	mov	r2, sl
 8008424:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008428:	9109      	str	r1, [sp, #36]	@ 0x24
 800842a:	f7ff ff26 	bl	800827a <__exponent>
 800842e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008430:	1813      	adds	r3, r2, r0
 8008432:	2a01      	cmp	r2, #1
 8008434:	4681      	mov	r9, r0
 8008436:	6123      	str	r3, [r4, #16]
 8008438:	dc02      	bgt.n	8008440 <_printf_float+0x150>
 800843a:	6822      	ldr	r2, [r4, #0]
 800843c:	07d2      	lsls	r2, r2, #31
 800843e:	d501      	bpl.n	8008444 <_printf_float+0x154>
 8008440:	3301      	adds	r3, #1
 8008442:	6123      	str	r3, [r4, #16]
 8008444:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008448:	2b00      	cmp	r3, #0
 800844a:	d0a2      	beq.n	8008392 <_printf_float+0xa2>
 800844c:	232d      	movs	r3, #45	@ 0x2d
 800844e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008452:	e79e      	b.n	8008392 <_printf_float+0xa2>
 8008454:	9a06      	ldr	r2, [sp, #24]
 8008456:	2a47      	cmp	r2, #71	@ 0x47
 8008458:	d1c2      	bne.n	80083e0 <_printf_float+0xf0>
 800845a:	2b00      	cmp	r3, #0
 800845c:	d1c0      	bne.n	80083e0 <_printf_float+0xf0>
 800845e:	2301      	movs	r3, #1
 8008460:	e7bd      	b.n	80083de <_printf_float+0xee>
 8008462:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008466:	d9db      	bls.n	8008420 <_printf_float+0x130>
 8008468:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800846c:	d118      	bne.n	80084a0 <_printf_float+0x1b0>
 800846e:	2900      	cmp	r1, #0
 8008470:	6863      	ldr	r3, [r4, #4]
 8008472:	dd0b      	ble.n	800848c <_printf_float+0x19c>
 8008474:	6121      	str	r1, [r4, #16]
 8008476:	b913      	cbnz	r3, 800847e <_printf_float+0x18e>
 8008478:	6822      	ldr	r2, [r4, #0]
 800847a:	07d0      	lsls	r0, r2, #31
 800847c:	d502      	bpl.n	8008484 <_printf_float+0x194>
 800847e:	3301      	adds	r3, #1
 8008480:	440b      	add	r3, r1
 8008482:	6123      	str	r3, [r4, #16]
 8008484:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008486:	f04f 0900 	mov.w	r9, #0
 800848a:	e7db      	b.n	8008444 <_printf_float+0x154>
 800848c:	b913      	cbnz	r3, 8008494 <_printf_float+0x1a4>
 800848e:	6822      	ldr	r2, [r4, #0]
 8008490:	07d2      	lsls	r2, r2, #31
 8008492:	d501      	bpl.n	8008498 <_printf_float+0x1a8>
 8008494:	3302      	adds	r3, #2
 8008496:	e7f4      	b.n	8008482 <_printf_float+0x192>
 8008498:	2301      	movs	r3, #1
 800849a:	e7f2      	b.n	8008482 <_printf_float+0x192>
 800849c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80084a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084a2:	4299      	cmp	r1, r3
 80084a4:	db05      	blt.n	80084b2 <_printf_float+0x1c2>
 80084a6:	6823      	ldr	r3, [r4, #0]
 80084a8:	6121      	str	r1, [r4, #16]
 80084aa:	07d8      	lsls	r0, r3, #31
 80084ac:	d5ea      	bpl.n	8008484 <_printf_float+0x194>
 80084ae:	1c4b      	adds	r3, r1, #1
 80084b0:	e7e7      	b.n	8008482 <_printf_float+0x192>
 80084b2:	2900      	cmp	r1, #0
 80084b4:	bfd4      	ite	le
 80084b6:	f1c1 0202 	rsble	r2, r1, #2
 80084ba:	2201      	movgt	r2, #1
 80084bc:	4413      	add	r3, r2
 80084be:	e7e0      	b.n	8008482 <_printf_float+0x192>
 80084c0:	6823      	ldr	r3, [r4, #0]
 80084c2:	055a      	lsls	r2, r3, #21
 80084c4:	d407      	bmi.n	80084d6 <_printf_float+0x1e6>
 80084c6:	6923      	ldr	r3, [r4, #16]
 80084c8:	4642      	mov	r2, r8
 80084ca:	4631      	mov	r1, r6
 80084cc:	4628      	mov	r0, r5
 80084ce:	47b8      	blx	r7
 80084d0:	3001      	adds	r0, #1
 80084d2:	d12b      	bne.n	800852c <_printf_float+0x23c>
 80084d4:	e767      	b.n	80083a6 <_printf_float+0xb6>
 80084d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80084da:	f240 80dd 	bls.w	8008698 <_printf_float+0x3a8>
 80084de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80084e2:	2200      	movs	r2, #0
 80084e4:	2300      	movs	r3, #0
 80084e6:	f7f8 fb0f 	bl	8000b08 <__aeabi_dcmpeq>
 80084ea:	2800      	cmp	r0, #0
 80084ec:	d033      	beq.n	8008556 <_printf_float+0x266>
 80084ee:	4a37      	ldr	r2, [pc, #220]	@ (80085cc <_printf_float+0x2dc>)
 80084f0:	2301      	movs	r3, #1
 80084f2:	4631      	mov	r1, r6
 80084f4:	4628      	mov	r0, r5
 80084f6:	47b8      	blx	r7
 80084f8:	3001      	adds	r0, #1
 80084fa:	f43f af54 	beq.w	80083a6 <_printf_float+0xb6>
 80084fe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008502:	4543      	cmp	r3, r8
 8008504:	db02      	blt.n	800850c <_printf_float+0x21c>
 8008506:	6823      	ldr	r3, [r4, #0]
 8008508:	07d8      	lsls	r0, r3, #31
 800850a:	d50f      	bpl.n	800852c <_printf_float+0x23c>
 800850c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008510:	4631      	mov	r1, r6
 8008512:	4628      	mov	r0, r5
 8008514:	47b8      	blx	r7
 8008516:	3001      	adds	r0, #1
 8008518:	f43f af45 	beq.w	80083a6 <_printf_float+0xb6>
 800851c:	f04f 0900 	mov.w	r9, #0
 8008520:	f108 38ff 	add.w	r8, r8, #4294967295
 8008524:	f104 0a1a 	add.w	sl, r4, #26
 8008528:	45c8      	cmp	r8, r9
 800852a:	dc09      	bgt.n	8008540 <_printf_float+0x250>
 800852c:	6823      	ldr	r3, [r4, #0]
 800852e:	079b      	lsls	r3, r3, #30
 8008530:	f100 8103 	bmi.w	800873a <_printf_float+0x44a>
 8008534:	68e0      	ldr	r0, [r4, #12]
 8008536:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008538:	4298      	cmp	r0, r3
 800853a:	bfb8      	it	lt
 800853c:	4618      	movlt	r0, r3
 800853e:	e734      	b.n	80083aa <_printf_float+0xba>
 8008540:	2301      	movs	r3, #1
 8008542:	4652      	mov	r2, sl
 8008544:	4631      	mov	r1, r6
 8008546:	4628      	mov	r0, r5
 8008548:	47b8      	blx	r7
 800854a:	3001      	adds	r0, #1
 800854c:	f43f af2b 	beq.w	80083a6 <_printf_float+0xb6>
 8008550:	f109 0901 	add.w	r9, r9, #1
 8008554:	e7e8      	b.n	8008528 <_printf_float+0x238>
 8008556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008558:	2b00      	cmp	r3, #0
 800855a:	dc39      	bgt.n	80085d0 <_printf_float+0x2e0>
 800855c:	4a1b      	ldr	r2, [pc, #108]	@ (80085cc <_printf_float+0x2dc>)
 800855e:	2301      	movs	r3, #1
 8008560:	4631      	mov	r1, r6
 8008562:	4628      	mov	r0, r5
 8008564:	47b8      	blx	r7
 8008566:	3001      	adds	r0, #1
 8008568:	f43f af1d 	beq.w	80083a6 <_printf_float+0xb6>
 800856c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008570:	ea59 0303 	orrs.w	r3, r9, r3
 8008574:	d102      	bne.n	800857c <_printf_float+0x28c>
 8008576:	6823      	ldr	r3, [r4, #0]
 8008578:	07d9      	lsls	r1, r3, #31
 800857a:	d5d7      	bpl.n	800852c <_printf_float+0x23c>
 800857c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008580:	4631      	mov	r1, r6
 8008582:	4628      	mov	r0, r5
 8008584:	47b8      	blx	r7
 8008586:	3001      	adds	r0, #1
 8008588:	f43f af0d 	beq.w	80083a6 <_printf_float+0xb6>
 800858c:	f04f 0a00 	mov.w	sl, #0
 8008590:	f104 0b1a 	add.w	fp, r4, #26
 8008594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008596:	425b      	negs	r3, r3
 8008598:	4553      	cmp	r3, sl
 800859a:	dc01      	bgt.n	80085a0 <_printf_float+0x2b0>
 800859c:	464b      	mov	r3, r9
 800859e:	e793      	b.n	80084c8 <_printf_float+0x1d8>
 80085a0:	2301      	movs	r3, #1
 80085a2:	465a      	mov	r2, fp
 80085a4:	4631      	mov	r1, r6
 80085a6:	4628      	mov	r0, r5
 80085a8:	47b8      	blx	r7
 80085aa:	3001      	adds	r0, #1
 80085ac:	f43f aefb 	beq.w	80083a6 <_printf_float+0xb6>
 80085b0:	f10a 0a01 	add.w	sl, sl, #1
 80085b4:	e7ee      	b.n	8008594 <_printf_float+0x2a4>
 80085b6:	bf00      	nop
 80085b8:	7fefffff 	.word	0x7fefffff
 80085bc:	0800b3a0 	.word	0x0800b3a0
 80085c0:	0800b3a4 	.word	0x0800b3a4
 80085c4:	0800b3a8 	.word	0x0800b3a8
 80085c8:	0800b3ac 	.word	0x0800b3ac
 80085cc:	0800b3b0 	.word	0x0800b3b0
 80085d0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80085d2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80085d6:	4553      	cmp	r3, sl
 80085d8:	bfa8      	it	ge
 80085da:	4653      	movge	r3, sl
 80085dc:	2b00      	cmp	r3, #0
 80085de:	4699      	mov	r9, r3
 80085e0:	dc36      	bgt.n	8008650 <_printf_float+0x360>
 80085e2:	f04f 0b00 	mov.w	fp, #0
 80085e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80085ea:	f104 021a 	add.w	r2, r4, #26
 80085ee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80085f0:	9306      	str	r3, [sp, #24]
 80085f2:	eba3 0309 	sub.w	r3, r3, r9
 80085f6:	455b      	cmp	r3, fp
 80085f8:	dc31      	bgt.n	800865e <_printf_float+0x36e>
 80085fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085fc:	459a      	cmp	sl, r3
 80085fe:	dc3a      	bgt.n	8008676 <_printf_float+0x386>
 8008600:	6823      	ldr	r3, [r4, #0]
 8008602:	07da      	lsls	r2, r3, #31
 8008604:	d437      	bmi.n	8008676 <_printf_float+0x386>
 8008606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008608:	ebaa 0903 	sub.w	r9, sl, r3
 800860c:	9b06      	ldr	r3, [sp, #24]
 800860e:	ebaa 0303 	sub.w	r3, sl, r3
 8008612:	4599      	cmp	r9, r3
 8008614:	bfa8      	it	ge
 8008616:	4699      	movge	r9, r3
 8008618:	f1b9 0f00 	cmp.w	r9, #0
 800861c:	dc33      	bgt.n	8008686 <_printf_float+0x396>
 800861e:	f04f 0800 	mov.w	r8, #0
 8008622:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008626:	f104 0b1a 	add.w	fp, r4, #26
 800862a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800862c:	ebaa 0303 	sub.w	r3, sl, r3
 8008630:	eba3 0309 	sub.w	r3, r3, r9
 8008634:	4543      	cmp	r3, r8
 8008636:	f77f af79 	ble.w	800852c <_printf_float+0x23c>
 800863a:	2301      	movs	r3, #1
 800863c:	465a      	mov	r2, fp
 800863e:	4631      	mov	r1, r6
 8008640:	4628      	mov	r0, r5
 8008642:	47b8      	blx	r7
 8008644:	3001      	adds	r0, #1
 8008646:	f43f aeae 	beq.w	80083a6 <_printf_float+0xb6>
 800864a:	f108 0801 	add.w	r8, r8, #1
 800864e:	e7ec      	b.n	800862a <_printf_float+0x33a>
 8008650:	4642      	mov	r2, r8
 8008652:	4631      	mov	r1, r6
 8008654:	4628      	mov	r0, r5
 8008656:	47b8      	blx	r7
 8008658:	3001      	adds	r0, #1
 800865a:	d1c2      	bne.n	80085e2 <_printf_float+0x2f2>
 800865c:	e6a3      	b.n	80083a6 <_printf_float+0xb6>
 800865e:	2301      	movs	r3, #1
 8008660:	4631      	mov	r1, r6
 8008662:	4628      	mov	r0, r5
 8008664:	9206      	str	r2, [sp, #24]
 8008666:	47b8      	blx	r7
 8008668:	3001      	adds	r0, #1
 800866a:	f43f ae9c 	beq.w	80083a6 <_printf_float+0xb6>
 800866e:	9a06      	ldr	r2, [sp, #24]
 8008670:	f10b 0b01 	add.w	fp, fp, #1
 8008674:	e7bb      	b.n	80085ee <_printf_float+0x2fe>
 8008676:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800867a:	4631      	mov	r1, r6
 800867c:	4628      	mov	r0, r5
 800867e:	47b8      	blx	r7
 8008680:	3001      	adds	r0, #1
 8008682:	d1c0      	bne.n	8008606 <_printf_float+0x316>
 8008684:	e68f      	b.n	80083a6 <_printf_float+0xb6>
 8008686:	9a06      	ldr	r2, [sp, #24]
 8008688:	464b      	mov	r3, r9
 800868a:	4442      	add	r2, r8
 800868c:	4631      	mov	r1, r6
 800868e:	4628      	mov	r0, r5
 8008690:	47b8      	blx	r7
 8008692:	3001      	adds	r0, #1
 8008694:	d1c3      	bne.n	800861e <_printf_float+0x32e>
 8008696:	e686      	b.n	80083a6 <_printf_float+0xb6>
 8008698:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800869c:	f1ba 0f01 	cmp.w	sl, #1
 80086a0:	dc01      	bgt.n	80086a6 <_printf_float+0x3b6>
 80086a2:	07db      	lsls	r3, r3, #31
 80086a4:	d536      	bpl.n	8008714 <_printf_float+0x424>
 80086a6:	2301      	movs	r3, #1
 80086a8:	4642      	mov	r2, r8
 80086aa:	4631      	mov	r1, r6
 80086ac:	4628      	mov	r0, r5
 80086ae:	47b8      	blx	r7
 80086b0:	3001      	adds	r0, #1
 80086b2:	f43f ae78 	beq.w	80083a6 <_printf_float+0xb6>
 80086b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086ba:	4631      	mov	r1, r6
 80086bc:	4628      	mov	r0, r5
 80086be:	47b8      	blx	r7
 80086c0:	3001      	adds	r0, #1
 80086c2:	f43f ae70 	beq.w	80083a6 <_printf_float+0xb6>
 80086c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80086ca:	2200      	movs	r2, #0
 80086cc:	2300      	movs	r3, #0
 80086ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086d2:	f7f8 fa19 	bl	8000b08 <__aeabi_dcmpeq>
 80086d6:	b9c0      	cbnz	r0, 800870a <_printf_float+0x41a>
 80086d8:	4653      	mov	r3, sl
 80086da:	f108 0201 	add.w	r2, r8, #1
 80086de:	4631      	mov	r1, r6
 80086e0:	4628      	mov	r0, r5
 80086e2:	47b8      	blx	r7
 80086e4:	3001      	adds	r0, #1
 80086e6:	d10c      	bne.n	8008702 <_printf_float+0x412>
 80086e8:	e65d      	b.n	80083a6 <_printf_float+0xb6>
 80086ea:	2301      	movs	r3, #1
 80086ec:	465a      	mov	r2, fp
 80086ee:	4631      	mov	r1, r6
 80086f0:	4628      	mov	r0, r5
 80086f2:	47b8      	blx	r7
 80086f4:	3001      	adds	r0, #1
 80086f6:	f43f ae56 	beq.w	80083a6 <_printf_float+0xb6>
 80086fa:	f108 0801 	add.w	r8, r8, #1
 80086fe:	45d0      	cmp	r8, sl
 8008700:	dbf3      	blt.n	80086ea <_printf_float+0x3fa>
 8008702:	464b      	mov	r3, r9
 8008704:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008708:	e6df      	b.n	80084ca <_printf_float+0x1da>
 800870a:	f04f 0800 	mov.w	r8, #0
 800870e:	f104 0b1a 	add.w	fp, r4, #26
 8008712:	e7f4      	b.n	80086fe <_printf_float+0x40e>
 8008714:	2301      	movs	r3, #1
 8008716:	4642      	mov	r2, r8
 8008718:	e7e1      	b.n	80086de <_printf_float+0x3ee>
 800871a:	2301      	movs	r3, #1
 800871c:	464a      	mov	r2, r9
 800871e:	4631      	mov	r1, r6
 8008720:	4628      	mov	r0, r5
 8008722:	47b8      	blx	r7
 8008724:	3001      	adds	r0, #1
 8008726:	f43f ae3e 	beq.w	80083a6 <_printf_float+0xb6>
 800872a:	f108 0801 	add.w	r8, r8, #1
 800872e:	68e3      	ldr	r3, [r4, #12]
 8008730:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008732:	1a5b      	subs	r3, r3, r1
 8008734:	4543      	cmp	r3, r8
 8008736:	dcf0      	bgt.n	800871a <_printf_float+0x42a>
 8008738:	e6fc      	b.n	8008534 <_printf_float+0x244>
 800873a:	f04f 0800 	mov.w	r8, #0
 800873e:	f104 0919 	add.w	r9, r4, #25
 8008742:	e7f4      	b.n	800872e <_printf_float+0x43e>

08008744 <_printf_common>:
 8008744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008748:	4616      	mov	r6, r2
 800874a:	4698      	mov	r8, r3
 800874c:	688a      	ldr	r2, [r1, #8]
 800874e:	690b      	ldr	r3, [r1, #16]
 8008750:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008754:	4293      	cmp	r3, r2
 8008756:	bfb8      	it	lt
 8008758:	4613      	movlt	r3, r2
 800875a:	6033      	str	r3, [r6, #0]
 800875c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008760:	4607      	mov	r7, r0
 8008762:	460c      	mov	r4, r1
 8008764:	b10a      	cbz	r2, 800876a <_printf_common+0x26>
 8008766:	3301      	adds	r3, #1
 8008768:	6033      	str	r3, [r6, #0]
 800876a:	6823      	ldr	r3, [r4, #0]
 800876c:	0699      	lsls	r1, r3, #26
 800876e:	bf42      	ittt	mi
 8008770:	6833      	ldrmi	r3, [r6, #0]
 8008772:	3302      	addmi	r3, #2
 8008774:	6033      	strmi	r3, [r6, #0]
 8008776:	6825      	ldr	r5, [r4, #0]
 8008778:	f015 0506 	ands.w	r5, r5, #6
 800877c:	d106      	bne.n	800878c <_printf_common+0x48>
 800877e:	f104 0a19 	add.w	sl, r4, #25
 8008782:	68e3      	ldr	r3, [r4, #12]
 8008784:	6832      	ldr	r2, [r6, #0]
 8008786:	1a9b      	subs	r3, r3, r2
 8008788:	42ab      	cmp	r3, r5
 800878a:	dc26      	bgt.n	80087da <_printf_common+0x96>
 800878c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008790:	6822      	ldr	r2, [r4, #0]
 8008792:	3b00      	subs	r3, #0
 8008794:	bf18      	it	ne
 8008796:	2301      	movne	r3, #1
 8008798:	0692      	lsls	r2, r2, #26
 800879a:	d42b      	bmi.n	80087f4 <_printf_common+0xb0>
 800879c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80087a0:	4641      	mov	r1, r8
 80087a2:	4638      	mov	r0, r7
 80087a4:	47c8      	blx	r9
 80087a6:	3001      	adds	r0, #1
 80087a8:	d01e      	beq.n	80087e8 <_printf_common+0xa4>
 80087aa:	6823      	ldr	r3, [r4, #0]
 80087ac:	6922      	ldr	r2, [r4, #16]
 80087ae:	f003 0306 	and.w	r3, r3, #6
 80087b2:	2b04      	cmp	r3, #4
 80087b4:	bf02      	ittt	eq
 80087b6:	68e5      	ldreq	r5, [r4, #12]
 80087b8:	6833      	ldreq	r3, [r6, #0]
 80087ba:	1aed      	subeq	r5, r5, r3
 80087bc:	68a3      	ldr	r3, [r4, #8]
 80087be:	bf0c      	ite	eq
 80087c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087c4:	2500      	movne	r5, #0
 80087c6:	4293      	cmp	r3, r2
 80087c8:	bfc4      	itt	gt
 80087ca:	1a9b      	subgt	r3, r3, r2
 80087cc:	18ed      	addgt	r5, r5, r3
 80087ce:	2600      	movs	r6, #0
 80087d0:	341a      	adds	r4, #26
 80087d2:	42b5      	cmp	r5, r6
 80087d4:	d11a      	bne.n	800880c <_printf_common+0xc8>
 80087d6:	2000      	movs	r0, #0
 80087d8:	e008      	b.n	80087ec <_printf_common+0xa8>
 80087da:	2301      	movs	r3, #1
 80087dc:	4652      	mov	r2, sl
 80087de:	4641      	mov	r1, r8
 80087e0:	4638      	mov	r0, r7
 80087e2:	47c8      	blx	r9
 80087e4:	3001      	adds	r0, #1
 80087e6:	d103      	bne.n	80087f0 <_printf_common+0xac>
 80087e8:	f04f 30ff 	mov.w	r0, #4294967295
 80087ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087f0:	3501      	adds	r5, #1
 80087f2:	e7c6      	b.n	8008782 <_printf_common+0x3e>
 80087f4:	18e1      	adds	r1, r4, r3
 80087f6:	1c5a      	adds	r2, r3, #1
 80087f8:	2030      	movs	r0, #48	@ 0x30
 80087fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80087fe:	4422      	add	r2, r4
 8008800:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008804:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008808:	3302      	adds	r3, #2
 800880a:	e7c7      	b.n	800879c <_printf_common+0x58>
 800880c:	2301      	movs	r3, #1
 800880e:	4622      	mov	r2, r4
 8008810:	4641      	mov	r1, r8
 8008812:	4638      	mov	r0, r7
 8008814:	47c8      	blx	r9
 8008816:	3001      	adds	r0, #1
 8008818:	d0e6      	beq.n	80087e8 <_printf_common+0xa4>
 800881a:	3601      	adds	r6, #1
 800881c:	e7d9      	b.n	80087d2 <_printf_common+0x8e>
	...

08008820 <_printf_i>:
 8008820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008824:	7e0f      	ldrb	r7, [r1, #24]
 8008826:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008828:	2f78      	cmp	r7, #120	@ 0x78
 800882a:	4691      	mov	r9, r2
 800882c:	4680      	mov	r8, r0
 800882e:	460c      	mov	r4, r1
 8008830:	469a      	mov	sl, r3
 8008832:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008836:	d807      	bhi.n	8008848 <_printf_i+0x28>
 8008838:	2f62      	cmp	r7, #98	@ 0x62
 800883a:	d80a      	bhi.n	8008852 <_printf_i+0x32>
 800883c:	2f00      	cmp	r7, #0
 800883e:	f000 80d2 	beq.w	80089e6 <_printf_i+0x1c6>
 8008842:	2f58      	cmp	r7, #88	@ 0x58
 8008844:	f000 80b9 	beq.w	80089ba <_printf_i+0x19a>
 8008848:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800884c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008850:	e03a      	b.n	80088c8 <_printf_i+0xa8>
 8008852:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008856:	2b15      	cmp	r3, #21
 8008858:	d8f6      	bhi.n	8008848 <_printf_i+0x28>
 800885a:	a101      	add	r1, pc, #4	@ (adr r1, 8008860 <_printf_i+0x40>)
 800885c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008860:	080088b9 	.word	0x080088b9
 8008864:	080088cd 	.word	0x080088cd
 8008868:	08008849 	.word	0x08008849
 800886c:	08008849 	.word	0x08008849
 8008870:	08008849 	.word	0x08008849
 8008874:	08008849 	.word	0x08008849
 8008878:	080088cd 	.word	0x080088cd
 800887c:	08008849 	.word	0x08008849
 8008880:	08008849 	.word	0x08008849
 8008884:	08008849 	.word	0x08008849
 8008888:	08008849 	.word	0x08008849
 800888c:	080089cd 	.word	0x080089cd
 8008890:	080088f7 	.word	0x080088f7
 8008894:	08008987 	.word	0x08008987
 8008898:	08008849 	.word	0x08008849
 800889c:	08008849 	.word	0x08008849
 80088a0:	080089ef 	.word	0x080089ef
 80088a4:	08008849 	.word	0x08008849
 80088a8:	080088f7 	.word	0x080088f7
 80088ac:	08008849 	.word	0x08008849
 80088b0:	08008849 	.word	0x08008849
 80088b4:	0800898f 	.word	0x0800898f
 80088b8:	6833      	ldr	r3, [r6, #0]
 80088ba:	1d1a      	adds	r2, r3, #4
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	6032      	str	r2, [r6, #0]
 80088c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80088c8:	2301      	movs	r3, #1
 80088ca:	e09d      	b.n	8008a08 <_printf_i+0x1e8>
 80088cc:	6833      	ldr	r3, [r6, #0]
 80088ce:	6820      	ldr	r0, [r4, #0]
 80088d0:	1d19      	adds	r1, r3, #4
 80088d2:	6031      	str	r1, [r6, #0]
 80088d4:	0606      	lsls	r6, r0, #24
 80088d6:	d501      	bpl.n	80088dc <_printf_i+0xbc>
 80088d8:	681d      	ldr	r5, [r3, #0]
 80088da:	e003      	b.n	80088e4 <_printf_i+0xc4>
 80088dc:	0645      	lsls	r5, r0, #25
 80088de:	d5fb      	bpl.n	80088d8 <_printf_i+0xb8>
 80088e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80088e4:	2d00      	cmp	r5, #0
 80088e6:	da03      	bge.n	80088f0 <_printf_i+0xd0>
 80088e8:	232d      	movs	r3, #45	@ 0x2d
 80088ea:	426d      	negs	r5, r5
 80088ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088f0:	4859      	ldr	r0, [pc, #356]	@ (8008a58 <_printf_i+0x238>)
 80088f2:	230a      	movs	r3, #10
 80088f4:	e011      	b.n	800891a <_printf_i+0xfa>
 80088f6:	6821      	ldr	r1, [r4, #0]
 80088f8:	6833      	ldr	r3, [r6, #0]
 80088fa:	0608      	lsls	r0, r1, #24
 80088fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8008900:	d402      	bmi.n	8008908 <_printf_i+0xe8>
 8008902:	0649      	lsls	r1, r1, #25
 8008904:	bf48      	it	mi
 8008906:	b2ad      	uxthmi	r5, r5
 8008908:	2f6f      	cmp	r7, #111	@ 0x6f
 800890a:	4853      	ldr	r0, [pc, #332]	@ (8008a58 <_printf_i+0x238>)
 800890c:	6033      	str	r3, [r6, #0]
 800890e:	bf14      	ite	ne
 8008910:	230a      	movne	r3, #10
 8008912:	2308      	moveq	r3, #8
 8008914:	2100      	movs	r1, #0
 8008916:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800891a:	6866      	ldr	r6, [r4, #4]
 800891c:	60a6      	str	r6, [r4, #8]
 800891e:	2e00      	cmp	r6, #0
 8008920:	bfa2      	ittt	ge
 8008922:	6821      	ldrge	r1, [r4, #0]
 8008924:	f021 0104 	bicge.w	r1, r1, #4
 8008928:	6021      	strge	r1, [r4, #0]
 800892a:	b90d      	cbnz	r5, 8008930 <_printf_i+0x110>
 800892c:	2e00      	cmp	r6, #0
 800892e:	d04b      	beq.n	80089c8 <_printf_i+0x1a8>
 8008930:	4616      	mov	r6, r2
 8008932:	fbb5 f1f3 	udiv	r1, r5, r3
 8008936:	fb03 5711 	mls	r7, r3, r1, r5
 800893a:	5dc7      	ldrb	r7, [r0, r7]
 800893c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008940:	462f      	mov	r7, r5
 8008942:	42bb      	cmp	r3, r7
 8008944:	460d      	mov	r5, r1
 8008946:	d9f4      	bls.n	8008932 <_printf_i+0x112>
 8008948:	2b08      	cmp	r3, #8
 800894a:	d10b      	bne.n	8008964 <_printf_i+0x144>
 800894c:	6823      	ldr	r3, [r4, #0]
 800894e:	07df      	lsls	r7, r3, #31
 8008950:	d508      	bpl.n	8008964 <_printf_i+0x144>
 8008952:	6923      	ldr	r3, [r4, #16]
 8008954:	6861      	ldr	r1, [r4, #4]
 8008956:	4299      	cmp	r1, r3
 8008958:	bfde      	ittt	le
 800895a:	2330      	movle	r3, #48	@ 0x30
 800895c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008960:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008964:	1b92      	subs	r2, r2, r6
 8008966:	6122      	str	r2, [r4, #16]
 8008968:	f8cd a000 	str.w	sl, [sp]
 800896c:	464b      	mov	r3, r9
 800896e:	aa03      	add	r2, sp, #12
 8008970:	4621      	mov	r1, r4
 8008972:	4640      	mov	r0, r8
 8008974:	f7ff fee6 	bl	8008744 <_printf_common>
 8008978:	3001      	adds	r0, #1
 800897a:	d14a      	bne.n	8008a12 <_printf_i+0x1f2>
 800897c:	f04f 30ff 	mov.w	r0, #4294967295
 8008980:	b004      	add	sp, #16
 8008982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008986:	6823      	ldr	r3, [r4, #0]
 8008988:	f043 0320 	orr.w	r3, r3, #32
 800898c:	6023      	str	r3, [r4, #0]
 800898e:	4833      	ldr	r0, [pc, #204]	@ (8008a5c <_printf_i+0x23c>)
 8008990:	2778      	movs	r7, #120	@ 0x78
 8008992:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008996:	6823      	ldr	r3, [r4, #0]
 8008998:	6831      	ldr	r1, [r6, #0]
 800899a:	061f      	lsls	r7, r3, #24
 800899c:	f851 5b04 	ldr.w	r5, [r1], #4
 80089a0:	d402      	bmi.n	80089a8 <_printf_i+0x188>
 80089a2:	065f      	lsls	r7, r3, #25
 80089a4:	bf48      	it	mi
 80089a6:	b2ad      	uxthmi	r5, r5
 80089a8:	6031      	str	r1, [r6, #0]
 80089aa:	07d9      	lsls	r1, r3, #31
 80089ac:	bf44      	itt	mi
 80089ae:	f043 0320 	orrmi.w	r3, r3, #32
 80089b2:	6023      	strmi	r3, [r4, #0]
 80089b4:	b11d      	cbz	r5, 80089be <_printf_i+0x19e>
 80089b6:	2310      	movs	r3, #16
 80089b8:	e7ac      	b.n	8008914 <_printf_i+0xf4>
 80089ba:	4827      	ldr	r0, [pc, #156]	@ (8008a58 <_printf_i+0x238>)
 80089bc:	e7e9      	b.n	8008992 <_printf_i+0x172>
 80089be:	6823      	ldr	r3, [r4, #0]
 80089c0:	f023 0320 	bic.w	r3, r3, #32
 80089c4:	6023      	str	r3, [r4, #0]
 80089c6:	e7f6      	b.n	80089b6 <_printf_i+0x196>
 80089c8:	4616      	mov	r6, r2
 80089ca:	e7bd      	b.n	8008948 <_printf_i+0x128>
 80089cc:	6833      	ldr	r3, [r6, #0]
 80089ce:	6825      	ldr	r5, [r4, #0]
 80089d0:	6961      	ldr	r1, [r4, #20]
 80089d2:	1d18      	adds	r0, r3, #4
 80089d4:	6030      	str	r0, [r6, #0]
 80089d6:	062e      	lsls	r6, r5, #24
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	d501      	bpl.n	80089e0 <_printf_i+0x1c0>
 80089dc:	6019      	str	r1, [r3, #0]
 80089de:	e002      	b.n	80089e6 <_printf_i+0x1c6>
 80089e0:	0668      	lsls	r0, r5, #25
 80089e2:	d5fb      	bpl.n	80089dc <_printf_i+0x1bc>
 80089e4:	8019      	strh	r1, [r3, #0]
 80089e6:	2300      	movs	r3, #0
 80089e8:	6123      	str	r3, [r4, #16]
 80089ea:	4616      	mov	r6, r2
 80089ec:	e7bc      	b.n	8008968 <_printf_i+0x148>
 80089ee:	6833      	ldr	r3, [r6, #0]
 80089f0:	1d1a      	adds	r2, r3, #4
 80089f2:	6032      	str	r2, [r6, #0]
 80089f4:	681e      	ldr	r6, [r3, #0]
 80089f6:	6862      	ldr	r2, [r4, #4]
 80089f8:	2100      	movs	r1, #0
 80089fa:	4630      	mov	r0, r6
 80089fc:	f7f7 fc08 	bl	8000210 <memchr>
 8008a00:	b108      	cbz	r0, 8008a06 <_printf_i+0x1e6>
 8008a02:	1b80      	subs	r0, r0, r6
 8008a04:	6060      	str	r0, [r4, #4]
 8008a06:	6863      	ldr	r3, [r4, #4]
 8008a08:	6123      	str	r3, [r4, #16]
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a10:	e7aa      	b.n	8008968 <_printf_i+0x148>
 8008a12:	6923      	ldr	r3, [r4, #16]
 8008a14:	4632      	mov	r2, r6
 8008a16:	4649      	mov	r1, r9
 8008a18:	4640      	mov	r0, r8
 8008a1a:	47d0      	blx	sl
 8008a1c:	3001      	adds	r0, #1
 8008a1e:	d0ad      	beq.n	800897c <_printf_i+0x15c>
 8008a20:	6823      	ldr	r3, [r4, #0]
 8008a22:	079b      	lsls	r3, r3, #30
 8008a24:	d413      	bmi.n	8008a4e <_printf_i+0x22e>
 8008a26:	68e0      	ldr	r0, [r4, #12]
 8008a28:	9b03      	ldr	r3, [sp, #12]
 8008a2a:	4298      	cmp	r0, r3
 8008a2c:	bfb8      	it	lt
 8008a2e:	4618      	movlt	r0, r3
 8008a30:	e7a6      	b.n	8008980 <_printf_i+0x160>
 8008a32:	2301      	movs	r3, #1
 8008a34:	4632      	mov	r2, r6
 8008a36:	4649      	mov	r1, r9
 8008a38:	4640      	mov	r0, r8
 8008a3a:	47d0      	blx	sl
 8008a3c:	3001      	adds	r0, #1
 8008a3e:	d09d      	beq.n	800897c <_printf_i+0x15c>
 8008a40:	3501      	adds	r5, #1
 8008a42:	68e3      	ldr	r3, [r4, #12]
 8008a44:	9903      	ldr	r1, [sp, #12]
 8008a46:	1a5b      	subs	r3, r3, r1
 8008a48:	42ab      	cmp	r3, r5
 8008a4a:	dcf2      	bgt.n	8008a32 <_printf_i+0x212>
 8008a4c:	e7eb      	b.n	8008a26 <_printf_i+0x206>
 8008a4e:	2500      	movs	r5, #0
 8008a50:	f104 0619 	add.w	r6, r4, #25
 8008a54:	e7f5      	b.n	8008a42 <_printf_i+0x222>
 8008a56:	bf00      	nop
 8008a58:	0800b3b2 	.word	0x0800b3b2
 8008a5c:	0800b3c3 	.word	0x0800b3c3

08008a60 <std>:
 8008a60:	2300      	movs	r3, #0
 8008a62:	b510      	push	{r4, lr}
 8008a64:	4604      	mov	r4, r0
 8008a66:	e9c0 3300 	strd	r3, r3, [r0]
 8008a6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a6e:	6083      	str	r3, [r0, #8]
 8008a70:	8181      	strh	r1, [r0, #12]
 8008a72:	6643      	str	r3, [r0, #100]	@ 0x64
 8008a74:	81c2      	strh	r2, [r0, #14]
 8008a76:	6183      	str	r3, [r0, #24]
 8008a78:	4619      	mov	r1, r3
 8008a7a:	2208      	movs	r2, #8
 8008a7c:	305c      	adds	r0, #92	@ 0x5c
 8008a7e:	f000 f928 	bl	8008cd2 <memset>
 8008a82:	4b0d      	ldr	r3, [pc, #52]	@ (8008ab8 <std+0x58>)
 8008a84:	6263      	str	r3, [r4, #36]	@ 0x24
 8008a86:	4b0d      	ldr	r3, [pc, #52]	@ (8008abc <std+0x5c>)
 8008a88:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8008ac0 <std+0x60>)
 8008a8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8008ac4 <std+0x64>)
 8008a90:	6323      	str	r3, [r4, #48]	@ 0x30
 8008a92:	4b0d      	ldr	r3, [pc, #52]	@ (8008ac8 <std+0x68>)
 8008a94:	6224      	str	r4, [r4, #32]
 8008a96:	429c      	cmp	r4, r3
 8008a98:	d006      	beq.n	8008aa8 <std+0x48>
 8008a9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008a9e:	4294      	cmp	r4, r2
 8008aa0:	d002      	beq.n	8008aa8 <std+0x48>
 8008aa2:	33d0      	adds	r3, #208	@ 0xd0
 8008aa4:	429c      	cmp	r4, r3
 8008aa6:	d105      	bne.n	8008ab4 <std+0x54>
 8008aa8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ab0:	f000 b98c 	b.w	8008dcc <__retarget_lock_init_recursive>
 8008ab4:	bd10      	pop	{r4, pc}
 8008ab6:	bf00      	nop
 8008ab8:	08008c4d 	.word	0x08008c4d
 8008abc:	08008c6f 	.word	0x08008c6f
 8008ac0:	08008ca7 	.word	0x08008ca7
 8008ac4:	08008ccb 	.word	0x08008ccb
 8008ac8:	200023a0 	.word	0x200023a0

08008acc <stdio_exit_handler>:
 8008acc:	4a02      	ldr	r2, [pc, #8]	@ (8008ad8 <stdio_exit_handler+0xc>)
 8008ace:	4903      	ldr	r1, [pc, #12]	@ (8008adc <stdio_exit_handler+0x10>)
 8008ad0:	4803      	ldr	r0, [pc, #12]	@ (8008ae0 <stdio_exit_handler+0x14>)
 8008ad2:	f000 b869 	b.w	8008ba8 <_fwalk_sglue>
 8008ad6:	bf00      	nop
 8008ad8:	20000028 	.word	0x20000028
 8008adc:	0800a72d 	.word	0x0800a72d
 8008ae0:	20000038 	.word	0x20000038

08008ae4 <cleanup_stdio>:
 8008ae4:	6841      	ldr	r1, [r0, #4]
 8008ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8008b18 <cleanup_stdio+0x34>)
 8008ae8:	4299      	cmp	r1, r3
 8008aea:	b510      	push	{r4, lr}
 8008aec:	4604      	mov	r4, r0
 8008aee:	d001      	beq.n	8008af4 <cleanup_stdio+0x10>
 8008af0:	f001 fe1c 	bl	800a72c <_fflush_r>
 8008af4:	68a1      	ldr	r1, [r4, #8]
 8008af6:	4b09      	ldr	r3, [pc, #36]	@ (8008b1c <cleanup_stdio+0x38>)
 8008af8:	4299      	cmp	r1, r3
 8008afa:	d002      	beq.n	8008b02 <cleanup_stdio+0x1e>
 8008afc:	4620      	mov	r0, r4
 8008afe:	f001 fe15 	bl	800a72c <_fflush_r>
 8008b02:	68e1      	ldr	r1, [r4, #12]
 8008b04:	4b06      	ldr	r3, [pc, #24]	@ (8008b20 <cleanup_stdio+0x3c>)
 8008b06:	4299      	cmp	r1, r3
 8008b08:	d004      	beq.n	8008b14 <cleanup_stdio+0x30>
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b10:	f001 be0c 	b.w	800a72c <_fflush_r>
 8008b14:	bd10      	pop	{r4, pc}
 8008b16:	bf00      	nop
 8008b18:	200023a0 	.word	0x200023a0
 8008b1c:	20002408 	.word	0x20002408
 8008b20:	20002470 	.word	0x20002470

08008b24 <global_stdio_init.part.0>:
 8008b24:	b510      	push	{r4, lr}
 8008b26:	4b0b      	ldr	r3, [pc, #44]	@ (8008b54 <global_stdio_init.part.0+0x30>)
 8008b28:	4c0b      	ldr	r4, [pc, #44]	@ (8008b58 <global_stdio_init.part.0+0x34>)
 8008b2a:	4a0c      	ldr	r2, [pc, #48]	@ (8008b5c <global_stdio_init.part.0+0x38>)
 8008b2c:	601a      	str	r2, [r3, #0]
 8008b2e:	4620      	mov	r0, r4
 8008b30:	2200      	movs	r2, #0
 8008b32:	2104      	movs	r1, #4
 8008b34:	f7ff ff94 	bl	8008a60 <std>
 8008b38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	2109      	movs	r1, #9
 8008b40:	f7ff ff8e 	bl	8008a60 <std>
 8008b44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008b48:	2202      	movs	r2, #2
 8008b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b4e:	2112      	movs	r1, #18
 8008b50:	f7ff bf86 	b.w	8008a60 <std>
 8008b54:	200024d8 	.word	0x200024d8
 8008b58:	200023a0 	.word	0x200023a0
 8008b5c:	08008acd 	.word	0x08008acd

08008b60 <__sfp_lock_acquire>:
 8008b60:	4801      	ldr	r0, [pc, #4]	@ (8008b68 <__sfp_lock_acquire+0x8>)
 8008b62:	f000 b934 	b.w	8008dce <__retarget_lock_acquire_recursive>
 8008b66:	bf00      	nop
 8008b68:	200024e1 	.word	0x200024e1

08008b6c <__sfp_lock_release>:
 8008b6c:	4801      	ldr	r0, [pc, #4]	@ (8008b74 <__sfp_lock_release+0x8>)
 8008b6e:	f000 b92f 	b.w	8008dd0 <__retarget_lock_release_recursive>
 8008b72:	bf00      	nop
 8008b74:	200024e1 	.word	0x200024e1

08008b78 <__sinit>:
 8008b78:	b510      	push	{r4, lr}
 8008b7a:	4604      	mov	r4, r0
 8008b7c:	f7ff fff0 	bl	8008b60 <__sfp_lock_acquire>
 8008b80:	6a23      	ldr	r3, [r4, #32]
 8008b82:	b11b      	cbz	r3, 8008b8c <__sinit+0x14>
 8008b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b88:	f7ff bff0 	b.w	8008b6c <__sfp_lock_release>
 8008b8c:	4b04      	ldr	r3, [pc, #16]	@ (8008ba0 <__sinit+0x28>)
 8008b8e:	6223      	str	r3, [r4, #32]
 8008b90:	4b04      	ldr	r3, [pc, #16]	@ (8008ba4 <__sinit+0x2c>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d1f5      	bne.n	8008b84 <__sinit+0xc>
 8008b98:	f7ff ffc4 	bl	8008b24 <global_stdio_init.part.0>
 8008b9c:	e7f2      	b.n	8008b84 <__sinit+0xc>
 8008b9e:	bf00      	nop
 8008ba0:	08008ae5 	.word	0x08008ae5
 8008ba4:	200024d8 	.word	0x200024d8

08008ba8 <_fwalk_sglue>:
 8008ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bac:	4607      	mov	r7, r0
 8008bae:	4688      	mov	r8, r1
 8008bb0:	4614      	mov	r4, r2
 8008bb2:	2600      	movs	r6, #0
 8008bb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008bb8:	f1b9 0901 	subs.w	r9, r9, #1
 8008bbc:	d505      	bpl.n	8008bca <_fwalk_sglue+0x22>
 8008bbe:	6824      	ldr	r4, [r4, #0]
 8008bc0:	2c00      	cmp	r4, #0
 8008bc2:	d1f7      	bne.n	8008bb4 <_fwalk_sglue+0xc>
 8008bc4:	4630      	mov	r0, r6
 8008bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bca:	89ab      	ldrh	r3, [r5, #12]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d907      	bls.n	8008be0 <_fwalk_sglue+0x38>
 8008bd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	d003      	beq.n	8008be0 <_fwalk_sglue+0x38>
 8008bd8:	4629      	mov	r1, r5
 8008bda:	4638      	mov	r0, r7
 8008bdc:	47c0      	blx	r8
 8008bde:	4306      	orrs	r6, r0
 8008be0:	3568      	adds	r5, #104	@ 0x68
 8008be2:	e7e9      	b.n	8008bb8 <_fwalk_sglue+0x10>

08008be4 <sniprintf>:
 8008be4:	b40c      	push	{r2, r3}
 8008be6:	b530      	push	{r4, r5, lr}
 8008be8:	4b17      	ldr	r3, [pc, #92]	@ (8008c48 <sniprintf+0x64>)
 8008bea:	1e0c      	subs	r4, r1, #0
 8008bec:	681d      	ldr	r5, [r3, #0]
 8008bee:	b09d      	sub	sp, #116	@ 0x74
 8008bf0:	da08      	bge.n	8008c04 <sniprintf+0x20>
 8008bf2:	238b      	movs	r3, #139	@ 0x8b
 8008bf4:	602b      	str	r3, [r5, #0]
 8008bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8008bfa:	b01d      	add	sp, #116	@ 0x74
 8008bfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c00:	b002      	add	sp, #8
 8008c02:	4770      	bx	lr
 8008c04:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008c08:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008c0c:	bf14      	ite	ne
 8008c0e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008c12:	4623      	moveq	r3, r4
 8008c14:	9304      	str	r3, [sp, #16]
 8008c16:	9307      	str	r3, [sp, #28]
 8008c18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008c1c:	9002      	str	r0, [sp, #8]
 8008c1e:	9006      	str	r0, [sp, #24]
 8008c20:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008c24:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008c26:	ab21      	add	r3, sp, #132	@ 0x84
 8008c28:	a902      	add	r1, sp, #8
 8008c2a:	4628      	mov	r0, r5
 8008c2c:	9301      	str	r3, [sp, #4]
 8008c2e:	f001 fbfd 	bl	800a42c <_svfiprintf_r>
 8008c32:	1c43      	adds	r3, r0, #1
 8008c34:	bfbc      	itt	lt
 8008c36:	238b      	movlt	r3, #139	@ 0x8b
 8008c38:	602b      	strlt	r3, [r5, #0]
 8008c3a:	2c00      	cmp	r4, #0
 8008c3c:	d0dd      	beq.n	8008bfa <sniprintf+0x16>
 8008c3e:	9b02      	ldr	r3, [sp, #8]
 8008c40:	2200      	movs	r2, #0
 8008c42:	701a      	strb	r2, [r3, #0]
 8008c44:	e7d9      	b.n	8008bfa <sniprintf+0x16>
 8008c46:	bf00      	nop
 8008c48:	20000034 	.word	0x20000034

08008c4c <__sread>:
 8008c4c:	b510      	push	{r4, lr}
 8008c4e:	460c      	mov	r4, r1
 8008c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c54:	f000 f86c 	bl	8008d30 <_read_r>
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	bfab      	itete	ge
 8008c5c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008c5e:	89a3      	ldrhlt	r3, [r4, #12]
 8008c60:	181b      	addge	r3, r3, r0
 8008c62:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008c66:	bfac      	ite	ge
 8008c68:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008c6a:	81a3      	strhlt	r3, [r4, #12]
 8008c6c:	bd10      	pop	{r4, pc}

08008c6e <__swrite>:
 8008c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c72:	461f      	mov	r7, r3
 8008c74:	898b      	ldrh	r3, [r1, #12]
 8008c76:	05db      	lsls	r3, r3, #23
 8008c78:	4605      	mov	r5, r0
 8008c7a:	460c      	mov	r4, r1
 8008c7c:	4616      	mov	r6, r2
 8008c7e:	d505      	bpl.n	8008c8c <__swrite+0x1e>
 8008c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c84:	2302      	movs	r3, #2
 8008c86:	2200      	movs	r2, #0
 8008c88:	f000 f840 	bl	8008d0c <_lseek_r>
 8008c8c:	89a3      	ldrh	r3, [r4, #12]
 8008c8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008c96:	81a3      	strh	r3, [r4, #12]
 8008c98:	4632      	mov	r2, r6
 8008c9a:	463b      	mov	r3, r7
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ca2:	f000 b857 	b.w	8008d54 <_write_r>

08008ca6 <__sseek>:
 8008ca6:	b510      	push	{r4, lr}
 8008ca8:	460c      	mov	r4, r1
 8008caa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cae:	f000 f82d 	bl	8008d0c <_lseek_r>
 8008cb2:	1c43      	adds	r3, r0, #1
 8008cb4:	89a3      	ldrh	r3, [r4, #12]
 8008cb6:	bf15      	itete	ne
 8008cb8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008cba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008cbe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008cc2:	81a3      	strheq	r3, [r4, #12]
 8008cc4:	bf18      	it	ne
 8008cc6:	81a3      	strhne	r3, [r4, #12]
 8008cc8:	bd10      	pop	{r4, pc}

08008cca <__sclose>:
 8008cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cce:	f000 b80d 	b.w	8008cec <_close_r>

08008cd2 <memset>:
 8008cd2:	4402      	add	r2, r0
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d100      	bne.n	8008cdc <memset+0xa>
 8008cda:	4770      	bx	lr
 8008cdc:	f803 1b01 	strb.w	r1, [r3], #1
 8008ce0:	e7f9      	b.n	8008cd6 <memset+0x4>
	...

08008ce4 <_localeconv_r>:
 8008ce4:	4800      	ldr	r0, [pc, #0]	@ (8008ce8 <_localeconv_r+0x4>)
 8008ce6:	4770      	bx	lr
 8008ce8:	20000174 	.word	0x20000174

08008cec <_close_r>:
 8008cec:	b538      	push	{r3, r4, r5, lr}
 8008cee:	4d06      	ldr	r5, [pc, #24]	@ (8008d08 <_close_r+0x1c>)
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	4608      	mov	r0, r1
 8008cf6:	602b      	str	r3, [r5, #0]
 8008cf8:	f7fa fe22 	bl	8003940 <_close>
 8008cfc:	1c43      	adds	r3, r0, #1
 8008cfe:	d102      	bne.n	8008d06 <_close_r+0x1a>
 8008d00:	682b      	ldr	r3, [r5, #0]
 8008d02:	b103      	cbz	r3, 8008d06 <_close_r+0x1a>
 8008d04:	6023      	str	r3, [r4, #0]
 8008d06:	bd38      	pop	{r3, r4, r5, pc}
 8008d08:	200024dc 	.word	0x200024dc

08008d0c <_lseek_r>:
 8008d0c:	b538      	push	{r3, r4, r5, lr}
 8008d0e:	4d07      	ldr	r5, [pc, #28]	@ (8008d2c <_lseek_r+0x20>)
 8008d10:	4604      	mov	r4, r0
 8008d12:	4608      	mov	r0, r1
 8008d14:	4611      	mov	r1, r2
 8008d16:	2200      	movs	r2, #0
 8008d18:	602a      	str	r2, [r5, #0]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	f7fa fe37 	bl	800398e <_lseek>
 8008d20:	1c43      	adds	r3, r0, #1
 8008d22:	d102      	bne.n	8008d2a <_lseek_r+0x1e>
 8008d24:	682b      	ldr	r3, [r5, #0]
 8008d26:	b103      	cbz	r3, 8008d2a <_lseek_r+0x1e>
 8008d28:	6023      	str	r3, [r4, #0]
 8008d2a:	bd38      	pop	{r3, r4, r5, pc}
 8008d2c:	200024dc 	.word	0x200024dc

08008d30 <_read_r>:
 8008d30:	b538      	push	{r3, r4, r5, lr}
 8008d32:	4d07      	ldr	r5, [pc, #28]	@ (8008d50 <_read_r+0x20>)
 8008d34:	4604      	mov	r4, r0
 8008d36:	4608      	mov	r0, r1
 8008d38:	4611      	mov	r1, r2
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	602a      	str	r2, [r5, #0]
 8008d3e:	461a      	mov	r2, r3
 8008d40:	f7fa fdc5 	bl	80038ce <_read>
 8008d44:	1c43      	adds	r3, r0, #1
 8008d46:	d102      	bne.n	8008d4e <_read_r+0x1e>
 8008d48:	682b      	ldr	r3, [r5, #0]
 8008d4a:	b103      	cbz	r3, 8008d4e <_read_r+0x1e>
 8008d4c:	6023      	str	r3, [r4, #0]
 8008d4e:	bd38      	pop	{r3, r4, r5, pc}
 8008d50:	200024dc 	.word	0x200024dc

08008d54 <_write_r>:
 8008d54:	b538      	push	{r3, r4, r5, lr}
 8008d56:	4d07      	ldr	r5, [pc, #28]	@ (8008d74 <_write_r+0x20>)
 8008d58:	4604      	mov	r4, r0
 8008d5a:	4608      	mov	r0, r1
 8008d5c:	4611      	mov	r1, r2
 8008d5e:	2200      	movs	r2, #0
 8008d60:	602a      	str	r2, [r5, #0]
 8008d62:	461a      	mov	r2, r3
 8008d64:	f7fa fdd0 	bl	8003908 <_write>
 8008d68:	1c43      	adds	r3, r0, #1
 8008d6a:	d102      	bne.n	8008d72 <_write_r+0x1e>
 8008d6c:	682b      	ldr	r3, [r5, #0]
 8008d6e:	b103      	cbz	r3, 8008d72 <_write_r+0x1e>
 8008d70:	6023      	str	r3, [r4, #0]
 8008d72:	bd38      	pop	{r3, r4, r5, pc}
 8008d74:	200024dc 	.word	0x200024dc

08008d78 <__errno>:
 8008d78:	4b01      	ldr	r3, [pc, #4]	@ (8008d80 <__errno+0x8>)
 8008d7a:	6818      	ldr	r0, [r3, #0]
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop
 8008d80:	20000034 	.word	0x20000034

08008d84 <__libc_init_array>:
 8008d84:	b570      	push	{r4, r5, r6, lr}
 8008d86:	4d0d      	ldr	r5, [pc, #52]	@ (8008dbc <__libc_init_array+0x38>)
 8008d88:	4c0d      	ldr	r4, [pc, #52]	@ (8008dc0 <__libc_init_array+0x3c>)
 8008d8a:	1b64      	subs	r4, r4, r5
 8008d8c:	10a4      	asrs	r4, r4, #2
 8008d8e:	2600      	movs	r6, #0
 8008d90:	42a6      	cmp	r6, r4
 8008d92:	d109      	bne.n	8008da8 <__libc_init_array+0x24>
 8008d94:	4d0b      	ldr	r5, [pc, #44]	@ (8008dc4 <__libc_init_array+0x40>)
 8008d96:	4c0c      	ldr	r4, [pc, #48]	@ (8008dc8 <__libc_init_array+0x44>)
 8008d98:	f002 f866 	bl	800ae68 <_init>
 8008d9c:	1b64      	subs	r4, r4, r5
 8008d9e:	10a4      	asrs	r4, r4, #2
 8008da0:	2600      	movs	r6, #0
 8008da2:	42a6      	cmp	r6, r4
 8008da4:	d105      	bne.n	8008db2 <__libc_init_array+0x2e>
 8008da6:	bd70      	pop	{r4, r5, r6, pc}
 8008da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dac:	4798      	blx	r3
 8008dae:	3601      	adds	r6, #1
 8008db0:	e7ee      	b.n	8008d90 <__libc_init_array+0xc>
 8008db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008db6:	4798      	blx	r3
 8008db8:	3601      	adds	r6, #1
 8008dba:	e7f2      	b.n	8008da2 <__libc_init_array+0x1e>
 8008dbc:	0800b718 	.word	0x0800b718
 8008dc0:	0800b718 	.word	0x0800b718
 8008dc4:	0800b718 	.word	0x0800b718
 8008dc8:	0800b71c 	.word	0x0800b71c

08008dcc <__retarget_lock_init_recursive>:
 8008dcc:	4770      	bx	lr

08008dce <__retarget_lock_acquire_recursive>:
 8008dce:	4770      	bx	lr

08008dd0 <__retarget_lock_release_recursive>:
 8008dd0:	4770      	bx	lr

08008dd2 <quorem>:
 8008dd2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dd6:	6903      	ldr	r3, [r0, #16]
 8008dd8:	690c      	ldr	r4, [r1, #16]
 8008dda:	42a3      	cmp	r3, r4
 8008ddc:	4607      	mov	r7, r0
 8008dde:	db7e      	blt.n	8008ede <quorem+0x10c>
 8008de0:	3c01      	subs	r4, #1
 8008de2:	f101 0814 	add.w	r8, r1, #20
 8008de6:	00a3      	lsls	r3, r4, #2
 8008de8:	f100 0514 	add.w	r5, r0, #20
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008df2:	9301      	str	r3, [sp, #4]
 8008df4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008df8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008e04:	fbb2 f6f3 	udiv	r6, r2, r3
 8008e08:	d32e      	bcc.n	8008e68 <quorem+0x96>
 8008e0a:	f04f 0a00 	mov.w	sl, #0
 8008e0e:	46c4      	mov	ip, r8
 8008e10:	46ae      	mov	lr, r5
 8008e12:	46d3      	mov	fp, sl
 8008e14:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008e18:	b298      	uxth	r0, r3
 8008e1a:	fb06 a000 	mla	r0, r6, r0, sl
 8008e1e:	0c02      	lsrs	r2, r0, #16
 8008e20:	0c1b      	lsrs	r3, r3, #16
 8008e22:	fb06 2303 	mla	r3, r6, r3, r2
 8008e26:	f8de 2000 	ldr.w	r2, [lr]
 8008e2a:	b280      	uxth	r0, r0
 8008e2c:	b292      	uxth	r2, r2
 8008e2e:	1a12      	subs	r2, r2, r0
 8008e30:	445a      	add	r2, fp
 8008e32:	f8de 0000 	ldr.w	r0, [lr]
 8008e36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008e40:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008e44:	b292      	uxth	r2, r2
 8008e46:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008e4a:	45e1      	cmp	r9, ip
 8008e4c:	f84e 2b04 	str.w	r2, [lr], #4
 8008e50:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008e54:	d2de      	bcs.n	8008e14 <quorem+0x42>
 8008e56:	9b00      	ldr	r3, [sp, #0]
 8008e58:	58eb      	ldr	r3, [r5, r3]
 8008e5a:	b92b      	cbnz	r3, 8008e68 <quorem+0x96>
 8008e5c:	9b01      	ldr	r3, [sp, #4]
 8008e5e:	3b04      	subs	r3, #4
 8008e60:	429d      	cmp	r5, r3
 8008e62:	461a      	mov	r2, r3
 8008e64:	d32f      	bcc.n	8008ec6 <quorem+0xf4>
 8008e66:	613c      	str	r4, [r7, #16]
 8008e68:	4638      	mov	r0, r7
 8008e6a:	f001 f97b 	bl	800a164 <__mcmp>
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	db25      	blt.n	8008ebe <quorem+0xec>
 8008e72:	4629      	mov	r1, r5
 8008e74:	2000      	movs	r0, #0
 8008e76:	f858 2b04 	ldr.w	r2, [r8], #4
 8008e7a:	f8d1 c000 	ldr.w	ip, [r1]
 8008e7e:	fa1f fe82 	uxth.w	lr, r2
 8008e82:	fa1f f38c 	uxth.w	r3, ip
 8008e86:	eba3 030e 	sub.w	r3, r3, lr
 8008e8a:	4403      	add	r3, r0
 8008e8c:	0c12      	lsrs	r2, r2, #16
 8008e8e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008e92:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e9c:	45c1      	cmp	r9, r8
 8008e9e:	f841 3b04 	str.w	r3, [r1], #4
 8008ea2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008ea6:	d2e6      	bcs.n	8008e76 <quorem+0xa4>
 8008ea8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008eac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008eb0:	b922      	cbnz	r2, 8008ebc <quorem+0xea>
 8008eb2:	3b04      	subs	r3, #4
 8008eb4:	429d      	cmp	r5, r3
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	d30b      	bcc.n	8008ed2 <quorem+0x100>
 8008eba:	613c      	str	r4, [r7, #16]
 8008ebc:	3601      	adds	r6, #1
 8008ebe:	4630      	mov	r0, r6
 8008ec0:	b003      	add	sp, #12
 8008ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec6:	6812      	ldr	r2, [r2, #0]
 8008ec8:	3b04      	subs	r3, #4
 8008eca:	2a00      	cmp	r2, #0
 8008ecc:	d1cb      	bne.n	8008e66 <quorem+0x94>
 8008ece:	3c01      	subs	r4, #1
 8008ed0:	e7c6      	b.n	8008e60 <quorem+0x8e>
 8008ed2:	6812      	ldr	r2, [r2, #0]
 8008ed4:	3b04      	subs	r3, #4
 8008ed6:	2a00      	cmp	r2, #0
 8008ed8:	d1ef      	bne.n	8008eba <quorem+0xe8>
 8008eda:	3c01      	subs	r4, #1
 8008edc:	e7ea      	b.n	8008eb4 <quorem+0xe2>
 8008ede:	2000      	movs	r0, #0
 8008ee0:	e7ee      	b.n	8008ec0 <quorem+0xee>
 8008ee2:	0000      	movs	r0, r0
 8008ee4:	0000      	movs	r0, r0
	...

08008ee8 <_dtoa_r>:
 8008ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eec:	69c7      	ldr	r7, [r0, #28]
 8008eee:	b099      	sub	sp, #100	@ 0x64
 8008ef0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008ef4:	ec55 4b10 	vmov	r4, r5, d0
 8008ef8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008efa:	9109      	str	r1, [sp, #36]	@ 0x24
 8008efc:	4683      	mov	fp, r0
 8008efe:	920e      	str	r2, [sp, #56]	@ 0x38
 8008f00:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008f02:	b97f      	cbnz	r7, 8008f24 <_dtoa_r+0x3c>
 8008f04:	2010      	movs	r0, #16
 8008f06:	f000 fdfd 	bl	8009b04 <malloc>
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008f10:	b920      	cbnz	r0, 8008f1c <_dtoa_r+0x34>
 8008f12:	4ba7      	ldr	r3, [pc, #668]	@ (80091b0 <_dtoa_r+0x2c8>)
 8008f14:	21ef      	movs	r1, #239	@ 0xef
 8008f16:	48a7      	ldr	r0, [pc, #668]	@ (80091b4 <_dtoa_r+0x2cc>)
 8008f18:	f001 fc68 	bl	800a7ec <__assert_func>
 8008f1c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008f20:	6007      	str	r7, [r0, #0]
 8008f22:	60c7      	str	r7, [r0, #12]
 8008f24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008f28:	6819      	ldr	r1, [r3, #0]
 8008f2a:	b159      	cbz	r1, 8008f44 <_dtoa_r+0x5c>
 8008f2c:	685a      	ldr	r2, [r3, #4]
 8008f2e:	604a      	str	r2, [r1, #4]
 8008f30:	2301      	movs	r3, #1
 8008f32:	4093      	lsls	r3, r2
 8008f34:	608b      	str	r3, [r1, #8]
 8008f36:	4658      	mov	r0, fp
 8008f38:	f000 feda 	bl	8009cf0 <_Bfree>
 8008f3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008f40:	2200      	movs	r2, #0
 8008f42:	601a      	str	r2, [r3, #0]
 8008f44:	1e2b      	subs	r3, r5, #0
 8008f46:	bfb9      	ittee	lt
 8008f48:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008f4c:	9303      	strlt	r3, [sp, #12]
 8008f4e:	2300      	movge	r3, #0
 8008f50:	6033      	strge	r3, [r6, #0]
 8008f52:	9f03      	ldr	r7, [sp, #12]
 8008f54:	4b98      	ldr	r3, [pc, #608]	@ (80091b8 <_dtoa_r+0x2d0>)
 8008f56:	bfbc      	itt	lt
 8008f58:	2201      	movlt	r2, #1
 8008f5a:	6032      	strlt	r2, [r6, #0]
 8008f5c:	43bb      	bics	r3, r7
 8008f5e:	d112      	bne.n	8008f86 <_dtoa_r+0x9e>
 8008f60:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008f62:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008f66:	6013      	str	r3, [r2, #0]
 8008f68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008f6c:	4323      	orrs	r3, r4
 8008f6e:	f000 854d 	beq.w	8009a0c <_dtoa_r+0xb24>
 8008f72:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008f74:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80091cc <_dtoa_r+0x2e4>
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f000 854f 	beq.w	8009a1c <_dtoa_r+0xb34>
 8008f7e:	f10a 0303 	add.w	r3, sl, #3
 8008f82:	f000 bd49 	b.w	8009a18 <_dtoa_r+0xb30>
 8008f86:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	ec51 0b17 	vmov	r0, r1, d7
 8008f90:	2300      	movs	r3, #0
 8008f92:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008f96:	f7f7 fdb7 	bl	8000b08 <__aeabi_dcmpeq>
 8008f9a:	4680      	mov	r8, r0
 8008f9c:	b158      	cbz	r0, 8008fb6 <_dtoa_r+0xce>
 8008f9e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	6013      	str	r3, [r2, #0]
 8008fa4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008fa6:	b113      	cbz	r3, 8008fae <_dtoa_r+0xc6>
 8008fa8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008faa:	4b84      	ldr	r3, [pc, #528]	@ (80091bc <_dtoa_r+0x2d4>)
 8008fac:	6013      	str	r3, [r2, #0]
 8008fae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80091d0 <_dtoa_r+0x2e8>
 8008fb2:	f000 bd33 	b.w	8009a1c <_dtoa_r+0xb34>
 8008fb6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008fba:	aa16      	add	r2, sp, #88	@ 0x58
 8008fbc:	a917      	add	r1, sp, #92	@ 0x5c
 8008fbe:	4658      	mov	r0, fp
 8008fc0:	f001 f980 	bl	800a2c4 <__d2b>
 8008fc4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008fc8:	4681      	mov	r9, r0
 8008fca:	2e00      	cmp	r6, #0
 8008fcc:	d077      	beq.n	80090be <_dtoa_r+0x1d6>
 8008fce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008fd0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008fd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008fd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008fdc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008fe0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008fe4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008fe8:	4619      	mov	r1, r3
 8008fea:	2200      	movs	r2, #0
 8008fec:	4b74      	ldr	r3, [pc, #464]	@ (80091c0 <_dtoa_r+0x2d8>)
 8008fee:	f7f7 f96b 	bl	80002c8 <__aeabi_dsub>
 8008ff2:	a369      	add	r3, pc, #420	@ (adr r3, 8009198 <_dtoa_r+0x2b0>)
 8008ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff8:	f7f7 fb1e 	bl	8000638 <__aeabi_dmul>
 8008ffc:	a368      	add	r3, pc, #416	@ (adr r3, 80091a0 <_dtoa_r+0x2b8>)
 8008ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009002:	f7f7 f963 	bl	80002cc <__adddf3>
 8009006:	4604      	mov	r4, r0
 8009008:	4630      	mov	r0, r6
 800900a:	460d      	mov	r5, r1
 800900c:	f7f7 faaa 	bl	8000564 <__aeabi_i2d>
 8009010:	a365      	add	r3, pc, #404	@ (adr r3, 80091a8 <_dtoa_r+0x2c0>)
 8009012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009016:	f7f7 fb0f 	bl	8000638 <__aeabi_dmul>
 800901a:	4602      	mov	r2, r0
 800901c:	460b      	mov	r3, r1
 800901e:	4620      	mov	r0, r4
 8009020:	4629      	mov	r1, r5
 8009022:	f7f7 f953 	bl	80002cc <__adddf3>
 8009026:	4604      	mov	r4, r0
 8009028:	460d      	mov	r5, r1
 800902a:	f7f7 fdb5 	bl	8000b98 <__aeabi_d2iz>
 800902e:	2200      	movs	r2, #0
 8009030:	4607      	mov	r7, r0
 8009032:	2300      	movs	r3, #0
 8009034:	4620      	mov	r0, r4
 8009036:	4629      	mov	r1, r5
 8009038:	f7f7 fd70 	bl	8000b1c <__aeabi_dcmplt>
 800903c:	b140      	cbz	r0, 8009050 <_dtoa_r+0x168>
 800903e:	4638      	mov	r0, r7
 8009040:	f7f7 fa90 	bl	8000564 <__aeabi_i2d>
 8009044:	4622      	mov	r2, r4
 8009046:	462b      	mov	r3, r5
 8009048:	f7f7 fd5e 	bl	8000b08 <__aeabi_dcmpeq>
 800904c:	b900      	cbnz	r0, 8009050 <_dtoa_r+0x168>
 800904e:	3f01      	subs	r7, #1
 8009050:	2f16      	cmp	r7, #22
 8009052:	d851      	bhi.n	80090f8 <_dtoa_r+0x210>
 8009054:	4b5b      	ldr	r3, [pc, #364]	@ (80091c4 <_dtoa_r+0x2dc>)
 8009056:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800905a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009062:	f7f7 fd5b 	bl	8000b1c <__aeabi_dcmplt>
 8009066:	2800      	cmp	r0, #0
 8009068:	d048      	beq.n	80090fc <_dtoa_r+0x214>
 800906a:	3f01      	subs	r7, #1
 800906c:	2300      	movs	r3, #0
 800906e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009070:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009072:	1b9b      	subs	r3, r3, r6
 8009074:	1e5a      	subs	r2, r3, #1
 8009076:	bf44      	itt	mi
 8009078:	f1c3 0801 	rsbmi	r8, r3, #1
 800907c:	2300      	movmi	r3, #0
 800907e:	9208      	str	r2, [sp, #32]
 8009080:	bf54      	ite	pl
 8009082:	f04f 0800 	movpl.w	r8, #0
 8009086:	9308      	strmi	r3, [sp, #32]
 8009088:	2f00      	cmp	r7, #0
 800908a:	db39      	blt.n	8009100 <_dtoa_r+0x218>
 800908c:	9b08      	ldr	r3, [sp, #32]
 800908e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009090:	443b      	add	r3, r7
 8009092:	9308      	str	r3, [sp, #32]
 8009094:	2300      	movs	r3, #0
 8009096:	930a      	str	r3, [sp, #40]	@ 0x28
 8009098:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800909a:	2b09      	cmp	r3, #9
 800909c:	d864      	bhi.n	8009168 <_dtoa_r+0x280>
 800909e:	2b05      	cmp	r3, #5
 80090a0:	bfc4      	itt	gt
 80090a2:	3b04      	subgt	r3, #4
 80090a4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80090a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090a8:	f1a3 0302 	sub.w	r3, r3, #2
 80090ac:	bfcc      	ite	gt
 80090ae:	2400      	movgt	r4, #0
 80090b0:	2401      	movle	r4, #1
 80090b2:	2b03      	cmp	r3, #3
 80090b4:	d863      	bhi.n	800917e <_dtoa_r+0x296>
 80090b6:	e8df f003 	tbb	[pc, r3]
 80090ba:	372a      	.short	0x372a
 80090bc:	5535      	.short	0x5535
 80090be:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80090c2:	441e      	add	r6, r3
 80090c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80090c8:	2b20      	cmp	r3, #32
 80090ca:	bfc1      	itttt	gt
 80090cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80090d0:	409f      	lslgt	r7, r3
 80090d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80090d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80090da:	bfd6      	itet	le
 80090dc:	f1c3 0320 	rsble	r3, r3, #32
 80090e0:	ea47 0003 	orrgt.w	r0, r7, r3
 80090e4:	fa04 f003 	lslle.w	r0, r4, r3
 80090e8:	f7f7 fa2c 	bl	8000544 <__aeabi_ui2d>
 80090ec:	2201      	movs	r2, #1
 80090ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80090f2:	3e01      	subs	r6, #1
 80090f4:	9214      	str	r2, [sp, #80]	@ 0x50
 80090f6:	e777      	b.n	8008fe8 <_dtoa_r+0x100>
 80090f8:	2301      	movs	r3, #1
 80090fa:	e7b8      	b.n	800906e <_dtoa_r+0x186>
 80090fc:	9012      	str	r0, [sp, #72]	@ 0x48
 80090fe:	e7b7      	b.n	8009070 <_dtoa_r+0x188>
 8009100:	427b      	negs	r3, r7
 8009102:	930a      	str	r3, [sp, #40]	@ 0x28
 8009104:	2300      	movs	r3, #0
 8009106:	eba8 0807 	sub.w	r8, r8, r7
 800910a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800910c:	e7c4      	b.n	8009098 <_dtoa_r+0x1b0>
 800910e:	2300      	movs	r3, #0
 8009110:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009112:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009114:	2b00      	cmp	r3, #0
 8009116:	dc35      	bgt.n	8009184 <_dtoa_r+0x29c>
 8009118:	2301      	movs	r3, #1
 800911a:	9300      	str	r3, [sp, #0]
 800911c:	9307      	str	r3, [sp, #28]
 800911e:	461a      	mov	r2, r3
 8009120:	920e      	str	r2, [sp, #56]	@ 0x38
 8009122:	e00b      	b.n	800913c <_dtoa_r+0x254>
 8009124:	2301      	movs	r3, #1
 8009126:	e7f3      	b.n	8009110 <_dtoa_r+0x228>
 8009128:	2300      	movs	r3, #0
 800912a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800912c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800912e:	18fb      	adds	r3, r7, r3
 8009130:	9300      	str	r3, [sp, #0]
 8009132:	3301      	adds	r3, #1
 8009134:	2b01      	cmp	r3, #1
 8009136:	9307      	str	r3, [sp, #28]
 8009138:	bfb8      	it	lt
 800913a:	2301      	movlt	r3, #1
 800913c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009140:	2100      	movs	r1, #0
 8009142:	2204      	movs	r2, #4
 8009144:	f102 0514 	add.w	r5, r2, #20
 8009148:	429d      	cmp	r5, r3
 800914a:	d91f      	bls.n	800918c <_dtoa_r+0x2a4>
 800914c:	6041      	str	r1, [r0, #4]
 800914e:	4658      	mov	r0, fp
 8009150:	f000 fd8e 	bl	8009c70 <_Balloc>
 8009154:	4682      	mov	sl, r0
 8009156:	2800      	cmp	r0, #0
 8009158:	d13c      	bne.n	80091d4 <_dtoa_r+0x2ec>
 800915a:	4b1b      	ldr	r3, [pc, #108]	@ (80091c8 <_dtoa_r+0x2e0>)
 800915c:	4602      	mov	r2, r0
 800915e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009162:	e6d8      	b.n	8008f16 <_dtoa_r+0x2e>
 8009164:	2301      	movs	r3, #1
 8009166:	e7e0      	b.n	800912a <_dtoa_r+0x242>
 8009168:	2401      	movs	r4, #1
 800916a:	2300      	movs	r3, #0
 800916c:	9309      	str	r3, [sp, #36]	@ 0x24
 800916e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009170:	f04f 33ff 	mov.w	r3, #4294967295
 8009174:	9300      	str	r3, [sp, #0]
 8009176:	9307      	str	r3, [sp, #28]
 8009178:	2200      	movs	r2, #0
 800917a:	2312      	movs	r3, #18
 800917c:	e7d0      	b.n	8009120 <_dtoa_r+0x238>
 800917e:	2301      	movs	r3, #1
 8009180:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009182:	e7f5      	b.n	8009170 <_dtoa_r+0x288>
 8009184:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009186:	9300      	str	r3, [sp, #0]
 8009188:	9307      	str	r3, [sp, #28]
 800918a:	e7d7      	b.n	800913c <_dtoa_r+0x254>
 800918c:	3101      	adds	r1, #1
 800918e:	0052      	lsls	r2, r2, #1
 8009190:	e7d8      	b.n	8009144 <_dtoa_r+0x25c>
 8009192:	bf00      	nop
 8009194:	f3af 8000 	nop.w
 8009198:	636f4361 	.word	0x636f4361
 800919c:	3fd287a7 	.word	0x3fd287a7
 80091a0:	8b60c8b3 	.word	0x8b60c8b3
 80091a4:	3fc68a28 	.word	0x3fc68a28
 80091a8:	509f79fb 	.word	0x509f79fb
 80091ac:	3fd34413 	.word	0x3fd34413
 80091b0:	0800b3e1 	.word	0x0800b3e1
 80091b4:	0800b3f8 	.word	0x0800b3f8
 80091b8:	7ff00000 	.word	0x7ff00000
 80091bc:	0800b3b1 	.word	0x0800b3b1
 80091c0:	3ff80000 	.word	0x3ff80000
 80091c4:	0800b4f0 	.word	0x0800b4f0
 80091c8:	0800b450 	.word	0x0800b450
 80091cc:	0800b3dd 	.word	0x0800b3dd
 80091d0:	0800b3b0 	.word	0x0800b3b0
 80091d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80091d8:	6018      	str	r0, [r3, #0]
 80091da:	9b07      	ldr	r3, [sp, #28]
 80091dc:	2b0e      	cmp	r3, #14
 80091de:	f200 80a4 	bhi.w	800932a <_dtoa_r+0x442>
 80091e2:	2c00      	cmp	r4, #0
 80091e4:	f000 80a1 	beq.w	800932a <_dtoa_r+0x442>
 80091e8:	2f00      	cmp	r7, #0
 80091ea:	dd33      	ble.n	8009254 <_dtoa_r+0x36c>
 80091ec:	4bad      	ldr	r3, [pc, #692]	@ (80094a4 <_dtoa_r+0x5bc>)
 80091ee:	f007 020f 	and.w	r2, r7, #15
 80091f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091f6:	ed93 7b00 	vldr	d7, [r3]
 80091fa:	05f8      	lsls	r0, r7, #23
 80091fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009200:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009204:	d516      	bpl.n	8009234 <_dtoa_r+0x34c>
 8009206:	4ba8      	ldr	r3, [pc, #672]	@ (80094a8 <_dtoa_r+0x5c0>)
 8009208:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800920c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009210:	f7f7 fb3c 	bl	800088c <__aeabi_ddiv>
 8009214:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009218:	f004 040f 	and.w	r4, r4, #15
 800921c:	2603      	movs	r6, #3
 800921e:	4da2      	ldr	r5, [pc, #648]	@ (80094a8 <_dtoa_r+0x5c0>)
 8009220:	b954      	cbnz	r4, 8009238 <_dtoa_r+0x350>
 8009222:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009226:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800922a:	f7f7 fb2f 	bl	800088c <__aeabi_ddiv>
 800922e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009232:	e028      	b.n	8009286 <_dtoa_r+0x39e>
 8009234:	2602      	movs	r6, #2
 8009236:	e7f2      	b.n	800921e <_dtoa_r+0x336>
 8009238:	07e1      	lsls	r1, r4, #31
 800923a:	d508      	bpl.n	800924e <_dtoa_r+0x366>
 800923c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009240:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009244:	f7f7 f9f8 	bl	8000638 <__aeabi_dmul>
 8009248:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800924c:	3601      	adds	r6, #1
 800924e:	1064      	asrs	r4, r4, #1
 8009250:	3508      	adds	r5, #8
 8009252:	e7e5      	b.n	8009220 <_dtoa_r+0x338>
 8009254:	f000 80d2 	beq.w	80093fc <_dtoa_r+0x514>
 8009258:	427c      	negs	r4, r7
 800925a:	4b92      	ldr	r3, [pc, #584]	@ (80094a4 <_dtoa_r+0x5bc>)
 800925c:	4d92      	ldr	r5, [pc, #584]	@ (80094a8 <_dtoa_r+0x5c0>)
 800925e:	f004 020f 	and.w	r2, r4, #15
 8009262:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800926e:	f7f7 f9e3 	bl	8000638 <__aeabi_dmul>
 8009272:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009276:	1124      	asrs	r4, r4, #4
 8009278:	2300      	movs	r3, #0
 800927a:	2602      	movs	r6, #2
 800927c:	2c00      	cmp	r4, #0
 800927e:	f040 80b2 	bne.w	80093e6 <_dtoa_r+0x4fe>
 8009282:	2b00      	cmp	r3, #0
 8009284:	d1d3      	bne.n	800922e <_dtoa_r+0x346>
 8009286:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009288:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800928c:	2b00      	cmp	r3, #0
 800928e:	f000 80b7 	beq.w	8009400 <_dtoa_r+0x518>
 8009292:	4b86      	ldr	r3, [pc, #536]	@ (80094ac <_dtoa_r+0x5c4>)
 8009294:	2200      	movs	r2, #0
 8009296:	4620      	mov	r0, r4
 8009298:	4629      	mov	r1, r5
 800929a:	f7f7 fc3f 	bl	8000b1c <__aeabi_dcmplt>
 800929e:	2800      	cmp	r0, #0
 80092a0:	f000 80ae 	beq.w	8009400 <_dtoa_r+0x518>
 80092a4:	9b07      	ldr	r3, [sp, #28]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	f000 80aa 	beq.w	8009400 <_dtoa_r+0x518>
 80092ac:	9b00      	ldr	r3, [sp, #0]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	dd37      	ble.n	8009322 <_dtoa_r+0x43a>
 80092b2:	1e7b      	subs	r3, r7, #1
 80092b4:	9304      	str	r3, [sp, #16]
 80092b6:	4620      	mov	r0, r4
 80092b8:	4b7d      	ldr	r3, [pc, #500]	@ (80094b0 <_dtoa_r+0x5c8>)
 80092ba:	2200      	movs	r2, #0
 80092bc:	4629      	mov	r1, r5
 80092be:	f7f7 f9bb 	bl	8000638 <__aeabi_dmul>
 80092c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092c6:	9c00      	ldr	r4, [sp, #0]
 80092c8:	3601      	adds	r6, #1
 80092ca:	4630      	mov	r0, r6
 80092cc:	f7f7 f94a 	bl	8000564 <__aeabi_i2d>
 80092d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092d4:	f7f7 f9b0 	bl	8000638 <__aeabi_dmul>
 80092d8:	4b76      	ldr	r3, [pc, #472]	@ (80094b4 <_dtoa_r+0x5cc>)
 80092da:	2200      	movs	r2, #0
 80092dc:	f7f6 fff6 	bl	80002cc <__adddf3>
 80092e0:	4605      	mov	r5, r0
 80092e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80092e6:	2c00      	cmp	r4, #0
 80092e8:	f040 808d 	bne.w	8009406 <_dtoa_r+0x51e>
 80092ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092f0:	4b71      	ldr	r3, [pc, #452]	@ (80094b8 <_dtoa_r+0x5d0>)
 80092f2:	2200      	movs	r2, #0
 80092f4:	f7f6 ffe8 	bl	80002c8 <__aeabi_dsub>
 80092f8:	4602      	mov	r2, r0
 80092fa:	460b      	mov	r3, r1
 80092fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009300:	462a      	mov	r2, r5
 8009302:	4633      	mov	r3, r6
 8009304:	f7f7 fc28 	bl	8000b58 <__aeabi_dcmpgt>
 8009308:	2800      	cmp	r0, #0
 800930a:	f040 828b 	bne.w	8009824 <_dtoa_r+0x93c>
 800930e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009312:	462a      	mov	r2, r5
 8009314:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009318:	f7f7 fc00 	bl	8000b1c <__aeabi_dcmplt>
 800931c:	2800      	cmp	r0, #0
 800931e:	f040 8128 	bne.w	8009572 <_dtoa_r+0x68a>
 8009322:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009326:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800932a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800932c:	2b00      	cmp	r3, #0
 800932e:	f2c0 815a 	blt.w	80095e6 <_dtoa_r+0x6fe>
 8009332:	2f0e      	cmp	r7, #14
 8009334:	f300 8157 	bgt.w	80095e6 <_dtoa_r+0x6fe>
 8009338:	4b5a      	ldr	r3, [pc, #360]	@ (80094a4 <_dtoa_r+0x5bc>)
 800933a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800933e:	ed93 7b00 	vldr	d7, [r3]
 8009342:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009344:	2b00      	cmp	r3, #0
 8009346:	ed8d 7b00 	vstr	d7, [sp]
 800934a:	da03      	bge.n	8009354 <_dtoa_r+0x46c>
 800934c:	9b07      	ldr	r3, [sp, #28]
 800934e:	2b00      	cmp	r3, #0
 8009350:	f340 8101 	ble.w	8009556 <_dtoa_r+0x66e>
 8009354:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009358:	4656      	mov	r6, sl
 800935a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800935e:	4620      	mov	r0, r4
 8009360:	4629      	mov	r1, r5
 8009362:	f7f7 fa93 	bl	800088c <__aeabi_ddiv>
 8009366:	f7f7 fc17 	bl	8000b98 <__aeabi_d2iz>
 800936a:	4680      	mov	r8, r0
 800936c:	f7f7 f8fa 	bl	8000564 <__aeabi_i2d>
 8009370:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009374:	f7f7 f960 	bl	8000638 <__aeabi_dmul>
 8009378:	4602      	mov	r2, r0
 800937a:	460b      	mov	r3, r1
 800937c:	4620      	mov	r0, r4
 800937e:	4629      	mov	r1, r5
 8009380:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009384:	f7f6 ffa0 	bl	80002c8 <__aeabi_dsub>
 8009388:	f806 4b01 	strb.w	r4, [r6], #1
 800938c:	9d07      	ldr	r5, [sp, #28]
 800938e:	eba6 040a 	sub.w	r4, r6, sl
 8009392:	42a5      	cmp	r5, r4
 8009394:	4602      	mov	r2, r0
 8009396:	460b      	mov	r3, r1
 8009398:	f040 8117 	bne.w	80095ca <_dtoa_r+0x6e2>
 800939c:	f7f6 ff96 	bl	80002cc <__adddf3>
 80093a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093a4:	4604      	mov	r4, r0
 80093a6:	460d      	mov	r5, r1
 80093a8:	f7f7 fbd6 	bl	8000b58 <__aeabi_dcmpgt>
 80093ac:	2800      	cmp	r0, #0
 80093ae:	f040 80f9 	bne.w	80095a4 <_dtoa_r+0x6bc>
 80093b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093b6:	4620      	mov	r0, r4
 80093b8:	4629      	mov	r1, r5
 80093ba:	f7f7 fba5 	bl	8000b08 <__aeabi_dcmpeq>
 80093be:	b118      	cbz	r0, 80093c8 <_dtoa_r+0x4e0>
 80093c0:	f018 0f01 	tst.w	r8, #1
 80093c4:	f040 80ee 	bne.w	80095a4 <_dtoa_r+0x6bc>
 80093c8:	4649      	mov	r1, r9
 80093ca:	4658      	mov	r0, fp
 80093cc:	f000 fc90 	bl	8009cf0 <_Bfree>
 80093d0:	2300      	movs	r3, #0
 80093d2:	7033      	strb	r3, [r6, #0]
 80093d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80093d6:	3701      	adds	r7, #1
 80093d8:	601f      	str	r7, [r3, #0]
 80093da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f000 831d 	beq.w	8009a1c <_dtoa_r+0xb34>
 80093e2:	601e      	str	r6, [r3, #0]
 80093e4:	e31a      	b.n	8009a1c <_dtoa_r+0xb34>
 80093e6:	07e2      	lsls	r2, r4, #31
 80093e8:	d505      	bpl.n	80093f6 <_dtoa_r+0x50e>
 80093ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80093ee:	f7f7 f923 	bl	8000638 <__aeabi_dmul>
 80093f2:	3601      	adds	r6, #1
 80093f4:	2301      	movs	r3, #1
 80093f6:	1064      	asrs	r4, r4, #1
 80093f8:	3508      	adds	r5, #8
 80093fa:	e73f      	b.n	800927c <_dtoa_r+0x394>
 80093fc:	2602      	movs	r6, #2
 80093fe:	e742      	b.n	8009286 <_dtoa_r+0x39e>
 8009400:	9c07      	ldr	r4, [sp, #28]
 8009402:	9704      	str	r7, [sp, #16]
 8009404:	e761      	b.n	80092ca <_dtoa_r+0x3e2>
 8009406:	4b27      	ldr	r3, [pc, #156]	@ (80094a4 <_dtoa_r+0x5bc>)
 8009408:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800940a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800940e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009412:	4454      	add	r4, sl
 8009414:	2900      	cmp	r1, #0
 8009416:	d053      	beq.n	80094c0 <_dtoa_r+0x5d8>
 8009418:	4928      	ldr	r1, [pc, #160]	@ (80094bc <_dtoa_r+0x5d4>)
 800941a:	2000      	movs	r0, #0
 800941c:	f7f7 fa36 	bl	800088c <__aeabi_ddiv>
 8009420:	4633      	mov	r3, r6
 8009422:	462a      	mov	r2, r5
 8009424:	f7f6 ff50 	bl	80002c8 <__aeabi_dsub>
 8009428:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800942c:	4656      	mov	r6, sl
 800942e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009432:	f7f7 fbb1 	bl	8000b98 <__aeabi_d2iz>
 8009436:	4605      	mov	r5, r0
 8009438:	f7f7 f894 	bl	8000564 <__aeabi_i2d>
 800943c:	4602      	mov	r2, r0
 800943e:	460b      	mov	r3, r1
 8009440:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009444:	f7f6 ff40 	bl	80002c8 <__aeabi_dsub>
 8009448:	3530      	adds	r5, #48	@ 0x30
 800944a:	4602      	mov	r2, r0
 800944c:	460b      	mov	r3, r1
 800944e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009452:	f806 5b01 	strb.w	r5, [r6], #1
 8009456:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800945a:	f7f7 fb5f 	bl	8000b1c <__aeabi_dcmplt>
 800945e:	2800      	cmp	r0, #0
 8009460:	d171      	bne.n	8009546 <_dtoa_r+0x65e>
 8009462:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009466:	4911      	ldr	r1, [pc, #68]	@ (80094ac <_dtoa_r+0x5c4>)
 8009468:	2000      	movs	r0, #0
 800946a:	f7f6 ff2d 	bl	80002c8 <__aeabi_dsub>
 800946e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009472:	f7f7 fb53 	bl	8000b1c <__aeabi_dcmplt>
 8009476:	2800      	cmp	r0, #0
 8009478:	f040 8095 	bne.w	80095a6 <_dtoa_r+0x6be>
 800947c:	42a6      	cmp	r6, r4
 800947e:	f43f af50 	beq.w	8009322 <_dtoa_r+0x43a>
 8009482:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009486:	4b0a      	ldr	r3, [pc, #40]	@ (80094b0 <_dtoa_r+0x5c8>)
 8009488:	2200      	movs	r2, #0
 800948a:	f7f7 f8d5 	bl	8000638 <__aeabi_dmul>
 800948e:	4b08      	ldr	r3, [pc, #32]	@ (80094b0 <_dtoa_r+0x5c8>)
 8009490:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009494:	2200      	movs	r2, #0
 8009496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800949a:	f7f7 f8cd 	bl	8000638 <__aeabi_dmul>
 800949e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094a2:	e7c4      	b.n	800942e <_dtoa_r+0x546>
 80094a4:	0800b4f0 	.word	0x0800b4f0
 80094a8:	0800b4c8 	.word	0x0800b4c8
 80094ac:	3ff00000 	.word	0x3ff00000
 80094b0:	40240000 	.word	0x40240000
 80094b4:	401c0000 	.word	0x401c0000
 80094b8:	40140000 	.word	0x40140000
 80094bc:	3fe00000 	.word	0x3fe00000
 80094c0:	4631      	mov	r1, r6
 80094c2:	4628      	mov	r0, r5
 80094c4:	f7f7 f8b8 	bl	8000638 <__aeabi_dmul>
 80094c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80094cc:	9415      	str	r4, [sp, #84]	@ 0x54
 80094ce:	4656      	mov	r6, sl
 80094d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094d4:	f7f7 fb60 	bl	8000b98 <__aeabi_d2iz>
 80094d8:	4605      	mov	r5, r0
 80094da:	f7f7 f843 	bl	8000564 <__aeabi_i2d>
 80094de:	4602      	mov	r2, r0
 80094e0:	460b      	mov	r3, r1
 80094e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094e6:	f7f6 feef 	bl	80002c8 <__aeabi_dsub>
 80094ea:	3530      	adds	r5, #48	@ 0x30
 80094ec:	f806 5b01 	strb.w	r5, [r6], #1
 80094f0:	4602      	mov	r2, r0
 80094f2:	460b      	mov	r3, r1
 80094f4:	42a6      	cmp	r6, r4
 80094f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80094fa:	f04f 0200 	mov.w	r2, #0
 80094fe:	d124      	bne.n	800954a <_dtoa_r+0x662>
 8009500:	4bac      	ldr	r3, [pc, #688]	@ (80097b4 <_dtoa_r+0x8cc>)
 8009502:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009506:	f7f6 fee1 	bl	80002cc <__adddf3>
 800950a:	4602      	mov	r2, r0
 800950c:	460b      	mov	r3, r1
 800950e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009512:	f7f7 fb21 	bl	8000b58 <__aeabi_dcmpgt>
 8009516:	2800      	cmp	r0, #0
 8009518:	d145      	bne.n	80095a6 <_dtoa_r+0x6be>
 800951a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800951e:	49a5      	ldr	r1, [pc, #660]	@ (80097b4 <_dtoa_r+0x8cc>)
 8009520:	2000      	movs	r0, #0
 8009522:	f7f6 fed1 	bl	80002c8 <__aeabi_dsub>
 8009526:	4602      	mov	r2, r0
 8009528:	460b      	mov	r3, r1
 800952a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800952e:	f7f7 faf5 	bl	8000b1c <__aeabi_dcmplt>
 8009532:	2800      	cmp	r0, #0
 8009534:	f43f aef5 	beq.w	8009322 <_dtoa_r+0x43a>
 8009538:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800953a:	1e73      	subs	r3, r6, #1
 800953c:	9315      	str	r3, [sp, #84]	@ 0x54
 800953e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009542:	2b30      	cmp	r3, #48	@ 0x30
 8009544:	d0f8      	beq.n	8009538 <_dtoa_r+0x650>
 8009546:	9f04      	ldr	r7, [sp, #16]
 8009548:	e73e      	b.n	80093c8 <_dtoa_r+0x4e0>
 800954a:	4b9b      	ldr	r3, [pc, #620]	@ (80097b8 <_dtoa_r+0x8d0>)
 800954c:	f7f7 f874 	bl	8000638 <__aeabi_dmul>
 8009550:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009554:	e7bc      	b.n	80094d0 <_dtoa_r+0x5e8>
 8009556:	d10c      	bne.n	8009572 <_dtoa_r+0x68a>
 8009558:	4b98      	ldr	r3, [pc, #608]	@ (80097bc <_dtoa_r+0x8d4>)
 800955a:	2200      	movs	r2, #0
 800955c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009560:	f7f7 f86a 	bl	8000638 <__aeabi_dmul>
 8009564:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009568:	f7f7 faec 	bl	8000b44 <__aeabi_dcmpge>
 800956c:	2800      	cmp	r0, #0
 800956e:	f000 8157 	beq.w	8009820 <_dtoa_r+0x938>
 8009572:	2400      	movs	r4, #0
 8009574:	4625      	mov	r5, r4
 8009576:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009578:	43db      	mvns	r3, r3
 800957a:	9304      	str	r3, [sp, #16]
 800957c:	4656      	mov	r6, sl
 800957e:	2700      	movs	r7, #0
 8009580:	4621      	mov	r1, r4
 8009582:	4658      	mov	r0, fp
 8009584:	f000 fbb4 	bl	8009cf0 <_Bfree>
 8009588:	2d00      	cmp	r5, #0
 800958a:	d0dc      	beq.n	8009546 <_dtoa_r+0x65e>
 800958c:	b12f      	cbz	r7, 800959a <_dtoa_r+0x6b2>
 800958e:	42af      	cmp	r7, r5
 8009590:	d003      	beq.n	800959a <_dtoa_r+0x6b2>
 8009592:	4639      	mov	r1, r7
 8009594:	4658      	mov	r0, fp
 8009596:	f000 fbab 	bl	8009cf0 <_Bfree>
 800959a:	4629      	mov	r1, r5
 800959c:	4658      	mov	r0, fp
 800959e:	f000 fba7 	bl	8009cf0 <_Bfree>
 80095a2:	e7d0      	b.n	8009546 <_dtoa_r+0x65e>
 80095a4:	9704      	str	r7, [sp, #16]
 80095a6:	4633      	mov	r3, r6
 80095a8:	461e      	mov	r6, r3
 80095aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095ae:	2a39      	cmp	r2, #57	@ 0x39
 80095b0:	d107      	bne.n	80095c2 <_dtoa_r+0x6da>
 80095b2:	459a      	cmp	sl, r3
 80095b4:	d1f8      	bne.n	80095a8 <_dtoa_r+0x6c0>
 80095b6:	9a04      	ldr	r2, [sp, #16]
 80095b8:	3201      	adds	r2, #1
 80095ba:	9204      	str	r2, [sp, #16]
 80095bc:	2230      	movs	r2, #48	@ 0x30
 80095be:	f88a 2000 	strb.w	r2, [sl]
 80095c2:	781a      	ldrb	r2, [r3, #0]
 80095c4:	3201      	adds	r2, #1
 80095c6:	701a      	strb	r2, [r3, #0]
 80095c8:	e7bd      	b.n	8009546 <_dtoa_r+0x65e>
 80095ca:	4b7b      	ldr	r3, [pc, #492]	@ (80097b8 <_dtoa_r+0x8d0>)
 80095cc:	2200      	movs	r2, #0
 80095ce:	f7f7 f833 	bl	8000638 <__aeabi_dmul>
 80095d2:	2200      	movs	r2, #0
 80095d4:	2300      	movs	r3, #0
 80095d6:	4604      	mov	r4, r0
 80095d8:	460d      	mov	r5, r1
 80095da:	f7f7 fa95 	bl	8000b08 <__aeabi_dcmpeq>
 80095de:	2800      	cmp	r0, #0
 80095e0:	f43f aebb 	beq.w	800935a <_dtoa_r+0x472>
 80095e4:	e6f0      	b.n	80093c8 <_dtoa_r+0x4e0>
 80095e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80095e8:	2a00      	cmp	r2, #0
 80095ea:	f000 80db 	beq.w	80097a4 <_dtoa_r+0x8bc>
 80095ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095f0:	2a01      	cmp	r2, #1
 80095f2:	f300 80bf 	bgt.w	8009774 <_dtoa_r+0x88c>
 80095f6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80095f8:	2a00      	cmp	r2, #0
 80095fa:	f000 80b7 	beq.w	800976c <_dtoa_r+0x884>
 80095fe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009602:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009604:	4646      	mov	r6, r8
 8009606:	9a08      	ldr	r2, [sp, #32]
 8009608:	2101      	movs	r1, #1
 800960a:	441a      	add	r2, r3
 800960c:	4658      	mov	r0, fp
 800960e:	4498      	add	r8, r3
 8009610:	9208      	str	r2, [sp, #32]
 8009612:	f000 fc21 	bl	8009e58 <__i2b>
 8009616:	4605      	mov	r5, r0
 8009618:	b15e      	cbz	r6, 8009632 <_dtoa_r+0x74a>
 800961a:	9b08      	ldr	r3, [sp, #32]
 800961c:	2b00      	cmp	r3, #0
 800961e:	dd08      	ble.n	8009632 <_dtoa_r+0x74a>
 8009620:	42b3      	cmp	r3, r6
 8009622:	9a08      	ldr	r2, [sp, #32]
 8009624:	bfa8      	it	ge
 8009626:	4633      	movge	r3, r6
 8009628:	eba8 0803 	sub.w	r8, r8, r3
 800962c:	1af6      	subs	r6, r6, r3
 800962e:	1ad3      	subs	r3, r2, r3
 8009630:	9308      	str	r3, [sp, #32]
 8009632:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009634:	b1f3      	cbz	r3, 8009674 <_dtoa_r+0x78c>
 8009636:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009638:	2b00      	cmp	r3, #0
 800963a:	f000 80b7 	beq.w	80097ac <_dtoa_r+0x8c4>
 800963e:	b18c      	cbz	r4, 8009664 <_dtoa_r+0x77c>
 8009640:	4629      	mov	r1, r5
 8009642:	4622      	mov	r2, r4
 8009644:	4658      	mov	r0, fp
 8009646:	f000 fcc7 	bl	8009fd8 <__pow5mult>
 800964a:	464a      	mov	r2, r9
 800964c:	4601      	mov	r1, r0
 800964e:	4605      	mov	r5, r0
 8009650:	4658      	mov	r0, fp
 8009652:	f000 fc17 	bl	8009e84 <__multiply>
 8009656:	4649      	mov	r1, r9
 8009658:	9004      	str	r0, [sp, #16]
 800965a:	4658      	mov	r0, fp
 800965c:	f000 fb48 	bl	8009cf0 <_Bfree>
 8009660:	9b04      	ldr	r3, [sp, #16]
 8009662:	4699      	mov	r9, r3
 8009664:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009666:	1b1a      	subs	r2, r3, r4
 8009668:	d004      	beq.n	8009674 <_dtoa_r+0x78c>
 800966a:	4649      	mov	r1, r9
 800966c:	4658      	mov	r0, fp
 800966e:	f000 fcb3 	bl	8009fd8 <__pow5mult>
 8009672:	4681      	mov	r9, r0
 8009674:	2101      	movs	r1, #1
 8009676:	4658      	mov	r0, fp
 8009678:	f000 fbee 	bl	8009e58 <__i2b>
 800967c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800967e:	4604      	mov	r4, r0
 8009680:	2b00      	cmp	r3, #0
 8009682:	f000 81cf 	beq.w	8009a24 <_dtoa_r+0xb3c>
 8009686:	461a      	mov	r2, r3
 8009688:	4601      	mov	r1, r0
 800968a:	4658      	mov	r0, fp
 800968c:	f000 fca4 	bl	8009fd8 <__pow5mult>
 8009690:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009692:	2b01      	cmp	r3, #1
 8009694:	4604      	mov	r4, r0
 8009696:	f300 8095 	bgt.w	80097c4 <_dtoa_r+0x8dc>
 800969a:	9b02      	ldr	r3, [sp, #8]
 800969c:	2b00      	cmp	r3, #0
 800969e:	f040 8087 	bne.w	80097b0 <_dtoa_r+0x8c8>
 80096a2:	9b03      	ldr	r3, [sp, #12]
 80096a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	f040 8089 	bne.w	80097c0 <_dtoa_r+0x8d8>
 80096ae:	9b03      	ldr	r3, [sp, #12]
 80096b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80096b4:	0d1b      	lsrs	r3, r3, #20
 80096b6:	051b      	lsls	r3, r3, #20
 80096b8:	b12b      	cbz	r3, 80096c6 <_dtoa_r+0x7de>
 80096ba:	9b08      	ldr	r3, [sp, #32]
 80096bc:	3301      	adds	r3, #1
 80096be:	9308      	str	r3, [sp, #32]
 80096c0:	f108 0801 	add.w	r8, r8, #1
 80096c4:	2301      	movs	r3, #1
 80096c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80096c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	f000 81b0 	beq.w	8009a30 <_dtoa_r+0xb48>
 80096d0:	6923      	ldr	r3, [r4, #16]
 80096d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80096d6:	6918      	ldr	r0, [r3, #16]
 80096d8:	f000 fb72 	bl	8009dc0 <__hi0bits>
 80096dc:	f1c0 0020 	rsb	r0, r0, #32
 80096e0:	9b08      	ldr	r3, [sp, #32]
 80096e2:	4418      	add	r0, r3
 80096e4:	f010 001f 	ands.w	r0, r0, #31
 80096e8:	d077      	beq.n	80097da <_dtoa_r+0x8f2>
 80096ea:	f1c0 0320 	rsb	r3, r0, #32
 80096ee:	2b04      	cmp	r3, #4
 80096f0:	dd6b      	ble.n	80097ca <_dtoa_r+0x8e2>
 80096f2:	9b08      	ldr	r3, [sp, #32]
 80096f4:	f1c0 001c 	rsb	r0, r0, #28
 80096f8:	4403      	add	r3, r0
 80096fa:	4480      	add	r8, r0
 80096fc:	4406      	add	r6, r0
 80096fe:	9308      	str	r3, [sp, #32]
 8009700:	f1b8 0f00 	cmp.w	r8, #0
 8009704:	dd05      	ble.n	8009712 <_dtoa_r+0x82a>
 8009706:	4649      	mov	r1, r9
 8009708:	4642      	mov	r2, r8
 800970a:	4658      	mov	r0, fp
 800970c:	f000 fcbe 	bl	800a08c <__lshift>
 8009710:	4681      	mov	r9, r0
 8009712:	9b08      	ldr	r3, [sp, #32]
 8009714:	2b00      	cmp	r3, #0
 8009716:	dd05      	ble.n	8009724 <_dtoa_r+0x83c>
 8009718:	4621      	mov	r1, r4
 800971a:	461a      	mov	r2, r3
 800971c:	4658      	mov	r0, fp
 800971e:	f000 fcb5 	bl	800a08c <__lshift>
 8009722:	4604      	mov	r4, r0
 8009724:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009726:	2b00      	cmp	r3, #0
 8009728:	d059      	beq.n	80097de <_dtoa_r+0x8f6>
 800972a:	4621      	mov	r1, r4
 800972c:	4648      	mov	r0, r9
 800972e:	f000 fd19 	bl	800a164 <__mcmp>
 8009732:	2800      	cmp	r0, #0
 8009734:	da53      	bge.n	80097de <_dtoa_r+0x8f6>
 8009736:	1e7b      	subs	r3, r7, #1
 8009738:	9304      	str	r3, [sp, #16]
 800973a:	4649      	mov	r1, r9
 800973c:	2300      	movs	r3, #0
 800973e:	220a      	movs	r2, #10
 8009740:	4658      	mov	r0, fp
 8009742:	f000 faf7 	bl	8009d34 <__multadd>
 8009746:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009748:	4681      	mov	r9, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	f000 8172 	beq.w	8009a34 <_dtoa_r+0xb4c>
 8009750:	2300      	movs	r3, #0
 8009752:	4629      	mov	r1, r5
 8009754:	220a      	movs	r2, #10
 8009756:	4658      	mov	r0, fp
 8009758:	f000 faec 	bl	8009d34 <__multadd>
 800975c:	9b00      	ldr	r3, [sp, #0]
 800975e:	2b00      	cmp	r3, #0
 8009760:	4605      	mov	r5, r0
 8009762:	dc67      	bgt.n	8009834 <_dtoa_r+0x94c>
 8009764:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009766:	2b02      	cmp	r3, #2
 8009768:	dc41      	bgt.n	80097ee <_dtoa_r+0x906>
 800976a:	e063      	b.n	8009834 <_dtoa_r+0x94c>
 800976c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800976e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009772:	e746      	b.n	8009602 <_dtoa_r+0x71a>
 8009774:	9b07      	ldr	r3, [sp, #28]
 8009776:	1e5c      	subs	r4, r3, #1
 8009778:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800977a:	42a3      	cmp	r3, r4
 800977c:	bfbf      	itttt	lt
 800977e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009780:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009782:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009784:	1ae3      	sublt	r3, r4, r3
 8009786:	bfb4      	ite	lt
 8009788:	18d2      	addlt	r2, r2, r3
 800978a:	1b1c      	subge	r4, r3, r4
 800978c:	9b07      	ldr	r3, [sp, #28]
 800978e:	bfbc      	itt	lt
 8009790:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009792:	2400      	movlt	r4, #0
 8009794:	2b00      	cmp	r3, #0
 8009796:	bfb5      	itete	lt
 8009798:	eba8 0603 	sublt.w	r6, r8, r3
 800979c:	9b07      	ldrge	r3, [sp, #28]
 800979e:	2300      	movlt	r3, #0
 80097a0:	4646      	movge	r6, r8
 80097a2:	e730      	b.n	8009606 <_dtoa_r+0x71e>
 80097a4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80097a6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80097a8:	4646      	mov	r6, r8
 80097aa:	e735      	b.n	8009618 <_dtoa_r+0x730>
 80097ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80097ae:	e75c      	b.n	800966a <_dtoa_r+0x782>
 80097b0:	2300      	movs	r3, #0
 80097b2:	e788      	b.n	80096c6 <_dtoa_r+0x7de>
 80097b4:	3fe00000 	.word	0x3fe00000
 80097b8:	40240000 	.word	0x40240000
 80097bc:	40140000 	.word	0x40140000
 80097c0:	9b02      	ldr	r3, [sp, #8]
 80097c2:	e780      	b.n	80096c6 <_dtoa_r+0x7de>
 80097c4:	2300      	movs	r3, #0
 80097c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80097c8:	e782      	b.n	80096d0 <_dtoa_r+0x7e8>
 80097ca:	d099      	beq.n	8009700 <_dtoa_r+0x818>
 80097cc:	9a08      	ldr	r2, [sp, #32]
 80097ce:	331c      	adds	r3, #28
 80097d0:	441a      	add	r2, r3
 80097d2:	4498      	add	r8, r3
 80097d4:	441e      	add	r6, r3
 80097d6:	9208      	str	r2, [sp, #32]
 80097d8:	e792      	b.n	8009700 <_dtoa_r+0x818>
 80097da:	4603      	mov	r3, r0
 80097dc:	e7f6      	b.n	80097cc <_dtoa_r+0x8e4>
 80097de:	9b07      	ldr	r3, [sp, #28]
 80097e0:	9704      	str	r7, [sp, #16]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	dc20      	bgt.n	8009828 <_dtoa_r+0x940>
 80097e6:	9300      	str	r3, [sp, #0]
 80097e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097ea:	2b02      	cmp	r3, #2
 80097ec:	dd1e      	ble.n	800982c <_dtoa_r+0x944>
 80097ee:	9b00      	ldr	r3, [sp, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	f47f aec0 	bne.w	8009576 <_dtoa_r+0x68e>
 80097f6:	4621      	mov	r1, r4
 80097f8:	2205      	movs	r2, #5
 80097fa:	4658      	mov	r0, fp
 80097fc:	f000 fa9a 	bl	8009d34 <__multadd>
 8009800:	4601      	mov	r1, r0
 8009802:	4604      	mov	r4, r0
 8009804:	4648      	mov	r0, r9
 8009806:	f000 fcad 	bl	800a164 <__mcmp>
 800980a:	2800      	cmp	r0, #0
 800980c:	f77f aeb3 	ble.w	8009576 <_dtoa_r+0x68e>
 8009810:	4656      	mov	r6, sl
 8009812:	2331      	movs	r3, #49	@ 0x31
 8009814:	f806 3b01 	strb.w	r3, [r6], #1
 8009818:	9b04      	ldr	r3, [sp, #16]
 800981a:	3301      	adds	r3, #1
 800981c:	9304      	str	r3, [sp, #16]
 800981e:	e6ae      	b.n	800957e <_dtoa_r+0x696>
 8009820:	9c07      	ldr	r4, [sp, #28]
 8009822:	9704      	str	r7, [sp, #16]
 8009824:	4625      	mov	r5, r4
 8009826:	e7f3      	b.n	8009810 <_dtoa_r+0x928>
 8009828:	9b07      	ldr	r3, [sp, #28]
 800982a:	9300      	str	r3, [sp, #0]
 800982c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800982e:	2b00      	cmp	r3, #0
 8009830:	f000 8104 	beq.w	8009a3c <_dtoa_r+0xb54>
 8009834:	2e00      	cmp	r6, #0
 8009836:	dd05      	ble.n	8009844 <_dtoa_r+0x95c>
 8009838:	4629      	mov	r1, r5
 800983a:	4632      	mov	r2, r6
 800983c:	4658      	mov	r0, fp
 800983e:	f000 fc25 	bl	800a08c <__lshift>
 8009842:	4605      	mov	r5, r0
 8009844:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009846:	2b00      	cmp	r3, #0
 8009848:	d05a      	beq.n	8009900 <_dtoa_r+0xa18>
 800984a:	6869      	ldr	r1, [r5, #4]
 800984c:	4658      	mov	r0, fp
 800984e:	f000 fa0f 	bl	8009c70 <_Balloc>
 8009852:	4606      	mov	r6, r0
 8009854:	b928      	cbnz	r0, 8009862 <_dtoa_r+0x97a>
 8009856:	4b84      	ldr	r3, [pc, #528]	@ (8009a68 <_dtoa_r+0xb80>)
 8009858:	4602      	mov	r2, r0
 800985a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800985e:	f7ff bb5a 	b.w	8008f16 <_dtoa_r+0x2e>
 8009862:	692a      	ldr	r2, [r5, #16]
 8009864:	3202      	adds	r2, #2
 8009866:	0092      	lsls	r2, r2, #2
 8009868:	f105 010c 	add.w	r1, r5, #12
 800986c:	300c      	adds	r0, #12
 800986e:	f000 ffaf 	bl	800a7d0 <memcpy>
 8009872:	2201      	movs	r2, #1
 8009874:	4631      	mov	r1, r6
 8009876:	4658      	mov	r0, fp
 8009878:	f000 fc08 	bl	800a08c <__lshift>
 800987c:	f10a 0301 	add.w	r3, sl, #1
 8009880:	9307      	str	r3, [sp, #28]
 8009882:	9b00      	ldr	r3, [sp, #0]
 8009884:	4453      	add	r3, sl
 8009886:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009888:	9b02      	ldr	r3, [sp, #8]
 800988a:	f003 0301 	and.w	r3, r3, #1
 800988e:	462f      	mov	r7, r5
 8009890:	930a      	str	r3, [sp, #40]	@ 0x28
 8009892:	4605      	mov	r5, r0
 8009894:	9b07      	ldr	r3, [sp, #28]
 8009896:	4621      	mov	r1, r4
 8009898:	3b01      	subs	r3, #1
 800989a:	4648      	mov	r0, r9
 800989c:	9300      	str	r3, [sp, #0]
 800989e:	f7ff fa98 	bl	8008dd2 <quorem>
 80098a2:	4639      	mov	r1, r7
 80098a4:	9002      	str	r0, [sp, #8]
 80098a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80098aa:	4648      	mov	r0, r9
 80098ac:	f000 fc5a 	bl	800a164 <__mcmp>
 80098b0:	462a      	mov	r2, r5
 80098b2:	9008      	str	r0, [sp, #32]
 80098b4:	4621      	mov	r1, r4
 80098b6:	4658      	mov	r0, fp
 80098b8:	f000 fc70 	bl	800a19c <__mdiff>
 80098bc:	68c2      	ldr	r2, [r0, #12]
 80098be:	4606      	mov	r6, r0
 80098c0:	bb02      	cbnz	r2, 8009904 <_dtoa_r+0xa1c>
 80098c2:	4601      	mov	r1, r0
 80098c4:	4648      	mov	r0, r9
 80098c6:	f000 fc4d 	bl	800a164 <__mcmp>
 80098ca:	4602      	mov	r2, r0
 80098cc:	4631      	mov	r1, r6
 80098ce:	4658      	mov	r0, fp
 80098d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80098d2:	f000 fa0d 	bl	8009cf0 <_Bfree>
 80098d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80098da:	9e07      	ldr	r6, [sp, #28]
 80098dc:	ea43 0102 	orr.w	r1, r3, r2
 80098e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098e2:	4319      	orrs	r1, r3
 80098e4:	d110      	bne.n	8009908 <_dtoa_r+0xa20>
 80098e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80098ea:	d029      	beq.n	8009940 <_dtoa_r+0xa58>
 80098ec:	9b08      	ldr	r3, [sp, #32]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	dd02      	ble.n	80098f8 <_dtoa_r+0xa10>
 80098f2:	9b02      	ldr	r3, [sp, #8]
 80098f4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80098f8:	9b00      	ldr	r3, [sp, #0]
 80098fa:	f883 8000 	strb.w	r8, [r3]
 80098fe:	e63f      	b.n	8009580 <_dtoa_r+0x698>
 8009900:	4628      	mov	r0, r5
 8009902:	e7bb      	b.n	800987c <_dtoa_r+0x994>
 8009904:	2201      	movs	r2, #1
 8009906:	e7e1      	b.n	80098cc <_dtoa_r+0x9e4>
 8009908:	9b08      	ldr	r3, [sp, #32]
 800990a:	2b00      	cmp	r3, #0
 800990c:	db04      	blt.n	8009918 <_dtoa_r+0xa30>
 800990e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009910:	430b      	orrs	r3, r1
 8009912:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009914:	430b      	orrs	r3, r1
 8009916:	d120      	bne.n	800995a <_dtoa_r+0xa72>
 8009918:	2a00      	cmp	r2, #0
 800991a:	dded      	ble.n	80098f8 <_dtoa_r+0xa10>
 800991c:	4649      	mov	r1, r9
 800991e:	2201      	movs	r2, #1
 8009920:	4658      	mov	r0, fp
 8009922:	f000 fbb3 	bl	800a08c <__lshift>
 8009926:	4621      	mov	r1, r4
 8009928:	4681      	mov	r9, r0
 800992a:	f000 fc1b 	bl	800a164 <__mcmp>
 800992e:	2800      	cmp	r0, #0
 8009930:	dc03      	bgt.n	800993a <_dtoa_r+0xa52>
 8009932:	d1e1      	bne.n	80098f8 <_dtoa_r+0xa10>
 8009934:	f018 0f01 	tst.w	r8, #1
 8009938:	d0de      	beq.n	80098f8 <_dtoa_r+0xa10>
 800993a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800993e:	d1d8      	bne.n	80098f2 <_dtoa_r+0xa0a>
 8009940:	9a00      	ldr	r2, [sp, #0]
 8009942:	2339      	movs	r3, #57	@ 0x39
 8009944:	7013      	strb	r3, [r2, #0]
 8009946:	4633      	mov	r3, r6
 8009948:	461e      	mov	r6, r3
 800994a:	3b01      	subs	r3, #1
 800994c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009950:	2a39      	cmp	r2, #57	@ 0x39
 8009952:	d052      	beq.n	80099fa <_dtoa_r+0xb12>
 8009954:	3201      	adds	r2, #1
 8009956:	701a      	strb	r2, [r3, #0]
 8009958:	e612      	b.n	8009580 <_dtoa_r+0x698>
 800995a:	2a00      	cmp	r2, #0
 800995c:	dd07      	ble.n	800996e <_dtoa_r+0xa86>
 800995e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009962:	d0ed      	beq.n	8009940 <_dtoa_r+0xa58>
 8009964:	9a00      	ldr	r2, [sp, #0]
 8009966:	f108 0301 	add.w	r3, r8, #1
 800996a:	7013      	strb	r3, [r2, #0]
 800996c:	e608      	b.n	8009580 <_dtoa_r+0x698>
 800996e:	9b07      	ldr	r3, [sp, #28]
 8009970:	9a07      	ldr	r2, [sp, #28]
 8009972:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009976:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009978:	4293      	cmp	r3, r2
 800997a:	d028      	beq.n	80099ce <_dtoa_r+0xae6>
 800997c:	4649      	mov	r1, r9
 800997e:	2300      	movs	r3, #0
 8009980:	220a      	movs	r2, #10
 8009982:	4658      	mov	r0, fp
 8009984:	f000 f9d6 	bl	8009d34 <__multadd>
 8009988:	42af      	cmp	r7, r5
 800998a:	4681      	mov	r9, r0
 800998c:	f04f 0300 	mov.w	r3, #0
 8009990:	f04f 020a 	mov.w	r2, #10
 8009994:	4639      	mov	r1, r7
 8009996:	4658      	mov	r0, fp
 8009998:	d107      	bne.n	80099aa <_dtoa_r+0xac2>
 800999a:	f000 f9cb 	bl	8009d34 <__multadd>
 800999e:	4607      	mov	r7, r0
 80099a0:	4605      	mov	r5, r0
 80099a2:	9b07      	ldr	r3, [sp, #28]
 80099a4:	3301      	adds	r3, #1
 80099a6:	9307      	str	r3, [sp, #28]
 80099a8:	e774      	b.n	8009894 <_dtoa_r+0x9ac>
 80099aa:	f000 f9c3 	bl	8009d34 <__multadd>
 80099ae:	4629      	mov	r1, r5
 80099b0:	4607      	mov	r7, r0
 80099b2:	2300      	movs	r3, #0
 80099b4:	220a      	movs	r2, #10
 80099b6:	4658      	mov	r0, fp
 80099b8:	f000 f9bc 	bl	8009d34 <__multadd>
 80099bc:	4605      	mov	r5, r0
 80099be:	e7f0      	b.n	80099a2 <_dtoa_r+0xaba>
 80099c0:	9b00      	ldr	r3, [sp, #0]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	bfcc      	ite	gt
 80099c6:	461e      	movgt	r6, r3
 80099c8:	2601      	movle	r6, #1
 80099ca:	4456      	add	r6, sl
 80099cc:	2700      	movs	r7, #0
 80099ce:	4649      	mov	r1, r9
 80099d0:	2201      	movs	r2, #1
 80099d2:	4658      	mov	r0, fp
 80099d4:	f000 fb5a 	bl	800a08c <__lshift>
 80099d8:	4621      	mov	r1, r4
 80099da:	4681      	mov	r9, r0
 80099dc:	f000 fbc2 	bl	800a164 <__mcmp>
 80099e0:	2800      	cmp	r0, #0
 80099e2:	dcb0      	bgt.n	8009946 <_dtoa_r+0xa5e>
 80099e4:	d102      	bne.n	80099ec <_dtoa_r+0xb04>
 80099e6:	f018 0f01 	tst.w	r8, #1
 80099ea:	d1ac      	bne.n	8009946 <_dtoa_r+0xa5e>
 80099ec:	4633      	mov	r3, r6
 80099ee:	461e      	mov	r6, r3
 80099f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099f4:	2a30      	cmp	r2, #48	@ 0x30
 80099f6:	d0fa      	beq.n	80099ee <_dtoa_r+0xb06>
 80099f8:	e5c2      	b.n	8009580 <_dtoa_r+0x698>
 80099fa:	459a      	cmp	sl, r3
 80099fc:	d1a4      	bne.n	8009948 <_dtoa_r+0xa60>
 80099fe:	9b04      	ldr	r3, [sp, #16]
 8009a00:	3301      	adds	r3, #1
 8009a02:	9304      	str	r3, [sp, #16]
 8009a04:	2331      	movs	r3, #49	@ 0x31
 8009a06:	f88a 3000 	strb.w	r3, [sl]
 8009a0a:	e5b9      	b.n	8009580 <_dtoa_r+0x698>
 8009a0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a0e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009a6c <_dtoa_r+0xb84>
 8009a12:	b11b      	cbz	r3, 8009a1c <_dtoa_r+0xb34>
 8009a14:	f10a 0308 	add.w	r3, sl, #8
 8009a18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009a1a:	6013      	str	r3, [r2, #0]
 8009a1c:	4650      	mov	r0, sl
 8009a1e:	b019      	add	sp, #100	@ 0x64
 8009a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	f77f ae37 	ble.w	800969a <_dtoa_r+0x7b2>
 8009a2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a30:	2001      	movs	r0, #1
 8009a32:	e655      	b.n	80096e0 <_dtoa_r+0x7f8>
 8009a34:	9b00      	ldr	r3, [sp, #0]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	f77f aed6 	ble.w	80097e8 <_dtoa_r+0x900>
 8009a3c:	4656      	mov	r6, sl
 8009a3e:	4621      	mov	r1, r4
 8009a40:	4648      	mov	r0, r9
 8009a42:	f7ff f9c6 	bl	8008dd2 <quorem>
 8009a46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009a4a:	f806 8b01 	strb.w	r8, [r6], #1
 8009a4e:	9b00      	ldr	r3, [sp, #0]
 8009a50:	eba6 020a 	sub.w	r2, r6, sl
 8009a54:	4293      	cmp	r3, r2
 8009a56:	ddb3      	ble.n	80099c0 <_dtoa_r+0xad8>
 8009a58:	4649      	mov	r1, r9
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	220a      	movs	r2, #10
 8009a5e:	4658      	mov	r0, fp
 8009a60:	f000 f968 	bl	8009d34 <__multadd>
 8009a64:	4681      	mov	r9, r0
 8009a66:	e7ea      	b.n	8009a3e <_dtoa_r+0xb56>
 8009a68:	0800b450 	.word	0x0800b450
 8009a6c:	0800b3d4 	.word	0x0800b3d4

08009a70 <_free_r>:
 8009a70:	b538      	push	{r3, r4, r5, lr}
 8009a72:	4605      	mov	r5, r0
 8009a74:	2900      	cmp	r1, #0
 8009a76:	d041      	beq.n	8009afc <_free_r+0x8c>
 8009a78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a7c:	1f0c      	subs	r4, r1, #4
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	bfb8      	it	lt
 8009a82:	18e4      	addlt	r4, r4, r3
 8009a84:	f000 f8e8 	bl	8009c58 <__malloc_lock>
 8009a88:	4a1d      	ldr	r2, [pc, #116]	@ (8009b00 <_free_r+0x90>)
 8009a8a:	6813      	ldr	r3, [r2, #0]
 8009a8c:	b933      	cbnz	r3, 8009a9c <_free_r+0x2c>
 8009a8e:	6063      	str	r3, [r4, #4]
 8009a90:	6014      	str	r4, [r2, #0]
 8009a92:	4628      	mov	r0, r5
 8009a94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a98:	f000 b8e4 	b.w	8009c64 <__malloc_unlock>
 8009a9c:	42a3      	cmp	r3, r4
 8009a9e:	d908      	bls.n	8009ab2 <_free_r+0x42>
 8009aa0:	6820      	ldr	r0, [r4, #0]
 8009aa2:	1821      	adds	r1, r4, r0
 8009aa4:	428b      	cmp	r3, r1
 8009aa6:	bf01      	itttt	eq
 8009aa8:	6819      	ldreq	r1, [r3, #0]
 8009aaa:	685b      	ldreq	r3, [r3, #4]
 8009aac:	1809      	addeq	r1, r1, r0
 8009aae:	6021      	streq	r1, [r4, #0]
 8009ab0:	e7ed      	b.n	8009a8e <_free_r+0x1e>
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	b10b      	cbz	r3, 8009abc <_free_r+0x4c>
 8009ab8:	42a3      	cmp	r3, r4
 8009aba:	d9fa      	bls.n	8009ab2 <_free_r+0x42>
 8009abc:	6811      	ldr	r1, [r2, #0]
 8009abe:	1850      	adds	r0, r2, r1
 8009ac0:	42a0      	cmp	r0, r4
 8009ac2:	d10b      	bne.n	8009adc <_free_r+0x6c>
 8009ac4:	6820      	ldr	r0, [r4, #0]
 8009ac6:	4401      	add	r1, r0
 8009ac8:	1850      	adds	r0, r2, r1
 8009aca:	4283      	cmp	r3, r0
 8009acc:	6011      	str	r1, [r2, #0]
 8009ace:	d1e0      	bne.n	8009a92 <_free_r+0x22>
 8009ad0:	6818      	ldr	r0, [r3, #0]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	6053      	str	r3, [r2, #4]
 8009ad6:	4408      	add	r0, r1
 8009ad8:	6010      	str	r0, [r2, #0]
 8009ada:	e7da      	b.n	8009a92 <_free_r+0x22>
 8009adc:	d902      	bls.n	8009ae4 <_free_r+0x74>
 8009ade:	230c      	movs	r3, #12
 8009ae0:	602b      	str	r3, [r5, #0]
 8009ae2:	e7d6      	b.n	8009a92 <_free_r+0x22>
 8009ae4:	6820      	ldr	r0, [r4, #0]
 8009ae6:	1821      	adds	r1, r4, r0
 8009ae8:	428b      	cmp	r3, r1
 8009aea:	bf04      	itt	eq
 8009aec:	6819      	ldreq	r1, [r3, #0]
 8009aee:	685b      	ldreq	r3, [r3, #4]
 8009af0:	6063      	str	r3, [r4, #4]
 8009af2:	bf04      	itt	eq
 8009af4:	1809      	addeq	r1, r1, r0
 8009af6:	6021      	streq	r1, [r4, #0]
 8009af8:	6054      	str	r4, [r2, #4]
 8009afa:	e7ca      	b.n	8009a92 <_free_r+0x22>
 8009afc:	bd38      	pop	{r3, r4, r5, pc}
 8009afe:	bf00      	nop
 8009b00:	200024e8 	.word	0x200024e8

08009b04 <malloc>:
 8009b04:	4b02      	ldr	r3, [pc, #8]	@ (8009b10 <malloc+0xc>)
 8009b06:	4601      	mov	r1, r0
 8009b08:	6818      	ldr	r0, [r3, #0]
 8009b0a:	f000 b825 	b.w	8009b58 <_malloc_r>
 8009b0e:	bf00      	nop
 8009b10:	20000034 	.word	0x20000034

08009b14 <sbrk_aligned>:
 8009b14:	b570      	push	{r4, r5, r6, lr}
 8009b16:	4e0f      	ldr	r6, [pc, #60]	@ (8009b54 <sbrk_aligned+0x40>)
 8009b18:	460c      	mov	r4, r1
 8009b1a:	6831      	ldr	r1, [r6, #0]
 8009b1c:	4605      	mov	r5, r0
 8009b1e:	b911      	cbnz	r1, 8009b26 <sbrk_aligned+0x12>
 8009b20:	f000 fe46 	bl	800a7b0 <_sbrk_r>
 8009b24:	6030      	str	r0, [r6, #0]
 8009b26:	4621      	mov	r1, r4
 8009b28:	4628      	mov	r0, r5
 8009b2a:	f000 fe41 	bl	800a7b0 <_sbrk_r>
 8009b2e:	1c43      	adds	r3, r0, #1
 8009b30:	d103      	bne.n	8009b3a <sbrk_aligned+0x26>
 8009b32:	f04f 34ff 	mov.w	r4, #4294967295
 8009b36:	4620      	mov	r0, r4
 8009b38:	bd70      	pop	{r4, r5, r6, pc}
 8009b3a:	1cc4      	adds	r4, r0, #3
 8009b3c:	f024 0403 	bic.w	r4, r4, #3
 8009b40:	42a0      	cmp	r0, r4
 8009b42:	d0f8      	beq.n	8009b36 <sbrk_aligned+0x22>
 8009b44:	1a21      	subs	r1, r4, r0
 8009b46:	4628      	mov	r0, r5
 8009b48:	f000 fe32 	bl	800a7b0 <_sbrk_r>
 8009b4c:	3001      	adds	r0, #1
 8009b4e:	d1f2      	bne.n	8009b36 <sbrk_aligned+0x22>
 8009b50:	e7ef      	b.n	8009b32 <sbrk_aligned+0x1e>
 8009b52:	bf00      	nop
 8009b54:	200024e4 	.word	0x200024e4

08009b58 <_malloc_r>:
 8009b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b5c:	1ccd      	adds	r5, r1, #3
 8009b5e:	f025 0503 	bic.w	r5, r5, #3
 8009b62:	3508      	adds	r5, #8
 8009b64:	2d0c      	cmp	r5, #12
 8009b66:	bf38      	it	cc
 8009b68:	250c      	movcc	r5, #12
 8009b6a:	2d00      	cmp	r5, #0
 8009b6c:	4606      	mov	r6, r0
 8009b6e:	db01      	blt.n	8009b74 <_malloc_r+0x1c>
 8009b70:	42a9      	cmp	r1, r5
 8009b72:	d904      	bls.n	8009b7e <_malloc_r+0x26>
 8009b74:	230c      	movs	r3, #12
 8009b76:	6033      	str	r3, [r6, #0]
 8009b78:	2000      	movs	r0, #0
 8009b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009c54 <_malloc_r+0xfc>
 8009b82:	f000 f869 	bl	8009c58 <__malloc_lock>
 8009b86:	f8d8 3000 	ldr.w	r3, [r8]
 8009b8a:	461c      	mov	r4, r3
 8009b8c:	bb44      	cbnz	r4, 8009be0 <_malloc_r+0x88>
 8009b8e:	4629      	mov	r1, r5
 8009b90:	4630      	mov	r0, r6
 8009b92:	f7ff ffbf 	bl	8009b14 <sbrk_aligned>
 8009b96:	1c43      	adds	r3, r0, #1
 8009b98:	4604      	mov	r4, r0
 8009b9a:	d158      	bne.n	8009c4e <_malloc_r+0xf6>
 8009b9c:	f8d8 4000 	ldr.w	r4, [r8]
 8009ba0:	4627      	mov	r7, r4
 8009ba2:	2f00      	cmp	r7, #0
 8009ba4:	d143      	bne.n	8009c2e <_malloc_r+0xd6>
 8009ba6:	2c00      	cmp	r4, #0
 8009ba8:	d04b      	beq.n	8009c42 <_malloc_r+0xea>
 8009baa:	6823      	ldr	r3, [r4, #0]
 8009bac:	4639      	mov	r1, r7
 8009bae:	4630      	mov	r0, r6
 8009bb0:	eb04 0903 	add.w	r9, r4, r3
 8009bb4:	f000 fdfc 	bl	800a7b0 <_sbrk_r>
 8009bb8:	4581      	cmp	r9, r0
 8009bba:	d142      	bne.n	8009c42 <_malloc_r+0xea>
 8009bbc:	6821      	ldr	r1, [r4, #0]
 8009bbe:	1a6d      	subs	r5, r5, r1
 8009bc0:	4629      	mov	r1, r5
 8009bc2:	4630      	mov	r0, r6
 8009bc4:	f7ff ffa6 	bl	8009b14 <sbrk_aligned>
 8009bc8:	3001      	adds	r0, #1
 8009bca:	d03a      	beq.n	8009c42 <_malloc_r+0xea>
 8009bcc:	6823      	ldr	r3, [r4, #0]
 8009bce:	442b      	add	r3, r5
 8009bd0:	6023      	str	r3, [r4, #0]
 8009bd2:	f8d8 3000 	ldr.w	r3, [r8]
 8009bd6:	685a      	ldr	r2, [r3, #4]
 8009bd8:	bb62      	cbnz	r2, 8009c34 <_malloc_r+0xdc>
 8009bda:	f8c8 7000 	str.w	r7, [r8]
 8009bde:	e00f      	b.n	8009c00 <_malloc_r+0xa8>
 8009be0:	6822      	ldr	r2, [r4, #0]
 8009be2:	1b52      	subs	r2, r2, r5
 8009be4:	d420      	bmi.n	8009c28 <_malloc_r+0xd0>
 8009be6:	2a0b      	cmp	r2, #11
 8009be8:	d917      	bls.n	8009c1a <_malloc_r+0xc2>
 8009bea:	1961      	adds	r1, r4, r5
 8009bec:	42a3      	cmp	r3, r4
 8009bee:	6025      	str	r5, [r4, #0]
 8009bf0:	bf18      	it	ne
 8009bf2:	6059      	strne	r1, [r3, #4]
 8009bf4:	6863      	ldr	r3, [r4, #4]
 8009bf6:	bf08      	it	eq
 8009bf8:	f8c8 1000 	streq.w	r1, [r8]
 8009bfc:	5162      	str	r2, [r4, r5]
 8009bfe:	604b      	str	r3, [r1, #4]
 8009c00:	4630      	mov	r0, r6
 8009c02:	f000 f82f 	bl	8009c64 <__malloc_unlock>
 8009c06:	f104 000b 	add.w	r0, r4, #11
 8009c0a:	1d23      	adds	r3, r4, #4
 8009c0c:	f020 0007 	bic.w	r0, r0, #7
 8009c10:	1ac2      	subs	r2, r0, r3
 8009c12:	bf1c      	itt	ne
 8009c14:	1a1b      	subne	r3, r3, r0
 8009c16:	50a3      	strne	r3, [r4, r2]
 8009c18:	e7af      	b.n	8009b7a <_malloc_r+0x22>
 8009c1a:	6862      	ldr	r2, [r4, #4]
 8009c1c:	42a3      	cmp	r3, r4
 8009c1e:	bf0c      	ite	eq
 8009c20:	f8c8 2000 	streq.w	r2, [r8]
 8009c24:	605a      	strne	r2, [r3, #4]
 8009c26:	e7eb      	b.n	8009c00 <_malloc_r+0xa8>
 8009c28:	4623      	mov	r3, r4
 8009c2a:	6864      	ldr	r4, [r4, #4]
 8009c2c:	e7ae      	b.n	8009b8c <_malloc_r+0x34>
 8009c2e:	463c      	mov	r4, r7
 8009c30:	687f      	ldr	r7, [r7, #4]
 8009c32:	e7b6      	b.n	8009ba2 <_malloc_r+0x4a>
 8009c34:	461a      	mov	r2, r3
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	42a3      	cmp	r3, r4
 8009c3a:	d1fb      	bne.n	8009c34 <_malloc_r+0xdc>
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	6053      	str	r3, [r2, #4]
 8009c40:	e7de      	b.n	8009c00 <_malloc_r+0xa8>
 8009c42:	230c      	movs	r3, #12
 8009c44:	6033      	str	r3, [r6, #0]
 8009c46:	4630      	mov	r0, r6
 8009c48:	f000 f80c 	bl	8009c64 <__malloc_unlock>
 8009c4c:	e794      	b.n	8009b78 <_malloc_r+0x20>
 8009c4e:	6005      	str	r5, [r0, #0]
 8009c50:	e7d6      	b.n	8009c00 <_malloc_r+0xa8>
 8009c52:	bf00      	nop
 8009c54:	200024e8 	.word	0x200024e8

08009c58 <__malloc_lock>:
 8009c58:	4801      	ldr	r0, [pc, #4]	@ (8009c60 <__malloc_lock+0x8>)
 8009c5a:	f7ff b8b8 	b.w	8008dce <__retarget_lock_acquire_recursive>
 8009c5e:	bf00      	nop
 8009c60:	200024e0 	.word	0x200024e0

08009c64 <__malloc_unlock>:
 8009c64:	4801      	ldr	r0, [pc, #4]	@ (8009c6c <__malloc_unlock+0x8>)
 8009c66:	f7ff b8b3 	b.w	8008dd0 <__retarget_lock_release_recursive>
 8009c6a:	bf00      	nop
 8009c6c:	200024e0 	.word	0x200024e0

08009c70 <_Balloc>:
 8009c70:	b570      	push	{r4, r5, r6, lr}
 8009c72:	69c6      	ldr	r6, [r0, #28]
 8009c74:	4604      	mov	r4, r0
 8009c76:	460d      	mov	r5, r1
 8009c78:	b976      	cbnz	r6, 8009c98 <_Balloc+0x28>
 8009c7a:	2010      	movs	r0, #16
 8009c7c:	f7ff ff42 	bl	8009b04 <malloc>
 8009c80:	4602      	mov	r2, r0
 8009c82:	61e0      	str	r0, [r4, #28]
 8009c84:	b920      	cbnz	r0, 8009c90 <_Balloc+0x20>
 8009c86:	4b18      	ldr	r3, [pc, #96]	@ (8009ce8 <_Balloc+0x78>)
 8009c88:	4818      	ldr	r0, [pc, #96]	@ (8009cec <_Balloc+0x7c>)
 8009c8a:	216b      	movs	r1, #107	@ 0x6b
 8009c8c:	f000 fdae 	bl	800a7ec <__assert_func>
 8009c90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c94:	6006      	str	r6, [r0, #0]
 8009c96:	60c6      	str	r6, [r0, #12]
 8009c98:	69e6      	ldr	r6, [r4, #28]
 8009c9a:	68f3      	ldr	r3, [r6, #12]
 8009c9c:	b183      	cbz	r3, 8009cc0 <_Balloc+0x50>
 8009c9e:	69e3      	ldr	r3, [r4, #28]
 8009ca0:	68db      	ldr	r3, [r3, #12]
 8009ca2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ca6:	b9b8      	cbnz	r0, 8009cd8 <_Balloc+0x68>
 8009ca8:	2101      	movs	r1, #1
 8009caa:	fa01 f605 	lsl.w	r6, r1, r5
 8009cae:	1d72      	adds	r2, r6, #5
 8009cb0:	0092      	lsls	r2, r2, #2
 8009cb2:	4620      	mov	r0, r4
 8009cb4:	f000 fdb8 	bl	800a828 <_calloc_r>
 8009cb8:	b160      	cbz	r0, 8009cd4 <_Balloc+0x64>
 8009cba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009cbe:	e00e      	b.n	8009cde <_Balloc+0x6e>
 8009cc0:	2221      	movs	r2, #33	@ 0x21
 8009cc2:	2104      	movs	r1, #4
 8009cc4:	4620      	mov	r0, r4
 8009cc6:	f000 fdaf 	bl	800a828 <_calloc_r>
 8009cca:	69e3      	ldr	r3, [r4, #28]
 8009ccc:	60f0      	str	r0, [r6, #12]
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d1e4      	bne.n	8009c9e <_Balloc+0x2e>
 8009cd4:	2000      	movs	r0, #0
 8009cd6:	bd70      	pop	{r4, r5, r6, pc}
 8009cd8:	6802      	ldr	r2, [r0, #0]
 8009cda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009cde:	2300      	movs	r3, #0
 8009ce0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009ce4:	e7f7      	b.n	8009cd6 <_Balloc+0x66>
 8009ce6:	bf00      	nop
 8009ce8:	0800b3e1 	.word	0x0800b3e1
 8009cec:	0800b461 	.word	0x0800b461

08009cf0 <_Bfree>:
 8009cf0:	b570      	push	{r4, r5, r6, lr}
 8009cf2:	69c6      	ldr	r6, [r0, #28]
 8009cf4:	4605      	mov	r5, r0
 8009cf6:	460c      	mov	r4, r1
 8009cf8:	b976      	cbnz	r6, 8009d18 <_Bfree+0x28>
 8009cfa:	2010      	movs	r0, #16
 8009cfc:	f7ff ff02 	bl	8009b04 <malloc>
 8009d00:	4602      	mov	r2, r0
 8009d02:	61e8      	str	r0, [r5, #28]
 8009d04:	b920      	cbnz	r0, 8009d10 <_Bfree+0x20>
 8009d06:	4b09      	ldr	r3, [pc, #36]	@ (8009d2c <_Bfree+0x3c>)
 8009d08:	4809      	ldr	r0, [pc, #36]	@ (8009d30 <_Bfree+0x40>)
 8009d0a:	218f      	movs	r1, #143	@ 0x8f
 8009d0c:	f000 fd6e 	bl	800a7ec <__assert_func>
 8009d10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d14:	6006      	str	r6, [r0, #0]
 8009d16:	60c6      	str	r6, [r0, #12]
 8009d18:	b13c      	cbz	r4, 8009d2a <_Bfree+0x3a>
 8009d1a:	69eb      	ldr	r3, [r5, #28]
 8009d1c:	6862      	ldr	r2, [r4, #4]
 8009d1e:	68db      	ldr	r3, [r3, #12]
 8009d20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d24:	6021      	str	r1, [r4, #0]
 8009d26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009d2a:	bd70      	pop	{r4, r5, r6, pc}
 8009d2c:	0800b3e1 	.word	0x0800b3e1
 8009d30:	0800b461 	.word	0x0800b461

08009d34 <__multadd>:
 8009d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d38:	690d      	ldr	r5, [r1, #16]
 8009d3a:	4607      	mov	r7, r0
 8009d3c:	460c      	mov	r4, r1
 8009d3e:	461e      	mov	r6, r3
 8009d40:	f101 0c14 	add.w	ip, r1, #20
 8009d44:	2000      	movs	r0, #0
 8009d46:	f8dc 3000 	ldr.w	r3, [ip]
 8009d4a:	b299      	uxth	r1, r3
 8009d4c:	fb02 6101 	mla	r1, r2, r1, r6
 8009d50:	0c1e      	lsrs	r6, r3, #16
 8009d52:	0c0b      	lsrs	r3, r1, #16
 8009d54:	fb02 3306 	mla	r3, r2, r6, r3
 8009d58:	b289      	uxth	r1, r1
 8009d5a:	3001      	adds	r0, #1
 8009d5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009d60:	4285      	cmp	r5, r0
 8009d62:	f84c 1b04 	str.w	r1, [ip], #4
 8009d66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009d6a:	dcec      	bgt.n	8009d46 <__multadd+0x12>
 8009d6c:	b30e      	cbz	r6, 8009db2 <__multadd+0x7e>
 8009d6e:	68a3      	ldr	r3, [r4, #8]
 8009d70:	42ab      	cmp	r3, r5
 8009d72:	dc19      	bgt.n	8009da8 <__multadd+0x74>
 8009d74:	6861      	ldr	r1, [r4, #4]
 8009d76:	4638      	mov	r0, r7
 8009d78:	3101      	adds	r1, #1
 8009d7a:	f7ff ff79 	bl	8009c70 <_Balloc>
 8009d7e:	4680      	mov	r8, r0
 8009d80:	b928      	cbnz	r0, 8009d8e <__multadd+0x5a>
 8009d82:	4602      	mov	r2, r0
 8009d84:	4b0c      	ldr	r3, [pc, #48]	@ (8009db8 <__multadd+0x84>)
 8009d86:	480d      	ldr	r0, [pc, #52]	@ (8009dbc <__multadd+0x88>)
 8009d88:	21ba      	movs	r1, #186	@ 0xba
 8009d8a:	f000 fd2f 	bl	800a7ec <__assert_func>
 8009d8e:	6922      	ldr	r2, [r4, #16]
 8009d90:	3202      	adds	r2, #2
 8009d92:	f104 010c 	add.w	r1, r4, #12
 8009d96:	0092      	lsls	r2, r2, #2
 8009d98:	300c      	adds	r0, #12
 8009d9a:	f000 fd19 	bl	800a7d0 <memcpy>
 8009d9e:	4621      	mov	r1, r4
 8009da0:	4638      	mov	r0, r7
 8009da2:	f7ff ffa5 	bl	8009cf0 <_Bfree>
 8009da6:	4644      	mov	r4, r8
 8009da8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009dac:	3501      	adds	r5, #1
 8009dae:	615e      	str	r6, [r3, #20]
 8009db0:	6125      	str	r5, [r4, #16]
 8009db2:	4620      	mov	r0, r4
 8009db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009db8:	0800b450 	.word	0x0800b450
 8009dbc:	0800b461 	.word	0x0800b461

08009dc0 <__hi0bits>:
 8009dc0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	bf36      	itet	cc
 8009dc8:	0403      	lslcc	r3, r0, #16
 8009dca:	2000      	movcs	r0, #0
 8009dcc:	2010      	movcc	r0, #16
 8009dce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009dd2:	bf3c      	itt	cc
 8009dd4:	021b      	lslcc	r3, r3, #8
 8009dd6:	3008      	addcc	r0, #8
 8009dd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ddc:	bf3c      	itt	cc
 8009dde:	011b      	lslcc	r3, r3, #4
 8009de0:	3004      	addcc	r0, #4
 8009de2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009de6:	bf3c      	itt	cc
 8009de8:	009b      	lslcc	r3, r3, #2
 8009dea:	3002      	addcc	r0, #2
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	db05      	blt.n	8009dfc <__hi0bits+0x3c>
 8009df0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009df4:	f100 0001 	add.w	r0, r0, #1
 8009df8:	bf08      	it	eq
 8009dfa:	2020      	moveq	r0, #32
 8009dfc:	4770      	bx	lr

08009dfe <__lo0bits>:
 8009dfe:	6803      	ldr	r3, [r0, #0]
 8009e00:	4602      	mov	r2, r0
 8009e02:	f013 0007 	ands.w	r0, r3, #7
 8009e06:	d00b      	beq.n	8009e20 <__lo0bits+0x22>
 8009e08:	07d9      	lsls	r1, r3, #31
 8009e0a:	d421      	bmi.n	8009e50 <__lo0bits+0x52>
 8009e0c:	0798      	lsls	r0, r3, #30
 8009e0e:	bf49      	itett	mi
 8009e10:	085b      	lsrmi	r3, r3, #1
 8009e12:	089b      	lsrpl	r3, r3, #2
 8009e14:	2001      	movmi	r0, #1
 8009e16:	6013      	strmi	r3, [r2, #0]
 8009e18:	bf5c      	itt	pl
 8009e1a:	6013      	strpl	r3, [r2, #0]
 8009e1c:	2002      	movpl	r0, #2
 8009e1e:	4770      	bx	lr
 8009e20:	b299      	uxth	r1, r3
 8009e22:	b909      	cbnz	r1, 8009e28 <__lo0bits+0x2a>
 8009e24:	0c1b      	lsrs	r3, r3, #16
 8009e26:	2010      	movs	r0, #16
 8009e28:	b2d9      	uxtb	r1, r3
 8009e2a:	b909      	cbnz	r1, 8009e30 <__lo0bits+0x32>
 8009e2c:	3008      	adds	r0, #8
 8009e2e:	0a1b      	lsrs	r3, r3, #8
 8009e30:	0719      	lsls	r1, r3, #28
 8009e32:	bf04      	itt	eq
 8009e34:	091b      	lsreq	r3, r3, #4
 8009e36:	3004      	addeq	r0, #4
 8009e38:	0799      	lsls	r1, r3, #30
 8009e3a:	bf04      	itt	eq
 8009e3c:	089b      	lsreq	r3, r3, #2
 8009e3e:	3002      	addeq	r0, #2
 8009e40:	07d9      	lsls	r1, r3, #31
 8009e42:	d403      	bmi.n	8009e4c <__lo0bits+0x4e>
 8009e44:	085b      	lsrs	r3, r3, #1
 8009e46:	f100 0001 	add.w	r0, r0, #1
 8009e4a:	d003      	beq.n	8009e54 <__lo0bits+0x56>
 8009e4c:	6013      	str	r3, [r2, #0]
 8009e4e:	4770      	bx	lr
 8009e50:	2000      	movs	r0, #0
 8009e52:	4770      	bx	lr
 8009e54:	2020      	movs	r0, #32
 8009e56:	4770      	bx	lr

08009e58 <__i2b>:
 8009e58:	b510      	push	{r4, lr}
 8009e5a:	460c      	mov	r4, r1
 8009e5c:	2101      	movs	r1, #1
 8009e5e:	f7ff ff07 	bl	8009c70 <_Balloc>
 8009e62:	4602      	mov	r2, r0
 8009e64:	b928      	cbnz	r0, 8009e72 <__i2b+0x1a>
 8009e66:	4b05      	ldr	r3, [pc, #20]	@ (8009e7c <__i2b+0x24>)
 8009e68:	4805      	ldr	r0, [pc, #20]	@ (8009e80 <__i2b+0x28>)
 8009e6a:	f240 1145 	movw	r1, #325	@ 0x145
 8009e6e:	f000 fcbd 	bl	800a7ec <__assert_func>
 8009e72:	2301      	movs	r3, #1
 8009e74:	6144      	str	r4, [r0, #20]
 8009e76:	6103      	str	r3, [r0, #16]
 8009e78:	bd10      	pop	{r4, pc}
 8009e7a:	bf00      	nop
 8009e7c:	0800b450 	.word	0x0800b450
 8009e80:	0800b461 	.word	0x0800b461

08009e84 <__multiply>:
 8009e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e88:	4614      	mov	r4, r2
 8009e8a:	690a      	ldr	r2, [r1, #16]
 8009e8c:	6923      	ldr	r3, [r4, #16]
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	bfa8      	it	ge
 8009e92:	4623      	movge	r3, r4
 8009e94:	460f      	mov	r7, r1
 8009e96:	bfa4      	itt	ge
 8009e98:	460c      	movge	r4, r1
 8009e9a:	461f      	movge	r7, r3
 8009e9c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009ea0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009ea4:	68a3      	ldr	r3, [r4, #8]
 8009ea6:	6861      	ldr	r1, [r4, #4]
 8009ea8:	eb0a 0609 	add.w	r6, sl, r9
 8009eac:	42b3      	cmp	r3, r6
 8009eae:	b085      	sub	sp, #20
 8009eb0:	bfb8      	it	lt
 8009eb2:	3101      	addlt	r1, #1
 8009eb4:	f7ff fedc 	bl	8009c70 <_Balloc>
 8009eb8:	b930      	cbnz	r0, 8009ec8 <__multiply+0x44>
 8009eba:	4602      	mov	r2, r0
 8009ebc:	4b44      	ldr	r3, [pc, #272]	@ (8009fd0 <__multiply+0x14c>)
 8009ebe:	4845      	ldr	r0, [pc, #276]	@ (8009fd4 <__multiply+0x150>)
 8009ec0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009ec4:	f000 fc92 	bl	800a7ec <__assert_func>
 8009ec8:	f100 0514 	add.w	r5, r0, #20
 8009ecc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009ed0:	462b      	mov	r3, r5
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	4543      	cmp	r3, r8
 8009ed6:	d321      	bcc.n	8009f1c <__multiply+0x98>
 8009ed8:	f107 0114 	add.w	r1, r7, #20
 8009edc:	f104 0214 	add.w	r2, r4, #20
 8009ee0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009ee4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009ee8:	9302      	str	r3, [sp, #8]
 8009eea:	1b13      	subs	r3, r2, r4
 8009eec:	3b15      	subs	r3, #21
 8009eee:	f023 0303 	bic.w	r3, r3, #3
 8009ef2:	3304      	adds	r3, #4
 8009ef4:	f104 0715 	add.w	r7, r4, #21
 8009ef8:	42ba      	cmp	r2, r7
 8009efa:	bf38      	it	cc
 8009efc:	2304      	movcc	r3, #4
 8009efe:	9301      	str	r3, [sp, #4]
 8009f00:	9b02      	ldr	r3, [sp, #8]
 8009f02:	9103      	str	r1, [sp, #12]
 8009f04:	428b      	cmp	r3, r1
 8009f06:	d80c      	bhi.n	8009f22 <__multiply+0x9e>
 8009f08:	2e00      	cmp	r6, #0
 8009f0a:	dd03      	ble.n	8009f14 <__multiply+0x90>
 8009f0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d05b      	beq.n	8009fcc <__multiply+0x148>
 8009f14:	6106      	str	r6, [r0, #16]
 8009f16:	b005      	add	sp, #20
 8009f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f1c:	f843 2b04 	str.w	r2, [r3], #4
 8009f20:	e7d8      	b.n	8009ed4 <__multiply+0x50>
 8009f22:	f8b1 a000 	ldrh.w	sl, [r1]
 8009f26:	f1ba 0f00 	cmp.w	sl, #0
 8009f2a:	d024      	beq.n	8009f76 <__multiply+0xf2>
 8009f2c:	f104 0e14 	add.w	lr, r4, #20
 8009f30:	46a9      	mov	r9, r5
 8009f32:	f04f 0c00 	mov.w	ip, #0
 8009f36:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009f3a:	f8d9 3000 	ldr.w	r3, [r9]
 8009f3e:	fa1f fb87 	uxth.w	fp, r7
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	fb0a 330b 	mla	r3, sl, fp, r3
 8009f48:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009f4c:	f8d9 7000 	ldr.w	r7, [r9]
 8009f50:	4463      	add	r3, ip
 8009f52:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009f56:	fb0a c70b 	mla	r7, sl, fp, ip
 8009f5a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009f64:	4572      	cmp	r2, lr
 8009f66:	f849 3b04 	str.w	r3, [r9], #4
 8009f6a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009f6e:	d8e2      	bhi.n	8009f36 <__multiply+0xb2>
 8009f70:	9b01      	ldr	r3, [sp, #4]
 8009f72:	f845 c003 	str.w	ip, [r5, r3]
 8009f76:	9b03      	ldr	r3, [sp, #12]
 8009f78:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009f7c:	3104      	adds	r1, #4
 8009f7e:	f1b9 0f00 	cmp.w	r9, #0
 8009f82:	d021      	beq.n	8009fc8 <__multiply+0x144>
 8009f84:	682b      	ldr	r3, [r5, #0]
 8009f86:	f104 0c14 	add.w	ip, r4, #20
 8009f8a:	46ae      	mov	lr, r5
 8009f8c:	f04f 0a00 	mov.w	sl, #0
 8009f90:	f8bc b000 	ldrh.w	fp, [ip]
 8009f94:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009f98:	fb09 770b 	mla	r7, r9, fp, r7
 8009f9c:	4457      	add	r7, sl
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009fa4:	f84e 3b04 	str.w	r3, [lr], #4
 8009fa8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009fac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009fb0:	f8be 3000 	ldrh.w	r3, [lr]
 8009fb4:	fb09 330a 	mla	r3, r9, sl, r3
 8009fb8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009fbc:	4562      	cmp	r2, ip
 8009fbe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009fc2:	d8e5      	bhi.n	8009f90 <__multiply+0x10c>
 8009fc4:	9f01      	ldr	r7, [sp, #4]
 8009fc6:	51eb      	str	r3, [r5, r7]
 8009fc8:	3504      	adds	r5, #4
 8009fca:	e799      	b.n	8009f00 <__multiply+0x7c>
 8009fcc:	3e01      	subs	r6, #1
 8009fce:	e79b      	b.n	8009f08 <__multiply+0x84>
 8009fd0:	0800b450 	.word	0x0800b450
 8009fd4:	0800b461 	.word	0x0800b461

08009fd8 <__pow5mult>:
 8009fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fdc:	4615      	mov	r5, r2
 8009fde:	f012 0203 	ands.w	r2, r2, #3
 8009fe2:	4607      	mov	r7, r0
 8009fe4:	460e      	mov	r6, r1
 8009fe6:	d007      	beq.n	8009ff8 <__pow5mult+0x20>
 8009fe8:	4c25      	ldr	r4, [pc, #148]	@ (800a080 <__pow5mult+0xa8>)
 8009fea:	3a01      	subs	r2, #1
 8009fec:	2300      	movs	r3, #0
 8009fee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009ff2:	f7ff fe9f 	bl	8009d34 <__multadd>
 8009ff6:	4606      	mov	r6, r0
 8009ff8:	10ad      	asrs	r5, r5, #2
 8009ffa:	d03d      	beq.n	800a078 <__pow5mult+0xa0>
 8009ffc:	69fc      	ldr	r4, [r7, #28]
 8009ffe:	b97c      	cbnz	r4, 800a020 <__pow5mult+0x48>
 800a000:	2010      	movs	r0, #16
 800a002:	f7ff fd7f 	bl	8009b04 <malloc>
 800a006:	4602      	mov	r2, r0
 800a008:	61f8      	str	r0, [r7, #28]
 800a00a:	b928      	cbnz	r0, 800a018 <__pow5mult+0x40>
 800a00c:	4b1d      	ldr	r3, [pc, #116]	@ (800a084 <__pow5mult+0xac>)
 800a00e:	481e      	ldr	r0, [pc, #120]	@ (800a088 <__pow5mult+0xb0>)
 800a010:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a014:	f000 fbea 	bl	800a7ec <__assert_func>
 800a018:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a01c:	6004      	str	r4, [r0, #0]
 800a01e:	60c4      	str	r4, [r0, #12]
 800a020:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a024:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a028:	b94c      	cbnz	r4, 800a03e <__pow5mult+0x66>
 800a02a:	f240 2171 	movw	r1, #625	@ 0x271
 800a02e:	4638      	mov	r0, r7
 800a030:	f7ff ff12 	bl	8009e58 <__i2b>
 800a034:	2300      	movs	r3, #0
 800a036:	f8c8 0008 	str.w	r0, [r8, #8]
 800a03a:	4604      	mov	r4, r0
 800a03c:	6003      	str	r3, [r0, #0]
 800a03e:	f04f 0900 	mov.w	r9, #0
 800a042:	07eb      	lsls	r3, r5, #31
 800a044:	d50a      	bpl.n	800a05c <__pow5mult+0x84>
 800a046:	4631      	mov	r1, r6
 800a048:	4622      	mov	r2, r4
 800a04a:	4638      	mov	r0, r7
 800a04c:	f7ff ff1a 	bl	8009e84 <__multiply>
 800a050:	4631      	mov	r1, r6
 800a052:	4680      	mov	r8, r0
 800a054:	4638      	mov	r0, r7
 800a056:	f7ff fe4b 	bl	8009cf0 <_Bfree>
 800a05a:	4646      	mov	r6, r8
 800a05c:	106d      	asrs	r5, r5, #1
 800a05e:	d00b      	beq.n	800a078 <__pow5mult+0xa0>
 800a060:	6820      	ldr	r0, [r4, #0]
 800a062:	b938      	cbnz	r0, 800a074 <__pow5mult+0x9c>
 800a064:	4622      	mov	r2, r4
 800a066:	4621      	mov	r1, r4
 800a068:	4638      	mov	r0, r7
 800a06a:	f7ff ff0b 	bl	8009e84 <__multiply>
 800a06e:	6020      	str	r0, [r4, #0]
 800a070:	f8c0 9000 	str.w	r9, [r0]
 800a074:	4604      	mov	r4, r0
 800a076:	e7e4      	b.n	800a042 <__pow5mult+0x6a>
 800a078:	4630      	mov	r0, r6
 800a07a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a07e:	bf00      	nop
 800a080:	0800b4bc 	.word	0x0800b4bc
 800a084:	0800b3e1 	.word	0x0800b3e1
 800a088:	0800b461 	.word	0x0800b461

0800a08c <__lshift>:
 800a08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a090:	460c      	mov	r4, r1
 800a092:	6849      	ldr	r1, [r1, #4]
 800a094:	6923      	ldr	r3, [r4, #16]
 800a096:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a09a:	68a3      	ldr	r3, [r4, #8]
 800a09c:	4607      	mov	r7, r0
 800a09e:	4691      	mov	r9, r2
 800a0a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a0a4:	f108 0601 	add.w	r6, r8, #1
 800a0a8:	42b3      	cmp	r3, r6
 800a0aa:	db0b      	blt.n	800a0c4 <__lshift+0x38>
 800a0ac:	4638      	mov	r0, r7
 800a0ae:	f7ff fddf 	bl	8009c70 <_Balloc>
 800a0b2:	4605      	mov	r5, r0
 800a0b4:	b948      	cbnz	r0, 800a0ca <__lshift+0x3e>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	4b28      	ldr	r3, [pc, #160]	@ (800a15c <__lshift+0xd0>)
 800a0ba:	4829      	ldr	r0, [pc, #164]	@ (800a160 <__lshift+0xd4>)
 800a0bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a0c0:	f000 fb94 	bl	800a7ec <__assert_func>
 800a0c4:	3101      	adds	r1, #1
 800a0c6:	005b      	lsls	r3, r3, #1
 800a0c8:	e7ee      	b.n	800a0a8 <__lshift+0x1c>
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	f100 0114 	add.w	r1, r0, #20
 800a0d0:	f100 0210 	add.w	r2, r0, #16
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	4553      	cmp	r3, sl
 800a0d8:	db33      	blt.n	800a142 <__lshift+0xb6>
 800a0da:	6920      	ldr	r0, [r4, #16]
 800a0dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a0e0:	f104 0314 	add.w	r3, r4, #20
 800a0e4:	f019 091f 	ands.w	r9, r9, #31
 800a0e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a0ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a0f0:	d02b      	beq.n	800a14a <__lshift+0xbe>
 800a0f2:	f1c9 0e20 	rsb	lr, r9, #32
 800a0f6:	468a      	mov	sl, r1
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	6818      	ldr	r0, [r3, #0]
 800a0fc:	fa00 f009 	lsl.w	r0, r0, r9
 800a100:	4310      	orrs	r0, r2
 800a102:	f84a 0b04 	str.w	r0, [sl], #4
 800a106:	f853 2b04 	ldr.w	r2, [r3], #4
 800a10a:	459c      	cmp	ip, r3
 800a10c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a110:	d8f3      	bhi.n	800a0fa <__lshift+0x6e>
 800a112:	ebac 0304 	sub.w	r3, ip, r4
 800a116:	3b15      	subs	r3, #21
 800a118:	f023 0303 	bic.w	r3, r3, #3
 800a11c:	3304      	adds	r3, #4
 800a11e:	f104 0015 	add.w	r0, r4, #21
 800a122:	4584      	cmp	ip, r0
 800a124:	bf38      	it	cc
 800a126:	2304      	movcc	r3, #4
 800a128:	50ca      	str	r2, [r1, r3]
 800a12a:	b10a      	cbz	r2, 800a130 <__lshift+0xa4>
 800a12c:	f108 0602 	add.w	r6, r8, #2
 800a130:	3e01      	subs	r6, #1
 800a132:	4638      	mov	r0, r7
 800a134:	612e      	str	r6, [r5, #16]
 800a136:	4621      	mov	r1, r4
 800a138:	f7ff fdda 	bl	8009cf0 <_Bfree>
 800a13c:	4628      	mov	r0, r5
 800a13e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a142:	f842 0f04 	str.w	r0, [r2, #4]!
 800a146:	3301      	adds	r3, #1
 800a148:	e7c5      	b.n	800a0d6 <__lshift+0x4a>
 800a14a:	3904      	subs	r1, #4
 800a14c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a150:	f841 2f04 	str.w	r2, [r1, #4]!
 800a154:	459c      	cmp	ip, r3
 800a156:	d8f9      	bhi.n	800a14c <__lshift+0xc0>
 800a158:	e7ea      	b.n	800a130 <__lshift+0xa4>
 800a15a:	bf00      	nop
 800a15c:	0800b450 	.word	0x0800b450
 800a160:	0800b461 	.word	0x0800b461

0800a164 <__mcmp>:
 800a164:	690a      	ldr	r2, [r1, #16]
 800a166:	4603      	mov	r3, r0
 800a168:	6900      	ldr	r0, [r0, #16]
 800a16a:	1a80      	subs	r0, r0, r2
 800a16c:	b530      	push	{r4, r5, lr}
 800a16e:	d10e      	bne.n	800a18e <__mcmp+0x2a>
 800a170:	3314      	adds	r3, #20
 800a172:	3114      	adds	r1, #20
 800a174:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a178:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a17c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a180:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a184:	4295      	cmp	r5, r2
 800a186:	d003      	beq.n	800a190 <__mcmp+0x2c>
 800a188:	d205      	bcs.n	800a196 <__mcmp+0x32>
 800a18a:	f04f 30ff 	mov.w	r0, #4294967295
 800a18e:	bd30      	pop	{r4, r5, pc}
 800a190:	42a3      	cmp	r3, r4
 800a192:	d3f3      	bcc.n	800a17c <__mcmp+0x18>
 800a194:	e7fb      	b.n	800a18e <__mcmp+0x2a>
 800a196:	2001      	movs	r0, #1
 800a198:	e7f9      	b.n	800a18e <__mcmp+0x2a>
	...

0800a19c <__mdiff>:
 800a19c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a0:	4689      	mov	r9, r1
 800a1a2:	4606      	mov	r6, r0
 800a1a4:	4611      	mov	r1, r2
 800a1a6:	4648      	mov	r0, r9
 800a1a8:	4614      	mov	r4, r2
 800a1aa:	f7ff ffdb 	bl	800a164 <__mcmp>
 800a1ae:	1e05      	subs	r5, r0, #0
 800a1b0:	d112      	bne.n	800a1d8 <__mdiff+0x3c>
 800a1b2:	4629      	mov	r1, r5
 800a1b4:	4630      	mov	r0, r6
 800a1b6:	f7ff fd5b 	bl	8009c70 <_Balloc>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	b928      	cbnz	r0, 800a1ca <__mdiff+0x2e>
 800a1be:	4b3f      	ldr	r3, [pc, #252]	@ (800a2bc <__mdiff+0x120>)
 800a1c0:	f240 2137 	movw	r1, #567	@ 0x237
 800a1c4:	483e      	ldr	r0, [pc, #248]	@ (800a2c0 <__mdiff+0x124>)
 800a1c6:	f000 fb11 	bl	800a7ec <__assert_func>
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a1d0:	4610      	mov	r0, r2
 800a1d2:	b003      	add	sp, #12
 800a1d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1d8:	bfbc      	itt	lt
 800a1da:	464b      	movlt	r3, r9
 800a1dc:	46a1      	movlt	r9, r4
 800a1de:	4630      	mov	r0, r6
 800a1e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a1e4:	bfba      	itte	lt
 800a1e6:	461c      	movlt	r4, r3
 800a1e8:	2501      	movlt	r5, #1
 800a1ea:	2500      	movge	r5, #0
 800a1ec:	f7ff fd40 	bl	8009c70 <_Balloc>
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	b918      	cbnz	r0, 800a1fc <__mdiff+0x60>
 800a1f4:	4b31      	ldr	r3, [pc, #196]	@ (800a2bc <__mdiff+0x120>)
 800a1f6:	f240 2145 	movw	r1, #581	@ 0x245
 800a1fa:	e7e3      	b.n	800a1c4 <__mdiff+0x28>
 800a1fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a200:	6926      	ldr	r6, [r4, #16]
 800a202:	60c5      	str	r5, [r0, #12]
 800a204:	f109 0310 	add.w	r3, r9, #16
 800a208:	f109 0514 	add.w	r5, r9, #20
 800a20c:	f104 0e14 	add.w	lr, r4, #20
 800a210:	f100 0b14 	add.w	fp, r0, #20
 800a214:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a218:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a21c:	9301      	str	r3, [sp, #4]
 800a21e:	46d9      	mov	r9, fp
 800a220:	f04f 0c00 	mov.w	ip, #0
 800a224:	9b01      	ldr	r3, [sp, #4]
 800a226:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a22a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a22e:	9301      	str	r3, [sp, #4]
 800a230:	fa1f f38a 	uxth.w	r3, sl
 800a234:	4619      	mov	r1, r3
 800a236:	b283      	uxth	r3, r0
 800a238:	1acb      	subs	r3, r1, r3
 800a23a:	0c00      	lsrs	r0, r0, #16
 800a23c:	4463      	add	r3, ip
 800a23e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a242:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a246:	b29b      	uxth	r3, r3
 800a248:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a24c:	4576      	cmp	r6, lr
 800a24e:	f849 3b04 	str.w	r3, [r9], #4
 800a252:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a256:	d8e5      	bhi.n	800a224 <__mdiff+0x88>
 800a258:	1b33      	subs	r3, r6, r4
 800a25a:	3b15      	subs	r3, #21
 800a25c:	f023 0303 	bic.w	r3, r3, #3
 800a260:	3415      	adds	r4, #21
 800a262:	3304      	adds	r3, #4
 800a264:	42a6      	cmp	r6, r4
 800a266:	bf38      	it	cc
 800a268:	2304      	movcc	r3, #4
 800a26a:	441d      	add	r5, r3
 800a26c:	445b      	add	r3, fp
 800a26e:	461e      	mov	r6, r3
 800a270:	462c      	mov	r4, r5
 800a272:	4544      	cmp	r4, r8
 800a274:	d30e      	bcc.n	800a294 <__mdiff+0xf8>
 800a276:	f108 0103 	add.w	r1, r8, #3
 800a27a:	1b49      	subs	r1, r1, r5
 800a27c:	f021 0103 	bic.w	r1, r1, #3
 800a280:	3d03      	subs	r5, #3
 800a282:	45a8      	cmp	r8, r5
 800a284:	bf38      	it	cc
 800a286:	2100      	movcc	r1, #0
 800a288:	440b      	add	r3, r1
 800a28a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a28e:	b191      	cbz	r1, 800a2b6 <__mdiff+0x11a>
 800a290:	6117      	str	r7, [r2, #16]
 800a292:	e79d      	b.n	800a1d0 <__mdiff+0x34>
 800a294:	f854 1b04 	ldr.w	r1, [r4], #4
 800a298:	46e6      	mov	lr, ip
 800a29a:	0c08      	lsrs	r0, r1, #16
 800a29c:	fa1c fc81 	uxtah	ip, ip, r1
 800a2a0:	4471      	add	r1, lr
 800a2a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a2a6:	b289      	uxth	r1, r1
 800a2a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a2ac:	f846 1b04 	str.w	r1, [r6], #4
 800a2b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a2b4:	e7dd      	b.n	800a272 <__mdiff+0xd6>
 800a2b6:	3f01      	subs	r7, #1
 800a2b8:	e7e7      	b.n	800a28a <__mdiff+0xee>
 800a2ba:	bf00      	nop
 800a2bc:	0800b450 	.word	0x0800b450
 800a2c0:	0800b461 	.word	0x0800b461

0800a2c4 <__d2b>:
 800a2c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a2c8:	460f      	mov	r7, r1
 800a2ca:	2101      	movs	r1, #1
 800a2cc:	ec59 8b10 	vmov	r8, r9, d0
 800a2d0:	4616      	mov	r6, r2
 800a2d2:	f7ff fccd 	bl	8009c70 <_Balloc>
 800a2d6:	4604      	mov	r4, r0
 800a2d8:	b930      	cbnz	r0, 800a2e8 <__d2b+0x24>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	4b23      	ldr	r3, [pc, #140]	@ (800a36c <__d2b+0xa8>)
 800a2de:	4824      	ldr	r0, [pc, #144]	@ (800a370 <__d2b+0xac>)
 800a2e0:	f240 310f 	movw	r1, #783	@ 0x30f
 800a2e4:	f000 fa82 	bl	800a7ec <__assert_func>
 800a2e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a2ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a2f0:	b10d      	cbz	r5, 800a2f6 <__d2b+0x32>
 800a2f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a2f6:	9301      	str	r3, [sp, #4]
 800a2f8:	f1b8 0300 	subs.w	r3, r8, #0
 800a2fc:	d023      	beq.n	800a346 <__d2b+0x82>
 800a2fe:	4668      	mov	r0, sp
 800a300:	9300      	str	r3, [sp, #0]
 800a302:	f7ff fd7c 	bl	8009dfe <__lo0bits>
 800a306:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a30a:	b1d0      	cbz	r0, 800a342 <__d2b+0x7e>
 800a30c:	f1c0 0320 	rsb	r3, r0, #32
 800a310:	fa02 f303 	lsl.w	r3, r2, r3
 800a314:	430b      	orrs	r3, r1
 800a316:	40c2      	lsrs	r2, r0
 800a318:	6163      	str	r3, [r4, #20]
 800a31a:	9201      	str	r2, [sp, #4]
 800a31c:	9b01      	ldr	r3, [sp, #4]
 800a31e:	61a3      	str	r3, [r4, #24]
 800a320:	2b00      	cmp	r3, #0
 800a322:	bf0c      	ite	eq
 800a324:	2201      	moveq	r2, #1
 800a326:	2202      	movne	r2, #2
 800a328:	6122      	str	r2, [r4, #16]
 800a32a:	b1a5      	cbz	r5, 800a356 <__d2b+0x92>
 800a32c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a330:	4405      	add	r5, r0
 800a332:	603d      	str	r5, [r7, #0]
 800a334:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a338:	6030      	str	r0, [r6, #0]
 800a33a:	4620      	mov	r0, r4
 800a33c:	b003      	add	sp, #12
 800a33e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a342:	6161      	str	r1, [r4, #20]
 800a344:	e7ea      	b.n	800a31c <__d2b+0x58>
 800a346:	a801      	add	r0, sp, #4
 800a348:	f7ff fd59 	bl	8009dfe <__lo0bits>
 800a34c:	9b01      	ldr	r3, [sp, #4]
 800a34e:	6163      	str	r3, [r4, #20]
 800a350:	3020      	adds	r0, #32
 800a352:	2201      	movs	r2, #1
 800a354:	e7e8      	b.n	800a328 <__d2b+0x64>
 800a356:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a35a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a35e:	6038      	str	r0, [r7, #0]
 800a360:	6918      	ldr	r0, [r3, #16]
 800a362:	f7ff fd2d 	bl	8009dc0 <__hi0bits>
 800a366:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a36a:	e7e5      	b.n	800a338 <__d2b+0x74>
 800a36c:	0800b450 	.word	0x0800b450
 800a370:	0800b461 	.word	0x0800b461

0800a374 <__ssputs_r>:
 800a374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a378:	688e      	ldr	r6, [r1, #8]
 800a37a:	461f      	mov	r7, r3
 800a37c:	42be      	cmp	r6, r7
 800a37e:	680b      	ldr	r3, [r1, #0]
 800a380:	4682      	mov	sl, r0
 800a382:	460c      	mov	r4, r1
 800a384:	4690      	mov	r8, r2
 800a386:	d82d      	bhi.n	800a3e4 <__ssputs_r+0x70>
 800a388:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a38c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a390:	d026      	beq.n	800a3e0 <__ssputs_r+0x6c>
 800a392:	6965      	ldr	r5, [r4, #20]
 800a394:	6909      	ldr	r1, [r1, #16]
 800a396:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a39a:	eba3 0901 	sub.w	r9, r3, r1
 800a39e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3a2:	1c7b      	adds	r3, r7, #1
 800a3a4:	444b      	add	r3, r9
 800a3a6:	106d      	asrs	r5, r5, #1
 800a3a8:	429d      	cmp	r5, r3
 800a3aa:	bf38      	it	cc
 800a3ac:	461d      	movcc	r5, r3
 800a3ae:	0553      	lsls	r3, r2, #21
 800a3b0:	d527      	bpl.n	800a402 <__ssputs_r+0x8e>
 800a3b2:	4629      	mov	r1, r5
 800a3b4:	f7ff fbd0 	bl	8009b58 <_malloc_r>
 800a3b8:	4606      	mov	r6, r0
 800a3ba:	b360      	cbz	r0, 800a416 <__ssputs_r+0xa2>
 800a3bc:	6921      	ldr	r1, [r4, #16]
 800a3be:	464a      	mov	r2, r9
 800a3c0:	f000 fa06 	bl	800a7d0 <memcpy>
 800a3c4:	89a3      	ldrh	r3, [r4, #12]
 800a3c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a3ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3ce:	81a3      	strh	r3, [r4, #12]
 800a3d0:	6126      	str	r6, [r4, #16]
 800a3d2:	6165      	str	r5, [r4, #20]
 800a3d4:	444e      	add	r6, r9
 800a3d6:	eba5 0509 	sub.w	r5, r5, r9
 800a3da:	6026      	str	r6, [r4, #0]
 800a3dc:	60a5      	str	r5, [r4, #8]
 800a3de:	463e      	mov	r6, r7
 800a3e0:	42be      	cmp	r6, r7
 800a3e2:	d900      	bls.n	800a3e6 <__ssputs_r+0x72>
 800a3e4:	463e      	mov	r6, r7
 800a3e6:	6820      	ldr	r0, [r4, #0]
 800a3e8:	4632      	mov	r2, r6
 800a3ea:	4641      	mov	r1, r8
 800a3ec:	f000 f9c6 	bl	800a77c <memmove>
 800a3f0:	68a3      	ldr	r3, [r4, #8]
 800a3f2:	1b9b      	subs	r3, r3, r6
 800a3f4:	60a3      	str	r3, [r4, #8]
 800a3f6:	6823      	ldr	r3, [r4, #0]
 800a3f8:	4433      	add	r3, r6
 800a3fa:	6023      	str	r3, [r4, #0]
 800a3fc:	2000      	movs	r0, #0
 800a3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a402:	462a      	mov	r2, r5
 800a404:	f000 fa36 	bl	800a874 <_realloc_r>
 800a408:	4606      	mov	r6, r0
 800a40a:	2800      	cmp	r0, #0
 800a40c:	d1e0      	bne.n	800a3d0 <__ssputs_r+0x5c>
 800a40e:	6921      	ldr	r1, [r4, #16]
 800a410:	4650      	mov	r0, sl
 800a412:	f7ff fb2d 	bl	8009a70 <_free_r>
 800a416:	230c      	movs	r3, #12
 800a418:	f8ca 3000 	str.w	r3, [sl]
 800a41c:	89a3      	ldrh	r3, [r4, #12]
 800a41e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a422:	81a3      	strh	r3, [r4, #12]
 800a424:	f04f 30ff 	mov.w	r0, #4294967295
 800a428:	e7e9      	b.n	800a3fe <__ssputs_r+0x8a>
	...

0800a42c <_svfiprintf_r>:
 800a42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a430:	4698      	mov	r8, r3
 800a432:	898b      	ldrh	r3, [r1, #12]
 800a434:	061b      	lsls	r3, r3, #24
 800a436:	b09d      	sub	sp, #116	@ 0x74
 800a438:	4607      	mov	r7, r0
 800a43a:	460d      	mov	r5, r1
 800a43c:	4614      	mov	r4, r2
 800a43e:	d510      	bpl.n	800a462 <_svfiprintf_r+0x36>
 800a440:	690b      	ldr	r3, [r1, #16]
 800a442:	b973      	cbnz	r3, 800a462 <_svfiprintf_r+0x36>
 800a444:	2140      	movs	r1, #64	@ 0x40
 800a446:	f7ff fb87 	bl	8009b58 <_malloc_r>
 800a44a:	6028      	str	r0, [r5, #0]
 800a44c:	6128      	str	r0, [r5, #16]
 800a44e:	b930      	cbnz	r0, 800a45e <_svfiprintf_r+0x32>
 800a450:	230c      	movs	r3, #12
 800a452:	603b      	str	r3, [r7, #0]
 800a454:	f04f 30ff 	mov.w	r0, #4294967295
 800a458:	b01d      	add	sp, #116	@ 0x74
 800a45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a45e:	2340      	movs	r3, #64	@ 0x40
 800a460:	616b      	str	r3, [r5, #20]
 800a462:	2300      	movs	r3, #0
 800a464:	9309      	str	r3, [sp, #36]	@ 0x24
 800a466:	2320      	movs	r3, #32
 800a468:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a46c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a470:	2330      	movs	r3, #48	@ 0x30
 800a472:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a610 <_svfiprintf_r+0x1e4>
 800a476:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a47a:	f04f 0901 	mov.w	r9, #1
 800a47e:	4623      	mov	r3, r4
 800a480:	469a      	mov	sl, r3
 800a482:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a486:	b10a      	cbz	r2, 800a48c <_svfiprintf_r+0x60>
 800a488:	2a25      	cmp	r2, #37	@ 0x25
 800a48a:	d1f9      	bne.n	800a480 <_svfiprintf_r+0x54>
 800a48c:	ebba 0b04 	subs.w	fp, sl, r4
 800a490:	d00b      	beq.n	800a4aa <_svfiprintf_r+0x7e>
 800a492:	465b      	mov	r3, fp
 800a494:	4622      	mov	r2, r4
 800a496:	4629      	mov	r1, r5
 800a498:	4638      	mov	r0, r7
 800a49a:	f7ff ff6b 	bl	800a374 <__ssputs_r>
 800a49e:	3001      	adds	r0, #1
 800a4a0:	f000 80a7 	beq.w	800a5f2 <_svfiprintf_r+0x1c6>
 800a4a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4a6:	445a      	add	r2, fp
 800a4a8:	9209      	str	r2, [sp, #36]	@ 0x24
 800a4aa:	f89a 3000 	ldrb.w	r3, [sl]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	f000 809f 	beq.w	800a5f2 <_svfiprintf_r+0x1c6>
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a4ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4be:	f10a 0a01 	add.w	sl, sl, #1
 800a4c2:	9304      	str	r3, [sp, #16]
 800a4c4:	9307      	str	r3, [sp, #28]
 800a4c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a4ca:	931a      	str	r3, [sp, #104]	@ 0x68
 800a4cc:	4654      	mov	r4, sl
 800a4ce:	2205      	movs	r2, #5
 800a4d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4d4:	484e      	ldr	r0, [pc, #312]	@ (800a610 <_svfiprintf_r+0x1e4>)
 800a4d6:	f7f5 fe9b 	bl	8000210 <memchr>
 800a4da:	9a04      	ldr	r2, [sp, #16]
 800a4dc:	b9d8      	cbnz	r0, 800a516 <_svfiprintf_r+0xea>
 800a4de:	06d0      	lsls	r0, r2, #27
 800a4e0:	bf44      	itt	mi
 800a4e2:	2320      	movmi	r3, #32
 800a4e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a4e8:	0711      	lsls	r1, r2, #28
 800a4ea:	bf44      	itt	mi
 800a4ec:	232b      	movmi	r3, #43	@ 0x2b
 800a4ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a4f2:	f89a 3000 	ldrb.w	r3, [sl]
 800a4f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4f8:	d015      	beq.n	800a526 <_svfiprintf_r+0xfa>
 800a4fa:	9a07      	ldr	r2, [sp, #28]
 800a4fc:	4654      	mov	r4, sl
 800a4fe:	2000      	movs	r0, #0
 800a500:	f04f 0c0a 	mov.w	ip, #10
 800a504:	4621      	mov	r1, r4
 800a506:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a50a:	3b30      	subs	r3, #48	@ 0x30
 800a50c:	2b09      	cmp	r3, #9
 800a50e:	d94b      	bls.n	800a5a8 <_svfiprintf_r+0x17c>
 800a510:	b1b0      	cbz	r0, 800a540 <_svfiprintf_r+0x114>
 800a512:	9207      	str	r2, [sp, #28]
 800a514:	e014      	b.n	800a540 <_svfiprintf_r+0x114>
 800a516:	eba0 0308 	sub.w	r3, r0, r8
 800a51a:	fa09 f303 	lsl.w	r3, r9, r3
 800a51e:	4313      	orrs	r3, r2
 800a520:	9304      	str	r3, [sp, #16]
 800a522:	46a2      	mov	sl, r4
 800a524:	e7d2      	b.n	800a4cc <_svfiprintf_r+0xa0>
 800a526:	9b03      	ldr	r3, [sp, #12]
 800a528:	1d19      	adds	r1, r3, #4
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	9103      	str	r1, [sp, #12]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	bfbb      	ittet	lt
 800a532:	425b      	neglt	r3, r3
 800a534:	f042 0202 	orrlt.w	r2, r2, #2
 800a538:	9307      	strge	r3, [sp, #28]
 800a53a:	9307      	strlt	r3, [sp, #28]
 800a53c:	bfb8      	it	lt
 800a53e:	9204      	strlt	r2, [sp, #16]
 800a540:	7823      	ldrb	r3, [r4, #0]
 800a542:	2b2e      	cmp	r3, #46	@ 0x2e
 800a544:	d10a      	bne.n	800a55c <_svfiprintf_r+0x130>
 800a546:	7863      	ldrb	r3, [r4, #1]
 800a548:	2b2a      	cmp	r3, #42	@ 0x2a
 800a54a:	d132      	bne.n	800a5b2 <_svfiprintf_r+0x186>
 800a54c:	9b03      	ldr	r3, [sp, #12]
 800a54e:	1d1a      	adds	r2, r3, #4
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	9203      	str	r2, [sp, #12]
 800a554:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a558:	3402      	adds	r4, #2
 800a55a:	9305      	str	r3, [sp, #20]
 800a55c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a620 <_svfiprintf_r+0x1f4>
 800a560:	7821      	ldrb	r1, [r4, #0]
 800a562:	2203      	movs	r2, #3
 800a564:	4650      	mov	r0, sl
 800a566:	f7f5 fe53 	bl	8000210 <memchr>
 800a56a:	b138      	cbz	r0, 800a57c <_svfiprintf_r+0x150>
 800a56c:	9b04      	ldr	r3, [sp, #16]
 800a56e:	eba0 000a 	sub.w	r0, r0, sl
 800a572:	2240      	movs	r2, #64	@ 0x40
 800a574:	4082      	lsls	r2, r0
 800a576:	4313      	orrs	r3, r2
 800a578:	3401      	adds	r4, #1
 800a57a:	9304      	str	r3, [sp, #16]
 800a57c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a580:	4824      	ldr	r0, [pc, #144]	@ (800a614 <_svfiprintf_r+0x1e8>)
 800a582:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a586:	2206      	movs	r2, #6
 800a588:	f7f5 fe42 	bl	8000210 <memchr>
 800a58c:	2800      	cmp	r0, #0
 800a58e:	d036      	beq.n	800a5fe <_svfiprintf_r+0x1d2>
 800a590:	4b21      	ldr	r3, [pc, #132]	@ (800a618 <_svfiprintf_r+0x1ec>)
 800a592:	bb1b      	cbnz	r3, 800a5dc <_svfiprintf_r+0x1b0>
 800a594:	9b03      	ldr	r3, [sp, #12]
 800a596:	3307      	adds	r3, #7
 800a598:	f023 0307 	bic.w	r3, r3, #7
 800a59c:	3308      	adds	r3, #8
 800a59e:	9303      	str	r3, [sp, #12]
 800a5a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5a2:	4433      	add	r3, r6
 800a5a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5a6:	e76a      	b.n	800a47e <_svfiprintf_r+0x52>
 800a5a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5ac:	460c      	mov	r4, r1
 800a5ae:	2001      	movs	r0, #1
 800a5b0:	e7a8      	b.n	800a504 <_svfiprintf_r+0xd8>
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	3401      	adds	r4, #1
 800a5b6:	9305      	str	r3, [sp, #20]
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	f04f 0c0a 	mov.w	ip, #10
 800a5be:	4620      	mov	r0, r4
 800a5c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5c4:	3a30      	subs	r2, #48	@ 0x30
 800a5c6:	2a09      	cmp	r2, #9
 800a5c8:	d903      	bls.n	800a5d2 <_svfiprintf_r+0x1a6>
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d0c6      	beq.n	800a55c <_svfiprintf_r+0x130>
 800a5ce:	9105      	str	r1, [sp, #20]
 800a5d0:	e7c4      	b.n	800a55c <_svfiprintf_r+0x130>
 800a5d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5d6:	4604      	mov	r4, r0
 800a5d8:	2301      	movs	r3, #1
 800a5da:	e7f0      	b.n	800a5be <_svfiprintf_r+0x192>
 800a5dc:	ab03      	add	r3, sp, #12
 800a5de:	9300      	str	r3, [sp, #0]
 800a5e0:	462a      	mov	r2, r5
 800a5e2:	4b0e      	ldr	r3, [pc, #56]	@ (800a61c <_svfiprintf_r+0x1f0>)
 800a5e4:	a904      	add	r1, sp, #16
 800a5e6:	4638      	mov	r0, r7
 800a5e8:	f7fd fe82 	bl	80082f0 <_printf_float>
 800a5ec:	1c42      	adds	r2, r0, #1
 800a5ee:	4606      	mov	r6, r0
 800a5f0:	d1d6      	bne.n	800a5a0 <_svfiprintf_r+0x174>
 800a5f2:	89ab      	ldrh	r3, [r5, #12]
 800a5f4:	065b      	lsls	r3, r3, #25
 800a5f6:	f53f af2d 	bmi.w	800a454 <_svfiprintf_r+0x28>
 800a5fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a5fc:	e72c      	b.n	800a458 <_svfiprintf_r+0x2c>
 800a5fe:	ab03      	add	r3, sp, #12
 800a600:	9300      	str	r3, [sp, #0]
 800a602:	462a      	mov	r2, r5
 800a604:	4b05      	ldr	r3, [pc, #20]	@ (800a61c <_svfiprintf_r+0x1f0>)
 800a606:	a904      	add	r1, sp, #16
 800a608:	4638      	mov	r0, r7
 800a60a:	f7fe f909 	bl	8008820 <_printf_i>
 800a60e:	e7ed      	b.n	800a5ec <_svfiprintf_r+0x1c0>
 800a610:	0800b5b8 	.word	0x0800b5b8
 800a614:	0800b5c2 	.word	0x0800b5c2
 800a618:	080082f1 	.word	0x080082f1
 800a61c:	0800a375 	.word	0x0800a375
 800a620:	0800b5be 	.word	0x0800b5be

0800a624 <__sflush_r>:
 800a624:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a62c:	0716      	lsls	r6, r2, #28
 800a62e:	4605      	mov	r5, r0
 800a630:	460c      	mov	r4, r1
 800a632:	d454      	bmi.n	800a6de <__sflush_r+0xba>
 800a634:	684b      	ldr	r3, [r1, #4]
 800a636:	2b00      	cmp	r3, #0
 800a638:	dc02      	bgt.n	800a640 <__sflush_r+0x1c>
 800a63a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	dd48      	ble.n	800a6d2 <__sflush_r+0xae>
 800a640:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a642:	2e00      	cmp	r6, #0
 800a644:	d045      	beq.n	800a6d2 <__sflush_r+0xae>
 800a646:	2300      	movs	r3, #0
 800a648:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a64c:	682f      	ldr	r7, [r5, #0]
 800a64e:	6a21      	ldr	r1, [r4, #32]
 800a650:	602b      	str	r3, [r5, #0]
 800a652:	d030      	beq.n	800a6b6 <__sflush_r+0x92>
 800a654:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a656:	89a3      	ldrh	r3, [r4, #12]
 800a658:	0759      	lsls	r1, r3, #29
 800a65a:	d505      	bpl.n	800a668 <__sflush_r+0x44>
 800a65c:	6863      	ldr	r3, [r4, #4]
 800a65e:	1ad2      	subs	r2, r2, r3
 800a660:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a662:	b10b      	cbz	r3, 800a668 <__sflush_r+0x44>
 800a664:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a666:	1ad2      	subs	r2, r2, r3
 800a668:	2300      	movs	r3, #0
 800a66a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a66c:	6a21      	ldr	r1, [r4, #32]
 800a66e:	4628      	mov	r0, r5
 800a670:	47b0      	blx	r6
 800a672:	1c43      	adds	r3, r0, #1
 800a674:	89a3      	ldrh	r3, [r4, #12]
 800a676:	d106      	bne.n	800a686 <__sflush_r+0x62>
 800a678:	6829      	ldr	r1, [r5, #0]
 800a67a:	291d      	cmp	r1, #29
 800a67c:	d82b      	bhi.n	800a6d6 <__sflush_r+0xb2>
 800a67e:	4a2a      	ldr	r2, [pc, #168]	@ (800a728 <__sflush_r+0x104>)
 800a680:	410a      	asrs	r2, r1
 800a682:	07d6      	lsls	r6, r2, #31
 800a684:	d427      	bmi.n	800a6d6 <__sflush_r+0xb2>
 800a686:	2200      	movs	r2, #0
 800a688:	6062      	str	r2, [r4, #4]
 800a68a:	04d9      	lsls	r1, r3, #19
 800a68c:	6922      	ldr	r2, [r4, #16]
 800a68e:	6022      	str	r2, [r4, #0]
 800a690:	d504      	bpl.n	800a69c <__sflush_r+0x78>
 800a692:	1c42      	adds	r2, r0, #1
 800a694:	d101      	bne.n	800a69a <__sflush_r+0x76>
 800a696:	682b      	ldr	r3, [r5, #0]
 800a698:	b903      	cbnz	r3, 800a69c <__sflush_r+0x78>
 800a69a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a69c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a69e:	602f      	str	r7, [r5, #0]
 800a6a0:	b1b9      	cbz	r1, 800a6d2 <__sflush_r+0xae>
 800a6a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a6a6:	4299      	cmp	r1, r3
 800a6a8:	d002      	beq.n	800a6b0 <__sflush_r+0x8c>
 800a6aa:	4628      	mov	r0, r5
 800a6ac:	f7ff f9e0 	bl	8009a70 <_free_r>
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	6363      	str	r3, [r4, #52]	@ 0x34
 800a6b4:	e00d      	b.n	800a6d2 <__sflush_r+0xae>
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	4628      	mov	r0, r5
 800a6ba:	47b0      	blx	r6
 800a6bc:	4602      	mov	r2, r0
 800a6be:	1c50      	adds	r0, r2, #1
 800a6c0:	d1c9      	bne.n	800a656 <__sflush_r+0x32>
 800a6c2:	682b      	ldr	r3, [r5, #0]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d0c6      	beq.n	800a656 <__sflush_r+0x32>
 800a6c8:	2b1d      	cmp	r3, #29
 800a6ca:	d001      	beq.n	800a6d0 <__sflush_r+0xac>
 800a6cc:	2b16      	cmp	r3, #22
 800a6ce:	d11e      	bne.n	800a70e <__sflush_r+0xea>
 800a6d0:	602f      	str	r7, [r5, #0]
 800a6d2:	2000      	movs	r0, #0
 800a6d4:	e022      	b.n	800a71c <__sflush_r+0xf8>
 800a6d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6da:	b21b      	sxth	r3, r3
 800a6dc:	e01b      	b.n	800a716 <__sflush_r+0xf2>
 800a6de:	690f      	ldr	r7, [r1, #16]
 800a6e0:	2f00      	cmp	r7, #0
 800a6e2:	d0f6      	beq.n	800a6d2 <__sflush_r+0xae>
 800a6e4:	0793      	lsls	r3, r2, #30
 800a6e6:	680e      	ldr	r6, [r1, #0]
 800a6e8:	bf08      	it	eq
 800a6ea:	694b      	ldreq	r3, [r1, #20]
 800a6ec:	600f      	str	r7, [r1, #0]
 800a6ee:	bf18      	it	ne
 800a6f0:	2300      	movne	r3, #0
 800a6f2:	eba6 0807 	sub.w	r8, r6, r7
 800a6f6:	608b      	str	r3, [r1, #8]
 800a6f8:	f1b8 0f00 	cmp.w	r8, #0
 800a6fc:	dde9      	ble.n	800a6d2 <__sflush_r+0xae>
 800a6fe:	6a21      	ldr	r1, [r4, #32]
 800a700:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a702:	4643      	mov	r3, r8
 800a704:	463a      	mov	r2, r7
 800a706:	4628      	mov	r0, r5
 800a708:	47b0      	blx	r6
 800a70a:	2800      	cmp	r0, #0
 800a70c:	dc08      	bgt.n	800a720 <__sflush_r+0xfc>
 800a70e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a712:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a716:	81a3      	strh	r3, [r4, #12]
 800a718:	f04f 30ff 	mov.w	r0, #4294967295
 800a71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a720:	4407      	add	r7, r0
 800a722:	eba8 0800 	sub.w	r8, r8, r0
 800a726:	e7e7      	b.n	800a6f8 <__sflush_r+0xd4>
 800a728:	dfbffffe 	.word	0xdfbffffe

0800a72c <_fflush_r>:
 800a72c:	b538      	push	{r3, r4, r5, lr}
 800a72e:	690b      	ldr	r3, [r1, #16]
 800a730:	4605      	mov	r5, r0
 800a732:	460c      	mov	r4, r1
 800a734:	b913      	cbnz	r3, 800a73c <_fflush_r+0x10>
 800a736:	2500      	movs	r5, #0
 800a738:	4628      	mov	r0, r5
 800a73a:	bd38      	pop	{r3, r4, r5, pc}
 800a73c:	b118      	cbz	r0, 800a746 <_fflush_r+0x1a>
 800a73e:	6a03      	ldr	r3, [r0, #32]
 800a740:	b90b      	cbnz	r3, 800a746 <_fflush_r+0x1a>
 800a742:	f7fe fa19 	bl	8008b78 <__sinit>
 800a746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d0f3      	beq.n	800a736 <_fflush_r+0xa>
 800a74e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a750:	07d0      	lsls	r0, r2, #31
 800a752:	d404      	bmi.n	800a75e <_fflush_r+0x32>
 800a754:	0599      	lsls	r1, r3, #22
 800a756:	d402      	bmi.n	800a75e <_fflush_r+0x32>
 800a758:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a75a:	f7fe fb38 	bl	8008dce <__retarget_lock_acquire_recursive>
 800a75e:	4628      	mov	r0, r5
 800a760:	4621      	mov	r1, r4
 800a762:	f7ff ff5f 	bl	800a624 <__sflush_r>
 800a766:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a768:	07da      	lsls	r2, r3, #31
 800a76a:	4605      	mov	r5, r0
 800a76c:	d4e4      	bmi.n	800a738 <_fflush_r+0xc>
 800a76e:	89a3      	ldrh	r3, [r4, #12]
 800a770:	059b      	lsls	r3, r3, #22
 800a772:	d4e1      	bmi.n	800a738 <_fflush_r+0xc>
 800a774:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a776:	f7fe fb2b 	bl	8008dd0 <__retarget_lock_release_recursive>
 800a77a:	e7dd      	b.n	800a738 <_fflush_r+0xc>

0800a77c <memmove>:
 800a77c:	4288      	cmp	r0, r1
 800a77e:	b510      	push	{r4, lr}
 800a780:	eb01 0402 	add.w	r4, r1, r2
 800a784:	d902      	bls.n	800a78c <memmove+0x10>
 800a786:	4284      	cmp	r4, r0
 800a788:	4623      	mov	r3, r4
 800a78a:	d807      	bhi.n	800a79c <memmove+0x20>
 800a78c:	1e43      	subs	r3, r0, #1
 800a78e:	42a1      	cmp	r1, r4
 800a790:	d008      	beq.n	800a7a4 <memmove+0x28>
 800a792:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a796:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a79a:	e7f8      	b.n	800a78e <memmove+0x12>
 800a79c:	4402      	add	r2, r0
 800a79e:	4601      	mov	r1, r0
 800a7a0:	428a      	cmp	r2, r1
 800a7a2:	d100      	bne.n	800a7a6 <memmove+0x2a>
 800a7a4:	bd10      	pop	{r4, pc}
 800a7a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a7aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a7ae:	e7f7      	b.n	800a7a0 <memmove+0x24>

0800a7b0 <_sbrk_r>:
 800a7b0:	b538      	push	{r3, r4, r5, lr}
 800a7b2:	4d06      	ldr	r5, [pc, #24]	@ (800a7cc <_sbrk_r+0x1c>)
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	4604      	mov	r4, r0
 800a7b8:	4608      	mov	r0, r1
 800a7ba:	602b      	str	r3, [r5, #0]
 800a7bc:	f7f9 f8f4 	bl	80039a8 <_sbrk>
 800a7c0:	1c43      	adds	r3, r0, #1
 800a7c2:	d102      	bne.n	800a7ca <_sbrk_r+0x1a>
 800a7c4:	682b      	ldr	r3, [r5, #0]
 800a7c6:	b103      	cbz	r3, 800a7ca <_sbrk_r+0x1a>
 800a7c8:	6023      	str	r3, [r4, #0]
 800a7ca:	bd38      	pop	{r3, r4, r5, pc}
 800a7cc:	200024dc 	.word	0x200024dc

0800a7d0 <memcpy>:
 800a7d0:	440a      	add	r2, r1
 800a7d2:	4291      	cmp	r1, r2
 800a7d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7d8:	d100      	bne.n	800a7dc <memcpy+0xc>
 800a7da:	4770      	bx	lr
 800a7dc:	b510      	push	{r4, lr}
 800a7de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7e6:	4291      	cmp	r1, r2
 800a7e8:	d1f9      	bne.n	800a7de <memcpy+0xe>
 800a7ea:	bd10      	pop	{r4, pc}

0800a7ec <__assert_func>:
 800a7ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7ee:	4614      	mov	r4, r2
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	4b09      	ldr	r3, [pc, #36]	@ (800a818 <__assert_func+0x2c>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4605      	mov	r5, r0
 800a7f8:	68d8      	ldr	r0, [r3, #12]
 800a7fa:	b954      	cbnz	r4, 800a812 <__assert_func+0x26>
 800a7fc:	4b07      	ldr	r3, [pc, #28]	@ (800a81c <__assert_func+0x30>)
 800a7fe:	461c      	mov	r4, r3
 800a800:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a804:	9100      	str	r1, [sp, #0]
 800a806:	462b      	mov	r3, r5
 800a808:	4905      	ldr	r1, [pc, #20]	@ (800a820 <__assert_func+0x34>)
 800a80a:	f000 f86f 	bl	800a8ec <fiprintf>
 800a80e:	f000 f87f 	bl	800a910 <abort>
 800a812:	4b04      	ldr	r3, [pc, #16]	@ (800a824 <__assert_func+0x38>)
 800a814:	e7f4      	b.n	800a800 <__assert_func+0x14>
 800a816:	bf00      	nop
 800a818:	20000034 	.word	0x20000034
 800a81c:	0800b60e 	.word	0x0800b60e
 800a820:	0800b5e0 	.word	0x0800b5e0
 800a824:	0800b5d3 	.word	0x0800b5d3

0800a828 <_calloc_r>:
 800a828:	b570      	push	{r4, r5, r6, lr}
 800a82a:	fba1 5402 	umull	r5, r4, r1, r2
 800a82e:	b93c      	cbnz	r4, 800a840 <_calloc_r+0x18>
 800a830:	4629      	mov	r1, r5
 800a832:	f7ff f991 	bl	8009b58 <_malloc_r>
 800a836:	4606      	mov	r6, r0
 800a838:	b928      	cbnz	r0, 800a846 <_calloc_r+0x1e>
 800a83a:	2600      	movs	r6, #0
 800a83c:	4630      	mov	r0, r6
 800a83e:	bd70      	pop	{r4, r5, r6, pc}
 800a840:	220c      	movs	r2, #12
 800a842:	6002      	str	r2, [r0, #0]
 800a844:	e7f9      	b.n	800a83a <_calloc_r+0x12>
 800a846:	462a      	mov	r2, r5
 800a848:	4621      	mov	r1, r4
 800a84a:	f7fe fa42 	bl	8008cd2 <memset>
 800a84e:	e7f5      	b.n	800a83c <_calloc_r+0x14>

0800a850 <__ascii_mbtowc>:
 800a850:	b082      	sub	sp, #8
 800a852:	b901      	cbnz	r1, 800a856 <__ascii_mbtowc+0x6>
 800a854:	a901      	add	r1, sp, #4
 800a856:	b142      	cbz	r2, 800a86a <__ascii_mbtowc+0x1a>
 800a858:	b14b      	cbz	r3, 800a86e <__ascii_mbtowc+0x1e>
 800a85a:	7813      	ldrb	r3, [r2, #0]
 800a85c:	600b      	str	r3, [r1, #0]
 800a85e:	7812      	ldrb	r2, [r2, #0]
 800a860:	1e10      	subs	r0, r2, #0
 800a862:	bf18      	it	ne
 800a864:	2001      	movne	r0, #1
 800a866:	b002      	add	sp, #8
 800a868:	4770      	bx	lr
 800a86a:	4610      	mov	r0, r2
 800a86c:	e7fb      	b.n	800a866 <__ascii_mbtowc+0x16>
 800a86e:	f06f 0001 	mvn.w	r0, #1
 800a872:	e7f8      	b.n	800a866 <__ascii_mbtowc+0x16>

0800a874 <_realloc_r>:
 800a874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a878:	4680      	mov	r8, r0
 800a87a:	4615      	mov	r5, r2
 800a87c:	460c      	mov	r4, r1
 800a87e:	b921      	cbnz	r1, 800a88a <_realloc_r+0x16>
 800a880:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a884:	4611      	mov	r1, r2
 800a886:	f7ff b967 	b.w	8009b58 <_malloc_r>
 800a88a:	b92a      	cbnz	r2, 800a898 <_realloc_r+0x24>
 800a88c:	f7ff f8f0 	bl	8009a70 <_free_r>
 800a890:	2400      	movs	r4, #0
 800a892:	4620      	mov	r0, r4
 800a894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a898:	f000 f841 	bl	800a91e <_malloc_usable_size_r>
 800a89c:	4285      	cmp	r5, r0
 800a89e:	4606      	mov	r6, r0
 800a8a0:	d802      	bhi.n	800a8a8 <_realloc_r+0x34>
 800a8a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a8a6:	d8f4      	bhi.n	800a892 <_realloc_r+0x1e>
 800a8a8:	4629      	mov	r1, r5
 800a8aa:	4640      	mov	r0, r8
 800a8ac:	f7ff f954 	bl	8009b58 <_malloc_r>
 800a8b0:	4607      	mov	r7, r0
 800a8b2:	2800      	cmp	r0, #0
 800a8b4:	d0ec      	beq.n	800a890 <_realloc_r+0x1c>
 800a8b6:	42b5      	cmp	r5, r6
 800a8b8:	462a      	mov	r2, r5
 800a8ba:	4621      	mov	r1, r4
 800a8bc:	bf28      	it	cs
 800a8be:	4632      	movcs	r2, r6
 800a8c0:	f7ff ff86 	bl	800a7d0 <memcpy>
 800a8c4:	4621      	mov	r1, r4
 800a8c6:	4640      	mov	r0, r8
 800a8c8:	f7ff f8d2 	bl	8009a70 <_free_r>
 800a8cc:	463c      	mov	r4, r7
 800a8ce:	e7e0      	b.n	800a892 <_realloc_r+0x1e>

0800a8d0 <__ascii_wctomb>:
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	4608      	mov	r0, r1
 800a8d4:	b141      	cbz	r1, 800a8e8 <__ascii_wctomb+0x18>
 800a8d6:	2aff      	cmp	r2, #255	@ 0xff
 800a8d8:	d904      	bls.n	800a8e4 <__ascii_wctomb+0x14>
 800a8da:	228a      	movs	r2, #138	@ 0x8a
 800a8dc:	601a      	str	r2, [r3, #0]
 800a8de:	f04f 30ff 	mov.w	r0, #4294967295
 800a8e2:	4770      	bx	lr
 800a8e4:	700a      	strb	r2, [r1, #0]
 800a8e6:	2001      	movs	r0, #1
 800a8e8:	4770      	bx	lr
	...

0800a8ec <fiprintf>:
 800a8ec:	b40e      	push	{r1, r2, r3}
 800a8ee:	b503      	push	{r0, r1, lr}
 800a8f0:	4601      	mov	r1, r0
 800a8f2:	ab03      	add	r3, sp, #12
 800a8f4:	4805      	ldr	r0, [pc, #20]	@ (800a90c <fiprintf+0x20>)
 800a8f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8fa:	6800      	ldr	r0, [r0, #0]
 800a8fc:	9301      	str	r3, [sp, #4]
 800a8fe:	f000 f83f 	bl	800a980 <_vfiprintf_r>
 800a902:	b002      	add	sp, #8
 800a904:	f85d eb04 	ldr.w	lr, [sp], #4
 800a908:	b003      	add	sp, #12
 800a90a:	4770      	bx	lr
 800a90c:	20000034 	.word	0x20000034

0800a910 <abort>:
 800a910:	b508      	push	{r3, lr}
 800a912:	2006      	movs	r0, #6
 800a914:	f000 fa08 	bl	800ad28 <raise>
 800a918:	2001      	movs	r0, #1
 800a91a:	f7f8 ffcd 	bl	80038b8 <_exit>

0800a91e <_malloc_usable_size_r>:
 800a91e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a922:	1f18      	subs	r0, r3, #4
 800a924:	2b00      	cmp	r3, #0
 800a926:	bfbc      	itt	lt
 800a928:	580b      	ldrlt	r3, [r1, r0]
 800a92a:	18c0      	addlt	r0, r0, r3
 800a92c:	4770      	bx	lr

0800a92e <__sfputc_r>:
 800a92e:	6893      	ldr	r3, [r2, #8]
 800a930:	3b01      	subs	r3, #1
 800a932:	2b00      	cmp	r3, #0
 800a934:	b410      	push	{r4}
 800a936:	6093      	str	r3, [r2, #8]
 800a938:	da08      	bge.n	800a94c <__sfputc_r+0x1e>
 800a93a:	6994      	ldr	r4, [r2, #24]
 800a93c:	42a3      	cmp	r3, r4
 800a93e:	db01      	blt.n	800a944 <__sfputc_r+0x16>
 800a940:	290a      	cmp	r1, #10
 800a942:	d103      	bne.n	800a94c <__sfputc_r+0x1e>
 800a944:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a948:	f000 b932 	b.w	800abb0 <__swbuf_r>
 800a94c:	6813      	ldr	r3, [r2, #0]
 800a94e:	1c58      	adds	r0, r3, #1
 800a950:	6010      	str	r0, [r2, #0]
 800a952:	7019      	strb	r1, [r3, #0]
 800a954:	4608      	mov	r0, r1
 800a956:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a95a:	4770      	bx	lr

0800a95c <__sfputs_r>:
 800a95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a95e:	4606      	mov	r6, r0
 800a960:	460f      	mov	r7, r1
 800a962:	4614      	mov	r4, r2
 800a964:	18d5      	adds	r5, r2, r3
 800a966:	42ac      	cmp	r4, r5
 800a968:	d101      	bne.n	800a96e <__sfputs_r+0x12>
 800a96a:	2000      	movs	r0, #0
 800a96c:	e007      	b.n	800a97e <__sfputs_r+0x22>
 800a96e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a972:	463a      	mov	r2, r7
 800a974:	4630      	mov	r0, r6
 800a976:	f7ff ffda 	bl	800a92e <__sfputc_r>
 800a97a:	1c43      	adds	r3, r0, #1
 800a97c:	d1f3      	bne.n	800a966 <__sfputs_r+0xa>
 800a97e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a980 <_vfiprintf_r>:
 800a980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a984:	460d      	mov	r5, r1
 800a986:	b09d      	sub	sp, #116	@ 0x74
 800a988:	4614      	mov	r4, r2
 800a98a:	4698      	mov	r8, r3
 800a98c:	4606      	mov	r6, r0
 800a98e:	b118      	cbz	r0, 800a998 <_vfiprintf_r+0x18>
 800a990:	6a03      	ldr	r3, [r0, #32]
 800a992:	b90b      	cbnz	r3, 800a998 <_vfiprintf_r+0x18>
 800a994:	f7fe f8f0 	bl	8008b78 <__sinit>
 800a998:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a99a:	07d9      	lsls	r1, r3, #31
 800a99c:	d405      	bmi.n	800a9aa <_vfiprintf_r+0x2a>
 800a99e:	89ab      	ldrh	r3, [r5, #12]
 800a9a0:	059a      	lsls	r2, r3, #22
 800a9a2:	d402      	bmi.n	800a9aa <_vfiprintf_r+0x2a>
 800a9a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9a6:	f7fe fa12 	bl	8008dce <__retarget_lock_acquire_recursive>
 800a9aa:	89ab      	ldrh	r3, [r5, #12]
 800a9ac:	071b      	lsls	r3, r3, #28
 800a9ae:	d501      	bpl.n	800a9b4 <_vfiprintf_r+0x34>
 800a9b0:	692b      	ldr	r3, [r5, #16]
 800a9b2:	b99b      	cbnz	r3, 800a9dc <_vfiprintf_r+0x5c>
 800a9b4:	4629      	mov	r1, r5
 800a9b6:	4630      	mov	r0, r6
 800a9b8:	f000 f938 	bl	800ac2c <__swsetup_r>
 800a9bc:	b170      	cbz	r0, 800a9dc <_vfiprintf_r+0x5c>
 800a9be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9c0:	07dc      	lsls	r4, r3, #31
 800a9c2:	d504      	bpl.n	800a9ce <_vfiprintf_r+0x4e>
 800a9c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c8:	b01d      	add	sp, #116	@ 0x74
 800a9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ce:	89ab      	ldrh	r3, [r5, #12]
 800a9d0:	0598      	lsls	r0, r3, #22
 800a9d2:	d4f7      	bmi.n	800a9c4 <_vfiprintf_r+0x44>
 800a9d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9d6:	f7fe f9fb 	bl	8008dd0 <__retarget_lock_release_recursive>
 800a9da:	e7f3      	b.n	800a9c4 <_vfiprintf_r+0x44>
 800a9dc:	2300      	movs	r3, #0
 800a9de:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9e0:	2320      	movs	r3, #32
 800a9e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a9e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9ea:	2330      	movs	r3, #48	@ 0x30
 800a9ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ab9c <_vfiprintf_r+0x21c>
 800a9f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a9f4:	f04f 0901 	mov.w	r9, #1
 800a9f8:	4623      	mov	r3, r4
 800a9fa:	469a      	mov	sl, r3
 800a9fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa00:	b10a      	cbz	r2, 800aa06 <_vfiprintf_r+0x86>
 800aa02:	2a25      	cmp	r2, #37	@ 0x25
 800aa04:	d1f9      	bne.n	800a9fa <_vfiprintf_r+0x7a>
 800aa06:	ebba 0b04 	subs.w	fp, sl, r4
 800aa0a:	d00b      	beq.n	800aa24 <_vfiprintf_r+0xa4>
 800aa0c:	465b      	mov	r3, fp
 800aa0e:	4622      	mov	r2, r4
 800aa10:	4629      	mov	r1, r5
 800aa12:	4630      	mov	r0, r6
 800aa14:	f7ff ffa2 	bl	800a95c <__sfputs_r>
 800aa18:	3001      	adds	r0, #1
 800aa1a:	f000 80a7 	beq.w	800ab6c <_vfiprintf_r+0x1ec>
 800aa1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa20:	445a      	add	r2, fp
 800aa22:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa24:	f89a 3000 	ldrb.w	r3, [sl]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	f000 809f 	beq.w	800ab6c <_vfiprintf_r+0x1ec>
 800aa2e:	2300      	movs	r3, #0
 800aa30:	f04f 32ff 	mov.w	r2, #4294967295
 800aa34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa38:	f10a 0a01 	add.w	sl, sl, #1
 800aa3c:	9304      	str	r3, [sp, #16]
 800aa3e:	9307      	str	r3, [sp, #28]
 800aa40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa44:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa46:	4654      	mov	r4, sl
 800aa48:	2205      	movs	r2, #5
 800aa4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa4e:	4853      	ldr	r0, [pc, #332]	@ (800ab9c <_vfiprintf_r+0x21c>)
 800aa50:	f7f5 fbde 	bl	8000210 <memchr>
 800aa54:	9a04      	ldr	r2, [sp, #16]
 800aa56:	b9d8      	cbnz	r0, 800aa90 <_vfiprintf_r+0x110>
 800aa58:	06d1      	lsls	r1, r2, #27
 800aa5a:	bf44      	itt	mi
 800aa5c:	2320      	movmi	r3, #32
 800aa5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa62:	0713      	lsls	r3, r2, #28
 800aa64:	bf44      	itt	mi
 800aa66:	232b      	movmi	r3, #43	@ 0x2b
 800aa68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa6c:	f89a 3000 	ldrb.w	r3, [sl]
 800aa70:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa72:	d015      	beq.n	800aaa0 <_vfiprintf_r+0x120>
 800aa74:	9a07      	ldr	r2, [sp, #28]
 800aa76:	4654      	mov	r4, sl
 800aa78:	2000      	movs	r0, #0
 800aa7a:	f04f 0c0a 	mov.w	ip, #10
 800aa7e:	4621      	mov	r1, r4
 800aa80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa84:	3b30      	subs	r3, #48	@ 0x30
 800aa86:	2b09      	cmp	r3, #9
 800aa88:	d94b      	bls.n	800ab22 <_vfiprintf_r+0x1a2>
 800aa8a:	b1b0      	cbz	r0, 800aaba <_vfiprintf_r+0x13a>
 800aa8c:	9207      	str	r2, [sp, #28]
 800aa8e:	e014      	b.n	800aaba <_vfiprintf_r+0x13a>
 800aa90:	eba0 0308 	sub.w	r3, r0, r8
 800aa94:	fa09 f303 	lsl.w	r3, r9, r3
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	9304      	str	r3, [sp, #16]
 800aa9c:	46a2      	mov	sl, r4
 800aa9e:	e7d2      	b.n	800aa46 <_vfiprintf_r+0xc6>
 800aaa0:	9b03      	ldr	r3, [sp, #12]
 800aaa2:	1d19      	adds	r1, r3, #4
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	9103      	str	r1, [sp, #12]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	bfbb      	ittet	lt
 800aaac:	425b      	neglt	r3, r3
 800aaae:	f042 0202 	orrlt.w	r2, r2, #2
 800aab2:	9307      	strge	r3, [sp, #28]
 800aab4:	9307      	strlt	r3, [sp, #28]
 800aab6:	bfb8      	it	lt
 800aab8:	9204      	strlt	r2, [sp, #16]
 800aaba:	7823      	ldrb	r3, [r4, #0]
 800aabc:	2b2e      	cmp	r3, #46	@ 0x2e
 800aabe:	d10a      	bne.n	800aad6 <_vfiprintf_r+0x156>
 800aac0:	7863      	ldrb	r3, [r4, #1]
 800aac2:	2b2a      	cmp	r3, #42	@ 0x2a
 800aac4:	d132      	bne.n	800ab2c <_vfiprintf_r+0x1ac>
 800aac6:	9b03      	ldr	r3, [sp, #12]
 800aac8:	1d1a      	adds	r2, r3, #4
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	9203      	str	r2, [sp, #12]
 800aace:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aad2:	3402      	adds	r4, #2
 800aad4:	9305      	str	r3, [sp, #20]
 800aad6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800abac <_vfiprintf_r+0x22c>
 800aada:	7821      	ldrb	r1, [r4, #0]
 800aadc:	2203      	movs	r2, #3
 800aade:	4650      	mov	r0, sl
 800aae0:	f7f5 fb96 	bl	8000210 <memchr>
 800aae4:	b138      	cbz	r0, 800aaf6 <_vfiprintf_r+0x176>
 800aae6:	9b04      	ldr	r3, [sp, #16]
 800aae8:	eba0 000a 	sub.w	r0, r0, sl
 800aaec:	2240      	movs	r2, #64	@ 0x40
 800aaee:	4082      	lsls	r2, r0
 800aaf0:	4313      	orrs	r3, r2
 800aaf2:	3401      	adds	r4, #1
 800aaf4:	9304      	str	r3, [sp, #16]
 800aaf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aafa:	4829      	ldr	r0, [pc, #164]	@ (800aba0 <_vfiprintf_r+0x220>)
 800aafc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ab00:	2206      	movs	r2, #6
 800ab02:	f7f5 fb85 	bl	8000210 <memchr>
 800ab06:	2800      	cmp	r0, #0
 800ab08:	d03f      	beq.n	800ab8a <_vfiprintf_r+0x20a>
 800ab0a:	4b26      	ldr	r3, [pc, #152]	@ (800aba4 <_vfiprintf_r+0x224>)
 800ab0c:	bb1b      	cbnz	r3, 800ab56 <_vfiprintf_r+0x1d6>
 800ab0e:	9b03      	ldr	r3, [sp, #12]
 800ab10:	3307      	adds	r3, #7
 800ab12:	f023 0307 	bic.w	r3, r3, #7
 800ab16:	3308      	adds	r3, #8
 800ab18:	9303      	str	r3, [sp, #12]
 800ab1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab1c:	443b      	add	r3, r7
 800ab1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab20:	e76a      	b.n	800a9f8 <_vfiprintf_r+0x78>
 800ab22:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab26:	460c      	mov	r4, r1
 800ab28:	2001      	movs	r0, #1
 800ab2a:	e7a8      	b.n	800aa7e <_vfiprintf_r+0xfe>
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	3401      	adds	r4, #1
 800ab30:	9305      	str	r3, [sp, #20]
 800ab32:	4619      	mov	r1, r3
 800ab34:	f04f 0c0a 	mov.w	ip, #10
 800ab38:	4620      	mov	r0, r4
 800ab3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab3e:	3a30      	subs	r2, #48	@ 0x30
 800ab40:	2a09      	cmp	r2, #9
 800ab42:	d903      	bls.n	800ab4c <_vfiprintf_r+0x1cc>
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d0c6      	beq.n	800aad6 <_vfiprintf_r+0x156>
 800ab48:	9105      	str	r1, [sp, #20]
 800ab4a:	e7c4      	b.n	800aad6 <_vfiprintf_r+0x156>
 800ab4c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab50:	4604      	mov	r4, r0
 800ab52:	2301      	movs	r3, #1
 800ab54:	e7f0      	b.n	800ab38 <_vfiprintf_r+0x1b8>
 800ab56:	ab03      	add	r3, sp, #12
 800ab58:	9300      	str	r3, [sp, #0]
 800ab5a:	462a      	mov	r2, r5
 800ab5c:	4b12      	ldr	r3, [pc, #72]	@ (800aba8 <_vfiprintf_r+0x228>)
 800ab5e:	a904      	add	r1, sp, #16
 800ab60:	4630      	mov	r0, r6
 800ab62:	f7fd fbc5 	bl	80082f0 <_printf_float>
 800ab66:	4607      	mov	r7, r0
 800ab68:	1c78      	adds	r0, r7, #1
 800ab6a:	d1d6      	bne.n	800ab1a <_vfiprintf_r+0x19a>
 800ab6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab6e:	07d9      	lsls	r1, r3, #31
 800ab70:	d405      	bmi.n	800ab7e <_vfiprintf_r+0x1fe>
 800ab72:	89ab      	ldrh	r3, [r5, #12]
 800ab74:	059a      	lsls	r2, r3, #22
 800ab76:	d402      	bmi.n	800ab7e <_vfiprintf_r+0x1fe>
 800ab78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab7a:	f7fe f929 	bl	8008dd0 <__retarget_lock_release_recursive>
 800ab7e:	89ab      	ldrh	r3, [r5, #12]
 800ab80:	065b      	lsls	r3, r3, #25
 800ab82:	f53f af1f 	bmi.w	800a9c4 <_vfiprintf_r+0x44>
 800ab86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab88:	e71e      	b.n	800a9c8 <_vfiprintf_r+0x48>
 800ab8a:	ab03      	add	r3, sp, #12
 800ab8c:	9300      	str	r3, [sp, #0]
 800ab8e:	462a      	mov	r2, r5
 800ab90:	4b05      	ldr	r3, [pc, #20]	@ (800aba8 <_vfiprintf_r+0x228>)
 800ab92:	a904      	add	r1, sp, #16
 800ab94:	4630      	mov	r0, r6
 800ab96:	f7fd fe43 	bl	8008820 <_printf_i>
 800ab9a:	e7e4      	b.n	800ab66 <_vfiprintf_r+0x1e6>
 800ab9c:	0800b5b8 	.word	0x0800b5b8
 800aba0:	0800b5c2 	.word	0x0800b5c2
 800aba4:	080082f1 	.word	0x080082f1
 800aba8:	0800a95d 	.word	0x0800a95d
 800abac:	0800b5be 	.word	0x0800b5be

0800abb0 <__swbuf_r>:
 800abb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abb2:	460e      	mov	r6, r1
 800abb4:	4614      	mov	r4, r2
 800abb6:	4605      	mov	r5, r0
 800abb8:	b118      	cbz	r0, 800abc2 <__swbuf_r+0x12>
 800abba:	6a03      	ldr	r3, [r0, #32]
 800abbc:	b90b      	cbnz	r3, 800abc2 <__swbuf_r+0x12>
 800abbe:	f7fd ffdb 	bl	8008b78 <__sinit>
 800abc2:	69a3      	ldr	r3, [r4, #24]
 800abc4:	60a3      	str	r3, [r4, #8]
 800abc6:	89a3      	ldrh	r3, [r4, #12]
 800abc8:	071a      	lsls	r2, r3, #28
 800abca:	d501      	bpl.n	800abd0 <__swbuf_r+0x20>
 800abcc:	6923      	ldr	r3, [r4, #16]
 800abce:	b943      	cbnz	r3, 800abe2 <__swbuf_r+0x32>
 800abd0:	4621      	mov	r1, r4
 800abd2:	4628      	mov	r0, r5
 800abd4:	f000 f82a 	bl	800ac2c <__swsetup_r>
 800abd8:	b118      	cbz	r0, 800abe2 <__swbuf_r+0x32>
 800abda:	f04f 37ff 	mov.w	r7, #4294967295
 800abde:	4638      	mov	r0, r7
 800abe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abe2:	6823      	ldr	r3, [r4, #0]
 800abe4:	6922      	ldr	r2, [r4, #16]
 800abe6:	1a98      	subs	r0, r3, r2
 800abe8:	6963      	ldr	r3, [r4, #20]
 800abea:	b2f6      	uxtb	r6, r6
 800abec:	4283      	cmp	r3, r0
 800abee:	4637      	mov	r7, r6
 800abf0:	dc05      	bgt.n	800abfe <__swbuf_r+0x4e>
 800abf2:	4621      	mov	r1, r4
 800abf4:	4628      	mov	r0, r5
 800abf6:	f7ff fd99 	bl	800a72c <_fflush_r>
 800abfa:	2800      	cmp	r0, #0
 800abfc:	d1ed      	bne.n	800abda <__swbuf_r+0x2a>
 800abfe:	68a3      	ldr	r3, [r4, #8]
 800ac00:	3b01      	subs	r3, #1
 800ac02:	60a3      	str	r3, [r4, #8]
 800ac04:	6823      	ldr	r3, [r4, #0]
 800ac06:	1c5a      	adds	r2, r3, #1
 800ac08:	6022      	str	r2, [r4, #0]
 800ac0a:	701e      	strb	r6, [r3, #0]
 800ac0c:	6962      	ldr	r2, [r4, #20]
 800ac0e:	1c43      	adds	r3, r0, #1
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d004      	beq.n	800ac1e <__swbuf_r+0x6e>
 800ac14:	89a3      	ldrh	r3, [r4, #12]
 800ac16:	07db      	lsls	r3, r3, #31
 800ac18:	d5e1      	bpl.n	800abde <__swbuf_r+0x2e>
 800ac1a:	2e0a      	cmp	r6, #10
 800ac1c:	d1df      	bne.n	800abde <__swbuf_r+0x2e>
 800ac1e:	4621      	mov	r1, r4
 800ac20:	4628      	mov	r0, r5
 800ac22:	f7ff fd83 	bl	800a72c <_fflush_r>
 800ac26:	2800      	cmp	r0, #0
 800ac28:	d0d9      	beq.n	800abde <__swbuf_r+0x2e>
 800ac2a:	e7d6      	b.n	800abda <__swbuf_r+0x2a>

0800ac2c <__swsetup_r>:
 800ac2c:	b538      	push	{r3, r4, r5, lr}
 800ac2e:	4b29      	ldr	r3, [pc, #164]	@ (800acd4 <__swsetup_r+0xa8>)
 800ac30:	4605      	mov	r5, r0
 800ac32:	6818      	ldr	r0, [r3, #0]
 800ac34:	460c      	mov	r4, r1
 800ac36:	b118      	cbz	r0, 800ac40 <__swsetup_r+0x14>
 800ac38:	6a03      	ldr	r3, [r0, #32]
 800ac3a:	b90b      	cbnz	r3, 800ac40 <__swsetup_r+0x14>
 800ac3c:	f7fd ff9c 	bl	8008b78 <__sinit>
 800ac40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac44:	0719      	lsls	r1, r3, #28
 800ac46:	d422      	bmi.n	800ac8e <__swsetup_r+0x62>
 800ac48:	06da      	lsls	r2, r3, #27
 800ac4a:	d407      	bmi.n	800ac5c <__swsetup_r+0x30>
 800ac4c:	2209      	movs	r2, #9
 800ac4e:	602a      	str	r2, [r5, #0]
 800ac50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac54:	81a3      	strh	r3, [r4, #12]
 800ac56:	f04f 30ff 	mov.w	r0, #4294967295
 800ac5a:	e033      	b.n	800acc4 <__swsetup_r+0x98>
 800ac5c:	0758      	lsls	r0, r3, #29
 800ac5e:	d512      	bpl.n	800ac86 <__swsetup_r+0x5a>
 800ac60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac62:	b141      	cbz	r1, 800ac76 <__swsetup_r+0x4a>
 800ac64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac68:	4299      	cmp	r1, r3
 800ac6a:	d002      	beq.n	800ac72 <__swsetup_r+0x46>
 800ac6c:	4628      	mov	r0, r5
 800ac6e:	f7fe feff 	bl	8009a70 <_free_r>
 800ac72:	2300      	movs	r3, #0
 800ac74:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac76:	89a3      	ldrh	r3, [r4, #12]
 800ac78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ac7c:	81a3      	strh	r3, [r4, #12]
 800ac7e:	2300      	movs	r3, #0
 800ac80:	6063      	str	r3, [r4, #4]
 800ac82:	6923      	ldr	r3, [r4, #16]
 800ac84:	6023      	str	r3, [r4, #0]
 800ac86:	89a3      	ldrh	r3, [r4, #12]
 800ac88:	f043 0308 	orr.w	r3, r3, #8
 800ac8c:	81a3      	strh	r3, [r4, #12]
 800ac8e:	6923      	ldr	r3, [r4, #16]
 800ac90:	b94b      	cbnz	r3, 800aca6 <__swsetup_r+0x7a>
 800ac92:	89a3      	ldrh	r3, [r4, #12]
 800ac94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ac98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac9c:	d003      	beq.n	800aca6 <__swsetup_r+0x7a>
 800ac9e:	4621      	mov	r1, r4
 800aca0:	4628      	mov	r0, r5
 800aca2:	f000 f883 	bl	800adac <__smakebuf_r>
 800aca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acaa:	f013 0201 	ands.w	r2, r3, #1
 800acae:	d00a      	beq.n	800acc6 <__swsetup_r+0x9a>
 800acb0:	2200      	movs	r2, #0
 800acb2:	60a2      	str	r2, [r4, #8]
 800acb4:	6962      	ldr	r2, [r4, #20]
 800acb6:	4252      	negs	r2, r2
 800acb8:	61a2      	str	r2, [r4, #24]
 800acba:	6922      	ldr	r2, [r4, #16]
 800acbc:	b942      	cbnz	r2, 800acd0 <__swsetup_r+0xa4>
 800acbe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800acc2:	d1c5      	bne.n	800ac50 <__swsetup_r+0x24>
 800acc4:	bd38      	pop	{r3, r4, r5, pc}
 800acc6:	0799      	lsls	r1, r3, #30
 800acc8:	bf58      	it	pl
 800acca:	6962      	ldrpl	r2, [r4, #20]
 800accc:	60a2      	str	r2, [r4, #8]
 800acce:	e7f4      	b.n	800acba <__swsetup_r+0x8e>
 800acd0:	2000      	movs	r0, #0
 800acd2:	e7f7      	b.n	800acc4 <__swsetup_r+0x98>
 800acd4:	20000034 	.word	0x20000034

0800acd8 <_raise_r>:
 800acd8:	291f      	cmp	r1, #31
 800acda:	b538      	push	{r3, r4, r5, lr}
 800acdc:	4605      	mov	r5, r0
 800acde:	460c      	mov	r4, r1
 800ace0:	d904      	bls.n	800acec <_raise_r+0x14>
 800ace2:	2316      	movs	r3, #22
 800ace4:	6003      	str	r3, [r0, #0]
 800ace6:	f04f 30ff 	mov.w	r0, #4294967295
 800acea:	bd38      	pop	{r3, r4, r5, pc}
 800acec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800acee:	b112      	cbz	r2, 800acf6 <_raise_r+0x1e>
 800acf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800acf4:	b94b      	cbnz	r3, 800ad0a <_raise_r+0x32>
 800acf6:	4628      	mov	r0, r5
 800acf8:	f000 f830 	bl	800ad5c <_getpid_r>
 800acfc:	4622      	mov	r2, r4
 800acfe:	4601      	mov	r1, r0
 800ad00:	4628      	mov	r0, r5
 800ad02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad06:	f000 b817 	b.w	800ad38 <_kill_r>
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d00a      	beq.n	800ad24 <_raise_r+0x4c>
 800ad0e:	1c59      	adds	r1, r3, #1
 800ad10:	d103      	bne.n	800ad1a <_raise_r+0x42>
 800ad12:	2316      	movs	r3, #22
 800ad14:	6003      	str	r3, [r0, #0]
 800ad16:	2001      	movs	r0, #1
 800ad18:	e7e7      	b.n	800acea <_raise_r+0x12>
 800ad1a:	2100      	movs	r1, #0
 800ad1c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ad20:	4620      	mov	r0, r4
 800ad22:	4798      	blx	r3
 800ad24:	2000      	movs	r0, #0
 800ad26:	e7e0      	b.n	800acea <_raise_r+0x12>

0800ad28 <raise>:
 800ad28:	4b02      	ldr	r3, [pc, #8]	@ (800ad34 <raise+0xc>)
 800ad2a:	4601      	mov	r1, r0
 800ad2c:	6818      	ldr	r0, [r3, #0]
 800ad2e:	f7ff bfd3 	b.w	800acd8 <_raise_r>
 800ad32:	bf00      	nop
 800ad34:	20000034 	.word	0x20000034

0800ad38 <_kill_r>:
 800ad38:	b538      	push	{r3, r4, r5, lr}
 800ad3a:	4d07      	ldr	r5, [pc, #28]	@ (800ad58 <_kill_r+0x20>)
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	4604      	mov	r4, r0
 800ad40:	4608      	mov	r0, r1
 800ad42:	4611      	mov	r1, r2
 800ad44:	602b      	str	r3, [r5, #0]
 800ad46:	f7f8 fda7 	bl	8003898 <_kill>
 800ad4a:	1c43      	adds	r3, r0, #1
 800ad4c:	d102      	bne.n	800ad54 <_kill_r+0x1c>
 800ad4e:	682b      	ldr	r3, [r5, #0]
 800ad50:	b103      	cbz	r3, 800ad54 <_kill_r+0x1c>
 800ad52:	6023      	str	r3, [r4, #0]
 800ad54:	bd38      	pop	{r3, r4, r5, pc}
 800ad56:	bf00      	nop
 800ad58:	200024dc 	.word	0x200024dc

0800ad5c <_getpid_r>:
 800ad5c:	f7f8 bd94 	b.w	8003888 <_getpid>

0800ad60 <__swhatbuf_r>:
 800ad60:	b570      	push	{r4, r5, r6, lr}
 800ad62:	460c      	mov	r4, r1
 800ad64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad68:	2900      	cmp	r1, #0
 800ad6a:	b096      	sub	sp, #88	@ 0x58
 800ad6c:	4615      	mov	r5, r2
 800ad6e:	461e      	mov	r6, r3
 800ad70:	da0d      	bge.n	800ad8e <__swhatbuf_r+0x2e>
 800ad72:	89a3      	ldrh	r3, [r4, #12]
 800ad74:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ad78:	f04f 0100 	mov.w	r1, #0
 800ad7c:	bf14      	ite	ne
 800ad7e:	2340      	movne	r3, #64	@ 0x40
 800ad80:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ad84:	2000      	movs	r0, #0
 800ad86:	6031      	str	r1, [r6, #0]
 800ad88:	602b      	str	r3, [r5, #0]
 800ad8a:	b016      	add	sp, #88	@ 0x58
 800ad8c:	bd70      	pop	{r4, r5, r6, pc}
 800ad8e:	466a      	mov	r2, sp
 800ad90:	f000 f848 	bl	800ae24 <_fstat_r>
 800ad94:	2800      	cmp	r0, #0
 800ad96:	dbec      	blt.n	800ad72 <__swhatbuf_r+0x12>
 800ad98:	9901      	ldr	r1, [sp, #4]
 800ad9a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ad9e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ada2:	4259      	negs	r1, r3
 800ada4:	4159      	adcs	r1, r3
 800ada6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800adaa:	e7eb      	b.n	800ad84 <__swhatbuf_r+0x24>

0800adac <__smakebuf_r>:
 800adac:	898b      	ldrh	r3, [r1, #12]
 800adae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adb0:	079d      	lsls	r5, r3, #30
 800adb2:	4606      	mov	r6, r0
 800adb4:	460c      	mov	r4, r1
 800adb6:	d507      	bpl.n	800adc8 <__smakebuf_r+0x1c>
 800adb8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800adbc:	6023      	str	r3, [r4, #0]
 800adbe:	6123      	str	r3, [r4, #16]
 800adc0:	2301      	movs	r3, #1
 800adc2:	6163      	str	r3, [r4, #20]
 800adc4:	b003      	add	sp, #12
 800adc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adc8:	ab01      	add	r3, sp, #4
 800adca:	466a      	mov	r2, sp
 800adcc:	f7ff ffc8 	bl	800ad60 <__swhatbuf_r>
 800add0:	9f00      	ldr	r7, [sp, #0]
 800add2:	4605      	mov	r5, r0
 800add4:	4639      	mov	r1, r7
 800add6:	4630      	mov	r0, r6
 800add8:	f7fe febe 	bl	8009b58 <_malloc_r>
 800addc:	b948      	cbnz	r0, 800adf2 <__smakebuf_r+0x46>
 800adde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ade2:	059a      	lsls	r2, r3, #22
 800ade4:	d4ee      	bmi.n	800adc4 <__smakebuf_r+0x18>
 800ade6:	f023 0303 	bic.w	r3, r3, #3
 800adea:	f043 0302 	orr.w	r3, r3, #2
 800adee:	81a3      	strh	r3, [r4, #12]
 800adf0:	e7e2      	b.n	800adb8 <__smakebuf_r+0xc>
 800adf2:	89a3      	ldrh	r3, [r4, #12]
 800adf4:	6020      	str	r0, [r4, #0]
 800adf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adfa:	81a3      	strh	r3, [r4, #12]
 800adfc:	9b01      	ldr	r3, [sp, #4]
 800adfe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ae02:	b15b      	cbz	r3, 800ae1c <__smakebuf_r+0x70>
 800ae04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae08:	4630      	mov	r0, r6
 800ae0a:	f000 f81d 	bl	800ae48 <_isatty_r>
 800ae0e:	b128      	cbz	r0, 800ae1c <__smakebuf_r+0x70>
 800ae10:	89a3      	ldrh	r3, [r4, #12]
 800ae12:	f023 0303 	bic.w	r3, r3, #3
 800ae16:	f043 0301 	orr.w	r3, r3, #1
 800ae1a:	81a3      	strh	r3, [r4, #12]
 800ae1c:	89a3      	ldrh	r3, [r4, #12]
 800ae1e:	431d      	orrs	r5, r3
 800ae20:	81a5      	strh	r5, [r4, #12]
 800ae22:	e7cf      	b.n	800adc4 <__smakebuf_r+0x18>

0800ae24 <_fstat_r>:
 800ae24:	b538      	push	{r3, r4, r5, lr}
 800ae26:	4d07      	ldr	r5, [pc, #28]	@ (800ae44 <_fstat_r+0x20>)
 800ae28:	2300      	movs	r3, #0
 800ae2a:	4604      	mov	r4, r0
 800ae2c:	4608      	mov	r0, r1
 800ae2e:	4611      	mov	r1, r2
 800ae30:	602b      	str	r3, [r5, #0]
 800ae32:	f7f8 fd91 	bl	8003958 <_fstat>
 800ae36:	1c43      	adds	r3, r0, #1
 800ae38:	d102      	bne.n	800ae40 <_fstat_r+0x1c>
 800ae3a:	682b      	ldr	r3, [r5, #0]
 800ae3c:	b103      	cbz	r3, 800ae40 <_fstat_r+0x1c>
 800ae3e:	6023      	str	r3, [r4, #0]
 800ae40:	bd38      	pop	{r3, r4, r5, pc}
 800ae42:	bf00      	nop
 800ae44:	200024dc 	.word	0x200024dc

0800ae48 <_isatty_r>:
 800ae48:	b538      	push	{r3, r4, r5, lr}
 800ae4a:	4d06      	ldr	r5, [pc, #24]	@ (800ae64 <_isatty_r+0x1c>)
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	4604      	mov	r4, r0
 800ae50:	4608      	mov	r0, r1
 800ae52:	602b      	str	r3, [r5, #0]
 800ae54:	f7f8 fd90 	bl	8003978 <_isatty>
 800ae58:	1c43      	adds	r3, r0, #1
 800ae5a:	d102      	bne.n	800ae62 <_isatty_r+0x1a>
 800ae5c:	682b      	ldr	r3, [r5, #0]
 800ae5e:	b103      	cbz	r3, 800ae62 <_isatty_r+0x1a>
 800ae60:	6023      	str	r3, [r4, #0]
 800ae62:	bd38      	pop	{r3, r4, r5, pc}
 800ae64:	200024dc 	.word	0x200024dc

0800ae68 <_init>:
 800ae68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae6a:	bf00      	nop
 800ae6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae6e:	bc08      	pop	{r3}
 800ae70:	469e      	mov	lr, r3
 800ae72:	4770      	bx	lr

0800ae74 <_fini>:
 800ae74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae76:	bf00      	nop
 800ae78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae7a:	bc08      	pop	{r3}
 800ae7c:	469e      	mov	lr, r3
 800ae7e:	4770      	bx	lr
