
LCR-Meter-Embedded-STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4d0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c8  0800c6a0  0800c6a0  0000d6a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf68  0800cf68  0000e1f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf68  0800cf68  0000df68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf70  0800cf70  0000e1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf70  0800cf70  0000df70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cf74  0800cf74  0000df74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800cf78  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002344  200001f0  0800d168  0000e1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002534  0800d168  0000e534  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001163c  00000000  00000000  0000e220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e3d  00000000  00000000  0001f85c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  000226a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cf6  00000000  00000000  00023768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024d0a  00000000  00000000  0002445e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001506c  00000000  00000000  00049168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e03e4  00000000  00000000  0005e1d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013e5b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d1c  00000000  00000000  0013e5fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00144318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c688 	.word	0x0800c688

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	0800c688 	.word	0x0800c688

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b98a 	b.w	8000fb4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f826 	bl	8000cf8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_f2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	f7ff fc65 	bl	8000588 <__aeabi_f2d>
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf0 <__aeabi_f2ulz+0x38>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	4606      	mov	r6, r0
 8000cc4:	460f      	mov	r7, r1
 8000cc6:	f7ff fcb7 	bl	8000638 <__aeabi_dmul>
 8000cca:	f000 f975 	bl	8000fb8 <__aeabi_d2uiz>
 8000cce:	4604      	mov	r4, r0
 8000cd0:	f7ff fc38 	bl	8000544 <__aeabi_ui2d>
 8000cd4:	4b07      	ldr	r3, [pc, #28]	@ (8000cf4 <__aeabi_f2ulz+0x3c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f7ff fcae 	bl	8000638 <__aeabi_dmul>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	460b      	mov	r3, r1
 8000ce0:	4630      	mov	r0, r6
 8000ce2:	4639      	mov	r1, r7
 8000ce4:	f7ff faf0 	bl	80002c8 <__aeabi_dsub>
 8000ce8:	f000 f966 	bl	8000fb8 <__aeabi_d2uiz>
 8000cec:	4621      	mov	r1, r4
 8000cee:	bdd0      	pop	{r4, r6, r7, pc}
 8000cf0:	3df00000 	.word	0x3df00000
 8000cf4:	41f00000 	.word	0x41f00000

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	460c      	mov	r4, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14e      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d04:	4694      	mov	ip, r2
 8000d06:	458c      	cmp	ip, r1
 8000d08:	4686      	mov	lr, r0
 8000d0a:	fab2 f282 	clz	r2, r2
 8000d0e:	d962      	bls.n	8000dd6 <__udivmoddi4+0xde>
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0320 	rsb	r3, r2, #32
 8000d16:	4091      	lsls	r1, r2
 8000d18:	fa20 f303 	lsr.w	r3, r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	4319      	orrs	r1, r3
 8000d22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2a:	fa1f f68c 	uxth.w	r6, ip
 8000d2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb07 1114 	mls	r1, r7, r4, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb04 f106 	mul.w	r1, r4, r6
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d4e:	f080 8112 	bcs.w	8000f76 <__udivmoddi4+0x27e>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 810f 	bls.w	8000f76 <__udivmoddi4+0x27e>
 8000d58:	3c02      	subs	r4, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a59      	subs	r1, r3, r1
 8000d5e:	fa1f f38e 	uxth.w	r3, lr
 8000d62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d66:	fb07 1110 	mls	r1, r7, r0, r1
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb00 f606 	mul.w	r6, r0, r6
 8000d72:	429e      	cmp	r6, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x94>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d7e:	f080 80fc 	bcs.w	8000f7a <__udivmoddi4+0x282>
 8000d82:	429e      	cmp	r6, r3
 8000d84:	f240 80f9 	bls.w	8000f7a <__udivmoddi4+0x282>
 8000d88:	4463      	add	r3, ip
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d92:	2100      	movs	r1, #0
 8000d94:	b11d      	cbz	r5, 8000d9e <__udivmoddi4+0xa6>
 8000d96:	40d3      	lsrs	r3, r2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d905      	bls.n	8000db2 <__udivmoddi4+0xba>
 8000da6:	b10d      	cbz	r5, 8000dac <__udivmoddi4+0xb4>
 8000da8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	4608      	mov	r0, r1
 8000db0:	e7f5      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000db2:	fab3 f183 	clz	r1, r3
 8000db6:	2900      	cmp	r1, #0
 8000db8:	d146      	bne.n	8000e48 <__udivmoddi4+0x150>
 8000dba:	42a3      	cmp	r3, r4
 8000dbc:	d302      	bcc.n	8000dc4 <__udivmoddi4+0xcc>
 8000dbe:	4290      	cmp	r0, r2
 8000dc0:	f0c0 80f0 	bcc.w	8000fa4 <__udivmoddi4+0x2ac>
 8000dc4:	1a86      	subs	r6, r0, r2
 8000dc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dca:	2001      	movs	r0, #1
 8000dcc:	2d00      	cmp	r5, #0
 8000dce:	d0e6      	beq.n	8000d9e <__udivmoddi4+0xa6>
 8000dd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dd4:	e7e3      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	f040 8090 	bne.w	8000efc <__udivmoddi4+0x204>
 8000ddc:	eba1 040c 	sub.w	r4, r1, ip
 8000de0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de4:	fa1f f78c 	uxth.w	r7, ip
 8000de8:	2101      	movs	r1, #1
 8000dea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000df2:	fb08 4416 	mls	r4, r8, r6, r4
 8000df6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dfa:	fb07 f006 	mul.w	r0, r7, r6
 8000dfe:	4298      	cmp	r0, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x11c>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x11a>
 8000e0c:	4298      	cmp	r0, r3
 8000e0e:	f200 80cd 	bhi.w	8000fac <__udivmoddi4+0x2b4>
 8000e12:	4626      	mov	r6, r4
 8000e14:	1a1c      	subs	r4, r3, r0
 8000e16:	fa1f f38e 	uxth.w	r3, lr
 8000e1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb00 f707 	mul.w	r7, r0, r7
 8000e2a:	429f      	cmp	r7, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x148>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x146>
 8000e38:	429f      	cmp	r7, r3
 8000e3a:	f200 80b0 	bhi.w	8000f9e <__udivmoddi4+0x2a6>
 8000e3e:	4620      	mov	r0, r4
 8000e40:	1bdb      	subs	r3, r3, r7
 8000e42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e46:	e7a5      	b.n	8000d94 <__udivmoddi4+0x9c>
 8000e48:	f1c1 0620 	rsb	r6, r1, #32
 8000e4c:	408b      	lsls	r3, r1
 8000e4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e52:	431f      	orrs	r7, r3
 8000e54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e58:	fa04 f301 	lsl.w	r3, r4, r1
 8000e5c:	ea43 030c 	orr.w	r3, r3, ip
 8000e60:	40f4      	lsrs	r4, r6
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	0c38      	lsrs	r0, r7, #16
 8000e68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e70:	fa1f fc87 	uxth.w	ip, r7
 8000e74:	fb00 441e 	mls	r4, r0, lr, r4
 8000e78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e80:	45a1      	cmp	r9, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	d90a      	bls.n	8000e9e <__udivmoddi4+0x1a6>
 8000e88:	193c      	adds	r4, r7, r4
 8000e8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e8e:	f080 8084 	bcs.w	8000f9a <__udivmoddi4+0x2a2>
 8000e92:	45a1      	cmp	r9, r4
 8000e94:	f240 8081 	bls.w	8000f9a <__udivmoddi4+0x2a2>
 8000e98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	eba4 0409 	sub.w	r4, r4, r9
 8000ea2:	fa1f f983 	uxth.w	r9, r3
 8000ea6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eaa:	fb00 4413 	mls	r4, r0, r3, r4
 8000eae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb6:	45a4      	cmp	ip, r4
 8000eb8:	d907      	bls.n	8000eca <__udivmoddi4+0x1d2>
 8000eba:	193c      	adds	r4, r7, r4
 8000ebc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ec0:	d267      	bcs.n	8000f92 <__udivmoddi4+0x29a>
 8000ec2:	45a4      	cmp	ip, r4
 8000ec4:	d965      	bls.n	8000f92 <__udivmoddi4+0x29a>
 8000ec6:	3b02      	subs	r3, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ece:	fba0 9302 	umull	r9, r3, r0, r2
 8000ed2:	eba4 040c 	sub.w	r4, r4, ip
 8000ed6:	429c      	cmp	r4, r3
 8000ed8:	46ce      	mov	lr, r9
 8000eda:	469c      	mov	ip, r3
 8000edc:	d351      	bcc.n	8000f82 <__udivmoddi4+0x28a>
 8000ede:	d04e      	beq.n	8000f7e <__udivmoddi4+0x286>
 8000ee0:	b155      	cbz	r5, 8000ef8 <__udivmoddi4+0x200>
 8000ee2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ee6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eea:	fa04 f606 	lsl.w	r6, r4, r6
 8000eee:	40cb      	lsrs	r3, r1
 8000ef0:	431e      	orrs	r6, r3
 8000ef2:	40cc      	lsrs	r4, r1
 8000ef4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef8:	2100      	movs	r1, #0
 8000efa:	e750      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000efc:	f1c2 0320 	rsb	r3, r2, #32
 8000f00:	fa20 f103 	lsr.w	r1, r0, r3
 8000f04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f08:	fa24 f303 	lsr.w	r3, r4, r3
 8000f0c:	4094      	lsls	r4, r2
 8000f0e:	430c      	orrs	r4, r1
 8000f10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f18:	fa1f f78c 	uxth.w	r7, ip
 8000f1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f20:	fb08 3110 	mls	r1, r8, r0, r3
 8000f24:	0c23      	lsrs	r3, r4, #16
 8000f26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f2a:	fb00 f107 	mul.w	r1, r0, r7
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x24c>
 8000f32:	eb1c 0303 	adds.w	r3, ip, r3
 8000f36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f3a:	d22c      	bcs.n	8000f96 <__udivmoddi4+0x29e>
 8000f3c:	4299      	cmp	r1, r3
 8000f3e:	d92a      	bls.n	8000f96 <__udivmoddi4+0x29e>
 8000f40:	3802      	subs	r0, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	1a5b      	subs	r3, r3, r1
 8000f46:	b2a4      	uxth	r4, r4
 8000f48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f54:	fb01 f307 	mul.w	r3, r1, r7
 8000f58:	42a3      	cmp	r3, r4
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x276>
 8000f5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f64:	d213      	bcs.n	8000f8e <__udivmoddi4+0x296>
 8000f66:	42a3      	cmp	r3, r4
 8000f68:	d911      	bls.n	8000f8e <__udivmoddi4+0x296>
 8000f6a:	3902      	subs	r1, #2
 8000f6c:	4464      	add	r4, ip
 8000f6e:	1ae4      	subs	r4, r4, r3
 8000f70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f74:	e739      	b.n	8000dea <__udivmoddi4+0xf2>
 8000f76:	4604      	mov	r4, r0
 8000f78:	e6f0      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e706      	b.n	8000d8c <__udivmoddi4+0x94>
 8000f7e:	45c8      	cmp	r8, r9
 8000f80:	d2ae      	bcs.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f8a:	3801      	subs	r0, #1
 8000f8c:	e7a8      	b.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f8e:	4631      	mov	r1, r6
 8000f90:	e7ed      	b.n	8000f6e <__udivmoddi4+0x276>
 8000f92:	4603      	mov	r3, r0
 8000f94:	e799      	b.n	8000eca <__udivmoddi4+0x1d2>
 8000f96:	4630      	mov	r0, r6
 8000f98:	e7d4      	b.n	8000f44 <__udivmoddi4+0x24c>
 8000f9a:	46d6      	mov	lr, sl
 8000f9c:	e77f      	b.n	8000e9e <__udivmoddi4+0x1a6>
 8000f9e:	4463      	add	r3, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e74d      	b.n	8000e40 <__udivmoddi4+0x148>
 8000fa4:	4606      	mov	r6, r0
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e70f      	b.n	8000dcc <__udivmoddi4+0xd4>
 8000fac:	3e02      	subs	r6, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	e730      	b.n	8000e14 <__udivmoddi4+0x11c>
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <__aeabi_d2uiz>:
 8000fb8:	004a      	lsls	r2, r1, #1
 8000fba:	d211      	bcs.n	8000fe0 <__aeabi_d2uiz+0x28>
 8000fbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000fc0:	d211      	bcs.n	8000fe6 <__aeabi_d2uiz+0x2e>
 8000fc2:	d50d      	bpl.n	8000fe0 <__aeabi_d2uiz+0x28>
 8000fc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000fc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fcc:	d40e      	bmi.n	8000fec <__aeabi_d2uiz+0x34>
 8000fce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fda:	fa23 f002 	lsr.w	r0, r3, r2
 8000fde:	4770      	bx	lr
 8000fe0:	f04f 0000 	mov.w	r0, #0
 8000fe4:	4770      	bx	lr
 8000fe6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000fea:	d102      	bne.n	8000ff2 <__aeabi_d2uiz+0x3a>
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff0:	4770      	bx	lr
 8000ff2:	f04f 0000 	mov.w	r0, #0
 8000ff6:	4770      	bx	lr

08000ff8 <AD9833_write>:

// MaKE SURE THIS IS DEFINED IN THE main.c FILE
extern SPI_HandleTypeDef hspi1; // SPI handle (Assuming SPI1 is used)


void AD9833_write(uint8_t data_high, uint8_t data_low) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	460a      	mov	r2, r1
 8001002:	71fb      	strb	r3, [r7, #7]
 8001004:	4613      	mov	r3, r2
 8001006:	71bb      	strb	r3, [r7, #6]
    uint8_t data_out[2] = {data_high, data_low};
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	733b      	strb	r3, [r7, #12]
 800100c:	79bb      	ldrb	r3, [r7, #6]
 800100e:	737b      	strb	r3, [r7, #13]
    

    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;  // CPOL = 1 (Clock idle high)
 8001010:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <AD9833_write+0x5c>)
 8001012:	2202      	movs	r2, #2
 8001014:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;       // CPHA = 0 (Sample on the falling edge)
 8001016:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <AD9833_write+0x5c>)
 8001018:	2200      	movs	r2, #0
 800101a:	615a      	str	r2, [r3, #20]
    HAL_SPI_Init(&hspi1); // Restart the SPI module
 800101c:	480d      	ldr	r0, [pc, #52]	@ (8001054 <AD9833_write+0x5c>)
 800101e:	f005 fbaf 	bl	8006780 <HAL_SPI_Init>

    HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001028:	480b      	ldr	r0, [pc, #44]	@ (8001058 <AD9833_write+0x60>)
 800102a:	f004 fdc3 	bl	8005bb4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data_out, 2, HAL_MAX_DELAY);
 800102e:	f107 010c 	add.w	r1, r7, #12
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
 8001036:	2202      	movs	r2, #2
 8001038:	4806      	ldr	r0, [pc, #24]	@ (8001054 <AD9833_write+0x5c>)
 800103a:	f005 fc2a 	bl	8006892 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_SET);
 800103e:	2201      	movs	r2, #1
 8001040:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001044:	4804      	ldr	r0, [pc, #16]	@ (8001058 <AD9833_write+0x60>)
 8001046:	f004 fdb5 	bl	8005bb4 <HAL_GPIO_WritePin>
}
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	2000035c 	.word	0x2000035c
 8001058:	40020000 	.word	0x40020000

0800105c <AD9833_write4>:

void AD9833_write4(uint8_t data_l_high, uint8_t data_l_low, uint8_t data_h_high, uint8_t data_h_low) {
 800105c:	b590      	push	{r4, r7, lr}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	4604      	mov	r4, r0
 8001064:	4608      	mov	r0, r1
 8001066:	4611      	mov	r1, r2
 8001068:	461a      	mov	r2, r3
 800106a:	4623      	mov	r3, r4
 800106c:	71fb      	strb	r3, [r7, #7]
 800106e:	4603      	mov	r3, r0
 8001070:	71bb      	strb	r3, [r7, #6]
 8001072:	460b      	mov	r3, r1
 8001074:	717b      	strb	r3, [r7, #5]
 8001076:	4613      	mov	r3, r2
 8001078:	713b      	strb	r3, [r7, #4]
    uint8_t data_out[4] = {data_l_high, data_l_low, data_h_high, data_h_low};
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	733b      	strb	r3, [r7, #12]
 800107e:	79bb      	ldrb	r3, [r7, #6]
 8001080:	737b      	strb	r3, [r7, #13]
 8001082:	797b      	ldrb	r3, [r7, #5]
 8001084:	73bb      	strb	r3, [r7, #14]
 8001086:	793b      	ldrb	r3, [r7, #4]
 8001088:	73fb      	strb	r3, [r7, #15]

    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;  // CPOL = 1 (Clock idle high)
 800108a:	4b10      	ldr	r3, [pc, #64]	@ (80010cc <AD9833_write4+0x70>)
 800108c:	2202      	movs	r2, #2
 800108e:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;       // CPHA = 0 (Sample on the falling edge)
 8001090:	4b0e      	ldr	r3, [pc, #56]	@ (80010cc <AD9833_write4+0x70>)
 8001092:	2200      	movs	r2, #0
 8001094:	615a      	str	r2, [r3, #20]
    HAL_SPI_Init(&hspi1); // Restart the SPI module
 8001096:	480d      	ldr	r0, [pc, #52]	@ (80010cc <AD9833_write4+0x70>)
 8001098:	f005 fb72 	bl	8006780 <HAL_SPI_Init>

    HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010a2:	480b      	ldr	r0, [pc, #44]	@ (80010d0 <AD9833_write4+0x74>)
 80010a4:	f004 fd86 	bl	8005bb4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data_out, 4, HAL_MAX_DELAY);
 80010a8:	f107 010c 	add.w	r1, r7, #12
 80010ac:	f04f 33ff 	mov.w	r3, #4294967295
 80010b0:	2204      	movs	r2, #4
 80010b2:	4806      	ldr	r0, [pc, #24]	@ (80010cc <AD9833_write4+0x70>)
 80010b4:	f005 fbed 	bl	8006892 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(AD9833_NCS_GPIO_Port, AD9833_NCS_Pin, GPIO_PIN_SET);
 80010b8:	2201      	movs	r2, #1
 80010ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010be:	4804      	ldr	r0, [pc, #16]	@ (80010d0 <AD9833_write4+0x74>)
 80010c0:	f004 fd78 	bl	8005bb4 <HAL_GPIO_WritePin>
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd90      	pop	{r4, r7, pc}
 80010cc:	2000035c 	.word	0x2000035c
 80010d0:	40020000 	.word	0x40020000

080010d4 <AD9833_set_freq>:

void AD9833_set_freq(float f) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	ed87 0a01 	vstr	s0, [r7, #4]
    AD9833_write(0b00100000, 0b10000000); // Control reg, start reset
 80010de:	2180      	movs	r1, #128	@ 0x80
 80010e0:	2020      	movs	r0, #32
 80010e2:	f7ff ff89 	bl	8000ff8 <AD9833_write>

    uint64_t FRQREG = (uint64_t)((f * (1 << 28)) / MASTER_CLK);
 80010e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ea:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001184 <AD9833_set_freq+0xb0>
 80010ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010f2:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001188 <AD9833_set_freq+0xb4>
 80010f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80010fa:	ee16 0a90 	vmov	r0, s13
 80010fe:	f7ff fddb 	bl	8000cb8 <__aeabi_f2ulz>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // Lower bytes
    uint16_t FL = FRQREG & 0x3FFF;
 800110a:	8a3b      	ldrh	r3, [r7, #16]
 800110c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001110:	81fb      	strh	r3, [r7, #14]
    uint8_t Llb = FL & 0xFF;
 8001112:	89fb      	ldrh	r3, [r7, #14]
 8001114:	737b      	strb	r3, [r7, #13]
    uint8_t Lhb = ((FL >> 8) & 0x3F) | 0b01000000;
 8001116:	89fb      	ldrh	r3, [r7, #14]
 8001118:	0a1b      	lsrs	r3, r3, #8
 800111a:	b29b      	uxth	r3, r3
 800111c:	b25b      	sxtb	r3, r3
 800111e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001122:	b25b      	sxtb	r3, r3
 8001124:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001128:	b25b      	sxtb	r3, r3
 800112a:	733b      	strb	r3, [r7, #12]

    // Higher bytes
    uint16_t FH = (FRQREG >> 14) & 0x3FFF;
 800112c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	f04f 0300 	mov.w	r3, #0
 8001138:	0b82      	lsrs	r2, r0, #14
 800113a:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 800113e:	0b8b      	lsrs	r3, r1, #14
 8001140:	b293      	uxth	r3, r2
 8001142:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001146:	817b      	strh	r3, [r7, #10]
    uint8_t Hlb = FH & 0xFF;
 8001148:	897b      	ldrh	r3, [r7, #10]
 800114a:	727b      	strb	r3, [r7, #9]
    uint8_t Hhb = ((FH >> 8) & 0x3F) | 0b01000000;
 800114c:	897b      	ldrh	r3, [r7, #10]
 800114e:	0a1b      	lsrs	r3, r3, #8
 8001150:	b29b      	uxth	r3, r3
 8001152:	b25b      	sxtb	r3, r3
 8001154:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001158:	b25b      	sxtb	r3, r3
 800115a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800115e:	b25b      	sxtb	r3, r3
 8001160:	723b      	strb	r3, [r7, #8]

    AD9833_write4(Lhb, Llb, Hhb, Hlb);
 8001162:	7a7b      	ldrb	r3, [r7, #9]
 8001164:	7a3a      	ldrb	r2, [r7, #8]
 8001166:	7b79      	ldrb	r1, [r7, #13]
 8001168:	7b38      	ldrb	r0, [r7, #12]
 800116a:	f7ff ff77 	bl	800105c <AD9833_write4>

    AD9833_write(0b00100000, 0b00000000); // Control reg, finish reset and configure IC
 800116e:	2100      	movs	r1, #0
 8001170:	2020      	movs	r0, #32
 8001172:	f7ff ff41 	bl	8000ff8 <AD9833_write>
    HAL_Delay(1);
 8001176:	2001      	movs	r0, #1
 8001178:	f003 f98e 	bl	8004498 <HAL_Delay>
}
 800117c:	bf00      	nop
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	4d800000 	.word	0x4d800000
 8001188:	4b989680 	.word	0x4b989680

0800118c <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b089      	sub	sp, #36	@ 0x24
 8001190:	af02      	add	r7, sp, #8
 8001192:	4604      	mov	r4, r0
 8001194:	4608      	mov	r0, r1
 8001196:	4611      	mov	r1, r2
 8001198:	461a      	mov	r2, r3
 800119a:	4623      	mov	r3, r4
 800119c:	71fb      	strb	r3, [r7, #7]
 800119e:	4603      	mov	r3, r0
 80011a0:	71bb      	strb	r3, [r7, #6]
 80011a2:	460b      	mov	r3, r1
 80011a4:	717b      	strb	r3, [r7, #5]
 80011a6:	4613      	mov	r3, r2
 80011a8:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 80011ae:	7dfb      	ldrb	r3, [r7, #23]
 80011b0:	2b1f      	cmp	r3, #31
 80011b2:	d802      	bhi.n	80011ba <ILI9341_Draw_Char+0x2e>
        Character = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	71fb      	strb	r3, [r7, #7]
 80011b8:	e002      	b.n	80011c0 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 80011ba:	7dfb      	ldrb	r3, [r7, #23]
 80011bc:	3b20      	subs	r3, #32
 80011be:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80011c0:	2300      	movs	r3, #0
 80011c2:	753b      	strb	r3, [r7, #20]
 80011c4:	e012      	b.n	80011ec <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 80011c6:	7dfa      	ldrb	r2, [r7, #23]
 80011c8:	7d38      	ldrb	r0, [r7, #20]
 80011ca:	7d39      	ldrb	r1, [r7, #20]
 80011cc:	4c3b      	ldr	r4, [pc, #236]	@ (80012bc <ILI9341_Draw_Char+0x130>)
 80011ce:	4613      	mov	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	4413      	add	r3, r2
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	4423      	add	r3, r4
 80011d8:	4403      	add	r3, r0
 80011da:	781a      	ldrb	r2, [r3, #0]
 80011dc:	f101 0318 	add.w	r3, r1, #24
 80011e0:	443b      	add	r3, r7
 80011e2:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80011e6:	7d3b      	ldrb	r3, [r7, #20]
 80011e8:	3301      	adds	r3, #1
 80011ea:	753b      	strb	r3, [r7, #20]
 80011ec:	7d3b      	ldrb	r3, [r7, #20]
 80011ee:	2b05      	cmp	r3, #5
 80011f0:	d9e9      	bls.n	80011c6 <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 80011f2:	79bb      	ldrb	r3, [r7, #6]
 80011f4:	b298      	uxth	r0, r3
 80011f6:	797b      	ldrb	r3, [r7, #5]
 80011f8:	b299      	uxth	r1, r3
 80011fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80011fc:	461a      	mov	r2, r3
 80011fe:	0052      	lsls	r2, r2, #1
 8001200:	4413      	add	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	b29a      	uxth	r2, r3
 8001206:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	b29c      	uxth	r4, r3
 800120c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	4623      	mov	r3, r4
 8001212:	f000 fc3d 	bl	8001a90 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8001216:	2300      	movs	r3, #0
 8001218:	757b      	strb	r3, [r7, #21]
 800121a:	e047      	b.n	80012ac <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 800121c:	2300      	movs	r3, #0
 800121e:	75bb      	strb	r3, [r7, #22]
 8001220:	e03e      	b.n	80012a0 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 8001222:	7d7b      	ldrb	r3, [r7, #21]
 8001224:	3318      	adds	r3, #24
 8001226:	443b      	add	r3, r7
 8001228:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800122c:	461a      	mov	r2, r3
 800122e:	7dbb      	ldrb	r3, [r7, #22]
 8001230:	fa42 f303 	asr.w	r3, r2, r3
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	2b00      	cmp	r3, #0
 800123a:	d02e      	beq.n	800129a <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 800123c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800123e:	2b01      	cmp	r3, #1
 8001240:	d110      	bne.n	8001264 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8001242:	79bb      	ldrb	r3, [r7, #6]
 8001244:	b29a      	uxth	r2, r3
 8001246:	7d7b      	ldrb	r3, [r7, #21]
 8001248:	b29b      	uxth	r3, r3
 800124a:	4413      	add	r3, r2
 800124c:	b298      	uxth	r0, r3
 800124e:	797b      	ldrb	r3, [r7, #5]
 8001250:	b29a      	uxth	r2, r3
 8001252:	7dbb      	ldrb	r3, [r7, #22]
 8001254:	b29b      	uxth	r3, r3
 8001256:	4413      	add	r3, r2
 8001258:	b29b      	uxth	r3, r3
 800125a:	887a      	ldrh	r2, [r7, #2]
 800125c:	4619      	mov	r1, r3
 800125e:	f000 fb4f 	bl	8001900 <ILI9341_Draw_Pixel>
 8001262:	e01a      	b.n	800129a <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8001264:	79bb      	ldrb	r3, [r7, #6]
 8001266:	b29a      	uxth	r2, r3
 8001268:	7d7b      	ldrb	r3, [r7, #21]
 800126a:	b29b      	uxth	r3, r3
 800126c:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 800126e:	fb11 f303 	smulbb	r3, r1, r3
 8001272:	b29b      	uxth	r3, r3
 8001274:	4413      	add	r3, r2
 8001276:	b298      	uxth	r0, r3
 8001278:	797b      	ldrb	r3, [r7, #5]
 800127a:	b29a      	uxth	r2, r3
 800127c:	7dbb      	ldrb	r3, [r7, #22]
 800127e:	b29b      	uxth	r3, r3
 8001280:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8001282:	fb11 f303 	smulbb	r3, r1, r3
 8001286:	b29b      	uxth	r3, r3
 8001288:	4413      	add	r3, r2
 800128a:	b299      	uxth	r1, r3
 800128c:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 800128e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001290:	887b      	ldrh	r3, [r7, #2]
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	4623      	mov	r3, r4
 8001296:	f000 fbfb 	bl	8001a90 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 800129a:	7dbb      	ldrb	r3, [r7, #22]
 800129c:	3301      	adds	r3, #1
 800129e:	75bb      	strb	r3, [r7, #22]
 80012a0:	7dbb      	ldrb	r3, [r7, #22]
 80012a2:	2b07      	cmp	r3, #7
 80012a4:	d9bd      	bls.n	8001222 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 80012a6:	7d7b      	ldrb	r3, [r7, #21]
 80012a8:	3301      	adds	r3, #1
 80012aa:	757b      	strb	r3, [r7, #21]
 80012ac:	7d7b      	ldrb	r3, [r7, #21]
 80012ae:	2b05      	cmp	r3, #5
 80012b0:	d9b4      	bls.n	800121c <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 80012b2:	bf00      	nop
 80012b4:	bf00      	nop
 80012b6:	371c      	adds	r7, #28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd90      	pop	{r4, r7, pc}
 80012bc:	0800c728 	.word	0x0800c728

080012c0 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af02      	add	r7, sp, #8
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	4608      	mov	r0, r1
 80012ca:	4611      	mov	r1, r2
 80012cc:	461a      	mov	r2, r3
 80012ce:	4603      	mov	r3, r0
 80012d0:	70fb      	strb	r3, [r7, #3]
 80012d2:	460b      	mov	r3, r1
 80012d4:	70bb      	strb	r3, [r7, #2]
 80012d6:	4613      	mov	r3, r2
 80012d8:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 80012da:	e017      	b.n	800130c <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	1c5a      	adds	r2, r3, #1
 80012e0:	607a      	str	r2, [r7, #4]
 80012e2:	7818      	ldrb	r0, [r3, #0]
 80012e4:	883c      	ldrh	r4, [r7, #0]
 80012e6:	78ba      	ldrb	r2, [r7, #2]
 80012e8:	78f9      	ldrb	r1, [r7, #3]
 80012ea:	8bbb      	ldrh	r3, [r7, #28]
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	8b3b      	ldrh	r3, [r7, #24]
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	4623      	mov	r3, r4
 80012f4:	f7ff ff4a 	bl	800118c <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 80012f8:	8b3b      	ldrh	r3, [r7, #24]
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	461a      	mov	r2, r3
 80012fe:	0052      	lsls	r2, r2, #1
 8001300:	4413      	add	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	b2da      	uxtb	r2, r3
 8001306:	78fb      	ldrb	r3, [r7, #3]
 8001308:	4413      	add	r3, r2
 800130a:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1e3      	bne.n	80012dc <ILI9341_Draw_Text+0x1c>
    }
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	bd90      	pop	{r4, r7, pc}
	...

08001320 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
//MX_SPI3_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8001324:	2200      	movs	r2, #0
 8001326:	2101      	movs	r1, #1
 8001328:	4802      	ldr	r0, [pc, #8]	@ (8001334 <ILI9341_SPI_Init+0x14>)
 800132a:	f004 fc43 	bl	8005bb4 <HAL_GPIO_WritePin>
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40020800 	.word	0x40020800

08001338 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8001342:	1df9      	adds	r1, r7, #7
 8001344:	2301      	movs	r3, #1
 8001346:	2201      	movs	r2, #1
 8001348:	4803      	ldr	r0, [pc, #12]	@ (8001358 <ILI9341_SPI_Send+0x20>)
 800134a:	f005 faa2 	bl	8006892 <HAL_SPI_Transmit>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200003b4 	.word	0x200003b4

0800135c <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	2101      	movs	r1, #1
 800136a:	480a      	ldr	r0, [pc, #40]	@ (8001394 <ILI9341_Write_Command+0x38>)
 800136c:	f004 fc22 	bl	8005bb4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001370:	2200      	movs	r2, #0
 8001372:	2104      	movs	r1, #4
 8001374:	4807      	ldr	r0, [pc, #28]	@ (8001394 <ILI9341_Write_Command+0x38>)
 8001376:	f004 fc1d 	bl	8005bb4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ffdb 	bl	8001338 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001382:	2201      	movs	r2, #1
 8001384:	2101      	movs	r1, #1
 8001386:	4803      	ldr	r0, [pc, #12]	@ (8001394 <ILI9341_Write_Command+0x38>)
 8001388:	f004 fc14 	bl	8005bb4 <HAL_GPIO_WritePin>
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40020800 	.word	0x40020800

08001398 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80013a2:	2201      	movs	r2, #1
 80013a4:	2104      	movs	r1, #4
 80013a6:	480a      	ldr	r0, [pc, #40]	@ (80013d0 <ILI9341_Write_Data+0x38>)
 80013a8:	f004 fc04 	bl	8005bb4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2101      	movs	r1, #1
 80013b0:	4807      	ldr	r0, [pc, #28]	@ (80013d0 <ILI9341_Write_Data+0x38>)
 80013b2:	f004 fbff 	bl	8005bb4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ffbd 	bl	8001338 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80013be:	2201      	movs	r2, #1
 80013c0:	2101      	movs	r1, #1
 80013c2:	4803      	ldr	r0, [pc, #12]	@ (80013d0 <ILI9341_Write_Data+0x38>)
 80013c4:	f004 fbf6 	bl	8005bb4 <HAL_GPIO_WritePin>
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40020800 	.word	0x40020800

080013d4 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80013d4:	b590      	push	{r4, r7, lr}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4604      	mov	r4, r0
 80013dc:	4608      	mov	r0, r1
 80013de:	4611      	mov	r1, r2
 80013e0:	461a      	mov	r2, r3
 80013e2:	4623      	mov	r3, r4
 80013e4:	80fb      	strh	r3, [r7, #6]
 80013e6:	4603      	mov	r3, r0
 80013e8:	80bb      	strh	r3, [r7, #4]
 80013ea:	460b      	mov	r3, r1
 80013ec:	807b      	strh	r3, [r7, #2]
 80013ee:	4613      	mov	r3, r2
 80013f0:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 80013f2:	202a      	movs	r0, #42	@ 0x2a
 80013f4:	f7ff ffb2 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 80013f8:	88fb      	ldrh	r3, [r7, #6]
 80013fa:	0a1b      	lsrs	r3, r3, #8
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ffc9 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff ffc4 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8001410:	887b      	ldrh	r3, [r7, #2]
 8001412:	0a1b      	lsrs	r3, r3, #8
 8001414:	b29b      	uxth	r3, r3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ffbd 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 800141e:	887b      	ldrh	r3, [r7, #2]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff ffb8 	bl	8001398 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8001428:	202b      	movs	r0, #43	@ 0x2b
 800142a:	f7ff ff97 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 800142e:	88bb      	ldrh	r3, [r7, #4]
 8001430:	0a1b      	lsrs	r3, r3, #8
 8001432:	b29b      	uxth	r3, r3
 8001434:	b2db      	uxtb	r3, r3
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff ffae 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 800143c:	88bb      	ldrh	r3, [r7, #4]
 800143e:	b2db      	uxtb	r3, r3
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ffa9 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8001446:	883b      	ldrh	r3, [r7, #0]
 8001448:	0a1b      	lsrs	r3, r3, #8
 800144a:	b29b      	uxth	r3, r3
 800144c:	b2db      	uxtb	r3, r3
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff ffa2 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8001454:	883b      	ldrh	r3, [r7, #0]
 8001456:	b2db      	uxtb	r3, r3
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff9d 	bl	8001398 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 800145e:	202c      	movs	r0, #44	@ 0x2c
 8001460:	f7ff ff7c 	bl	800135c <ILI9341_Write_Command>
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	bd90      	pop	{r4, r7, pc}

0800146c <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	2102      	movs	r1, #2
 8001474:	480a      	ldr	r0, [pc, #40]	@ (80014a0 <ILI9341_Reset+0x34>)
 8001476:	f004 fb9d 	bl	8005bb4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 800147a:	20c8      	movs	r0, #200	@ 0xc8
 800147c:	f003 f80c 	bl	8004498 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001480:	2200      	movs	r2, #0
 8001482:	2101      	movs	r1, #1
 8001484:	4806      	ldr	r0, [pc, #24]	@ (80014a0 <ILI9341_Reset+0x34>)
 8001486:	f004 fb95 	bl	8005bb4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 800148a:	20c8      	movs	r0, #200	@ 0xc8
 800148c:	f003 f804 	bl	8004498 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8001490:	2201      	movs	r2, #1
 8001492:	2102      	movs	r1, #2
 8001494:	4802      	ldr	r0, [pc, #8]	@ (80014a0 <ILI9341_Reset+0x34>)
 8001496:	f004 fb8d 	bl	8005bb4 <HAL_GPIO_WritePin>
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40020800 	.word	0x40020800

080014a4 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80014b2:	2036      	movs	r0, #54	@ 0x36
 80014b4:	f7ff ff52 	bl	800135c <ILI9341_Write_Command>
HAL_Delay(1);
 80014b8:	2001      	movs	r0, #1
 80014ba:	f002 ffed 	bl	8004498 <HAL_Delay>
	
switch(screen_rotation) 
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	2b03      	cmp	r3, #3
 80014c2:	d837      	bhi.n	8001534 <ILI9341_Set_Rotation+0x90>
 80014c4:	a201      	add	r2, pc, #4	@ (adr r2, 80014cc <ILI9341_Set_Rotation+0x28>)
 80014c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ca:	bf00      	nop
 80014cc:	080014dd 	.word	0x080014dd
 80014d0:	080014f3 	.word	0x080014f3
 80014d4:	08001509 	.word	0x08001509
 80014d8:	0800151f 	.word	0x0800151f
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80014dc:	2048      	movs	r0, #72	@ 0x48
 80014de:	f7ff ff5b 	bl	8001398 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 80014e2:	4b17      	ldr	r3, [pc, #92]	@ (8001540 <ILI9341_Set_Rotation+0x9c>)
 80014e4:	22f0      	movs	r2, #240	@ 0xf0
 80014e6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80014e8:	4b16      	ldr	r3, [pc, #88]	@ (8001544 <ILI9341_Set_Rotation+0xa0>)
 80014ea:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80014ee:	801a      	strh	r2, [r3, #0]
			break;
 80014f0:	e021      	b.n	8001536 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80014f2:	2028      	movs	r0, #40	@ 0x28
 80014f4:	f7ff ff50 	bl	8001398 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80014f8:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <ILI9341_Set_Rotation+0x9c>)
 80014fa:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80014fe:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001500:	4b10      	ldr	r3, [pc, #64]	@ (8001544 <ILI9341_Set_Rotation+0xa0>)
 8001502:	22f0      	movs	r2, #240	@ 0xf0
 8001504:	801a      	strh	r2, [r3, #0]
			break;
 8001506:	e016      	b.n	8001536 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8001508:	2088      	movs	r0, #136	@ 0x88
 800150a:	f7ff ff45 	bl	8001398 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 800150e:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <ILI9341_Set_Rotation+0x9c>)
 8001510:	22f0      	movs	r2, #240	@ 0xf0
 8001512:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001514:	4b0b      	ldr	r3, [pc, #44]	@ (8001544 <ILI9341_Set_Rotation+0xa0>)
 8001516:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800151a:	801a      	strh	r2, [r3, #0]
			break;
 800151c:	e00b      	b.n	8001536 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 800151e:	20e8      	movs	r0, #232	@ 0xe8
 8001520:	f7ff ff3a 	bl	8001398 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001524:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <ILI9341_Set_Rotation+0x9c>)
 8001526:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800152a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800152c:	4b05      	ldr	r3, [pc, #20]	@ (8001544 <ILI9341_Set_Rotation+0xa0>)
 800152e:	22f0      	movs	r2, #240	@ 0xf0
 8001530:	801a      	strh	r2, [r3, #0]
			break;
 8001532:	e000      	b.n	8001536 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8001534:	bf00      	nop
	}
}
 8001536:	bf00      	nop
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000002 	.word	0x20000002
 8001544:	20000000 	.word	0x20000000

08001548 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 800154c:	2201      	movs	r2, #1
 800154e:	2102      	movs	r1, #2
 8001550:	4802      	ldr	r0, [pc, #8]	@ (800155c <ILI9341_Enable+0x14>)
 8001552:	f004 fb2f 	bl	8005bb4 <HAL_GPIO_WritePin>
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40020800 	.word	0x40020800

08001560 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8001564:	f7ff fff0 	bl	8001548 <ILI9341_Enable>
ILI9341_SPI_Init();
 8001568:	f7ff feda 	bl	8001320 <ILI9341_SPI_Init>
ILI9341_Reset();
 800156c:	f7ff ff7e 	bl	800146c <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8001570:	2001      	movs	r0, #1
 8001572:	f7ff fef3 	bl	800135c <ILI9341_Write_Command>
HAL_Delay(1000);
 8001576:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800157a:	f002 ff8d 	bl	8004498 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 800157e:	20cb      	movs	r0, #203	@ 0xcb
 8001580:	f7ff feec 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8001584:	2039      	movs	r0, #57	@ 0x39
 8001586:	f7ff ff07 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 800158a:	202c      	movs	r0, #44	@ 0x2c
 800158c:	f7ff ff04 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001590:	2000      	movs	r0, #0
 8001592:	f7ff ff01 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8001596:	2034      	movs	r0, #52	@ 0x34
 8001598:	f7ff fefe 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 800159c:	2002      	movs	r0, #2
 800159e:	f7ff fefb 	bl	8001398 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80015a2:	20cf      	movs	r0, #207	@ 0xcf
 80015a4:	f7ff feda 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80015a8:	2000      	movs	r0, #0
 80015aa:	f7ff fef5 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80015ae:	20c1      	movs	r0, #193	@ 0xc1
 80015b0:	f7ff fef2 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80015b4:	2030      	movs	r0, #48	@ 0x30
 80015b6:	f7ff feef 	bl	8001398 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80015ba:	20e8      	movs	r0, #232	@ 0xe8
 80015bc:	f7ff fece 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80015c0:	2085      	movs	r0, #133	@ 0x85
 80015c2:	f7ff fee9 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80015c6:	2000      	movs	r0, #0
 80015c8:	f7ff fee6 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80015cc:	2078      	movs	r0, #120	@ 0x78
 80015ce:	f7ff fee3 	bl	8001398 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80015d2:	20ea      	movs	r0, #234	@ 0xea
 80015d4:	f7ff fec2 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80015d8:	2000      	movs	r0, #0
 80015da:	f7ff fedd 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80015de:	2000      	movs	r0, #0
 80015e0:	f7ff feda 	bl	8001398 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 80015e4:	20ed      	movs	r0, #237	@ 0xed
 80015e6:	f7ff feb9 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 80015ea:	2064      	movs	r0, #100	@ 0x64
 80015ec:	f7ff fed4 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80015f0:	2003      	movs	r0, #3
 80015f2:	f7ff fed1 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 80015f6:	2012      	movs	r0, #18
 80015f8:	f7ff fece 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 80015fc:	2081      	movs	r0, #129	@ 0x81
 80015fe:	f7ff fecb 	bl	8001398 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8001602:	20f7      	movs	r0, #247	@ 0xf7
 8001604:	f7ff feaa 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8001608:	2020      	movs	r0, #32
 800160a:	f7ff fec5 	bl	8001398 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 800160e:	20c0      	movs	r0, #192	@ 0xc0
 8001610:	f7ff fea4 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8001614:	2023      	movs	r0, #35	@ 0x23
 8001616:	f7ff febf 	bl	8001398 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 800161a:	20c1      	movs	r0, #193	@ 0xc1
 800161c:	f7ff fe9e 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8001620:	2010      	movs	r0, #16
 8001622:	f7ff feb9 	bl	8001398 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8001626:	20c5      	movs	r0, #197	@ 0xc5
 8001628:	f7ff fe98 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 800162c:	203e      	movs	r0, #62	@ 0x3e
 800162e:	f7ff feb3 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8001632:	2028      	movs	r0, #40	@ 0x28
 8001634:	f7ff feb0 	bl	8001398 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8001638:	20c7      	movs	r0, #199	@ 0xc7
 800163a:	f7ff fe8f 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 800163e:	2086      	movs	r0, #134	@ 0x86
 8001640:	f7ff feaa 	bl	8001398 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8001644:	2036      	movs	r0, #54	@ 0x36
 8001646:	f7ff fe89 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 800164a:	2048      	movs	r0, #72	@ 0x48
 800164c:	f7ff fea4 	bl	8001398 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8001650:	203a      	movs	r0, #58	@ 0x3a
 8001652:	f7ff fe83 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8001656:	2055      	movs	r0, #85	@ 0x55
 8001658:	f7ff fe9e 	bl	8001398 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 800165c:	20b1      	movs	r0, #177	@ 0xb1
 800165e:	f7ff fe7d 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001662:	2000      	movs	r0, #0
 8001664:	f7ff fe98 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8001668:	2018      	movs	r0, #24
 800166a:	f7ff fe95 	bl	8001398 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 800166e:	20b6      	movs	r0, #182	@ 0xb6
 8001670:	f7ff fe74 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8001674:	2008      	movs	r0, #8
 8001676:	f7ff fe8f 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 800167a:	2082      	movs	r0, #130	@ 0x82
 800167c:	f7ff fe8c 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8001680:	2027      	movs	r0, #39	@ 0x27
 8001682:	f7ff fe89 	bl	8001398 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8001686:	20f2      	movs	r0, #242	@ 0xf2
 8001688:	f7ff fe68 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800168c:	2000      	movs	r0, #0
 800168e:	f7ff fe83 	bl	8001398 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8001692:	2026      	movs	r0, #38	@ 0x26
 8001694:	f7ff fe62 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8001698:	2001      	movs	r0, #1
 800169a:	f7ff fe7d 	bl	8001398 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 800169e:	20e0      	movs	r0, #224	@ 0xe0
 80016a0:	f7ff fe5c 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80016a4:	200f      	movs	r0, #15
 80016a6:	f7ff fe77 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80016aa:	2031      	movs	r0, #49	@ 0x31
 80016ac:	f7ff fe74 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80016b0:	202b      	movs	r0, #43	@ 0x2b
 80016b2:	f7ff fe71 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80016b6:	200c      	movs	r0, #12
 80016b8:	f7ff fe6e 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80016bc:	200e      	movs	r0, #14
 80016be:	f7ff fe6b 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80016c2:	2008      	movs	r0, #8
 80016c4:	f7ff fe68 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80016c8:	204e      	movs	r0, #78	@ 0x4e
 80016ca:	f7ff fe65 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80016ce:	20f1      	movs	r0, #241	@ 0xf1
 80016d0:	f7ff fe62 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80016d4:	2037      	movs	r0, #55	@ 0x37
 80016d6:	f7ff fe5f 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80016da:	2007      	movs	r0, #7
 80016dc:	f7ff fe5c 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 80016e0:	2010      	movs	r0, #16
 80016e2:	f7ff fe59 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80016e6:	2003      	movs	r0, #3
 80016e8:	f7ff fe56 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80016ec:	200e      	movs	r0, #14
 80016ee:	f7ff fe53 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 80016f2:	2009      	movs	r0, #9
 80016f4:	f7ff fe50 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80016f8:	2000      	movs	r0, #0
 80016fa:	f7ff fe4d 	bl	8001398 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 80016fe:	20e1      	movs	r0, #225	@ 0xe1
 8001700:	f7ff fe2c 	bl	800135c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001704:	2000      	movs	r0, #0
 8001706:	f7ff fe47 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800170a:	200e      	movs	r0, #14
 800170c:	f7ff fe44 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8001710:	2014      	movs	r0, #20
 8001712:	f7ff fe41 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001716:	2003      	movs	r0, #3
 8001718:	f7ff fe3e 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 800171c:	2011      	movs	r0, #17
 800171e:	f7ff fe3b 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001722:	2007      	movs	r0, #7
 8001724:	f7ff fe38 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001728:	2031      	movs	r0, #49	@ 0x31
 800172a:	f7ff fe35 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800172e:	20c1      	movs	r0, #193	@ 0xc1
 8001730:	f7ff fe32 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8001734:	2048      	movs	r0, #72	@ 0x48
 8001736:	f7ff fe2f 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800173a:	2008      	movs	r0, #8
 800173c:	f7ff fe2c 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001740:	200f      	movs	r0, #15
 8001742:	f7ff fe29 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001746:	200c      	movs	r0, #12
 8001748:	f7ff fe26 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800174c:	2031      	movs	r0, #49	@ 0x31
 800174e:	f7ff fe23 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8001752:	2036      	movs	r0, #54	@ 0x36
 8001754:	f7ff fe20 	bl	8001398 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001758:	200f      	movs	r0, #15
 800175a:	f7ff fe1d 	bl	8001398 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 800175e:	2011      	movs	r0, #17
 8001760:	f7ff fdfc 	bl	800135c <ILI9341_Write_Command>
HAL_Delay(120);
 8001764:	2078      	movs	r0, #120	@ 0x78
 8001766:	f002 fe97 	bl	8004498 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 800176a:	2029      	movs	r0, #41	@ 0x29
 800176c:	f7ff fdf6 	bl	800135c <ILI9341_Write_Command>


//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001770:	2000      	movs	r0, #0
 8001772:	f7ff fe97 	bl	80014a4 <ILI9341_Set_Rotation>

ILI9341_Fill_Screen(BLACK);
 8001776:	2000      	movs	r0, #0
 8001778:	f000 f89c 	bl	80018b4 <ILI9341_Fill_Screen>
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}

08001780 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8001780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001784:	b08d      	sub	sp, #52	@ 0x34
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	6039      	str	r1, [r7, #0]
 800178c:	80fb      	strh	r3, [r7, #6]
 800178e:	466b      	mov	r3, sp
 8001790:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	62fb      	str	r3, [r7, #44]	@ 0x2c
if((Size*2) < BURST_MAX_SIZE)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800179e:	d202      	bcs.n	80017a6 <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017a4:	e002      	b.n	80017ac <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 80017a6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80017aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80017ac:	2201      	movs	r2, #1
 80017ae:	2104      	movs	r1, #4
 80017b0:	483e      	ldr	r0, [pc, #248]	@ (80018ac <ILI9341_Draw_Colour_Burst+0x12c>)
 80017b2:	f004 f9ff 	bl	8005bb4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2101      	movs	r1, #1
 80017ba:	483c      	ldr	r0, [pc, #240]	@ (80018ac <ILI9341_Draw_Colour_Burst+0x12c>)
 80017bc:	f004 f9fa 	bl	8005bb4 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 80017c0:	88fb      	ldrh	r3, [r7, #6]
 80017c2:	0a1b      	lsrs	r3, r3, #8
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
unsigned char burst_buffer[Buffer_Size];
 80017ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80017cc:	460b      	mov	r3, r1
 80017ce:	3b01      	subs	r3, #1
 80017d0:	61fb      	str	r3, [r7, #28]
 80017d2:	2300      	movs	r3, #0
 80017d4:	4688      	mov	r8, r1
 80017d6:	4699      	mov	r9, r3
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017ec:	2300      	movs	r3, #0
 80017ee:	460c      	mov	r4, r1
 80017f0:	461d      	mov	r5, r3
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	f04f 0300 	mov.w	r3, #0
 80017fa:	00eb      	lsls	r3, r5, #3
 80017fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001800:	00e2      	lsls	r2, r4, #3
 8001802:	1dcb      	adds	r3, r1, #7
 8001804:	08db      	lsrs	r3, r3, #3
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	ebad 0d03 	sub.w	sp, sp, r3
 800180c:	466b      	mov	r3, sp
 800180e:	3300      	adds	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001812:	2300      	movs	r3, #0
 8001814:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001816:	e00e      	b.n	8001836 <ILI9341_Draw_Colour_Burst+0xb6>
	{
		burst_buffer[j] = 	chifted;
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800181c:	4413      	add	r3, r2
 800181e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001822:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8001824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001826:	3301      	adds	r3, #1
 8001828:	88fa      	ldrh	r2, [r7, #6]
 800182a:	b2d1      	uxtb	r1, r2
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001832:	3302      	adds	r3, #2
 8001834:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001836:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800183a:	429a      	cmp	r2, r3
 800183c:	d3ec      	bcc.n	8001818 <ILI9341_Draw_Colour_Burst+0x98>
	}

uint32_t Sending_Size = Size*2;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001848:	fbb2 f3f3 	udiv	r3, r2, r3
 800184c:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001852:	fbb3 f2f2 	udiv	r2, r3, r2
 8001856:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001858:	fb01 f202 	mul.w	r2, r1, r2
 800185c:	1a9b      	subs	r3, r3, r2
 800185e:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d010      	beq.n	8001888 <ILI9341_Draw_Colour_Burst+0x108>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001866:	2300      	movs	r3, #0
 8001868:	627b      	str	r3, [r7, #36]	@ 0x24
 800186a:	e009      	b.n	8001880 <ILI9341_Draw_Colour_Burst+0x100>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 800186c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800186e:	b29a      	uxth	r2, r3
 8001870:	230a      	movs	r3, #10
 8001872:	69b9      	ldr	r1, [r7, #24]
 8001874:	480e      	ldr	r0, [pc, #56]	@ (80018b0 <ILI9341_Draw_Colour_Burst+0x130>)
 8001876:	f005 f80c 	bl	8006892 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800187a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187c:	3301      	adds	r3, #1
 800187e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001880:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	429a      	cmp	r2, r3
 8001886:	d3f1      	bcc.n	800186c <ILI9341_Draw_Colour_Burst+0xec>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	b29a      	uxth	r2, r3
 800188c:	230a      	movs	r3, #10
 800188e:	69b9      	ldr	r1, [r7, #24]
 8001890:	4807      	ldr	r0, [pc, #28]	@ (80018b0 <ILI9341_Draw_Colour_Burst+0x130>)
 8001892:	f004 fffe 	bl	8006892 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001896:	2201      	movs	r2, #1
 8001898:	2101      	movs	r1, #1
 800189a:	4804      	ldr	r0, [pc, #16]	@ (80018ac <ILI9341_Draw_Colour_Burst+0x12c>)
 800189c:	f004 f98a 	bl	8005bb4 <HAL_GPIO_WritePin>
 80018a0:	46b5      	mov	sp, r6
}
 80018a2:	bf00      	nop
 80018a4:	3734      	adds	r7, #52	@ 0x34
 80018a6:	46bd      	mov	sp, r7
 80018a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018ac:	40020800 	.word	0x40020800
 80018b0:	200003b4 	.word	0x200003b4

080018b4 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 80018be:	4b0e      	ldr	r3, [pc, #56]	@ (80018f8 <ILI9341_Fill_Screen+0x44>)
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	4b0d      	ldr	r3, [pc, #52]	@ (80018fc <ILI9341_Fill_Screen+0x48>)
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	2100      	movs	r1, #0
 80018cc:	2000      	movs	r0, #0
 80018ce:	f7ff fd81 	bl	80013d4 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 80018d2:	4b09      	ldr	r3, [pc, #36]	@ (80018f8 <ILI9341_Fill_Screen+0x44>)
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	461a      	mov	r2, r3
 80018da:	4b08      	ldr	r3, [pc, #32]	@ (80018fc <ILI9341_Fill_Screen+0x48>)
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	fb02 f303 	mul.w	r3, r2, r3
 80018e4:	461a      	mov	r2, r3
 80018e6:	88fb      	ldrh	r3, [r7, #6]
 80018e8:	4611      	mov	r1, r2
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff ff48 	bl	8001780 <ILI9341_Draw_Colour_Burst>
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000002 	.word	0x20000002
 80018fc:	20000000 	.word	0x20000000

08001900 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	80fb      	strh	r3, [r7, #6]
 800190a:	460b      	mov	r3, r1
 800190c:	80bb      	strh	r3, [r7, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001912:	4b5b      	ldr	r3, [pc, #364]	@ (8001a80 <ILI9341_Draw_Pixel+0x180>)
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	b29b      	uxth	r3, r3
 8001918:	88fa      	ldrh	r2, [r7, #6]
 800191a:	429a      	cmp	r2, r3
 800191c:	f080 80ac 	bcs.w	8001a78 <ILI9341_Draw_Pixel+0x178>
 8001920:	4b58      	ldr	r3, [pc, #352]	@ (8001a84 <ILI9341_Draw_Pixel+0x184>)
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	b29b      	uxth	r3, r3
 8001926:	88ba      	ldrh	r2, [r7, #4]
 8001928:	429a      	cmp	r2, r3
 800192a:	f080 80a5 	bcs.w	8001a78 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800192e:	2200      	movs	r2, #0
 8001930:	2104      	movs	r1, #4
 8001932:	4855      	ldr	r0, [pc, #340]	@ (8001a88 <ILI9341_Draw_Pixel+0x188>)
 8001934:	f004 f93e 	bl	8005bb4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001938:	2200      	movs	r2, #0
 800193a:	2101      	movs	r1, #1
 800193c:	4852      	ldr	r0, [pc, #328]	@ (8001a88 <ILI9341_Draw_Pixel+0x188>)
 800193e:	f004 f939 	bl	8005bb4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8001942:	202a      	movs	r0, #42	@ 0x2a
 8001944:	f7ff fcf8 	bl	8001338 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001948:	2201      	movs	r2, #1
 800194a:	2104      	movs	r1, #4
 800194c:	484e      	ldr	r0, [pc, #312]	@ (8001a88 <ILI9341_Draw_Pixel+0x188>)
 800194e:	f004 f931 	bl	8005bb4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001952:	2201      	movs	r2, #1
 8001954:	2101      	movs	r1, #1
 8001956:	484c      	ldr	r0, [pc, #304]	@ (8001a88 <ILI9341_Draw_Pixel+0x188>)
 8001958:	f004 f92c 	bl	8005bb4 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800195c:	2200      	movs	r2, #0
 800195e:	2101      	movs	r1, #1
 8001960:	4849      	ldr	r0, [pc, #292]	@ (8001a88 <ILI9341_Draw_Pixel+0x188>)
 8001962:	f004 f927 	bl	8005bb4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8001966:	88fb      	ldrh	r3, [r7, #6]
 8001968:	0a1b      	lsrs	r3, r3, #8
 800196a:	b29b      	uxth	r3, r3
 800196c:	b2db      	uxtb	r3, r3
 800196e:	753b      	strb	r3, [r7, #20]
 8001970:	88fb      	ldrh	r3, [r7, #6]
 8001972:	b2db      	uxtb	r3, r3
 8001974:	757b      	strb	r3, [r7, #21]
 8001976:	88fb      	ldrh	r3, [r7, #6]
 8001978:	3301      	adds	r3, #1
 800197a:	121b      	asrs	r3, r3, #8
 800197c:	b2db      	uxtb	r3, r3
 800197e:	75bb      	strb	r3, [r7, #22]
 8001980:	88fb      	ldrh	r3, [r7, #6]
 8001982:	b2db      	uxtb	r3, r3
 8001984:	3301      	adds	r3, #1
 8001986:	b2db      	uxtb	r3, r3
 8001988:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 800198a:	f107 0114 	add.w	r1, r7, #20
 800198e:	2301      	movs	r3, #1
 8001990:	2204      	movs	r2, #4
 8001992:	483e      	ldr	r0, [pc, #248]	@ (8001a8c <ILI9341_Draw_Pixel+0x18c>)
 8001994:	f004 ff7d 	bl	8006892 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001998:	2201      	movs	r2, #1
 800199a:	2101      	movs	r1, #1
 800199c:	483a      	ldr	r0, [pc, #232]	@ (8001a88 <ILI9341_Draw_Pixel+0x188>)
 800199e:	f004 f909 	bl	8005bb4 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80019a2:	2200      	movs	r2, #0
 80019a4:	2104      	movs	r1, #4
 80019a6:	4838      	ldr	r0, [pc, #224]	@ (8001a88 <ILI9341_Draw_Pixel+0x188>)
 80019a8:	f004 f904 	bl	8005bb4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80019ac:	2200      	movs	r2, #0
 80019ae:	2101      	movs	r1, #1
 80019b0:	4835      	ldr	r0, [pc, #212]	@ (8001a88 <ILI9341_Draw_Pixel+0x188>)
 80019b2:	f004 f8ff 	bl	8005bb4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 80019b6:	202b      	movs	r0, #43	@ 0x2b
 80019b8:	f7ff fcbe 	bl	8001338 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80019bc:	2201      	movs	r2, #1
 80019be:	2104      	movs	r1, #4
 80019c0:	4831      	ldr	r0, [pc, #196]	@ (8001a88 <ILI9341_Draw_Pixel+0x188>)
 80019c2:	f004 f8f7 	bl	8005bb4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80019c6:	2201      	movs	r2, #1
 80019c8:	2101      	movs	r1, #1
 80019ca:	482f      	ldr	r0, [pc, #188]	@ (8001a88 <ILI9341_Draw_Pixel+0x188>)
 80019cc:	f004 f8f2 	bl	8005bb4 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80019d0:	2200      	movs	r2, #0
 80019d2:	2101      	movs	r1, #1
 80019d4:	482c      	ldr	r0, [pc, #176]	@ (8001a88 <ILI9341_Draw_Pixel+0x188>)
 80019d6:	f004 f8ed 	bl	8005bb4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 80019da:	88bb      	ldrh	r3, [r7, #4]
 80019dc:	0a1b      	lsrs	r3, r3, #8
 80019de:	b29b      	uxth	r3, r3
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	743b      	strb	r3, [r7, #16]
 80019e4:	88bb      	ldrh	r3, [r7, #4]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	747b      	strb	r3, [r7, #17]
 80019ea:	88bb      	ldrh	r3, [r7, #4]
 80019ec:	3301      	adds	r3, #1
 80019ee:	121b      	asrs	r3, r3, #8
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	74bb      	strb	r3, [r7, #18]
 80019f4:	88bb      	ldrh	r3, [r7, #4]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	3301      	adds	r3, #1
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80019fe:	f107 0110 	add.w	r1, r7, #16
 8001a02:	2301      	movs	r3, #1
 8001a04:	2204      	movs	r2, #4
 8001a06:	4821      	ldr	r0, [pc, #132]	@ (8001a8c <ILI9341_Draw_Pixel+0x18c>)
 8001a08:	f004 ff43 	bl	8006892 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	2101      	movs	r1, #1
 8001a10:	481d      	ldr	r0, [pc, #116]	@ (8001a88 <ILI9341_Draw_Pixel+0x188>)
 8001a12:	f004 f8cf 	bl	8005bb4 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001a16:	2200      	movs	r2, #0
 8001a18:	2104      	movs	r1, #4
 8001a1a:	481b      	ldr	r0, [pc, #108]	@ (8001a88 <ILI9341_Draw_Pixel+0x188>)
 8001a1c:	f004 f8ca 	bl	8005bb4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001a20:	2200      	movs	r2, #0
 8001a22:	2101      	movs	r1, #1
 8001a24:	4818      	ldr	r0, [pc, #96]	@ (8001a88 <ILI9341_Draw_Pixel+0x188>)
 8001a26:	f004 f8c5 	bl	8005bb4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8001a2a:	202c      	movs	r0, #44	@ 0x2c
 8001a2c:	f7ff fc84 	bl	8001338 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8001a30:	2201      	movs	r2, #1
 8001a32:	2104      	movs	r1, #4
 8001a34:	4814      	ldr	r0, [pc, #80]	@ (8001a88 <ILI9341_Draw_Pixel+0x188>)
 8001a36:	f004 f8bd 	bl	8005bb4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	4812      	ldr	r0, [pc, #72]	@ (8001a88 <ILI9341_Draw_Pixel+0x188>)
 8001a40:	f004 f8b8 	bl	8005bb4 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001a44:	2200      	movs	r2, #0
 8001a46:	2101      	movs	r1, #1
 8001a48:	480f      	ldr	r0, [pc, #60]	@ (8001a88 <ILI9341_Draw_Pixel+0x188>)
 8001a4a:	f004 f8b3 	bl	8005bb4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8001a4e:	887b      	ldrh	r3, [r7, #2]
 8001a50:	0a1b      	lsrs	r3, r3, #8
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	733b      	strb	r3, [r7, #12]
 8001a58:	887b      	ldrh	r3, [r7, #2]
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8001a5e:	f107 010c 	add.w	r1, r7, #12
 8001a62:	2301      	movs	r3, #1
 8001a64:	2202      	movs	r2, #2
 8001a66:	4809      	ldr	r0, [pc, #36]	@ (8001a8c <ILI9341_Draw_Pixel+0x18c>)
 8001a68:	f004 ff13 	bl	8006892 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	2101      	movs	r1, #1
 8001a70:	4805      	ldr	r0, [pc, #20]	@ (8001a88 <ILI9341_Draw_Pixel+0x188>)
 8001a72:	f004 f89f 	bl	8005bb4 <HAL_GPIO_WritePin>
 8001a76:	e000      	b.n	8001a7a <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001a78:	bf00      	nop
	
}
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000002 	.word	0x20000002
 8001a84:	20000000 	.word	0x20000000
 8001a88:	40020800 	.word	0x40020800
 8001a8c:	200003b4 	.word	0x200003b4

08001a90 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8001a90:	b590      	push	{r4, r7, lr}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4604      	mov	r4, r0
 8001a98:	4608      	mov	r0, r1
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4623      	mov	r3, r4
 8001aa0:	80fb      	strh	r3, [r7, #6]
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	80bb      	strh	r3, [r7, #4]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	807b      	strh	r3, [r7, #2]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001aae:	4b24      	ldr	r3, [pc, #144]	@ (8001b40 <ILI9341_Draw_Rectangle+0xb0>)
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	88fa      	ldrh	r2, [r7, #6]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d23d      	bcs.n	8001b36 <ILI9341_Draw_Rectangle+0xa6>
 8001aba:	4b22      	ldr	r3, [pc, #136]	@ (8001b44 <ILI9341_Draw_Rectangle+0xb4>)
 8001abc:	881b      	ldrh	r3, [r3, #0]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	88ba      	ldrh	r2, [r7, #4]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d237      	bcs.n	8001b36 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8001ac6:	88fa      	ldrh	r2, [r7, #6]
 8001ac8:	887b      	ldrh	r3, [r7, #2]
 8001aca:	4413      	add	r3, r2
 8001acc:	4a1c      	ldr	r2, [pc, #112]	@ (8001b40 <ILI9341_Draw_Rectangle+0xb0>)
 8001ace:	8812      	ldrh	r2, [r2, #0]
 8001ad0:	b292      	uxth	r2, r2
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	dd05      	ble.n	8001ae2 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b40 <ILI9341_Draw_Rectangle+0xb0>)
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	88fb      	ldrh	r3, [r7, #6]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8001ae2:	88ba      	ldrh	r2, [r7, #4]
 8001ae4:	883b      	ldrh	r3, [r7, #0]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	4a16      	ldr	r2, [pc, #88]	@ (8001b44 <ILI9341_Draw_Rectangle+0xb4>)
 8001aea:	8812      	ldrh	r2, [r2, #0]
 8001aec:	b292      	uxth	r2, r2
 8001aee:	4293      	cmp	r3, r2
 8001af0:	dd05      	ble.n	8001afe <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8001af2:	4b14      	ldr	r3, [pc, #80]	@ (8001b44 <ILI9341_Draw_Rectangle+0xb4>)
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	88bb      	ldrh	r3, [r7, #4]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8001afe:	88fa      	ldrh	r2, [r7, #6]
 8001b00:	887b      	ldrh	r3, [r7, #2]
 8001b02:	4413      	add	r3, r2
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	3b01      	subs	r3, #1
 8001b08:	b29c      	uxth	r4, r3
 8001b0a:	88ba      	ldrh	r2, [r7, #4]
 8001b0c:	883b      	ldrh	r3, [r7, #0]
 8001b0e:	4413      	add	r3, r2
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	3b01      	subs	r3, #1
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	88b9      	ldrh	r1, [r7, #4]
 8001b18:	88f8      	ldrh	r0, [r7, #6]
 8001b1a:	4622      	mov	r2, r4
 8001b1c:	f7ff fc5a 	bl	80013d4 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8001b20:	883b      	ldrh	r3, [r7, #0]
 8001b22:	887a      	ldrh	r2, [r7, #2]
 8001b24:	fb02 f303 	mul.w	r3, r2, r3
 8001b28:	461a      	mov	r2, r3
 8001b2a:	8b3b      	ldrh	r3, [r7, #24]
 8001b2c:	4611      	mov	r1, r2
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fe26 	bl	8001780 <ILI9341_Draw_Colour_Burst>
 8001b34:	e000      	b.n	8001b38 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001b36:	bf00      	nop
}
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd90      	pop	{r4, r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000002 	.word	0x20000002
 8001b44:	20000000 	.word	0x20000000

08001b48 <ADC_START>:
void wait_us(uint32_t w) {
  uint32_t s = Get_Time_us();
  while(Get_Time_us() - s < w);
}

void ADC_START() {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim3);// Make sure that the timer is stopped, so we don't start ADC conversions in the middle of processing
 8001b4c:	4810      	ldr	r0, [pc, #64]	@ (8001b90 <ADC_START+0x48>)
 8001b4e:	f005 f979 	bl	8006e44 <HAL_TIM_Base_Stop>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ch1_data, MAX_POINTS); // This is required for all ADC conversion types
 8001b52:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001b56:	490f      	ldr	r1, [pc, #60]	@ (8001b94 <ADC_START+0x4c>)
 8001b58:	480f      	ldr	r0, [pc, #60]	@ (8001b98 <ADC_START+0x50>)
 8001b5a:	f002 fe15 	bl	8004788 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)ch0_data, MAX_POINTS);
 8001b5e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001b62:	490e      	ldr	r1, [pc, #56]	@ (8001b9c <ADC_START+0x54>)
 8001b64:	480e      	ldr	r0, [pc, #56]	@ (8001ba0 <ADC_START+0x58>)
 8001b66:	f002 fe0f 	bl	8004788 <HAL_ADC_Start_DMA>

	HAL_Delay(10); // Should be enough time for calibration?
 8001b6a:	200a      	movs	r0, #10
 8001b6c:	f002 fc94 	bl	8004498 <HAL_Delay>

	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001b70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba4 <ADC_START+0x5c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2200      	movs	r2, #0
 8001b76:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(&htim3);
 8001b78:	4805      	ldr	r0, [pc, #20]	@ (8001b90 <ADC_START+0x48>)
 8001b7a:	f005 f8fb 	bl	8006d74 <HAL_TIM_Base_Start>

	CH0_DONE_SAMPLING = false;
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba8 <ADC_START+0x60>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
	CH1_DONE_SAMPLING = false;
 8001b84:	4b09      	ldr	r3, [pc, #36]	@ (8001bac <ADC_START+0x64>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000454 	.word	0x20000454
 8001b94:	2000143c 	.word	0x2000143c
 8001b98:	2000020c 	.word	0x2000020c
 8001b9c:	2000049c 	.word	0x2000049c
 8001ba0:	20000254 	.word	0x20000254
 8001ba4:	2000040c 	.word	0x2000040c
 8001ba8:	200023dc 	.word	0x200023dc
 8001bac:	200023dd 	.word	0x200023dd

08001bb0 <convert_to_double>:

void convert_to_double(const uint16_t *input_array, double *output_array, size_t length) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	@ 0x28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
    const double scale_factor = 3.3 / 4095.0;
 8001bbc:	a316      	add	r3, pc, #88	@ (adr r3, 8001c18 <convert_to_double+0x68>)
 8001bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < length; i++) {
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bca:	e01c      	b.n	8001c06 <convert_to_double+0x56>
    	double o = input_array[i] * scale_factor;
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe fcc4 	bl	8000564 <__aeabi_i2d>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001be4:	f7fe fd28 	bl	8000638 <__aeabi_dmul>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	e9c7 2304 	strd	r2, r3, [r7, #16]
        output_array[i] = o;
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	68ba      	ldr	r2, [r7, #8]
 8001bf6:	18d1      	adds	r1, r2, r3
 8001bf8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001bfc:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < length; i++) {
 8001c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c02:	3301      	adds	r3, #1
 8001c04:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d8de      	bhi.n	8001bcc <convert_to_double+0x1c>
    }
}
 8001c0e:	bf00      	nop
 8001c10:	bf00      	nop
 8001c12:	3728      	adds	r7, #40	@ 0x28
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	e734d9b4 	.word	0xe734d9b4
 8001c1c:	3f4a680c 	.word	0x3f4a680c

08001c20 <get_range>:

int get_range() {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
	// This function figures out what range is currently being used.
	// Returns the number corresponding to the range.
	// If there is a problem, it will return -1.
	int r0 = HAL_GPIO_ReadPin(GPIOC, RANGE_0_Pin); // 100 Ohms
 8001c26:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c2a:	4826      	ldr	r0, [pc, #152]	@ (8001cc4 <get_range+0xa4>)
 8001c2c:	f003 ffaa 	bl	8005b84 <HAL_GPIO_ReadPin>
 8001c30:	4603      	mov	r3, r0
 8001c32:	617b      	str	r3, [r7, #20]
	int r1 = HAL_GPIO_ReadPin(GPIOC, RANGE_1_Pin); // 1000 Ohms
 8001c34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c38:	4822      	ldr	r0, [pc, #136]	@ (8001cc4 <get_range+0xa4>)
 8001c3a:	f003 ffa3 	bl	8005b84 <HAL_GPIO_ReadPin>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	613b      	str	r3, [r7, #16]
	int r2 = HAL_GPIO_ReadPin(GPIOC, RANGE_2_Pin); // 10000 Ohms
 8001c42:	2180      	movs	r1, #128	@ 0x80
 8001c44:	481f      	ldr	r0, [pc, #124]	@ (8001cc4 <get_range+0xa4>)
 8001c46:	f003 ff9d 	bl	8005b84 <HAL_GPIO_ReadPin>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	60fb      	str	r3, [r7, #12]
	int r3 = HAL_GPIO_ReadPin(GPIOC, RANGE_3_Pin); // 100000 Ohms
 8001c4e:	2140      	movs	r1, #64	@ 0x40
 8001c50:	481c      	ldr	r0, [pc, #112]	@ (8001cc4 <get_range+0xa4>)
 8001c52:	f003 ff97 	bl	8005b84 <HAL_GPIO_ReadPin>
 8001c56:	4603      	mov	r3, r0
 8001c58:	60bb      	str	r3, [r7, #8]

	int n = (r0*1) + (r1*10) + (r2*100) + (r3*1000);
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	461a      	mov	r2, r3
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	441a      	add	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2164      	movs	r1, #100	@ 0x64
 8001c6e:	fb01 f303 	mul.w	r3, r1, r3
 8001c72:	441a      	add	r2, r3
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c7a:	fb01 f303 	mul.w	r3, r1, r3
 8001c7e:	4413      	add	r3, r2
 8001c80:	607b      	str	r3, [r7, #4]
	if (n == 0) {
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d102      	bne.n	8001c8e <get_range+0x6e>
		return -1;
 8001c88:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8c:	e016      	b.n	8001cbc <get_range+0x9c>
	}
	if (n == 1) {
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d101      	bne.n	8001c98 <get_range+0x78>
		return 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	e011      	b.n	8001cbc <get_range+0x9c>
	}
	if (n == 10) {
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b0a      	cmp	r3, #10
 8001c9c:	d101      	bne.n	8001ca2 <get_range+0x82>
		return 1;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e00c      	b.n	8001cbc <get_range+0x9c>
	}
	if (n == 100) {
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b64      	cmp	r3, #100	@ 0x64
 8001ca6:	d101      	bne.n	8001cac <get_range+0x8c>
		return 2;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	e007      	b.n	8001cbc <get_range+0x9c>
	}
	if (n == 1000){
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001cb2:	d101      	bne.n	8001cb8 <get_range+0x98>
		return 3;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e001      	b.n	8001cbc <get_range+0x9c>
	}
	return -1;
 8001cb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40020800 	.word	0x40020800

08001cc8 <set_range>:

int set_range(int range) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
	if (range < 0) {
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	da18      	bge.n	8001d08 <set_range+0x40>
		HAL_GPIO_WritePin(GPIOC, RANGE_0_Pin, 0); // 100 Ohms
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001cdc:	4854      	ldr	r0, [pc, #336]	@ (8001e30 <set_range+0x168>)
 8001cde:	f003 ff69 	bl	8005bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, RANGE_1_Pin, 0); // 1000 Ohms
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ce8:	4851      	ldr	r0, [pc, #324]	@ (8001e30 <set_range+0x168>)
 8001cea:	f003 ff63 	bl	8005bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, RANGE_2_Pin, 0); // 10000 Ohms
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2180      	movs	r1, #128	@ 0x80
 8001cf2:	484f      	ldr	r0, [pc, #316]	@ (8001e30 <set_range+0x168>)
 8001cf4:	f003 ff5e 	bl	8005bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, RANGE_3_Pin, 0); // 100000 Ohms
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2140      	movs	r1, #64	@ 0x40
 8001cfc:	484c      	ldr	r0, [pc, #304]	@ (8001e30 <set_range+0x168>)
 8001cfe:	f003 ff59 	bl	8005bb4 <HAL_GPIO_WritePin>

		return -1;
 8001d02:	f04f 33ff 	mov.w	r3, #4294967295
 8001d06:	e08f      	b.n	8001e28 <set_range+0x160>
	}
	if (range > 3) {
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b03      	cmp	r3, #3
 8001d0c:	dd18      	ble.n	8001d40 <set_range+0x78>
		HAL_GPIO_WritePin(GPIOC, RANGE_0_Pin, 0); // 100 Ohms
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d14:	4846      	ldr	r0, [pc, #280]	@ (8001e30 <set_range+0x168>)
 8001d16:	f003 ff4d 	bl	8005bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, RANGE_1_Pin, 0); // 1000 Ohms
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d20:	4843      	ldr	r0, [pc, #268]	@ (8001e30 <set_range+0x168>)
 8001d22:	f003 ff47 	bl	8005bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, RANGE_2_Pin, 0); // 10000 Ohms
 8001d26:	2200      	movs	r2, #0
 8001d28:	2180      	movs	r1, #128	@ 0x80
 8001d2a:	4841      	ldr	r0, [pc, #260]	@ (8001e30 <set_range+0x168>)
 8001d2c:	f003 ff42 	bl	8005bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, RANGE_3_Pin, 0); // 100000 Ohms
 8001d30:	2200      	movs	r2, #0
 8001d32:	2140      	movs	r1, #64	@ 0x40
 8001d34:	483e      	ldr	r0, [pc, #248]	@ (8001e30 <set_range+0x168>)
 8001d36:	f003 ff3d 	bl	8005bb4 <HAL_GPIO_WritePin>

		return -1;
 8001d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3e:	e073      	b.n	8001e28 <set_range+0x160>
	}

	if (range == 0) {
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d11a      	bne.n	8001d7c <set_range+0xb4>
		HAL_GPIO_WritePin(GPIOC, RANGE_1_Pin, 0); // 1000 Ohms
 8001d46:	2200      	movs	r2, #0
 8001d48:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d4c:	4838      	ldr	r0, [pc, #224]	@ (8001e30 <set_range+0x168>)
 8001d4e:	f003 ff31 	bl	8005bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, RANGE_2_Pin, 0); // 10000 Ohms
 8001d52:	2200      	movs	r2, #0
 8001d54:	2180      	movs	r1, #128	@ 0x80
 8001d56:	4836      	ldr	r0, [pc, #216]	@ (8001e30 <set_range+0x168>)
 8001d58:	f003 ff2c 	bl	8005bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, RANGE_3_Pin, 0); // 100000 Ohms
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2140      	movs	r1, #64	@ 0x40
 8001d60:	4833      	ldr	r0, [pc, #204]	@ (8001e30 <set_range+0x168>)
 8001d62:	f003 ff27 	bl	8005bb4 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, RANGE_0_Pin, 1); // 100 Ohms
 8001d66:	2201      	movs	r2, #1
 8001d68:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d6c:	4830      	ldr	r0, [pc, #192]	@ (8001e30 <set_range+0x168>)
 8001d6e:	f003 ff21 	bl	8005bb4 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001d72:	2064      	movs	r0, #100	@ 0x64
 8001d74:	f002 fb90 	bl	8004498 <HAL_Delay>
		return 1;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e055      	b.n	8001e28 <set_range+0x160>
	} else if(range == 1) {
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d11a      	bne.n	8001db8 <set_range+0xf0>
		HAL_GPIO_WritePin(GPIOC, RANGE_0_Pin, 0); // 100 Ohms
 8001d82:	2200      	movs	r2, #0
 8001d84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d88:	4829      	ldr	r0, [pc, #164]	@ (8001e30 <set_range+0x168>)
 8001d8a:	f003 ff13 	bl	8005bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, RANGE_2_Pin, 0); // 10000 Ohms
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2180      	movs	r1, #128	@ 0x80
 8001d92:	4827      	ldr	r0, [pc, #156]	@ (8001e30 <set_range+0x168>)
 8001d94:	f003 ff0e 	bl	8005bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, RANGE_3_Pin, 0); // 100000 Ohms
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2140      	movs	r1, #64	@ 0x40
 8001d9c:	4824      	ldr	r0, [pc, #144]	@ (8001e30 <set_range+0x168>)
 8001d9e:	f003 ff09 	bl	8005bb4 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, RANGE_1_Pin, 1); // 1000 Ohms
 8001da2:	2201      	movs	r2, #1
 8001da4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001da8:	4821      	ldr	r0, [pc, #132]	@ (8001e30 <set_range+0x168>)
 8001daa:	f003 ff03 	bl	8005bb4 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001dae:	2064      	movs	r0, #100	@ 0x64
 8001db0:	f002 fb72 	bl	8004498 <HAL_Delay>
		return 1;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e037      	b.n	8001e28 <set_range+0x160>
	} else if (range == 2) {
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d11a      	bne.n	8001df4 <set_range+0x12c>
		HAL_GPIO_WritePin(GPIOC, RANGE_0_Pin, 0); // 100 Ohms
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001dc4:	481a      	ldr	r0, [pc, #104]	@ (8001e30 <set_range+0x168>)
 8001dc6:	f003 fef5 	bl	8005bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, RANGE_1_Pin, 0); // 1000 Ohms
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dd0:	4817      	ldr	r0, [pc, #92]	@ (8001e30 <set_range+0x168>)
 8001dd2:	f003 feef 	bl	8005bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, RANGE_3_Pin, 0); // 100000 Ohms
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2140      	movs	r1, #64	@ 0x40
 8001dda:	4815      	ldr	r0, [pc, #84]	@ (8001e30 <set_range+0x168>)
 8001ddc:	f003 feea 	bl	8005bb4 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, RANGE_2_Pin, 1); // 10000 Ohms
 8001de0:	2201      	movs	r2, #1
 8001de2:	2180      	movs	r1, #128	@ 0x80
 8001de4:	4812      	ldr	r0, [pc, #72]	@ (8001e30 <set_range+0x168>)
 8001de6:	f003 fee5 	bl	8005bb4 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001dea:	2064      	movs	r0, #100	@ 0x64
 8001dec:	f002 fb54 	bl	8004498 <HAL_Delay>
		return 1;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e019      	b.n	8001e28 <set_range+0x160>
	} else {
		HAL_GPIO_WritePin(GPIOC, RANGE_0_Pin, 0); // 100 Ohms
 8001df4:	2200      	movs	r2, #0
 8001df6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001dfa:	480d      	ldr	r0, [pc, #52]	@ (8001e30 <set_range+0x168>)
 8001dfc:	f003 feda 	bl	8005bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, RANGE_1_Pin, 0); // 1000 Ohms
 8001e00:	2200      	movs	r2, #0
 8001e02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e06:	480a      	ldr	r0, [pc, #40]	@ (8001e30 <set_range+0x168>)
 8001e08:	f003 fed4 	bl	8005bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, RANGE_2_Pin, 0); // 10000 Ohms
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2180      	movs	r1, #128	@ 0x80
 8001e10:	4807      	ldr	r0, [pc, #28]	@ (8001e30 <set_range+0x168>)
 8001e12:	f003 fecf 	bl	8005bb4 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, RANGE_3_Pin, 1); // 100000 Ohms
 8001e16:	2201      	movs	r2, #1
 8001e18:	2140      	movs	r1, #64	@ 0x40
 8001e1a:	4805      	ldr	r0, [pc, #20]	@ (8001e30 <set_range+0x168>)
 8001e1c:	f003 feca 	bl	8005bb4 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001e20:	2064      	movs	r0, #100	@ 0x64
 8001e22:	f002 fb39 	bl	8004498 <HAL_Delay>
		return 1;
 8001e26:	2301      	movs	r3, #1
	}

}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40020800 	.word	0x40020800
 8001e34:	00000000 	.word	0x00000000

08001e38 <get_shunt_resistance>:

double get_shunt_resistance() {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0

	int range = get_range();
 8001e3e:	f7ff feef 	bl	8001c20 <get_range>
 8001e42:	6078      	str	r0, [r7, #4]

	double shunt_resistance;
	if (range == 0) {
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d105      	bne.n	8001e56 <get_shunt_resistance+0x1e>
		shunt_resistance = 102.10;
 8001e4a:	a315      	add	r3, pc, #84	@ (adr r3, 8001ea0 <get_shunt_resistance+0x68>)
 8001e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e50:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001e54:	e016      	b.n	8001e84 <get_shunt_resistance+0x4c>
	} else if (range == 1){
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d105      	bne.n	8001e68 <get_shunt_resistance+0x30>
		shunt_resistance = 1002.8;
 8001e5c:	a312      	add	r3, pc, #72	@ (adr r3, 8001ea8 <get_shunt_resistance+0x70>)
 8001e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e62:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001e66:	e00d      	b.n	8001e84 <get_shunt_resistance+0x4c>
	} else if (range == 2){
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d105      	bne.n	8001e7a <get_shunt_resistance+0x42>
		shunt_resistance = 10012;
 8001e6e:	a310      	add	r3, pc, #64	@ (adr r3, 8001eb0 <get_shunt_resistance+0x78>)
 8001e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e74:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001e78:	e004      	b.n	8001e84 <get_shunt_resistance+0x4c>
	} else { // No fault handling for now. Should never be a fault :)
		shunt_resistance = 107250;
 8001e7a:	a30f      	add	r3, pc, #60	@ (adr r3, 8001eb8 <get_shunt_resistance+0x80>)
 8001e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e80:	e9c7 2302 	strd	r2, r3, [r7, #8]
	}
	return shunt_resistance;
 8001e84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e88:	ec43 2b17 	vmov	d7, r2, r3
}
 8001e8c:	eeb0 0a47 	vmov.f32	s0, s14
 8001e90:	eef0 0a67 	vmov.f32	s1, s15
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	f3af 8000 	nop.w
 8001ea0:	66666666 	.word	0x66666666
 8001ea4:	40598666 	.word	0x40598666
 8001ea8:	66666666 	.word	0x66666666
 8001eac:	408f5666 	.word	0x408f5666
 8001eb0:	00000000 	.word	0x00000000
 8001eb4:	40c38e00 	.word	0x40c38e00
 8001eb8:	00000000 	.word	0x00000000
 8001ebc:	40fa2f20 	.word	0x40fa2f20

08001ec0 <get_amp_calibration>:

double get_amp_calibration() {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08a      	sub	sp, #40	@ 0x28
 8001ec4:	af00      	add	r7, sp, #0
	// This needs to be done for each meter/setup
	double ACF0 = 19.959 / 20;
 8001ec6:	a324      	add	r3, pc, #144	@ (adr r3, 8001f58 <get_amp_calibration+0x98>)
 8001ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ecc:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double ACF1 = 19.887 / 20;
 8001ed0:	a323      	add	r3, pc, #140	@ (adr r3, 8001f60 <get_amp_calibration+0xa0>)
 8001ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double ACF2 = 19.826 / 20;
 8001eda:	a323      	add	r3, pc, #140	@ (adr r3, 8001f68 <get_amp_calibration+0xa8>)
 8001edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double ACF3 = 15.856 / 20;
 8001ee4:	a322      	add	r3, pc, #136	@ (adr r3, 8001f70 <get_amp_calibration+0xb0>)
 8001ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eea:	e9c7 2302 	strd	r2, r3, [r7, #8]

	int range = get_range();
 8001eee:	f7ff fe97 	bl	8001c20 <get_range>
 8001ef2:	6078      	str	r0, [r7, #4]

	if (frequency == 1000) {
 8001ef4:	4b16      	ldr	r3, [pc, #88]	@ (8001f50 <get_amp_calibration+0x90>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001efc:	d11b      	bne.n	8001f36 <get_amp_calibration+0x76>
		if (range == 0) {
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d102      	bne.n	8001f0a <get_amp_calibration+0x4a>
			return ACF0;
 8001f04:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f08:	e018      	b.n	8001f3c <get_amp_calibration+0x7c>
		} else if (range == 1) {
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d102      	bne.n	8001f16 <get_amp_calibration+0x56>
			return ACF1;
 8001f10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f14:	e012      	b.n	8001f3c <get_amp_calibration+0x7c>
		} else if (range == 2) {
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d102      	bne.n	8001f22 <get_amp_calibration+0x62>
			return ACF2;
 8001f1c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f20:	e00c      	b.n	8001f3c <get_amp_calibration+0x7c>
		} else if (range == 3) {
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d102      	bne.n	8001f2e <get_amp_calibration+0x6e>
			return ACF3;
 8001f28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f2c:	e006      	b.n	8001f3c <get_amp_calibration+0x7c>
		} else {
			return 1;
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	4b08      	ldr	r3, [pc, #32]	@ (8001f54 <get_amp_calibration+0x94>)
 8001f34:	e002      	b.n	8001f3c <get_amp_calibration+0x7c>
		}
	} else {
		return 1;
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	4b06      	ldr	r3, [pc, #24]	@ (8001f54 <get_amp_calibration+0x94>)
	}
}
 8001f3c:	ec43 2b17 	vmov	d7, r2, r3
 8001f40:	eeb0 0a47 	vmov.f32	s0, s14
 8001f44:	eef0 0a67 	vmov.f32	s1, s15
 8001f48:	3728      	adds	r7, #40	@ 0x28
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000004 	.word	0x20000004
 8001f54:	3ff00000 	.word	0x3ff00000
 8001f58:	d6a161e5 	.word	0xd6a161e5
 8001f5c:	3fefef34 	.word	0x3fefef34
 8001f60:	1758e21a 	.word	0x1758e21a
 8001f64:	3fefd1b7 	.word	0x3fefd1b7
 8001f68:	c710cb2a 	.word	0xc710cb2a
 8001f6c:	3fefb8ba 	.word	0x3fefb8ba
 8001f70:	1b089a02 	.word	0x1b089a02
 8001f74:	3fe95e9e 	.word	0x3fe95e9e

08001f78 <get_phase_calibration>:

double get_phase_calibration() {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08a      	sub	sp, #40	@ 0x28
 8001f7c:	af00      	add	r7, sp, #0
	// This needs to be done for each meter/setup
	double PCF0 = -0.0014542840503944804;
 8001f7e:	a325      	add	r3, pc, #148	@ (adr r3, 8002014 <get_phase_calibration+0x9c>)
 8001f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f84:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double PCF1 = -0.003935525496759973;
 8001f88:	a324      	add	r3, pc, #144	@ (adr r3, 800201c <get_phase_calibration+0xa4>)
 8001f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double PCF2 = -0.030454848010975977;
 8001f92:	a324      	add	r3, pc, #144	@ (adr r3, 8002024 <get_phase_calibration+0xac>)
 8001f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f98:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double PCF3 = -0.034066954299771218;
 8001f9c:	a323      	add	r3, pc, #140	@ (adr r3, 800202c <get_phase_calibration+0xb4>)
 8001f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa2:	e9c7 2302 	strd	r2, r3, [r7, #8]

	int range = get_range();
 8001fa6:	f7ff fe3b 	bl	8001c20 <get_range>
 8001faa:	6078      	str	r0, [r7, #4]
	if (frequency == 1000) {
 8001fac:	4b18      	ldr	r3, [pc, #96]	@ (8002010 <get_phase_calibration+0x98>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001fb4:	d11c      	bne.n	8001ff0 <get_phase_calibration+0x78>
		if (range == 0) {
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d102      	bne.n	8001fc2 <get_phase_calibration+0x4a>
			return PCF0;
 8001fbc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001fc0:	e01a      	b.n	8001ff8 <get_phase_calibration+0x80>
		} else if (range == 1) {
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d102      	bne.n	8001fce <get_phase_calibration+0x56>
			return PCF1;
 8001fc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fcc:	e014      	b.n	8001ff8 <get_phase_calibration+0x80>
		} else if (range == 2) {
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d102      	bne.n	8001fda <get_phase_calibration+0x62>
			return PCF2;
 8001fd4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001fd8:	e00e      	b.n	8001ff8 <get_phase_calibration+0x80>
		} else if (range == 3) {
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b03      	cmp	r3, #3
 8001fde:	d102      	bne.n	8001fe6 <get_phase_calibration+0x6e>
			return PCF3;
 8001fe0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fe4:	e008      	b.n	8001ff8 <get_phase_calibration+0x80>
		} else {
			return 0;
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	f04f 0300 	mov.w	r3, #0
 8001fee:	e003      	b.n	8001ff8 <get_phase_calibration+0x80>
		}
	} else {
		return 0;
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	f04f 0300 	mov.w	r3, #0
	}
}
 8001ff8:	ec43 2b17 	vmov	d7, r2, r3
 8001ffc:	eeb0 0a47 	vmov.f32	s0, s14
 8002000:	eef0 0a67 	vmov.f32	s1, s15
 8002004:	3728      	adds	r7, #40	@ 0x28
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	f3af 8000 	nop.w
 8002010:	20000004 	.word	0x20000004
 8002014:	9bdfddc0 	.word	0x9bdfddc0
 8002018:	bf57d3b5 	.word	0xbf57d3b5
 800201c:	94d18b4d 	.word	0x94d18b4d
 8002020:	bf701eb2 	.word	0xbf701eb2
 8002024:	40d8e020 	.word	0x40d8e020
 8002028:	bf9f2f8e 	.word	0xbf9f2f8e
 800202c:	4d2f062c 	.word	0x4d2f062c
 8002030:	bfa17139 	.word	0xbfa17139
 8002034:	00000000 	.word	0x00000000

08002038 <auto_range>:

int auto_range(float magnitude) {
 8002038:	b5b0      	push	{r4, r5, r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	ed87 0a01 	vstr	s0, [r7, #4]
	// This function changes the current range resistor.
	// The return value is 0 if the range is unchanged, or 1 if the range has successfully changed.
	int current_range = get_range();
 8002042:	f7ff fded 	bl	8001c20 <get_range>
 8002046:	60f8      	str	r0, [r7, #12]

	if (magnitude > 5.5 * (100 * pow(10,current_range))){
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7fe fa9d 	bl	8000588 <__aeabi_f2d>
 800204e:	4604      	mov	r4, r0
 8002050:	460d      	mov	r5, r1
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f7fe fa86 	bl	8000564 <__aeabi_i2d>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	ec43 2b11 	vmov	d1, r2, r3
 8002060:	ed9f 0b33 	vldr	d0, [pc, #204]	@ 8002130 <auto_range+0xf8>
 8002064:	f005 facc 	bl	8007600 <pow>
 8002068:	ec51 0b10 	vmov	r0, r1, d0
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	4b31      	ldr	r3, [pc, #196]	@ (8002138 <auto_range+0x100>)
 8002072:	f7fe fae1 	bl	8000638 <__aeabi_dmul>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4610      	mov	r0, r2
 800207c:	4619      	mov	r1, r3
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	4b2e      	ldr	r3, [pc, #184]	@ (800213c <auto_range+0x104>)
 8002084:	f7fe fad8 	bl	8000638 <__aeabi_dmul>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4620      	mov	r0, r4
 800208e:	4629      	mov	r1, r5
 8002090:	f7fe fd62 	bl	8000b58 <__aeabi_dcmpgt>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00b      	beq.n	80020b2 <auto_range+0x7a>
		if (current_range != 2) {
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2b02      	cmp	r3, #2
 800209e:	d006      	beq.n	80020ae <auto_range+0x76>
			set_range(current_range + 1);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	3301      	adds	r3, #1
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff fe0f 	bl	8001cc8 <set_range>
			return 1;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e039      	b.n	8002122 <auto_range+0xea>
		}
		return 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	e037      	b.n	8002122 <auto_range+0xea>
	}
	if (magnitude < 5.5 * (100 * pow(10,current_range - 1))) {
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7fe fa68 	bl	8000588 <__aeabi_f2d>
 80020b8:	4604      	mov	r4, r0
 80020ba:	460d      	mov	r5, r1
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	3b01      	subs	r3, #1
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe fa4f 	bl	8000564 <__aeabi_i2d>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	ec43 2b11 	vmov	d1, r2, r3
 80020ce:	ed9f 0b18 	vldr	d0, [pc, #96]	@ 8002130 <auto_range+0xf8>
 80020d2:	f005 fa95 	bl	8007600 <pow>
 80020d6:	ec51 0b10 	vmov	r0, r1, d0
 80020da:	f04f 0200 	mov.w	r2, #0
 80020de:	4b16      	ldr	r3, [pc, #88]	@ (8002138 <auto_range+0x100>)
 80020e0:	f7fe faaa 	bl	8000638 <__aeabi_dmul>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4610      	mov	r0, r2
 80020ea:	4619      	mov	r1, r3
 80020ec:	f04f 0200 	mov.w	r2, #0
 80020f0:	4b12      	ldr	r3, [pc, #72]	@ (800213c <auto_range+0x104>)
 80020f2:	f7fe faa1 	bl	8000638 <__aeabi_dmul>
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	4620      	mov	r0, r4
 80020fc:	4629      	mov	r1, r5
 80020fe:	f7fe fd0d 	bl	8000b1c <__aeabi_dcmplt>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00b      	beq.n	8002120 <auto_range+0xe8>
		if (current_range != 0) {
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d006      	beq.n	800211c <auto_range+0xe4>
			set_range(current_range - 1);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	3b01      	subs	r3, #1
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fdd8 	bl	8001cc8 <set_range>
			return 1;
 8002118:	2301      	movs	r3, #1
 800211a:	e002      	b.n	8002122 <auto_range+0xea>
		}
		return 0;
 800211c:	2300      	movs	r3, #0
 800211e:	e000      	b.n	8002122 <auto_range+0xea>
	}
	return 0;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bdb0      	pop	{r4, r5, r7, pc}
 800212a:	bf00      	nop
 800212c:	f3af 8000 	nop.w
 8002130:	00000000 	.word	0x00000000
 8002134:	40240000 	.word	0x40240000
 8002138:	40590000 	.word	0x40590000
 800213c:	40160000 	.word	0x40160000

08002140 <Show_Stats>:

void Show_Stats(double reactance, double resistance, double frequency){
 8002140:	b5b0      	push	{r4, r5, r7, lr}
 8002142:	b0aa      	sub	sp, #168	@ 0xa8
 8002144:	af04      	add	r7, sp, #16
 8002146:	ed87 0b04 	vstr	d0, [r7, #16]
 800214a:	ed87 1b02 	vstr	d1, [r7, #8]
 800214e:	ed87 2b00 	vstr	d2, [r7]
//	ILI9341_Fill_Screen(BLACK);
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8002152:	2003      	movs	r0, #3
 8002154:	f7ff f9a6 	bl	80014a4 <ILI9341_Set_Rotation>

	double X = reactance;
 8002158:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800215c:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
	double R = resistance;
 8002160:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002164:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88

	// Make sure in project properties to add the linker flag -u _printf_float

    char buffer[50]; // Buffer to hold the formatted string
	if (X < 0){
 8002168:	f04f 0200 	mov.w	r2, #0
 800216c:	f04f 0300 	mov.w	r3, #0
 8002170:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8002174:	f7fe fcd2 	bl	8000b1c <__aeabi_dcmplt>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d06d      	beq.n	800225a <Show_Stats+0x11a>
		float capacitance = -1e9 / (2 * M_PI * frequency * X);
 800217e:	a3a6      	add	r3, pc, #664	@ (adr r3, 8002418 <Show_Stats+0x2d8>)
 8002180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002184:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002188:	f7fe fa56 	bl	8000638 <__aeabi_dmul>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4610      	mov	r0, r2
 8002192:	4619      	mov	r1, r3
 8002194:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8002198:	f7fe fa4e 	bl	8000638 <__aeabi_dmul>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	a1a8      	add	r1, pc, #672	@ (adr r1, 8002444 <Show_Stats+0x304>)
 80021a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021a6:	f7fe fb71 	bl	800088c <__aeabi_ddiv>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	4610      	mov	r0, r2
 80021b0:	4619      	mov	r1, r3
 80021b2:	f7fe fd19 	bl	8000be8 <__aeabi_d2f>
 80021b6:	4603      	mov	r3, r0
 80021b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		ILI9341_Draw_Text("                        ", 10, 40, WHITE, 2, BLACK);
 80021bc:	2300      	movs	r3, #0
 80021be:	9301      	str	r3, [sp, #4]
 80021c0:	2302      	movs	r3, #2
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021c8:	2228      	movs	r2, #40	@ 0x28
 80021ca:	210a      	movs	r1, #10
 80021cc:	4894      	ldr	r0, [pc, #592]	@ (8002420 <Show_Stats+0x2e0>)
 80021ce:	f7ff f877 	bl	80012c0 <ILI9341_Draw_Text>
		snprintf(buffer, sizeof(buffer), "Cs: %.3f nF", capacitance);
 80021d2:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80021d6:	f7fe f9d7 	bl	8000588 <__aeabi_f2d>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 80021e2:	e9cd 2300 	strd	r2, r3, [sp]
 80021e6:	4a8f      	ldr	r2, [pc, #572]	@ (8002424 <Show_Stats+0x2e4>)
 80021e8:	2132      	movs	r1, #50	@ 0x32
 80021ea:	f008 f90b 	bl	800a404 <sniprintf>
		ILI9341_Draw_Text(buffer, 10, 40, WHITE, 2, BLACK);
 80021ee:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 80021f2:	2300      	movs	r3, #0
 80021f4:	9301      	str	r3, [sp, #4]
 80021f6:	2302      	movs	r3, #2
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021fe:	2228      	movs	r2, #40	@ 0x28
 8002200:	210a      	movs	r1, #10
 8002202:	f7ff f85d 	bl	80012c0 <ILI9341_Draw_Text>


        char impedance[50];
        snprintf(impedance, sizeof(impedance), "Z: %.2f - j %.2f", R, -X);
 8002206:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 800220a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800220e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002212:	f107 0018 	add.w	r0, r7, #24
 8002216:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800221a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800221e:	e9cd 2300 	strd	r2, r3, [sp]
 8002222:	4a81      	ldr	r2, [pc, #516]	@ (8002428 <Show_Stats+0x2e8>)
 8002224:	2132      	movs	r1, #50	@ 0x32
 8002226:	f008 f8ed 	bl	800a404 <sniprintf>

		ILI9341_Draw_Text("                        ", 10, 120, WHITE, 2, BLACK);
 800222a:	2300      	movs	r3, #0
 800222c:	9301      	str	r3, [sp, #4]
 800222e:	2302      	movs	r3, #2
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002236:	2278      	movs	r2, #120	@ 0x78
 8002238:	210a      	movs	r1, #10
 800223a:	4879      	ldr	r0, [pc, #484]	@ (8002420 <Show_Stats+0x2e0>)
 800223c:	f7ff f840 	bl	80012c0 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(impedance, 10, 120, WHITE, 2, BLACK);
 8002240:	f107 0018 	add.w	r0, r7, #24
 8002244:	2300      	movs	r3, #0
 8002246:	9301      	str	r3, [sp, #4]
 8002248:	2302      	movs	r3, #2
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002250:	2278      	movs	r2, #120	@ 0x78
 8002252:	210a      	movs	r1, #10
 8002254:	f7ff f834 	bl	80012c0 <ILI9341_Draw_Text>
 8002258:	e06a      	b.n	8002330 <Show_Stats+0x1f0>

	} else {
        float inductance = X * 1e6 / (2 * M_PI * frequency);
 800225a:	a36d      	add	r3, pc, #436	@ (adr r3, 8002410 <Show_Stats+0x2d0>)
 800225c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002260:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8002264:	f7fe f9e8 	bl	8000638 <__aeabi_dmul>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4614      	mov	r4, r2
 800226e:	461d      	mov	r5, r3
 8002270:	a369      	add	r3, pc, #420	@ (adr r3, 8002418 <Show_Stats+0x2d8>)
 8002272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002276:	e9d7 0100 	ldrd	r0, r1, [r7]
 800227a:	f7fe f9dd 	bl	8000638 <__aeabi_dmul>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4620      	mov	r0, r4
 8002284:	4629      	mov	r1, r5
 8002286:	f7fe fb01 	bl	800088c <__aeabi_ddiv>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4610      	mov	r0, r2
 8002290:	4619      	mov	r1, r3
 8002292:	f7fe fca9 	bl	8000be8 <__aeabi_d2f>
 8002296:	4603      	mov	r3, r0
 8002298:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		ILI9341_Draw_Text("                        ", 10, 40, WHITE, 2, BLACK);
 800229c:	2300      	movs	r3, #0
 800229e:	9301      	str	r3, [sp, #4]
 80022a0:	2302      	movs	r3, #2
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80022a8:	2228      	movs	r2, #40	@ 0x28
 80022aa:	210a      	movs	r1, #10
 80022ac:	485c      	ldr	r0, [pc, #368]	@ (8002420 <Show_Stats+0x2e0>)
 80022ae:	f7ff f807 	bl	80012c0 <ILI9341_Draw_Text>
        snprintf(buffer, sizeof(buffer), "Ls: %.3f uH", inductance);
 80022b2:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80022b6:	f7fe f967 	bl	8000588 <__aeabi_f2d>
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 80022c2:	e9cd 2300 	strd	r2, r3, [sp]
 80022c6:	4a59      	ldr	r2, [pc, #356]	@ (800242c <Show_Stats+0x2ec>)
 80022c8:	2132      	movs	r1, #50	@ 0x32
 80022ca:	f008 f89b 	bl	800a404 <sniprintf>
        ILI9341_Draw_Text(buffer, 10, 40, WHITE, 2, BLACK);
 80022ce:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 80022d2:	2300      	movs	r3, #0
 80022d4:	9301      	str	r3, [sp, #4]
 80022d6:	2302      	movs	r3, #2
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80022de:	2228      	movs	r2, #40	@ 0x28
 80022e0:	210a      	movs	r1, #10
 80022e2:	f7fe ffed 	bl	80012c0 <ILI9341_Draw_Text>

        char impedance[50];
        snprintf(impedance, sizeof(impedance), "Z: %.3f + j %.3f", R, X);
 80022e6:	f107 0018 	add.w	r0, r7, #24
 80022ea:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80022ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80022f2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80022f6:	e9cd 2300 	strd	r2, r3, [sp]
 80022fa:	4a4d      	ldr	r2, [pc, #308]	@ (8002430 <Show_Stats+0x2f0>)
 80022fc:	2132      	movs	r1, #50	@ 0x32
 80022fe:	f008 f881 	bl	800a404 <sniprintf>

		ILI9341_Draw_Text("                        ", 10, 120, WHITE, 2, BLACK);
 8002302:	2300      	movs	r3, #0
 8002304:	9301      	str	r3, [sp, #4]
 8002306:	2302      	movs	r3, #2
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800230e:	2278      	movs	r2, #120	@ 0x78
 8002310:	210a      	movs	r1, #10
 8002312:	4843      	ldr	r0, [pc, #268]	@ (8002420 <Show_Stats+0x2e0>)
 8002314:	f7fe ffd4 	bl	80012c0 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(impedance, 10, 120, WHITE, 2, BLACK);
 8002318:	f107 0018 	add.w	r0, r7, #24
 800231c:	2300      	movs	r3, #0
 800231e:	9301      	str	r3, [sp, #4]
 8002320:	2302      	movs	r3, #2
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002328:	2278      	movs	r2, #120	@ 0x78
 800232a:	210a      	movs	r1, #10
 800232c:	f7fe ffc8 	bl	80012c0 <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text("                        ", 10, 80, WHITE, 2, BLACK);
 8002330:	2300      	movs	r3, #0
 8002332:	9301      	str	r3, [sp, #4]
 8002334:	2302      	movs	r3, #2
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800233c:	2250      	movs	r2, #80	@ 0x50
 800233e:	210a      	movs	r1, #10
 8002340:	4837      	ldr	r0, [pc, #220]	@ (8002420 <Show_Stats+0x2e0>)
 8002342:	f7fe ffbd 	bl	80012c0 <ILI9341_Draw_Text>
	snprintf(buffer, sizeof(buffer), "ESR: %.2f Ohms", R);
 8002346:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 800234a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800234e:	e9cd 2300 	strd	r2, r3, [sp]
 8002352:	4a38      	ldr	r2, [pc, #224]	@ (8002434 <Show_Stats+0x2f4>)
 8002354:	2132      	movs	r1, #50	@ 0x32
 8002356:	f008 f855 	bl	800a404 <sniprintf>
	ILI9341_Draw_Text(buffer, 10, 80, WHITE, 2, BLACK);
 800235a:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 800235e:	2300      	movs	r3, #0
 8002360:	9301      	str	r3, [sp, #4]
 8002362:	2302      	movs	r3, #2
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800236a:	2250      	movs	r2, #80	@ 0x50
 800236c:	210a      	movs	r1, #10
 800236e:	f7fe ffa7 	bl	80012c0 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("                        ", 10, 160, WHITE, 2, BLACK);
 8002372:	2300      	movs	r3, #0
 8002374:	9301      	str	r3, [sp, #4]
 8002376:	2302      	movs	r3, #2
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800237e:	22a0      	movs	r2, #160	@ 0xa0
 8002380:	210a      	movs	r1, #10
 8002382:	4827      	ldr	r0, [pc, #156]	@ (8002420 <Show_Stats+0x2e0>)
 8002384:	f7fe ff9c 	bl	80012c0 <ILI9341_Draw_Text>
	snprintf(buffer, sizeof(buffer), "Freq: %.2f kHz", frequency / 1000);
 8002388:	f04f 0200 	mov.w	r2, #0
 800238c:	4b2a      	ldr	r3, [pc, #168]	@ (8002438 <Show_Stats+0x2f8>)
 800238e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002392:	f7fe fa7b 	bl	800088c <__aeabi_ddiv>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 800239e:	e9cd 2300 	strd	r2, r3, [sp]
 80023a2:	4a26      	ldr	r2, [pc, #152]	@ (800243c <Show_Stats+0x2fc>)
 80023a4:	2132      	movs	r1, #50	@ 0x32
 80023a6:	f008 f82d 	bl	800a404 <sniprintf>
	ILI9341_Draw_Text(buffer, 10, 160, WHITE, 2, BLACK);
 80023aa:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 80023ae:	2300      	movs	r3, #0
 80023b0:	9301      	str	r3, [sp, #4]
 80023b2:	2302      	movs	r3, #2
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80023ba:	22a0      	movs	r2, #160	@ 0xa0
 80023bc:	210a      	movs	r1, #10
 80023be:	f7fe ff7f 	bl	80012c0 <ILI9341_Draw_Text>


	ILI9341_Draw_Text("                        ", 10, 200, WHITE, 2, BLACK);
 80023c2:	2300      	movs	r3, #0
 80023c4:	9301      	str	r3, [sp, #4]
 80023c6:	2302      	movs	r3, #2
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80023ce:	22c8      	movs	r2, #200	@ 0xc8
 80023d0:	210a      	movs	r1, #10
 80023d2:	4813      	ldr	r0, [pc, #76]	@ (8002420 <Show_Stats+0x2e0>)
 80023d4:	f7fe ff74 	bl	80012c0 <ILI9341_Draw_Text>
	snprintf(buffer, sizeof(buffer), "Range: %i", get_range());
 80023d8:	f7ff fc22 	bl	8001c20 <get_range>
 80023dc:	4603      	mov	r3, r0
 80023de:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 80023e2:	4a17      	ldr	r2, [pc, #92]	@ (8002440 <Show_Stats+0x300>)
 80023e4:	2132      	movs	r1, #50	@ 0x32
 80023e6:	f008 f80d 	bl	800a404 <sniprintf>
	ILI9341_Draw_Text(buffer, 10, 200, WHITE, 2, BLACK);
 80023ea:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 80023ee:	2300      	movs	r3, #0
 80023f0:	9301      	str	r3, [sp, #4]
 80023f2:	2302      	movs	r3, #2
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80023fa:	22c8      	movs	r2, #200	@ 0xc8
 80023fc:	210a      	movs	r1, #10
 80023fe:	f7fe ff5f 	bl	80012c0 <ILI9341_Draw_Text>
}
 8002402:	bf00      	nop
 8002404:	3798      	adds	r7, #152	@ 0x98
 8002406:	46bd      	mov	sp, r7
 8002408:	bdb0      	pop	{r4, r5, r7, pc}
 800240a:	bf00      	nop
 800240c:	f3af 8000 	nop.w
 8002410:	00000000 	.word	0x00000000
 8002414:	412e8480 	.word	0x412e8480
 8002418:	54442d18 	.word	0x54442d18
 800241c:	401921fb 	.word	0x401921fb
 8002420:	0800c6a0 	.word	0x0800c6a0
 8002424:	0800c6bc 	.word	0x0800c6bc
 8002428:	0800c6c8 	.word	0x0800c6c8
 800242c:	0800c6dc 	.word	0x0800c6dc
 8002430:	0800c6e8 	.word	0x0800c6e8
 8002434:	0800c6fc 	.word	0x0800c6fc
 8002438:	408f4000 	.word	0x408f4000
 800243c:	0800c70c 	.word	0x0800c70c
 8002440:	0800c71c 	.word	0x0800c71c
 8002444:	00000000 	.word	0x00000000
 8002448:	c1cdcd65 	.word	0xc1cdcd65
 800244c:	00000000 	.word	0x00000000

08002450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002454:	b0ad      	sub	sp, #180	@ 0xb4
 8002456:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002458:	f001 ffac 	bl	80043b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800245c:	f000 f9fa 	bl	8002854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002460:	f000 fc36 	bl	8002cd0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002464:	f000 fc0c 	bl	8002c80 <MX_DMA_Init>
  MX_SPI1_Init();
 8002468:	f000 fb04 	bl	8002a74 <MX_SPI1_Init>
  MX_SPI3_Init();
 800246c:	f000 fb38 	bl	8002ae0 <MX_SPI3_Init>
  MX_ADC1_Init();
 8002470:	f000 fa5c 	bl	800292c <MX_ADC1_Init>
  MX_ADC2_Init();
 8002474:	f000 faac 	bl	80029d0 <MX_ADC2_Init>
  MX_TIM2_Init();
 8002478:	f000 fb68 	bl	8002b4c <MX_TIM2_Init>
  MX_TIM3_Init();
 800247c:	f000 fbb2 	bl	8002be4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */



  memset(ch0_data, 0, MAX_POINTS);  // Set all bytes in the array to 0
 8002480:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002484:	2100      	movs	r1, #0
 8002486:	4842      	ldr	r0, [pc, #264]	@ (8002590 <main+0x140>)
 8002488:	f008 f833 	bl	800a4f2 <memset>
  memset(ch1_data, 0, MAX_POINTS);  // Set all bytes in the array to 0
 800248c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002490:	2100      	movs	r1, #0
 8002492:	4840      	ldr	r0, [pc, #256]	@ (8002594 <main+0x144>)
 8002494:	f008 f82d 	bl	800a4f2 <memset>

	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002498:	4b3f      	ldr	r3, [pc, #252]	@ (8002598 <main+0x148>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2200      	movs	r2, #0
 800249e:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(&htim2);
 80024a0:	483d      	ldr	r0, [pc, #244]	@ (8002598 <main+0x148>)
 80024a2:	f004 fc67 	bl	8006d74 <HAL_TIM_Base_Start>

	double load_amplitude = 0;
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	f04f 0300 	mov.w	r3, #0
 80024ae:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double load_phase = 0;
 80024b2:	f04f 0200 	mov.w	r2, #0
 80024b6:	f04f 0300 	mov.w	r3, #0
 80024ba:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double load_offset = 0;
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	f04f 0300 	mov.w	r3, #0
 80024c6:	e9c7 2306 	strd	r2, r3, [r7, #24]

	double shunt_amplitude = 0;
 80024ca:	f04f 0200 	mov.w	r2, #0
 80024ce:	f04f 0300 	mov.w	r3, #0
 80024d2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double shunt_phase = 0;
 80024d6:	f04f 0200 	mov.w	r2, #0
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double shunt_offset = 0;
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	f04f 0300 	mov.w	r3, #0
 80024ea:	e9c7 2300 	strd	r2, r3, [r7]


	ILI9341_Init();
 80024ee:	f7ff f837 	bl	8001560 <ILI9341_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (FREQ_UPDATE_NEEDED > 0) {
 80024f2:	4b2a      	ldr	r3, [pc, #168]	@ (800259c <main+0x14c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	dd1a      	ble.n	8002530 <main+0xe0>
		  AD9833_set_freq(frequency);
 80024fa:	4b29      	ldr	r3, [pc, #164]	@ (80025a0 <main+0x150>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	ee07 3a90 	vmov	s15, r3
 8002502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002506:	eeb0 0a67 	vmov.f32	s0, s15
 800250a:	f7fe fde3 	bl	80010d4 <AD9833_set_freq>
		  AD9833_set_freq(frequency);
 800250e:	4b24      	ldr	r3, [pc, #144]	@ (80025a0 <main+0x150>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	ee07 3a90 	vmov	s15, r3
 8002516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800251a:	eeb0 0a67 	vmov.f32	s0, s15
 800251e:	f7fe fdd9 	bl	80010d4 <AD9833_set_freq>
		  // for some reason can't be changed by just reconfiguring the SPI bus (as I am doing in the
		  // AD9833 driver) but rather actually requires an spi transfer to initiate the correct
		  // Polarity clock for the start of the next transfer. This is required because the AD9833
		  // Requires the clock to idle HIGH before the CS/FSYNC pin goes low. I'm too lazy to figure
		  // out how to fix this easily. This works, so I'm keeping it.
		  FREQ_UPDATE_NEEDED = 0; // clear flag
 8002522:	4b1e      	ldr	r3, [pc, #120]	@ (800259c <main+0x14c>)
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
		  HAL_Delay(1000); // allow for the frequency to stabilize before sampling
 8002528:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800252c:	f001 ffb4 	bl	8004498 <HAL_Delay>
	  }


	  double sampleF = frequency; // samples and hold the frequency to ensure it won't change while in the middle of gathering smaples
 8002530:	4b1b      	ldr	r3, [pc, #108]	@ (80025a0 <main+0x150>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f7fe f805 	bl	8000544 <__aeabi_ui2d>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
	  double sampleRate = 1.4e6;
 8002542:	a311      	add	r3, pc, #68	@ (adr r3, 8002588 <main+0x138>)
 8002544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002548:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	  double avgMag = 0;
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	f04f 0300 	mov.w	r3, #0
 8002554:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
	  double avgPhase = 0;
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	f04f 0300 	mov.w	r3, #0
 8002560:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
	  double avgR = 0;
 8002564:	f04f 0200 	mov.w	r2, #0
 8002568:	f04f 0300 	mov.w	r3, #0
 800256c:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	  double avgX = 0;
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	  int cycles = 5;
 800257c:	2305      	movs	r3, #5
 800257e:	667b      	str	r3, [r7, #100]	@ 0x64

	  for (int i = 0; i < cycles; i++) {
 8002580:	2300      	movs	r3, #0
 8002582:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002586:	e0ca      	b.n	800271e <main+0x2ce>
 8002588:	00000000 	.word	0x00000000
 800258c:	41355cc0 	.word	0x41355cc0
 8002590:	2000049c 	.word	0x2000049c
 8002594:	2000143c 	.word	0x2000143c
 8002598:	2000040c 	.word	0x2000040c
 800259c:	20000008 	.word	0x20000008
 80025a0:	20000004 	.word	0x20000004
 80025a4:	466b      	mov	r3, sp
 80025a6:	461e      	mov	r6, r3

		  ADC_START();
 80025a8:	f7ff face 	bl	8001b48 <ADC_START>
		  while(!CH0_DONE_SAMPLING || !CH1_DONE_SAMPLING); // Wait for samples to be  collected
 80025ac:	bf00      	nop
 80025ae:	4ba4      	ldr	r3, [pc, #656]	@ (8002840 <main+0x3f0>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	f083 0301 	eor.w	r3, r3, #1
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1f8      	bne.n	80025ae <main+0x15e>
 80025bc:	4ba1      	ldr	r3, [pc, #644]	@ (8002844 <main+0x3f4>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	f083 0301 	eor.w	r3, r3, #1
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f1      	bne.n	80025ae <main+0x15e>

		  uint32_t collected_points = MAX_POINTS; // Testing new method with all the available points
 80025ca:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80025ce:	64fb      	str	r3, [r7, #76]	@ 0x4c

		  double DBL_BUF[collected_points];
 80025d0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80025d2:	460b      	mov	r3, r1
 80025d4:	3b01      	subs	r3, #1
 80025d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025d8:	2300      	movs	r3, #0
 80025da:	460c      	mov	r4, r1
 80025dc:	461d      	mov	r5, r3
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	01ab      	lsls	r3, r5, #6
 80025e8:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 80025ec:	01a2      	lsls	r2, r4, #6
 80025ee:	2300      	movs	r3, #0
 80025f0:	4688      	mov	r8, r1
 80025f2:	4699      	mov	r9, r3
 80025f4:	f04f 0200 	mov.w	r2, #0
 80025f8:	f04f 0300 	mov.w	r3, #0
 80025fc:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002600:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002604:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002608:	00cb      	lsls	r3, r1, #3
 800260a:	3307      	adds	r3, #7
 800260c:	08db      	lsrs	r3, r3, #3
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	ebad 0d03 	sub.w	sp, sp, r3
 8002614:	ab02      	add	r3, sp, #8
 8002616:	3307      	adds	r3, #7
 8002618:	08db      	lsrs	r3, r3, #3
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	647b      	str	r3, [r7, #68]	@ 0x44

		  convert_to_double(ch1_data, DBL_BUF, collected_points);
 800261e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002620:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002622:	4889      	ldr	r0, [pc, #548]	@ (8002848 <main+0x3f8>)
 8002624:	f7ff fac4 	bl	8001bb0 <convert_to_double>
		  least_squares_sine(collected_points, sampleF, sampleRate, 0, DBL_BUF, &shunt_amplitude, &shunt_phase, &shunt_offset);
 8002628:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800262a:	f107 0108 	add.w	r1, r7, #8
 800262e:	f107 0210 	add.w	r2, r7, #16
 8002632:	463b      	mov	r3, r7
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	460b      	mov	r3, r1
 8002638:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800263a:	ed9f 2b7b 	vldr	d2, [pc, #492]	@ 8002828 <main+0x3d8>
 800263e:	ed97 1b1e 	vldr	d1, [r7, #120]	@ 0x78
 8002642:	ed97 0b20 	vldr	d0, [r7, #128]	@ 0x80
 8002646:	f001 f9fb 	bl	8003a40 <least_squares_sine>

		  convert_to_double(ch0_data, DBL_BUF, collected_points);
 800264a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800264c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800264e:	487f      	ldr	r0, [pc, #508]	@ (800284c <main+0x3fc>)
 8002650:	f7ff faae 	bl	8001bb0 <convert_to_double>
		  least_squares_sine(collected_points, sampleF, sampleRate, 0, DBL_BUF, &load_amplitude, &load_phase, &load_offset);
 8002654:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002656:	f107 0120 	add.w	r1, r7, #32
 800265a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800265e:	f107 0318 	add.w	r3, r7, #24
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	460b      	mov	r3, r1
 8002666:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002668:	ed9f 2b6f 	vldr	d2, [pc, #444]	@ 8002828 <main+0x3d8>
 800266c:	ed97 1b1e 	vldr	d1, [r7, #120]	@ 0x78
 8002670:	ed97 0b20 	vldr	d0, [r7, #128]	@ 0x80
 8002674:	f001 f9e4 	bl	8003a40 <least_squares_sine>

		  double shunt_resistance = get_shunt_resistance();
 8002678:	f7ff fbde 	bl	8001e38 <get_shunt_resistance>
 800267c:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38

		  double impedance_magnitude = (load_amplitude / (shunt_amplitude / shunt_resistance));
 8002680:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 8002684:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002688:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800268c:	f7fe f8fe 	bl	800088c <__aeabi_ddiv>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4650      	mov	r0, sl
 8002696:	4659      	mov	r1, fp
 8002698:	f7fe f8f8 	bl	800088c <__aeabi_ddiv>
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		  double impedance_angle = (load_phase - shunt_phase);
 80026a4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80026a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026ac:	f7fd fe0c 	bl	80002c8 <__aeabi_dsub>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
		  if (impedance_angle > M_PI) {
 80026b8:	a35d      	add	r3, pc, #372	@ (adr r3, 8002830 <main+0x3e0>)
 80026ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026be:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80026c2:	f7fe fa49 	bl	8000b58 <__aeabi_dcmpgt>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00a      	beq.n	80026e2 <main+0x292>
			  impedance_angle -= 2 * M_PI;
 80026cc:	a35a      	add	r3, pc, #360	@ (adr r3, 8002838 <main+0x3e8>)
 80026ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80026d6:	f7fd fdf7 	bl	80002c8 <__aeabi_dsub>
 80026da:	4602      	mov	r2, r0
 80026dc:	460b      	mov	r3, r1
 80026de:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
		  }
		  avgMag += impedance_magnitude;
 80026e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80026e6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80026ea:	f7fd fdef 	bl	80002cc <__adddf3>
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
		  avgPhase += impedance_angle;
 80026f6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80026fa:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80026fe:	f7fd fde5 	bl	80002cc <__adddf3>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98

		  __HAL_TIM_SET_COUNTER(&htim2, 0);
 800270a:	4b51      	ldr	r3, [pc, #324]	@ (8002850 <main+0x400>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2200      	movs	r2, #0
 8002710:	625a      	str	r2, [r3, #36]	@ 0x24
 8002712:	46b5      	mov	sp, r6
	  for (int i = 0; i < cycles; i++) {
 8002714:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002718:	3301      	adds	r3, #1
 800271a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800271e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002722:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002724:	429a      	cmp	r2, r3
 8002726:	f6ff af3d 	blt.w	80025a4 <main+0x154>

	  }
	  double ACF = get_amp_calibration(); // Calibration factor, range 2
 800272a:	f7ff fbc9 	bl	8001ec0 <get_amp_calibration>
 800272e:	ed87 0b16 	vstr	d0, [r7, #88]	@ 0x58
	  double PCF = get_phase_calibration();
 8002732:	f7ff fc21 	bl	8001f78 <get_phase_calibration>
 8002736:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
	  avgMag = (avgMag / cycles) * ACF;
 800273a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800273c:	f7fd ff12 	bl	8000564 <__aeabi_i2d>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8002748:	f7fe f8a0 	bl	800088c <__aeabi_ddiv>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8002754:	f7fd ff70 	bl	8000638 <__aeabi_dmul>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0

	  // Frequency 1000
	  avgPhase = (avgPhase / cycles) + PCF; // Range 3
 8002760:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8002762:	f7fd feff 	bl	8000564 <__aeabi_i2d>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800276e:	f7fe f88d 	bl	800088c <__aeabi_ddiv>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800277a:	f7fd fda7 	bl	80002cc <__adddf3>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98

	  avgX = avgMag * sin(avgPhase);
 8002786:	ed97 0b26 	vldr	d0, [r7, #152]	@ 0x98
 800278a:	f005 f9c9 	bl	8007b20 <sin>
 800278e:	ec53 2b10 	vmov	r2, r3, d0
 8002792:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8002796:	f7fd ff4f 	bl	8000638 <__aeabi_dmul>
 800279a:	4602      	mov	r2, r0
 800279c:	460b      	mov	r3, r1
 800279e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	  avgR = avgMag * cos(avgPhase);
 80027a2:	ed97 0b26 	vldr	d0, [r7, #152]	@ 0x98
 80027a6:	f005 f95f 	bl	8007a68 <cos>
 80027aa:	ec53 2b10 	vmov	r2, r3, d0
 80027ae:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80027b2:	f7fd ff41 	bl	8000638 <__aeabi_dmul>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

	  Show_Stats(avgX, avgR, sampleF);
 80027be:	ed97 2b20 	vldr	d2, [r7, #128]	@ 0x80
 80027c2:	ed97 1b1c 	vldr	d1, [r7, #112]	@ 0x70
 80027c6:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 80027ca:	f7ff fcb9 	bl	8002140 <Show_Stats>


	  auto_range(sqrt(avgX * avgX + avgR * avgR));
 80027ce:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80027d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80027d6:	f7fd ff2f 	bl	8000638 <__aeabi_dmul>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	4692      	mov	sl, r2
 80027e0:	469b      	mov	fp, r3
 80027e2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80027e6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80027ea:	f7fd ff25 	bl	8000638 <__aeabi_dmul>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4650      	mov	r0, sl
 80027f4:	4659      	mov	r1, fp
 80027f6:	f7fd fd69 	bl	80002cc <__adddf3>
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	ec43 2b17 	vmov	d7, r2, r3
 8002802:	eeb0 0a47 	vmov.f32	s0, s14
 8002806:	eef0 0a67 	vmov.f32	s1, s15
 800280a:	f004 ff69 	bl	80076e0 <sqrt>
 800280e:	ec53 2b10 	vmov	r2, r3, d0
 8002812:	4610      	mov	r0, r2
 8002814:	4619      	mov	r1, r3
 8002816:	f7fe f9e7 	bl	8000be8 <__aeabi_d2f>
 800281a:	4603      	mov	r3, r0
 800281c:	ee00 3a10 	vmov	s0, r3
 8002820:	f7ff fc0a 	bl	8002038 <auto_range>
  {
 8002824:	e665      	b.n	80024f2 <main+0xa2>
 8002826:	bf00      	nop
	...
 8002830:	54442d18 	.word	0x54442d18
 8002834:	400921fb 	.word	0x400921fb
 8002838:	54442d18 	.word	0x54442d18
 800283c:	401921fb 	.word	0x401921fb
 8002840:	200023dc 	.word	0x200023dc
 8002844:	200023dd 	.word	0x200023dd
 8002848:	2000143c 	.word	0x2000143c
 800284c:	2000049c 	.word	0x2000049c
 8002850:	2000040c 	.word	0x2000040c

08002854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b094      	sub	sp, #80	@ 0x50
 8002858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800285a:	f107 031c 	add.w	r3, r7, #28
 800285e:	2234      	movs	r2, #52	@ 0x34
 8002860:	2100      	movs	r1, #0
 8002862:	4618      	mov	r0, r3
 8002864:	f007 fe45 	bl	800a4f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002868:	f107 0308 	add.w	r3, r7, #8
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	60da      	str	r2, [r3, #12]
 8002876:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002878:	2300      	movs	r3, #0
 800287a:	607b      	str	r3, [r7, #4]
 800287c:	4b29      	ldr	r3, [pc, #164]	@ (8002924 <SystemClock_Config+0xd0>)
 800287e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002880:	4a28      	ldr	r2, [pc, #160]	@ (8002924 <SystemClock_Config+0xd0>)
 8002882:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002886:	6413      	str	r3, [r2, #64]	@ 0x40
 8002888:	4b26      	ldr	r3, [pc, #152]	@ (8002924 <SystemClock_Config+0xd0>)
 800288a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002890:	607b      	str	r3, [r7, #4]
 8002892:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002894:	2300      	movs	r3, #0
 8002896:	603b      	str	r3, [r7, #0]
 8002898:	4b23      	ldr	r3, [pc, #140]	@ (8002928 <SystemClock_Config+0xd4>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a22      	ldr	r2, [pc, #136]	@ (8002928 <SystemClock_Config+0xd4>)
 800289e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028a2:	6013      	str	r3, [r2, #0]
 80028a4:	4b20      	ldr	r3, [pc, #128]	@ (8002928 <SystemClock_Config+0xd4>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80028ac:	603b      	str	r3, [r7, #0]
 80028ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028b0:	2301      	movs	r3, #1
 80028b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028ba:	2302      	movs	r3, #2
 80028bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80028c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80028c4:	2304      	movs	r3, #4
 80028c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80028c8:	23a8      	movs	r3, #168	@ 0xa8
 80028ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028cc:	2302      	movs	r3, #2
 80028ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80028d0:	2302      	movs	r3, #2
 80028d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80028d4:	2302      	movs	r3, #2
 80028d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028d8:	f107 031c 	add.w	r3, r7, #28
 80028dc:	4618      	mov	r0, r3
 80028de:	f003 fcb1 	bl	8006244 <HAL_RCC_OscConfig>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80028e8:	f000 faee 	bl	8002ec8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028ec:	230f      	movs	r3, #15
 80028ee:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028f0:	2302      	movs	r3, #2
 80028f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028f4:	2300      	movs	r3, #0
 80028f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80028f8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80028fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80028fe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002902:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002904:	f107 0308 	add.w	r3, r7, #8
 8002908:	2105      	movs	r1, #5
 800290a:	4618      	mov	r0, r3
 800290c:	f003 f984 	bl	8005c18 <HAL_RCC_ClockConfig>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002916:	f000 fad7 	bl	8002ec8 <Error_Handler>
  }
}
 800291a:	bf00      	nop
 800291c:	3750      	adds	r7, #80	@ 0x50
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40023800 	.word	0x40023800
 8002928:	40007000 	.word	0x40007000

0800292c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002932:	463b      	mov	r3, r7
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800293e:	4b22      	ldr	r3, [pc, #136]	@ (80029c8 <MX_ADC1_Init+0x9c>)
 8002940:	4a22      	ldr	r2, [pc, #136]	@ (80029cc <MX_ADC1_Init+0xa0>)
 8002942:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002944:	4b20      	ldr	r3, [pc, #128]	@ (80029c8 <MX_ADC1_Init+0x9c>)
 8002946:	2200      	movs	r2, #0
 8002948:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800294a:	4b1f      	ldr	r3, [pc, #124]	@ (80029c8 <MX_ADC1_Init+0x9c>)
 800294c:	2200      	movs	r2, #0
 800294e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002950:	4b1d      	ldr	r3, [pc, #116]	@ (80029c8 <MX_ADC1_Init+0x9c>)
 8002952:	2200      	movs	r2, #0
 8002954:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002956:	4b1c      	ldr	r3, [pc, #112]	@ (80029c8 <MX_ADC1_Init+0x9c>)
 8002958:	2201      	movs	r2, #1
 800295a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800295c:	4b1a      	ldr	r3, [pc, #104]	@ (80029c8 <MX_ADC1_Init+0x9c>)
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002964:	4b18      	ldr	r3, [pc, #96]	@ (80029c8 <MX_ADC1_Init+0x9c>)
 8002966:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800296a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800296c:	4b16      	ldr	r3, [pc, #88]	@ (80029c8 <MX_ADC1_Init+0x9c>)
 800296e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002972:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002974:	4b14      	ldr	r3, [pc, #80]	@ (80029c8 <MX_ADC1_Init+0x9c>)
 8002976:	2200      	movs	r2, #0
 8002978:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800297a:	4b13      	ldr	r3, [pc, #76]	@ (80029c8 <MX_ADC1_Init+0x9c>)
 800297c:	2201      	movs	r2, #1
 800297e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002980:	4b11      	ldr	r3, [pc, #68]	@ (80029c8 <MX_ADC1_Init+0x9c>)
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002988:	4b0f      	ldr	r3, [pc, #60]	@ (80029c8 <MX_ADC1_Init+0x9c>)
 800298a:	2200      	movs	r2, #0
 800298c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800298e:	480e      	ldr	r0, [pc, #56]	@ (80029c8 <MX_ADC1_Init+0x9c>)
 8002990:	f001 fda6 	bl	80044e0 <HAL_ADC_Init>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800299a:	f000 fa95 	bl	8002ec8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800299e:	2300      	movs	r3, #0
 80029a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80029a2:	2301      	movs	r3, #1
 80029a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80029a6:	2300      	movs	r3, #0
 80029a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029aa:	463b      	mov	r3, r7
 80029ac:	4619      	mov	r1, r3
 80029ae:	4806      	ldr	r0, [pc, #24]	@ (80029c8 <MX_ADC1_Init+0x9c>)
 80029b0:	f002 f818 	bl	80049e4 <HAL_ADC_ConfigChannel>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80029ba:	f000 fa85 	bl	8002ec8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80029be:	bf00      	nop
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	2000020c 	.word	0x2000020c
 80029cc:	40012000 	.word	0x40012000

080029d0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80029d6:	463b      	mov	r3, r7
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	605a      	str	r2, [r3, #4]
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80029e2:	4b22      	ldr	r3, [pc, #136]	@ (8002a6c <MX_ADC2_Init+0x9c>)
 80029e4:	4a22      	ldr	r2, [pc, #136]	@ (8002a70 <MX_ADC2_Init+0xa0>)
 80029e6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80029e8:	4b20      	ldr	r3, [pc, #128]	@ (8002a6c <MX_ADC2_Init+0x9c>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80029ee:	4b1f      	ldr	r3, [pc, #124]	@ (8002a6c <MX_ADC2_Init+0x9c>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80029f4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a6c <MX_ADC2_Init+0x9c>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80029fa:	4b1c      	ldr	r3, [pc, #112]	@ (8002a6c <MX_ADC2_Init+0x9c>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002a00:	4b1a      	ldr	r3, [pc, #104]	@ (8002a6c <MX_ADC2_Init+0x9c>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002a08:	4b18      	ldr	r3, [pc, #96]	@ (8002a6c <MX_ADC2_Init+0x9c>)
 8002a0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002a10:	4b16      	ldr	r3, [pc, #88]	@ (8002a6c <MX_ADC2_Init+0x9c>)
 8002a12:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002a16:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a18:	4b14      	ldr	r3, [pc, #80]	@ (8002a6c <MX_ADC2_Init+0x9c>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002a1e:	4b13      	ldr	r3, [pc, #76]	@ (8002a6c <MX_ADC2_Init+0x9c>)
 8002a20:	2201      	movs	r2, #1
 8002a22:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002a24:	4b11      	ldr	r3, [pc, #68]	@ (8002a6c <MX_ADC2_Init+0x9c>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a6c <MX_ADC2_Init+0x9c>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002a32:	480e      	ldr	r0, [pc, #56]	@ (8002a6c <MX_ADC2_Init+0x9c>)
 8002a34:	f001 fd54 	bl	80044e0 <HAL_ADC_Init>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8002a3e:	f000 fa43 	bl	8002ec8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002a42:	2301      	movs	r3, #1
 8002a44:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002a46:	2301      	movs	r3, #1
 8002a48:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002a4e:	463b      	mov	r3, r7
 8002a50:	4619      	mov	r1, r3
 8002a52:	4806      	ldr	r0, [pc, #24]	@ (8002a6c <MX_ADC2_Init+0x9c>)
 8002a54:	f001 ffc6 	bl	80049e4 <HAL_ADC_ConfigChannel>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 8002a5e:	f000 fa33 	bl	8002ec8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002a62:	bf00      	nop
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000254 	.word	0x20000254
 8002a70:	40012100 	.word	0x40012100

08002a74 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002a78:	4b17      	ldr	r3, [pc, #92]	@ (8002ad8 <MX_SPI1_Init+0x64>)
 8002a7a:	4a18      	ldr	r2, [pc, #96]	@ (8002adc <MX_SPI1_Init+0x68>)
 8002a7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a7e:	4b16      	ldr	r3, [pc, #88]	@ (8002ad8 <MX_SPI1_Init+0x64>)
 8002a80:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002a84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a86:	4b14      	ldr	r3, [pc, #80]	@ (8002ad8 <MX_SPI1_Init+0x64>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a8c:	4b12      	ldr	r3, [pc, #72]	@ (8002ad8 <MX_SPI1_Init+0x64>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a92:	4b11      	ldr	r3, [pc, #68]	@ (8002ad8 <MX_SPI1_Init+0x64>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a98:	4b0f      	ldr	r3, [pc, #60]	@ (8002ad8 <MX_SPI1_Init+0x64>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad8 <MX_SPI1_Init+0x64>)
 8002aa0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aa4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad8 <MX_SPI1_Init+0x64>)
 8002aa8:	2228      	movs	r2, #40	@ 0x28
 8002aaa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002aac:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad8 <MX_SPI1_Init+0x64>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ab2:	4b09      	ldr	r3, [pc, #36]	@ (8002ad8 <MX_SPI1_Init+0x64>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ab8:	4b07      	ldr	r3, [pc, #28]	@ (8002ad8 <MX_SPI1_Init+0x64>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002abe:	4b06      	ldr	r3, [pc, #24]	@ (8002ad8 <MX_SPI1_Init+0x64>)
 8002ac0:	220a      	movs	r2, #10
 8002ac2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ac4:	4804      	ldr	r0, [pc, #16]	@ (8002ad8 <MX_SPI1_Init+0x64>)
 8002ac6:	f003 fe5b 	bl	8006780 <HAL_SPI_Init>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002ad0:	f000 f9fa 	bl	8002ec8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ad4:	bf00      	nop
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	2000035c 	.word	0x2000035c
 8002adc:	40013000 	.word	0x40013000

08002ae0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002ae4:	4b17      	ldr	r3, [pc, #92]	@ (8002b44 <MX_SPI3_Init+0x64>)
 8002ae6:	4a18      	ldr	r2, [pc, #96]	@ (8002b48 <MX_SPI3_Init+0x68>)
 8002ae8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002aea:	4b16      	ldr	r3, [pc, #88]	@ (8002b44 <MX_SPI3_Init+0x64>)
 8002aec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002af0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002af2:	4b14      	ldr	r3, [pc, #80]	@ (8002b44 <MX_SPI3_Init+0x64>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002af8:	4b12      	ldr	r3, [pc, #72]	@ (8002b44 <MX_SPI3_Init+0x64>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002afe:	4b11      	ldr	r3, [pc, #68]	@ (8002b44 <MX_SPI3_Init+0x64>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b04:	4b0f      	ldr	r3, [pc, #60]	@ (8002b44 <MX_SPI3_Init+0x64>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b44 <MX_SPI3_Init+0x64>)
 8002b0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b10:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b12:	4b0c      	ldr	r3, [pc, #48]	@ (8002b44 <MX_SPI3_Init+0x64>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b18:	4b0a      	ldr	r3, [pc, #40]	@ (8002b44 <MX_SPI3_Init+0x64>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b1e:	4b09      	ldr	r3, [pc, #36]	@ (8002b44 <MX_SPI3_Init+0x64>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b24:	4b07      	ldr	r3, [pc, #28]	@ (8002b44 <MX_SPI3_Init+0x64>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002b2a:	4b06      	ldr	r3, [pc, #24]	@ (8002b44 <MX_SPI3_Init+0x64>)
 8002b2c:	220a      	movs	r2, #10
 8002b2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002b30:	4804      	ldr	r0, [pc, #16]	@ (8002b44 <MX_SPI3_Init+0x64>)
 8002b32:	f003 fe25 	bl	8006780 <HAL_SPI_Init>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002b3c:	f000 f9c4 	bl	8002ec8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002b40:	bf00      	nop
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	200003b4 	.word	0x200003b4
 8002b48:	40003c00 	.word	0x40003c00

08002b4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b52:	f107 0308 	add.w	r3, r7, #8
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	605a      	str	r2, [r3, #4]
 8002b5c:	609a      	str	r2, [r3, #8]
 8002b5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b60:	463b      	mov	r3, r7
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b68:	4b1d      	ldr	r3, [pc, #116]	@ (8002be0 <MX_TIM2_Init+0x94>)
 8002b6a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002b6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41;
 8002b70:	4b1b      	ldr	r3, [pc, #108]	@ (8002be0 <MX_TIM2_Init+0x94>)
 8002b72:	2229      	movs	r2, #41	@ 0x29
 8002b74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b76:	4b1a      	ldr	r3, [pc, #104]	@ (8002be0 <MX_TIM2_Init+0x94>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002b7c:	4b18      	ldr	r3, [pc, #96]	@ (8002be0 <MX_TIM2_Init+0x94>)
 8002b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8002b82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b84:	4b16      	ldr	r3, [pc, #88]	@ (8002be0 <MX_TIM2_Init+0x94>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b8a:	4b15      	ldr	r3, [pc, #84]	@ (8002be0 <MX_TIM2_Init+0x94>)
 8002b8c:	2280      	movs	r2, #128	@ 0x80
 8002b8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b90:	4813      	ldr	r0, [pc, #76]	@ (8002be0 <MX_TIM2_Init+0x94>)
 8002b92:	f004 f89f 	bl	8006cd4 <HAL_TIM_Base_Init>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002b9c:	f000 f994 	bl	8002ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ba0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ba4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ba6:	f107 0308 	add.w	r3, r7, #8
 8002baa:	4619      	mov	r1, r3
 8002bac:	480c      	ldr	r0, [pc, #48]	@ (8002be0 <MX_TIM2_Init+0x94>)
 8002bae:	f004 fa60 	bl	8007072 <HAL_TIM_ConfigClockSource>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002bb8:	f000 f986 	bl	8002ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002bc4:	463b      	mov	r3, r7
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4805      	ldr	r0, [pc, #20]	@ (8002be0 <MX_TIM2_Init+0x94>)
 8002bca:	f004 fc87 	bl	80074dc <HAL_TIMEx_MasterConfigSynchronization>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002bd4:	f000 f978 	bl	8002ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002bd8:	bf00      	nop
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	2000040c 	.word	0x2000040c

08002be4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bea:	f107 0308 	add.w	r3, r7, #8
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	605a      	str	r2, [r3, #4]
 8002bf4:	609a      	str	r2, [r3, #8]
 8002bf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bf8:	463b      	mov	r3, r7
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c00:	4b1d      	ldr	r3, [pc, #116]	@ (8002c78 <MX_TIM3_Init+0x94>)
 8002c02:	4a1e      	ldr	r2, [pc, #120]	@ (8002c7c <MX_TIM3_Init+0x98>)
 8002c04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002c06:	4b1c      	ldr	r3, [pc, #112]	@ (8002c78 <MX_TIM3_Init+0x94>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8002c78 <MX_TIM3_Init+0x94>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002c12:	4b19      	ldr	r3, [pc, #100]	@ (8002c78 <MX_TIM3_Init+0x94>)
 8002c14:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002c18:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c1a:	4b17      	ldr	r3, [pc, #92]	@ (8002c78 <MX_TIM3_Init+0x94>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c20:	4b15      	ldr	r3, [pc, #84]	@ (8002c78 <MX_TIM3_Init+0x94>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c26:	4814      	ldr	r0, [pc, #80]	@ (8002c78 <MX_TIM3_Init+0x94>)
 8002c28:	f004 f854 	bl	8006cd4 <HAL_TIM_Base_Init>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002c32:	f000 f949 	bl	8002ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c3c:	f107 0308 	add.w	r3, r7, #8
 8002c40:	4619      	mov	r1, r3
 8002c42:	480d      	ldr	r0, [pc, #52]	@ (8002c78 <MX_TIM3_Init+0x94>)
 8002c44:	f004 fa15 	bl	8007072 <HAL_TIM_ConfigClockSource>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002c4e:	f000 f93b 	bl	8002ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002c52:	2320      	movs	r3, #32
 8002c54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c56:	2300      	movs	r3, #0
 8002c58:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c5a:	463b      	mov	r3, r7
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4806      	ldr	r0, [pc, #24]	@ (8002c78 <MX_TIM3_Init+0x94>)
 8002c60:	f004 fc3c 	bl	80074dc <HAL_TIMEx_MasterConfigSynchronization>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002c6a:	f000 f92d 	bl	8002ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002c6e:	bf00      	nop
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20000454 	.word	0x20000454
 8002c7c:	40000400 	.word	0x40000400

08002c80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	607b      	str	r3, [r7, #4]
 8002c8a:	4b10      	ldr	r3, [pc, #64]	@ (8002ccc <MX_DMA_Init+0x4c>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8e:	4a0f      	ldr	r2, [pc, #60]	@ (8002ccc <MX_DMA_Init+0x4c>)
 8002c90:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c96:	4b0d      	ldr	r3, [pc, #52]	@ (8002ccc <MX_DMA_Init+0x4c>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c9e:	607b      	str	r3, [r7, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	2038      	movs	r0, #56	@ 0x38
 8002ca8:	f002 fa31 	bl	800510e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002cac:	2038      	movs	r0, #56	@ 0x38
 8002cae:	f002 fa4a 	bl	8005146 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	203a      	movs	r0, #58	@ 0x3a
 8002cb8:	f002 fa29 	bl	800510e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002cbc:	203a      	movs	r0, #58	@ 0x3a
 8002cbe:	f002 fa42 	bl	8005146 <HAL_NVIC_EnableIRQ>

}
 8002cc2:	bf00      	nop
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40023800 	.word	0x40023800

08002cd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08a      	sub	sp, #40	@ 0x28
 8002cd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd6:	f107 0314 	add.w	r3, r7, #20
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	605a      	str	r2, [r3, #4]
 8002ce0:	609a      	str	r2, [r3, #8]
 8002ce2:	60da      	str	r2, [r3, #12]
 8002ce4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	613b      	str	r3, [r7, #16]
 8002cea:	4b46      	ldr	r3, [pc, #280]	@ (8002e04 <MX_GPIO_Init+0x134>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cee:	4a45      	ldr	r2, [pc, #276]	@ (8002e04 <MX_GPIO_Init+0x134>)
 8002cf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cf6:	4b43      	ldr	r3, [pc, #268]	@ (8002e04 <MX_GPIO_Init+0x134>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cfe:	613b      	str	r3, [r7, #16]
 8002d00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	4b3f      	ldr	r3, [pc, #252]	@ (8002e04 <MX_GPIO_Init+0x134>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0a:	4a3e      	ldr	r2, [pc, #248]	@ (8002e04 <MX_GPIO_Init+0x134>)
 8002d0c:	f043 0304 	orr.w	r3, r3, #4
 8002d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d12:	4b3c      	ldr	r3, [pc, #240]	@ (8002e04 <MX_GPIO_Init+0x134>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d16:	f003 0304 	and.w	r3, r3, #4
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d1e:	2300      	movs	r3, #0
 8002d20:	60bb      	str	r3, [r7, #8]
 8002d22:	4b38      	ldr	r3, [pc, #224]	@ (8002e04 <MX_GPIO_Init+0x134>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d26:	4a37      	ldr	r2, [pc, #220]	@ (8002e04 <MX_GPIO_Init+0x134>)
 8002d28:	f043 0301 	orr.w	r3, r3, #1
 8002d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d2e:	4b35      	ldr	r3, [pc, #212]	@ (8002e04 <MX_GPIO_Init+0x134>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	60bb      	str	r3, [r7, #8]
 8002d38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	607b      	str	r3, [r7, #4]
 8002d3e:	4b31      	ldr	r3, [pc, #196]	@ (8002e04 <MX_GPIO_Init+0x134>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d42:	4a30      	ldr	r2, [pc, #192]	@ (8002e04 <MX_GPIO_Init+0x134>)
 8002d44:	f043 0302 	orr.w	r3, r3, #2
 8002d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d4a:	4b2e      	ldr	r3, [pc, #184]	@ (8002e04 <MX_GPIO_Init+0x134>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	607b      	str	r3, [r7, #4]
 8002d54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_NCS_Pin|LCD_RST_Pin|LCD_DC_Pin|LCD_LED_Pin
 8002d56:	2201      	movs	r2, #1
 8002d58:	218f      	movs	r1, #143	@ 0x8f
 8002d5a:	482b      	ldr	r0, [pc, #172]	@ (8002e08 <MX_GPIO_Init+0x138>)
 8002d5c:	f002 ff2a 	bl	8005bb4 <HAL_GPIO_WritePin>
                          |RANGE_2_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RANGE_3_Pin|RANGE_1_Pin|RANGE_0_Pin, GPIO_PIN_RESET);
 8002d60:	2200      	movs	r2, #0
 8002d62:	f44f 7150 	mov.w	r1, #832	@ 0x340
 8002d66:	4828      	ldr	r0, [pc, #160]	@ (8002e08 <MX_GPIO_Init+0x138>)
 8002d68:	f002 ff24 	bl	8005bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AD9833_NCS_Pin|MCP3202_NCS_Pin, GPIO_PIN_SET);
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002d72:	4826      	ldr	r0, [pc, #152]	@ (8002e0c <MX_GPIO_Init+0x13c>)
 8002d74:	f002 ff1e 	bl	8005bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_NCS_Pin LCD_RST_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_NCS_Pin|LCD_RST_Pin|LCD_DC_Pin;
 8002d78:	2307      	movs	r3, #7
 8002d7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d80:	2300      	movs	r3, #0
 8002d82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d84:	2303      	movs	r3, #3
 8002d86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d88:	f107 0314 	add.w	r3, r7, #20
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	481e      	ldr	r0, [pc, #120]	@ (8002e08 <MX_GPIO_Init+0x138>)
 8002d90:	f002 fd64 	bl	800585c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_LED_Pin RANGE_3_Pin RANGE_2_Pin RANGE_1_Pin
                           RANGE_0_Pin */
  GPIO_InitStruct.Pin = LCD_LED_Pin|RANGE_3_Pin|RANGE_2_Pin|RANGE_1_Pin
 8002d94:	f44f 7372 	mov.w	r3, #968	@ 0x3c8
 8002d98:	617b      	str	r3, [r7, #20]
                          |RANGE_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da2:	2300      	movs	r3, #0
 8002da4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002da6:	f107 0314 	add.w	r3, r7, #20
 8002daa:	4619      	mov	r1, r3
 8002dac:	4816      	ldr	r0, [pc, #88]	@ (8002e08 <MX_GPIO_Init+0x138>)
 8002dae:	f002 fd55 	bl	800585c <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_0_Pin Button_1_Pin */
  GPIO_InitStruct.Pin = Button_0_Pin|Button_1_Pin;
 8002db2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002db8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dc2:	f107 0314 	add.w	r3, r7, #20
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4811      	ldr	r0, [pc, #68]	@ (8002e10 <MX_GPIO_Init+0x140>)
 8002dca:	f002 fd47 	bl	800585c <HAL_GPIO_Init>

  /*Configure GPIO pins : AD9833_NCS_Pin MCP3202_NCS_Pin */
  GPIO_InitStruct.Pin = AD9833_NCS_Pin|MCP3202_NCS_Pin;
 8002dce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de0:	f107 0314 	add.w	r3, r7, #20
 8002de4:	4619      	mov	r1, r3
 8002de6:	4809      	ldr	r0, [pc, #36]	@ (8002e0c <MX_GPIO_Init+0x13c>)
 8002de8:	f002 fd38 	bl	800585c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002dec:	2200      	movs	r2, #0
 8002dee:	2100      	movs	r1, #0
 8002df0:	2028      	movs	r0, #40	@ 0x28
 8002df2:	f002 f98c 	bl	800510e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002df6:	2028      	movs	r0, #40	@ 0x28
 8002df8:	f002 f9a5 	bl	8005146 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002dfc:	bf00      	nop
 8002dfe:	3728      	adds	r7, #40	@ 0x28
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40023800 	.word	0x40023800
 8002e08:	40020800 	.word	0x40020800
 8002e0c:	40020000 	.word	0x40020000
 8002e10:	40020400 	.word	0x40020400

08002e14 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	80fb      	strh	r3, [r7, #6]
//	frequency = frequency + 1000;
	frequency = frequency * 10;
 8002e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002e54 <HAL_GPIO_EXTI_Callback+0x40>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	4613      	mov	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	4b09      	ldr	r3, [pc, #36]	@ (8002e54 <HAL_GPIO_EXTI_Callback+0x40>)
 8002e2e:	601a      	str	r2, [r3, #0]
	if (frequency > 100000) {
 8002e30:	4b08      	ldr	r3, [pc, #32]	@ (8002e54 <HAL_GPIO_EXTI_Callback+0x40>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a08      	ldr	r2, [pc, #32]	@ (8002e58 <HAL_GPIO_EXTI_Callback+0x44>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d902      	bls.n	8002e40 <HAL_GPIO_EXTI_Callback+0x2c>
		frequency = 100;
 8002e3a:	4b06      	ldr	r3, [pc, #24]	@ (8002e54 <HAL_GPIO_EXTI_Callback+0x40>)
 8002e3c:	2264      	movs	r2, #100	@ 0x64
 8002e3e:	601a      	str	r2, [r3, #0]
	}
	FREQ_UPDATE_NEEDED = 1;
 8002e40:	4b06      	ldr	r3, [pc, #24]	@ (8002e5c <HAL_GPIO_EXTI_Callback+0x48>)
 8002e42:	2201      	movs	r2, #1
 8002e44:	601a      	str	r2, [r3, #0]
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	20000004 	.word	0x20000004
 8002e58:	000186a0 	.word	0x000186a0
 8002e5c:	20000008 	.word	0x20000008

08002e60 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
	// WE're done collecting samples
	if (hadc == &hadc1) {
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002e94 <HAL_ADC_ConvCpltCallback+0x34>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d103      	bne.n	8002e78 <HAL_ADC_ConvCpltCallback+0x18>
		CH1_DONE_SAMPLING = true;
 8002e70:	4b09      	ldr	r3, [pc, #36]	@ (8002e98 <HAL_ADC_ConvCpltCallback+0x38>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	701a      	strb	r2, [r3, #0]
	}
	else if (hadc == &hadc2) {
		CH0_DONE_SAMPLING = true;
	}
}
 8002e76:	e006      	b.n	8002e86 <HAL_ADC_ConvCpltCallback+0x26>
	else if (hadc == &hadc2) {
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a08      	ldr	r2, [pc, #32]	@ (8002e9c <HAL_ADC_ConvCpltCallback+0x3c>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d102      	bne.n	8002e86 <HAL_ADC_ConvCpltCallback+0x26>
		CH0_DONE_SAMPLING = true;
 8002e80:	4b07      	ldr	r3, [pc, #28]	@ (8002ea0 <HAL_ADC_ConvCpltCallback+0x40>)
 8002e82:	2201      	movs	r2, #1
 8002e84:	701a      	strb	r2, [r3, #0]
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	2000020c 	.word	0x2000020c
 8002e98:	200023dd 	.word	0x200023dd
 8002e9c:	20000254 	.word	0x20000254
 8002ea0:	200023dc 	.word	0x200023dc

08002ea4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this callback and toggle LED
	if (htim == &htim3 )
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a05      	ldr	r2, [pc, #20]	@ (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d102      	bne.n	8002eba <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_TIM_Base_Stop(&htim3);// Make sure that the timer is stopped, so we don't start ADC conversions in the middle of processing
 8002eb4:	4803      	ldr	r0, [pc, #12]	@ (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002eb6:	f003 ffc5 	bl	8006e44 <HAL_TIM_Base_Stop>
	}
}
 8002eba:	bf00      	nop
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20000454 	.word	0x20000454

08002ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ecc:	b672      	cpsid	i
}
 8002ece:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ed0:	bf00      	nop
 8002ed2:	e7fd      	b.n	8002ed0 <Error_Handler+0x8>

08002ed4 <__row_col_mult_sum_1__>:
// This file will be used to fit a sine wave to collected data.
#include <math.h>
#include <main.h>

double __row_col_mult_sum_1__(int N, double A1[3][N], int row1, double A2[N][3], int col2){
 8002ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ed6:	b089      	sub	sp, #36	@ 0x24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
 8002ee0:	603b      	str	r3, [r7, #0]
 8002ee2:	68fe      	ldr	r6, [r7, #12]
 8002ee4:	1e73      	subs	r3, r6, #1
 8002ee6:	613b      	str	r3, [r7, #16]
 8002ee8:	4632      	mov	r2, r6
 8002eea:	2300      	movs	r3, #0
 8002eec:	4614      	mov	r4, r2
 8002eee:	461d      	mov	r5, r3
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	f04f 0300 	mov.w	r3, #0
 8002ef8:	01ab      	lsls	r3, r5, #6
 8002efa:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 8002efe:	01a2      	lsls	r2, r4, #6
	// Sums the multiple of row row1 in A1 with the corresponding values in column col2 of A2
	double sum = 0;
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	e9c7 2306 	strd	r2, r3, [r7, #24]
	for (int i = 0; i < N; i++) {
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]
 8002f10:	e027      	b.n	8002f62 <__row_col_mult_sum_1__+0x8e>
	    sum += A1[row1][i] * A2[i][col2];
 8002f12:	4632      	mov	r2, r6
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	fb02 f303 	mul.w	r3, r2, r3
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	441a      	add	r2, r3
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	4413      	add	r3, r2
 8002f26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	4413      	add	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	461a      	mov	r2, r3
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	441a      	add	r2, r3
 8002f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	4413      	add	r3, r2
 8002f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f44:	f7fd fb78 	bl	8000638 <__aeabi_dmul>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f50:	f7fd f9bc 	bl	80002cc <__adddf3>
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	e9c7 2306 	strd	r2, r3, [r7, #24]
	for (int i = 0; i < N; i++) {
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	dbd3      	blt.n	8002f12 <__row_col_mult_sum_1__+0x3e>
	}
	return sum;
 8002f6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f6e:	ec43 2b17 	vmov	d7, r2, r3
}
 8002f72:	eeb0 0a47 	vmov.f32	s0, s14
 8002f76:	eef0 0a67 	vmov.f32	s1, s15
 8002f7a:	3724      	adds	r7, #36	@ 0x24
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f80 <__row_col_mult_sum_2__>:

double __row_col_mult_sum_2__(int N, double A[3][N], int row1, double B[]) {
 8002f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f82:	b089      	sub	sp, #36	@ 0x24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	603b      	str	r3, [r7, #0]
 8002f8e:	68fe      	ldr	r6, [r7, #12]
 8002f90:	1e73      	subs	r3, r6, #1
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	4632      	mov	r2, r6
 8002f96:	2300      	movs	r3, #0
 8002f98:	4614      	mov	r4, r2
 8002f9a:	461d      	mov	r5, r3
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	01ab      	lsls	r3, r5, #6
 8002fa6:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 8002faa:	01a2      	lsls	r2, r4, #6

    double sum = 0;
 8002fac:	f04f 0200 	mov.w	r2, #0
 8002fb0:	f04f 0300 	mov.w	r3, #0
 8002fb4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < N; i++) {
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	e020      	b.n	8003000 <__row_col_mult_sum_2__+0x80>
        sum += A[row1][i] * B[i];
 8002fbe:	4632      	mov	r2, r6
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	fb02 f303 	mul.w	r3, r2, r3
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	441a      	add	r2, r3
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	4413      	add	r3, r2
 8002fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe2:	f7fd fb29 	bl	8000638 <__aeabi_dmul>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002fee:	f7fd f96d 	bl	80002cc <__adddf3>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < N; i++) {
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	429a      	cmp	r2, r3
 8003006:	dbda      	blt.n	8002fbe <__row_col_mult_sum_2__+0x3e>
    }
    return sum;
 8003008:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800300c:	ec43 2b17 	vmov	d7, r2, r3
}
 8003010:	eeb0 0a47 	vmov.f32	s0, s14
 8003014:	eef0 0a67 	vmov.f32	s1, s15
 8003018:	3724      	adds	r7, #36	@ 0x24
 800301a:	46bd      	mov	sp, r7
 800301c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800301e <ATA_Nx3>:
/* This function takes the input Nx3 matrix, then multiplies it by its transpose
* O = (A Transpose) * A
* The result of this will be a 3x3 matrix. The data will be stored in a two-dimensional
* array that is passed to the function.
*/
void ATA_Nx3(const int N, double A[N][3], double O[3][3]) {
 800301e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003022:	b093      	sub	sp, #76	@ 0x4c
 8003024:	af02      	add	r7, sp, #8
 8003026:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003028:	62b9      	str	r1, [r7, #40]	@ 0x28
 800302a:	627a      	str	r2, [r7, #36]	@ 0x24
 800302c:	466b      	mov	r3, sp
 800302e:	623b      	str	r3, [r7, #32]
    // I'm not using input validation. Make sure that the input is correct.
    double AT[3][N];
 8003030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003032:	3b01      	subs	r3, #1
 8003034:	637b      	str	r3, [r7, #52]	@ 0x34
 8003036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003038:	2200      	movs	r2, #0
 800303a:	469a      	mov	sl, r3
 800303c:	4693      	mov	fp, r2
 800303e:	f04f 0200 	mov.w	r2, #0
 8003042:	f04f 0300 	mov.w	r3, #0
 8003046:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800304a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800304e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003054:	00de      	lsls	r6, r3, #3
 8003056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003058:	2200      	movs	r2, #0
 800305a:	61bb      	str	r3, [r7, #24]
 800305c:	61fa      	str	r2, [r7, #28]
 800305e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003062:	4652      	mov	r2, sl
 8003064:	465b      	mov	r3, fp
 8003066:	1891      	adds	r1, r2, r2
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	415b      	adcs	r3, r3
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003072:	4651      	mov	r1, sl
 8003074:	eb12 0801 	adds.w	r8, r2, r1
 8003078:	4659      	mov	r1, fp
 800307a:	eb43 0901 	adc.w	r9, r3, r1
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800308a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800308e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003094:	2200      	movs	r2, #0
 8003096:	613b      	str	r3, [r7, #16]
 8003098:	617a      	str	r2, [r7, #20]
 800309a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800309e:	4642      	mov	r2, r8
 80030a0:	464b      	mov	r3, r9
 80030a2:	1891      	adds	r1, r2, r2
 80030a4:	6039      	str	r1, [r7, #0]
 80030a6:	415b      	adcs	r3, r3
 80030a8:	607b      	str	r3, [r7, #4]
 80030aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030ae:	4641      	mov	r1, r8
 80030b0:	1854      	adds	r4, r2, r1
 80030b2:	4649      	mov	r1, r9
 80030b4:	eb43 0101 	adc.w	r1, r3, r1
 80030b8:	460d      	mov	r5, r1
 80030ba:	f04f 0200 	mov.w	r2, #0
 80030be:	f04f 0300 	mov.w	r3, #0
 80030c2:	01ab      	lsls	r3, r5, #6
 80030c4:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 80030c8:	01a2      	lsls	r2, r4, #6
 80030ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030cc:	4613      	mov	r3, r2
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	4413      	add	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	3307      	adds	r3, #7
 80030d6:	08db      	lsrs	r3, r3, #3
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	ebad 0d03 	sub.w	sp, sp, r3
 80030de:	ab02      	add	r3, sp, #8
 80030e0:	3307      	adds	r3, #7
 80030e2:	08db      	lsrs	r3, r3, #3
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	633b      	str	r3, [r7, #48]	@ 0x30
    // correct i think
    for (int i = 0; i < N; i++) {
 80030e8:	2300      	movs	r3, #0
 80030ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030ec:	e037      	b.n	800315e <ATA_Nx3+0x140>
        AT[0][i] = A[i][0];
 80030ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80030f0:	4613      	mov	r3, r2
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	4413      	add	r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	461a      	mov	r2, r3
 80030fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030fc:	4413      	add	r3, r2
 80030fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003102:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003104:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003106:	00c9      	lsls	r1, r1, #3
 8003108:	4401      	add	r1, r0
 800310a:	e9c1 2300 	strd	r2, r3, [r1]
        AT[1][i] = A[i][1];
 800310e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003110:	4613      	mov	r3, r2
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	4413      	add	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	461a      	mov	r2, r3
 800311a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800311c:	4413      	add	r3, r2
 800311e:	08f4      	lsrs	r4, r6, #3
 8003120:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003124:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003126:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003128:	4421      	add	r1, r4
 800312a:	00c9      	lsls	r1, r1, #3
 800312c:	4401      	add	r1, r0
 800312e:	e9c1 2300 	strd	r2, r3, [r1]
        AT[2][i] = A[i][2];
 8003132:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003134:	4613      	mov	r3, r2
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	4413      	add	r3, r2
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	461a      	mov	r2, r3
 800313e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003140:	4413      	add	r3, r2
 8003142:	08f1      	lsrs	r1, r6, #3
 8003144:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003148:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800314a:	004c      	lsls	r4, r1, #1
 800314c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800314e:	4421      	add	r1, r4
 8003150:	00c9      	lsls	r1, r1, #3
 8003152:	4401      	add	r1, r0
 8003154:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < N; i++) {
 8003158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800315a:	3301      	adds	r3, #1
 800315c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800315e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003162:	429a      	cmp	r2, r3
 8003164:	dbc3      	blt.n	80030ee <ATA_Nx3+0xd0>
    }

    for (int i = 0; i < 3; i++) {
 8003166:	2300      	movs	r3, #0
 8003168:	63bb      	str	r3, [r7, #56]	@ 0x38
 800316a:	e03c      	b.n	80031e6 <ATA_Nx3+0x1c8>
        O[0][i] = __row_col_mult_sum_1__(N, AT, 0, A, i);
 800316c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003172:	2200      	movs	r2, #0
 8003174:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003176:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003178:	f7ff feac 	bl	8002ed4 <__row_col_mult_sum_1__>
 800317c:	eeb0 7a40 	vmov.f32	s14, s0
 8003180:	eef0 7a60 	vmov.f32	s15, s1
 8003184:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	4413      	add	r3, r2
 800318c:	ed83 7b00 	vstr	d7, [r3]
        O[1][i] = __row_col_mult_sum_1__(N, AT, 1, A, i);
 8003190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003192:	f103 0418 	add.w	r4, r3, #24
 8003196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800319c:	2201      	movs	r2, #1
 800319e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80031a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80031a2:	f7ff fe97 	bl	8002ed4 <__row_col_mult_sum_1__>
 80031a6:	eeb0 7a40 	vmov.f32	s14, s0
 80031aa:	eef0 7a60 	vmov.f32	s15, s1
 80031ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	4423      	add	r3, r4
 80031b4:	ed83 7b00 	vstr	d7, [r3]
        O[2][i] = __row_col_mult_sum_1__(N, AT, 2, A, i);
 80031b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ba:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 80031be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c4:	2202      	movs	r2, #2
 80031c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80031c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80031ca:	f7ff fe83 	bl	8002ed4 <__row_col_mult_sum_1__>
 80031ce:	eeb0 7a40 	vmov.f32	s14, s0
 80031d2:	eef0 7a60 	vmov.f32	s15, s1
 80031d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	4423      	add	r3, r4
 80031dc:	ed83 7b00 	vstr	d7, [r3]
    for (int i = 0; i < 3; i++) {
 80031e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031e2:	3301      	adds	r3, #1
 80031e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80031e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	ddbf      	ble.n	800316c <ATA_Nx3+0x14e>
    }
    return;
 80031ec:	bf00      	nop
 80031ee:	f8d7 d020 	ldr.w	sp, [r7, #32]
}
 80031f2:	3744      	adds	r7, #68	@ 0x44
 80031f4:	46bd      	mov	sp, r7
 80031f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080031fa <ATB_Nx3_Nx1>:

void ATB_Nx3_Nx1(int N, double A[N][3], double B[], double O[3][1]) {
 80031fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031fe:	b093      	sub	sp, #76	@ 0x4c
 8003200:	af00      	add	r7, sp, #0
 8003202:	6378      	str	r0, [r7, #52]	@ 0x34
 8003204:	6339      	str	r1, [r7, #48]	@ 0x30
 8003206:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003208:	62bb      	str	r3, [r7, #40]	@ 0x28
 800320a:	466b      	mov	r3, sp
 800320c:	607b      	str	r3, [r7, #4]
    // Here, B is treated as a column vecter, though the input should be in row vector form.

    // I'm not using input validation. Make sure that the input is correct.
    double AT[3][N];
 800320e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003210:	1e4b      	subs	r3, r1, #1
 8003212:	643b      	str	r3, [r7, #64]	@ 0x40
 8003214:	460a      	mov	r2, r1
 8003216:	2300      	movs	r3, #0
 8003218:	4692      	mov	sl, r2
 800321a:	469b      	mov	fp, r3
 800321c:	f04f 0200 	mov.w	r2, #0
 8003220:	f04f 0300 	mov.w	r3, #0
 8003224:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003228:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800322c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003230:	460b      	mov	r3, r1
 8003232:	00de      	lsls	r6, r3, #3
 8003234:	460a      	mov	r2, r1
 8003236:	2300      	movs	r3, #0
 8003238:	623a      	str	r2, [r7, #32]
 800323a:	627b      	str	r3, [r7, #36]	@ 0x24
 800323c:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 8003240:	4652      	mov	r2, sl
 8003242:	465b      	mov	r3, fp
 8003244:	1890      	adds	r0, r2, r2
 8003246:	6138      	str	r0, [r7, #16]
 8003248:	415b      	adcs	r3, r3
 800324a:	617b      	str	r3, [r7, #20]
 800324c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003250:	4650      	mov	r0, sl
 8003252:	eb12 0800 	adds.w	r8, r2, r0
 8003256:	4658      	mov	r0, fp
 8003258:	eb43 0900 	adc.w	r9, r3, r0
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	f04f 0300 	mov.w	r3, #0
 8003264:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003268:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800326c:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003270:	460a      	mov	r2, r1
 8003272:	2300      	movs	r3, #0
 8003274:	61ba      	str	r2, [r7, #24]
 8003276:	61fb      	str	r3, [r7, #28]
 8003278:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800327c:	4642      	mov	r2, r8
 800327e:	464b      	mov	r3, r9
 8003280:	1890      	adds	r0, r2, r2
 8003282:	60b8      	str	r0, [r7, #8]
 8003284:	415b      	adcs	r3, r3
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800328c:	4640      	mov	r0, r8
 800328e:	1814      	adds	r4, r2, r0
 8003290:	4648      	mov	r0, r9
 8003292:	eb43 0000 	adc.w	r0, r3, r0
 8003296:	4605      	mov	r5, r0
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	f04f 0300 	mov.w	r3, #0
 80032a0:	01ab      	lsls	r3, r5, #6
 80032a2:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 80032a6:	01a2      	lsls	r2, r4, #6
 80032a8:	460a      	mov	r2, r1
 80032aa:	4613      	mov	r3, r2
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	4413      	add	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	3307      	adds	r3, #7
 80032b4:	08db      	lsrs	r3, r3, #3
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	ebad 0d03 	sub.w	sp, sp, r3
 80032bc:	466b      	mov	r3, sp
 80032be:	3307      	adds	r3, #7
 80032c0:	08db      	lsrs	r3, r3, #3
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (int i = 0; i < N; i++) {
 80032c6:	2300      	movs	r3, #0
 80032c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80032ca:	e037      	b.n	800333c <ATB_Nx3_Nx1+0x142>
        AT[0][i] = A[i][0];
 80032cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032ce:	4613      	mov	r3, r2
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	4413      	add	r3, r2
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	461a      	mov	r2, r3
 80032d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032da:	4413      	add	r3, r2
 80032dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80032e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80032e4:	00c9      	lsls	r1, r1, #3
 80032e6:	4401      	add	r1, r0
 80032e8:	e9c1 2300 	strd	r2, r3, [r1]
        AT[1][i] = A[i][1];
 80032ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032ee:	4613      	mov	r3, r2
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	4413      	add	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	461a      	mov	r2, r3
 80032f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032fa:	4413      	add	r3, r2
 80032fc:	08f4      	lsrs	r4, r6, #3
 80032fe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003302:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003304:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003306:	4421      	add	r1, r4
 8003308:	00c9      	lsls	r1, r1, #3
 800330a:	4401      	add	r1, r0
 800330c:	e9c1 2300 	strd	r2, r3, [r1]
        AT[2][i] = A[i][2];
 8003310:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003312:	4613      	mov	r3, r2
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	4413      	add	r3, r2
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	461a      	mov	r2, r3
 800331c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800331e:	4413      	add	r3, r2
 8003320:	08f1      	lsrs	r1, r6, #3
 8003322:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003326:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003328:	004c      	lsls	r4, r1, #1
 800332a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800332c:	4421      	add	r1, r4
 800332e:	00c9      	lsls	r1, r1, #3
 8003330:	4401      	add	r1, r0
 8003332:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < N; i++) {
 8003336:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003338:	3301      	adds	r3, #1
 800333a:	647b      	str	r3, [r7, #68]	@ 0x44
 800333c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800333e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003340:	429a      	cmp	r2, r3
 8003342:	dbc3      	blt.n	80032cc <ATB_Nx3_Nx1+0xd2>
    }
    O[0][0] = __row_col_mult_sum_2__(N, AT, 0, B);
 8003344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003346:	2200      	movs	r2, #0
 8003348:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800334a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800334c:	f7ff fe18 	bl	8002f80 <__row_col_mult_sum_2__>
 8003350:	eeb0 7a40 	vmov.f32	s14, s0
 8003354:	eef0 7a60 	vmov.f32	s15, s1
 8003358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800335a:	ed83 7b00 	vstr	d7, [r3]
    O[1][0] = __row_col_mult_sum_2__(N, AT, 1, B);
 800335e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003360:	f103 0408 	add.w	r4, r3, #8
 8003364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003366:	2201      	movs	r2, #1
 8003368:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800336a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800336c:	f7ff fe08 	bl	8002f80 <__row_col_mult_sum_2__>
 8003370:	eeb0 7a40 	vmov.f32	s14, s0
 8003374:	eef0 7a60 	vmov.f32	s15, s1
 8003378:	ed84 7b00 	vstr	d7, [r4]
    O[2][0] = __row_col_mult_sum_2__(N, AT, 2, B);
 800337c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800337e:	f103 0410 	add.w	r4, r3, #16
 8003382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003384:	2202      	movs	r2, #2
 8003386:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003388:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800338a:	f7ff fdf9 	bl	8002f80 <__row_col_mult_sum_2__>
 800338e:	eeb0 7a40 	vmov.f32	s14, s0
 8003392:	eef0 7a60 	vmov.f32	s15, s1
 8003396:	ed84 7b00 	vstr	d7, [r4]

    return;
 800339a:	bf00      	nop
 800339c:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
 80033a0:	374c      	adds	r7, #76	@ 0x4c
 80033a2:	46bd      	mov	sp, r7
 80033a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080033a8 <invert_3x3>:

// Function is verified to work
void invert_3x3(double A[3][3], double O[3][3]) {
 80033a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033ac:	b0a6      	sub	sp, #152	@ 0x98
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	61f8      	str	r0, [r7, #28]
 80033b2:	61b9      	str	r1, [r7, #24]
    // Will take the contents of matrix A and place the matrix inverse in O.

    // Find the cofactor matrix of A, place contents in O
    O[0][0] = A[1][1] * A[2][2] - A[1][2] * A[2][1]; // X
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	3318      	adds	r3, #24
 80033b8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	3330      	adds	r3, #48	@ 0x30
 80033c0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80033c4:	f7fd f938 	bl	8000638 <__aeabi_dmul>
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	4614      	mov	r4, r2
 80033ce:	461d      	mov	r5, r3
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	3318      	adds	r3, #24
 80033d4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	3330      	adds	r3, #48	@ 0x30
 80033dc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80033e0:	f7fd f92a 	bl	8000638 <__aeabi_dmul>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4620      	mov	r0, r4
 80033ea:	4629      	mov	r1, r5
 80033ec:	f7fc ff6c 	bl	80002c8 <__aeabi_dsub>
 80033f0:	4602      	mov	r2, r0
 80033f2:	460b      	mov	r3, r1
 80033f4:	69b9      	ldr	r1, [r7, #24]
 80033f6:	e9c1 2300 	strd	r2, r3, [r1]
    O[0][1] = -(A[1][0] * A[2][2] - A[1][2] * A[2][0]); // X
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	3318      	adds	r3, #24
 80033fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	3330      	adds	r3, #48	@ 0x30
 8003406:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800340a:	f7fd f915 	bl	8000638 <__aeabi_dmul>
 800340e:	4602      	mov	r2, r0
 8003410:	460b      	mov	r3, r1
 8003412:	4614      	mov	r4, r2
 8003414:	461d      	mov	r5, r3
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	3318      	adds	r3, #24
 800341a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	3330      	adds	r3, #48	@ 0x30
 8003422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003426:	f7fd f907 	bl	8000638 <__aeabi_dmul>
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	4620      	mov	r0, r4
 8003430:	4629      	mov	r1, r5
 8003432:	f7fc ff49 	bl	80002c8 <__aeabi_dsub>
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	4690      	mov	r8, r2
 800343c:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	e9c3 8902 	strd	r8, r9, [r3, #8]
    O[0][2] = A[1][0] * A[2][1] - A[1][1] * A[2][0]; // X
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	3318      	adds	r3, #24
 800344a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	3330      	adds	r3, #48	@ 0x30
 8003452:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003456:	f7fd f8ef 	bl	8000638 <__aeabi_dmul>
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	4614      	mov	r4, r2
 8003460:	461d      	mov	r5, r3
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	3318      	adds	r3, #24
 8003466:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	3330      	adds	r3, #48	@ 0x30
 800346e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003472:	f7fd f8e1 	bl	8000638 <__aeabi_dmul>
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	4620      	mov	r0, r4
 800347c:	4629      	mov	r1, r5
 800347e:	f7fc ff23 	bl	80002c8 <__aeabi_dsub>
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	69b9      	ldr	r1, [r7, #24]
 8003488:	e9c1 2304 	strd	r2, r3, [r1, #16]

    O[1][0] = -(A[0][1] * A[2][2] - A[0][2] * A[2][1]); // X
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	3330      	adds	r3, #48	@ 0x30
 8003496:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800349a:	f7fd f8cd 	bl	8000638 <__aeabi_dmul>
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	4614      	mov	r4, r2
 80034a4:	461d      	mov	r5, r3
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	3330      	adds	r3, #48	@ 0x30
 80034b0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80034b4:	f7fd f8c0 	bl	8000638 <__aeabi_dmul>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4620      	mov	r0, r4
 80034be:	4629      	mov	r1, r5
 80034c0:	f7fc ff02 	bl	80002c8 <__aeabi_dsub>
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	69b9      	ldr	r1, [r7, #24]
 80034ca:	3118      	adds	r1, #24
 80034cc:	4692      	mov	sl, r2
 80034ce:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 80034d2:	e9c1 ab00 	strd	sl, fp, [r1]
    O[1][1] = A[0][0] * A[2][2] - A[0][2] * A[2][0]; // X
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	3330      	adds	r3, #48	@ 0x30
 80034e0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80034e4:	f7fd f8a8 	bl	8000638 <__aeabi_dmul>
 80034e8:	4602      	mov	r2, r0
 80034ea:	460b      	mov	r3, r1
 80034ec:	4690      	mov	r8, r2
 80034ee:	4699      	mov	r9, r3
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	3330      	adds	r3, #48	@ 0x30
 80034fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fe:	f7fd f89b 	bl	8000638 <__aeabi_dmul>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	4610      	mov	r0, r2
 8003508:	4619      	mov	r1, r3
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	f103 0418 	add.w	r4, r3, #24
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4640      	mov	r0, r8
 8003516:	4649      	mov	r1, r9
 8003518:	f7fc fed6 	bl	80002c8 <__aeabi_dsub>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	e9c4 2302 	strd	r2, r3, [r4, #8]
    O[1][2] = -(A[0][0] * A[2][1] - A[0][1] * A[2][0]); // X
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	e9d3 0100 	ldrd	r0, r1, [r3]
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	3330      	adds	r3, #48	@ 0x30
 800352e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003532:	f7fd f881 	bl	8000638 <__aeabi_dmul>
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
 800353a:	4614      	mov	r4, r2
 800353c:	461d      	mov	r5, r3
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	3330      	adds	r3, #48	@ 0x30
 8003548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354c:	f7fd f874 	bl	8000638 <__aeabi_dmul>
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	4620      	mov	r0, r4
 8003556:	4629      	mov	r1, r5
 8003558:	f7fc feb6 	bl	80002c8 <__aeabi_dsub>
 800355c:	4602      	mov	r2, r0
 800355e:	460b      	mov	r3, r1
 8003560:	69b9      	ldr	r1, [r7, #24]
 8003562:	3118      	adds	r1, #24
 8003564:	613a      	str	r2, [r7, #16]
 8003566:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	ed97 7b04 	vldr	d7, [r7, #16]
 8003570:	ed81 7b04 	vstr	d7, [r1, #16]

    O[2][0] = A[0][1] * A[1][2] - A[0][2] * A[1][1]; // X
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	3318      	adds	r3, #24
 800357e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003582:	f7fd f859 	bl	8000638 <__aeabi_dmul>
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	4690      	mov	r8, r2
 800358c:	4699      	mov	r9, r3
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	3318      	adds	r3, #24
 8003598:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800359c:	f7fd f84c 	bl	8000638 <__aeabi_dmul>
 80035a0:	4602      	mov	r2, r0
 80035a2:	460b      	mov	r3, r1
 80035a4:	4610      	mov	r0, r2
 80035a6:	4619      	mov	r1, r3
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	4640      	mov	r0, r8
 80035b4:	4649      	mov	r1, r9
 80035b6:	f7fc fe87 	bl	80002c8 <__aeabi_dsub>
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	e9c4 2300 	strd	r2, r3, [r4]
    O[2][1] = -(A[0][0] * A[1][2] - A[0][2] * A[1][0]); // X
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	3318      	adds	r3, #24
 80035cc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80035d0:	f7fd f832 	bl	8000638 <__aeabi_dmul>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4614      	mov	r4, r2
 80035da:	461d      	mov	r5, r3
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	3318      	adds	r3, #24
 80035e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ea:	f7fd f825 	bl	8000638 <__aeabi_dmul>
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	4620      	mov	r0, r4
 80035f4:	4629      	mov	r1, r5
 80035f6:	f7fc fe67 	bl	80002c8 <__aeabi_dsub>
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	69b9      	ldr	r1, [r7, #24]
 8003600:	3130      	adds	r1, #48	@ 0x30
 8003602:	60ba      	str	r2, [r7, #8]
 8003604:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003608:	60fb      	str	r3, [r7, #12]
 800360a:	ed97 7b02 	vldr	d7, [r7, #8]
 800360e:	ed81 7b02 	vstr	d7, [r1, #8]
    O[2][2] = A[0][0] * A[1][1] - A[0][1] * A[1][0]; // X
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	3318      	adds	r3, #24
 800361c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003620:	f7fd f80a 	bl	8000638 <__aeabi_dmul>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4690      	mov	r8, r2
 800362a:	4699      	mov	r9, r3
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	3318      	adds	r3, #24
 8003636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363a:	f7fc fffd 	bl	8000638 <__aeabi_dmul>
 800363e:	4602      	mov	r2, r0
 8003640:	460b      	mov	r3, r1
 8003642:	4610      	mov	r0, r2
 8003644:	4619      	mov	r1, r3
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4640      	mov	r0, r8
 8003652:	4649      	mov	r1, r9
 8003654:	f7fc fe38 	bl	80002c8 <__aeabi_dsub>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	e9c4 2304 	strd	r2, r3, [r4, #16]

    // Find the Adjoint matrix ( Transpose the cofactor matrix )
    double OT[3][3];
    for (int i = 0; i < 3; i++) {
 8003660:	2300      	movs	r3, #0
 8003662:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003666:	e045      	b.n	80036f4 <invert_3x3+0x34c>
        OT[0][i] = O[i][0];
 8003668:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800366c:	4613      	mov	r3, r2
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	4413      	add	r3, r2
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	461a      	mov	r2, r3
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	4413      	add	r3, r2
 800367a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367e:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8003682:	00c9      	lsls	r1, r1, #3
 8003684:	3180      	adds	r1, #128	@ 0x80
 8003686:	f107 0018 	add.w	r0, r7, #24
 800368a:	4401      	add	r1, r0
 800368c:	3978      	subs	r1, #120	@ 0x78
 800368e:	e9c1 2300 	strd	r2, r3, [r1]
        OT[1][i] = O[i][1];
 8003692:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003696:	4613      	mov	r3, r2
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	4413      	add	r3, r2
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	461a      	mov	r2, r3
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	4413      	add	r3, r2
 80036a4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80036a8:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 80036ac:	3103      	adds	r1, #3
 80036ae:	00c9      	lsls	r1, r1, #3
 80036b0:	3180      	adds	r1, #128	@ 0x80
 80036b2:	f107 0018 	add.w	r0, r7, #24
 80036b6:	4401      	add	r1, r0
 80036b8:	3978      	subs	r1, #120	@ 0x78
 80036ba:	e9c1 2300 	strd	r2, r3, [r1]
        OT[2][i] = O[i][2];
 80036be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80036c2:	4613      	mov	r3, r2
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	4413      	add	r3, r2
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	461a      	mov	r2, r3
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	4413      	add	r3, r2
 80036d0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80036d4:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 80036d8:	3106      	adds	r1, #6
 80036da:	00c9      	lsls	r1, r1, #3
 80036dc:	3180      	adds	r1, #128	@ 0x80
 80036de:	f107 0018 	add.w	r0, r7, #24
 80036e2:	4401      	add	r1, r0
 80036e4:	3978      	subs	r1, #120	@ 0x78
 80036e6:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < 3; i++) {
 80036ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036ee:	3301      	adds	r3, #1
 80036f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80036f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	ddb5      	ble.n	8003668 <invert_3x3+0x2c0>
    }

    // Replace contents in O
    for (int i = 0; i < 3; i++) {
 80036fc:	2300      	movs	r3, #0
 80036fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003702:	e04c      	b.n	800379e <invert_3x3+0x3f6>
        O[i][0] = OT[i][0];
 8003704:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8003708:	4613      	mov	r3, r2
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	4413      	add	r3, r2
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	461a      	mov	r2, r3
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	1899      	adds	r1, r3, r2
 8003716:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800371a:	4613      	mov	r3, r2
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	4413      	add	r3, r2
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	3380      	adds	r3, #128	@ 0x80
 8003724:	f107 0218 	add.w	r2, r7, #24
 8003728:	4413      	add	r3, r2
 800372a:	3b78      	subs	r3, #120	@ 0x78
 800372c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003730:	e9c1 2300 	strd	r2, r3, [r1]
        O[i][1] = OT[i][1];
 8003734:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8003738:	4613      	mov	r3, r2
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	4413      	add	r3, r2
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	461a      	mov	r2, r3
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	1899      	adds	r1, r3, r2
 8003746:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800374a:	4613      	mov	r3, r2
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	4413      	add	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	3380      	adds	r3, #128	@ 0x80
 8003754:	f107 0218 	add.w	r2, r7, #24
 8003758:	4413      	add	r3, r2
 800375a:	3b70      	subs	r3, #112	@ 0x70
 800375c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003760:	e9c1 2302 	strd	r2, r3, [r1, #8]
        O[i][2] = OT[i][2];
 8003764:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8003768:	4613      	mov	r3, r2
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	4413      	add	r3, r2
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	461a      	mov	r2, r3
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	1899      	adds	r1, r3, r2
 8003776:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800377a:	4613      	mov	r3, r2
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	4413      	add	r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	3380      	adds	r3, #128	@ 0x80
 8003784:	f107 0218 	add.w	r2, r7, #24
 8003788:	4413      	add	r3, r2
 800378a:	3b68      	subs	r3, #104	@ 0x68
 800378c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003790:	e9c1 2304 	strd	r2, r3, [r1, #16]
    for (int i = 0; i < 3; i++) {
 8003794:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003798:	3301      	adds	r3, #1
 800379a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800379e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	ddae      	ble.n	8003704 <invert_3x3+0x35c>
    }

    // Find determinant of A, divide contents of O and replace
    double d1 = A[0][0] * (A[1][1] * A[2][2] - A[1][2] * A[2][1]);
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	3318      	adds	r3, #24
 80037b0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	3330      	adds	r3, #48	@ 0x30
 80037b8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80037bc:	f7fc ff3c 	bl	8000638 <__aeabi_dmul>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	4690      	mov	r8, r2
 80037c6:	4699      	mov	r9, r3
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	3318      	adds	r3, #24
 80037cc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	3330      	adds	r3, #48	@ 0x30
 80037d4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80037d8:	f7fc ff2e 	bl	8000638 <__aeabi_dmul>
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	4640      	mov	r0, r8
 80037e2:	4649      	mov	r1, r9
 80037e4:	f7fc fd70 	bl	80002c8 <__aeabi_dsub>
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
 80037ec:	4620      	mov	r0, r4
 80037ee:	4629      	mov	r1, r5
 80037f0:	f7fc ff22 	bl	8000638 <__aeabi_dmul>
 80037f4:	4602      	mov	r2, r0
 80037f6:	460b      	mov	r3, r1
 80037f8:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
    double d2 = -A[0][1] * (A[1][0] * A[2][2] - A[1][2] * A[2][0]);
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003802:	603a      	str	r2, [r7, #0]
 8003804:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003808:	607b      	str	r3, [r7, #4]
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	3318      	adds	r3, #24
 800380e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	3330      	adds	r3, #48	@ 0x30
 8003816:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800381a:	f7fc ff0d 	bl	8000638 <__aeabi_dmul>
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	4614      	mov	r4, r2
 8003824:	461d      	mov	r5, r3
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	3318      	adds	r3, #24
 800382a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	3330      	adds	r3, #48	@ 0x30
 8003832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003836:	f7fc feff 	bl	8000638 <__aeabi_dmul>
 800383a:	4602      	mov	r2, r0
 800383c:	460b      	mov	r3, r1
 800383e:	4620      	mov	r0, r4
 8003840:	4629      	mov	r1, r5
 8003842:	f7fc fd41 	bl	80002c8 <__aeabi_dsub>
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800384e:	f7fc fef3 	bl	8000638 <__aeabi_dmul>
 8003852:	4602      	mov	r2, r0
 8003854:	460b      	mov	r3, r1
 8003856:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
    double d3 = A[0][2] * (A[1][0] * A[2][1] - A[1][1] * A[2][0]);
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	3318      	adds	r3, #24
 8003864:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	3330      	adds	r3, #48	@ 0x30
 800386c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003870:	f7fc fee2 	bl	8000638 <__aeabi_dmul>
 8003874:	4602      	mov	r2, r0
 8003876:	460b      	mov	r3, r1
 8003878:	4690      	mov	r8, r2
 800387a:	4699      	mov	r9, r3
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	3318      	adds	r3, #24
 8003880:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	3330      	adds	r3, #48	@ 0x30
 8003888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388c:	f7fc fed4 	bl	8000638 <__aeabi_dmul>
 8003890:	4602      	mov	r2, r0
 8003892:	460b      	mov	r3, r1
 8003894:	4640      	mov	r0, r8
 8003896:	4649      	mov	r1, r9
 8003898:	f7fc fd16 	bl	80002c8 <__aeabi_dsub>
 800389c:	4602      	mov	r2, r0
 800389e:	460b      	mov	r3, r1
 80038a0:	4620      	mov	r0, r4
 80038a2:	4629      	mov	r1, r5
 80038a4:	f7fc fec8 	bl	8000638 <__aeabi_dmul>
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    double determinant = d1 + d2 + d3;
 80038b0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80038b4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80038b8:	f7fc fd08 	bl	80002cc <__adddf3>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80038c4:	f7fc fd02 	bl	80002cc <__adddf3>
 80038c8:	4602      	mov	r2, r0
 80038ca:	460b      	mov	r3, r1
 80038cc:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    // Technically I don't have to do the additional calculations of
    // the cofactors but I'm leaving it for clarity

    if (determinant == 0.0) {
 80038d0:	f04f 0200 	mov.w	r2, #0
 80038d4:	f04f 0300 	mov.w	r3, #0
 80038d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80038dc:	f7fd f914 	bl	8000b08 <__aeabi_dcmpeq>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d151      	bne.n	800398a <invert_3x3+0x5e2>
        return;
    }

    for (int i = 0; i < 3; i++) {
 80038e6:	2300      	movs	r3, #0
 80038e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80038ec:	e048      	b.n	8003980 <invert_3x3+0x5d8>
        O[0][i] /= determinant;
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	4413      	add	r3, r2
 80038f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038fc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8003900:	f7fc ffc4 	bl	800088c <__aeabi_ddiv>
 8003904:	4602      	mov	r2, r0
 8003906:	460b      	mov	r3, r1
 8003908:	69b8      	ldr	r0, [r7, #24]
 800390a:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800390e:	00c9      	lsls	r1, r1, #3
 8003910:	4401      	add	r1, r0
 8003912:	e9c1 2300 	strd	r2, r3, [r1]
        O[1][i] /= determinant;
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	f103 0218 	add.w	r2, r3, #24
 800391c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	4413      	add	r3, r2
 8003924:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	f103 0418 	add.w	r4, r3, #24
 800392e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8003932:	f7fc ffab 	bl	800088c <__aeabi_ddiv>
 8003936:	4602      	mov	r2, r0
 8003938:	460b      	mov	r3, r1
 800393a:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800393e:	00c9      	lsls	r1, r1, #3
 8003940:	4421      	add	r1, r4
 8003942:	e9c1 2300 	strd	r2, r3, [r1]
        O[2][i] /= determinant;
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800394c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	4413      	add	r3, r2
 8003954:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 800395e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8003962:	f7fc ff93 	bl	800088c <__aeabi_ddiv>
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800396e:	00c9      	lsls	r1, r1, #3
 8003970:	4421      	add	r1, r4
 8003972:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < 3; i++) {
 8003976:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800397a:	3301      	adds	r3, #1
 800397c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003980:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003984:	2b02      	cmp	r3, #2
 8003986:	ddb2      	ble.n	80038ee <invert_3x3+0x546>
 8003988:	e000      	b.n	800398c <invert_3x3+0x5e4>
        return;
 800398a:	bf00      	nop
    }
}
 800398c:	3798      	adds	r7, #152	@ 0x98
 800398e:	46bd      	mov	sp, r7
 8003990:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003994 <Matrix_Multiply_3x3_3x1>:


void Matrix_Multiply_3x3_3x1(double A[3][3], double B[3][1], double O[3][1]) {
 8003994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 3; i++) {
 80039a0:	2300      	movs	r3, #0
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	e042      	b.n	8003a2c <Matrix_Multiply_3x3_3x1+0x98>
        O[i][0] = 0; // Initialize the output element to zero
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	18d1      	adds	r1, r2, r3
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	e9c1 2300 	strd	r2, r3, [r1]
        for (int j = 0; j < 3; j++) {
 80039ba:	2300      	movs	r3, #0
 80039bc:	613b      	str	r3, [r7, #16]
 80039be:	e02f      	b.n	8003a20 <Matrix_Multiply_3x3_3x1+0x8c>
            O[i][0] += A[i][j] * B[j][0];
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	4413      	add	r3, r2
 80039c8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	4613      	mov	r3, r2
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	4413      	add	r3, r2
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	461a      	mov	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	441a      	add	r2, r3
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	4413      	add	r3, r2
 80039e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	4413      	add	r3, r2
 80039ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f2:	f7fc fe21 	bl	8000638 <__aeabi_dmul>
 80039f6:	4602      	mov	r2, r0
 80039f8:	460b      	mov	r3, r1
 80039fa:	4610      	mov	r0, r2
 80039fc:	4619      	mov	r1, r3
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	18d6      	adds	r6, r2, r3
 8003a06:	4602      	mov	r2, r0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	4620      	mov	r0, r4
 8003a0c:	4629      	mov	r1, r5
 8003a0e:	f7fc fc5d 	bl	80002cc <__adddf3>
 8003a12:	4602      	mov	r2, r0
 8003a14:	460b      	mov	r3, r1
 8003a16:	e9c6 2300 	strd	r2, r3, [r6]
        for (int j = 0; j < 3; j++) {
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	613b      	str	r3, [r7, #16]
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	ddcc      	ble.n	80039c0 <Matrix_Multiply_3x3_3x1+0x2c>
    for (int i = 0; i < 3; i++) {
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	617b      	str	r3, [r7, #20]
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	ddb9      	ble.n	80039a6 <Matrix_Multiply_3x3_3x1+0x12>
        }
    }
}
 8003a32:	bf00      	nop
 8003a34:	bf00      	nop
 8003a36:	371c      	adds	r7, #28
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a3c:	0000      	movs	r0, r0
	...

08003a40 <least_squares_sine>:

// For some reason frequency or sample rate can't be doubles?????
void least_squares_sine(int N, double injection_frequency, double sampling_rate, double offset_us, double data[], double* bestAmplitude, double* bestPhase, double* bestOffset) {
 8003a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a44:	b0c7      	sub	sp, #284	@ 0x11c
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8003a4a:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8003a4e:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8003a52:	ed87 2b08 	vstr	d2, [r7, #32]
 8003a56:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003a58:	61fa      	str	r2, [r7, #28]
 8003a5a:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8003a5e:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8003a62:	6013      	str	r3, [r2, #0]
 8003a64:	466b      	mov	r3, sp
 8003a66:	461e      	mov	r6, r3

    double basis[N][3];
 8003a68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a6a:	1e4b      	subs	r3, r1, #1
 8003a6c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8003a70:	460a      	mov	r2, r1
 8003a72:	2300      	movs	r3, #0
 8003a74:	613a      	str	r2, [r7, #16]
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003a7c:	1890      	adds	r0, r2, r2
 8003a7e:	60b8      	str	r0, [r7, #8]
 8003a80:	415b      	adcs	r3, r3
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a88:	6938      	ldr	r0, [r7, #16]
 8003a8a:	eb12 0800 	adds.w	r8, r2, r0
 8003a8e:	6978      	ldr	r0, [r7, #20]
 8003a90:	eb43 0900 	adc.w	r9, r3, r0
 8003a94:	f04f 0200 	mov.w	r2, #0
 8003a98:	f04f 0300 	mov.w	r3, #0
 8003a9c:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003aa0:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003aa4:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003aa8:	460a      	mov	r2, r1
 8003aaa:	2300      	movs	r3, #0
 8003aac:	4692      	mov	sl, r2
 8003aae:	469b      	mov	fp, r3
 8003ab0:	4652      	mov	r2, sl
 8003ab2:	465b      	mov	r3, fp
 8003ab4:	1890      	adds	r0, r2, r2
 8003ab6:	6038      	str	r0, [r7, #0]
 8003ab8:	415b      	adcs	r3, r3
 8003aba:	607b      	str	r3, [r7, #4]
 8003abc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ac0:	eb12 040a 	adds.w	r4, r2, sl
 8003ac4:	eb43 050b 	adc.w	r5, r3, fp
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	01ab      	lsls	r3, r5, #6
 8003ad2:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 8003ad6:	01a2      	lsls	r2, r4, #6
 8003ad8:	460a      	mov	r2, r1
 8003ada:	4613      	mov	r3, r2
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	4413      	add	r3, r2
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	3307      	adds	r3, #7
 8003ae4:	08db      	lsrs	r3, r3, #3
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	ebad 0d03 	sub.w	sp, sp, r3
 8003aec:	466b      	mov	r3, sp
 8003aee:	3307      	adds	r3, #7
 8003af0:	08db      	lsrs	r3, r3, #3
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    for (int i = 0; i < N; i++) {
 8003af8:	2300      	movs	r3, #0
 8003afa:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003afe:	e082      	b.n	8003c06 <least_squares_sine+0x1c6>
    	double t = (((double)i / sampling_rate)+ offset_us / 1e6);
 8003b00:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8003b04:	f7fc fd2e 	bl	8000564 <__aeabi_i2d>
 8003b08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b0c:	f7fc febe 	bl	800088c <__aeabi_ddiv>
 8003b10:	4602      	mov	r2, r0
 8003b12:	460b      	mov	r3, r1
 8003b14:	4614      	mov	r4, r2
 8003b16:	461d      	mov	r5, r3
 8003b18:	a376      	add	r3, pc, #472	@ (adr r3, 8003cf4 <least_squares_sine+0x2b4>)
 8003b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003b22:	f7fc feb3 	bl	800088c <__aeabi_ddiv>
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	4629      	mov	r1, r5
 8003b2e:	f7fc fbcd 	bl	80002cc <__adddf3>
 8003b32:	4602      	mov	r2, r0
 8003b34:	460b      	mov	r3, r1
 8003b36:	e9c7 2340 	strd	r2, r3, [r7, #256]	@ 0x100
        basis[i][0] = sin(2 * M_PI * injection_frequency * t);
 8003b3a:	a370      	add	r3, pc, #448	@ (adr r3, 8003cfc <least_squares_sine+0x2bc>)
 8003b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b40:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003b44:	f7fc fd78 	bl	8000638 <__aeabi_dmul>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4610      	mov	r0, r2
 8003b4e:	4619      	mov	r1, r3
 8003b50:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 8003b54:	f7fc fd70 	bl	8000638 <__aeabi_dmul>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	ec43 2b17 	vmov	d7, r2, r3
 8003b60:	eeb0 0a47 	vmov.f32	s0, s14
 8003b64:	eef0 0a67 	vmov.f32	s1, s15
 8003b68:	f003 ffda 	bl	8007b20 <sin>
 8003b6c:	eeb0 7a40 	vmov.f32	s14, s0
 8003b70:	eef0 7a60 	vmov.f32	s15, s1
 8003b74:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 8003b78:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	4413      	add	r3, r2
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	440b      	add	r3, r1
 8003b86:	ed83 7b00 	vstr	d7, [r3]
        basis[i][1] = cos(2 * M_PI * injection_frequency * t);
 8003b8a:	a35c      	add	r3, pc, #368	@ (adr r3, 8003cfc <least_squares_sine+0x2bc>)
 8003b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b90:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003b94:	f7fc fd50 	bl	8000638 <__aeabi_dmul>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 8003ba4:	f7fc fd48 	bl	8000638 <__aeabi_dmul>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	ec43 2b17 	vmov	d7, r2, r3
 8003bb0:	eeb0 0a47 	vmov.f32	s0, s14
 8003bb4:	eef0 0a67 	vmov.f32	s1, s15
 8003bb8:	f003 ff56 	bl	8007a68 <cos>
 8003bbc:	eeb0 7a40 	vmov.f32	s14, s0
 8003bc0:	eef0 7a60 	vmov.f32	s15, s1
 8003bc4:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 8003bc8:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003bcc:	4613      	mov	r3, r2
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	4413      	add	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	440b      	add	r3, r1
 8003bd6:	3308      	adds	r3, #8
 8003bd8:	ed83 7b00 	vstr	d7, [r3]
        basis[i][2] = 1;
 8003bdc:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 8003be0:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003be4:	4613      	mov	r3, r2
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	4413      	add	r3, r2
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	440b      	add	r3, r1
 8003bee:	f103 0110 	add.w	r1, r3, #16
 8003bf2:	f04f 0200 	mov.w	r2, #0
 8003bf6:	4b3e      	ldr	r3, [pc, #248]	@ (8003cf0 <least_squares_sine+0x2b0>)
 8003bf8:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < N; i++) {
 8003bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c00:	3301      	adds	r3, #1
 8003c02:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003c06:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003c0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	f6ff af77 	blt.w	8003b00 <least_squares_sine+0xc0>
    }

    double ATA[3][3];
    ATA_Nx3(N, basis, ATA); // Same
 8003c12:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8003c16:	461a      	mov	r2, r3
 8003c18:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 8003c1c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003c1e:	f7ff f9fe 	bl	800301e <ATA_Nx3>

    double ATAI[3][3];
    invert_3x3(ATA, ATAI); // Same
 8003c22:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8003c26:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8003c2a:	4611      	mov	r1, r2
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7ff fbbb 	bl	80033a8 <invert_3x3>

    double ATB[3][1];
    ATB_Nx3_Nx1(N, basis, data, ATB); // same
 8003c32:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003c36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003c38:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 8003c3c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003c3e:	f7ff fadc 	bl	80031fa <ATB_Nx3_Nx1>

    double X[3][1];
    Matrix_Multiply_3x3_3x1(ATAI, ATB, X); // Different
 8003c42:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003c46:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8003c4a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7ff fea0 	bl	8003994 <Matrix_Multiply_3x3_3x1>

    *bestAmplitude = sqrt(X[0][0] * X[0][0] + X[1][0] * X[1][0]);
 8003c54:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8003c58:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003c5c:	f7fc fcec 	bl	8000638 <__aeabi_dmul>
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
 8003c64:	4614      	mov	r4, r2
 8003c66:	461d      	mov	r5, r3
 8003c68:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8003c6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003c70:	f7fc fce2 	bl	8000638 <__aeabi_dmul>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4620      	mov	r0, r4
 8003c7a:	4629      	mov	r1, r5
 8003c7c:	f7fc fb26 	bl	80002cc <__adddf3>
 8003c80:	4602      	mov	r2, r0
 8003c82:	460b      	mov	r3, r1
 8003c84:	ec43 2b17 	vmov	d7, r2, r3
 8003c88:	eeb0 0a47 	vmov.f32	s0, s14
 8003c8c:	eef0 0a67 	vmov.f32	s1, s15
 8003c90:	f003 fd26 	bl	80076e0 <sqrt>
 8003c94:	eeb0 7a40 	vmov.f32	s14, s0
 8003c98:	eef0 7a60 	vmov.f32	s15, s1
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	ed83 7b00 	vstr	d7, [r3]
    *bestPhase = atan2(X[1][0], X[0][0]);
 8003ca2:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8003ca6:	ed97 6b10 	vldr	d6, [r7, #64]	@ 0x40
 8003caa:	eeb0 1a46 	vmov.f32	s2, s12
 8003cae:	eef0 1a66 	vmov.f32	s3, s13
 8003cb2:	eeb0 0a47 	vmov.f32	s0, s14
 8003cb6:	eef0 0a67 	vmov.f32	s1, s15
 8003cba:	f003 fc9f 	bl	80075fc <atan2>
 8003cbe:	eeb0 7a40 	vmov.f32	s14, s0
 8003cc2:	eef0 7a60 	vmov.f32	s15, s1
 8003cc6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003cca:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	ed83 7b00 	vstr	d7, [r3]
    *bestOffset = X[2][0];
 8003cd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003cd8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003cdc:	e9c1 2300 	strd	r2, r3, [r1]
 8003ce0:	46b5      	mov	sp, r6
}
 8003ce2:	bf00      	nop
 8003ce4:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cee:	bf00      	nop
 8003cf0:	3ff00000 	.word	0x3ff00000
 8003cf4:	00000000 	.word	0x00000000
 8003cf8:	412e8480 	.word	0x412e8480
 8003cfc:	54442d18 	.word	0x54442d18
 8003d00:	401921fb 	.word	0x401921fb

08003d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	607b      	str	r3, [r7, #4]
 8003d0e:	4b10      	ldr	r3, [pc, #64]	@ (8003d50 <HAL_MspInit+0x4c>)
 8003d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d12:	4a0f      	ldr	r2, [pc, #60]	@ (8003d50 <HAL_MspInit+0x4c>)
 8003d14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d18:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d50 <HAL_MspInit+0x4c>)
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d22:	607b      	str	r3, [r7, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d26:	2300      	movs	r3, #0
 8003d28:	603b      	str	r3, [r7, #0]
 8003d2a:	4b09      	ldr	r3, [pc, #36]	@ (8003d50 <HAL_MspInit+0x4c>)
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2e:	4a08      	ldr	r2, [pc, #32]	@ (8003d50 <HAL_MspInit+0x4c>)
 8003d30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d34:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d36:	4b06      	ldr	r3, [pc, #24]	@ (8003d50 <HAL_MspInit+0x4c>)
 8003d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d3e:	603b      	str	r3, [r7, #0]
 8003d40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40023800 	.word	0x40023800

08003d54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08c      	sub	sp, #48	@ 0x30
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d5c:	f107 031c 	add.w	r3, r7, #28
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	605a      	str	r2, [r3, #4]
 8003d66:	609a      	str	r2, [r3, #8]
 8003d68:	60da      	str	r2, [r3, #12]
 8003d6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a66      	ldr	r2, [pc, #408]	@ (8003f0c <HAL_ADC_MspInit+0x1b8>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d160      	bne.n	8003e38 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003d76:	2300      	movs	r3, #0
 8003d78:	61bb      	str	r3, [r7, #24]
 8003d7a:	4b65      	ldr	r3, [pc, #404]	@ (8003f10 <HAL_ADC_MspInit+0x1bc>)
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7e:	4a64      	ldr	r2, [pc, #400]	@ (8003f10 <HAL_ADC_MspInit+0x1bc>)
 8003d80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d86:	4b62      	ldr	r3, [pc, #392]	@ (8003f10 <HAL_ADC_MspInit+0x1bc>)
 8003d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d8e:	61bb      	str	r3, [r7, #24]
 8003d90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d92:	2300      	movs	r3, #0
 8003d94:	617b      	str	r3, [r7, #20]
 8003d96:	4b5e      	ldr	r3, [pc, #376]	@ (8003f10 <HAL_ADC_MspInit+0x1bc>)
 8003d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9a:	4a5d      	ldr	r2, [pc, #372]	@ (8003f10 <HAL_ADC_MspInit+0x1bc>)
 8003d9c:	f043 0301 	orr.w	r3, r3, #1
 8003da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003da2:	4b5b      	ldr	r3, [pc, #364]	@ (8003f10 <HAL_ADC_MspInit+0x1bc>)
 8003da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	617b      	str	r3, [r7, #20]
 8003dac:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_CH0_Pin|ADC_CH1_Pin;
 8003dae:	2303      	movs	r3, #3
 8003db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003db2:	2303      	movs	r3, #3
 8003db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db6:	2300      	movs	r3, #0
 8003db8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dba:	f107 031c 	add.w	r3, r7, #28
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	4854      	ldr	r0, [pc, #336]	@ (8003f14 <HAL_ADC_MspInit+0x1c0>)
 8003dc2:	f001 fd4b 	bl	800585c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003dc6:	4b54      	ldr	r3, [pc, #336]	@ (8003f18 <HAL_ADC_MspInit+0x1c4>)
 8003dc8:	4a54      	ldr	r2, [pc, #336]	@ (8003f1c <HAL_ADC_MspInit+0x1c8>)
 8003dca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003dcc:	4b52      	ldr	r3, [pc, #328]	@ (8003f18 <HAL_ADC_MspInit+0x1c4>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003dd2:	4b51      	ldr	r3, [pc, #324]	@ (8003f18 <HAL_ADC_MspInit+0x1c4>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dd8:	4b4f      	ldr	r3, [pc, #316]	@ (8003f18 <HAL_ADC_MspInit+0x1c4>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003dde:	4b4e      	ldr	r3, [pc, #312]	@ (8003f18 <HAL_ADC_MspInit+0x1c4>)
 8003de0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003de4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003de6:	4b4c      	ldr	r3, [pc, #304]	@ (8003f18 <HAL_ADC_MspInit+0x1c4>)
 8003de8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003dec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003dee:	4b4a      	ldr	r3, [pc, #296]	@ (8003f18 <HAL_ADC_MspInit+0x1c4>)
 8003df0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003df4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003df6:	4b48      	ldr	r3, [pc, #288]	@ (8003f18 <HAL_ADC_MspInit+0x1c4>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003dfc:	4b46      	ldr	r3, [pc, #280]	@ (8003f18 <HAL_ADC_MspInit+0x1c4>)
 8003dfe:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003e02:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e04:	4b44      	ldr	r3, [pc, #272]	@ (8003f18 <HAL_ADC_MspInit+0x1c4>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003e0a:	4843      	ldr	r0, [pc, #268]	@ (8003f18 <HAL_ADC_MspInit+0x1c4>)
 8003e0c:	f001 f9b6 	bl	800517c <HAL_DMA_Init>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003e16:	f7ff f857 	bl	8002ec8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a3e      	ldr	r2, [pc, #248]	@ (8003f18 <HAL_ADC_MspInit+0x1c4>)
 8003e1e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003e20:	4a3d      	ldr	r2, [pc, #244]	@ (8003f18 <HAL_ADC_MspInit+0x1c4>)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 15, 0);
 8003e26:	2200      	movs	r2, #0
 8003e28:	210f      	movs	r1, #15
 8003e2a:	2012      	movs	r0, #18
 8003e2c:	f001 f96f 	bl	800510e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003e30:	2012      	movs	r0, #18
 8003e32:	f001 f988 	bl	8005146 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003e36:	e065      	b.n	8003f04 <HAL_ADC_MspInit+0x1b0>
  else if(hadc->Instance==ADC2)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a38      	ldr	r2, [pc, #224]	@ (8003f20 <HAL_ADC_MspInit+0x1cc>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d160      	bne.n	8003f04 <HAL_ADC_MspInit+0x1b0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003e42:	2300      	movs	r3, #0
 8003e44:	613b      	str	r3, [r7, #16]
 8003e46:	4b32      	ldr	r3, [pc, #200]	@ (8003f10 <HAL_ADC_MspInit+0x1bc>)
 8003e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4a:	4a31      	ldr	r2, [pc, #196]	@ (8003f10 <HAL_ADC_MspInit+0x1bc>)
 8003e4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e50:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e52:	4b2f      	ldr	r3, [pc, #188]	@ (8003f10 <HAL_ADC_MspInit+0x1bc>)
 8003e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e5a:	613b      	str	r3, [r7, #16]
 8003e5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e5e:	2300      	movs	r3, #0
 8003e60:	60fb      	str	r3, [r7, #12]
 8003e62:	4b2b      	ldr	r3, [pc, #172]	@ (8003f10 <HAL_ADC_MspInit+0x1bc>)
 8003e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e66:	4a2a      	ldr	r2, [pc, #168]	@ (8003f10 <HAL_ADC_MspInit+0x1bc>)
 8003e68:	f043 0301 	orr.w	r3, r3, #1
 8003e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e6e:	4b28      	ldr	r3, [pc, #160]	@ (8003f10 <HAL_ADC_MspInit+0x1bc>)
 8003e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC_CH1_Pin;
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e82:	2300      	movs	r3, #0
 8003e84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ADC_CH1_GPIO_Port, &GPIO_InitStruct);
 8003e86:	f107 031c 	add.w	r3, r7, #28
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4821      	ldr	r0, [pc, #132]	@ (8003f14 <HAL_ADC_MspInit+0x1c0>)
 8003e8e:	f001 fce5 	bl	800585c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8003e92:	4b24      	ldr	r3, [pc, #144]	@ (8003f24 <HAL_ADC_MspInit+0x1d0>)
 8003e94:	4a24      	ldr	r2, [pc, #144]	@ (8003f28 <HAL_ADC_MspInit+0x1d4>)
 8003e96:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8003e98:	4b22      	ldr	r3, [pc, #136]	@ (8003f24 <HAL_ADC_MspInit+0x1d0>)
 8003e9a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e9e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ea0:	4b20      	ldr	r3, [pc, #128]	@ (8003f24 <HAL_ADC_MspInit+0x1d0>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ea6:	4b1f      	ldr	r3, [pc, #124]	@ (8003f24 <HAL_ADC_MspInit+0x1d0>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003eac:	4b1d      	ldr	r3, [pc, #116]	@ (8003f24 <HAL_ADC_MspInit+0x1d0>)
 8003eae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003eb2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8003f24 <HAL_ADC_MspInit+0x1d0>)
 8003eb6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003eba:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003ebc:	4b19      	ldr	r3, [pc, #100]	@ (8003f24 <HAL_ADC_MspInit+0x1d0>)
 8003ebe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ec2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8003ec4:	4b17      	ldr	r3, [pc, #92]	@ (8003f24 <HAL_ADC_MspInit+0x1d0>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003eca:	4b16      	ldr	r3, [pc, #88]	@ (8003f24 <HAL_ADC_MspInit+0x1d0>)
 8003ecc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003ed0:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ed2:	4b14      	ldr	r3, [pc, #80]	@ (8003f24 <HAL_ADC_MspInit+0x1d0>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003ed8:	4812      	ldr	r0, [pc, #72]	@ (8003f24 <HAL_ADC_MspInit+0x1d0>)
 8003eda:	f001 f94f 	bl	800517c <HAL_DMA_Init>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <HAL_ADC_MspInit+0x194>
      Error_Handler();
 8003ee4:	f7fe fff0 	bl	8002ec8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a0e      	ldr	r2, [pc, #56]	@ (8003f24 <HAL_ADC_MspInit+0x1d0>)
 8003eec:	639a      	str	r2, [r3, #56]	@ 0x38
 8003eee:	4a0d      	ldr	r2, [pc, #52]	@ (8003f24 <HAL_ADC_MspInit+0x1d0>)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 15, 0);
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	210f      	movs	r1, #15
 8003ef8:	2012      	movs	r0, #18
 8003efa:	f001 f908 	bl	800510e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003efe:	2012      	movs	r0, #18
 8003f00:	f001 f921 	bl	8005146 <HAL_NVIC_EnableIRQ>
}
 8003f04:	bf00      	nop
 8003f06:	3730      	adds	r7, #48	@ 0x30
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40012000 	.word	0x40012000
 8003f10:	40023800 	.word	0x40023800
 8003f14:	40020000 	.word	0x40020000
 8003f18:	2000029c 	.word	0x2000029c
 8003f1c:	40026410 	.word	0x40026410
 8003f20:	40012100 	.word	0x40012100
 8003f24:	200002fc 	.word	0x200002fc
 8003f28:	40026440 	.word	0x40026440

08003f2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b08c      	sub	sp, #48	@ 0x30
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f34:	f107 031c 	add.w	r3, r7, #28
 8003f38:	2200      	movs	r2, #0
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	605a      	str	r2, [r3, #4]
 8003f3e:	609a      	str	r2, [r3, #8]
 8003f40:	60da      	str	r2, [r3, #12]
 8003f42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a41      	ldr	r2, [pc, #260]	@ (8004050 <HAL_SPI_MspInit+0x124>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d12c      	bne.n	8003fa8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f4e:	2300      	movs	r3, #0
 8003f50:	61bb      	str	r3, [r7, #24]
 8003f52:	4b40      	ldr	r3, [pc, #256]	@ (8004054 <HAL_SPI_MspInit+0x128>)
 8003f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f56:	4a3f      	ldr	r2, [pc, #252]	@ (8004054 <HAL_SPI_MspInit+0x128>)
 8003f58:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003f5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f5e:	4b3d      	ldr	r3, [pc, #244]	@ (8004054 <HAL_SPI_MspInit+0x128>)
 8003f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f66:	61bb      	str	r3, [r7, #24]
 8003f68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]
 8003f6e:	4b39      	ldr	r3, [pc, #228]	@ (8004054 <HAL_SPI_MspInit+0x128>)
 8003f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f72:	4a38      	ldr	r2, [pc, #224]	@ (8004054 <HAL_SPI_MspInit+0x128>)
 8003f74:	f043 0301 	orr.w	r3, r3, #1
 8003f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f7a:	4b36      	ldr	r3, [pc, #216]	@ (8004054 <HAL_SPI_MspInit+0x128>)
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003f86:	23e0      	movs	r3, #224	@ 0xe0
 8003f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f92:	2303      	movs	r3, #3
 8003f94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003f96:	2305      	movs	r3, #5
 8003f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f9a:	f107 031c 	add.w	r3, r7, #28
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	482d      	ldr	r0, [pc, #180]	@ (8004058 <HAL_SPI_MspInit+0x12c>)
 8003fa2:	f001 fc5b 	bl	800585c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003fa6:	e04f      	b.n	8004048 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI3)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a2b      	ldr	r2, [pc, #172]	@ (800405c <HAL_SPI_MspInit+0x130>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d14a      	bne.n	8004048 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	613b      	str	r3, [r7, #16]
 8003fb6:	4b27      	ldr	r3, [pc, #156]	@ (8004054 <HAL_SPI_MspInit+0x128>)
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fba:	4a26      	ldr	r2, [pc, #152]	@ (8004054 <HAL_SPI_MspInit+0x128>)
 8003fbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fc2:	4b24      	ldr	r3, [pc, #144]	@ (8004054 <HAL_SPI_MspInit+0x128>)
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fca:	613b      	str	r3, [r7, #16]
 8003fcc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60fb      	str	r3, [r7, #12]
 8003fd2:	4b20      	ldr	r3, [pc, #128]	@ (8004054 <HAL_SPI_MspInit+0x128>)
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd6:	4a1f      	ldr	r2, [pc, #124]	@ (8004054 <HAL_SPI_MspInit+0x128>)
 8003fd8:	f043 0302 	orr.w	r3, r3, #2
 8003fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fde:	4b1d      	ldr	r3, [pc, #116]	@ (8004054 <HAL_SPI_MspInit+0x128>)
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fea:	2300      	movs	r3, #0
 8003fec:	60bb      	str	r3, [r7, #8]
 8003fee:	4b19      	ldr	r3, [pc, #100]	@ (8004054 <HAL_SPI_MspInit+0x128>)
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff2:	4a18      	ldr	r2, [pc, #96]	@ (8004054 <HAL_SPI_MspInit+0x128>)
 8003ff4:	f043 0304 	orr.w	r3, r3, #4
 8003ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ffa:	4b16      	ldr	r3, [pc, #88]	@ (8004054 <HAL_SPI_MspInit+0x128>)
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffe:	f003 0304 	and.w	r3, r3, #4
 8004002:	60bb      	str	r3, [r7, #8]
 8004004:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004006:	2304      	movs	r3, #4
 8004008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800400a:	2302      	movs	r3, #2
 800400c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400e:	2300      	movs	r3, #0
 8004010:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004012:	2303      	movs	r3, #3
 8004014:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8004016:	2307      	movs	r3, #7
 8004018:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800401a:	f107 031c 	add.w	r3, r7, #28
 800401e:	4619      	mov	r1, r3
 8004020:	480f      	ldr	r0, [pc, #60]	@ (8004060 <HAL_SPI_MspInit+0x134>)
 8004022:	f001 fc1b 	bl	800585c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004026:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800402a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800402c:	2302      	movs	r3, #2
 800402e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004030:	2300      	movs	r3, #0
 8004032:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004034:	2303      	movs	r3, #3
 8004036:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004038:	2306      	movs	r3, #6
 800403a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800403c:	f107 031c 	add.w	r3, r7, #28
 8004040:	4619      	mov	r1, r3
 8004042:	4808      	ldr	r0, [pc, #32]	@ (8004064 <HAL_SPI_MspInit+0x138>)
 8004044:	f001 fc0a 	bl	800585c <HAL_GPIO_Init>
}
 8004048:	bf00      	nop
 800404a:	3730      	adds	r7, #48	@ 0x30
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	40013000 	.word	0x40013000
 8004054:	40023800 	.word	0x40023800
 8004058:	40020000 	.word	0x40020000
 800405c:	40003c00 	.word	0x40003c00
 8004060:	40020400 	.word	0x40020400
 8004064:	40020800 	.word	0x40020800

08004068 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004078:	d10e      	bne.n	8004098 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800407a:	2300      	movs	r3, #0
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	4b16      	ldr	r3, [pc, #88]	@ (80040d8 <HAL_TIM_Base_MspInit+0x70>)
 8004080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004082:	4a15      	ldr	r2, [pc, #84]	@ (80040d8 <HAL_TIM_Base_MspInit+0x70>)
 8004084:	f043 0301 	orr.w	r3, r3, #1
 8004088:	6413      	str	r3, [r2, #64]	@ 0x40
 800408a:	4b13      	ldr	r3, [pc, #76]	@ (80040d8 <HAL_TIM_Base_MspInit+0x70>)
 800408c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004096:	e01a      	b.n	80040ce <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a0f      	ldr	r2, [pc, #60]	@ (80040dc <HAL_TIM_Base_MspInit+0x74>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d115      	bne.n	80040ce <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80040a2:	2300      	movs	r3, #0
 80040a4:	60bb      	str	r3, [r7, #8]
 80040a6:	4b0c      	ldr	r3, [pc, #48]	@ (80040d8 <HAL_TIM_Base_MspInit+0x70>)
 80040a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040aa:	4a0b      	ldr	r2, [pc, #44]	@ (80040d8 <HAL_TIM_Base_MspInit+0x70>)
 80040ac:	f043 0302 	orr.w	r3, r3, #2
 80040b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80040b2:	4b09      	ldr	r3, [pc, #36]	@ (80040d8 <HAL_TIM_Base_MspInit+0x70>)
 80040b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	60bb      	str	r3, [r7, #8]
 80040bc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80040be:	2200      	movs	r2, #0
 80040c0:	2100      	movs	r1, #0
 80040c2:	201d      	movs	r0, #29
 80040c4:	f001 f823 	bl	800510e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80040c8:	201d      	movs	r0, #29
 80040ca:	f001 f83c 	bl	8005146 <HAL_NVIC_EnableIRQ>
}
 80040ce:	bf00      	nop
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	40023800 	.word	0x40023800
 80040dc:	40000400 	.word	0x40000400

080040e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80040e4:	bf00      	nop
 80040e6:	e7fd      	b.n	80040e4 <NMI_Handler+0x4>

080040e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040ec:	bf00      	nop
 80040ee:	e7fd      	b.n	80040ec <HardFault_Handler+0x4>

080040f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040f4:	bf00      	nop
 80040f6:	e7fd      	b.n	80040f4 <MemManage_Handler+0x4>

080040f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040fc:	bf00      	nop
 80040fe:	e7fd      	b.n	80040fc <BusFault_Handler+0x4>

08004100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004104:	bf00      	nop
 8004106:	e7fd      	b.n	8004104 <UsageFault_Handler+0x4>

08004108 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800410c:	bf00      	nop
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004116:	b480      	push	{r7}
 8004118:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800411a:	bf00      	nop
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004128:	bf00      	nop
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004136:	f000 f98f 	bl	8004458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800413a:	bf00      	nop
 800413c:	bd80      	pop	{r7, pc}
	...

08004140 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004144:	4803      	ldr	r0, [pc, #12]	@ (8004154 <ADC_IRQHandler+0x14>)
 8004146:	f000 fa0e 	bl	8004566 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800414a:	4803      	ldr	r0, [pc, #12]	@ (8004158 <ADC_IRQHandler+0x18>)
 800414c:	f000 fa0b 	bl	8004566 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004150:	bf00      	nop
 8004152:	bd80      	pop	{r7, pc}
 8004154:	2000020c 	.word	0x2000020c
 8004158:	20000254 	.word	0x20000254

0800415c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004160:	4802      	ldr	r0, [pc, #8]	@ (800416c <TIM3_IRQHandler+0x10>)
 8004162:	f002 fe96 	bl	8006e92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004166:	bf00      	nop
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	20000454 	.word	0x20000454

08004170 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_0_Pin);
 8004174:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004178:	f001 fd36 	bl	8005be8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_1_Pin);
 800417c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004180:	f001 fd32 	bl	8005be8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004184:	bf00      	nop
 8004186:	bd80      	pop	{r7, pc}

08004188 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800418c:	4802      	ldr	r0, [pc, #8]	@ (8004198 <DMA2_Stream0_IRQHandler+0x10>)
 800418e:	f001 f8fb 	bl	8005388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004192:	bf00      	nop
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	2000029c 	.word	0x2000029c

0800419c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80041a0:	4802      	ldr	r0, [pc, #8]	@ (80041ac <DMA2_Stream2_IRQHandler+0x10>)
 80041a2:	f001 f8f1 	bl	8005388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80041a6:	bf00      	nop
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	200002fc 	.word	0x200002fc

080041b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  return 1;
 80041b4:	2301      	movs	r3, #1
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <_kill>:

int _kill(int pid, int sig)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80041ca:	f006 f9e5 	bl	800a598 <__errno>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2216      	movs	r2, #22
 80041d2:	601a      	str	r2, [r3, #0]
  return -1;
 80041d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3708      	adds	r7, #8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <_exit>:

void _exit (int status)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80041e8:	f04f 31ff 	mov.w	r1, #4294967295
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7ff ffe7 	bl	80041c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80041f2:	bf00      	nop
 80041f4:	e7fd      	b.n	80041f2 <_exit+0x12>

080041f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b086      	sub	sp, #24
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	60f8      	str	r0, [r7, #12]
 80041fe:	60b9      	str	r1, [r7, #8]
 8004200:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004202:	2300      	movs	r3, #0
 8004204:	617b      	str	r3, [r7, #20]
 8004206:	e00a      	b.n	800421e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004208:	f3af 8000 	nop.w
 800420c:	4601      	mov	r1, r0
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	60ba      	str	r2, [r7, #8]
 8004214:	b2ca      	uxtb	r2, r1
 8004216:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	3301      	adds	r3, #1
 800421c:	617b      	str	r3, [r7, #20]
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	429a      	cmp	r2, r3
 8004224:	dbf0      	blt.n	8004208 <_read+0x12>
  }

  return len;
 8004226:	687b      	ldr	r3, [r7, #4]
}
 8004228:	4618      	mov	r0, r3
 800422a:	3718      	adds	r7, #24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800423c:	2300      	movs	r3, #0
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	e009      	b.n	8004256 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	60ba      	str	r2, [r7, #8]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	3301      	adds	r3, #1
 8004254:	617b      	str	r3, [r7, #20]
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	429a      	cmp	r2, r3
 800425c:	dbf1      	blt.n	8004242 <_write+0x12>
  }
  return len;
 800425e:	687b      	ldr	r3, [r7, #4]
}
 8004260:	4618      	mov	r0, r3
 8004262:	3718      	adds	r7, #24
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <_close>:

int _close(int file)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004270:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004274:	4618      	mov	r0, r3
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004290:	605a      	str	r2, [r3, #4]
  return 0;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <_isatty>:

int _isatty(int file)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80042a8:	2301      	movs	r3, #1
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b085      	sub	sp, #20
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	60f8      	str	r0, [r7, #12]
 80042be:	60b9      	str	r1, [r7, #8]
 80042c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042d8:	4a14      	ldr	r2, [pc, #80]	@ (800432c <_sbrk+0x5c>)
 80042da:	4b15      	ldr	r3, [pc, #84]	@ (8004330 <_sbrk+0x60>)
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042e4:	4b13      	ldr	r3, [pc, #76]	@ (8004334 <_sbrk+0x64>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d102      	bne.n	80042f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042ec:	4b11      	ldr	r3, [pc, #68]	@ (8004334 <_sbrk+0x64>)
 80042ee:	4a12      	ldr	r2, [pc, #72]	@ (8004338 <_sbrk+0x68>)
 80042f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042f2:	4b10      	ldr	r3, [pc, #64]	@ (8004334 <_sbrk+0x64>)
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4413      	add	r3, r2
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d207      	bcs.n	8004310 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004300:	f006 f94a 	bl	800a598 <__errno>
 8004304:	4603      	mov	r3, r0
 8004306:	220c      	movs	r2, #12
 8004308:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800430a:	f04f 33ff 	mov.w	r3, #4294967295
 800430e:	e009      	b.n	8004324 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004310:	4b08      	ldr	r3, [pc, #32]	@ (8004334 <_sbrk+0x64>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004316:	4b07      	ldr	r3, [pc, #28]	@ (8004334 <_sbrk+0x64>)
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4413      	add	r3, r2
 800431e:	4a05      	ldr	r2, [pc, #20]	@ (8004334 <_sbrk+0x64>)
 8004320:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004322:	68fb      	ldr	r3, [r7, #12]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3718      	adds	r7, #24
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	20020000 	.word	0x20020000
 8004330:	00000400 	.word	0x00000400
 8004334:	200023e0 	.word	0x200023e0
 8004338:	20002538 	.word	0x20002538

0800433c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004340:	4b06      	ldr	r3, [pc, #24]	@ (800435c <SystemInit+0x20>)
 8004342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004346:	4a05      	ldr	r2, [pc, #20]	@ (800435c <SystemInit+0x20>)
 8004348:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800434c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004350:	bf00      	nop
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	e000ed00 	.word	0xe000ed00

08004360 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004360:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004398 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004364:	f7ff ffea 	bl	800433c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004368:	480c      	ldr	r0, [pc, #48]	@ (800439c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800436a:	490d      	ldr	r1, [pc, #52]	@ (80043a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800436c:	4a0d      	ldr	r2, [pc, #52]	@ (80043a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800436e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004370:	e002      	b.n	8004378 <LoopCopyDataInit>

08004372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004376:	3304      	adds	r3, #4

08004378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800437a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800437c:	d3f9      	bcc.n	8004372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800437e:	4a0a      	ldr	r2, [pc, #40]	@ (80043a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004380:	4c0a      	ldr	r4, [pc, #40]	@ (80043ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8004382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004384:	e001      	b.n	800438a <LoopFillZerobss>

08004386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004388:	3204      	adds	r2, #4

0800438a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800438a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800438c:	d3fb      	bcc.n	8004386 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800438e:	f006 f909 	bl	800a5a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004392:	f7fe f85d 	bl	8002450 <main>
  bx  lr    
 8004396:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004398:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800439c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043a0:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80043a4:	0800cf78 	.word	0x0800cf78
  ldr r2, =_sbss
 80043a8:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80043ac:	20002534 	.word	0x20002534

080043b0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043b0:	e7fe      	b.n	80043b0 <CAN1_RX0_IRQHandler>
	...

080043b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043b8:	4b0e      	ldr	r3, [pc, #56]	@ (80043f4 <HAL_Init+0x40>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a0d      	ldr	r2, [pc, #52]	@ (80043f4 <HAL_Init+0x40>)
 80043be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80043c4:	4b0b      	ldr	r3, [pc, #44]	@ (80043f4 <HAL_Init+0x40>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a0a      	ldr	r2, [pc, #40]	@ (80043f4 <HAL_Init+0x40>)
 80043ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80043ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043d0:	4b08      	ldr	r3, [pc, #32]	@ (80043f4 <HAL_Init+0x40>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a07      	ldr	r2, [pc, #28]	@ (80043f4 <HAL_Init+0x40>)
 80043d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043dc:	2003      	movs	r0, #3
 80043de:	f000 fe8b 	bl	80050f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043e2:	200f      	movs	r0, #15
 80043e4:	f000 f808 	bl	80043f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043e8:	f7ff fc8c 	bl	8003d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	40023c00 	.word	0x40023c00

080043f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004400:	4b12      	ldr	r3, [pc, #72]	@ (800444c <HAL_InitTick+0x54>)
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	4b12      	ldr	r3, [pc, #72]	@ (8004450 <HAL_InitTick+0x58>)
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	4619      	mov	r1, r3
 800440a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800440e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004412:	fbb2 f3f3 	udiv	r3, r2, r3
 8004416:	4618      	mov	r0, r3
 8004418:	f000 fea3 	bl	8005162 <HAL_SYSTICK_Config>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e00e      	b.n	8004444 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b0f      	cmp	r3, #15
 800442a:	d80a      	bhi.n	8004442 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800442c:	2200      	movs	r2, #0
 800442e:	6879      	ldr	r1, [r7, #4]
 8004430:	f04f 30ff 	mov.w	r0, #4294967295
 8004434:	f000 fe6b 	bl	800510e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004438:	4a06      	ldr	r2, [pc, #24]	@ (8004454 <HAL_InitTick+0x5c>)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	e000      	b.n	8004444 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
}
 8004444:	4618      	mov	r0, r3
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	2000000c 	.word	0x2000000c
 8004450:	20000014 	.word	0x20000014
 8004454:	20000010 	.word	0x20000010

08004458 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800445c:	4b06      	ldr	r3, [pc, #24]	@ (8004478 <HAL_IncTick+0x20>)
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	461a      	mov	r2, r3
 8004462:	4b06      	ldr	r3, [pc, #24]	@ (800447c <HAL_IncTick+0x24>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4413      	add	r3, r2
 8004468:	4a04      	ldr	r2, [pc, #16]	@ (800447c <HAL_IncTick+0x24>)
 800446a:	6013      	str	r3, [r2, #0]
}
 800446c:	bf00      	nop
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	20000014 	.word	0x20000014
 800447c:	200023e4 	.word	0x200023e4

08004480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
  return uwTick;
 8004484:	4b03      	ldr	r3, [pc, #12]	@ (8004494 <HAL_GetTick+0x14>)
 8004486:	681b      	ldr	r3, [r3, #0]
}
 8004488:	4618      	mov	r0, r3
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	200023e4 	.word	0x200023e4

08004498 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044a0:	f7ff ffee 	bl	8004480 <HAL_GetTick>
 80044a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b0:	d005      	beq.n	80044be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044b2:	4b0a      	ldr	r3, [pc, #40]	@ (80044dc <HAL_Delay+0x44>)
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	461a      	mov	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	4413      	add	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80044be:	bf00      	nop
 80044c0:	f7ff ffde 	bl	8004480 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d8f7      	bhi.n	80044c0 <HAL_Delay+0x28>
  {
  }
}
 80044d0:	bf00      	nop
 80044d2:	bf00      	nop
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	20000014 	.word	0x20000014

080044e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044e8:	2300      	movs	r3, #0
 80044ea:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e033      	b.n	800455e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d109      	bne.n	8004512 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7ff fc28 	bl	8003d54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004516:	f003 0310 	and.w	r3, r3, #16
 800451a:	2b00      	cmp	r3, #0
 800451c:	d118      	bne.n	8004550 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004522:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004526:	f023 0302 	bic.w	r3, r3, #2
 800452a:	f043 0202 	orr.w	r2, r3, #2
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 fb88 	bl	8004c48 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004542:	f023 0303 	bic.w	r3, r3, #3
 8004546:	f043 0201 	orr.w	r2, r3, #1
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	641a      	str	r2, [r3, #64]	@ 0x40
 800454e:	e001      	b.n	8004554 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800455c:	7bfb      	ldrb	r3, [r7, #15]
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b086      	sub	sp, #24
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	617b      	str	r3, [r7, #20]
 8004572:	2300      	movs	r3, #0
 8004574:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f003 0320 	and.w	r3, r3, #32
 8004594:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d049      	beq.n	8004630 <HAL_ADC_IRQHandler+0xca>
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d046      	beq.n	8004630 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a6:	f003 0310 	and.w	r3, r3, #16
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d105      	bne.n	80045ba <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d12b      	bne.n	8004620 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d127      	bne.n	8004620 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d006      	beq.n	80045ec <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d119      	bne.n	8004620 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 0220 	bic.w	r2, r2, #32
 80045fa:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004600:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d105      	bne.n	8004620 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004618:	f043 0201 	orr.w	r2, r3, #1
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f7fe fc1d 	bl	8002e60 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f06f 0212 	mvn.w	r2, #18
 800462e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f003 0304 	and.w	r3, r3, #4
 8004636:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800463e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d057      	beq.n	80046f6 <HAL_ADC_IRQHandler+0x190>
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d054      	beq.n	80046f6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004650:	f003 0310 	and.w	r3, r3, #16
 8004654:	2b00      	cmp	r3, #0
 8004656:	d105      	bne.n	8004664 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d139      	bne.n	80046e6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004678:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800467c:	2b00      	cmp	r3, #0
 800467e:	d006      	beq.n	800468e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800468a:	2b00      	cmp	r3, #0
 800468c:	d12b      	bne.n	80046e6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004698:	2b00      	cmp	r3, #0
 800469a:	d124      	bne.n	80046e6 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d11d      	bne.n	80046e6 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d119      	bne.n	80046e6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046c0:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d105      	bne.n	80046e6 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046de:	f043 0201 	orr.w	r2, r3, #1
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 fc2c 	bl	8004f44 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f06f 020c 	mvn.w	r2, #12
 80046f4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004704:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d017      	beq.n	800473c <HAL_ADC_IRQHandler+0x1d6>
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d014      	beq.n	800473c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b01      	cmp	r3, #1
 800471e:	d10d      	bne.n	800473c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004724:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f945 	bl	80049bc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f06f 0201 	mvn.w	r2, #1
 800473a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f003 0320 	and.w	r3, r3, #32
 8004742:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800474a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d015      	beq.n	800477e <HAL_ADC_IRQHandler+0x218>
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d012      	beq.n	800477e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800475c:	f043 0202 	orr.w	r2, r3, #2
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f06f 0220 	mvn.w	r2, #32
 800476c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f92e 	bl	80049d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f06f 0220 	mvn.w	r2, #32
 800477c:	601a      	str	r2, [r3, #0]
  }
}
 800477e:	bf00      	nop
 8004780:	3718      	adds	r7, #24
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
	...

08004788 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004794:	2300      	movs	r3, #0
 8004796:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d101      	bne.n	80047a6 <HAL_ADC_Start_DMA+0x1e>
 80047a2:	2302      	movs	r3, #2
 80047a4:	e0e9      	b.n	800497a <HAL_ADC_Start_DMA+0x1f2>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d018      	beq.n	80047ee <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689a      	ldr	r2, [r3, #8]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f042 0201 	orr.w	r2, r2, #1
 80047ca:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80047cc:	4b6d      	ldr	r3, [pc, #436]	@ (8004984 <HAL_ADC_Start_DMA+0x1fc>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a6d      	ldr	r2, [pc, #436]	@ (8004988 <HAL_ADC_Start_DMA+0x200>)
 80047d2:	fba2 2303 	umull	r2, r3, r2, r3
 80047d6:	0c9a      	lsrs	r2, r3, #18
 80047d8:	4613      	mov	r3, r2
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	4413      	add	r3, r2
 80047de:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80047e0:	e002      	b.n	80047e8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	3b01      	subs	r3, #1
 80047e6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1f9      	bne.n	80047e2 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047fc:	d107      	bne.n	800480e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800480c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b01      	cmp	r3, #1
 800481a:	f040 80a1 	bne.w	8004960 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004822:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004826:	f023 0301 	bic.w	r3, r3, #1
 800482a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800483c:	2b00      	cmp	r3, #0
 800483e:	d007      	beq.n	8004850 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004844:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004848:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004854:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004858:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800485c:	d106      	bne.n	800486c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004862:	f023 0206 	bic.w	r2, r3, #6
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	645a      	str	r2, [r3, #68]	@ 0x44
 800486a:	e002      	b.n	8004872 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800487a:	4b44      	ldr	r3, [pc, #272]	@ (800498c <HAL_ADC_Start_DMA+0x204>)
 800487c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004882:	4a43      	ldr	r2, [pc, #268]	@ (8004990 <HAL_ADC_Start_DMA+0x208>)
 8004884:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800488a:	4a42      	ldr	r2, [pc, #264]	@ (8004994 <HAL_ADC_Start_DMA+0x20c>)
 800488c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004892:	4a41      	ldr	r2, [pc, #260]	@ (8004998 <HAL_ADC_Start_DMA+0x210>)
 8004894:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800489e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80048ae:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048be:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	334c      	adds	r3, #76	@ 0x4c
 80048ca:	4619      	mov	r1, r3
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f000 fd02 	bl	80052d8 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f003 031f 	and.w	r3, r3, #31
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d12a      	bne.n	8004936 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a2d      	ldr	r2, [pc, #180]	@ (800499c <HAL_ADC_Start_DMA+0x214>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d015      	beq.n	8004916 <HAL_ADC_Start_DMA+0x18e>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a2c      	ldr	r2, [pc, #176]	@ (80049a0 <HAL_ADC_Start_DMA+0x218>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d105      	bne.n	8004900 <HAL_ADC_Start_DMA+0x178>
 80048f4:	4b25      	ldr	r3, [pc, #148]	@ (800498c <HAL_ADC_Start_DMA+0x204>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f003 031f 	and.w	r3, r3, #31
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00a      	beq.n	8004916 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a27      	ldr	r2, [pc, #156]	@ (80049a4 <HAL_ADC_Start_DMA+0x21c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d136      	bne.n	8004978 <HAL_ADC_Start_DMA+0x1f0>
 800490a:	4b20      	ldr	r3, [pc, #128]	@ (800498c <HAL_ADC_Start_DMA+0x204>)
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f003 0310 	and.w	r3, r3, #16
 8004912:	2b00      	cmp	r3, #0
 8004914:	d130      	bne.n	8004978 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d129      	bne.n	8004978 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689a      	ldr	r2, [r3, #8]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004932:	609a      	str	r2, [r3, #8]
 8004934:	e020      	b.n	8004978 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a18      	ldr	r2, [pc, #96]	@ (800499c <HAL_ADC_Start_DMA+0x214>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d11b      	bne.n	8004978 <HAL_ADC_Start_DMA+0x1f0>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d114      	bne.n	8004978 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800495c:	609a      	str	r2, [r3, #8]
 800495e:	e00b      	b.n	8004978 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004964:	f043 0210 	orr.w	r2, r3, #16
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004970:	f043 0201 	orr.w	r2, r3, #1
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3718      	adds	r7, #24
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	2000000c 	.word	0x2000000c
 8004988:	431bde83 	.word	0x431bde83
 800498c:	40012300 	.word	0x40012300
 8004990:	08004e41 	.word	0x08004e41
 8004994:	08004efb 	.word	0x08004efb
 8004998:	08004f17 	.word	0x08004f17
 800499c:	40012000 	.word	0x40012000
 80049a0:	40012100 	.word	0x40012100
 80049a4:	40012200 	.word	0x40012200

080049a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d101      	bne.n	8004a00 <HAL_ADC_ConfigChannel+0x1c>
 80049fc:	2302      	movs	r3, #2
 80049fe:	e113      	b.n	8004c28 <HAL_ADC_ConfigChannel+0x244>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b09      	cmp	r3, #9
 8004a0e:	d925      	bls.n	8004a5c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68d9      	ldr	r1, [r3, #12]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	4613      	mov	r3, r2
 8004a20:	005b      	lsls	r3, r3, #1
 8004a22:	4413      	add	r3, r2
 8004a24:	3b1e      	subs	r3, #30
 8004a26:	2207      	movs	r2, #7
 8004a28:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2c:	43da      	mvns	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	400a      	ands	r2, r1
 8004a34:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68d9      	ldr	r1, [r3, #12]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	4618      	mov	r0, r3
 8004a48:	4603      	mov	r3, r0
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	4403      	add	r3, r0
 8004a4e:	3b1e      	subs	r3, #30
 8004a50:	409a      	lsls	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	60da      	str	r2, [r3, #12]
 8004a5a:	e022      	b.n	8004aa2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6919      	ldr	r1, [r3, #16]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	461a      	mov	r2, r3
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	4413      	add	r3, r2
 8004a70:	2207      	movs	r2, #7
 8004a72:	fa02 f303 	lsl.w	r3, r2, r3
 8004a76:	43da      	mvns	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	400a      	ands	r2, r1
 8004a7e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6919      	ldr	r1, [r3, #16]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	689a      	ldr	r2, [r3, #8]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	4618      	mov	r0, r3
 8004a92:	4603      	mov	r3, r0
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	4403      	add	r3, r0
 8004a98:	409a      	lsls	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b06      	cmp	r3, #6
 8004aa8:	d824      	bhi.n	8004af4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	3b05      	subs	r3, #5
 8004abc:	221f      	movs	r2, #31
 8004abe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac2:	43da      	mvns	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	400a      	ands	r2, r1
 8004aca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	4618      	mov	r0, r3
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	3b05      	subs	r3, #5
 8004ae6:	fa00 f203 	lsl.w	r2, r0, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	635a      	str	r2, [r3, #52]	@ 0x34
 8004af2:	e04c      	b.n	8004b8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	2b0c      	cmp	r3, #12
 8004afa:	d824      	bhi.n	8004b46 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	4613      	mov	r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4413      	add	r3, r2
 8004b0c:	3b23      	subs	r3, #35	@ 0x23
 8004b0e:	221f      	movs	r2, #31
 8004b10:	fa02 f303 	lsl.w	r3, r2, r3
 8004b14:	43da      	mvns	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	400a      	ands	r2, r1
 8004b1c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	4613      	mov	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	3b23      	subs	r3, #35	@ 0x23
 8004b38:	fa00 f203 	lsl.w	r2, r0, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	631a      	str	r2, [r3, #48]	@ 0x30
 8004b44:	e023      	b.n	8004b8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	4613      	mov	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	3b41      	subs	r3, #65	@ 0x41
 8004b58:	221f      	movs	r2, #31
 8004b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5e:	43da      	mvns	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	400a      	ands	r2, r1
 8004b66:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	4618      	mov	r0, r3
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	3b41      	subs	r3, #65	@ 0x41
 8004b82:	fa00 f203 	lsl.w	r2, r0, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b8e:	4b29      	ldr	r3, [pc, #164]	@ (8004c34 <HAL_ADC_ConfigChannel+0x250>)
 8004b90:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a28      	ldr	r2, [pc, #160]	@ (8004c38 <HAL_ADC_ConfigChannel+0x254>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d10f      	bne.n	8004bbc <HAL_ADC_ConfigChannel+0x1d8>
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2b12      	cmp	r3, #18
 8004ba2:	d10b      	bne.n	8004bbc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8004c38 <HAL_ADC_ConfigChannel+0x254>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d12b      	bne.n	8004c1e <HAL_ADC_ConfigChannel+0x23a>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a1c      	ldr	r2, [pc, #112]	@ (8004c3c <HAL_ADC_ConfigChannel+0x258>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d003      	beq.n	8004bd8 <HAL_ADC_ConfigChannel+0x1f4>
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b11      	cmp	r3, #17
 8004bd6:	d122      	bne.n	8004c1e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a11      	ldr	r2, [pc, #68]	@ (8004c3c <HAL_ADC_ConfigChannel+0x258>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d111      	bne.n	8004c1e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004bfa:	4b11      	ldr	r3, [pc, #68]	@ (8004c40 <HAL_ADC_ConfigChannel+0x25c>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a11      	ldr	r2, [pc, #68]	@ (8004c44 <HAL_ADC_ConfigChannel+0x260>)
 8004c00:	fba2 2303 	umull	r2, r3, r2, r3
 8004c04:	0c9a      	lsrs	r2, r3, #18
 8004c06:	4613      	mov	r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	4413      	add	r3, r2
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004c10:	e002      	b.n	8004c18 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	3b01      	subs	r3, #1
 8004c16:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1f9      	bne.n	8004c12 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	40012300 	.word	0x40012300
 8004c38:	40012000 	.word	0x40012000
 8004c3c:	10000012 	.word	0x10000012
 8004c40:	2000000c 	.word	0x2000000c
 8004c44:	431bde83 	.word	0x431bde83

08004c48 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c50:	4b79      	ldr	r3, [pc, #484]	@ (8004e38 <ADC_Init+0x1f0>)
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6859      	ldr	r1, [r3, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	021a      	lsls	r2, r3, #8
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004ca0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6859      	ldr	r1, [r3, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689a      	ldr	r2, [r3, #8]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689a      	ldr	r2, [r3, #8]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6899      	ldr	r1, [r3, #8]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68da      	ldr	r2, [r3, #12]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cda:	4a58      	ldr	r2, [pc, #352]	@ (8004e3c <ADC_Init+0x1f4>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d022      	beq.n	8004d26 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689a      	ldr	r2, [r3, #8]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004cee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6899      	ldr	r1, [r3, #8]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	689a      	ldr	r2, [r3, #8]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004d10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6899      	ldr	r1, [r3, #8]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	609a      	str	r2, [r3, #8]
 8004d24:	e00f      	b.n	8004d46 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004d34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004d44:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	689a      	ldr	r2, [r3, #8]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 0202 	bic.w	r2, r2, #2
 8004d54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	6899      	ldr	r1, [r3, #8]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	7e1b      	ldrb	r3, [r3, #24]
 8004d60:	005a      	lsls	r2, r3, #1
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d01b      	beq.n	8004dac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d82:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004d92:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6859      	ldr	r1, [r3, #4]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	035a      	lsls	r2, r3, #13
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	605a      	str	r2, [r3, #4]
 8004daa:	e007      	b.n	8004dbc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004dba:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004dca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	051a      	lsls	r2, r3, #20
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004df0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6899      	ldr	r1, [r3, #8]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004dfe:	025a      	lsls	r2, r3, #9
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689a      	ldr	r2, [r3, #8]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6899      	ldr	r1, [r3, #8]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	029a      	lsls	r2, r3, #10
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	609a      	str	r2, [r3, #8]
}
 8004e2c:	bf00      	nop
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	40012300 	.word	0x40012300
 8004e3c:	0f000001 	.word	0x0f000001

08004e40 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e4c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e52:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d13c      	bne.n	8004ed4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d12b      	bne.n	8004ecc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d127      	bne.n	8004ecc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e82:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d006      	beq.n	8004e98 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d119      	bne.n	8004ecc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0220 	bic.w	r2, r2, #32
 8004ea6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d105      	bne.n	8004ecc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec4:	f043 0201 	orr.w	r2, r3, #1
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f7fd ffc7 	bl	8002e60 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004ed2:	e00e      	b.n	8004ef2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed8:	f003 0310 	and.w	r3, r3, #16
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d003      	beq.n	8004ee8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f7ff fd75 	bl	80049d0 <HAL_ADC_ErrorCallback>
}
 8004ee6:	e004      	b.n	8004ef2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	4798      	blx	r3
}
 8004ef2:	bf00      	nop
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b084      	sub	sp, #16
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f06:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f7ff fd4d 	bl	80049a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f0e:	bf00      	nop
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b084      	sub	sp, #16
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f22:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2240      	movs	r2, #64	@ 0x40
 8004f28:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f2e:	f043 0204 	orr.w	r2, r3, #4
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f7ff fd4a 	bl	80049d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f3c:	bf00      	nop
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f003 0307 	and.w	r3, r3, #7
 8004f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f68:	4b0c      	ldr	r3, [pc, #48]	@ (8004f9c <__NVIC_SetPriorityGrouping+0x44>)
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004f74:	4013      	ands	r3, r2
 8004f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004f84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f8a:	4a04      	ldr	r2, [pc, #16]	@ (8004f9c <__NVIC_SetPriorityGrouping+0x44>)
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	60d3      	str	r3, [r2, #12]
}
 8004f90:	bf00      	nop
 8004f92:	3714      	adds	r7, #20
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	e000ed00 	.word	0xe000ed00

08004fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fa4:	4b04      	ldr	r3, [pc, #16]	@ (8004fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	0a1b      	lsrs	r3, r3, #8
 8004faa:	f003 0307 	and.w	r3, r3, #7
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	e000ed00 	.word	0xe000ed00

08004fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	db0b      	blt.n	8004fe6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fce:	79fb      	ldrb	r3, [r7, #7]
 8004fd0:	f003 021f 	and.w	r2, r3, #31
 8004fd4:	4907      	ldr	r1, [pc, #28]	@ (8004ff4 <__NVIC_EnableIRQ+0x38>)
 8004fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fda:	095b      	lsrs	r3, r3, #5
 8004fdc:	2001      	movs	r0, #1
 8004fde:	fa00 f202 	lsl.w	r2, r0, r2
 8004fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004fe6:	bf00      	nop
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	e000e100 	.word	0xe000e100

08004ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	4603      	mov	r3, r0
 8005000:	6039      	str	r1, [r7, #0]
 8005002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005008:	2b00      	cmp	r3, #0
 800500a:	db0a      	blt.n	8005022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	b2da      	uxtb	r2, r3
 8005010:	490c      	ldr	r1, [pc, #48]	@ (8005044 <__NVIC_SetPriority+0x4c>)
 8005012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005016:	0112      	lsls	r2, r2, #4
 8005018:	b2d2      	uxtb	r2, r2
 800501a:	440b      	add	r3, r1
 800501c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005020:	e00a      	b.n	8005038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	b2da      	uxtb	r2, r3
 8005026:	4908      	ldr	r1, [pc, #32]	@ (8005048 <__NVIC_SetPriority+0x50>)
 8005028:	79fb      	ldrb	r3, [r7, #7]
 800502a:	f003 030f 	and.w	r3, r3, #15
 800502e:	3b04      	subs	r3, #4
 8005030:	0112      	lsls	r2, r2, #4
 8005032:	b2d2      	uxtb	r2, r2
 8005034:	440b      	add	r3, r1
 8005036:	761a      	strb	r2, [r3, #24]
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	e000e100 	.word	0xe000e100
 8005048:	e000ed00 	.word	0xe000ed00

0800504c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800504c:	b480      	push	{r7}
 800504e:	b089      	sub	sp, #36	@ 0x24
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f003 0307 	and.w	r3, r3, #7
 800505e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	f1c3 0307 	rsb	r3, r3, #7
 8005066:	2b04      	cmp	r3, #4
 8005068:	bf28      	it	cs
 800506a:	2304      	movcs	r3, #4
 800506c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	3304      	adds	r3, #4
 8005072:	2b06      	cmp	r3, #6
 8005074:	d902      	bls.n	800507c <NVIC_EncodePriority+0x30>
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	3b03      	subs	r3, #3
 800507a:	e000      	b.n	800507e <NVIC_EncodePriority+0x32>
 800507c:	2300      	movs	r3, #0
 800507e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005080:	f04f 32ff 	mov.w	r2, #4294967295
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	fa02 f303 	lsl.w	r3, r2, r3
 800508a:	43da      	mvns	r2, r3
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	401a      	ands	r2, r3
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005094:	f04f 31ff 	mov.w	r1, #4294967295
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	fa01 f303 	lsl.w	r3, r1, r3
 800509e:	43d9      	mvns	r1, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050a4:	4313      	orrs	r3, r2
         );
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3724      	adds	r7, #36	@ 0x24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
	...

080050b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3b01      	subs	r3, #1
 80050c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050c4:	d301      	bcc.n	80050ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050c6:	2301      	movs	r3, #1
 80050c8:	e00f      	b.n	80050ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050ca:	4a0a      	ldr	r2, [pc, #40]	@ (80050f4 <SysTick_Config+0x40>)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	3b01      	subs	r3, #1
 80050d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050d2:	210f      	movs	r1, #15
 80050d4:	f04f 30ff 	mov.w	r0, #4294967295
 80050d8:	f7ff ff8e 	bl	8004ff8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050dc:	4b05      	ldr	r3, [pc, #20]	@ (80050f4 <SysTick_Config+0x40>)
 80050de:	2200      	movs	r2, #0
 80050e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050e2:	4b04      	ldr	r3, [pc, #16]	@ (80050f4 <SysTick_Config+0x40>)
 80050e4:	2207      	movs	r2, #7
 80050e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	e000e010 	.word	0xe000e010

080050f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f7ff ff29 	bl	8004f58 <__NVIC_SetPriorityGrouping>
}
 8005106:	bf00      	nop
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800510e:	b580      	push	{r7, lr}
 8005110:	b086      	sub	sp, #24
 8005112:	af00      	add	r7, sp, #0
 8005114:	4603      	mov	r3, r0
 8005116:	60b9      	str	r1, [r7, #8]
 8005118:	607a      	str	r2, [r7, #4]
 800511a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800511c:	2300      	movs	r3, #0
 800511e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005120:	f7ff ff3e 	bl	8004fa0 <__NVIC_GetPriorityGrouping>
 8005124:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	68b9      	ldr	r1, [r7, #8]
 800512a:	6978      	ldr	r0, [r7, #20]
 800512c:	f7ff ff8e 	bl	800504c <NVIC_EncodePriority>
 8005130:	4602      	mov	r2, r0
 8005132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005136:	4611      	mov	r1, r2
 8005138:	4618      	mov	r0, r3
 800513a:	f7ff ff5d 	bl	8004ff8 <__NVIC_SetPriority>
}
 800513e:	bf00      	nop
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b082      	sub	sp, #8
 800514a:	af00      	add	r7, sp, #0
 800514c:	4603      	mov	r3, r0
 800514e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005154:	4618      	mov	r0, r3
 8005156:	f7ff ff31 	bl	8004fbc <__NVIC_EnableIRQ>
}
 800515a:	bf00      	nop
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b082      	sub	sp, #8
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7ff ffa2 	bl	80050b4 <SysTick_Config>
 8005170:	4603      	mov	r3, r0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3708      	adds	r7, #8
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
	...

0800517c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005188:	f7ff f97a 	bl	8004480 <HAL_GetTick>
 800518c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e099      	b.n	80052cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 0201 	bic.w	r2, r2, #1
 80051b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051b8:	e00f      	b.n	80051da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051ba:	f7ff f961 	bl	8004480 <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	2b05      	cmp	r3, #5
 80051c6:	d908      	bls.n	80051da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2220      	movs	r2, #32
 80051cc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2203      	movs	r2, #3
 80051d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e078      	b.n	80052cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1e8      	bne.n	80051ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	4b38      	ldr	r3, [pc, #224]	@ (80052d4 <HAL_DMA_Init+0x158>)
 80051f4:	4013      	ands	r3, r2
 80051f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005206:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005212:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800521e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	4313      	orrs	r3, r2
 800522a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005230:	2b04      	cmp	r3, #4
 8005232:	d107      	bne.n	8005244 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800523c:	4313      	orrs	r3, r2
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	4313      	orrs	r3, r2
 8005242:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f023 0307 	bic.w	r3, r3, #7
 800525a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	4313      	orrs	r3, r2
 8005264:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526a:	2b04      	cmp	r3, #4
 800526c:	d117      	bne.n	800529e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	4313      	orrs	r3, r2
 8005276:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00e      	beq.n	800529e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 fa6f 	bl	8005764 <DMA_CheckFifoParam>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d008      	beq.n	800529e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2240      	movs	r2, #64	@ 0x40
 8005290:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800529a:	2301      	movs	r3, #1
 800529c:	e016      	b.n	80052cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 fa26 	bl	80056f8 <DMA_CalcBaseAndBitshift>
 80052ac:	4603      	mov	r3, r0
 80052ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052b4:	223f      	movs	r2, #63	@ 0x3f
 80052b6:	409a      	lsls	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3718      	adds	r7, #24
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	f010803f 	.word	0xf010803f

080052d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
 80052e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052e6:	2300      	movs	r3, #0
 80052e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d101      	bne.n	80052fe <HAL_DMA_Start_IT+0x26>
 80052fa:	2302      	movs	r3, #2
 80052fc:	e040      	b.n	8005380 <HAL_DMA_Start_IT+0xa8>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b01      	cmp	r3, #1
 8005310:	d12f      	bne.n	8005372 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2202      	movs	r2, #2
 8005316:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	68b9      	ldr	r1, [r7, #8]
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f000 f9b8 	bl	800569c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005330:	223f      	movs	r2, #63	@ 0x3f
 8005332:	409a      	lsls	r2, r3
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f042 0216 	orr.w	r2, r2, #22
 8005346:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534c:	2b00      	cmp	r3, #0
 800534e:	d007      	beq.n	8005360 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0208 	orr.w	r2, r2, #8
 800535e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 0201 	orr.w	r2, r2, #1
 800536e:	601a      	str	r2, [r3, #0]
 8005370:	e005      	b.n	800537e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800537a:	2302      	movs	r3, #2
 800537c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800537e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005380:	4618      	mov	r0, r3
 8005382:	3718      	adds	r7, #24
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005390:	2300      	movs	r3, #0
 8005392:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005394:	4b8e      	ldr	r3, [pc, #568]	@ (80055d0 <HAL_DMA_IRQHandler+0x248>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a8e      	ldr	r2, [pc, #568]	@ (80055d4 <HAL_DMA_IRQHandler+0x24c>)
 800539a:	fba2 2303 	umull	r2, r3, r2, r3
 800539e:	0a9b      	lsrs	r3, r3, #10
 80053a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053b2:	2208      	movs	r2, #8
 80053b4:	409a      	lsls	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	4013      	ands	r3, r2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d01a      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0304 	and.w	r3, r3, #4
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d013      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f022 0204 	bic.w	r2, r2, #4
 80053da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053e0:	2208      	movs	r2, #8
 80053e2:	409a      	lsls	r2, r3
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ec:	f043 0201 	orr.w	r2, r3, #1
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053f8:	2201      	movs	r2, #1
 80053fa:	409a      	lsls	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4013      	ands	r3, r2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d012      	beq.n	800542a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00b      	beq.n	800542a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005416:	2201      	movs	r2, #1
 8005418:	409a      	lsls	r2, r3
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005422:	f043 0202 	orr.w	r2, r3, #2
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800542e:	2204      	movs	r2, #4
 8005430:	409a      	lsls	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	4013      	ands	r3, r2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d012      	beq.n	8005460 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00b      	beq.n	8005460 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800544c:	2204      	movs	r2, #4
 800544e:	409a      	lsls	r2, r3
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005458:	f043 0204 	orr.w	r2, r3, #4
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005464:	2210      	movs	r2, #16
 8005466:	409a      	lsls	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	4013      	ands	r3, r2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d043      	beq.n	80054f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0308 	and.w	r3, r3, #8
 800547a:	2b00      	cmp	r3, #0
 800547c:	d03c      	beq.n	80054f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005482:	2210      	movs	r2, #16
 8005484:	409a      	lsls	r2, r3
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d018      	beq.n	80054ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d108      	bne.n	80054b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d024      	beq.n	80054f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	4798      	blx	r3
 80054b6:	e01f      	b.n	80054f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d01b      	beq.n	80054f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	4798      	blx	r3
 80054c8:	e016      	b.n	80054f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d107      	bne.n	80054e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f022 0208 	bic.w	r2, r2, #8
 80054e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d003      	beq.n	80054f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054fc:	2220      	movs	r2, #32
 80054fe:	409a      	lsls	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4013      	ands	r3, r2
 8005504:	2b00      	cmp	r3, #0
 8005506:	f000 808f 	beq.w	8005628 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0310 	and.w	r3, r3, #16
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 8087 	beq.w	8005628 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800551e:	2220      	movs	r2, #32
 8005520:	409a      	lsls	r2, r3
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b05      	cmp	r3, #5
 8005530:	d136      	bne.n	80055a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 0216 	bic.w	r2, r2, #22
 8005540:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	695a      	ldr	r2, [r3, #20]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005550:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005556:	2b00      	cmp	r3, #0
 8005558:	d103      	bne.n	8005562 <HAL_DMA_IRQHandler+0x1da>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800555e:	2b00      	cmp	r3, #0
 8005560:	d007      	beq.n	8005572 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 0208 	bic.w	r2, r2, #8
 8005570:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005576:	223f      	movs	r2, #63	@ 0x3f
 8005578:	409a      	lsls	r2, r3
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005592:	2b00      	cmp	r3, #0
 8005594:	d07e      	beq.n	8005694 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	4798      	blx	r3
        }
        return;
 800559e:	e079      	b.n	8005694 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d01d      	beq.n	80055ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10d      	bne.n	80055d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d031      	beq.n	8005628 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	4798      	blx	r3
 80055cc:	e02c      	b.n	8005628 <HAL_DMA_IRQHandler+0x2a0>
 80055ce:	bf00      	nop
 80055d0:	2000000c 	.word	0x2000000c
 80055d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d023      	beq.n	8005628 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	4798      	blx	r3
 80055e8:	e01e      	b.n	8005628 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10f      	bne.n	8005618 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0210 	bic.w	r2, r2, #16
 8005606:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800561c:	2b00      	cmp	r3, #0
 800561e:	d003      	beq.n	8005628 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800562c:	2b00      	cmp	r3, #0
 800562e:	d032      	beq.n	8005696 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b00      	cmp	r3, #0
 800563a:	d022      	beq.n	8005682 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2205      	movs	r2, #5
 8005640:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f022 0201 	bic.w	r2, r2, #1
 8005652:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	3301      	adds	r3, #1
 8005658:	60bb      	str	r3, [r7, #8]
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	429a      	cmp	r2, r3
 800565e:	d307      	bcc.n	8005670 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1f2      	bne.n	8005654 <HAL_DMA_IRQHandler+0x2cc>
 800566e:	e000      	b.n	8005672 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005670:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005686:	2b00      	cmp	r3, #0
 8005688:	d005      	beq.n	8005696 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	4798      	blx	r3
 8005692:	e000      	b.n	8005696 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005694:	bf00      	nop
    }
  }
}
 8005696:	3718      	adds	r7, #24
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
 80056a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80056b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	2b40      	cmp	r3, #64	@ 0x40
 80056c8:	d108      	bne.n	80056dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80056da:	e007      	b.n	80056ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	60da      	str	r2, [r3, #12]
}
 80056ec:	bf00      	nop
 80056ee:	3714      	adds	r7, #20
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	b2db      	uxtb	r3, r3
 8005706:	3b10      	subs	r3, #16
 8005708:	4a14      	ldr	r2, [pc, #80]	@ (800575c <DMA_CalcBaseAndBitshift+0x64>)
 800570a:	fba2 2303 	umull	r2, r3, r2, r3
 800570e:	091b      	lsrs	r3, r3, #4
 8005710:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005712:	4a13      	ldr	r2, [pc, #76]	@ (8005760 <DMA_CalcBaseAndBitshift+0x68>)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	4413      	add	r3, r2
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	461a      	mov	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2b03      	cmp	r3, #3
 8005724:	d909      	bls.n	800573a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800572e:	f023 0303 	bic.w	r3, r3, #3
 8005732:	1d1a      	adds	r2, r3, #4
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	659a      	str	r2, [r3, #88]	@ 0x58
 8005738:	e007      	b.n	800574a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005742:	f023 0303 	bic.w	r3, r3, #3
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800574e:	4618      	mov	r0, r3
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	aaaaaaab 	.word	0xaaaaaaab
 8005760:	0800c978 	.word	0x0800c978

08005764 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800576c:	2300      	movs	r3, #0
 800576e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005774:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d11f      	bne.n	80057be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	2b03      	cmp	r3, #3
 8005782:	d856      	bhi.n	8005832 <DMA_CheckFifoParam+0xce>
 8005784:	a201      	add	r2, pc, #4	@ (adr r2, 800578c <DMA_CheckFifoParam+0x28>)
 8005786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578a:	bf00      	nop
 800578c:	0800579d 	.word	0x0800579d
 8005790:	080057af 	.word	0x080057af
 8005794:	0800579d 	.word	0x0800579d
 8005798:	08005833 	.word	0x08005833
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d046      	beq.n	8005836 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057ac:	e043      	b.n	8005836 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80057b6:	d140      	bne.n	800583a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057bc:	e03d      	b.n	800583a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057c6:	d121      	bne.n	800580c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	2b03      	cmp	r3, #3
 80057cc:	d837      	bhi.n	800583e <DMA_CheckFifoParam+0xda>
 80057ce:	a201      	add	r2, pc, #4	@ (adr r2, 80057d4 <DMA_CheckFifoParam+0x70>)
 80057d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d4:	080057e5 	.word	0x080057e5
 80057d8:	080057eb 	.word	0x080057eb
 80057dc:	080057e5 	.word	0x080057e5
 80057e0:	080057fd 	.word	0x080057fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	73fb      	strb	r3, [r7, #15]
      break;
 80057e8:	e030      	b.n	800584c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d025      	beq.n	8005842 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057fa:	e022      	b.n	8005842 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005800:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005804:	d11f      	bne.n	8005846 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800580a:	e01c      	b.n	8005846 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2b02      	cmp	r3, #2
 8005810:	d903      	bls.n	800581a <DMA_CheckFifoParam+0xb6>
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2b03      	cmp	r3, #3
 8005816:	d003      	beq.n	8005820 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005818:	e018      	b.n	800584c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	73fb      	strb	r3, [r7, #15]
      break;
 800581e:	e015      	b.n	800584c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005824:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00e      	beq.n	800584a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	73fb      	strb	r3, [r7, #15]
      break;
 8005830:	e00b      	b.n	800584a <DMA_CheckFifoParam+0xe6>
      break;
 8005832:	bf00      	nop
 8005834:	e00a      	b.n	800584c <DMA_CheckFifoParam+0xe8>
      break;
 8005836:	bf00      	nop
 8005838:	e008      	b.n	800584c <DMA_CheckFifoParam+0xe8>
      break;
 800583a:	bf00      	nop
 800583c:	e006      	b.n	800584c <DMA_CheckFifoParam+0xe8>
      break;
 800583e:	bf00      	nop
 8005840:	e004      	b.n	800584c <DMA_CheckFifoParam+0xe8>
      break;
 8005842:	bf00      	nop
 8005844:	e002      	b.n	800584c <DMA_CheckFifoParam+0xe8>
      break;   
 8005846:	bf00      	nop
 8005848:	e000      	b.n	800584c <DMA_CheckFifoParam+0xe8>
      break;
 800584a:	bf00      	nop
    }
  } 
  
  return status; 
 800584c:	7bfb      	ldrb	r3, [r7, #15]
}
 800584e:	4618      	mov	r0, r3
 8005850:	3714      	adds	r7, #20
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop

0800585c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800585c:	b480      	push	{r7}
 800585e:	b089      	sub	sp, #36	@ 0x24
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005866:	2300      	movs	r3, #0
 8005868:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800586a:	2300      	movs	r3, #0
 800586c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800586e:	2300      	movs	r3, #0
 8005870:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005872:	2300      	movs	r3, #0
 8005874:	61fb      	str	r3, [r7, #28]
 8005876:	e165      	b.n	8005b44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005878:	2201      	movs	r2, #1
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	fa02 f303 	lsl.w	r3, r2, r3
 8005880:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	4013      	ands	r3, r2
 800588a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	429a      	cmp	r2, r3
 8005892:	f040 8154 	bne.w	8005b3e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f003 0303 	and.w	r3, r3, #3
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d005      	beq.n	80058ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d130      	bne.n	8005910 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	005b      	lsls	r3, r3, #1
 80058b8:	2203      	movs	r2, #3
 80058ba:	fa02 f303 	lsl.w	r3, r2, r3
 80058be:	43db      	mvns	r3, r3
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	4013      	ands	r3, r2
 80058c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	68da      	ldr	r2, [r3, #12]
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	005b      	lsls	r3, r3, #1
 80058ce:	fa02 f303 	lsl.w	r3, r2, r3
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	69ba      	ldr	r2, [r7, #24]
 80058dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80058e4:	2201      	movs	r2, #1
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	fa02 f303 	lsl.w	r3, r2, r3
 80058ec:	43db      	mvns	r3, r3
 80058ee:	69ba      	ldr	r2, [r7, #24]
 80058f0:	4013      	ands	r3, r2
 80058f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	091b      	lsrs	r3, r3, #4
 80058fa:	f003 0201 	and.w	r2, r3, #1
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	fa02 f303 	lsl.w	r3, r2, r3
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	4313      	orrs	r3, r2
 8005908:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f003 0303 	and.w	r3, r3, #3
 8005918:	2b03      	cmp	r3, #3
 800591a:	d017      	beq.n	800594c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	2203      	movs	r2, #3
 8005928:	fa02 f303 	lsl.w	r3, r2, r3
 800592c:	43db      	mvns	r3, r3
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	4013      	ands	r3, r2
 8005932:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	005b      	lsls	r3, r3, #1
 800593c:	fa02 f303 	lsl.w	r3, r2, r3
 8005940:	69ba      	ldr	r2, [r7, #24]
 8005942:	4313      	orrs	r3, r2
 8005944:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f003 0303 	and.w	r3, r3, #3
 8005954:	2b02      	cmp	r3, #2
 8005956:	d123      	bne.n	80059a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	08da      	lsrs	r2, r3, #3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	3208      	adds	r2, #8
 8005960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005964:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	f003 0307 	and.w	r3, r3, #7
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	220f      	movs	r2, #15
 8005970:	fa02 f303 	lsl.w	r3, r2, r3
 8005974:	43db      	mvns	r3, r3
 8005976:	69ba      	ldr	r2, [r7, #24]
 8005978:	4013      	ands	r3, r2
 800597a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	691a      	ldr	r2, [r3, #16]
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	f003 0307 	and.w	r3, r3, #7
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	fa02 f303 	lsl.w	r3, r2, r3
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	4313      	orrs	r3, r2
 8005990:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	08da      	lsrs	r2, r3, #3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	3208      	adds	r2, #8
 800599a:	69b9      	ldr	r1, [r7, #24]
 800599c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	005b      	lsls	r3, r3, #1
 80059aa:	2203      	movs	r2, #3
 80059ac:	fa02 f303 	lsl.w	r3, r2, r3
 80059b0:	43db      	mvns	r3, r3
 80059b2:	69ba      	ldr	r2, [r7, #24]
 80059b4:	4013      	ands	r3, r2
 80059b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f003 0203 	and.w	r2, r3, #3
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	005b      	lsls	r3, r3, #1
 80059c4:	fa02 f303 	lsl.w	r3, r2, r3
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 80ae 	beq.w	8005b3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059e2:	2300      	movs	r3, #0
 80059e4:	60fb      	str	r3, [r7, #12]
 80059e6:	4b5d      	ldr	r3, [pc, #372]	@ (8005b5c <HAL_GPIO_Init+0x300>)
 80059e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ea:	4a5c      	ldr	r2, [pc, #368]	@ (8005b5c <HAL_GPIO_Init+0x300>)
 80059ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80059f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80059f2:	4b5a      	ldr	r3, [pc, #360]	@ (8005b5c <HAL_GPIO_Init+0x300>)
 80059f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059fa:	60fb      	str	r3, [r7, #12]
 80059fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059fe:	4a58      	ldr	r2, [pc, #352]	@ (8005b60 <HAL_GPIO_Init+0x304>)
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	089b      	lsrs	r3, r3, #2
 8005a04:	3302      	adds	r3, #2
 8005a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	f003 0303 	and.w	r3, r3, #3
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	220f      	movs	r2, #15
 8005a16:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1a:	43db      	mvns	r3, r3
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	4013      	ands	r3, r2
 8005a20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a4f      	ldr	r2, [pc, #316]	@ (8005b64 <HAL_GPIO_Init+0x308>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d025      	beq.n	8005a76 <HAL_GPIO_Init+0x21a>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a4e      	ldr	r2, [pc, #312]	@ (8005b68 <HAL_GPIO_Init+0x30c>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d01f      	beq.n	8005a72 <HAL_GPIO_Init+0x216>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a4d      	ldr	r2, [pc, #308]	@ (8005b6c <HAL_GPIO_Init+0x310>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d019      	beq.n	8005a6e <HAL_GPIO_Init+0x212>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a4c      	ldr	r2, [pc, #304]	@ (8005b70 <HAL_GPIO_Init+0x314>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d013      	beq.n	8005a6a <HAL_GPIO_Init+0x20e>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a4b      	ldr	r2, [pc, #300]	@ (8005b74 <HAL_GPIO_Init+0x318>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d00d      	beq.n	8005a66 <HAL_GPIO_Init+0x20a>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a4a      	ldr	r2, [pc, #296]	@ (8005b78 <HAL_GPIO_Init+0x31c>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d007      	beq.n	8005a62 <HAL_GPIO_Init+0x206>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a49      	ldr	r2, [pc, #292]	@ (8005b7c <HAL_GPIO_Init+0x320>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d101      	bne.n	8005a5e <HAL_GPIO_Init+0x202>
 8005a5a:	2306      	movs	r3, #6
 8005a5c:	e00c      	b.n	8005a78 <HAL_GPIO_Init+0x21c>
 8005a5e:	2307      	movs	r3, #7
 8005a60:	e00a      	b.n	8005a78 <HAL_GPIO_Init+0x21c>
 8005a62:	2305      	movs	r3, #5
 8005a64:	e008      	b.n	8005a78 <HAL_GPIO_Init+0x21c>
 8005a66:	2304      	movs	r3, #4
 8005a68:	e006      	b.n	8005a78 <HAL_GPIO_Init+0x21c>
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e004      	b.n	8005a78 <HAL_GPIO_Init+0x21c>
 8005a6e:	2302      	movs	r3, #2
 8005a70:	e002      	b.n	8005a78 <HAL_GPIO_Init+0x21c>
 8005a72:	2301      	movs	r3, #1
 8005a74:	e000      	b.n	8005a78 <HAL_GPIO_Init+0x21c>
 8005a76:	2300      	movs	r3, #0
 8005a78:	69fa      	ldr	r2, [r7, #28]
 8005a7a:	f002 0203 	and.w	r2, r2, #3
 8005a7e:	0092      	lsls	r2, r2, #2
 8005a80:	4093      	lsls	r3, r2
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a88:	4935      	ldr	r1, [pc, #212]	@ (8005b60 <HAL_GPIO_Init+0x304>)
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	089b      	lsrs	r3, r3, #2
 8005a8e:	3302      	adds	r3, #2
 8005a90:	69ba      	ldr	r2, [r7, #24]
 8005a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a96:	4b3a      	ldr	r3, [pc, #232]	@ (8005b80 <HAL_GPIO_Init+0x324>)
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	43db      	mvns	r3, r3
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005aba:	4a31      	ldr	r2, [pc, #196]	@ (8005b80 <HAL_GPIO_Init+0x324>)
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ac0:	4b2f      	ldr	r3, [pc, #188]	@ (8005b80 <HAL_GPIO_Init+0x324>)
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	43db      	mvns	r3, r3
 8005aca:	69ba      	ldr	r2, [r7, #24]
 8005acc:	4013      	ands	r3, r2
 8005ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d003      	beq.n	8005ae4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ae4:	4a26      	ldr	r2, [pc, #152]	@ (8005b80 <HAL_GPIO_Init+0x324>)
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005aea:	4b25      	ldr	r3, [pc, #148]	@ (8005b80 <HAL_GPIO_Init+0x324>)
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	43db      	mvns	r3, r3
 8005af4:	69ba      	ldr	r2, [r7, #24]
 8005af6:	4013      	ands	r3, r2
 8005af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b0e:	4a1c      	ldr	r2, [pc, #112]	@ (8005b80 <HAL_GPIO_Init+0x324>)
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b14:	4b1a      	ldr	r3, [pc, #104]	@ (8005b80 <HAL_GPIO_Init+0x324>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	43db      	mvns	r3, r3
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	4013      	ands	r3, r2
 8005b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d003      	beq.n	8005b38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b38:	4a11      	ldr	r2, [pc, #68]	@ (8005b80 <HAL_GPIO_Init+0x324>)
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	3301      	adds	r3, #1
 8005b42:	61fb      	str	r3, [r7, #28]
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	2b0f      	cmp	r3, #15
 8005b48:	f67f ae96 	bls.w	8005878 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005b4c:	bf00      	nop
 8005b4e:	bf00      	nop
 8005b50:	3724      	adds	r7, #36	@ 0x24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	40023800 	.word	0x40023800
 8005b60:	40013800 	.word	0x40013800
 8005b64:	40020000 	.word	0x40020000
 8005b68:	40020400 	.word	0x40020400
 8005b6c:	40020800 	.word	0x40020800
 8005b70:	40020c00 	.word	0x40020c00
 8005b74:	40021000 	.word	0x40021000
 8005b78:	40021400 	.word	0x40021400
 8005b7c:	40021800 	.word	0x40021800
 8005b80:	40013c00 	.word	0x40013c00

08005b84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	691a      	ldr	r2, [r3, #16]
 8005b94:	887b      	ldrh	r3, [r7, #2]
 8005b96:	4013      	ands	r3, r2
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d002      	beq.n	8005ba2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	73fb      	strb	r3, [r7, #15]
 8005ba0:	e001      	b.n	8005ba6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3714      	adds	r7, #20
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	807b      	strh	r3, [r7, #2]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005bc4:	787b      	ldrb	r3, [r7, #1]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005bca:	887a      	ldrh	r2, [r7, #2]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005bd0:	e003      	b.n	8005bda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005bd2:	887b      	ldrh	r3, [r7, #2]
 8005bd4:	041a      	lsls	r2, r3, #16
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	619a      	str	r2, [r3, #24]
}
 8005bda:	bf00      	nop
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
	...

08005be8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	4603      	mov	r3, r0
 8005bf0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005bf2:	4b08      	ldr	r3, [pc, #32]	@ (8005c14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005bf4:	695a      	ldr	r2, [r3, #20]
 8005bf6:	88fb      	ldrh	r3, [r7, #6]
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d006      	beq.n	8005c0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005bfe:	4a05      	ldr	r2, [pc, #20]	@ (8005c14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c00:	88fb      	ldrh	r3, [r7, #6]
 8005c02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c04:	88fb      	ldrh	r3, [r7, #6]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fd f904 	bl	8002e14 <HAL_GPIO_EXTI_Callback>
  }
}
 8005c0c:	bf00      	nop
 8005c0e:	3708      	adds	r7, #8
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	40013c00 	.word	0x40013c00

08005c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e0cc      	b.n	8005dc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c2c:	4b68      	ldr	r3, [pc, #416]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 030f 	and.w	r3, r3, #15
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d90c      	bls.n	8005c54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c3a:	4b65      	ldr	r3, [pc, #404]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8005c3c:	683a      	ldr	r2, [r7, #0]
 8005c3e:	b2d2      	uxtb	r2, r2
 8005c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c42:	4b63      	ldr	r3, [pc, #396]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 030f 	and.w	r3, r3, #15
 8005c4a:	683a      	ldr	r2, [r7, #0]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d001      	beq.n	8005c54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e0b8      	b.n	8005dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0302 	and.w	r3, r3, #2
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d020      	beq.n	8005ca2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0304 	and.w	r3, r3, #4
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d005      	beq.n	8005c78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c6c:	4b59      	ldr	r3, [pc, #356]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	4a58      	ldr	r2, [pc, #352]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005c76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0308 	and.w	r3, r3, #8
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d005      	beq.n	8005c90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c84:	4b53      	ldr	r3, [pc, #332]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	4a52      	ldr	r2, [pc, #328]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005c8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c90:	4b50      	ldr	r3, [pc, #320]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	494d      	ldr	r1, [pc, #308]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d044      	beq.n	8005d38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d107      	bne.n	8005cc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cb6:	4b47      	ldr	r3, [pc, #284]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d119      	bne.n	8005cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e07f      	b.n	8005dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d003      	beq.n	8005cd6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cd2:	2b03      	cmp	r3, #3
 8005cd4:	d107      	bne.n	8005ce6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cd6:	4b3f      	ldr	r3, [pc, #252]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d109      	bne.n	8005cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e06f      	b.n	8005dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ce6:	4b3b      	ldr	r3, [pc, #236]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d101      	bne.n	8005cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e067      	b.n	8005dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cf6:	4b37      	ldr	r3, [pc, #220]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f023 0203 	bic.w	r2, r3, #3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	4934      	ldr	r1, [pc, #208]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d04:	4313      	orrs	r3, r2
 8005d06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d08:	f7fe fbba 	bl	8004480 <HAL_GetTick>
 8005d0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d0e:	e00a      	b.n	8005d26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d10:	f7fe fbb6 	bl	8004480 <HAL_GetTick>
 8005d14:	4602      	mov	r2, r0
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d901      	bls.n	8005d26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e04f      	b.n	8005dc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d26:	4b2b      	ldr	r3, [pc, #172]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f003 020c 	and.w	r2, r3, #12
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d1eb      	bne.n	8005d10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d38:	4b25      	ldr	r3, [pc, #148]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 030f 	and.w	r3, r3, #15
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d20c      	bcs.n	8005d60 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d46:	4b22      	ldr	r3, [pc, #136]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d48:	683a      	ldr	r2, [r7, #0]
 8005d4a:	b2d2      	uxtb	r2, r2
 8005d4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d4e:	4b20      	ldr	r3, [pc, #128]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 030f 	and.w	r3, r3, #15
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d001      	beq.n	8005d60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e032      	b.n	8005dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d008      	beq.n	8005d7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d6c:	4b19      	ldr	r3, [pc, #100]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	4916      	ldr	r1, [pc, #88]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0308 	and.w	r3, r3, #8
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d009      	beq.n	8005d9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d8a:	4b12      	ldr	r3, [pc, #72]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	00db      	lsls	r3, r3, #3
 8005d98:	490e      	ldr	r1, [pc, #56]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d9e:	f000 f821 	bl	8005de4 <HAL_RCC_GetSysClockFreq>
 8005da2:	4602      	mov	r2, r0
 8005da4:	4b0b      	ldr	r3, [pc, #44]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	091b      	lsrs	r3, r3, #4
 8005daa:	f003 030f 	and.w	r3, r3, #15
 8005dae:	490a      	ldr	r1, [pc, #40]	@ (8005dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8005db0:	5ccb      	ldrb	r3, [r1, r3]
 8005db2:	fa22 f303 	lsr.w	r3, r2, r3
 8005db6:	4a09      	ldr	r2, [pc, #36]	@ (8005ddc <HAL_RCC_ClockConfig+0x1c4>)
 8005db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005dba:	4b09      	ldr	r3, [pc, #36]	@ (8005de0 <HAL_RCC_ClockConfig+0x1c8>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7fe fb1a 	bl	80043f8 <HAL_InitTick>

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	40023c00 	.word	0x40023c00
 8005dd4:	40023800 	.word	0x40023800
 8005dd8:	0800c968 	.word	0x0800c968
 8005ddc:	2000000c 	.word	0x2000000c
 8005de0:	20000010 	.word	0x20000010

08005de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005de8:	b0ae      	sub	sp, #184	@ 0xb8
 8005dea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8005df2:	2300      	movs	r3, #0
 8005df4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005e04:	2300      	movs	r3, #0
 8005e06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e0a:	4bcb      	ldr	r3, [pc, #812]	@ (8006138 <HAL_RCC_GetSysClockFreq+0x354>)
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f003 030c 	and.w	r3, r3, #12
 8005e12:	2b0c      	cmp	r3, #12
 8005e14:	f200 8206 	bhi.w	8006224 <HAL_RCC_GetSysClockFreq+0x440>
 8005e18:	a201      	add	r2, pc, #4	@ (adr r2, 8005e20 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1e:	bf00      	nop
 8005e20:	08005e55 	.word	0x08005e55
 8005e24:	08006225 	.word	0x08006225
 8005e28:	08006225 	.word	0x08006225
 8005e2c:	08006225 	.word	0x08006225
 8005e30:	08005e5d 	.word	0x08005e5d
 8005e34:	08006225 	.word	0x08006225
 8005e38:	08006225 	.word	0x08006225
 8005e3c:	08006225 	.word	0x08006225
 8005e40:	08005e65 	.word	0x08005e65
 8005e44:	08006225 	.word	0x08006225
 8005e48:	08006225 	.word	0x08006225
 8005e4c:	08006225 	.word	0x08006225
 8005e50:	08006055 	.word	0x08006055
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e54:	4bb9      	ldr	r3, [pc, #740]	@ (800613c <HAL_RCC_GetSysClockFreq+0x358>)
 8005e56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005e5a:	e1e7      	b.n	800622c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e5c:	4bb8      	ldr	r3, [pc, #736]	@ (8006140 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005e5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005e62:	e1e3      	b.n	800622c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e64:	4bb4      	ldr	r3, [pc, #720]	@ (8006138 <HAL_RCC_GetSysClockFreq+0x354>)
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e70:	4bb1      	ldr	r3, [pc, #708]	@ (8006138 <HAL_RCC_GetSysClockFreq+0x354>)
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d071      	beq.n	8005f60 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e7c:	4bae      	ldr	r3, [pc, #696]	@ (8006138 <HAL_RCC_GetSysClockFreq+0x354>)
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	099b      	lsrs	r3, r3, #6
 8005e82:	2200      	movs	r2, #0
 8005e84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e88:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005e8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e94:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e98:	2300      	movs	r3, #0
 8005e9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005e9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005ea2:	4622      	mov	r2, r4
 8005ea4:	462b      	mov	r3, r5
 8005ea6:	f04f 0000 	mov.w	r0, #0
 8005eaa:	f04f 0100 	mov.w	r1, #0
 8005eae:	0159      	lsls	r1, r3, #5
 8005eb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005eb4:	0150      	lsls	r0, r2, #5
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	460b      	mov	r3, r1
 8005eba:	4621      	mov	r1, r4
 8005ebc:	1a51      	subs	r1, r2, r1
 8005ebe:	6439      	str	r1, [r7, #64]	@ 0x40
 8005ec0:	4629      	mov	r1, r5
 8005ec2:	eb63 0301 	sbc.w	r3, r3, r1
 8005ec6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ec8:	f04f 0200 	mov.w	r2, #0
 8005ecc:	f04f 0300 	mov.w	r3, #0
 8005ed0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005ed4:	4649      	mov	r1, r9
 8005ed6:	018b      	lsls	r3, r1, #6
 8005ed8:	4641      	mov	r1, r8
 8005eda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ede:	4641      	mov	r1, r8
 8005ee0:	018a      	lsls	r2, r1, #6
 8005ee2:	4641      	mov	r1, r8
 8005ee4:	1a51      	subs	r1, r2, r1
 8005ee6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005ee8:	4649      	mov	r1, r9
 8005eea:	eb63 0301 	sbc.w	r3, r3, r1
 8005eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ef0:	f04f 0200 	mov.w	r2, #0
 8005ef4:	f04f 0300 	mov.w	r3, #0
 8005ef8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005efc:	4649      	mov	r1, r9
 8005efe:	00cb      	lsls	r3, r1, #3
 8005f00:	4641      	mov	r1, r8
 8005f02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f06:	4641      	mov	r1, r8
 8005f08:	00ca      	lsls	r2, r1, #3
 8005f0a:	4610      	mov	r0, r2
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	4603      	mov	r3, r0
 8005f10:	4622      	mov	r2, r4
 8005f12:	189b      	adds	r3, r3, r2
 8005f14:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f16:	462b      	mov	r3, r5
 8005f18:	460a      	mov	r2, r1
 8005f1a:	eb42 0303 	adc.w	r3, r2, r3
 8005f1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f20:	f04f 0200 	mov.w	r2, #0
 8005f24:	f04f 0300 	mov.w	r3, #0
 8005f28:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005f2c:	4629      	mov	r1, r5
 8005f2e:	024b      	lsls	r3, r1, #9
 8005f30:	4621      	mov	r1, r4
 8005f32:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f36:	4621      	mov	r1, r4
 8005f38:	024a      	lsls	r2, r1, #9
 8005f3a:	4610      	mov	r0, r2
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f42:	2200      	movs	r2, #0
 8005f44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f48:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005f4c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005f50:	f7fa fe9a 	bl	8000c88 <__aeabi_uldivmod>
 8005f54:	4602      	mov	r2, r0
 8005f56:	460b      	mov	r3, r1
 8005f58:	4613      	mov	r3, r2
 8005f5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f5e:	e067      	b.n	8006030 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f60:	4b75      	ldr	r3, [pc, #468]	@ (8006138 <HAL_RCC_GetSysClockFreq+0x354>)
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	099b      	lsrs	r3, r3, #6
 8005f66:	2200      	movs	r2, #0
 8005f68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f6c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005f70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f7e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005f82:	4622      	mov	r2, r4
 8005f84:	462b      	mov	r3, r5
 8005f86:	f04f 0000 	mov.w	r0, #0
 8005f8a:	f04f 0100 	mov.w	r1, #0
 8005f8e:	0159      	lsls	r1, r3, #5
 8005f90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f94:	0150      	lsls	r0, r2, #5
 8005f96:	4602      	mov	r2, r0
 8005f98:	460b      	mov	r3, r1
 8005f9a:	4621      	mov	r1, r4
 8005f9c:	1a51      	subs	r1, r2, r1
 8005f9e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005fa0:	4629      	mov	r1, r5
 8005fa2:	eb63 0301 	sbc.w	r3, r3, r1
 8005fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fa8:	f04f 0200 	mov.w	r2, #0
 8005fac:	f04f 0300 	mov.w	r3, #0
 8005fb0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005fb4:	4649      	mov	r1, r9
 8005fb6:	018b      	lsls	r3, r1, #6
 8005fb8:	4641      	mov	r1, r8
 8005fba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005fbe:	4641      	mov	r1, r8
 8005fc0:	018a      	lsls	r2, r1, #6
 8005fc2:	4641      	mov	r1, r8
 8005fc4:	ebb2 0a01 	subs.w	sl, r2, r1
 8005fc8:	4649      	mov	r1, r9
 8005fca:	eb63 0b01 	sbc.w	fp, r3, r1
 8005fce:	f04f 0200 	mov.w	r2, #0
 8005fd2:	f04f 0300 	mov.w	r3, #0
 8005fd6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005fda:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005fde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fe2:	4692      	mov	sl, r2
 8005fe4:	469b      	mov	fp, r3
 8005fe6:	4623      	mov	r3, r4
 8005fe8:	eb1a 0303 	adds.w	r3, sl, r3
 8005fec:	623b      	str	r3, [r7, #32]
 8005fee:	462b      	mov	r3, r5
 8005ff0:	eb4b 0303 	adc.w	r3, fp, r3
 8005ff4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ff6:	f04f 0200 	mov.w	r2, #0
 8005ffa:	f04f 0300 	mov.w	r3, #0
 8005ffe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006002:	4629      	mov	r1, r5
 8006004:	028b      	lsls	r3, r1, #10
 8006006:	4621      	mov	r1, r4
 8006008:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800600c:	4621      	mov	r1, r4
 800600e:	028a      	lsls	r2, r1, #10
 8006010:	4610      	mov	r0, r2
 8006012:	4619      	mov	r1, r3
 8006014:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006018:	2200      	movs	r2, #0
 800601a:	673b      	str	r3, [r7, #112]	@ 0x70
 800601c:	677a      	str	r2, [r7, #116]	@ 0x74
 800601e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006022:	f7fa fe31 	bl	8000c88 <__aeabi_uldivmod>
 8006026:	4602      	mov	r2, r0
 8006028:	460b      	mov	r3, r1
 800602a:	4613      	mov	r3, r2
 800602c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006030:	4b41      	ldr	r3, [pc, #260]	@ (8006138 <HAL_RCC_GetSysClockFreq+0x354>)
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	0c1b      	lsrs	r3, r3, #16
 8006036:	f003 0303 	and.w	r3, r3, #3
 800603a:	3301      	adds	r3, #1
 800603c:	005b      	lsls	r3, r3, #1
 800603e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8006042:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006046:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800604a:	fbb2 f3f3 	udiv	r3, r2, r3
 800604e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006052:	e0eb      	b.n	800622c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006054:	4b38      	ldr	r3, [pc, #224]	@ (8006138 <HAL_RCC_GetSysClockFreq+0x354>)
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800605c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006060:	4b35      	ldr	r3, [pc, #212]	@ (8006138 <HAL_RCC_GetSysClockFreq+0x354>)
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d06b      	beq.n	8006144 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800606c:	4b32      	ldr	r3, [pc, #200]	@ (8006138 <HAL_RCC_GetSysClockFreq+0x354>)
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	099b      	lsrs	r3, r3, #6
 8006072:	2200      	movs	r2, #0
 8006074:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006076:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006078:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800607a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800607e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006080:	2300      	movs	r3, #0
 8006082:	667b      	str	r3, [r7, #100]	@ 0x64
 8006084:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006088:	4622      	mov	r2, r4
 800608a:	462b      	mov	r3, r5
 800608c:	f04f 0000 	mov.w	r0, #0
 8006090:	f04f 0100 	mov.w	r1, #0
 8006094:	0159      	lsls	r1, r3, #5
 8006096:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800609a:	0150      	lsls	r0, r2, #5
 800609c:	4602      	mov	r2, r0
 800609e:	460b      	mov	r3, r1
 80060a0:	4621      	mov	r1, r4
 80060a2:	1a51      	subs	r1, r2, r1
 80060a4:	61b9      	str	r1, [r7, #24]
 80060a6:	4629      	mov	r1, r5
 80060a8:	eb63 0301 	sbc.w	r3, r3, r1
 80060ac:	61fb      	str	r3, [r7, #28]
 80060ae:	f04f 0200 	mov.w	r2, #0
 80060b2:	f04f 0300 	mov.w	r3, #0
 80060b6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80060ba:	4659      	mov	r1, fp
 80060bc:	018b      	lsls	r3, r1, #6
 80060be:	4651      	mov	r1, sl
 80060c0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80060c4:	4651      	mov	r1, sl
 80060c6:	018a      	lsls	r2, r1, #6
 80060c8:	4651      	mov	r1, sl
 80060ca:	ebb2 0801 	subs.w	r8, r2, r1
 80060ce:	4659      	mov	r1, fp
 80060d0:	eb63 0901 	sbc.w	r9, r3, r1
 80060d4:	f04f 0200 	mov.w	r2, #0
 80060d8:	f04f 0300 	mov.w	r3, #0
 80060dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060e8:	4690      	mov	r8, r2
 80060ea:	4699      	mov	r9, r3
 80060ec:	4623      	mov	r3, r4
 80060ee:	eb18 0303 	adds.w	r3, r8, r3
 80060f2:	613b      	str	r3, [r7, #16]
 80060f4:	462b      	mov	r3, r5
 80060f6:	eb49 0303 	adc.w	r3, r9, r3
 80060fa:	617b      	str	r3, [r7, #20]
 80060fc:	f04f 0200 	mov.w	r2, #0
 8006100:	f04f 0300 	mov.w	r3, #0
 8006104:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006108:	4629      	mov	r1, r5
 800610a:	024b      	lsls	r3, r1, #9
 800610c:	4621      	mov	r1, r4
 800610e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006112:	4621      	mov	r1, r4
 8006114:	024a      	lsls	r2, r1, #9
 8006116:	4610      	mov	r0, r2
 8006118:	4619      	mov	r1, r3
 800611a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800611e:	2200      	movs	r2, #0
 8006120:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006122:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006124:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006128:	f7fa fdae 	bl	8000c88 <__aeabi_uldivmod>
 800612c:	4602      	mov	r2, r0
 800612e:	460b      	mov	r3, r1
 8006130:	4613      	mov	r3, r2
 8006132:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006136:	e065      	b.n	8006204 <HAL_RCC_GetSysClockFreq+0x420>
 8006138:	40023800 	.word	0x40023800
 800613c:	00f42400 	.word	0x00f42400
 8006140:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006144:	4b3d      	ldr	r3, [pc, #244]	@ (800623c <HAL_RCC_GetSysClockFreq+0x458>)
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	099b      	lsrs	r3, r3, #6
 800614a:	2200      	movs	r2, #0
 800614c:	4618      	mov	r0, r3
 800614e:	4611      	mov	r1, r2
 8006150:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006154:	653b      	str	r3, [r7, #80]	@ 0x50
 8006156:	2300      	movs	r3, #0
 8006158:	657b      	str	r3, [r7, #84]	@ 0x54
 800615a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800615e:	4642      	mov	r2, r8
 8006160:	464b      	mov	r3, r9
 8006162:	f04f 0000 	mov.w	r0, #0
 8006166:	f04f 0100 	mov.w	r1, #0
 800616a:	0159      	lsls	r1, r3, #5
 800616c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006170:	0150      	lsls	r0, r2, #5
 8006172:	4602      	mov	r2, r0
 8006174:	460b      	mov	r3, r1
 8006176:	4641      	mov	r1, r8
 8006178:	1a51      	subs	r1, r2, r1
 800617a:	60b9      	str	r1, [r7, #8]
 800617c:	4649      	mov	r1, r9
 800617e:	eb63 0301 	sbc.w	r3, r3, r1
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	f04f 0200 	mov.w	r2, #0
 8006188:	f04f 0300 	mov.w	r3, #0
 800618c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006190:	4659      	mov	r1, fp
 8006192:	018b      	lsls	r3, r1, #6
 8006194:	4651      	mov	r1, sl
 8006196:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800619a:	4651      	mov	r1, sl
 800619c:	018a      	lsls	r2, r1, #6
 800619e:	4651      	mov	r1, sl
 80061a0:	1a54      	subs	r4, r2, r1
 80061a2:	4659      	mov	r1, fp
 80061a4:	eb63 0501 	sbc.w	r5, r3, r1
 80061a8:	f04f 0200 	mov.w	r2, #0
 80061ac:	f04f 0300 	mov.w	r3, #0
 80061b0:	00eb      	lsls	r3, r5, #3
 80061b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061b6:	00e2      	lsls	r2, r4, #3
 80061b8:	4614      	mov	r4, r2
 80061ba:	461d      	mov	r5, r3
 80061bc:	4643      	mov	r3, r8
 80061be:	18e3      	adds	r3, r4, r3
 80061c0:	603b      	str	r3, [r7, #0]
 80061c2:	464b      	mov	r3, r9
 80061c4:	eb45 0303 	adc.w	r3, r5, r3
 80061c8:	607b      	str	r3, [r7, #4]
 80061ca:	f04f 0200 	mov.w	r2, #0
 80061ce:	f04f 0300 	mov.w	r3, #0
 80061d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80061d6:	4629      	mov	r1, r5
 80061d8:	028b      	lsls	r3, r1, #10
 80061da:	4621      	mov	r1, r4
 80061dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80061e0:	4621      	mov	r1, r4
 80061e2:	028a      	lsls	r2, r1, #10
 80061e4:	4610      	mov	r0, r2
 80061e6:	4619      	mov	r1, r3
 80061e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061ec:	2200      	movs	r2, #0
 80061ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061f0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80061f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80061f6:	f7fa fd47 	bl	8000c88 <__aeabi_uldivmod>
 80061fa:	4602      	mov	r2, r0
 80061fc:	460b      	mov	r3, r1
 80061fe:	4613      	mov	r3, r2
 8006200:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006204:	4b0d      	ldr	r3, [pc, #52]	@ (800623c <HAL_RCC_GetSysClockFreq+0x458>)
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	0f1b      	lsrs	r3, r3, #28
 800620a:	f003 0307 	and.w	r3, r3, #7
 800620e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8006212:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006216:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800621a:	fbb2 f3f3 	udiv	r3, r2, r3
 800621e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006222:	e003      	b.n	800622c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006224:	4b06      	ldr	r3, [pc, #24]	@ (8006240 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006226:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800622a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800622c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8006230:	4618      	mov	r0, r3
 8006232:	37b8      	adds	r7, #184	@ 0xb8
 8006234:	46bd      	mov	sp, r7
 8006236:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800623a:	bf00      	nop
 800623c:	40023800 	.word	0x40023800
 8006240:	00f42400 	.word	0x00f42400

08006244 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b086      	sub	sp, #24
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e28d      	b.n	8006772 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b00      	cmp	r3, #0
 8006260:	f000 8083 	beq.w	800636a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006264:	4b94      	ldr	r3, [pc, #592]	@ (80064b8 <HAL_RCC_OscConfig+0x274>)
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f003 030c 	and.w	r3, r3, #12
 800626c:	2b04      	cmp	r3, #4
 800626e:	d019      	beq.n	80062a4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006270:	4b91      	ldr	r3, [pc, #580]	@ (80064b8 <HAL_RCC_OscConfig+0x274>)
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f003 030c 	and.w	r3, r3, #12
        || \
 8006278:	2b08      	cmp	r3, #8
 800627a:	d106      	bne.n	800628a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800627c:	4b8e      	ldr	r3, [pc, #568]	@ (80064b8 <HAL_RCC_OscConfig+0x274>)
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006284:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006288:	d00c      	beq.n	80062a4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800628a:	4b8b      	ldr	r3, [pc, #556]	@ (80064b8 <HAL_RCC_OscConfig+0x274>)
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006292:	2b0c      	cmp	r3, #12
 8006294:	d112      	bne.n	80062bc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006296:	4b88      	ldr	r3, [pc, #544]	@ (80064b8 <HAL_RCC_OscConfig+0x274>)
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800629e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062a2:	d10b      	bne.n	80062bc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062a4:	4b84      	ldr	r3, [pc, #528]	@ (80064b8 <HAL_RCC_OscConfig+0x274>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d05b      	beq.n	8006368 <HAL_RCC_OscConfig+0x124>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d157      	bne.n	8006368 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e25a      	b.n	8006772 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062c4:	d106      	bne.n	80062d4 <HAL_RCC_OscConfig+0x90>
 80062c6:	4b7c      	ldr	r3, [pc, #496]	@ (80064b8 <HAL_RCC_OscConfig+0x274>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a7b      	ldr	r2, [pc, #492]	@ (80064b8 <HAL_RCC_OscConfig+0x274>)
 80062cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062d0:	6013      	str	r3, [r2, #0]
 80062d2:	e01d      	b.n	8006310 <HAL_RCC_OscConfig+0xcc>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80062dc:	d10c      	bne.n	80062f8 <HAL_RCC_OscConfig+0xb4>
 80062de:	4b76      	ldr	r3, [pc, #472]	@ (80064b8 <HAL_RCC_OscConfig+0x274>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a75      	ldr	r2, [pc, #468]	@ (80064b8 <HAL_RCC_OscConfig+0x274>)
 80062e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80062e8:	6013      	str	r3, [r2, #0]
 80062ea:	4b73      	ldr	r3, [pc, #460]	@ (80064b8 <HAL_RCC_OscConfig+0x274>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a72      	ldr	r2, [pc, #456]	@ (80064b8 <HAL_RCC_OscConfig+0x274>)
 80062f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062f4:	6013      	str	r3, [r2, #0]
 80062f6:	e00b      	b.n	8006310 <HAL_RCC_OscConfig+0xcc>
 80062f8:	4b6f      	ldr	r3, [pc, #444]	@ (80064b8 <HAL_RCC_OscConfig+0x274>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a6e      	ldr	r2, [pc, #440]	@ (80064b8 <HAL_RCC_OscConfig+0x274>)
 80062fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006302:	6013      	str	r3, [r2, #0]
 8006304:	4b6c      	ldr	r3, [pc, #432]	@ (80064b8 <HAL_RCC_OscConfig+0x274>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a6b      	ldr	r2, [pc, #428]	@ (80064b8 <HAL_RCC_OscConfig+0x274>)
 800630a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800630e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d013      	beq.n	8006340 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006318:	f7fe f8b2 	bl	8004480 <HAL_GetTick>
 800631c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800631e:	e008      	b.n	8006332 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006320:	f7fe f8ae 	bl	8004480 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	2b64      	cmp	r3, #100	@ 0x64
 800632c:	d901      	bls.n	8006332 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e21f      	b.n	8006772 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006332:	4b61      	ldr	r3, [pc, #388]	@ (80064b8 <HAL_RCC_OscConfig+0x274>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d0f0      	beq.n	8006320 <HAL_RCC_OscConfig+0xdc>
 800633e:	e014      	b.n	800636a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006340:	f7fe f89e 	bl	8004480 <HAL_GetTick>
 8006344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006346:	e008      	b.n	800635a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006348:	f7fe f89a 	bl	8004480 <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	2b64      	cmp	r3, #100	@ 0x64
 8006354:	d901      	bls.n	800635a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e20b      	b.n	8006772 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800635a:	4b57      	ldr	r3, [pc, #348]	@ (80064b8 <HAL_RCC_OscConfig+0x274>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1f0      	bne.n	8006348 <HAL_RCC_OscConfig+0x104>
 8006366:	e000      	b.n	800636a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0302 	and.w	r3, r3, #2
 8006372:	2b00      	cmp	r3, #0
 8006374:	d06f      	beq.n	8006456 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006376:	4b50      	ldr	r3, [pc, #320]	@ (80064b8 <HAL_RCC_OscConfig+0x274>)
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f003 030c 	and.w	r3, r3, #12
 800637e:	2b00      	cmp	r3, #0
 8006380:	d017      	beq.n	80063b2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006382:	4b4d      	ldr	r3, [pc, #308]	@ (80064b8 <HAL_RCC_OscConfig+0x274>)
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f003 030c 	and.w	r3, r3, #12
        || \
 800638a:	2b08      	cmp	r3, #8
 800638c:	d105      	bne.n	800639a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800638e:	4b4a      	ldr	r3, [pc, #296]	@ (80064b8 <HAL_RCC_OscConfig+0x274>)
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00b      	beq.n	80063b2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800639a:	4b47      	ldr	r3, [pc, #284]	@ (80064b8 <HAL_RCC_OscConfig+0x274>)
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80063a2:	2b0c      	cmp	r3, #12
 80063a4:	d11c      	bne.n	80063e0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063a6:	4b44      	ldr	r3, [pc, #272]	@ (80064b8 <HAL_RCC_OscConfig+0x274>)
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d116      	bne.n	80063e0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063b2:	4b41      	ldr	r3, [pc, #260]	@ (80064b8 <HAL_RCC_OscConfig+0x274>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0302 	and.w	r3, r3, #2
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d005      	beq.n	80063ca <HAL_RCC_OscConfig+0x186>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d001      	beq.n	80063ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e1d3      	b.n	8006772 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063ca:	4b3b      	ldr	r3, [pc, #236]	@ (80064b8 <HAL_RCC_OscConfig+0x274>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	00db      	lsls	r3, r3, #3
 80063d8:	4937      	ldr	r1, [pc, #220]	@ (80064b8 <HAL_RCC_OscConfig+0x274>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063de:	e03a      	b.n	8006456 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d020      	beq.n	800642a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063e8:	4b34      	ldr	r3, [pc, #208]	@ (80064bc <HAL_RCC_OscConfig+0x278>)
 80063ea:	2201      	movs	r2, #1
 80063ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ee:	f7fe f847 	bl	8004480 <HAL_GetTick>
 80063f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063f4:	e008      	b.n	8006408 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063f6:	f7fe f843 	bl	8004480 <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	2b02      	cmp	r3, #2
 8006402:	d901      	bls.n	8006408 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e1b4      	b.n	8006772 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006408:	4b2b      	ldr	r3, [pc, #172]	@ (80064b8 <HAL_RCC_OscConfig+0x274>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0302 	and.w	r3, r3, #2
 8006410:	2b00      	cmp	r3, #0
 8006412:	d0f0      	beq.n	80063f6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006414:	4b28      	ldr	r3, [pc, #160]	@ (80064b8 <HAL_RCC_OscConfig+0x274>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	00db      	lsls	r3, r3, #3
 8006422:	4925      	ldr	r1, [pc, #148]	@ (80064b8 <HAL_RCC_OscConfig+0x274>)
 8006424:	4313      	orrs	r3, r2
 8006426:	600b      	str	r3, [r1, #0]
 8006428:	e015      	b.n	8006456 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800642a:	4b24      	ldr	r3, [pc, #144]	@ (80064bc <HAL_RCC_OscConfig+0x278>)
 800642c:	2200      	movs	r2, #0
 800642e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006430:	f7fe f826 	bl	8004480 <HAL_GetTick>
 8006434:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006436:	e008      	b.n	800644a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006438:	f7fe f822 	bl	8004480 <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	2b02      	cmp	r3, #2
 8006444:	d901      	bls.n	800644a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e193      	b.n	8006772 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800644a:	4b1b      	ldr	r3, [pc, #108]	@ (80064b8 <HAL_RCC_OscConfig+0x274>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0302 	and.w	r3, r3, #2
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1f0      	bne.n	8006438 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0308 	and.w	r3, r3, #8
 800645e:	2b00      	cmp	r3, #0
 8006460:	d036      	beq.n	80064d0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d016      	beq.n	8006498 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800646a:	4b15      	ldr	r3, [pc, #84]	@ (80064c0 <HAL_RCC_OscConfig+0x27c>)
 800646c:	2201      	movs	r2, #1
 800646e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006470:	f7fe f806 	bl	8004480 <HAL_GetTick>
 8006474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006476:	e008      	b.n	800648a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006478:	f7fe f802 	bl	8004480 <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	2b02      	cmp	r3, #2
 8006484:	d901      	bls.n	800648a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e173      	b.n	8006772 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800648a:	4b0b      	ldr	r3, [pc, #44]	@ (80064b8 <HAL_RCC_OscConfig+0x274>)
 800648c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800648e:	f003 0302 	and.w	r3, r3, #2
 8006492:	2b00      	cmp	r3, #0
 8006494:	d0f0      	beq.n	8006478 <HAL_RCC_OscConfig+0x234>
 8006496:	e01b      	b.n	80064d0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006498:	4b09      	ldr	r3, [pc, #36]	@ (80064c0 <HAL_RCC_OscConfig+0x27c>)
 800649a:	2200      	movs	r2, #0
 800649c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800649e:	f7fd ffef 	bl	8004480 <HAL_GetTick>
 80064a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064a4:	e00e      	b.n	80064c4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064a6:	f7fd ffeb 	bl	8004480 <HAL_GetTick>
 80064aa:	4602      	mov	r2, r0
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d907      	bls.n	80064c4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e15c      	b.n	8006772 <HAL_RCC_OscConfig+0x52e>
 80064b8:	40023800 	.word	0x40023800
 80064bc:	42470000 	.word	0x42470000
 80064c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064c4:	4b8a      	ldr	r3, [pc, #552]	@ (80066f0 <HAL_RCC_OscConfig+0x4ac>)
 80064c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064c8:	f003 0302 	and.w	r3, r3, #2
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1ea      	bne.n	80064a6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0304 	and.w	r3, r3, #4
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 8097 	beq.w	800660c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064de:	2300      	movs	r3, #0
 80064e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064e2:	4b83      	ldr	r3, [pc, #524]	@ (80066f0 <HAL_RCC_OscConfig+0x4ac>)
 80064e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10f      	bne.n	800650e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064ee:	2300      	movs	r3, #0
 80064f0:	60bb      	str	r3, [r7, #8]
 80064f2:	4b7f      	ldr	r3, [pc, #508]	@ (80066f0 <HAL_RCC_OscConfig+0x4ac>)
 80064f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f6:	4a7e      	ldr	r2, [pc, #504]	@ (80066f0 <HAL_RCC_OscConfig+0x4ac>)
 80064f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80064fe:	4b7c      	ldr	r3, [pc, #496]	@ (80066f0 <HAL_RCC_OscConfig+0x4ac>)
 8006500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006506:	60bb      	str	r3, [r7, #8]
 8006508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800650a:	2301      	movs	r3, #1
 800650c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800650e:	4b79      	ldr	r3, [pc, #484]	@ (80066f4 <HAL_RCC_OscConfig+0x4b0>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006516:	2b00      	cmp	r3, #0
 8006518:	d118      	bne.n	800654c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800651a:	4b76      	ldr	r3, [pc, #472]	@ (80066f4 <HAL_RCC_OscConfig+0x4b0>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a75      	ldr	r2, [pc, #468]	@ (80066f4 <HAL_RCC_OscConfig+0x4b0>)
 8006520:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006526:	f7fd ffab 	bl	8004480 <HAL_GetTick>
 800652a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800652c:	e008      	b.n	8006540 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800652e:	f7fd ffa7 	bl	8004480 <HAL_GetTick>
 8006532:	4602      	mov	r2, r0
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	2b02      	cmp	r3, #2
 800653a:	d901      	bls.n	8006540 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e118      	b.n	8006772 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006540:	4b6c      	ldr	r3, [pc, #432]	@ (80066f4 <HAL_RCC_OscConfig+0x4b0>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006548:	2b00      	cmp	r3, #0
 800654a:	d0f0      	beq.n	800652e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d106      	bne.n	8006562 <HAL_RCC_OscConfig+0x31e>
 8006554:	4b66      	ldr	r3, [pc, #408]	@ (80066f0 <HAL_RCC_OscConfig+0x4ac>)
 8006556:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006558:	4a65      	ldr	r2, [pc, #404]	@ (80066f0 <HAL_RCC_OscConfig+0x4ac>)
 800655a:	f043 0301 	orr.w	r3, r3, #1
 800655e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006560:	e01c      	b.n	800659c <HAL_RCC_OscConfig+0x358>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	2b05      	cmp	r3, #5
 8006568:	d10c      	bne.n	8006584 <HAL_RCC_OscConfig+0x340>
 800656a:	4b61      	ldr	r3, [pc, #388]	@ (80066f0 <HAL_RCC_OscConfig+0x4ac>)
 800656c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800656e:	4a60      	ldr	r2, [pc, #384]	@ (80066f0 <HAL_RCC_OscConfig+0x4ac>)
 8006570:	f043 0304 	orr.w	r3, r3, #4
 8006574:	6713      	str	r3, [r2, #112]	@ 0x70
 8006576:	4b5e      	ldr	r3, [pc, #376]	@ (80066f0 <HAL_RCC_OscConfig+0x4ac>)
 8006578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800657a:	4a5d      	ldr	r2, [pc, #372]	@ (80066f0 <HAL_RCC_OscConfig+0x4ac>)
 800657c:	f043 0301 	orr.w	r3, r3, #1
 8006580:	6713      	str	r3, [r2, #112]	@ 0x70
 8006582:	e00b      	b.n	800659c <HAL_RCC_OscConfig+0x358>
 8006584:	4b5a      	ldr	r3, [pc, #360]	@ (80066f0 <HAL_RCC_OscConfig+0x4ac>)
 8006586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006588:	4a59      	ldr	r2, [pc, #356]	@ (80066f0 <HAL_RCC_OscConfig+0x4ac>)
 800658a:	f023 0301 	bic.w	r3, r3, #1
 800658e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006590:	4b57      	ldr	r3, [pc, #348]	@ (80066f0 <HAL_RCC_OscConfig+0x4ac>)
 8006592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006594:	4a56      	ldr	r2, [pc, #344]	@ (80066f0 <HAL_RCC_OscConfig+0x4ac>)
 8006596:	f023 0304 	bic.w	r3, r3, #4
 800659a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d015      	beq.n	80065d0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065a4:	f7fd ff6c 	bl	8004480 <HAL_GetTick>
 80065a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065aa:	e00a      	b.n	80065c2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065ac:	f7fd ff68 	bl	8004480 <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d901      	bls.n	80065c2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e0d7      	b.n	8006772 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065c2:	4b4b      	ldr	r3, [pc, #300]	@ (80066f0 <HAL_RCC_OscConfig+0x4ac>)
 80065c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065c6:	f003 0302 	and.w	r3, r3, #2
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d0ee      	beq.n	80065ac <HAL_RCC_OscConfig+0x368>
 80065ce:	e014      	b.n	80065fa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065d0:	f7fd ff56 	bl	8004480 <HAL_GetTick>
 80065d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065d6:	e00a      	b.n	80065ee <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065d8:	f7fd ff52 	bl	8004480 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d901      	bls.n	80065ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e0c1      	b.n	8006772 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065ee:	4b40      	ldr	r3, [pc, #256]	@ (80066f0 <HAL_RCC_OscConfig+0x4ac>)
 80065f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065f2:	f003 0302 	and.w	r3, r3, #2
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1ee      	bne.n	80065d8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80065fa:	7dfb      	ldrb	r3, [r7, #23]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d105      	bne.n	800660c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006600:	4b3b      	ldr	r3, [pc, #236]	@ (80066f0 <HAL_RCC_OscConfig+0x4ac>)
 8006602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006604:	4a3a      	ldr	r2, [pc, #232]	@ (80066f0 <HAL_RCC_OscConfig+0x4ac>)
 8006606:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800660a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 80ad 	beq.w	8006770 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006616:	4b36      	ldr	r3, [pc, #216]	@ (80066f0 <HAL_RCC_OscConfig+0x4ac>)
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f003 030c 	and.w	r3, r3, #12
 800661e:	2b08      	cmp	r3, #8
 8006620:	d060      	beq.n	80066e4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	2b02      	cmp	r3, #2
 8006628:	d145      	bne.n	80066b6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800662a:	4b33      	ldr	r3, [pc, #204]	@ (80066f8 <HAL_RCC_OscConfig+0x4b4>)
 800662c:	2200      	movs	r2, #0
 800662e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006630:	f7fd ff26 	bl	8004480 <HAL_GetTick>
 8006634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006636:	e008      	b.n	800664a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006638:	f7fd ff22 	bl	8004480 <HAL_GetTick>
 800663c:	4602      	mov	r2, r0
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	2b02      	cmp	r3, #2
 8006644:	d901      	bls.n	800664a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e093      	b.n	8006772 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800664a:	4b29      	ldr	r3, [pc, #164]	@ (80066f0 <HAL_RCC_OscConfig+0x4ac>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1f0      	bne.n	8006638 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	69da      	ldr	r2, [r3, #28]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	431a      	orrs	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006664:	019b      	lsls	r3, r3, #6
 8006666:	431a      	orrs	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800666c:	085b      	lsrs	r3, r3, #1
 800666e:	3b01      	subs	r3, #1
 8006670:	041b      	lsls	r3, r3, #16
 8006672:	431a      	orrs	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006678:	061b      	lsls	r3, r3, #24
 800667a:	431a      	orrs	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006680:	071b      	lsls	r3, r3, #28
 8006682:	491b      	ldr	r1, [pc, #108]	@ (80066f0 <HAL_RCC_OscConfig+0x4ac>)
 8006684:	4313      	orrs	r3, r2
 8006686:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006688:	4b1b      	ldr	r3, [pc, #108]	@ (80066f8 <HAL_RCC_OscConfig+0x4b4>)
 800668a:	2201      	movs	r2, #1
 800668c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800668e:	f7fd fef7 	bl	8004480 <HAL_GetTick>
 8006692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006694:	e008      	b.n	80066a8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006696:	f7fd fef3 	bl	8004480 <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d901      	bls.n	80066a8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e064      	b.n	8006772 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066a8:	4b11      	ldr	r3, [pc, #68]	@ (80066f0 <HAL_RCC_OscConfig+0x4ac>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d0f0      	beq.n	8006696 <HAL_RCC_OscConfig+0x452>
 80066b4:	e05c      	b.n	8006770 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066b6:	4b10      	ldr	r3, [pc, #64]	@ (80066f8 <HAL_RCC_OscConfig+0x4b4>)
 80066b8:	2200      	movs	r2, #0
 80066ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066bc:	f7fd fee0 	bl	8004480 <HAL_GetTick>
 80066c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066c2:	e008      	b.n	80066d6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066c4:	f7fd fedc 	bl	8004480 <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d901      	bls.n	80066d6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e04d      	b.n	8006772 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066d6:	4b06      	ldr	r3, [pc, #24]	@ (80066f0 <HAL_RCC_OscConfig+0x4ac>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1f0      	bne.n	80066c4 <HAL_RCC_OscConfig+0x480>
 80066e2:	e045      	b.n	8006770 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d107      	bne.n	80066fc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e040      	b.n	8006772 <HAL_RCC_OscConfig+0x52e>
 80066f0:	40023800 	.word	0x40023800
 80066f4:	40007000 	.word	0x40007000
 80066f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80066fc:	4b1f      	ldr	r3, [pc, #124]	@ (800677c <HAL_RCC_OscConfig+0x538>)
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d030      	beq.n	800676c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006714:	429a      	cmp	r2, r3
 8006716:	d129      	bne.n	800676c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006722:	429a      	cmp	r2, r3
 8006724:	d122      	bne.n	800676c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800672c:	4013      	ands	r3, r2
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006732:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006734:	4293      	cmp	r3, r2
 8006736:	d119      	bne.n	800676c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006742:	085b      	lsrs	r3, r3, #1
 8006744:	3b01      	subs	r3, #1
 8006746:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006748:	429a      	cmp	r2, r3
 800674a:	d10f      	bne.n	800676c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006756:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006758:	429a      	cmp	r2, r3
 800675a:	d107      	bne.n	800676c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006766:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006768:	429a      	cmp	r2, r3
 800676a:	d001      	beq.n	8006770 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e000      	b.n	8006772 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3718      	adds	r7, #24
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	40023800 	.word	0x40023800

08006780 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e07b      	b.n	800688a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006796:	2b00      	cmp	r3, #0
 8006798:	d108      	bne.n	80067ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067a2:	d009      	beq.n	80067b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	61da      	str	r2, [r3, #28]
 80067aa:	e005      	b.n	80067b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d106      	bne.n	80067d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7fd fbaa 	bl	8003f2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2202      	movs	r2, #2
 80067dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006800:	431a      	orrs	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800680a:	431a      	orrs	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	f003 0302 	and.w	r3, r3, #2
 8006814:	431a      	orrs	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	431a      	orrs	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006828:	431a      	orrs	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	69db      	ldr	r3, [r3, #28]
 800682e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006832:	431a      	orrs	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a1b      	ldr	r3, [r3, #32]
 8006838:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800683c:	ea42 0103 	orr.w	r1, r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006844:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	430a      	orrs	r2, r1
 800684e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	0c1b      	lsrs	r3, r3, #16
 8006856:	f003 0104 	and.w	r1, r3, #4
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800685e:	f003 0210 	and.w	r2, r3, #16
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	430a      	orrs	r2, r1
 8006868:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	69da      	ldr	r2, [r3, #28]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006878:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3708      	adds	r7, #8
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b088      	sub	sp, #32
 8006896:	af00      	add	r7, sp, #0
 8006898:	60f8      	str	r0, [r7, #12]
 800689a:	60b9      	str	r1, [r7, #8]
 800689c:	603b      	str	r3, [r7, #0]
 800689e:	4613      	mov	r3, r2
 80068a0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068a2:	f7fd fded 	bl	8004480 <HAL_GetTick>
 80068a6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80068a8:	88fb      	ldrh	r3, [r7, #6]
 80068aa:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d001      	beq.n	80068bc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80068b8:	2302      	movs	r3, #2
 80068ba:	e12a      	b.n	8006b12 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d002      	beq.n	80068c8 <HAL_SPI_Transmit+0x36>
 80068c2:	88fb      	ldrh	r3, [r7, #6]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d101      	bne.n	80068cc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e122      	b.n	8006b12 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d101      	bne.n	80068da <HAL_SPI_Transmit+0x48>
 80068d6:	2302      	movs	r3, #2
 80068d8:	e11b      	b.n	8006b12 <HAL_SPI_Transmit+0x280>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2203      	movs	r2, #3
 80068e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	88fa      	ldrh	r2, [r7, #6]
 80068fa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	88fa      	ldrh	r2, [r7, #6]
 8006900:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006928:	d10f      	bne.n	800694a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006938:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006948:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006954:	2b40      	cmp	r3, #64	@ 0x40
 8006956:	d007      	beq.n	8006968 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006966:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006970:	d152      	bne.n	8006a18 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d002      	beq.n	8006980 <HAL_SPI_Transmit+0xee>
 800697a:	8b7b      	ldrh	r3, [r7, #26]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d145      	bne.n	8006a0c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006984:	881a      	ldrh	r2, [r3, #0]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006990:	1c9a      	adds	r2, r3, #2
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800699a:	b29b      	uxth	r3, r3
 800699c:	3b01      	subs	r3, #1
 800699e:	b29a      	uxth	r2, r3
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80069a4:	e032      	b.n	8006a0c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	f003 0302 	and.w	r3, r3, #2
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	d112      	bne.n	80069da <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069b8:	881a      	ldrh	r2, [r3, #0]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069c4:	1c9a      	adds	r2, r3, #2
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	3b01      	subs	r3, #1
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80069d8:	e018      	b.n	8006a0c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069da:	f7fd fd51 	bl	8004480 <HAL_GetTick>
 80069de:	4602      	mov	r2, r0
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	683a      	ldr	r2, [r7, #0]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d803      	bhi.n	80069f2 <HAL_SPI_Transmit+0x160>
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f0:	d102      	bne.n	80069f8 <HAL_SPI_Transmit+0x166>
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d109      	bne.n	8006a0c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e082      	b.n	8006b12 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1c7      	bne.n	80069a6 <HAL_SPI_Transmit+0x114>
 8006a16:	e053      	b.n	8006ac0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d002      	beq.n	8006a26 <HAL_SPI_Transmit+0x194>
 8006a20:	8b7b      	ldrh	r3, [r7, #26]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d147      	bne.n	8006ab6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	330c      	adds	r3, #12
 8006a30:	7812      	ldrb	r2, [r2, #0]
 8006a32:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a38:	1c5a      	adds	r2, r3, #1
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	3b01      	subs	r3, #1
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006a4c:	e033      	b.n	8006ab6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	f003 0302 	and.w	r3, r3, #2
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d113      	bne.n	8006a84 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	330c      	adds	r3, #12
 8006a66:	7812      	ldrb	r2, [r2, #0]
 8006a68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a6e:	1c5a      	adds	r2, r3, #1
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006a82:	e018      	b.n	8006ab6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a84:	f7fd fcfc 	bl	8004480 <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	683a      	ldr	r2, [r7, #0]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d803      	bhi.n	8006a9c <HAL_SPI_Transmit+0x20a>
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a9a:	d102      	bne.n	8006aa2 <HAL_SPI_Transmit+0x210>
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d109      	bne.n	8006ab6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e02d      	b.n	8006b12 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1c6      	bne.n	8006a4e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ac0:	69fa      	ldr	r2, [r7, #28]
 8006ac2:	6839      	ldr	r1, [r7, #0]
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f000 f8b1 	bl	8006c2c <SPI_EndRxTxTransaction>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d002      	beq.n	8006ad6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2220      	movs	r2, #32
 8006ad4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d10a      	bne.n	8006af4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ade:	2300      	movs	r3, #0
 8006ae0:	617b      	str	r3, [r7, #20]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	617b      	str	r3, [r7, #20]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	617b      	str	r3, [r7, #20]
 8006af2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d001      	beq.n	8006b10 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e000      	b.n	8006b12 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006b10:	2300      	movs	r3, #0
  }
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3720      	adds	r7, #32
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
	...

08006b1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b088      	sub	sp, #32
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	603b      	str	r3, [r7, #0]
 8006b28:	4613      	mov	r3, r2
 8006b2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b2c:	f7fd fca8 	bl	8004480 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b34:	1a9b      	subs	r3, r3, r2
 8006b36:	683a      	ldr	r2, [r7, #0]
 8006b38:	4413      	add	r3, r2
 8006b3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b3c:	f7fd fca0 	bl	8004480 <HAL_GetTick>
 8006b40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b42:	4b39      	ldr	r3, [pc, #228]	@ (8006c28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	015b      	lsls	r3, r3, #5
 8006b48:	0d1b      	lsrs	r3, r3, #20
 8006b4a:	69fa      	ldr	r2, [r7, #28]
 8006b4c:	fb02 f303 	mul.w	r3, r2, r3
 8006b50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b52:	e054      	b.n	8006bfe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b5a:	d050      	beq.n	8006bfe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b5c:	f7fd fc90 	bl	8004480 <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	69fa      	ldr	r2, [r7, #28]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d902      	bls.n	8006b72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d13d      	bne.n	8006bee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006b80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b8a:	d111      	bne.n	8006bb0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b94:	d004      	beq.n	8006ba0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b9e:	d107      	bne.n	8006bb0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bb8:	d10f      	bne.n	8006bda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006bc8:	601a      	str	r2, [r3, #0]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006bd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006bea:	2303      	movs	r3, #3
 8006bec:	e017      	b.n	8006c1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d101      	bne.n	8006bf8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	689a      	ldr	r2, [r3, #8]
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	4013      	ands	r3, r2
 8006c08:	68ba      	ldr	r2, [r7, #8]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	bf0c      	ite	eq
 8006c0e:	2301      	moveq	r3, #1
 8006c10:	2300      	movne	r3, #0
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	461a      	mov	r2, r3
 8006c16:	79fb      	ldrb	r3, [r7, #7]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d19b      	bne.n	8006b54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3720      	adds	r7, #32
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	2000000c 	.word	0x2000000c

08006c2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b088      	sub	sp, #32
 8006c30:	af02      	add	r7, sp, #8
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	9300      	str	r3, [sp, #0]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	2102      	movs	r1, #2
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f7ff ff6a 	bl	8006b1c <SPI_WaitFlagStateUntilTimeout>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d007      	beq.n	8006c5e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c52:	f043 0220 	orr.w	r2, r3, #32
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e032      	b.n	8006cc4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8006ccc <SPI_EndRxTxTransaction+0xa0>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a1b      	ldr	r2, [pc, #108]	@ (8006cd0 <SPI_EndRxTxTransaction+0xa4>)
 8006c64:	fba2 2303 	umull	r2, r3, r2, r3
 8006c68:	0d5b      	lsrs	r3, r3, #21
 8006c6a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006c6e:	fb02 f303 	mul.w	r3, r2, r3
 8006c72:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c7c:	d112      	bne.n	8006ca4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	9300      	str	r3, [sp, #0]
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	2200      	movs	r2, #0
 8006c86:	2180      	movs	r1, #128	@ 0x80
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f7ff ff47 	bl	8006b1c <SPI_WaitFlagStateUntilTimeout>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d016      	beq.n	8006cc2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c98:	f043 0220 	orr.w	r2, r3, #32
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e00f      	b.n	8006cc4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00a      	beq.n	8006cc0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	3b01      	subs	r3, #1
 8006cae:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cba:	2b80      	cmp	r3, #128	@ 0x80
 8006cbc:	d0f2      	beq.n	8006ca4 <SPI_EndRxTxTransaction+0x78>
 8006cbe:	e000      	b.n	8006cc2 <SPI_EndRxTxTransaction+0x96>
        break;
 8006cc0:	bf00      	nop
  }

  return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3718      	adds	r7, #24
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	2000000c 	.word	0x2000000c
 8006cd0:	165e9f81 	.word	0x165e9f81

08006cd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d101      	bne.n	8006ce6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e041      	b.n	8006d6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d106      	bne.n	8006d00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f7fd f9b4 	bl	8004068 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2202      	movs	r2, #2
 8006d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	3304      	adds	r3, #4
 8006d10:	4619      	mov	r1, r3
 8006d12:	4610      	mov	r0, r2
 8006d14:	f000 fa9c 	bl	8007250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
	...

08006d74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d001      	beq.n	8006d8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e046      	b.n	8006e1a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2202      	movs	r2, #2
 8006d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a23      	ldr	r2, [pc, #140]	@ (8006e28 <HAL_TIM_Base_Start+0xb4>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d022      	beq.n	8006de4 <HAL_TIM_Base_Start+0x70>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006da6:	d01d      	beq.n	8006de4 <HAL_TIM_Base_Start+0x70>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a1f      	ldr	r2, [pc, #124]	@ (8006e2c <HAL_TIM_Base_Start+0xb8>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d018      	beq.n	8006de4 <HAL_TIM_Base_Start+0x70>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a1e      	ldr	r2, [pc, #120]	@ (8006e30 <HAL_TIM_Base_Start+0xbc>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d013      	beq.n	8006de4 <HAL_TIM_Base_Start+0x70>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a1c      	ldr	r2, [pc, #112]	@ (8006e34 <HAL_TIM_Base_Start+0xc0>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d00e      	beq.n	8006de4 <HAL_TIM_Base_Start+0x70>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a1b      	ldr	r2, [pc, #108]	@ (8006e38 <HAL_TIM_Base_Start+0xc4>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d009      	beq.n	8006de4 <HAL_TIM_Base_Start+0x70>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a19      	ldr	r2, [pc, #100]	@ (8006e3c <HAL_TIM_Base_Start+0xc8>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d004      	beq.n	8006de4 <HAL_TIM_Base_Start+0x70>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a18      	ldr	r2, [pc, #96]	@ (8006e40 <HAL_TIM_Base_Start+0xcc>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d111      	bne.n	8006e08 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f003 0307 	and.w	r3, r3, #7
 8006dee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2b06      	cmp	r3, #6
 8006df4:	d010      	beq.n	8006e18 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f042 0201 	orr.w	r2, r2, #1
 8006e04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e06:	e007      	b.n	8006e18 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f042 0201 	orr.w	r2, r2, #1
 8006e16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3714      	adds	r7, #20
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	40010000 	.word	0x40010000
 8006e2c:	40000400 	.word	0x40000400
 8006e30:	40000800 	.word	0x40000800
 8006e34:	40000c00 	.word	0x40000c00
 8006e38:	40010400 	.word	0x40010400
 8006e3c:	40014000 	.word	0x40014000
 8006e40:	40001800 	.word	0x40001800

08006e44 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	6a1a      	ldr	r2, [r3, #32]
 8006e52:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006e56:	4013      	ands	r3, r2
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d10f      	bne.n	8006e7c <HAL_TIM_Base_Stop+0x38>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	6a1a      	ldr	r2, [r3, #32]
 8006e62:	f240 4344 	movw	r3, #1092	@ 0x444
 8006e66:	4013      	ands	r3, r2
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d107      	bne.n	8006e7c <HAL_TIM_Base_Stop+0x38>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f022 0201 	bic.w	r2, r2, #1
 8006e7a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	370c      	adds	r7, #12
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr

08006e92 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b084      	sub	sp, #16
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	f003 0302 	and.w	r3, r3, #2
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d020      	beq.n	8006ef6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f003 0302 	and.w	r3, r3, #2
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d01b      	beq.n	8006ef6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f06f 0202 	mvn.w	r2, #2
 8006ec6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	f003 0303 	and.w	r3, r3, #3
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d003      	beq.n	8006ee4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 f999 	bl	8007214 <HAL_TIM_IC_CaptureCallback>
 8006ee2:	e005      	b.n	8006ef0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f98b 	bl	8007200 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f99c 	bl	8007228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	f003 0304 	and.w	r3, r3, #4
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d020      	beq.n	8006f42 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f003 0304 	and.w	r3, r3, #4
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d01b      	beq.n	8006f42 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f06f 0204 	mvn.w	r2, #4
 8006f12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2202      	movs	r2, #2
 8006f18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	699b      	ldr	r3, [r3, #24]
 8006f20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d003      	beq.n	8006f30 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 f973 	bl	8007214 <HAL_TIM_IC_CaptureCallback>
 8006f2e:	e005      	b.n	8006f3c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 f965 	bl	8007200 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 f976 	bl	8007228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	f003 0308 	and.w	r3, r3, #8
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d020      	beq.n	8006f8e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f003 0308 	and.w	r3, r3, #8
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d01b      	beq.n	8006f8e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f06f 0208 	mvn.w	r2, #8
 8006f5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2204      	movs	r2, #4
 8006f64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	69db      	ldr	r3, [r3, #28]
 8006f6c:	f003 0303 	and.w	r3, r3, #3
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d003      	beq.n	8006f7c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 f94d 	bl	8007214 <HAL_TIM_IC_CaptureCallback>
 8006f7a:	e005      	b.n	8006f88 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 f93f 	bl	8007200 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 f950 	bl	8007228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	f003 0310 	and.w	r3, r3, #16
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d020      	beq.n	8006fda <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f003 0310 	and.w	r3, r3, #16
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d01b      	beq.n	8006fda <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f06f 0210 	mvn.w	r2, #16
 8006faa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2208      	movs	r2, #8
 8006fb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	69db      	ldr	r3, [r3, #28]
 8006fb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d003      	beq.n	8006fc8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f927 	bl	8007214 <HAL_TIM_IC_CaptureCallback>
 8006fc6:	e005      	b.n	8006fd4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 f919 	bl	8007200 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 f92a 	bl	8007228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00c      	beq.n	8006ffe <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d007      	beq.n	8006ffe <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f06f 0201 	mvn.w	r2, #1
 8006ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f7fb ff53 	bl	8002ea4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00c      	beq.n	8007022 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800700e:	2b00      	cmp	r3, #0
 8007010:	d007      	beq.n	8007022 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800701a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 fae3 	bl	80075e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00c      	beq.n	8007046 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007032:	2b00      	cmp	r3, #0
 8007034:	d007      	beq.n	8007046 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800703e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 f8fb 	bl	800723c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	f003 0320 	and.w	r3, r3, #32
 800704c:	2b00      	cmp	r3, #0
 800704e:	d00c      	beq.n	800706a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f003 0320 	and.w	r3, r3, #32
 8007056:	2b00      	cmp	r3, #0
 8007058:	d007      	beq.n	800706a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f06f 0220 	mvn.w	r2, #32
 8007062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fab5 	bl	80075d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800706a:	bf00      	nop
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b084      	sub	sp, #16
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800707c:	2300      	movs	r3, #0
 800707e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007086:	2b01      	cmp	r3, #1
 8007088:	d101      	bne.n	800708e <HAL_TIM_ConfigClockSource+0x1c>
 800708a:	2302      	movs	r3, #2
 800708c:	e0b4      	b.n	80071f8 <HAL_TIM_ConfigClockSource+0x186>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2202      	movs	r2, #2
 800709a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80070ac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80070b4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070c6:	d03e      	beq.n	8007146 <HAL_TIM_ConfigClockSource+0xd4>
 80070c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070cc:	f200 8087 	bhi.w	80071de <HAL_TIM_ConfigClockSource+0x16c>
 80070d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070d4:	f000 8086 	beq.w	80071e4 <HAL_TIM_ConfigClockSource+0x172>
 80070d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070dc:	d87f      	bhi.n	80071de <HAL_TIM_ConfigClockSource+0x16c>
 80070de:	2b70      	cmp	r3, #112	@ 0x70
 80070e0:	d01a      	beq.n	8007118 <HAL_TIM_ConfigClockSource+0xa6>
 80070e2:	2b70      	cmp	r3, #112	@ 0x70
 80070e4:	d87b      	bhi.n	80071de <HAL_TIM_ConfigClockSource+0x16c>
 80070e6:	2b60      	cmp	r3, #96	@ 0x60
 80070e8:	d050      	beq.n	800718c <HAL_TIM_ConfigClockSource+0x11a>
 80070ea:	2b60      	cmp	r3, #96	@ 0x60
 80070ec:	d877      	bhi.n	80071de <HAL_TIM_ConfigClockSource+0x16c>
 80070ee:	2b50      	cmp	r3, #80	@ 0x50
 80070f0:	d03c      	beq.n	800716c <HAL_TIM_ConfigClockSource+0xfa>
 80070f2:	2b50      	cmp	r3, #80	@ 0x50
 80070f4:	d873      	bhi.n	80071de <HAL_TIM_ConfigClockSource+0x16c>
 80070f6:	2b40      	cmp	r3, #64	@ 0x40
 80070f8:	d058      	beq.n	80071ac <HAL_TIM_ConfigClockSource+0x13a>
 80070fa:	2b40      	cmp	r3, #64	@ 0x40
 80070fc:	d86f      	bhi.n	80071de <HAL_TIM_ConfigClockSource+0x16c>
 80070fe:	2b30      	cmp	r3, #48	@ 0x30
 8007100:	d064      	beq.n	80071cc <HAL_TIM_ConfigClockSource+0x15a>
 8007102:	2b30      	cmp	r3, #48	@ 0x30
 8007104:	d86b      	bhi.n	80071de <HAL_TIM_ConfigClockSource+0x16c>
 8007106:	2b20      	cmp	r3, #32
 8007108:	d060      	beq.n	80071cc <HAL_TIM_ConfigClockSource+0x15a>
 800710a:	2b20      	cmp	r3, #32
 800710c:	d867      	bhi.n	80071de <HAL_TIM_ConfigClockSource+0x16c>
 800710e:	2b00      	cmp	r3, #0
 8007110:	d05c      	beq.n	80071cc <HAL_TIM_ConfigClockSource+0x15a>
 8007112:	2b10      	cmp	r3, #16
 8007114:	d05a      	beq.n	80071cc <HAL_TIM_ConfigClockSource+0x15a>
 8007116:	e062      	b.n	80071de <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007128:	f000 f9b8 	bl	800749c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800713a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68ba      	ldr	r2, [r7, #8]
 8007142:	609a      	str	r2, [r3, #8]
      break;
 8007144:	e04f      	b.n	80071e6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007156:	f000 f9a1 	bl	800749c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	689a      	ldr	r2, [r3, #8]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007168:	609a      	str	r2, [r3, #8]
      break;
 800716a:	e03c      	b.n	80071e6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007178:	461a      	mov	r2, r3
 800717a:	f000 f915 	bl	80073a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2150      	movs	r1, #80	@ 0x50
 8007184:	4618      	mov	r0, r3
 8007186:	f000 f96e 	bl	8007466 <TIM_ITRx_SetConfig>
      break;
 800718a:	e02c      	b.n	80071e6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007198:	461a      	mov	r2, r3
 800719a:	f000 f934 	bl	8007406 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2160      	movs	r1, #96	@ 0x60
 80071a4:	4618      	mov	r0, r3
 80071a6:	f000 f95e 	bl	8007466 <TIM_ITRx_SetConfig>
      break;
 80071aa:	e01c      	b.n	80071e6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071b8:	461a      	mov	r2, r3
 80071ba:	f000 f8f5 	bl	80073a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2140      	movs	r1, #64	@ 0x40
 80071c4:	4618      	mov	r0, r3
 80071c6:	f000 f94e 	bl	8007466 <TIM_ITRx_SetConfig>
      break;
 80071ca:	e00c      	b.n	80071e6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4619      	mov	r1, r3
 80071d6:	4610      	mov	r0, r2
 80071d8:	f000 f945 	bl	8007466 <TIM_ITRx_SetConfig>
      break;
 80071dc:	e003      	b.n	80071e6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	73fb      	strb	r3, [r7, #15]
      break;
 80071e2:	e000      	b.n	80071e6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80071e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80071f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3710      	adds	r7, #16
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a46      	ldr	r2, [pc, #280]	@ (800737c <TIM_Base_SetConfig+0x12c>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d013      	beq.n	8007290 <TIM_Base_SetConfig+0x40>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800726e:	d00f      	beq.n	8007290 <TIM_Base_SetConfig+0x40>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a43      	ldr	r2, [pc, #268]	@ (8007380 <TIM_Base_SetConfig+0x130>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d00b      	beq.n	8007290 <TIM_Base_SetConfig+0x40>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a42      	ldr	r2, [pc, #264]	@ (8007384 <TIM_Base_SetConfig+0x134>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d007      	beq.n	8007290 <TIM_Base_SetConfig+0x40>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a41      	ldr	r2, [pc, #260]	@ (8007388 <TIM_Base_SetConfig+0x138>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d003      	beq.n	8007290 <TIM_Base_SetConfig+0x40>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a40      	ldr	r2, [pc, #256]	@ (800738c <TIM_Base_SetConfig+0x13c>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d108      	bne.n	80072a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	4313      	orrs	r3, r2
 80072a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a35      	ldr	r2, [pc, #212]	@ (800737c <TIM_Base_SetConfig+0x12c>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d02b      	beq.n	8007302 <TIM_Base_SetConfig+0xb2>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072b0:	d027      	beq.n	8007302 <TIM_Base_SetConfig+0xb2>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a32      	ldr	r2, [pc, #200]	@ (8007380 <TIM_Base_SetConfig+0x130>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d023      	beq.n	8007302 <TIM_Base_SetConfig+0xb2>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a31      	ldr	r2, [pc, #196]	@ (8007384 <TIM_Base_SetConfig+0x134>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d01f      	beq.n	8007302 <TIM_Base_SetConfig+0xb2>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a30      	ldr	r2, [pc, #192]	@ (8007388 <TIM_Base_SetConfig+0x138>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d01b      	beq.n	8007302 <TIM_Base_SetConfig+0xb2>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a2f      	ldr	r2, [pc, #188]	@ (800738c <TIM_Base_SetConfig+0x13c>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d017      	beq.n	8007302 <TIM_Base_SetConfig+0xb2>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a2e      	ldr	r2, [pc, #184]	@ (8007390 <TIM_Base_SetConfig+0x140>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d013      	beq.n	8007302 <TIM_Base_SetConfig+0xb2>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a2d      	ldr	r2, [pc, #180]	@ (8007394 <TIM_Base_SetConfig+0x144>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d00f      	beq.n	8007302 <TIM_Base_SetConfig+0xb2>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a2c      	ldr	r2, [pc, #176]	@ (8007398 <TIM_Base_SetConfig+0x148>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d00b      	beq.n	8007302 <TIM_Base_SetConfig+0xb2>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a2b      	ldr	r2, [pc, #172]	@ (800739c <TIM_Base_SetConfig+0x14c>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d007      	beq.n	8007302 <TIM_Base_SetConfig+0xb2>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a2a      	ldr	r2, [pc, #168]	@ (80073a0 <TIM_Base_SetConfig+0x150>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d003      	beq.n	8007302 <TIM_Base_SetConfig+0xb2>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a29      	ldr	r2, [pc, #164]	@ (80073a4 <TIM_Base_SetConfig+0x154>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d108      	bne.n	8007314 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	4313      	orrs	r3, r2
 8007312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	4313      	orrs	r3, r2
 8007320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	689a      	ldr	r2, [r3, #8]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a10      	ldr	r2, [pc, #64]	@ (800737c <TIM_Base_SetConfig+0x12c>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d003      	beq.n	8007348 <TIM_Base_SetConfig+0xf8>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a12      	ldr	r2, [pc, #72]	@ (800738c <TIM_Base_SetConfig+0x13c>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d103      	bne.n	8007350 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	691a      	ldr	r2, [r3, #16]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	f003 0301 	and.w	r3, r3, #1
 800735e:	2b01      	cmp	r3, #1
 8007360:	d105      	bne.n	800736e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	f023 0201 	bic.w	r2, r3, #1
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	611a      	str	r2, [r3, #16]
  }
}
 800736e:	bf00      	nop
 8007370:	3714      	adds	r7, #20
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	40010000 	.word	0x40010000
 8007380:	40000400 	.word	0x40000400
 8007384:	40000800 	.word	0x40000800
 8007388:	40000c00 	.word	0x40000c00
 800738c:	40010400 	.word	0x40010400
 8007390:	40014000 	.word	0x40014000
 8007394:	40014400 	.word	0x40014400
 8007398:	40014800 	.word	0x40014800
 800739c:	40001800 	.word	0x40001800
 80073a0:	40001c00 	.word	0x40001c00
 80073a4:	40002000 	.word	0x40002000

080073a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b087      	sub	sp, #28
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6a1b      	ldr	r3, [r3, #32]
 80073b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6a1b      	ldr	r3, [r3, #32]
 80073be:	f023 0201 	bic.w	r2, r3, #1
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80073d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	011b      	lsls	r3, r3, #4
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	4313      	orrs	r3, r2
 80073dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f023 030a 	bic.w	r3, r3, #10
 80073e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073e6:	697a      	ldr	r2, [r7, #20]
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	693a      	ldr	r2, [r7, #16]
 80073f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	621a      	str	r2, [r3, #32]
}
 80073fa:	bf00      	nop
 80073fc:	371c      	adds	r7, #28
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr

08007406 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007406:	b480      	push	{r7}
 8007408:	b087      	sub	sp, #28
 800740a:	af00      	add	r7, sp, #0
 800740c:	60f8      	str	r0, [r7, #12]
 800740e:	60b9      	str	r1, [r7, #8]
 8007410:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6a1b      	ldr	r3, [r3, #32]
 8007416:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6a1b      	ldr	r3, [r3, #32]
 800741c:	f023 0210 	bic.w	r2, r3, #16
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007430:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	031b      	lsls	r3, r3, #12
 8007436:	693a      	ldr	r2, [r7, #16]
 8007438:	4313      	orrs	r3, r2
 800743a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007442:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	011b      	lsls	r3, r3, #4
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	4313      	orrs	r3, r2
 800744c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	693a      	ldr	r2, [r7, #16]
 8007452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	621a      	str	r2, [r3, #32]
}
 800745a:	bf00      	nop
 800745c:	371c      	adds	r7, #28
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr

08007466 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007466:	b480      	push	{r7}
 8007468:	b085      	sub	sp, #20
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
 800746e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800747c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800747e:	683a      	ldr	r2, [r7, #0]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	4313      	orrs	r3, r2
 8007484:	f043 0307 	orr.w	r3, r3, #7
 8007488:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	609a      	str	r2, [r3, #8]
}
 8007490:	bf00      	nop
 8007492:	3714      	adds	r7, #20
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800749c:	b480      	push	{r7}
 800749e:	b087      	sub	sp, #28
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]
 80074a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80074b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	021a      	lsls	r2, r3, #8
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	431a      	orrs	r2, r3
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	697a      	ldr	r2, [r7, #20]
 80074ce:	609a      	str	r2, [r3, #8]
}
 80074d0:	bf00      	nop
 80074d2:	371c      	adds	r7, #28
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d101      	bne.n	80074f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074f0:	2302      	movs	r3, #2
 80074f2:	e05a      	b.n	80075aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2202      	movs	r2, #2
 8007500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800751a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	4313      	orrs	r3, r2
 8007524:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a21      	ldr	r2, [pc, #132]	@ (80075b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d022      	beq.n	800757e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007540:	d01d      	beq.n	800757e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a1d      	ldr	r2, [pc, #116]	@ (80075bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d018      	beq.n	800757e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a1b      	ldr	r2, [pc, #108]	@ (80075c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d013      	beq.n	800757e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a1a      	ldr	r2, [pc, #104]	@ (80075c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d00e      	beq.n	800757e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a18      	ldr	r2, [pc, #96]	@ (80075c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d009      	beq.n	800757e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a17      	ldr	r2, [pc, #92]	@ (80075cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d004      	beq.n	800757e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a15      	ldr	r2, [pc, #84]	@ (80075d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d10c      	bne.n	8007598 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007584:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	68ba      	ldr	r2, [r7, #8]
 800758c:	4313      	orrs	r3, r2
 800758e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68ba      	ldr	r2, [r7, #8]
 8007596:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3714      	adds	r7, #20
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	40010000 	.word	0x40010000
 80075bc:	40000400 	.word	0x40000400
 80075c0:	40000800 	.word	0x40000800
 80075c4:	40000c00 	.word	0x40000c00
 80075c8:	40010400 	.word	0x40010400
 80075cc:	40014000 	.word	0x40014000
 80075d0:	40001800 	.word	0x40001800

080075d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075f0:	bf00      	nop
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <atan2>:
 80075fc:	f000 bd50 	b.w	80080a0 <__ieee754_atan2>

08007600 <pow>:
 8007600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007602:	ed2d 8b02 	vpush	{d8}
 8007606:	eeb0 8a40 	vmov.f32	s16, s0
 800760a:	eef0 8a60 	vmov.f32	s17, s1
 800760e:	ec55 4b11 	vmov	r4, r5, d1
 8007612:	f000 fe0d 	bl	8008230 <__ieee754_pow>
 8007616:	4622      	mov	r2, r4
 8007618:	462b      	mov	r3, r5
 800761a:	4620      	mov	r0, r4
 800761c:	4629      	mov	r1, r5
 800761e:	ec57 6b10 	vmov	r6, r7, d0
 8007622:	f7f9 faa3 	bl	8000b6c <__aeabi_dcmpun>
 8007626:	2800      	cmp	r0, #0
 8007628:	d13b      	bne.n	80076a2 <pow+0xa2>
 800762a:	ec51 0b18 	vmov	r0, r1, d8
 800762e:	2200      	movs	r2, #0
 8007630:	2300      	movs	r3, #0
 8007632:	f7f9 fa69 	bl	8000b08 <__aeabi_dcmpeq>
 8007636:	b1b8      	cbz	r0, 8007668 <pow+0x68>
 8007638:	2200      	movs	r2, #0
 800763a:	2300      	movs	r3, #0
 800763c:	4620      	mov	r0, r4
 800763e:	4629      	mov	r1, r5
 8007640:	f7f9 fa62 	bl	8000b08 <__aeabi_dcmpeq>
 8007644:	2800      	cmp	r0, #0
 8007646:	d146      	bne.n	80076d6 <pow+0xd6>
 8007648:	ec45 4b10 	vmov	d0, r4, r5
 800764c:	f000 fabc 	bl	8007bc8 <finite>
 8007650:	b338      	cbz	r0, 80076a2 <pow+0xa2>
 8007652:	2200      	movs	r2, #0
 8007654:	2300      	movs	r3, #0
 8007656:	4620      	mov	r0, r4
 8007658:	4629      	mov	r1, r5
 800765a:	f7f9 fa5f 	bl	8000b1c <__aeabi_dcmplt>
 800765e:	b300      	cbz	r0, 80076a2 <pow+0xa2>
 8007660:	f002 ff9a 	bl	800a598 <__errno>
 8007664:	2322      	movs	r3, #34	@ 0x22
 8007666:	e01b      	b.n	80076a0 <pow+0xa0>
 8007668:	ec47 6b10 	vmov	d0, r6, r7
 800766c:	f000 faac 	bl	8007bc8 <finite>
 8007670:	b9e0      	cbnz	r0, 80076ac <pow+0xac>
 8007672:	eeb0 0a48 	vmov.f32	s0, s16
 8007676:	eef0 0a68 	vmov.f32	s1, s17
 800767a:	f000 faa5 	bl	8007bc8 <finite>
 800767e:	b1a8      	cbz	r0, 80076ac <pow+0xac>
 8007680:	ec45 4b10 	vmov	d0, r4, r5
 8007684:	f000 faa0 	bl	8007bc8 <finite>
 8007688:	b180      	cbz	r0, 80076ac <pow+0xac>
 800768a:	4632      	mov	r2, r6
 800768c:	463b      	mov	r3, r7
 800768e:	4630      	mov	r0, r6
 8007690:	4639      	mov	r1, r7
 8007692:	f7f9 fa6b 	bl	8000b6c <__aeabi_dcmpun>
 8007696:	2800      	cmp	r0, #0
 8007698:	d0e2      	beq.n	8007660 <pow+0x60>
 800769a:	f002 ff7d 	bl	800a598 <__errno>
 800769e:	2321      	movs	r3, #33	@ 0x21
 80076a0:	6003      	str	r3, [r0, #0]
 80076a2:	ecbd 8b02 	vpop	{d8}
 80076a6:	ec47 6b10 	vmov	d0, r6, r7
 80076aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076ac:	2200      	movs	r2, #0
 80076ae:	2300      	movs	r3, #0
 80076b0:	4630      	mov	r0, r6
 80076b2:	4639      	mov	r1, r7
 80076b4:	f7f9 fa28 	bl	8000b08 <__aeabi_dcmpeq>
 80076b8:	2800      	cmp	r0, #0
 80076ba:	d0f2      	beq.n	80076a2 <pow+0xa2>
 80076bc:	eeb0 0a48 	vmov.f32	s0, s16
 80076c0:	eef0 0a68 	vmov.f32	s1, s17
 80076c4:	f000 fa80 	bl	8007bc8 <finite>
 80076c8:	2800      	cmp	r0, #0
 80076ca:	d0ea      	beq.n	80076a2 <pow+0xa2>
 80076cc:	ec45 4b10 	vmov	d0, r4, r5
 80076d0:	f000 fa7a 	bl	8007bc8 <finite>
 80076d4:	e7c3      	b.n	800765e <pow+0x5e>
 80076d6:	4f01      	ldr	r7, [pc, #4]	@ (80076dc <pow+0xdc>)
 80076d8:	2600      	movs	r6, #0
 80076da:	e7e2      	b.n	80076a2 <pow+0xa2>
 80076dc:	3ff00000 	.word	0x3ff00000

080076e0 <sqrt>:
 80076e0:	b538      	push	{r3, r4, r5, lr}
 80076e2:	ed2d 8b02 	vpush	{d8}
 80076e6:	ec55 4b10 	vmov	r4, r5, d0
 80076ea:	f000 fa79 	bl	8007be0 <__ieee754_sqrt>
 80076ee:	4622      	mov	r2, r4
 80076f0:	462b      	mov	r3, r5
 80076f2:	4620      	mov	r0, r4
 80076f4:	4629      	mov	r1, r5
 80076f6:	eeb0 8a40 	vmov.f32	s16, s0
 80076fa:	eef0 8a60 	vmov.f32	s17, s1
 80076fe:	f7f9 fa35 	bl	8000b6c <__aeabi_dcmpun>
 8007702:	b990      	cbnz	r0, 800772a <sqrt+0x4a>
 8007704:	2200      	movs	r2, #0
 8007706:	2300      	movs	r3, #0
 8007708:	4620      	mov	r0, r4
 800770a:	4629      	mov	r1, r5
 800770c:	f7f9 fa06 	bl	8000b1c <__aeabi_dcmplt>
 8007710:	b158      	cbz	r0, 800772a <sqrt+0x4a>
 8007712:	f002 ff41 	bl	800a598 <__errno>
 8007716:	2321      	movs	r3, #33	@ 0x21
 8007718:	6003      	str	r3, [r0, #0]
 800771a:	2200      	movs	r2, #0
 800771c:	2300      	movs	r3, #0
 800771e:	4610      	mov	r0, r2
 8007720:	4619      	mov	r1, r3
 8007722:	f7f9 f8b3 	bl	800088c <__aeabi_ddiv>
 8007726:	ec41 0b18 	vmov	d8, r0, r1
 800772a:	eeb0 0a48 	vmov.f32	s0, s16
 800772e:	eef0 0a68 	vmov.f32	s1, s17
 8007732:	ecbd 8b02 	vpop	{d8}
 8007736:	bd38      	pop	{r3, r4, r5, pc}

08007738 <atan>:
 8007738:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800773c:	ec55 4b10 	vmov	r4, r5, d0
 8007740:	4bbf      	ldr	r3, [pc, #764]	@ (8007a40 <atan+0x308>)
 8007742:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8007746:	429e      	cmp	r6, r3
 8007748:	46ab      	mov	fp, r5
 800774a:	d918      	bls.n	800777e <atan+0x46>
 800774c:	4bbd      	ldr	r3, [pc, #756]	@ (8007a44 <atan+0x30c>)
 800774e:	429e      	cmp	r6, r3
 8007750:	d801      	bhi.n	8007756 <atan+0x1e>
 8007752:	d109      	bne.n	8007768 <atan+0x30>
 8007754:	b144      	cbz	r4, 8007768 <atan+0x30>
 8007756:	4622      	mov	r2, r4
 8007758:	462b      	mov	r3, r5
 800775a:	4620      	mov	r0, r4
 800775c:	4629      	mov	r1, r5
 800775e:	f7f8 fdb5 	bl	80002cc <__adddf3>
 8007762:	4604      	mov	r4, r0
 8007764:	460d      	mov	r5, r1
 8007766:	e006      	b.n	8007776 <atan+0x3e>
 8007768:	f1bb 0f00 	cmp.w	fp, #0
 800776c:	f340 812b 	ble.w	80079c6 <atan+0x28e>
 8007770:	a597      	add	r5, pc, #604	@ (adr r5, 80079d0 <atan+0x298>)
 8007772:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007776:	ec45 4b10 	vmov	d0, r4, r5
 800777a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800777e:	4bb2      	ldr	r3, [pc, #712]	@ (8007a48 <atan+0x310>)
 8007780:	429e      	cmp	r6, r3
 8007782:	d813      	bhi.n	80077ac <atan+0x74>
 8007784:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8007788:	429e      	cmp	r6, r3
 800778a:	d80c      	bhi.n	80077a6 <atan+0x6e>
 800778c:	a392      	add	r3, pc, #584	@ (adr r3, 80079d8 <atan+0x2a0>)
 800778e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007792:	4620      	mov	r0, r4
 8007794:	4629      	mov	r1, r5
 8007796:	f7f8 fd99 	bl	80002cc <__adddf3>
 800779a:	4bac      	ldr	r3, [pc, #688]	@ (8007a4c <atan+0x314>)
 800779c:	2200      	movs	r2, #0
 800779e:	f7f9 f9db 	bl	8000b58 <__aeabi_dcmpgt>
 80077a2:	2800      	cmp	r0, #0
 80077a4:	d1e7      	bne.n	8007776 <atan+0x3e>
 80077a6:	f04f 3aff 	mov.w	sl, #4294967295
 80077aa:	e029      	b.n	8007800 <atan+0xc8>
 80077ac:	f000 f9b0 	bl	8007b10 <fabs>
 80077b0:	4ba7      	ldr	r3, [pc, #668]	@ (8007a50 <atan+0x318>)
 80077b2:	429e      	cmp	r6, r3
 80077b4:	ec55 4b10 	vmov	r4, r5, d0
 80077b8:	f200 80bc 	bhi.w	8007934 <atan+0x1fc>
 80077bc:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80077c0:	429e      	cmp	r6, r3
 80077c2:	f200 809e 	bhi.w	8007902 <atan+0x1ca>
 80077c6:	4622      	mov	r2, r4
 80077c8:	462b      	mov	r3, r5
 80077ca:	4620      	mov	r0, r4
 80077cc:	4629      	mov	r1, r5
 80077ce:	f7f8 fd7d 	bl	80002cc <__adddf3>
 80077d2:	4b9e      	ldr	r3, [pc, #632]	@ (8007a4c <atan+0x314>)
 80077d4:	2200      	movs	r2, #0
 80077d6:	f7f8 fd77 	bl	80002c8 <__aeabi_dsub>
 80077da:	2200      	movs	r2, #0
 80077dc:	4606      	mov	r6, r0
 80077de:	460f      	mov	r7, r1
 80077e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80077e4:	4620      	mov	r0, r4
 80077e6:	4629      	mov	r1, r5
 80077e8:	f7f8 fd70 	bl	80002cc <__adddf3>
 80077ec:	4602      	mov	r2, r0
 80077ee:	460b      	mov	r3, r1
 80077f0:	4630      	mov	r0, r6
 80077f2:	4639      	mov	r1, r7
 80077f4:	f7f9 f84a 	bl	800088c <__aeabi_ddiv>
 80077f8:	f04f 0a00 	mov.w	sl, #0
 80077fc:	4604      	mov	r4, r0
 80077fe:	460d      	mov	r5, r1
 8007800:	4622      	mov	r2, r4
 8007802:	462b      	mov	r3, r5
 8007804:	4620      	mov	r0, r4
 8007806:	4629      	mov	r1, r5
 8007808:	f7f8 ff16 	bl	8000638 <__aeabi_dmul>
 800780c:	4602      	mov	r2, r0
 800780e:	460b      	mov	r3, r1
 8007810:	4680      	mov	r8, r0
 8007812:	4689      	mov	r9, r1
 8007814:	f7f8 ff10 	bl	8000638 <__aeabi_dmul>
 8007818:	a371      	add	r3, pc, #452	@ (adr r3, 80079e0 <atan+0x2a8>)
 800781a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781e:	4606      	mov	r6, r0
 8007820:	460f      	mov	r7, r1
 8007822:	f7f8 ff09 	bl	8000638 <__aeabi_dmul>
 8007826:	a370      	add	r3, pc, #448	@ (adr r3, 80079e8 <atan+0x2b0>)
 8007828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782c:	f7f8 fd4e 	bl	80002cc <__adddf3>
 8007830:	4632      	mov	r2, r6
 8007832:	463b      	mov	r3, r7
 8007834:	f7f8 ff00 	bl	8000638 <__aeabi_dmul>
 8007838:	a36d      	add	r3, pc, #436	@ (adr r3, 80079f0 <atan+0x2b8>)
 800783a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783e:	f7f8 fd45 	bl	80002cc <__adddf3>
 8007842:	4632      	mov	r2, r6
 8007844:	463b      	mov	r3, r7
 8007846:	f7f8 fef7 	bl	8000638 <__aeabi_dmul>
 800784a:	a36b      	add	r3, pc, #428	@ (adr r3, 80079f8 <atan+0x2c0>)
 800784c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007850:	f7f8 fd3c 	bl	80002cc <__adddf3>
 8007854:	4632      	mov	r2, r6
 8007856:	463b      	mov	r3, r7
 8007858:	f7f8 feee 	bl	8000638 <__aeabi_dmul>
 800785c:	a368      	add	r3, pc, #416	@ (adr r3, 8007a00 <atan+0x2c8>)
 800785e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007862:	f7f8 fd33 	bl	80002cc <__adddf3>
 8007866:	4632      	mov	r2, r6
 8007868:	463b      	mov	r3, r7
 800786a:	f7f8 fee5 	bl	8000638 <__aeabi_dmul>
 800786e:	a366      	add	r3, pc, #408	@ (adr r3, 8007a08 <atan+0x2d0>)
 8007870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007874:	f7f8 fd2a 	bl	80002cc <__adddf3>
 8007878:	4642      	mov	r2, r8
 800787a:	464b      	mov	r3, r9
 800787c:	f7f8 fedc 	bl	8000638 <__aeabi_dmul>
 8007880:	a363      	add	r3, pc, #396	@ (adr r3, 8007a10 <atan+0x2d8>)
 8007882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007886:	4680      	mov	r8, r0
 8007888:	4689      	mov	r9, r1
 800788a:	4630      	mov	r0, r6
 800788c:	4639      	mov	r1, r7
 800788e:	f7f8 fed3 	bl	8000638 <__aeabi_dmul>
 8007892:	a361      	add	r3, pc, #388	@ (adr r3, 8007a18 <atan+0x2e0>)
 8007894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007898:	f7f8 fd16 	bl	80002c8 <__aeabi_dsub>
 800789c:	4632      	mov	r2, r6
 800789e:	463b      	mov	r3, r7
 80078a0:	f7f8 feca 	bl	8000638 <__aeabi_dmul>
 80078a4:	a35e      	add	r3, pc, #376	@ (adr r3, 8007a20 <atan+0x2e8>)
 80078a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078aa:	f7f8 fd0d 	bl	80002c8 <__aeabi_dsub>
 80078ae:	4632      	mov	r2, r6
 80078b0:	463b      	mov	r3, r7
 80078b2:	f7f8 fec1 	bl	8000638 <__aeabi_dmul>
 80078b6:	a35c      	add	r3, pc, #368	@ (adr r3, 8007a28 <atan+0x2f0>)
 80078b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078bc:	f7f8 fd04 	bl	80002c8 <__aeabi_dsub>
 80078c0:	4632      	mov	r2, r6
 80078c2:	463b      	mov	r3, r7
 80078c4:	f7f8 feb8 	bl	8000638 <__aeabi_dmul>
 80078c8:	a359      	add	r3, pc, #356	@ (adr r3, 8007a30 <atan+0x2f8>)
 80078ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ce:	f7f8 fcfb 	bl	80002c8 <__aeabi_dsub>
 80078d2:	4632      	mov	r2, r6
 80078d4:	463b      	mov	r3, r7
 80078d6:	f7f8 feaf 	bl	8000638 <__aeabi_dmul>
 80078da:	4602      	mov	r2, r0
 80078dc:	460b      	mov	r3, r1
 80078de:	4640      	mov	r0, r8
 80078e0:	4649      	mov	r1, r9
 80078e2:	f7f8 fcf3 	bl	80002cc <__adddf3>
 80078e6:	4622      	mov	r2, r4
 80078e8:	462b      	mov	r3, r5
 80078ea:	f7f8 fea5 	bl	8000638 <__aeabi_dmul>
 80078ee:	f1ba 3fff 	cmp.w	sl, #4294967295
 80078f2:	4602      	mov	r2, r0
 80078f4:	460b      	mov	r3, r1
 80078f6:	d148      	bne.n	800798a <atan+0x252>
 80078f8:	4620      	mov	r0, r4
 80078fa:	4629      	mov	r1, r5
 80078fc:	f7f8 fce4 	bl	80002c8 <__aeabi_dsub>
 8007900:	e72f      	b.n	8007762 <atan+0x2a>
 8007902:	4b52      	ldr	r3, [pc, #328]	@ (8007a4c <atan+0x314>)
 8007904:	2200      	movs	r2, #0
 8007906:	4620      	mov	r0, r4
 8007908:	4629      	mov	r1, r5
 800790a:	f7f8 fcdd 	bl	80002c8 <__aeabi_dsub>
 800790e:	4b4f      	ldr	r3, [pc, #316]	@ (8007a4c <atan+0x314>)
 8007910:	4606      	mov	r6, r0
 8007912:	460f      	mov	r7, r1
 8007914:	2200      	movs	r2, #0
 8007916:	4620      	mov	r0, r4
 8007918:	4629      	mov	r1, r5
 800791a:	f7f8 fcd7 	bl	80002cc <__adddf3>
 800791e:	4602      	mov	r2, r0
 8007920:	460b      	mov	r3, r1
 8007922:	4630      	mov	r0, r6
 8007924:	4639      	mov	r1, r7
 8007926:	f7f8 ffb1 	bl	800088c <__aeabi_ddiv>
 800792a:	f04f 0a01 	mov.w	sl, #1
 800792e:	4604      	mov	r4, r0
 8007930:	460d      	mov	r5, r1
 8007932:	e765      	b.n	8007800 <atan+0xc8>
 8007934:	4b47      	ldr	r3, [pc, #284]	@ (8007a54 <atan+0x31c>)
 8007936:	429e      	cmp	r6, r3
 8007938:	d21c      	bcs.n	8007974 <atan+0x23c>
 800793a:	4b47      	ldr	r3, [pc, #284]	@ (8007a58 <atan+0x320>)
 800793c:	2200      	movs	r2, #0
 800793e:	4620      	mov	r0, r4
 8007940:	4629      	mov	r1, r5
 8007942:	f7f8 fcc1 	bl	80002c8 <__aeabi_dsub>
 8007946:	4b44      	ldr	r3, [pc, #272]	@ (8007a58 <atan+0x320>)
 8007948:	4606      	mov	r6, r0
 800794a:	460f      	mov	r7, r1
 800794c:	2200      	movs	r2, #0
 800794e:	4620      	mov	r0, r4
 8007950:	4629      	mov	r1, r5
 8007952:	f7f8 fe71 	bl	8000638 <__aeabi_dmul>
 8007956:	4b3d      	ldr	r3, [pc, #244]	@ (8007a4c <atan+0x314>)
 8007958:	2200      	movs	r2, #0
 800795a:	f7f8 fcb7 	bl	80002cc <__adddf3>
 800795e:	4602      	mov	r2, r0
 8007960:	460b      	mov	r3, r1
 8007962:	4630      	mov	r0, r6
 8007964:	4639      	mov	r1, r7
 8007966:	f7f8 ff91 	bl	800088c <__aeabi_ddiv>
 800796a:	f04f 0a02 	mov.w	sl, #2
 800796e:	4604      	mov	r4, r0
 8007970:	460d      	mov	r5, r1
 8007972:	e745      	b.n	8007800 <atan+0xc8>
 8007974:	4622      	mov	r2, r4
 8007976:	462b      	mov	r3, r5
 8007978:	4938      	ldr	r1, [pc, #224]	@ (8007a5c <atan+0x324>)
 800797a:	2000      	movs	r0, #0
 800797c:	f7f8 ff86 	bl	800088c <__aeabi_ddiv>
 8007980:	f04f 0a03 	mov.w	sl, #3
 8007984:	4604      	mov	r4, r0
 8007986:	460d      	mov	r5, r1
 8007988:	e73a      	b.n	8007800 <atan+0xc8>
 800798a:	4b35      	ldr	r3, [pc, #212]	@ (8007a60 <atan+0x328>)
 800798c:	4e35      	ldr	r6, [pc, #212]	@ (8007a64 <atan+0x32c>)
 800798e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007996:	f7f8 fc97 	bl	80002c8 <__aeabi_dsub>
 800799a:	4622      	mov	r2, r4
 800799c:	462b      	mov	r3, r5
 800799e:	f7f8 fc93 	bl	80002c8 <__aeabi_dsub>
 80079a2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80079a6:	4602      	mov	r2, r0
 80079a8:	460b      	mov	r3, r1
 80079aa:	e9d6 0100 	ldrd	r0, r1, [r6]
 80079ae:	f7f8 fc8b 	bl	80002c8 <__aeabi_dsub>
 80079b2:	f1bb 0f00 	cmp.w	fp, #0
 80079b6:	4604      	mov	r4, r0
 80079b8:	460d      	mov	r5, r1
 80079ba:	f6bf aedc 	bge.w	8007776 <atan+0x3e>
 80079be:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80079c2:	461d      	mov	r5, r3
 80079c4:	e6d7      	b.n	8007776 <atan+0x3e>
 80079c6:	a51c      	add	r5, pc, #112	@ (adr r5, 8007a38 <atan+0x300>)
 80079c8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80079cc:	e6d3      	b.n	8007776 <atan+0x3e>
 80079ce:	bf00      	nop
 80079d0:	54442d18 	.word	0x54442d18
 80079d4:	3ff921fb 	.word	0x3ff921fb
 80079d8:	8800759c 	.word	0x8800759c
 80079dc:	7e37e43c 	.word	0x7e37e43c
 80079e0:	e322da11 	.word	0xe322da11
 80079e4:	3f90ad3a 	.word	0x3f90ad3a
 80079e8:	24760deb 	.word	0x24760deb
 80079ec:	3fa97b4b 	.word	0x3fa97b4b
 80079f0:	a0d03d51 	.word	0xa0d03d51
 80079f4:	3fb10d66 	.word	0x3fb10d66
 80079f8:	c54c206e 	.word	0xc54c206e
 80079fc:	3fb745cd 	.word	0x3fb745cd
 8007a00:	920083ff 	.word	0x920083ff
 8007a04:	3fc24924 	.word	0x3fc24924
 8007a08:	5555550d 	.word	0x5555550d
 8007a0c:	3fd55555 	.word	0x3fd55555
 8007a10:	2c6a6c2f 	.word	0x2c6a6c2f
 8007a14:	bfa2b444 	.word	0xbfa2b444
 8007a18:	52defd9a 	.word	0x52defd9a
 8007a1c:	3fadde2d 	.word	0x3fadde2d
 8007a20:	af749a6d 	.word	0xaf749a6d
 8007a24:	3fb3b0f2 	.word	0x3fb3b0f2
 8007a28:	fe231671 	.word	0xfe231671
 8007a2c:	3fbc71c6 	.word	0x3fbc71c6
 8007a30:	9998ebc4 	.word	0x9998ebc4
 8007a34:	3fc99999 	.word	0x3fc99999
 8007a38:	54442d18 	.word	0x54442d18
 8007a3c:	bff921fb 	.word	0xbff921fb
 8007a40:	440fffff 	.word	0x440fffff
 8007a44:	7ff00000 	.word	0x7ff00000
 8007a48:	3fdbffff 	.word	0x3fdbffff
 8007a4c:	3ff00000 	.word	0x3ff00000
 8007a50:	3ff2ffff 	.word	0x3ff2ffff
 8007a54:	40038000 	.word	0x40038000
 8007a58:	3ff80000 	.word	0x3ff80000
 8007a5c:	bff00000 	.word	0xbff00000
 8007a60:	0800c980 	.word	0x0800c980
 8007a64:	0800c9a0 	.word	0x0800c9a0

08007a68 <cos>:
 8007a68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a6a:	ec53 2b10 	vmov	r2, r3, d0
 8007a6e:	4826      	ldr	r0, [pc, #152]	@ (8007b08 <cos+0xa0>)
 8007a70:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007a74:	4281      	cmp	r1, r0
 8007a76:	d806      	bhi.n	8007a86 <cos+0x1e>
 8007a78:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8007b00 <cos+0x98>
 8007a7c:	b005      	add	sp, #20
 8007a7e:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a82:	f000 b989 	b.w	8007d98 <__kernel_cos>
 8007a86:	4821      	ldr	r0, [pc, #132]	@ (8007b0c <cos+0xa4>)
 8007a88:	4281      	cmp	r1, r0
 8007a8a:	d908      	bls.n	8007a9e <cos+0x36>
 8007a8c:	4610      	mov	r0, r2
 8007a8e:	4619      	mov	r1, r3
 8007a90:	f7f8 fc1a 	bl	80002c8 <__aeabi_dsub>
 8007a94:	ec41 0b10 	vmov	d0, r0, r1
 8007a98:	b005      	add	sp, #20
 8007a9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a9e:	4668      	mov	r0, sp
 8007aa0:	f001 f90a 	bl	8008cb8 <__ieee754_rem_pio2>
 8007aa4:	f000 0003 	and.w	r0, r0, #3
 8007aa8:	2801      	cmp	r0, #1
 8007aaa:	d00b      	beq.n	8007ac4 <cos+0x5c>
 8007aac:	2802      	cmp	r0, #2
 8007aae:	d015      	beq.n	8007adc <cos+0x74>
 8007ab0:	b9d8      	cbnz	r0, 8007aea <cos+0x82>
 8007ab2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007ab6:	ed9d 0b00 	vldr	d0, [sp]
 8007aba:	f000 f96d 	bl	8007d98 <__kernel_cos>
 8007abe:	ec51 0b10 	vmov	r0, r1, d0
 8007ac2:	e7e7      	b.n	8007a94 <cos+0x2c>
 8007ac4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007ac8:	ed9d 0b00 	vldr	d0, [sp]
 8007acc:	f000 fa2c 	bl	8007f28 <__kernel_sin>
 8007ad0:	ec53 2b10 	vmov	r2, r3, d0
 8007ad4:	4610      	mov	r0, r2
 8007ad6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007ada:	e7db      	b.n	8007a94 <cos+0x2c>
 8007adc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007ae0:	ed9d 0b00 	vldr	d0, [sp]
 8007ae4:	f000 f958 	bl	8007d98 <__kernel_cos>
 8007ae8:	e7f2      	b.n	8007ad0 <cos+0x68>
 8007aea:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007aee:	ed9d 0b00 	vldr	d0, [sp]
 8007af2:	2001      	movs	r0, #1
 8007af4:	f000 fa18 	bl	8007f28 <__kernel_sin>
 8007af8:	e7e1      	b.n	8007abe <cos+0x56>
 8007afa:	bf00      	nop
 8007afc:	f3af 8000 	nop.w
	...
 8007b08:	3fe921fb 	.word	0x3fe921fb
 8007b0c:	7fefffff 	.word	0x7fefffff

08007b10 <fabs>:
 8007b10:	ec51 0b10 	vmov	r0, r1, d0
 8007b14:	4602      	mov	r2, r0
 8007b16:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007b1a:	ec43 2b10 	vmov	d0, r2, r3
 8007b1e:	4770      	bx	lr

08007b20 <sin>:
 8007b20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b22:	ec53 2b10 	vmov	r2, r3, d0
 8007b26:	4826      	ldr	r0, [pc, #152]	@ (8007bc0 <sin+0xa0>)
 8007b28:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007b2c:	4281      	cmp	r1, r0
 8007b2e:	d807      	bhi.n	8007b40 <sin+0x20>
 8007b30:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8007bb8 <sin+0x98>
 8007b34:	2000      	movs	r0, #0
 8007b36:	b005      	add	sp, #20
 8007b38:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b3c:	f000 b9f4 	b.w	8007f28 <__kernel_sin>
 8007b40:	4820      	ldr	r0, [pc, #128]	@ (8007bc4 <sin+0xa4>)
 8007b42:	4281      	cmp	r1, r0
 8007b44:	d908      	bls.n	8007b58 <sin+0x38>
 8007b46:	4610      	mov	r0, r2
 8007b48:	4619      	mov	r1, r3
 8007b4a:	f7f8 fbbd 	bl	80002c8 <__aeabi_dsub>
 8007b4e:	ec41 0b10 	vmov	d0, r0, r1
 8007b52:	b005      	add	sp, #20
 8007b54:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b58:	4668      	mov	r0, sp
 8007b5a:	f001 f8ad 	bl	8008cb8 <__ieee754_rem_pio2>
 8007b5e:	f000 0003 	and.w	r0, r0, #3
 8007b62:	2801      	cmp	r0, #1
 8007b64:	d00c      	beq.n	8007b80 <sin+0x60>
 8007b66:	2802      	cmp	r0, #2
 8007b68:	d011      	beq.n	8007b8e <sin+0x6e>
 8007b6a:	b9e8      	cbnz	r0, 8007ba8 <sin+0x88>
 8007b6c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007b70:	ed9d 0b00 	vldr	d0, [sp]
 8007b74:	2001      	movs	r0, #1
 8007b76:	f000 f9d7 	bl	8007f28 <__kernel_sin>
 8007b7a:	ec51 0b10 	vmov	r0, r1, d0
 8007b7e:	e7e6      	b.n	8007b4e <sin+0x2e>
 8007b80:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007b84:	ed9d 0b00 	vldr	d0, [sp]
 8007b88:	f000 f906 	bl	8007d98 <__kernel_cos>
 8007b8c:	e7f5      	b.n	8007b7a <sin+0x5a>
 8007b8e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007b92:	ed9d 0b00 	vldr	d0, [sp]
 8007b96:	2001      	movs	r0, #1
 8007b98:	f000 f9c6 	bl	8007f28 <__kernel_sin>
 8007b9c:	ec53 2b10 	vmov	r2, r3, d0
 8007ba0:	4610      	mov	r0, r2
 8007ba2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007ba6:	e7d2      	b.n	8007b4e <sin+0x2e>
 8007ba8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007bac:	ed9d 0b00 	vldr	d0, [sp]
 8007bb0:	f000 f8f2 	bl	8007d98 <__kernel_cos>
 8007bb4:	e7f2      	b.n	8007b9c <sin+0x7c>
 8007bb6:	bf00      	nop
	...
 8007bc0:	3fe921fb 	.word	0x3fe921fb
 8007bc4:	7fefffff 	.word	0x7fefffff

08007bc8 <finite>:
 8007bc8:	b082      	sub	sp, #8
 8007bca:	ed8d 0b00 	vstr	d0, [sp]
 8007bce:	9801      	ldr	r0, [sp, #4]
 8007bd0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8007bd4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8007bd8:	0fc0      	lsrs	r0, r0, #31
 8007bda:	b002      	add	sp, #8
 8007bdc:	4770      	bx	lr
	...

08007be0 <__ieee754_sqrt>:
 8007be0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be4:	4a68      	ldr	r2, [pc, #416]	@ (8007d88 <__ieee754_sqrt+0x1a8>)
 8007be6:	ec55 4b10 	vmov	r4, r5, d0
 8007bea:	43aa      	bics	r2, r5
 8007bec:	462b      	mov	r3, r5
 8007bee:	4621      	mov	r1, r4
 8007bf0:	d110      	bne.n	8007c14 <__ieee754_sqrt+0x34>
 8007bf2:	4622      	mov	r2, r4
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	4629      	mov	r1, r5
 8007bf8:	f7f8 fd1e 	bl	8000638 <__aeabi_dmul>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	460b      	mov	r3, r1
 8007c00:	4620      	mov	r0, r4
 8007c02:	4629      	mov	r1, r5
 8007c04:	f7f8 fb62 	bl	80002cc <__adddf3>
 8007c08:	4604      	mov	r4, r0
 8007c0a:	460d      	mov	r5, r1
 8007c0c:	ec45 4b10 	vmov	d0, r4, r5
 8007c10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c14:	2d00      	cmp	r5, #0
 8007c16:	dc0e      	bgt.n	8007c36 <__ieee754_sqrt+0x56>
 8007c18:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8007c1c:	4322      	orrs	r2, r4
 8007c1e:	d0f5      	beq.n	8007c0c <__ieee754_sqrt+0x2c>
 8007c20:	b19d      	cbz	r5, 8007c4a <__ieee754_sqrt+0x6a>
 8007c22:	4622      	mov	r2, r4
 8007c24:	4620      	mov	r0, r4
 8007c26:	4629      	mov	r1, r5
 8007c28:	f7f8 fb4e 	bl	80002c8 <__aeabi_dsub>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	460b      	mov	r3, r1
 8007c30:	f7f8 fe2c 	bl	800088c <__aeabi_ddiv>
 8007c34:	e7e8      	b.n	8007c08 <__ieee754_sqrt+0x28>
 8007c36:	152a      	asrs	r2, r5, #20
 8007c38:	d115      	bne.n	8007c66 <__ieee754_sqrt+0x86>
 8007c3a:	2000      	movs	r0, #0
 8007c3c:	e009      	b.n	8007c52 <__ieee754_sqrt+0x72>
 8007c3e:	0acb      	lsrs	r3, r1, #11
 8007c40:	3a15      	subs	r2, #21
 8007c42:	0549      	lsls	r1, r1, #21
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d0fa      	beq.n	8007c3e <__ieee754_sqrt+0x5e>
 8007c48:	e7f7      	b.n	8007c3a <__ieee754_sqrt+0x5a>
 8007c4a:	462a      	mov	r2, r5
 8007c4c:	e7fa      	b.n	8007c44 <__ieee754_sqrt+0x64>
 8007c4e:	005b      	lsls	r3, r3, #1
 8007c50:	3001      	adds	r0, #1
 8007c52:	02dc      	lsls	r4, r3, #11
 8007c54:	d5fb      	bpl.n	8007c4e <__ieee754_sqrt+0x6e>
 8007c56:	1e44      	subs	r4, r0, #1
 8007c58:	1b12      	subs	r2, r2, r4
 8007c5a:	f1c0 0420 	rsb	r4, r0, #32
 8007c5e:	fa21 f404 	lsr.w	r4, r1, r4
 8007c62:	4323      	orrs	r3, r4
 8007c64:	4081      	lsls	r1, r0
 8007c66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c6a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8007c6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c72:	07d2      	lsls	r2, r2, #31
 8007c74:	bf5c      	itt	pl
 8007c76:	005b      	lslpl	r3, r3, #1
 8007c78:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8007c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007c80:	bf58      	it	pl
 8007c82:	0049      	lslpl	r1, r1, #1
 8007c84:	2600      	movs	r6, #0
 8007c86:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8007c8a:	106d      	asrs	r5, r5, #1
 8007c8c:	0049      	lsls	r1, r1, #1
 8007c8e:	2016      	movs	r0, #22
 8007c90:	4632      	mov	r2, r6
 8007c92:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8007c96:	1917      	adds	r7, r2, r4
 8007c98:	429f      	cmp	r7, r3
 8007c9a:	bfde      	ittt	le
 8007c9c:	193a      	addle	r2, r7, r4
 8007c9e:	1bdb      	suble	r3, r3, r7
 8007ca0:	1936      	addle	r6, r6, r4
 8007ca2:	0fcf      	lsrs	r7, r1, #31
 8007ca4:	3801      	subs	r0, #1
 8007ca6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8007caa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007cae:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007cb2:	d1f0      	bne.n	8007c96 <__ieee754_sqrt+0xb6>
 8007cb4:	4604      	mov	r4, r0
 8007cb6:	2720      	movs	r7, #32
 8007cb8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	eb00 0e0c 	add.w	lr, r0, ip
 8007cc2:	db02      	blt.n	8007cca <__ieee754_sqrt+0xea>
 8007cc4:	d113      	bne.n	8007cee <__ieee754_sqrt+0x10e>
 8007cc6:	458e      	cmp	lr, r1
 8007cc8:	d811      	bhi.n	8007cee <__ieee754_sqrt+0x10e>
 8007cca:	f1be 0f00 	cmp.w	lr, #0
 8007cce:	eb0e 000c 	add.w	r0, lr, ip
 8007cd2:	da42      	bge.n	8007d5a <__ieee754_sqrt+0x17a>
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	db40      	blt.n	8007d5a <__ieee754_sqrt+0x17a>
 8007cd8:	f102 0801 	add.w	r8, r2, #1
 8007cdc:	1a9b      	subs	r3, r3, r2
 8007cde:	458e      	cmp	lr, r1
 8007ce0:	bf88      	it	hi
 8007ce2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007ce6:	eba1 010e 	sub.w	r1, r1, lr
 8007cea:	4464      	add	r4, ip
 8007cec:	4642      	mov	r2, r8
 8007cee:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8007cf2:	3f01      	subs	r7, #1
 8007cf4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8007cf8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007cfc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007d00:	d1dc      	bne.n	8007cbc <__ieee754_sqrt+0xdc>
 8007d02:	4319      	orrs	r1, r3
 8007d04:	d01b      	beq.n	8007d3e <__ieee754_sqrt+0x15e>
 8007d06:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8007d8c <__ieee754_sqrt+0x1ac>
 8007d0a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8007d90 <__ieee754_sqrt+0x1b0>
 8007d0e:	e9da 0100 	ldrd	r0, r1, [sl]
 8007d12:	e9db 2300 	ldrd	r2, r3, [fp]
 8007d16:	f7f8 fad7 	bl	80002c8 <__aeabi_dsub>
 8007d1a:	e9da 8900 	ldrd	r8, r9, [sl]
 8007d1e:	4602      	mov	r2, r0
 8007d20:	460b      	mov	r3, r1
 8007d22:	4640      	mov	r0, r8
 8007d24:	4649      	mov	r1, r9
 8007d26:	f7f8 ff03 	bl	8000b30 <__aeabi_dcmple>
 8007d2a:	b140      	cbz	r0, 8007d3e <__ieee754_sqrt+0x15e>
 8007d2c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007d30:	e9da 0100 	ldrd	r0, r1, [sl]
 8007d34:	e9db 2300 	ldrd	r2, r3, [fp]
 8007d38:	d111      	bne.n	8007d5e <__ieee754_sqrt+0x17e>
 8007d3a:	3601      	adds	r6, #1
 8007d3c:	463c      	mov	r4, r7
 8007d3e:	1072      	asrs	r2, r6, #1
 8007d40:	0863      	lsrs	r3, r4, #1
 8007d42:	07f1      	lsls	r1, r6, #31
 8007d44:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8007d48:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8007d4c:	bf48      	it	mi
 8007d4e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8007d52:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8007d56:	4618      	mov	r0, r3
 8007d58:	e756      	b.n	8007c08 <__ieee754_sqrt+0x28>
 8007d5a:	4690      	mov	r8, r2
 8007d5c:	e7be      	b.n	8007cdc <__ieee754_sqrt+0xfc>
 8007d5e:	f7f8 fab5 	bl	80002cc <__adddf3>
 8007d62:	e9da 8900 	ldrd	r8, r9, [sl]
 8007d66:	4602      	mov	r2, r0
 8007d68:	460b      	mov	r3, r1
 8007d6a:	4640      	mov	r0, r8
 8007d6c:	4649      	mov	r1, r9
 8007d6e:	f7f8 fed5 	bl	8000b1c <__aeabi_dcmplt>
 8007d72:	b120      	cbz	r0, 8007d7e <__ieee754_sqrt+0x19e>
 8007d74:	1ca0      	adds	r0, r4, #2
 8007d76:	bf08      	it	eq
 8007d78:	3601      	addeq	r6, #1
 8007d7a:	3402      	adds	r4, #2
 8007d7c:	e7df      	b.n	8007d3e <__ieee754_sqrt+0x15e>
 8007d7e:	1c63      	adds	r3, r4, #1
 8007d80:	f023 0401 	bic.w	r4, r3, #1
 8007d84:	e7db      	b.n	8007d3e <__ieee754_sqrt+0x15e>
 8007d86:	bf00      	nop
 8007d88:	7ff00000 	.word	0x7ff00000
 8007d8c:	20000020 	.word	0x20000020
 8007d90:	20000018 	.word	0x20000018
 8007d94:	00000000 	.word	0x00000000

08007d98 <__kernel_cos>:
 8007d98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d9c:	ec57 6b10 	vmov	r6, r7, d0
 8007da0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007da4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8007da8:	ed8d 1b00 	vstr	d1, [sp]
 8007dac:	d206      	bcs.n	8007dbc <__kernel_cos+0x24>
 8007dae:	4630      	mov	r0, r6
 8007db0:	4639      	mov	r1, r7
 8007db2:	f7f8 fef1 	bl	8000b98 <__aeabi_d2iz>
 8007db6:	2800      	cmp	r0, #0
 8007db8:	f000 8088 	beq.w	8007ecc <__kernel_cos+0x134>
 8007dbc:	4632      	mov	r2, r6
 8007dbe:	463b      	mov	r3, r7
 8007dc0:	4630      	mov	r0, r6
 8007dc2:	4639      	mov	r1, r7
 8007dc4:	f7f8 fc38 	bl	8000638 <__aeabi_dmul>
 8007dc8:	4b51      	ldr	r3, [pc, #324]	@ (8007f10 <__kernel_cos+0x178>)
 8007dca:	2200      	movs	r2, #0
 8007dcc:	4604      	mov	r4, r0
 8007dce:	460d      	mov	r5, r1
 8007dd0:	f7f8 fc32 	bl	8000638 <__aeabi_dmul>
 8007dd4:	a340      	add	r3, pc, #256	@ (adr r3, 8007ed8 <__kernel_cos+0x140>)
 8007dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dda:	4682      	mov	sl, r0
 8007ddc:	468b      	mov	fp, r1
 8007dde:	4620      	mov	r0, r4
 8007de0:	4629      	mov	r1, r5
 8007de2:	f7f8 fc29 	bl	8000638 <__aeabi_dmul>
 8007de6:	a33e      	add	r3, pc, #248	@ (adr r3, 8007ee0 <__kernel_cos+0x148>)
 8007de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dec:	f7f8 fa6e 	bl	80002cc <__adddf3>
 8007df0:	4622      	mov	r2, r4
 8007df2:	462b      	mov	r3, r5
 8007df4:	f7f8 fc20 	bl	8000638 <__aeabi_dmul>
 8007df8:	a33b      	add	r3, pc, #236	@ (adr r3, 8007ee8 <__kernel_cos+0x150>)
 8007dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfe:	f7f8 fa63 	bl	80002c8 <__aeabi_dsub>
 8007e02:	4622      	mov	r2, r4
 8007e04:	462b      	mov	r3, r5
 8007e06:	f7f8 fc17 	bl	8000638 <__aeabi_dmul>
 8007e0a:	a339      	add	r3, pc, #228	@ (adr r3, 8007ef0 <__kernel_cos+0x158>)
 8007e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e10:	f7f8 fa5c 	bl	80002cc <__adddf3>
 8007e14:	4622      	mov	r2, r4
 8007e16:	462b      	mov	r3, r5
 8007e18:	f7f8 fc0e 	bl	8000638 <__aeabi_dmul>
 8007e1c:	a336      	add	r3, pc, #216	@ (adr r3, 8007ef8 <__kernel_cos+0x160>)
 8007e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e22:	f7f8 fa51 	bl	80002c8 <__aeabi_dsub>
 8007e26:	4622      	mov	r2, r4
 8007e28:	462b      	mov	r3, r5
 8007e2a:	f7f8 fc05 	bl	8000638 <__aeabi_dmul>
 8007e2e:	a334      	add	r3, pc, #208	@ (adr r3, 8007f00 <__kernel_cos+0x168>)
 8007e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e34:	f7f8 fa4a 	bl	80002cc <__adddf3>
 8007e38:	4622      	mov	r2, r4
 8007e3a:	462b      	mov	r3, r5
 8007e3c:	f7f8 fbfc 	bl	8000638 <__aeabi_dmul>
 8007e40:	4622      	mov	r2, r4
 8007e42:	462b      	mov	r3, r5
 8007e44:	f7f8 fbf8 	bl	8000638 <__aeabi_dmul>
 8007e48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e4c:	4604      	mov	r4, r0
 8007e4e:	460d      	mov	r5, r1
 8007e50:	4630      	mov	r0, r6
 8007e52:	4639      	mov	r1, r7
 8007e54:	f7f8 fbf0 	bl	8000638 <__aeabi_dmul>
 8007e58:	460b      	mov	r3, r1
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	4629      	mov	r1, r5
 8007e5e:	4620      	mov	r0, r4
 8007e60:	f7f8 fa32 	bl	80002c8 <__aeabi_dsub>
 8007e64:	4b2b      	ldr	r3, [pc, #172]	@ (8007f14 <__kernel_cos+0x17c>)
 8007e66:	4598      	cmp	r8, r3
 8007e68:	4606      	mov	r6, r0
 8007e6a:	460f      	mov	r7, r1
 8007e6c:	d810      	bhi.n	8007e90 <__kernel_cos+0xf8>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	460b      	mov	r3, r1
 8007e72:	4650      	mov	r0, sl
 8007e74:	4659      	mov	r1, fp
 8007e76:	f7f8 fa27 	bl	80002c8 <__aeabi_dsub>
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	4926      	ldr	r1, [pc, #152]	@ (8007f18 <__kernel_cos+0x180>)
 8007e7e:	4602      	mov	r2, r0
 8007e80:	2000      	movs	r0, #0
 8007e82:	f7f8 fa21 	bl	80002c8 <__aeabi_dsub>
 8007e86:	ec41 0b10 	vmov	d0, r0, r1
 8007e8a:	b003      	add	sp, #12
 8007e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e90:	4b22      	ldr	r3, [pc, #136]	@ (8007f1c <__kernel_cos+0x184>)
 8007e92:	4921      	ldr	r1, [pc, #132]	@ (8007f18 <__kernel_cos+0x180>)
 8007e94:	4598      	cmp	r8, r3
 8007e96:	bf8c      	ite	hi
 8007e98:	4d21      	ldrhi	r5, [pc, #132]	@ (8007f20 <__kernel_cos+0x188>)
 8007e9a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8007e9e:	2400      	movs	r4, #0
 8007ea0:	4622      	mov	r2, r4
 8007ea2:	462b      	mov	r3, r5
 8007ea4:	2000      	movs	r0, #0
 8007ea6:	f7f8 fa0f 	bl	80002c8 <__aeabi_dsub>
 8007eaa:	4622      	mov	r2, r4
 8007eac:	4680      	mov	r8, r0
 8007eae:	4689      	mov	r9, r1
 8007eb0:	462b      	mov	r3, r5
 8007eb2:	4650      	mov	r0, sl
 8007eb4:	4659      	mov	r1, fp
 8007eb6:	f7f8 fa07 	bl	80002c8 <__aeabi_dsub>
 8007eba:	4632      	mov	r2, r6
 8007ebc:	463b      	mov	r3, r7
 8007ebe:	f7f8 fa03 	bl	80002c8 <__aeabi_dsub>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	4640      	mov	r0, r8
 8007ec8:	4649      	mov	r1, r9
 8007eca:	e7da      	b.n	8007e82 <__kernel_cos+0xea>
 8007ecc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8007f08 <__kernel_cos+0x170>
 8007ed0:	e7db      	b.n	8007e8a <__kernel_cos+0xf2>
 8007ed2:	bf00      	nop
 8007ed4:	f3af 8000 	nop.w
 8007ed8:	be8838d4 	.word	0xbe8838d4
 8007edc:	bda8fae9 	.word	0xbda8fae9
 8007ee0:	bdb4b1c4 	.word	0xbdb4b1c4
 8007ee4:	3e21ee9e 	.word	0x3e21ee9e
 8007ee8:	809c52ad 	.word	0x809c52ad
 8007eec:	3e927e4f 	.word	0x3e927e4f
 8007ef0:	19cb1590 	.word	0x19cb1590
 8007ef4:	3efa01a0 	.word	0x3efa01a0
 8007ef8:	16c15177 	.word	0x16c15177
 8007efc:	3f56c16c 	.word	0x3f56c16c
 8007f00:	5555554c 	.word	0x5555554c
 8007f04:	3fa55555 	.word	0x3fa55555
 8007f08:	00000000 	.word	0x00000000
 8007f0c:	3ff00000 	.word	0x3ff00000
 8007f10:	3fe00000 	.word	0x3fe00000
 8007f14:	3fd33332 	.word	0x3fd33332
 8007f18:	3ff00000 	.word	0x3ff00000
 8007f1c:	3fe90000 	.word	0x3fe90000
 8007f20:	3fd20000 	.word	0x3fd20000
 8007f24:	00000000 	.word	0x00000000

08007f28 <__kernel_sin>:
 8007f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f2c:	ec55 4b10 	vmov	r4, r5, d0
 8007f30:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007f34:	b085      	sub	sp, #20
 8007f36:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8007f3a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8007f3e:	4680      	mov	r8, r0
 8007f40:	d205      	bcs.n	8007f4e <__kernel_sin+0x26>
 8007f42:	4620      	mov	r0, r4
 8007f44:	4629      	mov	r1, r5
 8007f46:	f7f8 fe27 	bl	8000b98 <__aeabi_d2iz>
 8007f4a:	2800      	cmp	r0, #0
 8007f4c:	d052      	beq.n	8007ff4 <__kernel_sin+0xcc>
 8007f4e:	4622      	mov	r2, r4
 8007f50:	462b      	mov	r3, r5
 8007f52:	4620      	mov	r0, r4
 8007f54:	4629      	mov	r1, r5
 8007f56:	f7f8 fb6f 	bl	8000638 <__aeabi_dmul>
 8007f5a:	4682      	mov	sl, r0
 8007f5c:	468b      	mov	fp, r1
 8007f5e:	4602      	mov	r2, r0
 8007f60:	460b      	mov	r3, r1
 8007f62:	4620      	mov	r0, r4
 8007f64:	4629      	mov	r1, r5
 8007f66:	f7f8 fb67 	bl	8000638 <__aeabi_dmul>
 8007f6a:	a342      	add	r3, pc, #264	@ (adr r3, 8008074 <__kernel_sin+0x14c>)
 8007f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f70:	e9cd 0100 	strd	r0, r1, [sp]
 8007f74:	4650      	mov	r0, sl
 8007f76:	4659      	mov	r1, fp
 8007f78:	f7f8 fb5e 	bl	8000638 <__aeabi_dmul>
 8007f7c:	a33f      	add	r3, pc, #252	@ (adr r3, 800807c <__kernel_sin+0x154>)
 8007f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f82:	f7f8 f9a1 	bl	80002c8 <__aeabi_dsub>
 8007f86:	4652      	mov	r2, sl
 8007f88:	465b      	mov	r3, fp
 8007f8a:	f7f8 fb55 	bl	8000638 <__aeabi_dmul>
 8007f8e:	a33d      	add	r3, pc, #244	@ (adr r3, 8008084 <__kernel_sin+0x15c>)
 8007f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f94:	f7f8 f99a 	bl	80002cc <__adddf3>
 8007f98:	4652      	mov	r2, sl
 8007f9a:	465b      	mov	r3, fp
 8007f9c:	f7f8 fb4c 	bl	8000638 <__aeabi_dmul>
 8007fa0:	a33a      	add	r3, pc, #232	@ (adr r3, 800808c <__kernel_sin+0x164>)
 8007fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa6:	f7f8 f98f 	bl	80002c8 <__aeabi_dsub>
 8007faa:	4652      	mov	r2, sl
 8007fac:	465b      	mov	r3, fp
 8007fae:	f7f8 fb43 	bl	8000638 <__aeabi_dmul>
 8007fb2:	a338      	add	r3, pc, #224	@ (adr r3, 8008094 <__kernel_sin+0x16c>)
 8007fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb8:	f7f8 f988 	bl	80002cc <__adddf3>
 8007fbc:	4606      	mov	r6, r0
 8007fbe:	460f      	mov	r7, r1
 8007fc0:	f1b8 0f00 	cmp.w	r8, #0
 8007fc4:	d11b      	bne.n	8007ffe <__kernel_sin+0xd6>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	460b      	mov	r3, r1
 8007fca:	4650      	mov	r0, sl
 8007fcc:	4659      	mov	r1, fp
 8007fce:	f7f8 fb33 	bl	8000638 <__aeabi_dmul>
 8007fd2:	a325      	add	r3, pc, #148	@ (adr r3, 8008068 <__kernel_sin+0x140>)
 8007fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd8:	f7f8 f976 	bl	80002c8 <__aeabi_dsub>
 8007fdc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fe0:	f7f8 fb2a 	bl	8000638 <__aeabi_dmul>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	4620      	mov	r0, r4
 8007fea:	4629      	mov	r1, r5
 8007fec:	f7f8 f96e 	bl	80002cc <__adddf3>
 8007ff0:	4604      	mov	r4, r0
 8007ff2:	460d      	mov	r5, r1
 8007ff4:	ec45 4b10 	vmov	d0, r4, r5
 8007ff8:	b005      	add	sp, #20
 8007ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ffe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008002:	4b1b      	ldr	r3, [pc, #108]	@ (8008070 <__kernel_sin+0x148>)
 8008004:	2200      	movs	r2, #0
 8008006:	f7f8 fb17 	bl	8000638 <__aeabi_dmul>
 800800a:	4632      	mov	r2, r6
 800800c:	4680      	mov	r8, r0
 800800e:	4689      	mov	r9, r1
 8008010:	463b      	mov	r3, r7
 8008012:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008016:	f7f8 fb0f 	bl	8000638 <__aeabi_dmul>
 800801a:	4602      	mov	r2, r0
 800801c:	460b      	mov	r3, r1
 800801e:	4640      	mov	r0, r8
 8008020:	4649      	mov	r1, r9
 8008022:	f7f8 f951 	bl	80002c8 <__aeabi_dsub>
 8008026:	4652      	mov	r2, sl
 8008028:	465b      	mov	r3, fp
 800802a:	f7f8 fb05 	bl	8000638 <__aeabi_dmul>
 800802e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008032:	f7f8 f949 	bl	80002c8 <__aeabi_dsub>
 8008036:	a30c      	add	r3, pc, #48	@ (adr r3, 8008068 <__kernel_sin+0x140>)
 8008038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803c:	4606      	mov	r6, r0
 800803e:	460f      	mov	r7, r1
 8008040:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008044:	f7f8 faf8 	bl	8000638 <__aeabi_dmul>
 8008048:	4602      	mov	r2, r0
 800804a:	460b      	mov	r3, r1
 800804c:	4630      	mov	r0, r6
 800804e:	4639      	mov	r1, r7
 8008050:	f7f8 f93c 	bl	80002cc <__adddf3>
 8008054:	4602      	mov	r2, r0
 8008056:	460b      	mov	r3, r1
 8008058:	4620      	mov	r0, r4
 800805a:	4629      	mov	r1, r5
 800805c:	f7f8 f934 	bl	80002c8 <__aeabi_dsub>
 8008060:	e7c6      	b.n	8007ff0 <__kernel_sin+0xc8>
 8008062:	bf00      	nop
 8008064:	f3af 8000 	nop.w
 8008068:	55555549 	.word	0x55555549
 800806c:	3fc55555 	.word	0x3fc55555
 8008070:	3fe00000 	.word	0x3fe00000
 8008074:	5acfd57c 	.word	0x5acfd57c
 8008078:	3de5d93a 	.word	0x3de5d93a
 800807c:	8a2b9ceb 	.word	0x8a2b9ceb
 8008080:	3e5ae5e6 	.word	0x3e5ae5e6
 8008084:	57b1fe7d 	.word	0x57b1fe7d
 8008088:	3ec71de3 	.word	0x3ec71de3
 800808c:	19c161d5 	.word	0x19c161d5
 8008090:	3f2a01a0 	.word	0x3f2a01a0
 8008094:	1110f8a6 	.word	0x1110f8a6
 8008098:	3f811111 	.word	0x3f811111
 800809c:	00000000 	.word	0x00000000

080080a0 <__ieee754_atan2>:
 80080a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080a4:	ec57 6b11 	vmov	r6, r7, d1
 80080a8:	4273      	negs	r3, r6
 80080aa:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8008228 <__ieee754_atan2+0x188>
 80080ae:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80080b2:	4333      	orrs	r3, r6
 80080b4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80080b8:	4543      	cmp	r3, r8
 80080ba:	ec51 0b10 	vmov	r0, r1, d0
 80080be:	4635      	mov	r5, r6
 80080c0:	d809      	bhi.n	80080d6 <__ieee754_atan2+0x36>
 80080c2:	4244      	negs	r4, r0
 80080c4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80080c8:	4304      	orrs	r4, r0
 80080ca:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80080ce:	4544      	cmp	r4, r8
 80080d0:	468e      	mov	lr, r1
 80080d2:	4681      	mov	r9, r0
 80080d4:	d907      	bls.n	80080e6 <__ieee754_atan2+0x46>
 80080d6:	4632      	mov	r2, r6
 80080d8:	463b      	mov	r3, r7
 80080da:	f7f8 f8f7 	bl	80002cc <__adddf3>
 80080de:	ec41 0b10 	vmov	d0, r0, r1
 80080e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080e6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80080ea:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80080ee:	4334      	orrs	r4, r6
 80080f0:	d103      	bne.n	80080fa <__ieee754_atan2+0x5a>
 80080f2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080f6:	f7ff bb1f 	b.w	8007738 <atan>
 80080fa:	17bc      	asrs	r4, r7, #30
 80080fc:	f004 0402 	and.w	r4, r4, #2
 8008100:	ea53 0909 	orrs.w	r9, r3, r9
 8008104:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008108:	d107      	bne.n	800811a <__ieee754_atan2+0x7a>
 800810a:	2c02      	cmp	r4, #2
 800810c:	d05f      	beq.n	80081ce <__ieee754_atan2+0x12e>
 800810e:	2c03      	cmp	r4, #3
 8008110:	d1e5      	bne.n	80080de <__ieee754_atan2+0x3e>
 8008112:	a141      	add	r1, pc, #260	@ (adr r1, 8008218 <__ieee754_atan2+0x178>)
 8008114:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008118:	e7e1      	b.n	80080de <__ieee754_atan2+0x3e>
 800811a:	4315      	orrs	r5, r2
 800811c:	d106      	bne.n	800812c <__ieee754_atan2+0x8c>
 800811e:	f1be 0f00 	cmp.w	lr, #0
 8008122:	da5f      	bge.n	80081e4 <__ieee754_atan2+0x144>
 8008124:	a13e      	add	r1, pc, #248	@ (adr r1, 8008220 <__ieee754_atan2+0x180>)
 8008126:	e9d1 0100 	ldrd	r0, r1, [r1]
 800812a:	e7d8      	b.n	80080de <__ieee754_atan2+0x3e>
 800812c:	4542      	cmp	r2, r8
 800812e:	d10f      	bne.n	8008150 <__ieee754_atan2+0xb0>
 8008130:	4293      	cmp	r3, r2
 8008132:	f104 34ff 	add.w	r4, r4, #4294967295
 8008136:	d107      	bne.n	8008148 <__ieee754_atan2+0xa8>
 8008138:	2c02      	cmp	r4, #2
 800813a:	d84c      	bhi.n	80081d6 <__ieee754_atan2+0x136>
 800813c:	4b34      	ldr	r3, [pc, #208]	@ (8008210 <__ieee754_atan2+0x170>)
 800813e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008142:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008146:	e7ca      	b.n	80080de <__ieee754_atan2+0x3e>
 8008148:	2c02      	cmp	r4, #2
 800814a:	d848      	bhi.n	80081de <__ieee754_atan2+0x13e>
 800814c:	4b31      	ldr	r3, [pc, #196]	@ (8008214 <__ieee754_atan2+0x174>)
 800814e:	e7f6      	b.n	800813e <__ieee754_atan2+0x9e>
 8008150:	4543      	cmp	r3, r8
 8008152:	d0e4      	beq.n	800811e <__ieee754_atan2+0x7e>
 8008154:	1a9b      	subs	r3, r3, r2
 8008156:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800815a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800815e:	da1e      	bge.n	800819e <__ieee754_atan2+0xfe>
 8008160:	2f00      	cmp	r7, #0
 8008162:	da01      	bge.n	8008168 <__ieee754_atan2+0xc8>
 8008164:	323c      	adds	r2, #60	@ 0x3c
 8008166:	db1e      	blt.n	80081a6 <__ieee754_atan2+0x106>
 8008168:	4632      	mov	r2, r6
 800816a:	463b      	mov	r3, r7
 800816c:	f7f8 fb8e 	bl	800088c <__aeabi_ddiv>
 8008170:	ec41 0b10 	vmov	d0, r0, r1
 8008174:	f7ff fccc 	bl	8007b10 <fabs>
 8008178:	f7ff fade 	bl	8007738 <atan>
 800817c:	ec51 0b10 	vmov	r0, r1, d0
 8008180:	2c01      	cmp	r4, #1
 8008182:	d013      	beq.n	80081ac <__ieee754_atan2+0x10c>
 8008184:	2c02      	cmp	r4, #2
 8008186:	d015      	beq.n	80081b4 <__ieee754_atan2+0x114>
 8008188:	2c00      	cmp	r4, #0
 800818a:	d0a8      	beq.n	80080de <__ieee754_atan2+0x3e>
 800818c:	a318      	add	r3, pc, #96	@ (adr r3, 80081f0 <__ieee754_atan2+0x150>)
 800818e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008192:	f7f8 f899 	bl	80002c8 <__aeabi_dsub>
 8008196:	a318      	add	r3, pc, #96	@ (adr r3, 80081f8 <__ieee754_atan2+0x158>)
 8008198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819c:	e014      	b.n	80081c8 <__ieee754_atan2+0x128>
 800819e:	a118      	add	r1, pc, #96	@ (adr r1, 8008200 <__ieee754_atan2+0x160>)
 80081a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081a4:	e7ec      	b.n	8008180 <__ieee754_atan2+0xe0>
 80081a6:	2000      	movs	r0, #0
 80081a8:	2100      	movs	r1, #0
 80081aa:	e7e9      	b.n	8008180 <__ieee754_atan2+0xe0>
 80081ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80081b0:	4619      	mov	r1, r3
 80081b2:	e794      	b.n	80080de <__ieee754_atan2+0x3e>
 80081b4:	a30e      	add	r3, pc, #56	@ (adr r3, 80081f0 <__ieee754_atan2+0x150>)
 80081b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ba:	f7f8 f885 	bl	80002c8 <__aeabi_dsub>
 80081be:	4602      	mov	r2, r0
 80081c0:	460b      	mov	r3, r1
 80081c2:	a10d      	add	r1, pc, #52	@ (adr r1, 80081f8 <__ieee754_atan2+0x158>)
 80081c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081c8:	f7f8 f87e 	bl	80002c8 <__aeabi_dsub>
 80081cc:	e787      	b.n	80080de <__ieee754_atan2+0x3e>
 80081ce:	a10a      	add	r1, pc, #40	@ (adr r1, 80081f8 <__ieee754_atan2+0x158>)
 80081d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081d4:	e783      	b.n	80080de <__ieee754_atan2+0x3e>
 80081d6:	a10c      	add	r1, pc, #48	@ (adr r1, 8008208 <__ieee754_atan2+0x168>)
 80081d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081dc:	e77f      	b.n	80080de <__ieee754_atan2+0x3e>
 80081de:	2000      	movs	r0, #0
 80081e0:	2100      	movs	r1, #0
 80081e2:	e77c      	b.n	80080de <__ieee754_atan2+0x3e>
 80081e4:	a106      	add	r1, pc, #24	@ (adr r1, 8008200 <__ieee754_atan2+0x160>)
 80081e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081ea:	e778      	b.n	80080de <__ieee754_atan2+0x3e>
 80081ec:	f3af 8000 	nop.w
 80081f0:	33145c07 	.word	0x33145c07
 80081f4:	3ca1a626 	.word	0x3ca1a626
 80081f8:	54442d18 	.word	0x54442d18
 80081fc:	400921fb 	.word	0x400921fb
 8008200:	54442d18 	.word	0x54442d18
 8008204:	3ff921fb 	.word	0x3ff921fb
 8008208:	54442d18 	.word	0x54442d18
 800820c:	3fe921fb 	.word	0x3fe921fb
 8008210:	0800c9d8 	.word	0x0800c9d8
 8008214:	0800c9c0 	.word	0x0800c9c0
 8008218:	54442d18 	.word	0x54442d18
 800821c:	c00921fb 	.word	0xc00921fb
 8008220:	54442d18 	.word	0x54442d18
 8008224:	bff921fb 	.word	0xbff921fb
 8008228:	7ff00000 	.word	0x7ff00000
 800822c:	00000000 	.word	0x00000000

08008230 <__ieee754_pow>:
 8008230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008234:	b091      	sub	sp, #68	@ 0x44
 8008236:	ed8d 1b00 	vstr	d1, [sp]
 800823a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800823e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8008242:	ea5a 0001 	orrs.w	r0, sl, r1
 8008246:	ec57 6b10 	vmov	r6, r7, d0
 800824a:	d113      	bne.n	8008274 <__ieee754_pow+0x44>
 800824c:	19b3      	adds	r3, r6, r6
 800824e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8008252:	4152      	adcs	r2, r2
 8008254:	4298      	cmp	r0, r3
 8008256:	4b98      	ldr	r3, [pc, #608]	@ (80084b8 <__ieee754_pow+0x288>)
 8008258:	4193      	sbcs	r3, r2
 800825a:	f080 84ea 	bcs.w	8008c32 <__ieee754_pow+0xa02>
 800825e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008262:	4630      	mov	r0, r6
 8008264:	4639      	mov	r1, r7
 8008266:	f7f8 f831 	bl	80002cc <__adddf3>
 800826a:	ec41 0b10 	vmov	d0, r0, r1
 800826e:	b011      	add	sp, #68	@ 0x44
 8008270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008274:	4a91      	ldr	r2, [pc, #580]	@ (80084bc <__ieee754_pow+0x28c>)
 8008276:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800827a:	4590      	cmp	r8, r2
 800827c:	463d      	mov	r5, r7
 800827e:	4633      	mov	r3, r6
 8008280:	d806      	bhi.n	8008290 <__ieee754_pow+0x60>
 8008282:	d101      	bne.n	8008288 <__ieee754_pow+0x58>
 8008284:	2e00      	cmp	r6, #0
 8008286:	d1ea      	bne.n	800825e <__ieee754_pow+0x2e>
 8008288:	4592      	cmp	sl, r2
 800828a:	d801      	bhi.n	8008290 <__ieee754_pow+0x60>
 800828c:	d10e      	bne.n	80082ac <__ieee754_pow+0x7c>
 800828e:	b169      	cbz	r1, 80082ac <__ieee754_pow+0x7c>
 8008290:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8008294:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8008298:	431d      	orrs	r5, r3
 800829a:	d1e0      	bne.n	800825e <__ieee754_pow+0x2e>
 800829c:	e9dd 3200 	ldrd	r3, r2, [sp]
 80082a0:	18db      	adds	r3, r3, r3
 80082a2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80082a6:	4152      	adcs	r2, r2
 80082a8:	429d      	cmp	r5, r3
 80082aa:	e7d4      	b.n	8008256 <__ieee754_pow+0x26>
 80082ac:	2d00      	cmp	r5, #0
 80082ae:	46c3      	mov	fp, r8
 80082b0:	da3a      	bge.n	8008328 <__ieee754_pow+0xf8>
 80082b2:	4a83      	ldr	r2, [pc, #524]	@ (80084c0 <__ieee754_pow+0x290>)
 80082b4:	4592      	cmp	sl, r2
 80082b6:	d84d      	bhi.n	8008354 <__ieee754_pow+0x124>
 80082b8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80082bc:	4592      	cmp	sl, r2
 80082be:	f240 84c7 	bls.w	8008c50 <__ieee754_pow+0xa20>
 80082c2:	ea4f 522a 	mov.w	r2, sl, asr #20
 80082c6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80082ca:	2a14      	cmp	r2, #20
 80082cc:	dd0f      	ble.n	80082ee <__ieee754_pow+0xbe>
 80082ce:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80082d2:	fa21 f402 	lsr.w	r4, r1, r2
 80082d6:	fa04 f202 	lsl.w	r2, r4, r2
 80082da:	428a      	cmp	r2, r1
 80082dc:	f040 84b8 	bne.w	8008c50 <__ieee754_pow+0xa20>
 80082e0:	f004 0401 	and.w	r4, r4, #1
 80082e4:	f1c4 0402 	rsb	r4, r4, #2
 80082e8:	2900      	cmp	r1, #0
 80082ea:	d158      	bne.n	800839e <__ieee754_pow+0x16e>
 80082ec:	e00e      	b.n	800830c <__ieee754_pow+0xdc>
 80082ee:	2900      	cmp	r1, #0
 80082f0:	d154      	bne.n	800839c <__ieee754_pow+0x16c>
 80082f2:	f1c2 0214 	rsb	r2, r2, #20
 80082f6:	fa4a f402 	asr.w	r4, sl, r2
 80082fa:	fa04 f202 	lsl.w	r2, r4, r2
 80082fe:	4552      	cmp	r2, sl
 8008300:	f040 84a3 	bne.w	8008c4a <__ieee754_pow+0xa1a>
 8008304:	f004 0401 	and.w	r4, r4, #1
 8008308:	f1c4 0402 	rsb	r4, r4, #2
 800830c:	4a6d      	ldr	r2, [pc, #436]	@ (80084c4 <__ieee754_pow+0x294>)
 800830e:	4592      	cmp	sl, r2
 8008310:	d12e      	bne.n	8008370 <__ieee754_pow+0x140>
 8008312:	f1b9 0f00 	cmp.w	r9, #0
 8008316:	f280 8494 	bge.w	8008c42 <__ieee754_pow+0xa12>
 800831a:	496a      	ldr	r1, [pc, #424]	@ (80084c4 <__ieee754_pow+0x294>)
 800831c:	4632      	mov	r2, r6
 800831e:	463b      	mov	r3, r7
 8008320:	2000      	movs	r0, #0
 8008322:	f7f8 fab3 	bl	800088c <__aeabi_ddiv>
 8008326:	e7a0      	b.n	800826a <__ieee754_pow+0x3a>
 8008328:	2400      	movs	r4, #0
 800832a:	bbc1      	cbnz	r1, 800839e <__ieee754_pow+0x16e>
 800832c:	4a63      	ldr	r2, [pc, #396]	@ (80084bc <__ieee754_pow+0x28c>)
 800832e:	4592      	cmp	sl, r2
 8008330:	d1ec      	bne.n	800830c <__ieee754_pow+0xdc>
 8008332:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8008336:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800833a:	431a      	orrs	r2, r3
 800833c:	f000 8479 	beq.w	8008c32 <__ieee754_pow+0xa02>
 8008340:	4b61      	ldr	r3, [pc, #388]	@ (80084c8 <__ieee754_pow+0x298>)
 8008342:	4598      	cmp	r8, r3
 8008344:	d908      	bls.n	8008358 <__ieee754_pow+0x128>
 8008346:	f1b9 0f00 	cmp.w	r9, #0
 800834a:	f2c0 8476 	blt.w	8008c3a <__ieee754_pow+0xa0a>
 800834e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008352:	e78a      	b.n	800826a <__ieee754_pow+0x3a>
 8008354:	2402      	movs	r4, #2
 8008356:	e7e8      	b.n	800832a <__ieee754_pow+0xfa>
 8008358:	f1b9 0f00 	cmp.w	r9, #0
 800835c:	f04f 0000 	mov.w	r0, #0
 8008360:	f04f 0100 	mov.w	r1, #0
 8008364:	da81      	bge.n	800826a <__ieee754_pow+0x3a>
 8008366:	e9dd 0300 	ldrd	r0, r3, [sp]
 800836a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800836e:	e77c      	b.n	800826a <__ieee754_pow+0x3a>
 8008370:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8008374:	d106      	bne.n	8008384 <__ieee754_pow+0x154>
 8008376:	4632      	mov	r2, r6
 8008378:	463b      	mov	r3, r7
 800837a:	4630      	mov	r0, r6
 800837c:	4639      	mov	r1, r7
 800837e:	f7f8 f95b 	bl	8000638 <__aeabi_dmul>
 8008382:	e772      	b.n	800826a <__ieee754_pow+0x3a>
 8008384:	4a51      	ldr	r2, [pc, #324]	@ (80084cc <__ieee754_pow+0x29c>)
 8008386:	4591      	cmp	r9, r2
 8008388:	d109      	bne.n	800839e <__ieee754_pow+0x16e>
 800838a:	2d00      	cmp	r5, #0
 800838c:	db07      	blt.n	800839e <__ieee754_pow+0x16e>
 800838e:	ec47 6b10 	vmov	d0, r6, r7
 8008392:	b011      	add	sp, #68	@ 0x44
 8008394:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008398:	f7ff bc22 	b.w	8007be0 <__ieee754_sqrt>
 800839c:	2400      	movs	r4, #0
 800839e:	ec47 6b10 	vmov	d0, r6, r7
 80083a2:	9302      	str	r3, [sp, #8]
 80083a4:	f7ff fbb4 	bl	8007b10 <fabs>
 80083a8:	9b02      	ldr	r3, [sp, #8]
 80083aa:	ec51 0b10 	vmov	r0, r1, d0
 80083ae:	bb53      	cbnz	r3, 8008406 <__ieee754_pow+0x1d6>
 80083b0:	4b44      	ldr	r3, [pc, #272]	@ (80084c4 <__ieee754_pow+0x294>)
 80083b2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d002      	beq.n	80083c0 <__ieee754_pow+0x190>
 80083ba:	f1b8 0f00 	cmp.w	r8, #0
 80083be:	d122      	bne.n	8008406 <__ieee754_pow+0x1d6>
 80083c0:	f1b9 0f00 	cmp.w	r9, #0
 80083c4:	da05      	bge.n	80083d2 <__ieee754_pow+0x1a2>
 80083c6:	4602      	mov	r2, r0
 80083c8:	460b      	mov	r3, r1
 80083ca:	2000      	movs	r0, #0
 80083cc:	493d      	ldr	r1, [pc, #244]	@ (80084c4 <__ieee754_pow+0x294>)
 80083ce:	f7f8 fa5d 	bl	800088c <__aeabi_ddiv>
 80083d2:	2d00      	cmp	r5, #0
 80083d4:	f6bf af49 	bge.w	800826a <__ieee754_pow+0x3a>
 80083d8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80083dc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80083e0:	ea58 0804 	orrs.w	r8, r8, r4
 80083e4:	d108      	bne.n	80083f8 <__ieee754_pow+0x1c8>
 80083e6:	4602      	mov	r2, r0
 80083e8:	460b      	mov	r3, r1
 80083ea:	4610      	mov	r0, r2
 80083ec:	4619      	mov	r1, r3
 80083ee:	f7f7 ff6b 	bl	80002c8 <__aeabi_dsub>
 80083f2:	4602      	mov	r2, r0
 80083f4:	460b      	mov	r3, r1
 80083f6:	e794      	b.n	8008322 <__ieee754_pow+0xf2>
 80083f8:	2c01      	cmp	r4, #1
 80083fa:	f47f af36 	bne.w	800826a <__ieee754_pow+0x3a>
 80083fe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008402:	4619      	mov	r1, r3
 8008404:	e731      	b.n	800826a <__ieee754_pow+0x3a>
 8008406:	0feb      	lsrs	r3, r5, #31
 8008408:	3b01      	subs	r3, #1
 800840a:	ea53 0204 	orrs.w	r2, r3, r4
 800840e:	d102      	bne.n	8008416 <__ieee754_pow+0x1e6>
 8008410:	4632      	mov	r2, r6
 8008412:	463b      	mov	r3, r7
 8008414:	e7e9      	b.n	80083ea <__ieee754_pow+0x1ba>
 8008416:	3c01      	subs	r4, #1
 8008418:	431c      	orrs	r4, r3
 800841a:	d016      	beq.n	800844a <__ieee754_pow+0x21a>
 800841c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80084a8 <__ieee754_pow+0x278>
 8008420:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8008424:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008428:	f240 8112 	bls.w	8008650 <__ieee754_pow+0x420>
 800842c:	4b28      	ldr	r3, [pc, #160]	@ (80084d0 <__ieee754_pow+0x2a0>)
 800842e:	459a      	cmp	sl, r3
 8008430:	4b25      	ldr	r3, [pc, #148]	@ (80084c8 <__ieee754_pow+0x298>)
 8008432:	d916      	bls.n	8008462 <__ieee754_pow+0x232>
 8008434:	4598      	cmp	r8, r3
 8008436:	d80b      	bhi.n	8008450 <__ieee754_pow+0x220>
 8008438:	f1b9 0f00 	cmp.w	r9, #0
 800843c:	da0b      	bge.n	8008456 <__ieee754_pow+0x226>
 800843e:	2000      	movs	r0, #0
 8008440:	b011      	add	sp, #68	@ 0x44
 8008442:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008446:	f000 bee7 	b.w	8009218 <__math_oflow>
 800844a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80084b0 <__ieee754_pow+0x280>
 800844e:	e7e7      	b.n	8008420 <__ieee754_pow+0x1f0>
 8008450:	f1b9 0f00 	cmp.w	r9, #0
 8008454:	dcf3      	bgt.n	800843e <__ieee754_pow+0x20e>
 8008456:	2000      	movs	r0, #0
 8008458:	b011      	add	sp, #68	@ 0x44
 800845a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800845e:	f000 bed3 	b.w	8009208 <__math_uflow>
 8008462:	4598      	cmp	r8, r3
 8008464:	d20c      	bcs.n	8008480 <__ieee754_pow+0x250>
 8008466:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800846a:	2200      	movs	r2, #0
 800846c:	2300      	movs	r3, #0
 800846e:	f7f8 fb55 	bl	8000b1c <__aeabi_dcmplt>
 8008472:	3800      	subs	r0, #0
 8008474:	bf18      	it	ne
 8008476:	2001      	movne	r0, #1
 8008478:	f1b9 0f00 	cmp.w	r9, #0
 800847c:	daec      	bge.n	8008458 <__ieee754_pow+0x228>
 800847e:	e7df      	b.n	8008440 <__ieee754_pow+0x210>
 8008480:	4b10      	ldr	r3, [pc, #64]	@ (80084c4 <__ieee754_pow+0x294>)
 8008482:	4598      	cmp	r8, r3
 8008484:	f04f 0200 	mov.w	r2, #0
 8008488:	d924      	bls.n	80084d4 <__ieee754_pow+0x2a4>
 800848a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800848e:	2300      	movs	r3, #0
 8008490:	f7f8 fb44 	bl	8000b1c <__aeabi_dcmplt>
 8008494:	3800      	subs	r0, #0
 8008496:	bf18      	it	ne
 8008498:	2001      	movne	r0, #1
 800849a:	f1b9 0f00 	cmp.w	r9, #0
 800849e:	dccf      	bgt.n	8008440 <__ieee754_pow+0x210>
 80084a0:	e7da      	b.n	8008458 <__ieee754_pow+0x228>
 80084a2:	bf00      	nop
 80084a4:	f3af 8000 	nop.w
 80084a8:	00000000 	.word	0x00000000
 80084ac:	3ff00000 	.word	0x3ff00000
 80084b0:	00000000 	.word	0x00000000
 80084b4:	bff00000 	.word	0xbff00000
 80084b8:	fff00000 	.word	0xfff00000
 80084bc:	7ff00000 	.word	0x7ff00000
 80084c0:	433fffff 	.word	0x433fffff
 80084c4:	3ff00000 	.word	0x3ff00000
 80084c8:	3fefffff 	.word	0x3fefffff
 80084cc:	3fe00000 	.word	0x3fe00000
 80084d0:	43f00000 	.word	0x43f00000
 80084d4:	4b5a      	ldr	r3, [pc, #360]	@ (8008640 <__ieee754_pow+0x410>)
 80084d6:	f7f7 fef7 	bl	80002c8 <__aeabi_dsub>
 80084da:	a351      	add	r3, pc, #324	@ (adr r3, 8008620 <__ieee754_pow+0x3f0>)
 80084dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e0:	4604      	mov	r4, r0
 80084e2:	460d      	mov	r5, r1
 80084e4:	f7f8 f8a8 	bl	8000638 <__aeabi_dmul>
 80084e8:	a34f      	add	r3, pc, #316	@ (adr r3, 8008628 <__ieee754_pow+0x3f8>)
 80084ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ee:	4606      	mov	r6, r0
 80084f0:	460f      	mov	r7, r1
 80084f2:	4620      	mov	r0, r4
 80084f4:	4629      	mov	r1, r5
 80084f6:	f7f8 f89f 	bl	8000638 <__aeabi_dmul>
 80084fa:	4b52      	ldr	r3, [pc, #328]	@ (8008644 <__ieee754_pow+0x414>)
 80084fc:	4682      	mov	sl, r0
 80084fe:	468b      	mov	fp, r1
 8008500:	2200      	movs	r2, #0
 8008502:	4620      	mov	r0, r4
 8008504:	4629      	mov	r1, r5
 8008506:	f7f8 f897 	bl	8000638 <__aeabi_dmul>
 800850a:	4602      	mov	r2, r0
 800850c:	460b      	mov	r3, r1
 800850e:	a148      	add	r1, pc, #288	@ (adr r1, 8008630 <__ieee754_pow+0x400>)
 8008510:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008514:	f7f7 fed8 	bl	80002c8 <__aeabi_dsub>
 8008518:	4622      	mov	r2, r4
 800851a:	462b      	mov	r3, r5
 800851c:	f7f8 f88c 	bl	8000638 <__aeabi_dmul>
 8008520:	4602      	mov	r2, r0
 8008522:	460b      	mov	r3, r1
 8008524:	2000      	movs	r0, #0
 8008526:	4948      	ldr	r1, [pc, #288]	@ (8008648 <__ieee754_pow+0x418>)
 8008528:	f7f7 fece 	bl	80002c8 <__aeabi_dsub>
 800852c:	4622      	mov	r2, r4
 800852e:	4680      	mov	r8, r0
 8008530:	4689      	mov	r9, r1
 8008532:	462b      	mov	r3, r5
 8008534:	4620      	mov	r0, r4
 8008536:	4629      	mov	r1, r5
 8008538:	f7f8 f87e 	bl	8000638 <__aeabi_dmul>
 800853c:	4602      	mov	r2, r0
 800853e:	460b      	mov	r3, r1
 8008540:	4640      	mov	r0, r8
 8008542:	4649      	mov	r1, r9
 8008544:	f7f8 f878 	bl	8000638 <__aeabi_dmul>
 8008548:	a33b      	add	r3, pc, #236	@ (adr r3, 8008638 <__ieee754_pow+0x408>)
 800854a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854e:	f7f8 f873 	bl	8000638 <__aeabi_dmul>
 8008552:	4602      	mov	r2, r0
 8008554:	460b      	mov	r3, r1
 8008556:	4650      	mov	r0, sl
 8008558:	4659      	mov	r1, fp
 800855a:	f7f7 feb5 	bl	80002c8 <__aeabi_dsub>
 800855e:	4602      	mov	r2, r0
 8008560:	460b      	mov	r3, r1
 8008562:	4680      	mov	r8, r0
 8008564:	4689      	mov	r9, r1
 8008566:	4630      	mov	r0, r6
 8008568:	4639      	mov	r1, r7
 800856a:	f7f7 feaf 	bl	80002cc <__adddf3>
 800856e:	2400      	movs	r4, #0
 8008570:	4632      	mov	r2, r6
 8008572:	463b      	mov	r3, r7
 8008574:	4620      	mov	r0, r4
 8008576:	460d      	mov	r5, r1
 8008578:	f7f7 fea6 	bl	80002c8 <__aeabi_dsub>
 800857c:	4602      	mov	r2, r0
 800857e:	460b      	mov	r3, r1
 8008580:	4640      	mov	r0, r8
 8008582:	4649      	mov	r1, r9
 8008584:	f7f7 fea0 	bl	80002c8 <__aeabi_dsub>
 8008588:	e9dd 2300 	ldrd	r2, r3, [sp]
 800858c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008590:	2300      	movs	r3, #0
 8008592:	9304      	str	r3, [sp, #16]
 8008594:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008598:	4606      	mov	r6, r0
 800859a:	460f      	mov	r7, r1
 800859c:	4652      	mov	r2, sl
 800859e:	465b      	mov	r3, fp
 80085a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085a4:	f7f7 fe90 	bl	80002c8 <__aeabi_dsub>
 80085a8:	4622      	mov	r2, r4
 80085aa:	462b      	mov	r3, r5
 80085ac:	f7f8 f844 	bl	8000638 <__aeabi_dmul>
 80085b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085b4:	4680      	mov	r8, r0
 80085b6:	4689      	mov	r9, r1
 80085b8:	4630      	mov	r0, r6
 80085ba:	4639      	mov	r1, r7
 80085bc:	f7f8 f83c 	bl	8000638 <__aeabi_dmul>
 80085c0:	4602      	mov	r2, r0
 80085c2:	460b      	mov	r3, r1
 80085c4:	4640      	mov	r0, r8
 80085c6:	4649      	mov	r1, r9
 80085c8:	f7f7 fe80 	bl	80002cc <__adddf3>
 80085cc:	4652      	mov	r2, sl
 80085ce:	465b      	mov	r3, fp
 80085d0:	4606      	mov	r6, r0
 80085d2:	460f      	mov	r7, r1
 80085d4:	4620      	mov	r0, r4
 80085d6:	4629      	mov	r1, r5
 80085d8:	f7f8 f82e 	bl	8000638 <__aeabi_dmul>
 80085dc:	460b      	mov	r3, r1
 80085de:	4602      	mov	r2, r0
 80085e0:	4680      	mov	r8, r0
 80085e2:	4689      	mov	r9, r1
 80085e4:	4630      	mov	r0, r6
 80085e6:	4639      	mov	r1, r7
 80085e8:	f7f7 fe70 	bl	80002cc <__adddf3>
 80085ec:	4b17      	ldr	r3, [pc, #92]	@ (800864c <__ieee754_pow+0x41c>)
 80085ee:	4299      	cmp	r1, r3
 80085f0:	4604      	mov	r4, r0
 80085f2:	460d      	mov	r5, r1
 80085f4:	468a      	mov	sl, r1
 80085f6:	468b      	mov	fp, r1
 80085f8:	f340 82ef 	ble.w	8008bda <__ieee754_pow+0x9aa>
 80085fc:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8008600:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008604:	4303      	orrs	r3, r0
 8008606:	f000 81e8 	beq.w	80089da <__ieee754_pow+0x7aa>
 800860a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800860e:	2200      	movs	r2, #0
 8008610:	2300      	movs	r3, #0
 8008612:	f7f8 fa83 	bl	8000b1c <__aeabi_dcmplt>
 8008616:	3800      	subs	r0, #0
 8008618:	bf18      	it	ne
 800861a:	2001      	movne	r0, #1
 800861c:	e710      	b.n	8008440 <__ieee754_pow+0x210>
 800861e:	bf00      	nop
 8008620:	60000000 	.word	0x60000000
 8008624:	3ff71547 	.word	0x3ff71547
 8008628:	f85ddf44 	.word	0xf85ddf44
 800862c:	3e54ae0b 	.word	0x3e54ae0b
 8008630:	55555555 	.word	0x55555555
 8008634:	3fd55555 	.word	0x3fd55555
 8008638:	652b82fe 	.word	0x652b82fe
 800863c:	3ff71547 	.word	0x3ff71547
 8008640:	3ff00000 	.word	0x3ff00000
 8008644:	3fd00000 	.word	0x3fd00000
 8008648:	3fe00000 	.word	0x3fe00000
 800864c:	408fffff 	.word	0x408fffff
 8008650:	4bd5      	ldr	r3, [pc, #852]	@ (80089a8 <__ieee754_pow+0x778>)
 8008652:	402b      	ands	r3, r5
 8008654:	2200      	movs	r2, #0
 8008656:	b92b      	cbnz	r3, 8008664 <__ieee754_pow+0x434>
 8008658:	4bd4      	ldr	r3, [pc, #848]	@ (80089ac <__ieee754_pow+0x77c>)
 800865a:	f7f7 ffed 	bl	8000638 <__aeabi_dmul>
 800865e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8008662:	468b      	mov	fp, r1
 8008664:	ea4f 532b 	mov.w	r3, fp, asr #20
 8008668:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800866c:	4413      	add	r3, r2
 800866e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008670:	4bcf      	ldr	r3, [pc, #828]	@ (80089b0 <__ieee754_pow+0x780>)
 8008672:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8008676:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800867a:	459b      	cmp	fp, r3
 800867c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008680:	dd08      	ble.n	8008694 <__ieee754_pow+0x464>
 8008682:	4bcc      	ldr	r3, [pc, #816]	@ (80089b4 <__ieee754_pow+0x784>)
 8008684:	459b      	cmp	fp, r3
 8008686:	f340 81a5 	ble.w	80089d4 <__ieee754_pow+0x7a4>
 800868a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800868c:	3301      	adds	r3, #1
 800868e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008690:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8008694:	f04f 0a00 	mov.w	sl, #0
 8008698:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800869c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800869e:	4bc6      	ldr	r3, [pc, #792]	@ (80089b8 <__ieee754_pow+0x788>)
 80086a0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80086a4:	ed93 7b00 	vldr	d7, [r3]
 80086a8:	4629      	mov	r1, r5
 80086aa:	ec53 2b17 	vmov	r2, r3, d7
 80086ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 80086b2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80086b6:	f7f7 fe07 	bl	80002c8 <__aeabi_dsub>
 80086ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80086be:	4606      	mov	r6, r0
 80086c0:	460f      	mov	r7, r1
 80086c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086c6:	f7f7 fe01 	bl	80002cc <__adddf3>
 80086ca:	4602      	mov	r2, r0
 80086cc:	460b      	mov	r3, r1
 80086ce:	2000      	movs	r0, #0
 80086d0:	49ba      	ldr	r1, [pc, #744]	@ (80089bc <__ieee754_pow+0x78c>)
 80086d2:	f7f8 f8db 	bl	800088c <__aeabi_ddiv>
 80086d6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80086da:	4602      	mov	r2, r0
 80086dc:	460b      	mov	r3, r1
 80086de:	4630      	mov	r0, r6
 80086e0:	4639      	mov	r1, r7
 80086e2:	f7f7 ffa9 	bl	8000638 <__aeabi_dmul>
 80086e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086ea:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80086ee:	106d      	asrs	r5, r5, #1
 80086f0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80086f4:	f04f 0b00 	mov.w	fp, #0
 80086f8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80086fc:	4661      	mov	r1, ip
 80086fe:	2200      	movs	r2, #0
 8008700:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8008704:	4658      	mov	r0, fp
 8008706:	46e1      	mov	r9, ip
 8008708:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800870c:	4614      	mov	r4, r2
 800870e:	461d      	mov	r5, r3
 8008710:	f7f7 ff92 	bl	8000638 <__aeabi_dmul>
 8008714:	4602      	mov	r2, r0
 8008716:	460b      	mov	r3, r1
 8008718:	4630      	mov	r0, r6
 800871a:	4639      	mov	r1, r7
 800871c:	f7f7 fdd4 	bl	80002c8 <__aeabi_dsub>
 8008720:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008724:	4606      	mov	r6, r0
 8008726:	460f      	mov	r7, r1
 8008728:	4620      	mov	r0, r4
 800872a:	4629      	mov	r1, r5
 800872c:	f7f7 fdcc 	bl	80002c8 <__aeabi_dsub>
 8008730:	4602      	mov	r2, r0
 8008732:	460b      	mov	r3, r1
 8008734:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008738:	f7f7 fdc6 	bl	80002c8 <__aeabi_dsub>
 800873c:	465a      	mov	r2, fp
 800873e:	464b      	mov	r3, r9
 8008740:	f7f7 ff7a 	bl	8000638 <__aeabi_dmul>
 8008744:	4602      	mov	r2, r0
 8008746:	460b      	mov	r3, r1
 8008748:	4630      	mov	r0, r6
 800874a:	4639      	mov	r1, r7
 800874c:	f7f7 fdbc 	bl	80002c8 <__aeabi_dsub>
 8008750:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008754:	f7f7 ff70 	bl	8000638 <__aeabi_dmul>
 8008758:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800875c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008760:	4610      	mov	r0, r2
 8008762:	4619      	mov	r1, r3
 8008764:	f7f7 ff68 	bl	8000638 <__aeabi_dmul>
 8008768:	a37d      	add	r3, pc, #500	@ (adr r3, 8008960 <__ieee754_pow+0x730>)
 800876a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876e:	4604      	mov	r4, r0
 8008770:	460d      	mov	r5, r1
 8008772:	f7f7 ff61 	bl	8000638 <__aeabi_dmul>
 8008776:	a37c      	add	r3, pc, #496	@ (adr r3, 8008968 <__ieee754_pow+0x738>)
 8008778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877c:	f7f7 fda6 	bl	80002cc <__adddf3>
 8008780:	4622      	mov	r2, r4
 8008782:	462b      	mov	r3, r5
 8008784:	f7f7 ff58 	bl	8000638 <__aeabi_dmul>
 8008788:	a379      	add	r3, pc, #484	@ (adr r3, 8008970 <__ieee754_pow+0x740>)
 800878a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878e:	f7f7 fd9d 	bl	80002cc <__adddf3>
 8008792:	4622      	mov	r2, r4
 8008794:	462b      	mov	r3, r5
 8008796:	f7f7 ff4f 	bl	8000638 <__aeabi_dmul>
 800879a:	a377      	add	r3, pc, #476	@ (adr r3, 8008978 <__ieee754_pow+0x748>)
 800879c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a0:	f7f7 fd94 	bl	80002cc <__adddf3>
 80087a4:	4622      	mov	r2, r4
 80087a6:	462b      	mov	r3, r5
 80087a8:	f7f7 ff46 	bl	8000638 <__aeabi_dmul>
 80087ac:	a374      	add	r3, pc, #464	@ (adr r3, 8008980 <__ieee754_pow+0x750>)
 80087ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b2:	f7f7 fd8b 	bl	80002cc <__adddf3>
 80087b6:	4622      	mov	r2, r4
 80087b8:	462b      	mov	r3, r5
 80087ba:	f7f7 ff3d 	bl	8000638 <__aeabi_dmul>
 80087be:	a372      	add	r3, pc, #456	@ (adr r3, 8008988 <__ieee754_pow+0x758>)
 80087c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c4:	f7f7 fd82 	bl	80002cc <__adddf3>
 80087c8:	4622      	mov	r2, r4
 80087ca:	4606      	mov	r6, r0
 80087cc:	460f      	mov	r7, r1
 80087ce:	462b      	mov	r3, r5
 80087d0:	4620      	mov	r0, r4
 80087d2:	4629      	mov	r1, r5
 80087d4:	f7f7 ff30 	bl	8000638 <__aeabi_dmul>
 80087d8:	4602      	mov	r2, r0
 80087da:	460b      	mov	r3, r1
 80087dc:	4630      	mov	r0, r6
 80087de:	4639      	mov	r1, r7
 80087e0:	f7f7 ff2a 	bl	8000638 <__aeabi_dmul>
 80087e4:	465a      	mov	r2, fp
 80087e6:	4604      	mov	r4, r0
 80087e8:	460d      	mov	r5, r1
 80087ea:	464b      	mov	r3, r9
 80087ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087f0:	f7f7 fd6c 	bl	80002cc <__adddf3>
 80087f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80087f8:	f7f7 ff1e 	bl	8000638 <__aeabi_dmul>
 80087fc:	4622      	mov	r2, r4
 80087fe:	462b      	mov	r3, r5
 8008800:	f7f7 fd64 	bl	80002cc <__adddf3>
 8008804:	465a      	mov	r2, fp
 8008806:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800880a:	464b      	mov	r3, r9
 800880c:	4658      	mov	r0, fp
 800880e:	4649      	mov	r1, r9
 8008810:	f7f7 ff12 	bl	8000638 <__aeabi_dmul>
 8008814:	4b6a      	ldr	r3, [pc, #424]	@ (80089c0 <__ieee754_pow+0x790>)
 8008816:	2200      	movs	r2, #0
 8008818:	4606      	mov	r6, r0
 800881a:	460f      	mov	r7, r1
 800881c:	f7f7 fd56 	bl	80002cc <__adddf3>
 8008820:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008824:	f7f7 fd52 	bl	80002cc <__adddf3>
 8008828:	46d8      	mov	r8, fp
 800882a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800882e:	460d      	mov	r5, r1
 8008830:	465a      	mov	r2, fp
 8008832:	460b      	mov	r3, r1
 8008834:	4640      	mov	r0, r8
 8008836:	4649      	mov	r1, r9
 8008838:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800883c:	f7f7 fefc 	bl	8000638 <__aeabi_dmul>
 8008840:	465c      	mov	r4, fp
 8008842:	4680      	mov	r8, r0
 8008844:	4689      	mov	r9, r1
 8008846:	4b5e      	ldr	r3, [pc, #376]	@ (80089c0 <__ieee754_pow+0x790>)
 8008848:	2200      	movs	r2, #0
 800884a:	4620      	mov	r0, r4
 800884c:	4629      	mov	r1, r5
 800884e:	f7f7 fd3b 	bl	80002c8 <__aeabi_dsub>
 8008852:	4632      	mov	r2, r6
 8008854:	463b      	mov	r3, r7
 8008856:	f7f7 fd37 	bl	80002c8 <__aeabi_dsub>
 800885a:	4602      	mov	r2, r0
 800885c:	460b      	mov	r3, r1
 800885e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008862:	f7f7 fd31 	bl	80002c8 <__aeabi_dsub>
 8008866:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800886a:	f7f7 fee5 	bl	8000638 <__aeabi_dmul>
 800886e:	4622      	mov	r2, r4
 8008870:	4606      	mov	r6, r0
 8008872:	460f      	mov	r7, r1
 8008874:	462b      	mov	r3, r5
 8008876:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800887a:	f7f7 fedd 	bl	8000638 <__aeabi_dmul>
 800887e:	4602      	mov	r2, r0
 8008880:	460b      	mov	r3, r1
 8008882:	4630      	mov	r0, r6
 8008884:	4639      	mov	r1, r7
 8008886:	f7f7 fd21 	bl	80002cc <__adddf3>
 800888a:	4606      	mov	r6, r0
 800888c:	460f      	mov	r7, r1
 800888e:	4602      	mov	r2, r0
 8008890:	460b      	mov	r3, r1
 8008892:	4640      	mov	r0, r8
 8008894:	4649      	mov	r1, r9
 8008896:	f7f7 fd19 	bl	80002cc <__adddf3>
 800889a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800889e:	a33c      	add	r3, pc, #240	@ (adr r3, 8008990 <__ieee754_pow+0x760>)
 80088a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a4:	4658      	mov	r0, fp
 80088a6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80088aa:	460d      	mov	r5, r1
 80088ac:	f7f7 fec4 	bl	8000638 <__aeabi_dmul>
 80088b0:	465c      	mov	r4, fp
 80088b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088b6:	4642      	mov	r2, r8
 80088b8:	464b      	mov	r3, r9
 80088ba:	4620      	mov	r0, r4
 80088bc:	4629      	mov	r1, r5
 80088be:	f7f7 fd03 	bl	80002c8 <__aeabi_dsub>
 80088c2:	4602      	mov	r2, r0
 80088c4:	460b      	mov	r3, r1
 80088c6:	4630      	mov	r0, r6
 80088c8:	4639      	mov	r1, r7
 80088ca:	f7f7 fcfd 	bl	80002c8 <__aeabi_dsub>
 80088ce:	a332      	add	r3, pc, #200	@ (adr r3, 8008998 <__ieee754_pow+0x768>)
 80088d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d4:	f7f7 feb0 	bl	8000638 <__aeabi_dmul>
 80088d8:	a331      	add	r3, pc, #196	@ (adr r3, 80089a0 <__ieee754_pow+0x770>)
 80088da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088de:	4606      	mov	r6, r0
 80088e0:	460f      	mov	r7, r1
 80088e2:	4620      	mov	r0, r4
 80088e4:	4629      	mov	r1, r5
 80088e6:	f7f7 fea7 	bl	8000638 <__aeabi_dmul>
 80088ea:	4602      	mov	r2, r0
 80088ec:	460b      	mov	r3, r1
 80088ee:	4630      	mov	r0, r6
 80088f0:	4639      	mov	r1, r7
 80088f2:	f7f7 fceb 	bl	80002cc <__adddf3>
 80088f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80088f8:	4b32      	ldr	r3, [pc, #200]	@ (80089c4 <__ieee754_pow+0x794>)
 80088fa:	4413      	add	r3, r2
 80088fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008900:	f7f7 fce4 	bl	80002cc <__adddf3>
 8008904:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008908:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800890a:	f7f7 fe2b 	bl	8000564 <__aeabi_i2d>
 800890e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008910:	4b2d      	ldr	r3, [pc, #180]	@ (80089c8 <__ieee754_pow+0x798>)
 8008912:	4413      	add	r3, r2
 8008914:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008918:	4606      	mov	r6, r0
 800891a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800891e:	460f      	mov	r7, r1
 8008920:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008924:	f7f7 fcd2 	bl	80002cc <__adddf3>
 8008928:	4642      	mov	r2, r8
 800892a:	464b      	mov	r3, r9
 800892c:	f7f7 fcce 	bl	80002cc <__adddf3>
 8008930:	4632      	mov	r2, r6
 8008932:	463b      	mov	r3, r7
 8008934:	f7f7 fcca 	bl	80002cc <__adddf3>
 8008938:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800893c:	4632      	mov	r2, r6
 800893e:	463b      	mov	r3, r7
 8008940:	4658      	mov	r0, fp
 8008942:	460d      	mov	r5, r1
 8008944:	f7f7 fcc0 	bl	80002c8 <__aeabi_dsub>
 8008948:	4642      	mov	r2, r8
 800894a:	464b      	mov	r3, r9
 800894c:	f7f7 fcbc 	bl	80002c8 <__aeabi_dsub>
 8008950:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008954:	f7f7 fcb8 	bl	80002c8 <__aeabi_dsub>
 8008958:	465c      	mov	r4, fp
 800895a:	4602      	mov	r2, r0
 800895c:	e036      	b.n	80089cc <__ieee754_pow+0x79c>
 800895e:	bf00      	nop
 8008960:	4a454eef 	.word	0x4a454eef
 8008964:	3fca7e28 	.word	0x3fca7e28
 8008968:	93c9db65 	.word	0x93c9db65
 800896c:	3fcd864a 	.word	0x3fcd864a
 8008970:	a91d4101 	.word	0xa91d4101
 8008974:	3fd17460 	.word	0x3fd17460
 8008978:	518f264d 	.word	0x518f264d
 800897c:	3fd55555 	.word	0x3fd55555
 8008980:	db6fabff 	.word	0xdb6fabff
 8008984:	3fdb6db6 	.word	0x3fdb6db6
 8008988:	33333303 	.word	0x33333303
 800898c:	3fe33333 	.word	0x3fe33333
 8008990:	e0000000 	.word	0xe0000000
 8008994:	3feec709 	.word	0x3feec709
 8008998:	dc3a03fd 	.word	0xdc3a03fd
 800899c:	3feec709 	.word	0x3feec709
 80089a0:	145b01f5 	.word	0x145b01f5
 80089a4:	be3e2fe0 	.word	0xbe3e2fe0
 80089a8:	7ff00000 	.word	0x7ff00000
 80089ac:	43400000 	.word	0x43400000
 80089b0:	0003988e 	.word	0x0003988e
 80089b4:	000bb679 	.word	0x000bb679
 80089b8:	0800ca10 	.word	0x0800ca10
 80089bc:	3ff00000 	.word	0x3ff00000
 80089c0:	40080000 	.word	0x40080000
 80089c4:	0800c9f0 	.word	0x0800c9f0
 80089c8:	0800ca00 	.word	0x0800ca00
 80089cc:	460b      	mov	r3, r1
 80089ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089d2:	e5d7      	b.n	8008584 <__ieee754_pow+0x354>
 80089d4:	f04f 0a01 	mov.w	sl, #1
 80089d8:	e65e      	b.n	8008698 <__ieee754_pow+0x468>
 80089da:	a3b4      	add	r3, pc, #720	@ (adr r3, 8008cac <__ieee754_pow+0xa7c>)
 80089dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e0:	4630      	mov	r0, r6
 80089e2:	4639      	mov	r1, r7
 80089e4:	f7f7 fc72 	bl	80002cc <__adddf3>
 80089e8:	4642      	mov	r2, r8
 80089ea:	e9cd 0100 	strd	r0, r1, [sp]
 80089ee:	464b      	mov	r3, r9
 80089f0:	4620      	mov	r0, r4
 80089f2:	4629      	mov	r1, r5
 80089f4:	f7f7 fc68 	bl	80002c8 <__aeabi_dsub>
 80089f8:	4602      	mov	r2, r0
 80089fa:	460b      	mov	r3, r1
 80089fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a00:	f7f8 f8aa 	bl	8000b58 <__aeabi_dcmpgt>
 8008a04:	2800      	cmp	r0, #0
 8008a06:	f47f ae00 	bne.w	800860a <__ieee754_pow+0x3da>
 8008a0a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8008a0e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008a12:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8008a16:	fa43 fa0a 	asr.w	sl, r3, sl
 8008a1a:	44da      	add	sl, fp
 8008a1c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008a20:	489d      	ldr	r0, [pc, #628]	@ (8008c98 <__ieee754_pow+0xa68>)
 8008a22:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8008a26:	4108      	asrs	r0, r1
 8008a28:	ea00 030a 	and.w	r3, r0, sl
 8008a2c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008a30:	f1c1 0114 	rsb	r1, r1, #20
 8008a34:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8008a38:	fa4a fa01 	asr.w	sl, sl, r1
 8008a3c:	f1bb 0f00 	cmp.w	fp, #0
 8008a40:	4640      	mov	r0, r8
 8008a42:	4649      	mov	r1, r9
 8008a44:	f04f 0200 	mov.w	r2, #0
 8008a48:	bfb8      	it	lt
 8008a4a:	f1ca 0a00 	rsblt	sl, sl, #0
 8008a4e:	f7f7 fc3b 	bl	80002c8 <__aeabi_dsub>
 8008a52:	4680      	mov	r8, r0
 8008a54:	4689      	mov	r9, r1
 8008a56:	4632      	mov	r2, r6
 8008a58:	463b      	mov	r3, r7
 8008a5a:	4640      	mov	r0, r8
 8008a5c:	4649      	mov	r1, r9
 8008a5e:	f7f7 fc35 	bl	80002cc <__adddf3>
 8008a62:	2400      	movs	r4, #0
 8008a64:	a37c      	add	r3, pc, #496	@ (adr r3, 8008c58 <__ieee754_pow+0xa28>)
 8008a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	460d      	mov	r5, r1
 8008a6e:	f7f7 fde3 	bl	8000638 <__aeabi_dmul>
 8008a72:	4642      	mov	r2, r8
 8008a74:	e9cd 0100 	strd	r0, r1, [sp]
 8008a78:	464b      	mov	r3, r9
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	4629      	mov	r1, r5
 8008a7e:	f7f7 fc23 	bl	80002c8 <__aeabi_dsub>
 8008a82:	4602      	mov	r2, r0
 8008a84:	460b      	mov	r3, r1
 8008a86:	4630      	mov	r0, r6
 8008a88:	4639      	mov	r1, r7
 8008a8a:	f7f7 fc1d 	bl	80002c8 <__aeabi_dsub>
 8008a8e:	a374      	add	r3, pc, #464	@ (adr r3, 8008c60 <__ieee754_pow+0xa30>)
 8008a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a94:	f7f7 fdd0 	bl	8000638 <__aeabi_dmul>
 8008a98:	a373      	add	r3, pc, #460	@ (adr r3, 8008c68 <__ieee754_pow+0xa38>)
 8008a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9e:	4680      	mov	r8, r0
 8008aa0:	4689      	mov	r9, r1
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	4629      	mov	r1, r5
 8008aa6:	f7f7 fdc7 	bl	8000638 <__aeabi_dmul>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	460b      	mov	r3, r1
 8008aae:	4640      	mov	r0, r8
 8008ab0:	4649      	mov	r1, r9
 8008ab2:	f7f7 fc0b 	bl	80002cc <__adddf3>
 8008ab6:	4604      	mov	r4, r0
 8008ab8:	460d      	mov	r5, r1
 8008aba:	4602      	mov	r2, r0
 8008abc:	460b      	mov	r3, r1
 8008abe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ac2:	f7f7 fc03 	bl	80002cc <__adddf3>
 8008ac6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008aca:	4680      	mov	r8, r0
 8008acc:	4689      	mov	r9, r1
 8008ace:	f7f7 fbfb 	bl	80002c8 <__aeabi_dsub>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	4629      	mov	r1, r5
 8008ada:	f7f7 fbf5 	bl	80002c8 <__aeabi_dsub>
 8008ade:	4642      	mov	r2, r8
 8008ae0:	4606      	mov	r6, r0
 8008ae2:	460f      	mov	r7, r1
 8008ae4:	464b      	mov	r3, r9
 8008ae6:	4640      	mov	r0, r8
 8008ae8:	4649      	mov	r1, r9
 8008aea:	f7f7 fda5 	bl	8000638 <__aeabi_dmul>
 8008aee:	a360      	add	r3, pc, #384	@ (adr r3, 8008c70 <__ieee754_pow+0xa40>)
 8008af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af4:	4604      	mov	r4, r0
 8008af6:	460d      	mov	r5, r1
 8008af8:	f7f7 fd9e 	bl	8000638 <__aeabi_dmul>
 8008afc:	a35e      	add	r3, pc, #376	@ (adr r3, 8008c78 <__ieee754_pow+0xa48>)
 8008afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b02:	f7f7 fbe1 	bl	80002c8 <__aeabi_dsub>
 8008b06:	4622      	mov	r2, r4
 8008b08:	462b      	mov	r3, r5
 8008b0a:	f7f7 fd95 	bl	8000638 <__aeabi_dmul>
 8008b0e:	a35c      	add	r3, pc, #368	@ (adr r3, 8008c80 <__ieee754_pow+0xa50>)
 8008b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b14:	f7f7 fbda 	bl	80002cc <__adddf3>
 8008b18:	4622      	mov	r2, r4
 8008b1a:	462b      	mov	r3, r5
 8008b1c:	f7f7 fd8c 	bl	8000638 <__aeabi_dmul>
 8008b20:	a359      	add	r3, pc, #356	@ (adr r3, 8008c88 <__ieee754_pow+0xa58>)
 8008b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b26:	f7f7 fbcf 	bl	80002c8 <__aeabi_dsub>
 8008b2a:	4622      	mov	r2, r4
 8008b2c:	462b      	mov	r3, r5
 8008b2e:	f7f7 fd83 	bl	8000638 <__aeabi_dmul>
 8008b32:	a357      	add	r3, pc, #348	@ (adr r3, 8008c90 <__ieee754_pow+0xa60>)
 8008b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b38:	f7f7 fbc8 	bl	80002cc <__adddf3>
 8008b3c:	4622      	mov	r2, r4
 8008b3e:	462b      	mov	r3, r5
 8008b40:	f7f7 fd7a 	bl	8000638 <__aeabi_dmul>
 8008b44:	4602      	mov	r2, r0
 8008b46:	460b      	mov	r3, r1
 8008b48:	4640      	mov	r0, r8
 8008b4a:	4649      	mov	r1, r9
 8008b4c:	f7f7 fbbc 	bl	80002c8 <__aeabi_dsub>
 8008b50:	4604      	mov	r4, r0
 8008b52:	460d      	mov	r5, r1
 8008b54:	4602      	mov	r2, r0
 8008b56:	460b      	mov	r3, r1
 8008b58:	4640      	mov	r0, r8
 8008b5a:	4649      	mov	r1, r9
 8008b5c:	f7f7 fd6c 	bl	8000638 <__aeabi_dmul>
 8008b60:	2200      	movs	r2, #0
 8008b62:	e9cd 0100 	strd	r0, r1, [sp]
 8008b66:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	4629      	mov	r1, r5
 8008b6e:	f7f7 fbab 	bl	80002c8 <__aeabi_dsub>
 8008b72:	4602      	mov	r2, r0
 8008b74:	460b      	mov	r3, r1
 8008b76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b7a:	f7f7 fe87 	bl	800088c <__aeabi_ddiv>
 8008b7e:	4632      	mov	r2, r6
 8008b80:	4604      	mov	r4, r0
 8008b82:	460d      	mov	r5, r1
 8008b84:	463b      	mov	r3, r7
 8008b86:	4640      	mov	r0, r8
 8008b88:	4649      	mov	r1, r9
 8008b8a:	f7f7 fd55 	bl	8000638 <__aeabi_dmul>
 8008b8e:	4632      	mov	r2, r6
 8008b90:	463b      	mov	r3, r7
 8008b92:	f7f7 fb9b 	bl	80002cc <__adddf3>
 8008b96:	4602      	mov	r2, r0
 8008b98:	460b      	mov	r3, r1
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	4629      	mov	r1, r5
 8008b9e:	f7f7 fb93 	bl	80002c8 <__aeabi_dsub>
 8008ba2:	4642      	mov	r2, r8
 8008ba4:	464b      	mov	r3, r9
 8008ba6:	f7f7 fb8f 	bl	80002c8 <__aeabi_dsub>
 8008baa:	460b      	mov	r3, r1
 8008bac:	4602      	mov	r2, r0
 8008bae:	493b      	ldr	r1, [pc, #236]	@ (8008c9c <__ieee754_pow+0xa6c>)
 8008bb0:	2000      	movs	r0, #0
 8008bb2:	f7f7 fb89 	bl	80002c8 <__aeabi_dsub>
 8008bb6:	ec41 0b10 	vmov	d0, r0, r1
 8008bba:	ee10 3a90 	vmov	r3, s1
 8008bbe:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008bc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bc6:	da30      	bge.n	8008c2a <__ieee754_pow+0x9fa>
 8008bc8:	4650      	mov	r0, sl
 8008bca:	f000 fa71 	bl	80090b0 <scalbn>
 8008bce:	ec51 0b10 	vmov	r0, r1, d0
 8008bd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008bd6:	f7ff bbd2 	b.w	800837e <__ieee754_pow+0x14e>
 8008bda:	4c31      	ldr	r4, [pc, #196]	@ (8008ca0 <__ieee754_pow+0xa70>)
 8008bdc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008be0:	42a3      	cmp	r3, r4
 8008be2:	d91a      	bls.n	8008c1a <__ieee754_pow+0x9ea>
 8008be4:	4b2f      	ldr	r3, [pc, #188]	@ (8008ca4 <__ieee754_pow+0xa74>)
 8008be6:	440b      	add	r3, r1
 8008be8:	4303      	orrs	r3, r0
 8008bea:	d009      	beq.n	8008c00 <__ieee754_pow+0x9d0>
 8008bec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	f7f7 ff92 	bl	8000b1c <__aeabi_dcmplt>
 8008bf8:	3800      	subs	r0, #0
 8008bfa:	bf18      	it	ne
 8008bfc:	2001      	movne	r0, #1
 8008bfe:	e42b      	b.n	8008458 <__ieee754_pow+0x228>
 8008c00:	4642      	mov	r2, r8
 8008c02:	464b      	mov	r3, r9
 8008c04:	f7f7 fb60 	bl	80002c8 <__aeabi_dsub>
 8008c08:	4632      	mov	r2, r6
 8008c0a:	463b      	mov	r3, r7
 8008c0c:	f7f7 ff9a 	bl	8000b44 <__aeabi_dcmpge>
 8008c10:	2800      	cmp	r0, #0
 8008c12:	d1eb      	bne.n	8008bec <__ieee754_pow+0x9bc>
 8008c14:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8008cb4 <__ieee754_pow+0xa84>
 8008c18:	e6f7      	b.n	8008a0a <__ieee754_pow+0x7da>
 8008c1a:	469a      	mov	sl, r3
 8008c1c:	4b22      	ldr	r3, [pc, #136]	@ (8008ca8 <__ieee754_pow+0xa78>)
 8008c1e:	459a      	cmp	sl, r3
 8008c20:	f63f aef3 	bhi.w	8008a0a <__ieee754_pow+0x7da>
 8008c24:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008c28:	e715      	b.n	8008a56 <__ieee754_pow+0x826>
 8008c2a:	ec51 0b10 	vmov	r0, r1, d0
 8008c2e:	4619      	mov	r1, r3
 8008c30:	e7cf      	b.n	8008bd2 <__ieee754_pow+0x9a2>
 8008c32:	491a      	ldr	r1, [pc, #104]	@ (8008c9c <__ieee754_pow+0xa6c>)
 8008c34:	2000      	movs	r0, #0
 8008c36:	f7ff bb18 	b.w	800826a <__ieee754_pow+0x3a>
 8008c3a:	2000      	movs	r0, #0
 8008c3c:	2100      	movs	r1, #0
 8008c3e:	f7ff bb14 	b.w	800826a <__ieee754_pow+0x3a>
 8008c42:	4630      	mov	r0, r6
 8008c44:	4639      	mov	r1, r7
 8008c46:	f7ff bb10 	b.w	800826a <__ieee754_pow+0x3a>
 8008c4a:	460c      	mov	r4, r1
 8008c4c:	f7ff bb5e 	b.w	800830c <__ieee754_pow+0xdc>
 8008c50:	2400      	movs	r4, #0
 8008c52:	f7ff bb49 	b.w	80082e8 <__ieee754_pow+0xb8>
 8008c56:	bf00      	nop
 8008c58:	00000000 	.word	0x00000000
 8008c5c:	3fe62e43 	.word	0x3fe62e43
 8008c60:	fefa39ef 	.word	0xfefa39ef
 8008c64:	3fe62e42 	.word	0x3fe62e42
 8008c68:	0ca86c39 	.word	0x0ca86c39
 8008c6c:	be205c61 	.word	0xbe205c61
 8008c70:	72bea4d0 	.word	0x72bea4d0
 8008c74:	3e663769 	.word	0x3e663769
 8008c78:	c5d26bf1 	.word	0xc5d26bf1
 8008c7c:	3ebbbd41 	.word	0x3ebbbd41
 8008c80:	af25de2c 	.word	0xaf25de2c
 8008c84:	3f11566a 	.word	0x3f11566a
 8008c88:	16bebd93 	.word	0x16bebd93
 8008c8c:	3f66c16c 	.word	0x3f66c16c
 8008c90:	5555553e 	.word	0x5555553e
 8008c94:	3fc55555 	.word	0x3fc55555
 8008c98:	fff00000 	.word	0xfff00000
 8008c9c:	3ff00000 	.word	0x3ff00000
 8008ca0:	4090cbff 	.word	0x4090cbff
 8008ca4:	3f6f3400 	.word	0x3f6f3400
 8008ca8:	3fe00000 	.word	0x3fe00000
 8008cac:	652b82fe 	.word	0x652b82fe
 8008cb0:	3c971547 	.word	0x3c971547
 8008cb4:	4090cc00 	.word	0x4090cc00

08008cb8 <__ieee754_rem_pio2>:
 8008cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cbc:	ec57 6b10 	vmov	r6, r7, d0
 8008cc0:	4bc5      	ldr	r3, [pc, #788]	@ (8008fd8 <__ieee754_rem_pio2+0x320>)
 8008cc2:	b08d      	sub	sp, #52	@ 0x34
 8008cc4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8008cc8:	4598      	cmp	r8, r3
 8008cca:	4604      	mov	r4, r0
 8008ccc:	9704      	str	r7, [sp, #16]
 8008cce:	d807      	bhi.n	8008ce0 <__ieee754_rem_pio2+0x28>
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	ed80 0b00 	vstr	d0, [r0]
 8008cd8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008cdc:	2500      	movs	r5, #0
 8008cde:	e028      	b.n	8008d32 <__ieee754_rem_pio2+0x7a>
 8008ce0:	4bbe      	ldr	r3, [pc, #760]	@ (8008fdc <__ieee754_rem_pio2+0x324>)
 8008ce2:	4598      	cmp	r8, r3
 8008ce4:	d878      	bhi.n	8008dd8 <__ieee754_rem_pio2+0x120>
 8008ce6:	9b04      	ldr	r3, [sp, #16]
 8008ce8:	4dbd      	ldr	r5, [pc, #756]	@ (8008fe0 <__ieee754_rem_pio2+0x328>)
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	4630      	mov	r0, r6
 8008cee:	a3ac      	add	r3, pc, #688	@ (adr r3, 8008fa0 <__ieee754_rem_pio2+0x2e8>)
 8008cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf4:	4639      	mov	r1, r7
 8008cf6:	dd38      	ble.n	8008d6a <__ieee754_rem_pio2+0xb2>
 8008cf8:	f7f7 fae6 	bl	80002c8 <__aeabi_dsub>
 8008cfc:	45a8      	cmp	r8, r5
 8008cfe:	4606      	mov	r6, r0
 8008d00:	460f      	mov	r7, r1
 8008d02:	d01a      	beq.n	8008d3a <__ieee754_rem_pio2+0x82>
 8008d04:	a3a8      	add	r3, pc, #672	@ (adr r3, 8008fa8 <__ieee754_rem_pio2+0x2f0>)
 8008d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0a:	f7f7 fadd 	bl	80002c8 <__aeabi_dsub>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	460b      	mov	r3, r1
 8008d12:	4680      	mov	r8, r0
 8008d14:	4689      	mov	r9, r1
 8008d16:	4630      	mov	r0, r6
 8008d18:	4639      	mov	r1, r7
 8008d1a:	f7f7 fad5 	bl	80002c8 <__aeabi_dsub>
 8008d1e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8008fa8 <__ieee754_rem_pio2+0x2f0>)
 8008d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d24:	f7f7 fad0 	bl	80002c8 <__aeabi_dsub>
 8008d28:	e9c4 8900 	strd	r8, r9, [r4]
 8008d2c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008d30:	2501      	movs	r5, #1
 8008d32:	4628      	mov	r0, r5
 8008d34:	b00d      	add	sp, #52	@ 0x34
 8008d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d3a:	a39d      	add	r3, pc, #628	@ (adr r3, 8008fb0 <__ieee754_rem_pio2+0x2f8>)
 8008d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d40:	f7f7 fac2 	bl	80002c8 <__aeabi_dsub>
 8008d44:	a39c      	add	r3, pc, #624	@ (adr r3, 8008fb8 <__ieee754_rem_pio2+0x300>)
 8008d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4a:	4606      	mov	r6, r0
 8008d4c:	460f      	mov	r7, r1
 8008d4e:	f7f7 fabb 	bl	80002c8 <__aeabi_dsub>
 8008d52:	4602      	mov	r2, r0
 8008d54:	460b      	mov	r3, r1
 8008d56:	4680      	mov	r8, r0
 8008d58:	4689      	mov	r9, r1
 8008d5a:	4630      	mov	r0, r6
 8008d5c:	4639      	mov	r1, r7
 8008d5e:	f7f7 fab3 	bl	80002c8 <__aeabi_dsub>
 8008d62:	a395      	add	r3, pc, #596	@ (adr r3, 8008fb8 <__ieee754_rem_pio2+0x300>)
 8008d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d68:	e7dc      	b.n	8008d24 <__ieee754_rem_pio2+0x6c>
 8008d6a:	f7f7 faaf 	bl	80002cc <__adddf3>
 8008d6e:	45a8      	cmp	r8, r5
 8008d70:	4606      	mov	r6, r0
 8008d72:	460f      	mov	r7, r1
 8008d74:	d018      	beq.n	8008da8 <__ieee754_rem_pio2+0xf0>
 8008d76:	a38c      	add	r3, pc, #560	@ (adr r3, 8008fa8 <__ieee754_rem_pio2+0x2f0>)
 8008d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7c:	f7f7 faa6 	bl	80002cc <__adddf3>
 8008d80:	4602      	mov	r2, r0
 8008d82:	460b      	mov	r3, r1
 8008d84:	4680      	mov	r8, r0
 8008d86:	4689      	mov	r9, r1
 8008d88:	4630      	mov	r0, r6
 8008d8a:	4639      	mov	r1, r7
 8008d8c:	f7f7 fa9c 	bl	80002c8 <__aeabi_dsub>
 8008d90:	a385      	add	r3, pc, #532	@ (adr r3, 8008fa8 <__ieee754_rem_pio2+0x2f0>)
 8008d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d96:	f7f7 fa99 	bl	80002cc <__adddf3>
 8008d9a:	f04f 35ff 	mov.w	r5, #4294967295
 8008d9e:	e9c4 8900 	strd	r8, r9, [r4]
 8008da2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008da6:	e7c4      	b.n	8008d32 <__ieee754_rem_pio2+0x7a>
 8008da8:	a381      	add	r3, pc, #516	@ (adr r3, 8008fb0 <__ieee754_rem_pio2+0x2f8>)
 8008daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dae:	f7f7 fa8d 	bl	80002cc <__adddf3>
 8008db2:	a381      	add	r3, pc, #516	@ (adr r3, 8008fb8 <__ieee754_rem_pio2+0x300>)
 8008db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db8:	4606      	mov	r6, r0
 8008dba:	460f      	mov	r7, r1
 8008dbc:	f7f7 fa86 	bl	80002cc <__adddf3>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	4680      	mov	r8, r0
 8008dc6:	4689      	mov	r9, r1
 8008dc8:	4630      	mov	r0, r6
 8008dca:	4639      	mov	r1, r7
 8008dcc:	f7f7 fa7c 	bl	80002c8 <__aeabi_dsub>
 8008dd0:	a379      	add	r3, pc, #484	@ (adr r3, 8008fb8 <__ieee754_rem_pio2+0x300>)
 8008dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd6:	e7de      	b.n	8008d96 <__ieee754_rem_pio2+0xde>
 8008dd8:	4b82      	ldr	r3, [pc, #520]	@ (8008fe4 <__ieee754_rem_pio2+0x32c>)
 8008dda:	4598      	cmp	r8, r3
 8008ddc:	f200 80d1 	bhi.w	8008f82 <__ieee754_rem_pio2+0x2ca>
 8008de0:	f7fe fe96 	bl	8007b10 <fabs>
 8008de4:	ec57 6b10 	vmov	r6, r7, d0
 8008de8:	a375      	add	r3, pc, #468	@ (adr r3, 8008fc0 <__ieee754_rem_pio2+0x308>)
 8008dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dee:	4630      	mov	r0, r6
 8008df0:	4639      	mov	r1, r7
 8008df2:	f7f7 fc21 	bl	8000638 <__aeabi_dmul>
 8008df6:	4b7c      	ldr	r3, [pc, #496]	@ (8008fe8 <__ieee754_rem_pio2+0x330>)
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f7f7 fa67 	bl	80002cc <__adddf3>
 8008dfe:	f7f7 fecb 	bl	8000b98 <__aeabi_d2iz>
 8008e02:	4605      	mov	r5, r0
 8008e04:	f7f7 fbae 	bl	8000564 <__aeabi_i2d>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e10:	a363      	add	r3, pc, #396	@ (adr r3, 8008fa0 <__ieee754_rem_pio2+0x2e8>)
 8008e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e16:	f7f7 fc0f 	bl	8000638 <__aeabi_dmul>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	4630      	mov	r0, r6
 8008e20:	4639      	mov	r1, r7
 8008e22:	f7f7 fa51 	bl	80002c8 <__aeabi_dsub>
 8008e26:	a360      	add	r3, pc, #384	@ (adr r3, 8008fa8 <__ieee754_rem_pio2+0x2f0>)
 8008e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2c:	4682      	mov	sl, r0
 8008e2e:	468b      	mov	fp, r1
 8008e30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e34:	f7f7 fc00 	bl	8000638 <__aeabi_dmul>
 8008e38:	2d1f      	cmp	r5, #31
 8008e3a:	4606      	mov	r6, r0
 8008e3c:	460f      	mov	r7, r1
 8008e3e:	dc0c      	bgt.n	8008e5a <__ieee754_rem_pio2+0x1a2>
 8008e40:	4b6a      	ldr	r3, [pc, #424]	@ (8008fec <__ieee754_rem_pio2+0x334>)
 8008e42:	1e6a      	subs	r2, r5, #1
 8008e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e48:	4543      	cmp	r3, r8
 8008e4a:	d006      	beq.n	8008e5a <__ieee754_rem_pio2+0x1a2>
 8008e4c:	4632      	mov	r2, r6
 8008e4e:	463b      	mov	r3, r7
 8008e50:	4650      	mov	r0, sl
 8008e52:	4659      	mov	r1, fp
 8008e54:	f7f7 fa38 	bl	80002c8 <__aeabi_dsub>
 8008e58:	e00e      	b.n	8008e78 <__ieee754_rem_pio2+0x1c0>
 8008e5a:	463b      	mov	r3, r7
 8008e5c:	4632      	mov	r2, r6
 8008e5e:	4650      	mov	r0, sl
 8008e60:	4659      	mov	r1, fp
 8008e62:	f7f7 fa31 	bl	80002c8 <__aeabi_dsub>
 8008e66:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008e6a:	9305      	str	r3, [sp, #20]
 8008e6c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008e70:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8008e74:	2b10      	cmp	r3, #16
 8008e76:	dc02      	bgt.n	8008e7e <__ieee754_rem_pio2+0x1c6>
 8008e78:	e9c4 0100 	strd	r0, r1, [r4]
 8008e7c:	e039      	b.n	8008ef2 <__ieee754_rem_pio2+0x23a>
 8008e7e:	a34c      	add	r3, pc, #304	@ (adr r3, 8008fb0 <__ieee754_rem_pio2+0x2f8>)
 8008e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e88:	f7f7 fbd6 	bl	8000638 <__aeabi_dmul>
 8008e8c:	4606      	mov	r6, r0
 8008e8e:	460f      	mov	r7, r1
 8008e90:	4602      	mov	r2, r0
 8008e92:	460b      	mov	r3, r1
 8008e94:	4650      	mov	r0, sl
 8008e96:	4659      	mov	r1, fp
 8008e98:	f7f7 fa16 	bl	80002c8 <__aeabi_dsub>
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	460b      	mov	r3, r1
 8008ea0:	4680      	mov	r8, r0
 8008ea2:	4689      	mov	r9, r1
 8008ea4:	4650      	mov	r0, sl
 8008ea6:	4659      	mov	r1, fp
 8008ea8:	f7f7 fa0e 	bl	80002c8 <__aeabi_dsub>
 8008eac:	4632      	mov	r2, r6
 8008eae:	463b      	mov	r3, r7
 8008eb0:	f7f7 fa0a 	bl	80002c8 <__aeabi_dsub>
 8008eb4:	a340      	add	r3, pc, #256	@ (adr r3, 8008fb8 <__ieee754_rem_pio2+0x300>)
 8008eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eba:	4606      	mov	r6, r0
 8008ebc:	460f      	mov	r7, r1
 8008ebe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ec2:	f7f7 fbb9 	bl	8000638 <__aeabi_dmul>
 8008ec6:	4632      	mov	r2, r6
 8008ec8:	463b      	mov	r3, r7
 8008eca:	f7f7 f9fd 	bl	80002c8 <__aeabi_dsub>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	4606      	mov	r6, r0
 8008ed4:	460f      	mov	r7, r1
 8008ed6:	4640      	mov	r0, r8
 8008ed8:	4649      	mov	r1, r9
 8008eda:	f7f7 f9f5 	bl	80002c8 <__aeabi_dsub>
 8008ede:	9a05      	ldr	r2, [sp, #20]
 8008ee0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008ee4:	1ad3      	subs	r3, r2, r3
 8008ee6:	2b31      	cmp	r3, #49	@ 0x31
 8008ee8:	dc20      	bgt.n	8008f2c <__ieee754_rem_pio2+0x274>
 8008eea:	e9c4 0100 	strd	r0, r1, [r4]
 8008eee:	46c2      	mov	sl, r8
 8008ef0:	46cb      	mov	fp, r9
 8008ef2:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008ef6:	4650      	mov	r0, sl
 8008ef8:	4642      	mov	r2, r8
 8008efa:	464b      	mov	r3, r9
 8008efc:	4659      	mov	r1, fp
 8008efe:	f7f7 f9e3 	bl	80002c8 <__aeabi_dsub>
 8008f02:	463b      	mov	r3, r7
 8008f04:	4632      	mov	r2, r6
 8008f06:	f7f7 f9df 	bl	80002c8 <__aeabi_dsub>
 8008f0a:	9b04      	ldr	r3, [sp, #16]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008f12:	f6bf af0e 	bge.w	8008d32 <__ieee754_rem_pio2+0x7a>
 8008f16:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8008f1a:	6063      	str	r3, [r4, #4]
 8008f1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008f20:	f8c4 8000 	str.w	r8, [r4]
 8008f24:	60a0      	str	r0, [r4, #8]
 8008f26:	60e3      	str	r3, [r4, #12]
 8008f28:	426d      	negs	r5, r5
 8008f2a:	e702      	b.n	8008d32 <__ieee754_rem_pio2+0x7a>
 8008f2c:	a326      	add	r3, pc, #152	@ (adr r3, 8008fc8 <__ieee754_rem_pio2+0x310>)
 8008f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f36:	f7f7 fb7f 	bl	8000638 <__aeabi_dmul>
 8008f3a:	4606      	mov	r6, r0
 8008f3c:	460f      	mov	r7, r1
 8008f3e:	4602      	mov	r2, r0
 8008f40:	460b      	mov	r3, r1
 8008f42:	4640      	mov	r0, r8
 8008f44:	4649      	mov	r1, r9
 8008f46:	f7f7 f9bf 	bl	80002c8 <__aeabi_dsub>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	4682      	mov	sl, r0
 8008f50:	468b      	mov	fp, r1
 8008f52:	4640      	mov	r0, r8
 8008f54:	4649      	mov	r1, r9
 8008f56:	f7f7 f9b7 	bl	80002c8 <__aeabi_dsub>
 8008f5a:	4632      	mov	r2, r6
 8008f5c:	463b      	mov	r3, r7
 8008f5e:	f7f7 f9b3 	bl	80002c8 <__aeabi_dsub>
 8008f62:	a31b      	add	r3, pc, #108	@ (adr r3, 8008fd0 <__ieee754_rem_pio2+0x318>)
 8008f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f68:	4606      	mov	r6, r0
 8008f6a:	460f      	mov	r7, r1
 8008f6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f70:	f7f7 fb62 	bl	8000638 <__aeabi_dmul>
 8008f74:	4632      	mov	r2, r6
 8008f76:	463b      	mov	r3, r7
 8008f78:	f7f7 f9a6 	bl	80002c8 <__aeabi_dsub>
 8008f7c:	4606      	mov	r6, r0
 8008f7e:	460f      	mov	r7, r1
 8008f80:	e764      	b.n	8008e4c <__ieee754_rem_pio2+0x194>
 8008f82:	4b1b      	ldr	r3, [pc, #108]	@ (8008ff0 <__ieee754_rem_pio2+0x338>)
 8008f84:	4598      	cmp	r8, r3
 8008f86:	d935      	bls.n	8008ff4 <__ieee754_rem_pio2+0x33c>
 8008f88:	4632      	mov	r2, r6
 8008f8a:	463b      	mov	r3, r7
 8008f8c:	4630      	mov	r0, r6
 8008f8e:	4639      	mov	r1, r7
 8008f90:	f7f7 f99a 	bl	80002c8 <__aeabi_dsub>
 8008f94:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008f98:	e9c4 0100 	strd	r0, r1, [r4]
 8008f9c:	e69e      	b.n	8008cdc <__ieee754_rem_pio2+0x24>
 8008f9e:	bf00      	nop
 8008fa0:	54400000 	.word	0x54400000
 8008fa4:	3ff921fb 	.word	0x3ff921fb
 8008fa8:	1a626331 	.word	0x1a626331
 8008fac:	3dd0b461 	.word	0x3dd0b461
 8008fb0:	1a600000 	.word	0x1a600000
 8008fb4:	3dd0b461 	.word	0x3dd0b461
 8008fb8:	2e037073 	.word	0x2e037073
 8008fbc:	3ba3198a 	.word	0x3ba3198a
 8008fc0:	6dc9c883 	.word	0x6dc9c883
 8008fc4:	3fe45f30 	.word	0x3fe45f30
 8008fc8:	2e000000 	.word	0x2e000000
 8008fcc:	3ba3198a 	.word	0x3ba3198a
 8008fd0:	252049c1 	.word	0x252049c1
 8008fd4:	397b839a 	.word	0x397b839a
 8008fd8:	3fe921fb 	.word	0x3fe921fb
 8008fdc:	4002d97b 	.word	0x4002d97b
 8008fe0:	3ff921fb 	.word	0x3ff921fb
 8008fe4:	413921fb 	.word	0x413921fb
 8008fe8:	3fe00000 	.word	0x3fe00000
 8008fec:	0800ca20 	.word	0x0800ca20
 8008ff0:	7fefffff 	.word	0x7fefffff
 8008ff4:	ea4f 5528 	mov.w	r5, r8, asr #20
 8008ff8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8008ffc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009000:	4630      	mov	r0, r6
 8009002:	460f      	mov	r7, r1
 8009004:	f7f7 fdc8 	bl	8000b98 <__aeabi_d2iz>
 8009008:	f7f7 faac 	bl	8000564 <__aeabi_i2d>
 800900c:	4602      	mov	r2, r0
 800900e:	460b      	mov	r3, r1
 8009010:	4630      	mov	r0, r6
 8009012:	4639      	mov	r1, r7
 8009014:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009018:	f7f7 f956 	bl	80002c8 <__aeabi_dsub>
 800901c:	4b22      	ldr	r3, [pc, #136]	@ (80090a8 <__ieee754_rem_pio2+0x3f0>)
 800901e:	2200      	movs	r2, #0
 8009020:	f7f7 fb0a 	bl	8000638 <__aeabi_dmul>
 8009024:	460f      	mov	r7, r1
 8009026:	4606      	mov	r6, r0
 8009028:	f7f7 fdb6 	bl	8000b98 <__aeabi_d2iz>
 800902c:	f7f7 fa9a 	bl	8000564 <__aeabi_i2d>
 8009030:	4602      	mov	r2, r0
 8009032:	460b      	mov	r3, r1
 8009034:	4630      	mov	r0, r6
 8009036:	4639      	mov	r1, r7
 8009038:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800903c:	f7f7 f944 	bl	80002c8 <__aeabi_dsub>
 8009040:	4b19      	ldr	r3, [pc, #100]	@ (80090a8 <__ieee754_rem_pio2+0x3f0>)
 8009042:	2200      	movs	r2, #0
 8009044:	f7f7 faf8 	bl	8000638 <__aeabi_dmul>
 8009048:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800904c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8009050:	f04f 0803 	mov.w	r8, #3
 8009054:	2600      	movs	r6, #0
 8009056:	2700      	movs	r7, #0
 8009058:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800905c:	4632      	mov	r2, r6
 800905e:	463b      	mov	r3, r7
 8009060:	46c2      	mov	sl, r8
 8009062:	f108 38ff 	add.w	r8, r8, #4294967295
 8009066:	f7f7 fd4f 	bl	8000b08 <__aeabi_dcmpeq>
 800906a:	2800      	cmp	r0, #0
 800906c:	d1f4      	bne.n	8009058 <__ieee754_rem_pio2+0x3a0>
 800906e:	4b0f      	ldr	r3, [pc, #60]	@ (80090ac <__ieee754_rem_pio2+0x3f4>)
 8009070:	9301      	str	r3, [sp, #4]
 8009072:	2302      	movs	r3, #2
 8009074:	9300      	str	r3, [sp, #0]
 8009076:	462a      	mov	r2, r5
 8009078:	4653      	mov	r3, sl
 800907a:	4621      	mov	r1, r4
 800907c:	a806      	add	r0, sp, #24
 800907e:	f000 f8d3 	bl	8009228 <__kernel_rem_pio2>
 8009082:	9b04      	ldr	r3, [sp, #16]
 8009084:	2b00      	cmp	r3, #0
 8009086:	4605      	mov	r5, r0
 8009088:	f6bf ae53 	bge.w	8008d32 <__ieee754_rem_pio2+0x7a>
 800908c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8009090:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009094:	e9c4 2300 	strd	r2, r3, [r4]
 8009098:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800909c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80090a0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80090a4:	e740      	b.n	8008f28 <__ieee754_rem_pio2+0x270>
 80090a6:	bf00      	nop
 80090a8:	41700000 	.word	0x41700000
 80090ac:	0800caa0 	.word	0x0800caa0

080090b0 <scalbn>:
 80090b0:	b570      	push	{r4, r5, r6, lr}
 80090b2:	ec55 4b10 	vmov	r4, r5, d0
 80090b6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80090ba:	4606      	mov	r6, r0
 80090bc:	462b      	mov	r3, r5
 80090be:	b991      	cbnz	r1, 80090e6 <scalbn+0x36>
 80090c0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80090c4:	4323      	orrs	r3, r4
 80090c6:	d03d      	beq.n	8009144 <scalbn+0x94>
 80090c8:	4b35      	ldr	r3, [pc, #212]	@ (80091a0 <scalbn+0xf0>)
 80090ca:	4620      	mov	r0, r4
 80090cc:	4629      	mov	r1, r5
 80090ce:	2200      	movs	r2, #0
 80090d0:	f7f7 fab2 	bl	8000638 <__aeabi_dmul>
 80090d4:	4b33      	ldr	r3, [pc, #204]	@ (80091a4 <scalbn+0xf4>)
 80090d6:	429e      	cmp	r6, r3
 80090d8:	4604      	mov	r4, r0
 80090da:	460d      	mov	r5, r1
 80090dc:	da0f      	bge.n	80090fe <scalbn+0x4e>
 80090de:	a328      	add	r3, pc, #160	@ (adr r3, 8009180 <scalbn+0xd0>)
 80090e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e4:	e01e      	b.n	8009124 <scalbn+0x74>
 80090e6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80090ea:	4291      	cmp	r1, r2
 80090ec:	d10b      	bne.n	8009106 <scalbn+0x56>
 80090ee:	4622      	mov	r2, r4
 80090f0:	4620      	mov	r0, r4
 80090f2:	4629      	mov	r1, r5
 80090f4:	f7f7 f8ea 	bl	80002cc <__adddf3>
 80090f8:	4604      	mov	r4, r0
 80090fa:	460d      	mov	r5, r1
 80090fc:	e022      	b.n	8009144 <scalbn+0x94>
 80090fe:	460b      	mov	r3, r1
 8009100:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009104:	3936      	subs	r1, #54	@ 0x36
 8009106:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800910a:	4296      	cmp	r6, r2
 800910c:	dd0d      	ble.n	800912a <scalbn+0x7a>
 800910e:	2d00      	cmp	r5, #0
 8009110:	a11d      	add	r1, pc, #116	@ (adr r1, 8009188 <scalbn+0xd8>)
 8009112:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009116:	da02      	bge.n	800911e <scalbn+0x6e>
 8009118:	a11d      	add	r1, pc, #116	@ (adr r1, 8009190 <scalbn+0xe0>)
 800911a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800911e:	a31a      	add	r3, pc, #104	@ (adr r3, 8009188 <scalbn+0xd8>)
 8009120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009124:	f7f7 fa88 	bl	8000638 <__aeabi_dmul>
 8009128:	e7e6      	b.n	80090f8 <scalbn+0x48>
 800912a:	1872      	adds	r2, r6, r1
 800912c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8009130:	428a      	cmp	r2, r1
 8009132:	dcec      	bgt.n	800910e <scalbn+0x5e>
 8009134:	2a00      	cmp	r2, #0
 8009136:	dd08      	ble.n	800914a <scalbn+0x9a>
 8009138:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800913c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009140:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009144:	ec45 4b10 	vmov	d0, r4, r5
 8009148:	bd70      	pop	{r4, r5, r6, pc}
 800914a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800914e:	da08      	bge.n	8009162 <scalbn+0xb2>
 8009150:	2d00      	cmp	r5, #0
 8009152:	a10b      	add	r1, pc, #44	@ (adr r1, 8009180 <scalbn+0xd0>)
 8009154:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009158:	dac1      	bge.n	80090de <scalbn+0x2e>
 800915a:	a10f      	add	r1, pc, #60	@ (adr r1, 8009198 <scalbn+0xe8>)
 800915c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009160:	e7bd      	b.n	80090de <scalbn+0x2e>
 8009162:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009166:	3236      	adds	r2, #54	@ 0x36
 8009168:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800916c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009170:	4620      	mov	r0, r4
 8009172:	4b0d      	ldr	r3, [pc, #52]	@ (80091a8 <scalbn+0xf8>)
 8009174:	4629      	mov	r1, r5
 8009176:	2200      	movs	r2, #0
 8009178:	e7d4      	b.n	8009124 <scalbn+0x74>
 800917a:	bf00      	nop
 800917c:	f3af 8000 	nop.w
 8009180:	c2f8f359 	.word	0xc2f8f359
 8009184:	01a56e1f 	.word	0x01a56e1f
 8009188:	8800759c 	.word	0x8800759c
 800918c:	7e37e43c 	.word	0x7e37e43c
 8009190:	8800759c 	.word	0x8800759c
 8009194:	fe37e43c 	.word	0xfe37e43c
 8009198:	c2f8f359 	.word	0xc2f8f359
 800919c:	81a56e1f 	.word	0x81a56e1f
 80091a0:	43500000 	.word	0x43500000
 80091a4:	ffff3cb0 	.word	0xffff3cb0
 80091a8:	3c900000 	.word	0x3c900000

080091ac <with_errno>:
 80091ac:	b510      	push	{r4, lr}
 80091ae:	ed2d 8b02 	vpush	{d8}
 80091b2:	eeb0 8a40 	vmov.f32	s16, s0
 80091b6:	eef0 8a60 	vmov.f32	s17, s1
 80091ba:	4604      	mov	r4, r0
 80091bc:	f001 f9ec 	bl	800a598 <__errno>
 80091c0:	eeb0 0a48 	vmov.f32	s0, s16
 80091c4:	eef0 0a68 	vmov.f32	s1, s17
 80091c8:	ecbd 8b02 	vpop	{d8}
 80091cc:	6004      	str	r4, [r0, #0]
 80091ce:	bd10      	pop	{r4, pc}

080091d0 <xflow>:
 80091d0:	4603      	mov	r3, r0
 80091d2:	b507      	push	{r0, r1, r2, lr}
 80091d4:	ec51 0b10 	vmov	r0, r1, d0
 80091d8:	b183      	cbz	r3, 80091fc <xflow+0x2c>
 80091da:	4602      	mov	r2, r0
 80091dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80091e0:	e9cd 2300 	strd	r2, r3, [sp]
 80091e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091e8:	f7f7 fa26 	bl	8000638 <__aeabi_dmul>
 80091ec:	ec41 0b10 	vmov	d0, r0, r1
 80091f0:	2022      	movs	r0, #34	@ 0x22
 80091f2:	b003      	add	sp, #12
 80091f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80091f8:	f7ff bfd8 	b.w	80091ac <with_errno>
 80091fc:	4602      	mov	r2, r0
 80091fe:	460b      	mov	r3, r1
 8009200:	e7ee      	b.n	80091e0 <xflow+0x10>
 8009202:	0000      	movs	r0, r0
 8009204:	0000      	movs	r0, r0
	...

08009208 <__math_uflow>:
 8009208:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009210 <__math_uflow+0x8>
 800920c:	f7ff bfe0 	b.w	80091d0 <xflow>
 8009210:	00000000 	.word	0x00000000
 8009214:	10000000 	.word	0x10000000

08009218 <__math_oflow>:
 8009218:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009220 <__math_oflow+0x8>
 800921c:	f7ff bfd8 	b.w	80091d0 <xflow>
 8009220:	00000000 	.word	0x00000000
 8009224:	70000000 	.word	0x70000000

08009228 <__kernel_rem_pio2>:
 8009228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800922c:	ed2d 8b02 	vpush	{d8}
 8009230:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8009234:	f112 0f14 	cmn.w	r2, #20
 8009238:	9306      	str	r3, [sp, #24]
 800923a:	9104      	str	r1, [sp, #16]
 800923c:	4bbe      	ldr	r3, [pc, #760]	@ (8009538 <__kernel_rem_pio2+0x310>)
 800923e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8009240:	9008      	str	r0, [sp, #32]
 8009242:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009246:	9300      	str	r3, [sp, #0]
 8009248:	9b06      	ldr	r3, [sp, #24]
 800924a:	f103 33ff 	add.w	r3, r3, #4294967295
 800924e:	bfa8      	it	ge
 8009250:	1ed4      	subge	r4, r2, #3
 8009252:	9305      	str	r3, [sp, #20]
 8009254:	bfb2      	itee	lt
 8009256:	2400      	movlt	r4, #0
 8009258:	2318      	movge	r3, #24
 800925a:	fb94 f4f3 	sdivge	r4, r4, r3
 800925e:	f06f 0317 	mvn.w	r3, #23
 8009262:	fb04 3303 	mla	r3, r4, r3, r3
 8009266:	eb03 0b02 	add.w	fp, r3, r2
 800926a:	9b00      	ldr	r3, [sp, #0]
 800926c:	9a05      	ldr	r2, [sp, #20]
 800926e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8009528 <__kernel_rem_pio2+0x300>
 8009272:	eb03 0802 	add.w	r8, r3, r2
 8009276:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009278:	1aa7      	subs	r7, r4, r2
 800927a:	ae20      	add	r6, sp, #128	@ 0x80
 800927c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009280:	2500      	movs	r5, #0
 8009282:	4545      	cmp	r5, r8
 8009284:	dd13      	ble.n	80092ae <__kernel_rem_pio2+0x86>
 8009286:	9b06      	ldr	r3, [sp, #24]
 8009288:	aa20      	add	r2, sp, #128	@ 0x80
 800928a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800928e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8009292:	f04f 0800 	mov.w	r8, #0
 8009296:	9b00      	ldr	r3, [sp, #0]
 8009298:	4598      	cmp	r8, r3
 800929a:	dc31      	bgt.n	8009300 <__kernel_rem_pio2+0xd8>
 800929c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8009528 <__kernel_rem_pio2+0x300>
 80092a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80092a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80092a8:	462f      	mov	r7, r5
 80092aa:	2600      	movs	r6, #0
 80092ac:	e01b      	b.n	80092e6 <__kernel_rem_pio2+0xbe>
 80092ae:	42ef      	cmn	r7, r5
 80092b0:	d407      	bmi.n	80092c2 <__kernel_rem_pio2+0x9a>
 80092b2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80092b6:	f7f7 f955 	bl	8000564 <__aeabi_i2d>
 80092ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 80092be:	3501      	adds	r5, #1
 80092c0:	e7df      	b.n	8009282 <__kernel_rem_pio2+0x5a>
 80092c2:	ec51 0b18 	vmov	r0, r1, d8
 80092c6:	e7f8      	b.n	80092ba <__kernel_rem_pio2+0x92>
 80092c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092cc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80092d0:	f7f7 f9b2 	bl	8000638 <__aeabi_dmul>
 80092d4:	4602      	mov	r2, r0
 80092d6:	460b      	mov	r3, r1
 80092d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092dc:	f7f6 fff6 	bl	80002cc <__adddf3>
 80092e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092e4:	3601      	adds	r6, #1
 80092e6:	9b05      	ldr	r3, [sp, #20]
 80092e8:	429e      	cmp	r6, r3
 80092ea:	f1a7 0708 	sub.w	r7, r7, #8
 80092ee:	ddeb      	ble.n	80092c8 <__kernel_rem_pio2+0xa0>
 80092f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80092f4:	f108 0801 	add.w	r8, r8, #1
 80092f8:	ecaa 7b02 	vstmia	sl!, {d7}
 80092fc:	3508      	adds	r5, #8
 80092fe:	e7ca      	b.n	8009296 <__kernel_rem_pio2+0x6e>
 8009300:	9b00      	ldr	r3, [sp, #0]
 8009302:	f8dd 8000 	ldr.w	r8, [sp]
 8009306:	aa0c      	add	r2, sp, #48	@ 0x30
 8009308:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800930c:	930a      	str	r3, [sp, #40]	@ 0x28
 800930e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009310:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009314:	9309      	str	r3, [sp, #36]	@ 0x24
 8009316:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800931a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800931c:	ab98      	add	r3, sp, #608	@ 0x260
 800931e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009322:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8009326:	ed8d 7b02 	vstr	d7, [sp, #8]
 800932a:	ac0c      	add	r4, sp, #48	@ 0x30
 800932c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800932e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8009332:	46a1      	mov	r9, r4
 8009334:	46c2      	mov	sl, r8
 8009336:	f1ba 0f00 	cmp.w	sl, #0
 800933a:	f1a5 0508 	sub.w	r5, r5, #8
 800933e:	dc77      	bgt.n	8009430 <__kernel_rem_pio2+0x208>
 8009340:	4658      	mov	r0, fp
 8009342:	ed9d 0b02 	vldr	d0, [sp, #8]
 8009346:	f7ff feb3 	bl	80090b0 <scalbn>
 800934a:	ec57 6b10 	vmov	r6, r7, d0
 800934e:	2200      	movs	r2, #0
 8009350:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8009354:	4630      	mov	r0, r6
 8009356:	4639      	mov	r1, r7
 8009358:	f7f7 f96e 	bl	8000638 <__aeabi_dmul>
 800935c:	ec41 0b10 	vmov	d0, r0, r1
 8009360:	f000 faba 	bl	80098d8 <floor>
 8009364:	4b75      	ldr	r3, [pc, #468]	@ (800953c <__kernel_rem_pio2+0x314>)
 8009366:	ec51 0b10 	vmov	r0, r1, d0
 800936a:	2200      	movs	r2, #0
 800936c:	f7f7 f964 	bl	8000638 <__aeabi_dmul>
 8009370:	4602      	mov	r2, r0
 8009372:	460b      	mov	r3, r1
 8009374:	4630      	mov	r0, r6
 8009376:	4639      	mov	r1, r7
 8009378:	f7f6 ffa6 	bl	80002c8 <__aeabi_dsub>
 800937c:	460f      	mov	r7, r1
 800937e:	4606      	mov	r6, r0
 8009380:	f7f7 fc0a 	bl	8000b98 <__aeabi_d2iz>
 8009384:	9002      	str	r0, [sp, #8]
 8009386:	f7f7 f8ed 	bl	8000564 <__aeabi_i2d>
 800938a:	4602      	mov	r2, r0
 800938c:	460b      	mov	r3, r1
 800938e:	4630      	mov	r0, r6
 8009390:	4639      	mov	r1, r7
 8009392:	f7f6 ff99 	bl	80002c8 <__aeabi_dsub>
 8009396:	f1bb 0f00 	cmp.w	fp, #0
 800939a:	4606      	mov	r6, r0
 800939c:	460f      	mov	r7, r1
 800939e:	dd6c      	ble.n	800947a <__kernel_rem_pio2+0x252>
 80093a0:	f108 31ff 	add.w	r1, r8, #4294967295
 80093a4:	ab0c      	add	r3, sp, #48	@ 0x30
 80093a6:	9d02      	ldr	r5, [sp, #8]
 80093a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80093ac:	f1cb 0018 	rsb	r0, fp, #24
 80093b0:	fa43 f200 	asr.w	r2, r3, r0
 80093b4:	4415      	add	r5, r2
 80093b6:	4082      	lsls	r2, r0
 80093b8:	1a9b      	subs	r3, r3, r2
 80093ba:	aa0c      	add	r2, sp, #48	@ 0x30
 80093bc:	9502      	str	r5, [sp, #8]
 80093be:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80093c2:	f1cb 0217 	rsb	r2, fp, #23
 80093c6:	fa43 f902 	asr.w	r9, r3, r2
 80093ca:	f1b9 0f00 	cmp.w	r9, #0
 80093ce:	dd64      	ble.n	800949a <__kernel_rem_pio2+0x272>
 80093d0:	9b02      	ldr	r3, [sp, #8]
 80093d2:	2200      	movs	r2, #0
 80093d4:	3301      	adds	r3, #1
 80093d6:	9302      	str	r3, [sp, #8]
 80093d8:	4615      	mov	r5, r2
 80093da:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80093de:	4590      	cmp	r8, r2
 80093e0:	f300 80b8 	bgt.w	8009554 <__kernel_rem_pio2+0x32c>
 80093e4:	f1bb 0f00 	cmp.w	fp, #0
 80093e8:	dd07      	ble.n	80093fa <__kernel_rem_pio2+0x1d2>
 80093ea:	f1bb 0f01 	cmp.w	fp, #1
 80093ee:	f000 80bf 	beq.w	8009570 <__kernel_rem_pio2+0x348>
 80093f2:	f1bb 0f02 	cmp.w	fp, #2
 80093f6:	f000 80c6 	beq.w	8009586 <__kernel_rem_pio2+0x35e>
 80093fa:	f1b9 0f02 	cmp.w	r9, #2
 80093fe:	d14c      	bne.n	800949a <__kernel_rem_pio2+0x272>
 8009400:	4632      	mov	r2, r6
 8009402:	463b      	mov	r3, r7
 8009404:	494e      	ldr	r1, [pc, #312]	@ (8009540 <__kernel_rem_pio2+0x318>)
 8009406:	2000      	movs	r0, #0
 8009408:	f7f6 ff5e 	bl	80002c8 <__aeabi_dsub>
 800940c:	4606      	mov	r6, r0
 800940e:	460f      	mov	r7, r1
 8009410:	2d00      	cmp	r5, #0
 8009412:	d042      	beq.n	800949a <__kernel_rem_pio2+0x272>
 8009414:	4658      	mov	r0, fp
 8009416:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8009530 <__kernel_rem_pio2+0x308>
 800941a:	f7ff fe49 	bl	80090b0 <scalbn>
 800941e:	4630      	mov	r0, r6
 8009420:	4639      	mov	r1, r7
 8009422:	ec53 2b10 	vmov	r2, r3, d0
 8009426:	f7f6 ff4f 	bl	80002c8 <__aeabi_dsub>
 800942a:	4606      	mov	r6, r0
 800942c:	460f      	mov	r7, r1
 800942e:	e034      	b.n	800949a <__kernel_rem_pio2+0x272>
 8009430:	4b44      	ldr	r3, [pc, #272]	@ (8009544 <__kernel_rem_pio2+0x31c>)
 8009432:	2200      	movs	r2, #0
 8009434:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009438:	f7f7 f8fe 	bl	8000638 <__aeabi_dmul>
 800943c:	f7f7 fbac 	bl	8000b98 <__aeabi_d2iz>
 8009440:	f7f7 f890 	bl	8000564 <__aeabi_i2d>
 8009444:	4b40      	ldr	r3, [pc, #256]	@ (8009548 <__kernel_rem_pio2+0x320>)
 8009446:	2200      	movs	r2, #0
 8009448:	4606      	mov	r6, r0
 800944a:	460f      	mov	r7, r1
 800944c:	f7f7 f8f4 	bl	8000638 <__aeabi_dmul>
 8009450:	4602      	mov	r2, r0
 8009452:	460b      	mov	r3, r1
 8009454:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009458:	f7f6 ff36 	bl	80002c8 <__aeabi_dsub>
 800945c:	f7f7 fb9c 	bl	8000b98 <__aeabi_d2iz>
 8009460:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009464:	f849 0b04 	str.w	r0, [r9], #4
 8009468:	4639      	mov	r1, r7
 800946a:	4630      	mov	r0, r6
 800946c:	f7f6 ff2e 	bl	80002cc <__adddf3>
 8009470:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009474:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009478:	e75d      	b.n	8009336 <__kernel_rem_pio2+0x10e>
 800947a:	d107      	bne.n	800948c <__kernel_rem_pio2+0x264>
 800947c:	f108 33ff 	add.w	r3, r8, #4294967295
 8009480:	aa0c      	add	r2, sp, #48	@ 0x30
 8009482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009486:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800948a:	e79e      	b.n	80093ca <__kernel_rem_pio2+0x1a2>
 800948c:	4b2f      	ldr	r3, [pc, #188]	@ (800954c <__kernel_rem_pio2+0x324>)
 800948e:	2200      	movs	r2, #0
 8009490:	f7f7 fb58 	bl	8000b44 <__aeabi_dcmpge>
 8009494:	2800      	cmp	r0, #0
 8009496:	d143      	bne.n	8009520 <__kernel_rem_pio2+0x2f8>
 8009498:	4681      	mov	r9, r0
 800949a:	2200      	movs	r2, #0
 800949c:	2300      	movs	r3, #0
 800949e:	4630      	mov	r0, r6
 80094a0:	4639      	mov	r1, r7
 80094a2:	f7f7 fb31 	bl	8000b08 <__aeabi_dcmpeq>
 80094a6:	2800      	cmp	r0, #0
 80094a8:	f000 80bf 	beq.w	800962a <__kernel_rem_pio2+0x402>
 80094ac:	f108 33ff 	add.w	r3, r8, #4294967295
 80094b0:	2200      	movs	r2, #0
 80094b2:	9900      	ldr	r1, [sp, #0]
 80094b4:	428b      	cmp	r3, r1
 80094b6:	da6e      	bge.n	8009596 <__kernel_rem_pio2+0x36e>
 80094b8:	2a00      	cmp	r2, #0
 80094ba:	f000 8089 	beq.w	80095d0 <__kernel_rem_pio2+0x3a8>
 80094be:	f108 38ff 	add.w	r8, r8, #4294967295
 80094c2:	ab0c      	add	r3, sp, #48	@ 0x30
 80094c4:	f1ab 0b18 	sub.w	fp, fp, #24
 80094c8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d0f6      	beq.n	80094be <__kernel_rem_pio2+0x296>
 80094d0:	4658      	mov	r0, fp
 80094d2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8009530 <__kernel_rem_pio2+0x308>
 80094d6:	f7ff fdeb 	bl	80090b0 <scalbn>
 80094da:	f108 0301 	add.w	r3, r8, #1
 80094de:	00da      	lsls	r2, r3, #3
 80094e0:	9205      	str	r2, [sp, #20]
 80094e2:	ec55 4b10 	vmov	r4, r5, d0
 80094e6:	aa70      	add	r2, sp, #448	@ 0x1c0
 80094e8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8009544 <__kernel_rem_pio2+0x31c>
 80094ec:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80094f0:	4646      	mov	r6, r8
 80094f2:	f04f 0a00 	mov.w	sl, #0
 80094f6:	2e00      	cmp	r6, #0
 80094f8:	f280 80cf 	bge.w	800969a <__kernel_rem_pio2+0x472>
 80094fc:	4644      	mov	r4, r8
 80094fe:	2c00      	cmp	r4, #0
 8009500:	f2c0 80fd 	blt.w	80096fe <__kernel_rem_pio2+0x4d6>
 8009504:	4b12      	ldr	r3, [pc, #72]	@ (8009550 <__kernel_rem_pio2+0x328>)
 8009506:	461f      	mov	r7, r3
 8009508:	ab70      	add	r3, sp, #448	@ 0x1c0
 800950a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800950e:	9306      	str	r3, [sp, #24]
 8009510:	f04f 0a00 	mov.w	sl, #0
 8009514:	f04f 0b00 	mov.w	fp, #0
 8009518:	2600      	movs	r6, #0
 800951a:	eba8 0504 	sub.w	r5, r8, r4
 800951e:	e0e2      	b.n	80096e6 <__kernel_rem_pio2+0x4be>
 8009520:	f04f 0902 	mov.w	r9, #2
 8009524:	e754      	b.n	80093d0 <__kernel_rem_pio2+0x1a8>
 8009526:	bf00      	nop
	...
 8009534:	3ff00000 	.word	0x3ff00000
 8009538:	0800cbe8 	.word	0x0800cbe8
 800953c:	40200000 	.word	0x40200000
 8009540:	3ff00000 	.word	0x3ff00000
 8009544:	3e700000 	.word	0x3e700000
 8009548:	41700000 	.word	0x41700000
 800954c:	3fe00000 	.word	0x3fe00000
 8009550:	0800cba8 	.word	0x0800cba8
 8009554:	f854 3b04 	ldr.w	r3, [r4], #4
 8009558:	b945      	cbnz	r5, 800956c <__kernel_rem_pio2+0x344>
 800955a:	b123      	cbz	r3, 8009566 <__kernel_rem_pio2+0x33e>
 800955c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8009560:	f844 3c04 	str.w	r3, [r4, #-4]
 8009564:	2301      	movs	r3, #1
 8009566:	3201      	adds	r2, #1
 8009568:	461d      	mov	r5, r3
 800956a:	e738      	b.n	80093de <__kernel_rem_pio2+0x1b6>
 800956c:	1acb      	subs	r3, r1, r3
 800956e:	e7f7      	b.n	8009560 <__kernel_rem_pio2+0x338>
 8009570:	f108 32ff 	add.w	r2, r8, #4294967295
 8009574:	ab0c      	add	r3, sp, #48	@ 0x30
 8009576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800957a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800957e:	a90c      	add	r1, sp, #48	@ 0x30
 8009580:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009584:	e739      	b.n	80093fa <__kernel_rem_pio2+0x1d2>
 8009586:	f108 32ff 	add.w	r2, r8, #4294967295
 800958a:	ab0c      	add	r3, sp, #48	@ 0x30
 800958c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009590:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009594:	e7f3      	b.n	800957e <__kernel_rem_pio2+0x356>
 8009596:	a90c      	add	r1, sp, #48	@ 0x30
 8009598:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800959c:	3b01      	subs	r3, #1
 800959e:	430a      	orrs	r2, r1
 80095a0:	e787      	b.n	80094b2 <__kernel_rem_pio2+0x28a>
 80095a2:	3401      	adds	r4, #1
 80095a4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80095a8:	2a00      	cmp	r2, #0
 80095aa:	d0fa      	beq.n	80095a2 <__kernel_rem_pio2+0x37a>
 80095ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095ae:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80095b2:	eb0d 0503 	add.w	r5, sp, r3
 80095b6:	9b06      	ldr	r3, [sp, #24]
 80095b8:	aa20      	add	r2, sp, #128	@ 0x80
 80095ba:	4443      	add	r3, r8
 80095bc:	f108 0701 	add.w	r7, r8, #1
 80095c0:	3d98      	subs	r5, #152	@ 0x98
 80095c2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80095c6:	4444      	add	r4, r8
 80095c8:	42bc      	cmp	r4, r7
 80095ca:	da04      	bge.n	80095d6 <__kernel_rem_pio2+0x3ae>
 80095cc:	46a0      	mov	r8, r4
 80095ce:	e6a2      	b.n	8009316 <__kernel_rem_pio2+0xee>
 80095d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095d2:	2401      	movs	r4, #1
 80095d4:	e7e6      	b.n	80095a4 <__kernel_rem_pio2+0x37c>
 80095d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095d8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80095dc:	f7f6 ffc2 	bl	8000564 <__aeabi_i2d>
 80095e0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80098a8 <__kernel_rem_pio2+0x680>
 80095e4:	e8e6 0102 	strd	r0, r1, [r6], #8
 80095e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80095ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80095f0:	46b2      	mov	sl, r6
 80095f2:	f04f 0800 	mov.w	r8, #0
 80095f6:	9b05      	ldr	r3, [sp, #20]
 80095f8:	4598      	cmp	r8, r3
 80095fa:	dd05      	ble.n	8009608 <__kernel_rem_pio2+0x3e0>
 80095fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009600:	3701      	adds	r7, #1
 8009602:	eca5 7b02 	vstmia	r5!, {d7}
 8009606:	e7df      	b.n	80095c8 <__kernel_rem_pio2+0x3a0>
 8009608:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800960c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009610:	f7f7 f812 	bl	8000638 <__aeabi_dmul>
 8009614:	4602      	mov	r2, r0
 8009616:	460b      	mov	r3, r1
 8009618:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800961c:	f7f6 fe56 	bl	80002cc <__adddf3>
 8009620:	f108 0801 	add.w	r8, r8, #1
 8009624:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009628:	e7e5      	b.n	80095f6 <__kernel_rem_pio2+0x3ce>
 800962a:	f1cb 0000 	rsb	r0, fp, #0
 800962e:	ec47 6b10 	vmov	d0, r6, r7
 8009632:	f7ff fd3d 	bl	80090b0 <scalbn>
 8009636:	ec55 4b10 	vmov	r4, r5, d0
 800963a:	4b9d      	ldr	r3, [pc, #628]	@ (80098b0 <__kernel_rem_pio2+0x688>)
 800963c:	2200      	movs	r2, #0
 800963e:	4620      	mov	r0, r4
 8009640:	4629      	mov	r1, r5
 8009642:	f7f7 fa7f 	bl	8000b44 <__aeabi_dcmpge>
 8009646:	b300      	cbz	r0, 800968a <__kernel_rem_pio2+0x462>
 8009648:	4b9a      	ldr	r3, [pc, #616]	@ (80098b4 <__kernel_rem_pio2+0x68c>)
 800964a:	2200      	movs	r2, #0
 800964c:	4620      	mov	r0, r4
 800964e:	4629      	mov	r1, r5
 8009650:	f7f6 fff2 	bl	8000638 <__aeabi_dmul>
 8009654:	f7f7 faa0 	bl	8000b98 <__aeabi_d2iz>
 8009658:	4606      	mov	r6, r0
 800965a:	f7f6 ff83 	bl	8000564 <__aeabi_i2d>
 800965e:	4b94      	ldr	r3, [pc, #592]	@ (80098b0 <__kernel_rem_pio2+0x688>)
 8009660:	2200      	movs	r2, #0
 8009662:	f7f6 ffe9 	bl	8000638 <__aeabi_dmul>
 8009666:	460b      	mov	r3, r1
 8009668:	4602      	mov	r2, r0
 800966a:	4629      	mov	r1, r5
 800966c:	4620      	mov	r0, r4
 800966e:	f7f6 fe2b 	bl	80002c8 <__aeabi_dsub>
 8009672:	f7f7 fa91 	bl	8000b98 <__aeabi_d2iz>
 8009676:	ab0c      	add	r3, sp, #48	@ 0x30
 8009678:	f10b 0b18 	add.w	fp, fp, #24
 800967c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009680:	f108 0801 	add.w	r8, r8, #1
 8009684:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8009688:	e722      	b.n	80094d0 <__kernel_rem_pio2+0x2a8>
 800968a:	4620      	mov	r0, r4
 800968c:	4629      	mov	r1, r5
 800968e:	f7f7 fa83 	bl	8000b98 <__aeabi_d2iz>
 8009692:	ab0c      	add	r3, sp, #48	@ 0x30
 8009694:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009698:	e71a      	b.n	80094d0 <__kernel_rem_pio2+0x2a8>
 800969a:	ab0c      	add	r3, sp, #48	@ 0x30
 800969c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80096a0:	f7f6 ff60 	bl	8000564 <__aeabi_i2d>
 80096a4:	4622      	mov	r2, r4
 80096a6:	462b      	mov	r3, r5
 80096a8:	f7f6 ffc6 	bl	8000638 <__aeabi_dmul>
 80096ac:	4652      	mov	r2, sl
 80096ae:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80096b2:	465b      	mov	r3, fp
 80096b4:	4620      	mov	r0, r4
 80096b6:	4629      	mov	r1, r5
 80096b8:	f7f6 ffbe 	bl	8000638 <__aeabi_dmul>
 80096bc:	3e01      	subs	r6, #1
 80096be:	4604      	mov	r4, r0
 80096c0:	460d      	mov	r5, r1
 80096c2:	e718      	b.n	80094f6 <__kernel_rem_pio2+0x2ce>
 80096c4:	9906      	ldr	r1, [sp, #24]
 80096c6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80096ca:	9106      	str	r1, [sp, #24]
 80096cc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80096d0:	f7f6 ffb2 	bl	8000638 <__aeabi_dmul>
 80096d4:	4602      	mov	r2, r0
 80096d6:	460b      	mov	r3, r1
 80096d8:	4650      	mov	r0, sl
 80096da:	4659      	mov	r1, fp
 80096dc:	f7f6 fdf6 	bl	80002cc <__adddf3>
 80096e0:	3601      	adds	r6, #1
 80096e2:	4682      	mov	sl, r0
 80096e4:	468b      	mov	fp, r1
 80096e6:	9b00      	ldr	r3, [sp, #0]
 80096e8:	429e      	cmp	r6, r3
 80096ea:	dc01      	bgt.n	80096f0 <__kernel_rem_pio2+0x4c8>
 80096ec:	42b5      	cmp	r5, r6
 80096ee:	dae9      	bge.n	80096c4 <__kernel_rem_pio2+0x49c>
 80096f0:	ab48      	add	r3, sp, #288	@ 0x120
 80096f2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80096f6:	e9c5 ab00 	strd	sl, fp, [r5]
 80096fa:	3c01      	subs	r4, #1
 80096fc:	e6ff      	b.n	80094fe <__kernel_rem_pio2+0x2d6>
 80096fe:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009700:	2b02      	cmp	r3, #2
 8009702:	dc0b      	bgt.n	800971c <__kernel_rem_pio2+0x4f4>
 8009704:	2b00      	cmp	r3, #0
 8009706:	dc39      	bgt.n	800977c <__kernel_rem_pio2+0x554>
 8009708:	d05d      	beq.n	80097c6 <__kernel_rem_pio2+0x59e>
 800970a:	9b02      	ldr	r3, [sp, #8]
 800970c:	f003 0007 	and.w	r0, r3, #7
 8009710:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8009714:	ecbd 8b02 	vpop	{d8}
 8009718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800971c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800971e:	2b03      	cmp	r3, #3
 8009720:	d1f3      	bne.n	800970a <__kernel_rem_pio2+0x4e2>
 8009722:	9b05      	ldr	r3, [sp, #20]
 8009724:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009728:	eb0d 0403 	add.w	r4, sp, r3
 800972c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8009730:	4625      	mov	r5, r4
 8009732:	46c2      	mov	sl, r8
 8009734:	f1ba 0f00 	cmp.w	sl, #0
 8009738:	f1a5 0508 	sub.w	r5, r5, #8
 800973c:	dc6b      	bgt.n	8009816 <__kernel_rem_pio2+0x5ee>
 800973e:	4645      	mov	r5, r8
 8009740:	2d01      	cmp	r5, #1
 8009742:	f1a4 0408 	sub.w	r4, r4, #8
 8009746:	f300 8087 	bgt.w	8009858 <__kernel_rem_pio2+0x630>
 800974a:	9c05      	ldr	r4, [sp, #20]
 800974c:	ab48      	add	r3, sp, #288	@ 0x120
 800974e:	441c      	add	r4, r3
 8009750:	2000      	movs	r0, #0
 8009752:	2100      	movs	r1, #0
 8009754:	f1b8 0f01 	cmp.w	r8, #1
 8009758:	f300 809c 	bgt.w	8009894 <__kernel_rem_pio2+0x66c>
 800975c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8009760:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8009764:	f1b9 0f00 	cmp.w	r9, #0
 8009768:	f040 80a6 	bne.w	80098b8 <__kernel_rem_pio2+0x690>
 800976c:	9b04      	ldr	r3, [sp, #16]
 800976e:	e9c3 7800 	strd	r7, r8, [r3]
 8009772:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8009776:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800977a:	e7c6      	b.n	800970a <__kernel_rem_pio2+0x4e2>
 800977c:	9d05      	ldr	r5, [sp, #20]
 800977e:	ab48      	add	r3, sp, #288	@ 0x120
 8009780:	441d      	add	r5, r3
 8009782:	4644      	mov	r4, r8
 8009784:	2000      	movs	r0, #0
 8009786:	2100      	movs	r1, #0
 8009788:	2c00      	cmp	r4, #0
 800978a:	da35      	bge.n	80097f8 <__kernel_rem_pio2+0x5d0>
 800978c:	f1b9 0f00 	cmp.w	r9, #0
 8009790:	d038      	beq.n	8009804 <__kernel_rem_pio2+0x5dc>
 8009792:	4602      	mov	r2, r0
 8009794:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009798:	9c04      	ldr	r4, [sp, #16]
 800979a:	e9c4 2300 	strd	r2, r3, [r4]
 800979e:	4602      	mov	r2, r0
 80097a0:	460b      	mov	r3, r1
 80097a2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80097a6:	f7f6 fd8f 	bl	80002c8 <__aeabi_dsub>
 80097aa:	ad4a      	add	r5, sp, #296	@ 0x128
 80097ac:	2401      	movs	r4, #1
 80097ae:	45a0      	cmp	r8, r4
 80097b0:	da2b      	bge.n	800980a <__kernel_rem_pio2+0x5e2>
 80097b2:	f1b9 0f00 	cmp.w	r9, #0
 80097b6:	d002      	beq.n	80097be <__kernel_rem_pio2+0x596>
 80097b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80097bc:	4619      	mov	r1, r3
 80097be:	9b04      	ldr	r3, [sp, #16]
 80097c0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80097c4:	e7a1      	b.n	800970a <__kernel_rem_pio2+0x4e2>
 80097c6:	9c05      	ldr	r4, [sp, #20]
 80097c8:	ab48      	add	r3, sp, #288	@ 0x120
 80097ca:	441c      	add	r4, r3
 80097cc:	2000      	movs	r0, #0
 80097ce:	2100      	movs	r1, #0
 80097d0:	f1b8 0f00 	cmp.w	r8, #0
 80097d4:	da09      	bge.n	80097ea <__kernel_rem_pio2+0x5c2>
 80097d6:	f1b9 0f00 	cmp.w	r9, #0
 80097da:	d002      	beq.n	80097e2 <__kernel_rem_pio2+0x5ba>
 80097dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80097e0:	4619      	mov	r1, r3
 80097e2:	9b04      	ldr	r3, [sp, #16]
 80097e4:	e9c3 0100 	strd	r0, r1, [r3]
 80097e8:	e78f      	b.n	800970a <__kernel_rem_pio2+0x4e2>
 80097ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80097ee:	f7f6 fd6d 	bl	80002cc <__adddf3>
 80097f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80097f6:	e7eb      	b.n	80097d0 <__kernel_rem_pio2+0x5a8>
 80097f8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80097fc:	f7f6 fd66 	bl	80002cc <__adddf3>
 8009800:	3c01      	subs	r4, #1
 8009802:	e7c1      	b.n	8009788 <__kernel_rem_pio2+0x560>
 8009804:	4602      	mov	r2, r0
 8009806:	460b      	mov	r3, r1
 8009808:	e7c6      	b.n	8009798 <__kernel_rem_pio2+0x570>
 800980a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800980e:	f7f6 fd5d 	bl	80002cc <__adddf3>
 8009812:	3401      	adds	r4, #1
 8009814:	e7cb      	b.n	80097ae <__kernel_rem_pio2+0x586>
 8009816:	ed95 7b00 	vldr	d7, [r5]
 800981a:	ed8d 7b00 	vstr	d7, [sp]
 800981e:	ed95 7b02 	vldr	d7, [r5, #8]
 8009822:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009826:	ec53 2b17 	vmov	r2, r3, d7
 800982a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800982e:	f7f6 fd4d 	bl	80002cc <__adddf3>
 8009832:	4602      	mov	r2, r0
 8009834:	460b      	mov	r3, r1
 8009836:	4606      	mov	r6, r0
 8009838:	460f      	mov	r7, r1
 800983a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800983e:	f7f6 fd43 	bl	80002c8 <__aeabi_dsub>
 8009842:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009846:	f7f6 fd41 	bl	80002cc <__adddf3>
 800984a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800984e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8009852:	e9c5 6700 	strd	r6, r7, [r5]
 8009856:	e76d      	b.n	8009734 <__kernel_rem_pio2+0x50c>
 8009858:	ed94 7b00 	vldr	d7, [r4]
 800985c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8009860:	ec51 0b17 	vmov	r0, r1, d7
 8009864:	4652      	mov	r2, sl
 8009866:	465b      	mov	r3, fp
 8009868:	ed8d 7b00 	vstr	d7, [sp]
 800986c:	f7f6 fd2e 	bl	80002cc <__adddf3>
 8009870:	4602      	mov	r2, r0
 8009872:	460b      	mov	r3, r1
 8009874:	4606      	mov	r6, r0
 8009876:	460f      	mov	r7, r1
 8009878:	e9dd 0100 	ldrd	r0, r1, [sp]
 800987c:	f7f6 fd24 	bl	80002c8 <__aeabi_dsub>
 8009880:	4652      	mov	r2, sl
 8009882:	465b      	mov	r3, fp
 8009884:	f7f6 fd22 	bl	80002cc <__adddf3>
 8009888:	3d01      	subs	r5, #1
 800988a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800988e:	e9c4 6700 	strd	r6, r7, [r4]
 8009892:	e755      	b.n	8009740 <__kernel_rem_pio2+0x518>
 8009894:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009898:	f7f6 fd18 	bl	80002cc <__adddf3>
 800989c:	f108 38ff 	add.w	r8, r8, #4294967295
 80098a0:	e758      	b.n	8009754 <__kernel_rem_pio2+0x52c>
 80098a2:	bf00      	nop
 80098a4:	f3af 8000 	nop.w
	...
 80098b0:	41700000 	.word	0x41700000
 80098b4:	3e700000 	.word	0x3e700000
 80098b8:	9b04      	ldr	r3, [sp, #16]
 80098ba:	9a04      	ldr	r2, [sp, #16]
 80098bc:	601f      	str	r7, [r3, #0]
 80098be:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80098c2:	605c      	str	r4, [r3, #4]
 80098c4:	609d      	str	r5, [r3, #8]
 80098c6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80098ca:	60d3      	str	r3, [r2, #12]
 80098cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80098d0:	6110      	str	r0, [r2, #16]
 80098d2:	6153      	str	r3, [r2, #20]
 80098d4:	e719      	b.n	800970a <__kernel_rem_pio2+0x4e2>
 80098d6:	bf00      	nop

080098d8 <floor>:
 80098d8:	ec51 0b10 	vmov	r0, r1, d0
 80098dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80098e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098e4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80098e8:	2e13      	cmp	r6, #19
 80098ea:	460c      	mov	r4, r1
 80098ec:	4605      	mov	r5, r0
 80098ee:	4680      	mov	r8, r0
 80098f0:	dc34      	bgt.n	800995c <floor+0x84>
 80098f2:	2e00      	cmp	r6, #0
 80098f4:	da17      	bge.n	8009926 <floor+0x4e>
 80098f6:	a332      	add	r3, pc, #200	@ (adr r3, 80099c0 <floor+0xe8>)
 80098f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fc:	f7f6 fce6 	bl	80002cc <__adddf3>
 8009900:	2200      	movs	r2, #0
 8009902:	2300      	movs	r3, #0
 8009904:	f7f7 f928 	bl	8000b58 <__aeabi_dcmpgt>
 8009908:	b150      	cbz	r0, 8009920 <floor+0x48>
 800990a:	2c00      	cmp	r4, #0
 800990c:	da55      	bge.n	80099ba <floor+0xe2>
 800990e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8009912:	432c      	orrs	r4, r5
 8009914:	2500      	movs	r5, #0
 8009916:	42ac      	cmp	r4, r5
 8009918:	4c2b      	ldr	r4, [pc, #172]	@ (80099c8 <floor+0xf0>)
 800991a:	bf08      	it	eq
 800991c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8009920:	4621      	mov	r1, r4
 8009922:	4628      	mov	r0, r5
 8009924:	e023      	b.n	800996e <floor+0x96>
 8009926:	4f29      	ldr	r7, [pc, #164]	@ (80099cc <floor+0xf4>)
 8009928:	4137      	asrs	r7, r6
 800992a:	ea01 0307 	and.w	r3, r1, r7
 800992e:	4303      	orrs	r3, r0
 8009930:	d01d      	beq.n	800996e <floor+0x96>
 8009932:	a323      	add	r3, pc, #140	@ (adr r3, 80099c0 <floor+0xe8>)
 8009934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009938:	f7f6 fcc8 	bl	80002cc <__adddf3>
 800993c:	2200      	movs	r2, #0
 800993e:	2300      	movs	r3, #0
 8009940:	f7f7 f90a 	bl	8000b58 <__aeabi_dcmpgt>
 8009944:	2800      	cmp	r0, #0
 8009946:	d0eb      	beq.n	8009920 <floor+0x48>
 8009948:	2c00      	cmp	r4, #0
 800994a:	bfbe      	ittt	lt
 800994c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8009950:	4133      	asrlt	r3, r6
 8009952:	18e4      	addlt	r4, r4, r3
 8009954:	ea24 0407 	bic.w	r4, r4, r7
 8009958:	2500      	movs	r5, #0
 800995a:	e7e1      	b.n	8009920 <floor+0x48>
 800995c:	2e33      	cmp	r6, #51	@ 0x33
 800995e:	dd0a      	ble.n	8009976 <floor+0x9e>
 8009960:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8009964:	d103      	bne.n	800996e <floor+0x96>
 8009966:	4602      	mov	r2, r0
 8009968:	460b      	mov	r3, r1
 800996a:	f7f6 fcaf 	bl	80002cc <__adddf3>
 800996e:	ec41 0b10 	vmov	d0, r0, r1
 8009972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009976:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800997a:	f04f 37ff 	mov.w	r7, #4294967295
 800997e:	40df      	lsrs	r7, r3
 8009980:	4207      	tst	r7, r0
 8009982:	d0f4      	beq.n	800996e <floor+0x96>
 8009984:	a30e      	add	r3, pc, #56	@ (adr r3, 80099c0 <floor+0xe8>)
 8009986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998a:	f7f6 fc9f 	bl	80002cc <__adddf3>
 800998e:	2200      	movs	r2, #0
 8009990:	2300      	movs	r3, #0
 8009992:	f7f7 f8e1 	bl	8000b58 <__aeabi_dcmpgt>
 8009996:	2800      	cmp	r0, #0
 8009998:	d0c2      	beq.n	8009920 <floor+0x48>
 800999a:	2c00      	cmp	r4, #0
 800999c:	da0a      	bge.n	80099b4 <floor+0xdc>
 800999e:	2e14      	cmp	r6, #20
 80099a0:	d101      	bne.n	80099a6 <floor+0xce>
 80099a2:	3401      	adds	r4, #1
 80099a4:	e006      	b.n	80099b4 <floor+0xdc>
 80099a6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80099aa:	2301      	movs	r3, #1
 80099ac:	40b3      	lsls	r3, r6
 80099ae:	441d      	add	r5, r3
 80099b0:	4545      	cmp	r5, r8
 80099b2:	d3f6      	bcc.n	80099a2 <floor+0xca>
 80099b4:	ea25 0507 	bic.w	r5, r5, r7
 80099b8:	e7b2      	b.n	8009920 <floor+0x48>
 80099ba:	2500      	movs	r5, #0
 80099bc:	462c      	mov	r4, r5
 80099be:	e7af      	b.n	8009920 <floor+0x48>
 80099c0:	8800759c 	.word	0x8800759c
 80099c4:	7e37e43c 	.word	0x7e37e43c
 80099c8:	bff00000 	.word	0xbff00000
 80099cc:	000fffff 	.word	0x000fffff

080099d0 <__cvt>:
 80099d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099d4:	ec57 6b10 	vmov	r6, r7, d0
 80099d8:	2f00      	cmp	r7, #0
 80099da:	460c      	mov	r4, r1
 80099dc:	4619      	mov	r1, r3
 80099de:	463b      	mov	r3, r7
 80099e0:	bfbb      	ittet	lt
 80099e2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80099e6:	461f      	movlt	r7, r3
 80099e8:	2300      	movge	r3, #0
 80099ea:	232d      	movlt	r3, #45	@ 0x2d
 80099ec:	700b      	strb	r3, [r1, #0]
 80099ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80099f0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80099f4:	4691      	mov	r9, r2
 80099f6:	f023 0820 	bic.w	r8, r3, #32
 80099fa:	bfbc      	itt	lt
 80099fc:	4632      	movlt	r2, r6
 80099fe:	4616      	movlt	r6, r2
 8009a00:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009a04:	d005      	beq.n	8009a12 <__cvt+0x42>
 8009a06:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009a0a:	d100      	bne.n	8009a0e <__cvt+0x3e>
 8009a0c:	3401      	adds	r4, #1
 8009a0e:	2102      	movs	r1, #2
 8009a10:	e000      	b.n	8009a14 <__cvt+0x44>
 8009a12:	2103      	movs	r1, #3
 8009a14:	ab03      	add	r3, sp, #12
 8009a16:	9301      	str	r3, [sp, #4]
 8009a18:	ab02      	add	r3, sp, #8
 8009a1a:	9300      	str	r3, [sp, #0]
 8009a1c:	ec47 6b10 	vmov	d0, r6, r7
 8009a20:	4653      	mov	r3, sl
 8009a22:	4622      	mov	r2, r4
 8009a24:	f000 fe70 	bl	800a708 <_dtoa_r>
 8009a28:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009a2c:	4605      	mov	r5, r0
 8009a2e:	d119      	bne.n	8009a64 <__cvt+0x94>
 8009a30:	f019 0f01 	tst.w	r9, #1
 8009a34:	d00e      	beq.n	8009a54 <__cvt+0x84>
 8009a36:	eb00 0904 	add.w	r9, r0, r4
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	4630      	mov	r0, r6
 8009a40:	4639      	mov	r1, r7
 8009a42:	f7f7 f861 	bl	8000b08 <__aeabi_dcmpeq>
 8009a46:	b108      	cbz	r0, 8009a4c <__cvt+0x7c>
 8009a48:	f8cd 900c 	str.w	r9, [sp, #12]
 8009a4c:	2230      	movs	r2, #48	@ 0x30
 8009a4e:	9b03      	ldr	r3, [sp, #12]
 8009a50:	454b      	cmp	r3, r9
 8009a52:	d31e      	bcc.n	8009a92 <__cvt+0xc2>
 8009a54:	9b03      	ldr	r3, [sp, #12]
 8009a56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a58:	1b5b      	subs	r3, r3, r5
 8009a5a:	4628      	mov	r0, r5
 8009a5c:	6013      	str	r3, [r2, #0]
 8009a5e:	b004      	add	sp, #16
 8009a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009a68:	eb00 0904 	add.w	r9, r0, r4
 8009a6c:	d1e5      	bne.n	8009a3a <__cvt+0x6a>
 8009a6e:	7803      	ldrb	r3, [r0, #0]
 8009a70:	2b30      	cmp	r3, #48	@ 0x30
 8009a72:	d10a      	bne.n	8009a8a <__cvt+0xba>
 8009a74:	2200      	movs	r2, #0
 8009a76:	2300      	movs	r3, #0
 8009a78:	4630      	mov	r0, r6
 8009a7a:	4639      	mov	r1, r7
 8009a7c:	f7f7 f844 	bl	8000b08 <__aeabi_dcmpeq>
 8009a80:	b918      	cbnz	r0, 8009a8a <__cvt+0xba>
 8009a82:	f1c4 0401 	rsb	r4, r4, #1
 8009a86:	f8ca 4000 	str.w	r4, [sl]
 8009a8a:	f8da 3000 	ldr.w	r3, [sl]
 8009a8e:	4499      	add	r9, r3
 8009a90:	e7d3      	b.n	8009a3a <__cvt+0x6a>
 8009a92:	1c59      	adds	r1, r3, #1
 8009a94:	9103      	str	r1, [sp, #12]
 8009a96:	701a      	strb	r2, [r3, #0]
 8009a98:	e7d9      	b.n	8009a4e <__cvt+0x7e>

08009a9a <__exponent>:
 8009a9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a9c:	2900      	cmp	r1, #0
 8009a9e:	bfba      	itte	lt
 8009aa0:	4249      	neglt	r1, r1
 8009aa2:	232d      	movlt	r3, #45	@ 0x2d
 8009aa4:	232b      	movge	r3, #43	@ 0x2b
 8009aa6:	2909      	cmp	r1, #9
 8009aa8:	7002      	strb	r2, [r0, #0]
 8009aaa:	7043      	strb	r3, [r0, #1]
 8009aac:	dd29      	ble.n	8009b02 <__exponent+0x68>
 8009aae:	f10d 0307 	add.w	r3, sp, #7
 8009ab2:	461d      	mov	r5, r3
 8009ab4:	270a      	movs	r7, #10
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	fbb1 f6f7 	udiv	r6, r1, r7
 8009abc:	fb07 1416 	mls	r4, r7, r6, r1
 8009ac0:	3430      	adds	r4, #48	@ 0x30
 8009ac2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009ac6:	460c      	mov	r4, r1
 8009ac8:	2c63      	cmp	r4, #99	@ 0x63
 8009aca:	f103 33ff 	add.w	r3, r3, #4294967295
 8009ace:	4631      	mov	r1, r6
 8009ad0:	dcf1      	bgt.n	8009ab6 <__exponent+0x1c>
 8009ad2:	3130      	adds	r1, #48	@ 0x30
 8009ad4:	1e94      	subs	r4, r2, #2
 8009ad6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009ada:	1c41      	adds	r1, r0, #1
 8009adc:	4623      	mov	r3, r4
 8009ade:	42ab      	cmp	r3, r5
 8009ae0:	d30a      	bcc.n	8009af8 <__exponent+0x5e>
 8009ae2:	f10d 0309 	add.w	r3, sp, #9
 8009ae6:	1a9b      	subs	r3, r3, r2
 8009ae8:	42ac      	cmp	r4, r5
 8009aea:	bf88      	it	hi
 8009aec:	2300      	movhi	r3, #0
 8009aee:	3302      	adds	r3, #2
 8009af0:	4403      	add	r3, r0
 8009af2:	1a18      	subs	r0, r3, r0
 8009af4:	b003      	add	sp, #12
 8009af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009af8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009afc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009b00:	e7ed      	b.n	8009ade <__exponent+0x44>
 8009b02:	2330      	movs	r3, #48	@ 0x30
 8009b04:	3130      	adds	r1, #48	@ 0x30
 8009b06:	7083      	strb	r3, [r0, #2]
 8009b08:	70c1      	strb	r1, [r0, #3]
 8009b0a:	1d03      	adds	r3, r0, #4
 8009b0c:	e7f1      	b.n	8009af2 <__exponent+0x58>
	...

08009b10 <_printf_float>:
 8009b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b14:	b08d      	sub	sp, #52	@ 0x34
 8009b16:	460c      	mov	r4, r1
 8009b18:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009b1c:	4616      	mov	r6, r2
 8009b1e:	461f      	mov	r7, r3
 8009b20:	4605      	mov	r5, r0
 8009b22:	f000 fcef 	bl	800a504 <_localeconv_r>
 8009b26:	6803      	ldr	r3, [r0, #0]
 8009b28:	9304      	str	r3, [sp, #16]
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7f6 fbc0 	bl	80002b0 <strlen>
 8009b30:	2300      	movs	r3, #0
 8009b32:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b34:	f8d8 3000 	ldr.w	r3, [r8]
 8009b38:	9005      	str	r0, [sp, #20]
 8009b3a:	3307      	adds	r3, #7
 8009b3c:	f023 0307 	bic.w	r3, r3, #7
 8009b40:	f103 0208 	add.w	r2, r3, #8
 8009b44:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009b48:	f8d4 b000 	ldr.w	fp, [r4]
 8009b4c:	f8c8 2000 	str.w	r2, [r8]
 8009b50:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b54:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009b58:	9307      	str	r3, [sp, #28]
 8009b5a:	f8cd 8018 	str.w	r8, [sp, #24]
 8009b5e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009b62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b66:	4b9c      	ldr	r3, [pc, #624]	@ (8009dd8 <_printf_float+0x2c8>)
 8009b68:	f04f 32ff 	mov.w	r2, #4294967295
 8009b6c:	f7f6 fffe 	bl	8000b6c <__aeabi_dcmpun>
 8009b70:	bb70      	cbnz	r0, 8009bd0 <_printf_float+0xc0>
 8009b72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b76:	4b98      	ldr	r3, [pc, #608]	@ (8009dd8 <_printf_float+0x2c8>)
 8009b78:	f04f 32ff 	mov.w	r2, #4294967295
 8009b7c:	f7f6 ffd8 	bl	8000b30 <__aeabi_dcmple>
 8009b80:	bb30      	cbnz	r0, 8009bd0 <_printf_float+0xc0>
 8009b82:	2200      	movs	r2, #0
 8009b84:	2300      	movs	r3, #0
 8009b86:	4640      	mov	r0, r8
 8009b88:	4649      	mov	r1, r9
 8009b8a:	f7f6 ffc7 	bl	8000b1c <__aeabi_dcmplt>
 8009b8e:	b110      	cbz	r0, 8009b96 <_printf_float+0x86>
 8009b90:	232d      	movs	r3, #45	@ 0x2d
 8009b92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b96:	4a91      	ldr	r2, [pc, #580]	@ (8009ddc <_printf_float+0x2cc>)
 8009b98:	4b91      	ldr	r3, [pc, #580]	@ (8009de0 <_printf_float+0x2d0>)
 8009b9a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009b9e:	bf94      	ite	ls
 8009ba0:	4690      	movls	r8, r2
 8009ba2:	4698      	movhi	r8, r3
 8009ba4:	2303      	movs	r3, #3
 8009ba6:	6123      	str	r3, [r4, #16]
 8009ba8:	f02b 0304 	bic.w	r3, fp, #4
 8009bac:	6023      	str	r3, [r4, #0]
 8009bae:	f04f 0900 	mov.w	r9, #0
 8009bb2:	9700      	str	r7, [sp, #0]
 8009bb4:	4633      	mov	r3, r6
 8009bb6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009bb8:	4621      	mov	r1, r4
 8009bba:	4628      	mov	r0, r5
 8009bbc:	f000 f9d2 	bl	8009f64 <_printf_common>
 8009bc0:	3001      	adds	r0, #1
 8009bc2:	f040 808d 	bne.w	8009ce0 <_printf_float+0x1d0>
 8009bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8009bca:	b00d      	add	sp, #52	@ 0x34
 8009bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bd0:	4642      	mov	r2, r8
 8009bd2:	464b      	mov	r3, r9
 8009bd4:	4640      	mov	r0, r8
 8009bd6:	4649      	mov	r1, r9
 8009bd8:	f7f6 ffc8 	bl	8000b6c <__aeabi_dcmpun>
 8009bdc:	b140      	cbz	r0, 8009bf0 <_printf_float+0xe0>
 8009bde:	464b      	mov	r3, r9
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	bfbc      	itt	lt
 8009be4:	232d      	movlt	r3, #45	@ 0x2d
 8009be6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009bea:	4a7e      	ldr	r2, [pc, #504]	@ (8009de4 <_printf_float+0x2d4>)
 8009bec:	4b7e      	ldr	r3, [pc, #504]	@ (8009de8 <_printf_float+0x2d8>)
 8009bee:	e7d4      	b.n	8009b9a <_printf_float+0x8a>
 8009bf0:	6863      	ldr	r3, [r4, #4]
 8009bf2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009bf6:	9206      	str	r2, [sp, #24]
 8009bf8:	1c5a      	adds	r2, r3, #1
 8009bfa:	d13b      	bne.n	8009c74 <_printf_float+0x164>
 8009bfc:	2306      	movs	r3, #6
 8009bfe:	6063      	str	r3, [r4, #4]
 8009c00:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009c04:	2300      	movs	r3, #0
 8009c06:	6022      	str	r2, [r4, #0]
 8009c08:	9303      	str	r3, [sp, #12]
 8009c0a:	ab0a      	add	r3, sp, #40	@ 0x28
 8009c0c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009c10:	ab09      	add	r3, sp, #36	@ 0x24
 8009c12:	9300      	str	r3, [sp, #0]
 8009c14:	6861      	ldr	r1, [r4, #4]
 8009c16:	ec49 8b10 	vmov	d0, r8, r9
 8009c1a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009c1e:	4628      	mov	r0, r5
 8009c20:	f7ff fed6 	bl	80099d0 <__cvt>
 8009c24:	9b06      	ldr	r3, [sp, #24]
 8009c26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009c28:	2b47      	cmp	r3, #71	@ 0x47
 8009c2a:	4680      	mov	r8, r0
 8009c2c:	d129      	bne.n	8009c82 <_printf_float+0x172>
 8009c2e:	1cc8      	adds	r0, r1, #3
 8009c30:	db02      	blt.n	8009c38 <_printf_float+0x128>
 8009c32:	6863      	ldr	r3, [r4, #4]
 8009c34:	4299      	cmp	r1, r3
 8009c36:	dd41      	ble.n	8009cbc <_printf_float+0x1ac>
 8009c38:	f1aa 0a02 	sub.w	sl, sl, #2
 8009c3c:	fa5f fa8a 	uxtb.w	sl, sl
 8009c40:	3901      	subs	r1, #1
 8009c42:	4652      	mov	r2, sl
 8009c44:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009c48:	9109      	str	r1, [sp, #36]	@ 0x24
 8009c4a:	f7ff ff26 	bl	8009a9a <__exponent>
 8009c4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009c50:	1813      	adds	r3, r2, r0
 8009c52:	2a01      	cmp	r2, #1
 8009c54:	4681      	mov	r9, r0
 8009c56:	6123      	str	r3, [r4, #16]
 8009c58:	dc02      	bgt.n	8009c60 <_printf_float+0x150>
 8009c5a:	6822      	ldr	r2, [r4, #0]
 8009c5c:	07d2      	lsls	r2, r2, #31
 8009c5e:	d501      	bpl.n	8009c64 <_printf_float+0x154>
 8009c60:	3301      	adds	r3, #1
 8009c62:	6123      	str	r3, [r4, #16]
 8009c64:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d0a2      	beq.n	8009bb2 <_printf_float+0xa2>
 8009c6c:	232d      	movs	r3, #45	@ 0x2d
 8009c6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c72:	e79e      	b.n	8009bb2 <_printf_float+0xa2>
 8009c74:	9a06      	ldr	r2, [sp, #24]
 8009c76:	2a47      	cmp	r2, #71	@ 0x47
 8009c78:	d1c2      	bne.n	8009c00 <_printf_float+0xf0>
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d1c0      	bne.n	8009c00 <_printf_float+0xf0>
 8009c7e:	2301      	movs	r3, #1
 8009c80:	e7bd      	b.n	8009bfe <_printf_float+0xee>
 8009c82:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009c86:	d9db      	bls.n	8009c40 <_printf_float+0x130>
 8009c88:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009c8c:	d118      	bne.n	8009cc0 <_printf_float+0x1b0>
 8009c8e:	2900      	cmp	r1, #0
 8009c90:	6863      	ldr	r3, [r4, #4]
 8009c92:	dd0b      	ble.n	8009cac <_printf_float+0x19c>
 8009c94:	6121      	str	r1, [r4, #16]
 8009c96:	b913      	cbnz	r3, 8009c9e <_printf_float+0x18e>
 8009c98:	6822      	ldr	r2, [r4, #0]
 8009c9a:	07d0      	lsls	r0, r2, #31
 8009c9c:	d502      	bpl.n	8009ca4 <_printf_float+0x194>
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	440b      	add	r3, r1
 8009ca2:	6123      	str	r3, [r4, #16]
 8009ca4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009ca6:	f04f 0900 	mov.w	r9, #0
 8009caa:	e7db      	b.n	8009c64 <_printf_float+0x154>
 8009cac:	b913      	cbnz	r3, 8009cb4 <_printf_float+0x1a4>
 8009cae:	6822      	ldr	r2, [r4, #0]
 8009cb0:	07d2      	lsls	r2, r2, #31
 8009cb2:	d501      	bpl.n	8009cb8 <_printf_float+0x1a8>
 8009cb4:	3302      	adds	r3, #2
 8009cb6:	e7f4      	b.n	8009ca2 <_printf_float+0x192>
 8009cb8:	2301      	movs	r3, #1
 8009cba:	e7f2      	b.n	8009ca2 <_printf_float+0x192>
 8009cbc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009cc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cc2:	4299      	cmp	r1, r3
 8009cc4:	db05      	blt.n	8009cd2 <_printf_float+0x1c2>
 8009cc6:	6823      	ldr	r3, [r4, #0]
 8009cc8:	6121      	str	r1, [r4, #16]
 8009cca:	07d8      	lsls	r0, r3, #31
 8009ccc:	d5ea      	bpl.n	8009ca4 <_printf_float+0x194>
 8009cce:	1c4b      	adds	r3, r1, #1
 8009cd0:	e7e7      	b.n	8009ca2 <_printf_float+0x192>
 8009cd2:	2900      	cmp	r1, #0
 8009cd4:	bfd4      	ite	le
 8009cd6:	f1c1 0202 	rsble	r2, r1, #2
 8009cda:	2201      	movgt	r2, #1
 8009cdc:	4413      	add	r3, r2
 8009cde:	e7e0      	b.n	8009ca2 <_printf_float+0x192>
 8009ce0:	6823      	ldr	r3, [r4, #0]
 8009ce2:	055a      	lsls	r2, r3, #21
 8009ce4:	d407      	bmi.n	8009cf6 <_printf_float+0x1e6>
 8009ce6:	6923      	ldr	r3, [r4, #16]
 8009ce8:	4642      	mov	r2, r8
 8009cea:	4631      	mov	r1, r6
 8009cec:	4628      	mov	r0, r5
 8009cee:	47b8      	blx	r7
 8009cf0:	3001      	adds	r0, #1
 8009cf2:	d12b      	bne.n	8009d4c <_printf_float+0x23c>
 8009cf4:	e767      	b.n	8009bc6 <_printf_float+0xb6>
 8009cf6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009cfa:	f240 80dd 	bls.w	8009eb8 <_printf_float+0x3a8>
 8009cfe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009d02:	2200      	movs	r2, #0
 8009d04:	2300      	movs	r3, #0
 8009d06:	f7f6 feff 	bl	8000b08 <__aeabi_dcmpeq>
 8009d0a:	2800      	cmp	r0, #0
 8009d0c:	d033      	beq.n	8009d76 <_printf_float+0x266>
 8009d0e:	4a37      	ldr	r2, [pc, #220]	@ (8009dec <_printf_float+0x2dc>)
 8009d10:	2301      	movs	r3, #1
 8009d12:	4631      	mov	r1, r6
 8009d14:	4628      	mov	r0, r5
 8009d16:	47b8      	blx	r7
 8009d18:	3001      	adds	r0, #1
 8009d1a:	f43f af54 	beq.w	8009bc6 <_printf_float+0xb6>
 8009d1e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009d22:	4543      	cmp	r3, r8
 8009d24:	db02      	blt.n	8009d2c <_printf_float+0x21c>
 8009d26:	6823      	ldr	r3, [r4, #0]
 8009d28:	07d8      	lsls	r0, r3, #31
 8009d2a:	d50f      	bpl.n	8009d4c <_printf_float+0x23c>
 8009d2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d30:	4631      	mov	r1, r6
 8009d32:	4628      	mov	r0, r5
 8009d34:	47b8      	blx	r7
 8009d36:	3001      	adds	r0, #1
 8009d38:	f43f af45 	beq.w	8009bc6 <_printf_float+0xb6>
 8009d3c:	f04f 0900 	mov.w	r9, #0
 8009d40:	f108 38ff 	add.w	r8, r8, #4294967295
 8009d44:	f104 0a1a 	add.w	sl, r4, #26
 8009d48:	45c8      	cmp	r8, r9
 8009d4a:	dc09      	bgt.n	8009d60 <_printf_float+0x250>
 8009d4c:	6823      	ldr	r3, [r4, #0]
 8009d4e:	079b      	lsls	r3, r3, #30
 8009d50:	f100 8103 	bmi.w	8009f5a <_printf_float+0x44a>
 8009d54:	68e0      	ldr	r0, [r4, #12]
 8009d56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d58:	4298      	cmp	r0, r3
 8009d5a:	bfb8      	it	lt
 8009d5c:	4618      	movlt	r0, r3
 8009d5e:	e734      	b.n	8009bca <_printf_float+0xba>
 8009d60:	2301      	movs	r3, #1
 8009d62:	4652      	mov	r2, sl
 8009d64:	4631      	mov	r1, r6
 8009d66:	4628      	mov	r0, r5
 8009d68:	47b8      	blx	r7
 8009d6a:	3001      	adds	r0, #1
 8009d6c:	f43f af2b 	beq.w	8009bc6 <_printf_float+0xb6>
 8009d70:	f109 0901 	add.w	r9, r9, #1
 8009d74:	e7e8      	b.n	8009d48 <_printf_float+0x238>
 8009d76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	dc39      	bgt.n	8009df0 <_printf_float+0x2e0>
 8009d7c:	4a1b      	ldr	r2, [pc, #108]	@ (8009dec <_printf_float+0x2dc>)
 8009d7e:	2301      	movs	r3, #1
 8009d80:	4631      	mov	r1, r6
 8009d82:	4628      	mov	r0, r5
 8009d84:	47b8      	blx	r7
 8009d86:	3001      	adds	r0, #1
 8009d88:	f43f af1d 	beq.w	8009bc6 <_printf_float+0xb6>
 8009d8c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009d90:	ea59 0303 	orrs.w	r3, r9, r3
 8009d94:	d102      	bne.n	8009d9c <_printf_float+0x28c>
 8009d96:	6823      	ldr	r3, [r4, #0]
 8009d98:	07d9      	lsls	r1, r3, #31
 8009d9a:	d5d7      	bpl.n	8009d4c <_printf_float+0x23c>
 8009d9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009da0:	4631      	mov	r1, r6
 8009da2:	4628      	mov	r0, r5
 8009da4:	47b8      	blx	r7
 8009da6:	3001      	adds	r0, #1
 8009da8:	f43f af0d 	beq.w	8009bc6 <_printf_float+0xb6>
 8009dac:	f04f 0a00 	mov.w	sl, #0
 8009db0:	f104 0b1a 	add.w	fp, r4, #26
 8009db4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009db6:	425b      	negs	r3, r3
 8009db8:	4553      	cmp	r3, sl
 8009dba:	dc01      	bgt.n	8009dc0 <_printf_float+0x2b0>
 8009dbc:	464b      	mov	r3, r9
 8009dbe:	e793      	b.n	8009ce8 <_printf_float+0x1d8>
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	465a      	mov	r2, fp
 8009dc4:	4631      	mov	r1, r6
 8009dc6:	4628      	mov	r0, r5
 8009dc8:	47b8      	blx	r7
 8009dca:	3001      	adds	r0, #1
 8009dcc:	f43f aefb 	beq.w	8009bc6 <_printf_float+0xb6>
 8009dd0:	f10a 0a01 	add.w	sl, sl, #1
 8009dd4:	e7ee      	b.n	8009db4 <_printf_float+0x2a4>
 8009dd6:	bf00      	nop
 8009dd8:	7fefffff 	.word	0x7fefffff
 8009ddc:	0800cbf8 	.word	0x0800cbf8
 8009de0:	0800cbfc 	.word	0x0800cbfc
 8009de4:	0800cc00 	.word	0x0800cc00
 8009de8:	0800cc04 	.word	0x0800cc04
 8009dec:	0800cc08 	.word	0x0800cc08
 8009df0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009df2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009df6:	4553      	cmp	r3, sl
 8009df8:	bfa8      	it	ge
 8009dfa:	4653      	movge	r3, sl
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	4699      	mov	r9, r3
 8009e00:	dc36      	bgt.n	8009e70 <_printf_float+0x360>
 8009e02:	f04f 0b00 	mov.w	fp, #0
 8009e06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e0a:	f104 021a 	add.w	r2, r4, #26
 8009e0e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009e10:	9306      	str	r3, [sp, #24]
 8009e12:	eba3 0309 	sub.w	r3, r3, r9
 8009e16:	455b      	cmp	r3, fp
 8009e18:	dc31      	bgt.n	8009e7e <_printf_float+0x36e>
 8009e1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e1c:	459a      	cmp	sl, r3
 8009e1e:	dc3a      	bgt.n	8009e96 <_printf_float+0x386>
 8009e20:	6823      	ldr	r3, [r4, #0]
 8009e22:	07da      	lsls	r2, r3, #31
 8009e24:	d437      	bmi.n	8009e96 <_printf_float+0x386>
 8009e26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e28:	ebaa 0903 	sub.w	r9, sl, r3
 8009e2c:	9b06      	ldr	r3, [sp, #24]
 8009e2e:	ebaa 0303 	sub.w	r3, sl, r3
 8009e32:	4599      	cmp	r9, r3
 8009e34:	bfa8      	it	ge
 8009e36:	4699      	movge	r9, r3
 8009e38:	f1b9 0f00 	cmp.w	r9, #0
 8009e3c:	dc33      	bgt.n	8009ea6 <_printf_float+0x396>
 8009e3e:	f04f 0800 	mov.w	r8, #0
 8009e42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e46:	f104 0b1a 	add.w	fp, r4, #26
 8009e4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e4c:	ebaa 0303 	sub.w	r3, sl, r3
 8009e50:	eba3 0309 	sub.w	r3, r3, r9
 8009e54:	4543      	cmp	r3, r8
 8009e56:	f77f af79 	ble.w	8009d4c <_printf_float+0x23c>
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	465a      	mov	r2, fp
 8009e5e:	4631      	mov	r1, r6
 8009e60:	4628      	mov	r0, r5
 8009e62:	47b8      	blx	r7
 8009e64:	3001      	adds	r0, #1
 8009e66:	f43f aeae 	beq.w	8009bc6 <_printf_float+0xb6>
 8009e6a:	f108 0801 	add.w	r8, r8, #1
 8009e6e:	e7ec      	b.n	8009e4a <_printf_float+0x33a>
 8009e70:	4642      	mov	r2, r8
 8009e72:	4631      	mov	r1, r6
 8009e74:	4628      	mov	r0, r5
 8009e76:	47b8      	blx	r7
 8009e78:	3001      	adds	r0, #1
 8009e7a:	d1c2      	bne.n	8009e02 <_printf_float+0x2f2>
 8009e7c:	e6a3      	b.n	8009bc6 <_printf_float+0xb6>
 8009e7e:	2301      	movs	r3, #1
 8009e80:	4631      	mov	r1, r6
 8009e82:	4628      	mov	r0, r5
 8009e84:	9206      	str	r2, [sp, #24]
 8009e86:	47b8      	blx	r7
 8009e88:	3001      	adds	r0, #1
 8009e8a:	f43f ae9c 	beq.w	8009bc6 <_printf_float+0xb6>
 8009e8e:	9a06      	ldr	r2, [sp, #24]
 8009e90:	f10b 0b01 	add.w	fp, fp, #1
 8009e94:	e7bb      	b.n	8009e0e <_printf_float+0x2fe>
 8009e96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e9a:	4631      	mov	r1, r6
 8009e9c:	4628      	mov	r0, r5
 8009e9e:	47b8      	blx	r7
 8009ea0:	3001      	adds	r0, #1
 8009ea2:	d1c0      	bne.n	8009e26 <_printf_float+0x316>
 8009ea4:	e68f      	b.n	8009bc6 <_printf_float+0xb6>
 8009ea6:	9a06      	ldr	r2, [sp, #24]
 8009ea8:	464b      	mov	r3, r9
 8009eaa:	4442      	add	r2, r8
 8009eac:	4631      	mov	r1, r6
 8009eae:	4628      	mov	r0, r5
 8009eb0:	47b8      	blx	r7
 8009eb2:	3001      	adds	r0, #1
 8009eb4:	d1c3      	bne.n	8009e3e <_printf_float+0x32e>
 8009eb6:	e686      	b.n	8009bc6 <_printf_float+0xb6>
 8009eb8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009ebc:	f1ba 0f01 	cmp.w	sl, #1
 8009ec0:	dc01      	bgt.n	8009ec6 <_printf_float+0x3b6>
 8009ec2:	07db      	lsls	r3, r3, #31
 8009ec4:	d536      	bpl.n	8009f34 <_printf_float+0x424>
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	4642      	mov	r2, r8
 8009eca:	4631      	mov	r1, r6
 8009ecc:	4628      	mov	r0, r5
 8009ece:	47b8      	blx	r7
 8009ed0:	3001      	adds	r0, #1
 8009ed2:	f43f ae78 	beq.w	8009bc6 <_printf_float+0xb6>
 8009ed6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009eda:	4631      	mov	r1, r6
 8009edc:	4628      	mov	r0, r5
 8009ede:	47b8      	blx	r7
 8009ee0:	3001      	adds	r0, #1
 8009ee2:	f43f ae70 	beq.w	8009bc6 <_printf_float+0xb6>
 8009ee6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009eea:	2200      	movs	r2, #0
 8009eec:	2300      	movs	r3, #0
 8009eee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ef2:	f7f6 fe09 	bl	8000b08 <__aeabi_dcmpeq>
 8009ef6:	b9c0      	cbnz	r0, 8009f2a <_printf_float+0x41a>
 8009ef8:	4653      	mov	r3, sl
 8009efa:	f108 0201 	add.w	r2, r8, #1
 8009efe:	4631      	mov	r1, r6
 8009f00:	4628      	mov	r0, r5
 8009f02:	47b8      	blx	r7
 8009f04:	3001      	adds	r0, #1
 8009f06:	d10c      	bne.n	8009f22 <_printf_float+0x412>
 8009f08:	e65d      	b.n	8009bc6 <_printf_float+0xb6>
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	465a      	mov	r2, fp
 8009f0e:	4631      	mov	r1, r6
 8009f10:	4628      	mov	r0, r5
 8009f12:	47b8      	blx	r7
 8009f14:	3001      	adds	r0, #1
 8009f16:	f43f ae56 	beq.w	8009bc6 <_printf_float+0xb6>
 8009f1a:	f108 0801 	add.w	r8, r8, #1
 8009f1e:	45d0      	cmp	r8, sl
 8009f20:	dbf3      	blt.n	8009f0a <_printf_float+0x3fa>
 8009f22:	464b      	mov	r3, r9
 8009f24:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009f28:	e6df      	b.n	8009cea <_printf_float+0x1da>
 8009f2a:	f04f 0800 	mov.w	r8, #0
 8009f2e:	f104 0b1a 	add.w	fp, r4, #26
 8009f32:	e7f4      	b.n	8009f1e <_printf_float+0x40e>
 8009f34:	2301      	movs	r3, #1
 8009f36:	4642      	mov	r2, r8
 8009f38:	e7e1      	b.n	8009efe <_printf_float+0x3ee>
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	464a      	mov	r2, r9
 8009f3e:	4631      	mov	r1, r6
 8009f40:	4628      	mov	r0, r5
 8009f42:	47b8      	blx	r7
 8009f44:	3001      	adds	r0, #1
 8009f46:	f43f ae3e 	beq.w	8009bc6 <_printf_float+0xb6>
 8009f4a:	f108 0801 	add.w	r8, r8, #1
 8009f4e:	68e3      	ldr	r3, [r4, #12]
 8009f50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009f52:	1a5b      	subs	r3, r3, r1
 8009f54:	4543      	cmp	r3, r8
 8009f56:	dcf0      	bgt.n	8009f3a <_printf_float+0x42a>
 8009f58:	e6fc      	b.n	8009d54 <_printf_float+0x244>
 8009f5a:	f04f 0800 	mov.w	r8, #0
 8009f5e:	f104 0919 	add.w	r9, r4, #25
 8009f62:	e7f4      	b.n	8009f4e <_printf_float+0x43e>

08009f64 <_printf_common>:
 8009f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f68:	4616      	mov	r6, r2
 8009f6a:	4698      	mov	r8, r3
 8009f6c:	688a      	ldr	r2, [r1, #8]
 8009f6e:	690b      	ldr	r3, [r1, #16]
 8009f70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009f74:	4293      	cmp	r3, r2
 8009f76:	bfb8      	it	lt
 8009f78:	4613      	movlt	r3, r2
 8009f7a:	6033      	str	r3, [r6, #0]
 8009f7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009f80:	4607      	mov	r7, r0
 8009f82:	460c      	mov	r4, r1
 8009f84:	b10a      	cbz	r2, 8009f8a <_printf_common+0x26>
 8009f86:	3301      	adds	r3, #1
 8009f88:	6033      	str	r3, [r6, #0]
 8009f8a:	6823      	ldr	r3, [r4, #0]
 8009f8c:	0699      	lsls	r1, r3, #26
 8009f8e:	bf42      	ittt	mi
 8009f90:	6833      	ldrmi	r3, [r6, #0]
 8009f92:	3302      	addmi	r3, #2
 8009f94:	6033      	strmi	r3, [r6, #0]
 8009f96:	6825      	ldr	r5, [r4, #0]
 8009f98:	f015 0506 	ands.w	r5, r5, #6
 8009f9c:	d106      	bne.n	8009fac <_printf_common+0x48>
 8009f9e:	f104 0a19 	add.w	sl, r4, #25
 8009fa2:	68e3      	ldr	r3, [r4, #12]
 8009fa4:	6832      	ldr	r2, [r6, #0]
 8009fa6:	1a9b      	subs	r3, r3, r2
 8009fa8:	42ab      	cmp	r3, r5
 8009faa:	dc26      	bgt.n	8009ffa <_printf_common+0x96>
 8009fac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009fb0:	6822      	ldr	r2, [r4, #0]
 8009fb2:	3b00      	subs	r3, #0
 8009fb4:	bf18      	it	ne
 8009fb6:	2301      	movne	r3, #1
 8009fb8:	0692      	lsls	r2, r2, #26
 8009fba:	d42b      	bmi.n	800a014 <_printf_common+0xb0>
 8009fbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009fc0:	4641      	mov	r1, r8
 8009fc2:	4638      	mov	r0, r7
 8009fc4:	47c8      	blx	r9
 8009fc6:	3001      	adds	r0, #1
 8009fc8:	d01e      	beq.n	800a008 <_printf_common+0xa4>
 8009fca:	6823      	ldr	r3, [r4, #0]
 8009fcc:	6922      	ldr	r2, [r4, #16]
 8009fce:	f003 0306 	and.w	r3, r3, #6
 8009fd2:	2b04      	cmp	r3, #4
 8009fd4:	bf02      	ittt	eq
 8009fd6:	68e5      	ldreq	r5, [r4, #12]
 8009fd8:	6833      	ldreq	r3, [r6, #0]
 8009fda:	1aed      	subeq	r5, r5, r3
 8009fdc:	68a3      	ldr	r3, [r4, #8]
 8009fde:	bf0c      	ite	eq
 8009fe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fe4:	2500      	movne	r5, #0
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	bfc4      	itt	gt
 8009fea:	1a9b      	subgt	r3, r3, r2
 8009fec:	18ed      	addgt	r5, r5, r3
 8009fee:	2600      	movs	r6, #0
 8009ff0:	341a      	adds	r4, #26
 8009ff2:	42b5      	cmp	r5, r6
 8009ff4:	d11a      	bne.n	800a02c <_printf_common+0xc8>
 8009ff6:	2000      	movs	r0, #0
 8009ff8:	e008      	b.n	800a00c <_printf_common+0xa8>
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	4652      	mov	r2, sl
 8009ffe:	4641      	mov	r1, r8
 800a000:	4638      	mov	r0, r7
 800a002:	47c8      	blx	r9
 800a004:	3001      	adds	r0, #1
 800a006:	d103      	bne.n	800a010 <_printf_common+0xac>
 800a008:	f04f 30ff 	mov.w	r0, #4294967295
 800a00c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a010:	3501      	adds	r5, #1
 800a012:	e7c6      	b.n	8009fa2 <_printf_common+0x3e>
 800a014:	18e1      	adds	r1, r4, r3
 800a016:	1c5a      	adds	r2, r3, #1
 800a018:	2030      	movs	r0, #48	@ 0x30
 800a01a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a01e:	4422      	add	r2, r4
 800a020:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a024:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a028:	3302      	adds	r3, #2
 800a02a:	e7c7      	b.n	8009fbc <_printf_common+0x58>
 800a02c:	2301      	movs	r3, #1
 800a02e:	4622      	mov	r2, r4
 800a030:	4641      	mov	r1, r8
 800a032:	4638      	mov	r0, r7
 800a034:	47c8      	blx	r9
 800a036:	3001      	adds	r0, #1
 800a038:	d0e6      	beq.n	800a008 <_printf_common+0xa4>
 800a03a:	3601      	adds	r6, #1
 800a03c:	e7d9      	b.n	8009ff2 <_printf_common+0x8e>
	...

0800a040 <_printf_i>:
 800a040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a044:	7e0f      	ldrb	r7, [r1, #24]
 800a046:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a048:	2f78      	cmp	r7, #120	@ 0x78
 800a04a:	4691      	mov	r9, r2
 800a04c:	4680      	mov	r8, r0
 800a04e:	460c      	mov	r4, r1
 800a050:	469a      	mov	sl, r3
 800a052:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a056:	d807      	bhi.n	800a068 <_printf_i+0x28>
 800a058:	2f62      	cmp	r7, #98	@ 0x62
 800a05a:	d80a      	bhi.n	800a072 <_printf_i+0x32>
 800a05c:	2f00      	cmp	r7, #0
 800a05e:	f000 80d2 	beq.w	800a206 <_printf_i+0x1c6>
 800a062:	2f58      	cmp	r7, #88	@ 0x58
 800a064:	f000 80b9 	beq.w	800a1da <_printf_i+0x19a>
 800a068:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a06c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a070:	e03a      	b.n	800a0e8 <_printf_i+0xa8>
 800a072:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a076:	2b15      	cmp	r3, #21
 800a078:	d8f6      	bhi.n	800a068 <_printf_i+0x28>
 800a07a:	a101      	add	r1, pc, #4	@ (adr r1, 800a080 <_printf_i+0x40>)
 800a07c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a080:	0800a0d9 	.word	0x0800a0d9
 800a084:	0800a0ed 	.word	0x0800a0ed
 800a088:	0800a069 	.word	0x0800a069
 800a08c:	0800a069 	.word	0x0800a069
 800a090:	0800a069 	.word	0x0800a069
 800a094:	0800a069 	.word	0x0800a069
 800a098:	0800a0ed 	.word	0x0800a0ed
 800a09c:	0800a069 	.word	0x0800a069
 800a0a0:	0800a069 	.word	0x0800a069
 800a0a4:	0800a069 	.word	0x0800a069
 800a0a8:	0800a069 	.word	0x0800a069
 800a0ac:	0800a1ed 	.word	0x0800a1ed
 800a0b0:	0800a117 	.word	0x0800a117
 800a0b4:	0800a1a7 	.word	0x0800a1a7
 800a0b8:	0800a069 	.word	0x0800a069
 800a0bc:	0800a069 	.word	0x0800a069
 800a0c0:	0800a20f 	.word	0x0800a20f
 800a0c4:	0800a069 	.word	0x0800a069
 800a0c8:	0800a117 	.word	0x0800a117
 800a0cc:	0800a069 	.word	0x0800a069
 800a0d0:	0800a069 	.word	0x0800a069
 800a0d4:	0800a1af 	.word	0x0800a1af
 800a0d8:	6833      	ldr	r3, [r6, #0]
 800a0da:	1d1a      	adds	r2, r3, #4
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	6032      	str	r2, [r6, #0]
 800a0e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a0e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	e09d      	b.n	800a228 <_printf_i+0x1e8>
 800a0ec:	6833      	ldr	r3, [r6, #0]
 800a0ee:	6820      	ldr	r0, [r4, #0]
 800a0f0:	1d19      	adds	r1, r3, #4
 800a0f2:	6031      	str	r1, [r6, #0]
 800a0f4:	0606      	lsls	r6, r0, #24
 800a0f6:	d501      	bpl.n	800a0fc <_printf_i+0xbc>
 800a0f8:	681d      	ldr	r5, [r3, #0]
 800a0fa:	e003      	b.n	800a104 <_printf_i+0xc4>
 800a0fc:	0645      	lsls	r5, r0, #25
 800a0fe:	d5fb      	bpl.n	800a0f8 <_printf_i+0xb8>
 800a100:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a104:	2d00      	cmp	r5, #0
 800a106:	da03      	bge.n	800a110 <_printf_i+0xd0>
 800a108:	232d      	movs	r3, #45	@ 0x2d
 800a10a:	426d      	negs	r5, r5
 800a10c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a110:	4859      	ldr	r0, [pc, #356]	@ (800a278 <_printf_i+0x238>)
 800a112:	230a      	movs	r3, #10
 800a114:	e011      	b.n	800a13a <_printf_i+0xfa>
 800a116:	6821      	ldr	r1, [r4, #0]
 800a118:	6833      	ldr	r3, [r6, #0]
 800a11a:	0608      	lsls	r0, r1, #24
 800a11c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a120:	d402      	bmi.n	800a128 <_printf_i+0xe8>
 800a122:	0649      	lsls	r1, r1, #25
 800a124:	bf48      	it	mi
 800a126:	b2ad      	uxthmi	r5, r5
 800a128:	2f6f      	cmp	r7, #111	@ 0x6f
 800a12a:	4853      	ldr	r0, [pc, #332]	@ (800a278 <_printf_i+0x238>)
 800a12c:	6033      	str	r3, [r6, #0]
 800a12e:	bf14      	ite	ne
 800a130:	230a      	movne	r3, #10
 800a132:	2308      	moveq	r3, #8
 800a134:	2100      	movs	r1, #0
 800a136:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a13a:	6866      	ldr	r6, [r4, #4]
 800a13c:	60a6      	str	r6, [r4, #8]
 800a13e:	2e00      	cmp	r6, #0
 800a140:	bfa2      	ittt	ge
 800a142:	6821      	ldrge	r1, [r4, #0]
 800a144:	f021 0104 	bicge.w	r1, r1, #4
 800a148:	6021      	strge	r1, [r4, #0]
 800a14a:	b90d      	cbnz	r5, 800a150 <_printf_i+0x110>
 800a14c:	2e00      	cmp	r6, #0
 800a14e:	d04b      	beq.n	800a1e8 <_printf_i+0x1a8>
 800a150:	4616      	mov	r6, r2
 800a152:	fbb5 f1f3 	udiv	r1, r5, r3
 800a156:	fb03 5711 	mls	r7, r3, r1, r5
 800a15a:	5dc7      	ldrb	r7, [r0, r7]
 800a15c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a160:	462f      	mov	r7, r5
 800a162:	42bb      	cmp	r3, r7
 800a164:	460d      	mov	r5, r1
 800a166:	d9f4      	bls.n	800a152 <_printf_i+0x112>
 800a168:	2b08      	cmp	r3, #8
 800a16a:	d10b      	bne.n	800a184 <_printf_i+0x144>
 800a16c:	6823      	ldr	r3, [r4, #0]
 800a16e:	07df      	lsls	r7, r3, #31
 800a170:	d508      	bpl.n	800a184 <_printf_i+0x144>
 800a172:	6923      	ldr	r3, [r4, #16]
 800a174:	6861      	ldr	r1, [r4, #4]
 800a176:	4299      	cmp	r1, r3
 800a178:	bfde      	ittt	le
 800a17a:	2330      	movle	r3, #48	@ 0x30
 800a17c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a180:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a184:	1b92      	subs	r2, r2, r6
 800a186:	6122      	str	r2, [r4, #16]
 800a188:	f8cd a000 	str.w	sl, [sp]
 800a18c:	464b      	mov	r3, r9
 800a18e:	aa03      	add	r2, sp, #12
 800a190:	4621      	mov	r1, r4
 800a192:	4640      	mov	r0, r8
 800a194:	f7ff fee6 	bl	8009f64 <_printf_common>
 800a198:	3001      	adds	r0, #1
 800a19a:	d14a      	bne.n	800a232 <_printf_i+0x1f2>
 800a19c:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a0:	b004      	add	sp, #16
 800a1a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1a6:	6823      	ldr	r3, [r4, #0]
 800a1a8:	f043 0320 	orr.w	r3, r3, #32
 800a1ac:	6023      	str	r3, [r4, #0]
 800a1ae:	4833      	ldr	r0, [pc, #204]	@ (800a27c <_printf_i+0x23c>)
 800a1b0:	2778      	movs	r7, #120	@ 0x78
 800a1b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a1b6:	6823      	ldr	r3, [r4, #0]
 800a1b8:	6831      	ldr	r1, [r6, #0]
 800a1ba:	061f      	lsls	r7, r3, #24
 800a1bc:	f851 5b04 	ldr.w	r5, [r1], #4
 800a1c0:	d402      	bmi.n	800a1c8 <_printf_i+0x188>
 800a1c2:	065f      	lsls	r7, r3, #25
 800a1c4:	bf48      	it	mi
 800a1c6:	b2ad      	uxthmi	r5, r5
 800a1c8:	6031      	str	r1, [r6, #0]
 800a1ca:	07d9      	lsls	r1, r3, #31
 800a1cc:	bf44      	itt	mi
 800a1ce:	f043 0320 	orrmi.w	r3, r3, #32
 800a1d2:	6023      	strmi	r3, [r4, #0]
 800a1d4:	b11d      	cbz	r5, 800a1de <_printf_i+0x19e>
 800a1d6:	2310      	movs	r3, #16
 800a1d8:	e7ac      	b.n	800a134 <_printf_i+0xf4>
 800a1da:	4827      	ldr	r0, [pc, #156]	@ (800a278 <_printf_i+0x238>)
 800a1dc:	e7e9      	b.n	800a1b2 <_printf_i+0x172>
 800a1de:	6823      	ldr	r3, [r4, #0]
 800a1e0:	f023 0320 	bic.w	r3, r3, #32
 800a1e4:	6023      	str	r3, [r4, #0]
 800a1e6:	e7f6      	b.n	800a1d6 <_printf_i+0x196>
 800a1e8:	4616      	mov	r6, r2
 800a1ea:	e7bd      	b.n	800a168 <_printf_i+0x128>
 800a1ec:	6833      	ldr	r3, [r6, #0]
 800a1ee:	6825      	ldr	r5, [r4, #0]
 800a1f0:	6961      	ldr	r1, [r4, #20]
 800a1f2:	1d18      	adds	r0, r3, #4
 800a1f4:	6030      	str	r0, [r6, #0]
 800a1f6:	062e      	lsls	r6, r5, #24
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	d501      	bpl.n	800a200 <_printf_i+0x1c0>
 800a1fc:	6019      	str	r1, [r3, #0]
 800a1fe:	e002      	b.n	800a206 <_printf_i+0x1c6>
 800a200:	0668      	lsls	r0, r5, #25
 800a202:	d5fb      	bpl.n	800a1fc <_printf_i+0x1bc>
 800a204:	8019      	strh	r1, [r3, #0]
 800a206:	2300      	movs	r3, #0
 800a208:	6123      	str	r3, [r4, #16]
 800a20a:	4616      	mov	r6, r2
 800a20c:	e7bc      	b.n	800a188 <_printf_i+0x148>
 800a20e:	6833      	ldr	r3, [r6, #0]
 800a210:	1d1a      	adds	r2, r3, #4
 800a212:	6032      	str	r2, [r6, #0]
 800a214:	681e      	ldr	r6, [r3, #0]
 800a216:	6862      	ldr	r2, [r4, #4]
 800a218:	2100      	movs	r1, #0
 800a21a:	4630      	mov	r0, r6
 800a21c:	f7f5 fff8 	bl	8000210 <memchr>
 800a220:	b108      	cbz	r0, 800a226 <_printf_i+0x1e6>
 800a222:	1b80      	subs	r0, r0, r6
 800a224:	6060      	str	r0, [r4, #4]
 800a226:	6863      	ldr	r3, [r4, #4]
 800a228:	6123      	str	r3, [r4, #16]
 800a22a:	2300      	movs	r3, #0
 800a22c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a230:	e7aa      	b.n	800a188 <_printf_i+0x148>
 800a232:	6923      	ldr	r3, [r4, #16]
 800a234:	4632      	mov	r2, r6
 800a236:	4649      	mov	r1, r9
 800a238:	4640      	mov	r0, r8
 800a23a:	47d0      	blx	sl
 800a23c:	3001      	adds	r0, #1
 800a23e:	d0ad      	beq.n	800a19c <_printf_i+0x15c>
 800a240:	6823      	ldr	r3, [r4, #0]
 800a242:	079b      	lsls	r3, r3, #30
 800a244:	d413      	bmi.n	800a26e <_printf_i+0x22e>
 800a246:	68e0      	ldr	r0, [r4, #12]
 800a248:	9b03      	ldr	r3, [sp, #12]
 800a24a:	4298      	cmp	r0, r3
 800a24c:	bfb8      	it	lt
 800a24e:	4618      	movlt	r0, r3
 800a250:	e7a6      	b.n	800a1a0 <_printf_i+0x160>
 800a252:	2301      	movs	r3, #1
 800a254:	4632      	mov	r2, r6
 800a256:	4649      	mov	r1, r9
 800a258:	4640      	mov	r0, r8
 800a25a:	47d0      	blx	sl
 800a25c:	3001      	adds	r0, #1
 800a25e:	d09d      	beq.n	800a19c <_printf_i+0x15c>
 800a260:	3501      	adds	r5, #1
 800a262:	68e3      	ldr	r3, [r4, #12]
 800a264:	9903      	ldr	r1, [sp, #12]
 800a266:	1a5b      	subs	r3, r3, r1
 800a268:	42ab      	cmp	r3, r5
 800a26a:	dcf2      	bgt.n	800a252 <_printf_i+0x212>
 800a26c:	e7eb      	b.n	800a246 <_printf_i+0x206>
 800a26e:	2500      	movs	r5, #0
 800a270:	f104 0619 	add.w	r6, r4, #25
 800a274:	e7f5      	b.n	800a262 <_printf_i+0x222>
 800a276:	bf00      	nop
 800a278:	0800cc0a 	.word	0x0800cc0a
 800a27c:	0800cc1b 	.word	0x0800cc1b

0800a280 <std>:
 800a280:	2300      	movs	r3, #0
 800a282:	b510      	push	{r4, lr}
 800a284:	4604      	mov	r4, r0
 800a286:	e9c0 3300 	strd	r3, r3, [r0]
 800a28a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a28e:	6083      	str	r3, [r0, #8]
 800a290:	8181      	strh	r1, [r0, #12]
 800a292:	6643      	str	r3, [r0, #100]	@ 0x64
 800a294:	81c2      	strh	r2, [r0, #14]
 800a296:	6183      	str	r3, [r0, #24]
 800a298:	4619      	mov	r1, r3
 800a29a:	2208      	movs	r2, #8
 800a29c:	305c      	adds	r0, #92	@ 0x5c
 800a29e:	f000 f928 	bl	800a4f2 <memset>
 800a2a2:	4b0d      	ldr	r3, [pc, #52]	@ (800a2d8 <std+0x58>)
 800a2a4:	6263      	str	r3, [r4, #36]	@ 0x24
 800a2a6:	4b0d      	ldr	r3, [pc, #52]	@ (800a2dc <std+0x5c>)
 800a2a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a2aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a2e0 <std+0x60>)
 800a2ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a2ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a2e4 <std+0x64>)
 800a2b0:	6323      	str	r3, [r4, #48]	@ 0x30
 800a2b2:	4b0d      	ldr	r3, [pc, #52]	@ (800a2e8 <std+0x68>)
 800a2b4:	6224      	str	r4, [r4, #32]
 800a2b6:	429c      	cmp	r4, r3
 800a2b8:	d006      	beq.n	800a2c8 <std+0x48>
 800a2ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a2be:	4294      	cmp	r4, r2
 800a2c0:	d002      	beq.n	800a2c8 <std+0x48>
 800a2c2:	33d0      	adds	r3, #208	@ 0xd0
 800a2c4:	429c      	cmp	r4, r3
 800a2c6:	d105      	bne.n	800a2d4 <std+0x54>
 800a2c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a2cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2d0:	f000 b98c 	b.w	800a5ec <__retarget_lock_init_recursive>
 800a2d4:	bd10      	pop	{r4, pc}
 800a2d6:	bf00      	nop
 800a2d8:	0800a46d 	.word	0x0800a46d
 800a2dc:	0800a48f 	.word	0x0800a48f
 800a2e0:	0800a4c7 	.word	0x0800a4c7
 800a2e4:	0800a4eb 	.word	0x0800a4eb
 800a2e8:	200023e8 	.word	0x200023e8

0800a2ec <stdio_exit_handler>:
 800a2ec:	4a02      	ldr	r2, [pc, #8]	@ (800a2f8 <stdio_exit_handler+0xc>)
 800a2ee:	4903      	ldr	r1, [pc, #12]	@ (800a2fc <stdio_exit_handler+0x10>)
 800a2f0:	4803      	ldr	r0, [pc, #12]	@ (800a300 <stdio_exit_handler+0x14>)
 800a2f2:	f000 b869 	b.w	800a3c8 <_fwalk_sglue>
 800a2f6:	bf00      	nop
 800a2f8:	20000028 	.word	0x20000028
 800a2fc:	0800bf4d 	.word	0x0800bf4d
 800a300:	20000038 	.word	0x20000038

0800a304 <cleanup_stdio>:
 800a304:	6841      	ldr	r1, [r0, #4]
 800a306:	4b0c      	ldr	r3, [pc, #48]	@ (800a338 <cleanup_stdio+0x34>)
 800a308:	4299      	cmp	r1, r3
 800a30a:	b510      	push	{r4, lr}
 800a30c:	4604      	mov	r4, r0
 800a30e:	d001      	beq.n	800a314 <cleanup_stdio+0x10>
 800a310:	f001 fe1c 	bl	800bf4c <_fflush_r>
 800a314:	68a1      	ldr	r1, [r4, #8]
 800a316:	4b09      	ldr	r3, [pc, #36]	@ (800a33c <cleanup_stdio+0x38>)
 800a318:	4299      	cmp	r1, r3
 800a31a:	d002      	beq.n	800a322 <cleanup_stdio+0x1e>
 800a31c:	4620      	mov	r0, r4
 800a31e:	f001 fe15 	bl	800bf4c <_fflush_r>
 800a322:	68e1      	ldr	r1, [r4, #12]
 800a324:	4b06      	ldr	r3, [pc, #24]	@ (800a340 <cleanup_stdio+0x3c>)
 800a326:	4299      	cmp	r1, r3
 800a328:	d004      	beq.n	800a334 <cleanup_stdio+0x30>
 800a32a:	4620      	mov	r0, r4
 800a32c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a330:	f001 be0c 	b.w	800bf4c <_fflush_r>
 800a334:	bd10      	pop	{r4, pc}
 800a336:	bf00      	nop
 800a338:	200023e8 	.word	0x200023e8
 800a33c:	20002450 	.word	0x20002450
 800a340:	200024b8 	.word	0x200024b8

0800a344 <global_stdio_init.part.0>:
 800a344:	b510      	push	{r4, lr}
 800a346:	4b0b      	ldr	r3, [pc, #44]	@ (800a374 <global_stdio_init.part.0+0x30>)
 800a348:	4c0b      	ldr	r4, [pc, #44]	@ (800a378 <global_stdio_init.part.0+0x34>)
 800a34a:	4a0c      	ldr	r2, [pc, #48]	@ (800a37c <global_stdio_init.part.0+0x38>)
 800a34c:	601a      	str	r2, [r3, #0]
 800a34e:	4620      	mov	r0, r4
 800a350:	2200      	movs	r2, #0
 800a352:	2104      	movs	r1, #4
 800a354:	f7ff ff94 	bl	800a280 <std>
 800a358:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a35c:	2201      	movs	r2, #1
 800a35e:	2109      	movs	r1, #9
 800a360:	f7ff ff8e 	bl	800a280 <std>
 800a364:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a368:	2202      	movs	r2, #2
 800a36a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a36e:	2112      	movs	r1, #18
 800a370:	f7ff bf86 	b.w	800a280 <std>
 800a374:	20002520 	.word	0x20002520
 800a378:	200023e8 	.word	0x200023e8
 800a37c:	0800a2ed 	.word	0x0800a2ed

0800a380 <__sfp_lock_acquire>:
 800a380:	4801      	ldr	r0, [pc, #4]	@ (800a388 <__sfp_lock_acquire+0x8>)
 800a382:	f000 b934 	b.w	800a5ee <__retarget_lock_acquire_recursive>
 800a386:	bf00      	nop
 800a388:	20002529 	.word	0x20002529

0800a38c <__sfp_lock_release>:
 800a38c:	4801      	ldr	r0, [pc, #4]	@ (800a394 <__sfp_lock_release+0x8>)
 800a38e:	f000 b92f 	b.w	800a5f0 <__retarget_lock_release_recursive>
 800a392:	bf00      	nop
 800a394:	20002529 	.word	0x20002529

0800a398 <__sinit>:
 800a398:	b510      	push	{r4, lr}
 800a39a:	4604      	mov	r4, r0
 800a39c:	f7ff fff0 	bl	800a380 <__sfp_lock_acquire>
 800a3a0:	6a23      	ldr	r3, [r4, #32]
 800a3a2:	b11b      	cbz	r3, 800a3ac <__sinit+0x14>
 800a3a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3a8:	f7ff bff0 	b.w	800a38c <__sfp_lock_release>
 800a3ac:	4b04      	ldr	r3, [pc, #16]	@ (800a3c0 <__sinit+0x28>)
 800a3ae:	6223      	str	r3, [r4, #32]
 800a3b0:	4b04      	ldr	r3, [pc, #16]	@ (800a3c4 <__sinit+0x2c>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d1f5      	bne.n	800a3a4 <__sinit+0xc>
 800a3b8:	f7ff ffc4 	bl	800a344 <global_stdio_init.part.0>
 800a3bc:	e7f2      	b.n	800a3a4 <__sinit+0xc>
 800a3be:	bf00      	nop
 800a3c0:	0800a305 	.word	0x0800a305
 800a3c4:	20002520 	.word	0x20002520

0800a3c8 <_fwalk_sglue>:
 800a3c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3cc:	4607      	mov	r7, r0
 800a3ce:	4688      	mov	r8, r1
 800a3d0:	4614      	mov	r4, r2
 800a3d2:	2600      	movs	r6, #0
 800a3d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3d8:	f1b9 0901 	subs.w	r9, r9, #1
 800a3dc:	d505      	bpl.n	800a3ea <_fwalk_sglue+0x22>
 800a3de:	6824      	ldr	r4, [r4, #0]
 800a3e0:	2c00      	cmp	r4, #0
 800a3e2:	d1f7      	bne.n	800a3d4 <_fwalk_sglue+0xc>
 800a3e4:	4630      	mov	r0, r6
 800a3e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3ea:	89ab      	ldrh	r3, [r5, #12]
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d907      	bls.n	800a400 <_fwalk_sglue+0x38>
 800a3f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3f4:	3301      	adds	r3, #1
 800a3f6:	d003      	beq.n	800a400 <_fwalk_sglue+0x38>
 800a3f8:	4629      	mov	r1, r5
 800a3fa:	4638      	mov	r0, r7
 800a3fc:	47c0      	blx	r8
 800a3fe:	4306      	orrs	r6, r0
 800a400:	3568      	adds	r5, #104	@ 0x68
 800a402:	e7e9      	b.n	800a3d8 <_fwalk_sglue+0x10>

0800a404 <sniprintf>:
 800a404:	b40c      	push	{r2, r3}
 800a406:	b530      	push	{r4, r5, lr}
 800a408:	4b17      	ldr	r3, [pc, #92]	@ (800a468 <sniprintf+0x64>)
 800a40a:	1e0c      	subs	r4, r1, #0
 800a40c:	681d      	ldr	r5, [r3, #0]
 800a40e:	b09d      	sub	sp, #116	@ 0x74
 800a410:	da08      	bge.n	800a424 <sniprintf+0x20>
 800a412:	238b      	movs	r3, #139	@ 0x8b
 800a414:	602b      	str	r3, [r5, #0]
 800a416:	f04f 30ff 	mov.w	r0, #4294967295
 800a41a:	b01d      	add	sp, #116	@ 0x74
 800a41c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a420:	b002      	add	sp, #8
 800a422:	4770      	bx	lr
 800a424:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a428:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a42c:	bf14      	ite	ne
 800a42e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a432:	4623      	moveq	r3, r4
 800a434:	9304      	str	r3, [sp, #16]
 800a436:	9307      	str	r3, [sp, #28]
 800a438:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a43c:	9002      	str	r0, [sp, #8]
 800a43e:	9006      	str	r0, [sp, #24]
 800a440:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a444:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a446:	ab21      	add	r3, sp, #132	@ 0x84
 800a448:	a902      	add	r1, sp, #8
 800a44a:	4628      	mov	r0, r5
 800a44c:	9301      	str	r3, [sp, #4]
 800a44e:	f001 fbfd 	bl	800bc4c <_svfiprintf_r>
 800a452:	1c43      	adds	r3, r0, #1
 800a454:	bfbc      	itt	lt
 800a456:	238b      	movlt	r3, #139	@ 0x8b
 800a458:	602b      	strlt	r3, [r5, #0]
 800a45a:	2c00      	cmp	r4, #0
 800a45c:	d0dd      	beq.n	800a41a <sniprintf+0x16>
 800a45e:	9b02      	ldr	r3, [sp, #8]
 800a460:	2200      	movs	r2, #0
 800a462:	701a      	strb	r2, [r3, #0]
 800a464:	e7d9      	b.n	800a41a <sniprintf+0x16>
 800a466:	bf00      	nop
 800a468:	20000034 	.word	0x20000034

0800a46c <__sread>:
 800a46c:	b510      	push	{r4, lr}
 800a46e:	460c      	mov	r4, r1
 800a470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a474:	f000 f86c 	bl	800a550 <_read_r>
 800a478:	2800      	cmp	r0, #0
 800a47a:	bfab      	itete	ge
 800a47c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a47e:	89a3      	ldrhlt	r3, [r4, #12]
 800a480:	181b      	addge	r3, r3, r0
 800a482:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a486:	bfac      	ite	ge
 800a488:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a48a:	81a3      	strhlt	r3, [r4, #12]
 800a48c:	bd10      	pop	{r4, pc}

0800a48e <__swrite>:
 800a48e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a492:	461f      	mov	r7, r3
 800a494:	898b      	ldrh	r3, [r1, #12]
 800a496:	05db      	lsls	r3, r3, #23
 800a498:	4605      	mov	r5, r0
 800a49a:	460c      	mov	r4, r1
 800a49c:	4616      	mov	r6, r2
 800a49e:	d505      	bpl.n	800a4ac <__swrite+0x1e>
 800a4a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4a4:	2302      	movs	r3, #2
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f000 f840 	bl	800a52c <_lseek_r>
 800a4ac:	89a3      	ldrh	r3, [r4, #12]
 800a4ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a4b6:	81a3      	strh	r3, [r4, #12]
 800a4b8:	4632      	mov	r2, r6
 800a4ba:	463b      	mov	r3, r7
 800a4bc:	4628      	mov	r0, r5
 800a4be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4c2:	f000 b857 	b.w	800a574 <_write_r>

0800a4c6 <__sseek>:
 800a4c6:	b510      	push	{r4, lr}
 800a4c8:	460c      	mov	r4, r1
 800a4ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4ce:	f000 f82d 	bl	800a52c <_lseek_r>
 800a4d2:	1c43      	adds	r3, r0, #1
 800a4d4:	89a3      	ldrh	r3, [r4, #12]
 800a4d6:	bf15      	itete	ne
 800a4d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a4da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a4de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a4e2:	81a3      	strheq	r3, [r4, #12]
 800a4e4:	bf18      	it	ne
 800a4e6:	81a3      	strhne	r3, [r4, #12]
 800a4e8:	bd10      	pop	{r4, pc}

0800a4ea <__sclose>:
 800a4ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4ee:	f000 b80d 	b.w	800a50c <_close_r>

0800a4f2 <memset>:
 800a4f2:	4402      	add	r2, r0
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d100      	bne.n	800a4fc <memset+0xa>
 800a4fa:	4770      	bx	lr
 800a4fc:	f803 1b01 	strb.w	r1, [r3], #1
 800a500:	e7f9      	b.n	800a4f6 <memset+0x4>
	...

0800a504 <_localeconv_r>:
 800a504:	4800      	ldr	r0, [pc, #0]	@ (800a508 <_localeconv_r+0x4>)
 800a506:	4770      	bx	lr
 800a508:	20000174 	.word	0x20000174

0800a50c <_close_r>:
 800a50c:	b538      	push	{r3, r4, r5, lr}
 800a50e:	4d06      	ldr	r5, [pc, #24]	@ (800a528 <_close_r+0x1c>)
 800a510:	2300      	movs	r3, #0
 800a512:	4604      	mov	r4, r0
 800a514:	4608      	mov	r0, r1
 800a516:	602b      	str	r3, [r5, #0]
 800a518:	f7f9 fea6 	bl	8004268 <_close>
 800a51c:	1c43      	adds	r3, r0, #1
 800a51e:	d102      	bne.n	800a526 <_close_r+0x1a>
 800a520:	682b      	ldr	r3, [r5, #0]
 800a522:	b103      	cbz	r3, 800a526 <_close_r+0x1a>
 800a524:	6023      	str	r3, [r4, #0]
 800a526:	bd38      	pop	{r3, r4, r5, pc}
 800a528:	20002524 	.word	0x20002524

0800a52c <_lseek_r>:
 800a52c:	b538      	push	{r3, r4, r5, lr}
 800a52e:	4d07      	ldr	r5, [pc, #28]	@ (800a54c <_lseek_r+0x20>)
 800a530:	4604      	mov	r4, r0
 800a532:	4608      	mov	r0, r1
 800a534:	4611      	mov	r1, r2
 800a536:	2200      	movs	r2, #0
 800a538:	602a      	str	r2, [r5, #0]
 800a53a:	461a      	mov	r2, r3
 800a53c:	f7f9 febb 	bl	80042b6 <_lseek>
 800a540:	1c43      	adds	r3, r0, #1
 800a542:	d102      	bne.n	800a54a <_lseek_r+0x1e>
 800a544:	682b      	ldr	r3, [r5, #0]
 800a546:	b103      	cbz	r3, 800a54a <_lseek_r+0x1e>
 800a548:	6023      	str	r3, [r4, #0]
 800a54a:	bd38      	pop	{r3, r4, r5, pc}
 800a54c:	20002524 	.word	0x20002524

0800a550 <_read_r>:
 800a550:	b538      	push	{r3, r4, r5, lr}
 800a552:	4d07      	ldr	r5, [pc, #28]	@ (800a570 <_read_r+0x20>)
 800a554:	4604      	mov	r4, r0
 800a556:	4608      	mov	r0, r1
 800a558:	4611      	mov	r1, r2
 800a55a:	2200      	movs	r2, #0
 800a55c:	602a      	str	r2, [r5, #0]
 800a55e:	461a      	mov	r2, r3
 800a560:	f7f9 fe49 	bl	80041f6 <_read>
 800a564:	1c43      	adds	r3, r0, #1
 800a566:	d102      	bne.n	800a56e <_read_r+0x1e>
 800a568:	682b      	ldr	r3, [r5, #0]
 800a56a:	b103      	cbz	r3, 800a56e <_read_r+0x1e>
 800a56c:	6023      	str	r3, [r4, #0]
 800a56e:	bd38      	pop	{r3, r4, r5, pc}
 800a570:	20002524 	.word	0x20002524

0800a574 <_write_r>:
 800a574:	b538      	push	{r3, r4, r5, lr}
 800a576:	4d07      	ldr	r5, [pc, #28]	@ (800a594 <_write_r+0x20>)
 800a578:	4604      	mov	r4, r0
 800a57a:	4608      	mov	r0, r1
 800a57c:	4611      	mov	r1, r2
 800a57e:	2200      	movs	r2, #0
 800a580:	602a      	str	r2, [r5, #0]
 800a582:	461a      	mov	r2, r3
 800a584:	f7f9 fe54 	bl	8004230 <_write>
 800a588:	1c43      	adds	r3, r0, #1
 800a58a:	d102      	bne.n	800a592 <_write_r+0x1e>
 800a58c:	682b      	ldr	r3, [r5, #0]
 800a58e:	b103      	cbz	r3, 800a592 <_write_r+0x1e>
 800a590:	6023      	str	r3, [r4, #0]
 800a592:	bd38      	pop	{r3, r4, r5, pc}
 800a594:	20002524 	.word	0x20002524

0800a598 <__errno>:
 800a598:	4b01      	ldr	r3, [pc, #4]	@ (800a5a0 <__errno+0x8>)
 800a59a:	6818      	ldr	r0, [r3, #0]
 800a59c:	4770      	bx	lr
 800a59e:	bf00      	nop
 800a5a0:	20000034 	.word	0x20000034

0800a5a4 <__libc_init_array>:
 800a5a4:	b570      	push	{r4, r5, r6, lr}
 800a5a6:	4d0d      	ldr	r5, [pc, #52]	@ (800a5dc <__libc_init_array+0x38>)
 800a5a8:	4c0d      	ldr	r4, [pc, #52]	@ (800a5e0 <__libc_init_array+0x3c>)
 800a5aa:	1b64      	subs	r4, r4, r5
 800a5ac:	10a4      	asrs	r4, r4, #2
 800a5ae:	2600      	movs	r6, #0
 800a5b0:	42a6      	cmp	r6, r4
 800a5b2:	d109      	bne.n	800a5c8 <__libc_init_array+0x24>
 800a5b4:	4d0b      	ldr	r5, [pc, #44]	@ (800a5e4 <__libc_init_array+0x40>)
 800a5b6:	4c0c      	ldr	r4, [pc, #48]	@ (800a5e8 <__libc_init_array+0x44>)
 800a5b8:	f002 f866 	bl	800c688 <_init>
 800a5bc:	1b64      	subs	r4, r4, r5
 800a5be:	10a4      	asrs	r4, r4, #2
 800a5c0:	2600      	movs	r6, #0
 800a5c2:	42a6      	cmp	r6, r4
 800a5c4:	d105      	bne.n	800a5d2 <__libc_init_array+0x2e>
 800a5c6:	bd70      	pop	{r4, r5, r6, pc}
 800a5c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5cc:	4798      	blx	r3
 800a5ce:	3601      	adds	r6, #1
 800a5d0:	e7ee      	b.n	800a5b0 <__libc_init_array+0xc>
 800a5d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5d6:	4798      	blx	r3
 800a5d8:	3601      	adds	r6, #1
 800a5da:	e7f2      	b.n	800a5c2 <__libc_init_array+0x1e>
 800a5dc:	0800cf70 	.word	0x0800cf70
 800a5e0:	0800cf70 	.word	0x0800cf70
 800a5e4:	0800cf70 	.word	0x0800cf70
 800a5e8:	0800cf74 	.word	0x0800cf74

0800a5ec <__retarget_lock_init_recursive>:
 800a5ec:	4770      	bx	lr

0800a5ee <__retarget_lock_acquire_recursive>:
 800a5ee:	4770      	bx	lr

0800a5f0 <__retarget_lock_release_recursive>:
 800a5f0:	4770      	bx	lr

0800a5f2 <quorem>:
 800a5f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f6:	6903      	ldr	r3, [r0, #16]
 800a5f8:	690c      	ldr	r4, [r1, #16]
 800a5fa:	42a3      	cmp	r3, r4
 800a5fc:	4607      	mov	r7, r0
 800a5fe:	db7e      	blt.n	800a6fe <quorem+0x10c>
 800a600:	3c01      	subs	r4, #1
 800a602:	f101 0814 	add.w	r8, r1, #20
 800a606:	00a3      	lsls	r3, r4, #2
 800a608:	f100 0514 	add.w	r5, r0, #20
 800a60c:	9300      	str	r3, [sp, #0]
 800a60e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a612:	9301      	str	r3, [sp, #4]
 800a614:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a618:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a61c:	3301      	adds	r3, #1
 800a61e:	429a      	cmp	r2, r3
 800a620:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a624:	fbb2 f6f3 	udiv	r6, r2, r3
 800a628:	d32e      	bcc.n	800a688 <quorem+0x96>
 800a62a:	f04f 0a00 	mov.w	sl, #0
 800a62e:	46c4      	mov	ip, r8
 800a630:	46ae      	mov	lr, r5
 800a632:	46d3      	mov	fp, sl
 800a634:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a638:	b298      	uxth	r0, r3
 800a63a:	fb06 a000 	mla	r0, r6, r0, sl
 800a63e:	0c02      	lsrs	r2, r0, #16
 800a640:	0c1b      	lsrs	r3, r3, #16
 800a642:	fb06 2303 	mla	r3, r6, r3, r2
 800a646:	f8de 2000 	ldr.w	r2, [lr]
 800a64a:	b280      	uxth	r0, r0
 800a64c:	b292      	uxth	r2, r2
 800a64e:	1a12      	subs	r2, r2, r0
 800a650:	445a      	add	r2, fp
 800a652:	f8de 0000 	ldr.w	r0, [lr]
 800a656:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a660:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a664:	b292      	uxth	r2, r2
 800a666:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a66a:	45e1      	cmp	r9, ip
 800a66c:	f84e 2b04 	str.w	r2, [lr], #4
 800a670:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a674:	d2de      	bcs.n	800a634 <quorem+0x42>
 800a676:	9b00      	ldr	r3, [sp, #0]
 800a678:	58eb      	ldr	r3, [r5, r3]
 800a67a:	b92b      	cbnz	r3, 800a688 <quorem+0x96>
 800a67c:	9b01      	ldr	r3, [sp, #4]
 800a67e:	3b04      	subs	r3, #4
 800a680:	429d      	cmp	r5, r3
 800a682:	461a      	mov	r2, r3
 800a684:	d32f      	bcc.n	800a6e6 <quorem+0xf4>
 800a686:	613c      	str	r4, [r7, #16]
 800a688:	4638      	mov	r0, r7
 800a68a:	f001 f97b 	bl	800b984 <__mcmp>
 800a68e:	2800      	cmp	r0, #0
 800a690:	db25      	blt.n	800a6de <quorem+0xec>
 800a692:	4629      	mov	r1, r5
 800a694:	2000      	movs	r0, #0
 800a696:	f858 2b04 	ldr.w	r2, [r8], #4
 800a69a:	f8d1 c000 	ldr.w	ip, [r1]
 800a69e:	fa1f fe82 	uxth.w	lr, r2
 800a6a2:	fa1f f38c 	uxth.w	r3, ip
 800a6a6:	eba3 030e 	sub.w	r3, r3, lr
 800a6aa:	4403      	add	r3, r0
 800a6ac:	0c12      	lsrs	r2, r2, #16
 800a6ae:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a6b2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a6b6:	b29b      	uxth	r3, r3
 800a6b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6bc:	45c1      	cmp	r9, r8
 800a6be:	f841 3b04 	str.w	r3, [r1], #4
 800a6c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a6c6:	d2e6      	bcs.n	800a696 <quorem+0xa4>
 800a6c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a6cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a6d0:	b922      	cbnz	r2, 800a6dc <quorem+0xea>
 800a6d2:	3b04      	subs	r3, #4
 800a6d4:	429d      	cmp	r5, r3
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	d30b      	bcc.n	800a6f2 <quorem+0x100>
 800a6da:	613c      	str	r4, [r7, #16]
 800a6dc:	3601      	adds	r6, #1
 800a6de:	4630      	mov	r0, r6
 800a6e0:	b003      	add	sp, #12
 800a6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e6:	6812      	ldr	r2, [r2, #0]
 800a6e8:	3b04      	subs	r3, #4
 800a6ea:	2a00      	cmp	r2, #0
 800a6ec:	d1cb      	bne.n	800a686 <quorem+0x94>
 800a6ee:	3c01      	subs	r4, #1
 800a6f0:	e7c6      	b.n	800a680 <quorem+0x8e>
 800a6f2:	6812      	ldr	r2, [r2, #0]
 800a6f4:	3b04      	subs	r3, #4
 800a6f6:	2a00      	cmp	r2, #0
 800a6f8:	d1ef      	bne.n	800a6da <quorem+0xe8>
 800a6fa:	3c01      	subs	r4, #1
 800a6fc:	e7ea      	b.n	800a6d4 <quorem+0xe2>
 800a6fe:	2000      	movs	r0, #0
 800a700:	e7ee      	b.n	800a6e0 <quorem+0xee>
 800a702:	0000      	movs	r0, r0
 800a704:	0000      	movs	r0, r0
	...

0800a708 <_dtoa_r>:
 800a708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a70c:	69c7      	ldr	r7, [r0, #28]
 800a70e:	b099      	sub	sp, #100	@ 0x64
 800a710:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a714:	ec55 4b10 	vmov	r4, r5, d0
 800a718:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a71a:	9109      	str	r1, [sp, #36]	@ 0x24
 800a71c:	4683      	mov	fp, r0
 800a71e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a720:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a722:	b97f      	cbnz	r7, 800a744 <_dtoa_r+0x3c>
 800a724:	2010      	movs	r0, #16
 800a726:	f000 fdfd 	bl	800b324 <malloc>
 800a72a:	4602      	mov	r2, r0
 800a72c:	f8cb 001c 	str.w	r0, [fp, #28]
 800a730:	b920      	cbnz	r0, 800a73c <_dtoa_r+0x34>
 800a732:	4ba7      	ldr	r3, [pc, #668]	@ (800a9d0 <_dtoa_r+0x2c8>)
 800a734:	21ef      	movs	r1, #239	@ 0xef
 800a736:	48a7      	ldr	r0, [pc, #668]	@ (800a9d4 <_dtoa_r+0x2cc>)
 800a738:	f001 fc68 	bl	800c00c <__assert_func>
 800a73c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a740:	6007      	str	r7, [r0, #0]
 800a742:	60c7      	str	r7, [r0, #12]
 800a744:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a748:	6819      	ldr	r1, [r3, #0]
 800a74a:	b159      	cbz	r1, 800a764 <_dtoa_r+0x5c>
 800a74c:	685a      	ldr	r2, [r3, #4]
 800a74e:	604a      	str	r2, [r1, #4]
 800a750:	2301      	movs	r3, #1
 800a752:	4093      	lsls	r3, r2
 800a754:	608b      	str	r3, [r1, #8]
 800a756:	4658      	mov	r0, fp
 800a758:	f000 feda 	bl	800b510 <_Bfree>
 800a75c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a760:	2200      	movs	r2, #0
 800a762:	601a      	str	r2, [r3, #0]
 800a764:	1e2b      	subs	r3, r5, #0
 800a766:	bfb9      	ittee	lt
 800a768:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a76c:	9303      	strlt	r3, [sp, #12]
 800a76e:	2300      	movge	r3, #0
 800a770:	6033      	strge	r3, [r6, #0]
 800a772:	9f03      	ldr	r7, [sp, #12]
 800a774:	4b98      	ldr	r3, [pc, #608]	@ (800a9d8 <_dtoa_r+0x2d0>)
 800a776:	bfbc      	itt	lt
 800a778:	2201      	movlt	r2, #1
 800a77a:	6032      	strlt	r2, [r6, #0]
 800a77c:	43bb      	bics	r3, r7
 800a77e:	d112      	bne.n	800a7a6 <_dtoa_r+0x9e>
 800a780:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a782:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a786:	6013      	str	r3, [r2, #0]
 800a788:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a78c:	4323      	orrs	r3, r4
 800a78e:	f000 854d 	beq.w	800b22c <_dtoa_r+0xb24>
 800a792:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a794:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a9ec <_dtoa_r+0x2e4>
 800a798:	2b00      	cmp	r3, #0
 800a79a:	f000 854f 	beq.w	800b23c <_dtoa_r+0xb34>
 800a79e:	f10a 0303 	add.w	r3, sl, #3
 800a7a2:	f000 bd49 	b.w	800b238 <_dtoa_r+0xb30>
 800a7a6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	ec51 0b17 	vmov	r0, r1, d7
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a7b6:	f7f6 f9a7 	bl	8000b08 <__aeabi_dcmpeq>
 800a7ba:	4680      	mov	r8, r0
 800a7bc:	b158      	cbz	r0, 800a7d6 <_dtoa_r+0xce>
 800a7be:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	6013      	str	r3, [r2, #0]
 800a7c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a7c6:	b113      	cbz	r3, 800a7ce <_dtoa_r+0xc6>
 800a7c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a7ca:	4b84      	ldr	r3, [pc, #528]	@ (800a9dc <_dtoa_r+0x2d4>)
 800a7cc:	6013      	str	r3, [r2, #0]
 800a7ce:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a9f0 <_dtoa_r+0x2e8>
 800a7d2:	f000 bd33 	b.w	800b23c <_dtoa_r+0xb34>
 800a7d6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a7da:	aa16      	add	r2, sp, #88	@ 0x58
 800a7dc:	a917      	add	r1, sp, #92	@ 0x5c
 800a7de:	4658      	mov	r0, fp
 800a7e0:	f001 f980 	bl	800bae4 <__d2b>
 800a7e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a7e8:	4681      	mov	r9, r0
 800a7ea:	2e00      	cmp	r6, #0
 800a7ec:	d077      	beq.n	800a8de <_dtoa_r+0x1d6>
 800a7ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a7f0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a7f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a7fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a800:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a804:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a808:	4619      	mov	r1, r3
 800a80a:	2200      	movs	r2, #0
 800a80c:	4b74      	ldr	r3, [pc, #464]	@ (800a9e0 <_dtoa_r+0x2d8>)
 800a80e:	f7f5 fd5b 	bl	80002c8 <__aeabi_dsub>
 800a812:	a369      	add	r3, pc, #420	@ (adr r3, 800a9b8 <_dtoa_r+0x2b0>)
 800a814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a818:	f7f5 ff0e 	bl	8000638 <__aeabi_dmul>
 800a81c:	a368      	add	r3, pc, #416	@ (adr r3, 800a9c0 <_dtoa_r+0x2b8>)
 800a81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a822:	f7f5 fd53 	bl	80002cc <__adddf3>
 800a826:	4604      	mov	r4, r0
 800a828:	4630      	mov	r0, r6
 800a82a:	460d      	mov	r5, r1
 800a82c:	f7f5 fe9a 	bl	8000564 <__aeabi_i2d>
 800a830:	a365      	add	r3, pc, #404	@ (adr r3, 800a9c8 <_dtoa_r+0x2c0>)
 800a832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a836:	f7f5 feff 	bl	8000638 <__aeabi_dmul>
 800a83a:	4602      	mov	r2, r0
 800a83c:	460b      	mov	r3, r1
 800a83e:	4620      	mov	r0, r4
 800a840:	4629      	mov	r1, r5
 800a842:	f7f5 fd43 	bl	80002cc <__adddf3>
 800a846:	4604      	mov	r4, r0
 800a848:	460d      	mov	r5, r1
 800a84a:	f7f6 f9a5 	bl	8000b98 <__aeabi_d2iz>
 800a84e:	2200      	movs	r2, #0
 800a850:	4607      	mov	r7, r0
 800a852:	2300      	movs	r3, #0
 800a854:	4620      	mov	r0, r4
 800a856:	4629      	mov	r1, r5
 800a858:	f7f6 f960 	bl	8000b1c <__aeabi_dcmplt>
 800a85c:	b140      	cbz	r0, 800a870 <_dtoa_r+0x168>
 800a85e:	4638      	mov	r0, r7
 800a860:	f7f5 fe80 	bl	8000564 <__aeabi_i2d>
 800a864:	4622      	mov	r2, r4
 800a866:	462b      	mov	r3, r5
 800a868:	f7f6 f94e 	bl	8000b08 <__aeabi_dcmpeq>
 800a86c:	b900      	cbnz	r0, 800a870 <_dtoa_r+0x168>
 800a86e:	3f01      	subs	r7, #1
 800a870:	2f16      	cmp	r7, #22
 800a872:	d851      	bhi.n	800a918 <_dtoa_r+0x210>
 800a874:	4b5b      	ldr	r3, [pc, #364]	@ (800a9e4 <_dtoa_r+0x2dc>)
 800a876:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a882:	f7f6 f94b 	bl	8000b1c <__aeabi_dcmplt>
 800a886:	2800      	cmp	r0, #0
 800a888:	d048      	beq.n	800a91c <_dtoa_r+0x214>
 800a88a:	3f01      	subs	r7, #1
 800a88c:	2300      	movs	r3, #0
 800a88e:	9312      	str	r3, [sp, #72]	@ 0x48
 800a890:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a892:	1b9b      	subs	r3, r3, r6
 800a894:	1e5a      	subs	r2, r3, #1
 800a896:	bf44      	itt	mi
 800a898:	f1c3 0801 	rsbmi	r8, r3, #1
 800a89c:	2300      	movmi	r3, #0
 800a89e:	9208      	str	r2, [sp, #32]
 800a8a0:	bf54      	ite	pl
 800a8a2:	f04f 0800 	movpl.w	r8, #0
 800a8a6:	9308      	strmi	r3, [sp, #32]
 800a8a8:	2f00      	cmp	r7, #0
 800a8aa:	db39      	blt.n	800a920 <_dtoa_r+0x218>
 800a8ac:	9b08      	ldr	r3, [sp, #32]
 800a8ae:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a8b0:	443b      	add	r3, r7
 800a8b2:	9308      	str	r3, [sp, #32]
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8ba:	2b09      	cmp	r3, #9
 800a8bc:	d864      	bhi.n	800a988 <_dtoa_r+0x280>
 800a8be:	2b05      	cmp	r3, #5
 800a8c0:	bfc4      	itt	gt
 800a8c2:	3b04      	subgt	r3, #4
 800a8c4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a8c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8c8:	f1a3 0302 	sub.w	r3, r3, #2
 800a8cc:	bfcc      	ite	gt
 800a8ce:	2400      	movgt	r4, #0
 800a8d0:	2401      	movle	r4, #1
 800a8d2:	2b03      	cmp	r3, #3
 800a8d4:	d863      	bhi.n	800a99e <_dtoa_r+0x296>
 800a8d6:	e8df f003 	tbb	[pc, r3]
 800a8da:	372a      	.short	0x372a
 800a8dc:	5535      	.short	0x5535
 800a8de:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a8e2:	441e      	add	r6, r3
 800a8e4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a8e8:	2b20      	cmp	r3, #32
 800a8ea:	bfc1      	itttt	gt
 800a8ec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a8f0:	409f      	lslgt	r7, r3
 800a8f2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a8f6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a8fa:	bfd6      	itet	le
 800a8fc:	f1c3 0320 	rsble	r3, r3, #32
 800a900:	ea47 0003 	orrgt.w	r0, r7, r3
 800a904:	fa04 f003 	lslle.w	r0, r4, r3
 800a908:	f7f5 fe1c 	bl	8000544 <__aeabi_ui2d>
 800a90c:	2201      	movs	r2, #1
 800a90e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a912:	3e01      	subs	r6, #1
 800a914:	9214      	str	r2, [sp, #80]	@ 0x50
 800a916:	e777      	b.n	800a808 <_dtoa_r+0x100>
 800a918:	2301      	movs	r3, #1
 800a91a:	e7b8      	b.n	800a88e <_dtoa_r+0x186>
 800a91c:	9012      	str	r0, [sp, #72]	@ 0x48
 800a91e:	e7b7      	b.n	800a890 <_dtoa_r+0x188>
 800a920:	427b      	negs	r3, r7
 800a922:	930a      	str	r3, [sp, #40]	@ 0x28
 800a924:	2300      	movs	r3, #0
 800a926:	eba8 0807 	sub.w	r8, r8, r7
 800a92a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a92c:	e7c4      	b.n	800a8b8 <_dtoa_r+0x1b0>
 800a92e:	2300      	movs	r3, #0
 800a930:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a932:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a934:	2b00      	cmp	r3, #0
 800a936:	dc35      	bgt.n	800a9a4 <_dtoa_r+0x29c>
 800a938:	2301      	movs	r3, #1
 800a93a:	9300      	str	r3, [sp, #0]
 800a93c:	9307      	str	r3, [sp, #28]
 800a93e:	461a      	mov	r2, r3
 800a940:	920e      	str	r2, [sp, #56]	@ 0x38
 800a942:	e00b      	b.n	800a95c <_dtoa_r+0x254>
 800a944:	2301      	movs	r3, #1
 800a946:	e7f3      	b.n	800a930 <_dtoa_r+0x228>
 800a948:	2300      	movs	r3, #0
 800a94a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a94c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a94e:	18fb      	adds	r3, r7, r3
 800a950:	9300      	str	r3, [sp, #0]
 800a952:	3301      	adds	r3, #1
 800a954:	2b01      	cmp	r3, #1
 800a956:	9307      	str	r3, [sp, #28]
 800a958:	bfb8      	it	lt
 800a95a:	2301      	movlt	r3, #1
 800a95c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a960:	2100      	movs	r1, #0
 800a962:	2204      	movs	r2, #4
 800a964:	f102 0514 	add.w	r5, r2, #20
 800a968:	429d      	cmp	r5, r3
 800a96a:	d91f      	bls.n	800a9ac <_dtoa_r+0x2a4>
 800a96c:	6041      	str	r1, [r0, #4]
 800a96e:	4658      	mov	r0, fp
 800a970:	f000 fd8e 	bl	800b490 <_Balloc>
 800a974:	4682      	mov	sl, r0
 800a976:	2800      	cmp	r0, #0
 800a978:	d13c      	bne.n	800a9f4 <_dtoa_r+0x2ec>
 800a97a:	4b1b      	ldr	r3, [pc, #108]	@ (800a9e8 <_dtoa_r+0x2e0>)
 800a97c:	4602      	mov	r2, r0
 800a97e:	f240 11af 	movw	r1, #431	@ 0x1af
 800a982:	e6d8      	b.n	800a736 <_dtoa_r+0x2e>
 800a984:	2301      	movs	r3, #1
 800a986:	e7e0      	b.n	800a94a <_dtoa_r+0x242>
 800a988:	2401      	movs	r4, #1
 800a98a:	2300      	movs	r3, #0
 800a98c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a98e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a990:	f04f 33ff 	mov.w	r3, #4294967295
 800a994:	9300      	str	r3, [sp, #0]
 800a996:	9307      	str	r3, [sp, #28]
 800a998:	2200      	movs	r2, #0
 800a99a:	2312      	movs	r3, #18
 800a99c:	e7d0      	b.n	800a940 <_dtoa_r+0x238>
 800a99e:	2301      	movs	r3, #1
 800a9a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a9a2:	e7f5      	b.n	800a990 <_dtoa_r+0x288>
 800a9a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9a6:	9300      	str	r3, [sp, #0]
 800a9a8:	9307      	str	r3, [sp, #28]
 800a9aa:	e7d7      	b.n	800a95c <_dtoa_r+0x254>
 800a9ac:	3101      	adds	r1, #1
 800a9ae:	0052      	lsls	r2, r2, #1
 800a9b0:	e7d8      	b.n	800a964 <_dtoa_r+0x25c>
 800a9b2:	bf00      	nop
 800a9b4:	f3af 8000 	nop.w
 800a9b8:	636f4361 	.word	0x636f4361
 800a9bc:	3fd287a7 	.word	0x3fd287a7
 800a9c0:	8b60c8b3 	.word	0x8b60c8b3
 800a9c4:	3fc68a28 	.word	0x3fc68a28
 800a9c8:	509f79fb 	.word	0x509f79fb
 800a9cc:	3fd34413 	.word	0x3fd34413
 800a9d0:	0800cc39 	.word	0x0800cc39
 800a9d4:	0800cc50 	.word	0x0800cc50
 800a9d8:	7ff00000 	.word	0x7ff00000
 800a9dc:	0800cc09 	.word	0x0800cc09
 800a9e0:	3ff80000 	.word	0x3ff80000
 800a9e4:	0800cd48 	.word	0x0800cd48
 800a9e8:	0800cca8 	.word	0x0800cca8
 800a9ec:	0800cc35 	.word	0x0800cc35
 800a9f0:	0800cc08 	.word	0x0800cc08
 800a9f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a9f8:	6018      	str	r0, [r3, #0]
 800a9fa:	9b07      	ldr	r3, [sp, #28]
 800a9fc:	2b0e      	cmp	r3, #14
 800a9fe:	f200 80a4 	bhi.w	800ab4a <_dtoa_r+0x442>
 800aa02:	2c00      	cmp	r4, #0
 800aa04:	f000 80a1 	beq.w	800ab4a <_dtoa_r+0x442>
 800aa08:	2f00      	cmp	r7, #0
 800aa0a:	dd33      	ble.n	800aa74 <_dtoa_r+0x36c>
 800aa0c:	4bad      	ldr	r3, [pc, #692]	@ (800acc4 <_dtoa_r+0x5bc>)
 800aa0e:	f007 020f 	and.w	r2, r7, #15
 800aa12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa16:	ed93 7b00 	vldr	d7, [r3]
 800aa1a:	05f8      	lsls	r0, r7, #23
 800aa1c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800aa20:	ea4f 1427 	mov.w	r4, r7, asr #4
 800aa24:	d516      	bpl.n	800aa54 <_dtoa_r+0x34c>
 800aa26:	4ba8      	ldr	r3, [pc, #672]	@ (800acc8 <_dtoa_r+0x5c0>)
 800aa28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aa30:	f7f5 ff2c 	bl	800088c <__aeabi_ddiv>
 800aa34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa38:	f004 040f 	and.w	r4, r4, #15
 800aa3c:	2603      	movs	r6, #3
 800aa3e:	4da2      	ldr	r5, [pc, #648]	@ (800acc8 <_dtoa_r+0x5c0>)
 800aa40:	b954      	cbnz	r4, 800aa58 <_dtoa_r+0x350>
 800aa42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa4a:	f7f5 ff1f 	bl	800088c <__aeabi_ddiv>
 800aa4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa52:	e028      	b.n	800aaa6 <_dtoa_r+0x39e>
 800aa54:	2602      	movs	r6, #2
 800aa56:	e7f2      	b.n	800aa3e <_dtoa_r+0x336>
 800aa58:	07e1      	lsls	r1, r4, #31
 800aa5a:	d508      	bpl.n	800aa6e <_dtoa_r+0x366>
 800aa5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa60:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aa64:	f7f5 fde8 	bl	8000638 <__aeabi_dmul>
 800aa68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa6c:	3601      	adds	r6, #1
 800aa6e:	1064      	asrs	r4, r4, #1
 800aa70:	3508      	adds	r5, #8
 800aa72:	e7e5      	b.n	800aa40 <_dtoa_r+0x338>
 800aa74:	f000 80d2 	beq.w	800ac1c <_dtoa_r+0x514>
 800aa78:	427c      	negs	r4, r7
 800aa7a:	4b92      	ldr	r3, [pc, #584]	@ (800acc4 <_dtoa_r+0x5bc>)
 800aa7c:	4d92      	ldr	r5, [pc, #584]	@ (800acc8 <_dtoa_r+0x5c0>)
 800aa7e:	f004 020f 	and.w	r2, r4, #15
 800aa82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa8e:	f7f5 fdd3 	bl	8000638 <__aeabi_dmul>
 800aa92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa96:	1124      	asrs	r4, r4, #4
 800aa98:	2300      	movs	r3, #0
 800aa9a:	2602      	movs	r6, #2
 800aa9c:	2c00      	cmp	r4, #0
 800aa9e:	f040 80b2 	bne.w	800ac06 <_dtoa_r+0x4fe>
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d1d3      	bne.n	800aa4e <_dtoa_r+0x346>
 800aaa6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aaa8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	f000 80b7 	beq.w	800ac20 <_dtoa_r+0x518>
 800aab2:	4b86      	ldr	r3, [pc, #536]	@ (800accc <_dtoa_r+0x5c4>)
 800aab4:	2200      	movs	r2, #0
 800aab6:	4620      	mov	r0, r4
 800aab8:	4629      	mov	r1, r5
 800aaba:	f7f6 f82f 	bl	8000b1c <__aeabi_dcmplt>
 800aabe:	2800      	cmp	r0, #0
 800aac0:	f000 80ae 	beq.w	800ac20 <_dtoa_r+0x518>
 800aac4:	9b07      	ldr	r3, [sp, #28]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	f000 80aa 	beq.w	800ac20 <_dtoa_r+0x518>
 800aacc:	9b00      	ldr	r3, [sp, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	dd37      	ble.n	800ab42 <_dtoa_r+0x43a>
 800aad2:	1e7b      	subs	r3, r7, #1
 800aad4:	9304      	str	r3, [sp, #16]
 800aad6:	4620      	mov	r0, r4
 800aad8:	4b7d      	ldr	r3, [pc, #500]	@ (800acd0 <_dtoa_r+0x5c8>)
 800aada:	2200      	movs	r2, #0
 800aadc:	4629      	mov	r1, r5
 800aade:	f7f5 fdab 	bl	8000638 <__aeabi_dmul>
 800aae2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aae6:	9c00      	ldr	r4, [sp, #0]
 800aae8:	3601      	adds	r6, #1
 800aaea:	4630      	mov	r0, r6
 800aaec:	f7f5 fd3a 	bl	8000564 <__aeabi_i2d>
 800aaf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aaf4:	f7f5 fda0 	bl	8000638 <__aeabi_dmul>
 800aaf8:	4b76      	ldr	r3, [pc, #472]	@ (800acd4 <_dtoa_r+0x5cc>)
 800aafa:	2200      	movs	r2, #0
 800aafc:	f7f5 fbe6 	bl	80002cc <__adddf3>
 800ab00:	4605      	mov	r5, r0
 800ab02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ab06:	2c00      	cmp	r4, #0
 800ab08:	f040 808d 	bne.w	800ac26 <_dtoa_r+0x51e>
 800ab0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab10:	4b71      	ldr	r3, [pc, #452]	@ (800acd8 <_dtoa_r+0x5d0>)
 800ab12:	2200      	movs	r2, #0
 800ab14:	f7f5 fbd8 	bl	80002c8 <__aeabi_dsub>
 800ab18:	4602      	mov	r2, r0
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ab20:	462a      	mov	r2, r5
 800ab22:	4633      	mov	r3, r6
 800ab24:	f7f6 f818 	bl	8000b58 <__aeabi_dcmpgt>
 800ab28:	2800      	cmp	r0, #0
 800ab2a:	f040 828b 	bne.w	800b044 <_dtoa_r+0x93c>
 800ab2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab32:	462a      	mov	r2, r5
 800ab34:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ab38:	f7f5 fff0 	bl	8000b1c <__aeabi_dcmplt>
 800ab3c:	2800      	cmp	r0, #0
 800ab3e:	f040 8128 	bne.w	800ad92 <_dtoa_r+0x68a>
 800ab42:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ab46:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ab4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	f2c0 815a 	blt.w	800ae06 <_dtoa_r+0x6fe>
 800ab52:	2f0e      	cmp	r7, #14
 800ab54:	f300 8157 	bgt.w	800ae06 <_dtoa_r+0x6fe>
 800ab58:	4b5a      	ldr	r3, [pc, #360]	@ (800acc4 <_dtoa_r+0x5bc>)
 800ab5a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ab5e:	ed93 7b00 	vldr	d7, [r3]
 800ab62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	ed8d 7b00 	vstr	d7, [sp]
 800ab6a:	da03      	bge.n	800ab74 <_dtoa_r+0x46c>
 800ab6c:	9b07      	ldr	r3, [sp, #28]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	f340 8101 	ble.w	800ad76 <_dtoa_r+0x66e>
 800ab74:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ab78:	4656      	mov	r6, sl
 800ab7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab7e:	4620      	mov	r0, r4
 800ab80:	4629      	mov	r1, r5
 800ab82:	f7f5 fe83 	bl	800088c <__aeabi_ddiv>
 800ab86:	f7f6 f807 	bl	8000b98 <__aeabi_d2iz>
 800ab8a:	4680      	mov	r8, r0
 800ab8c:	f7f5 fcea 	bl	8000564 <__aeabi_i2d>
 800ab90:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab94:	f7f5 fd50 	bl	8000638 <__aeabi_dmul>
 800ab98:	4602      	mov	r2, r0
 800ab9a:	460b      	mov	r3, r1
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	4629      	mov	r1, r5
 800aba0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800aba4:	f7f5 fb90 	bl	80002c8 <__aeabi_dsub>
 800aba8:	f806 4b01 	strb.w	r4, [r6], #1
 800abac:	9d07      	ldr	r5, [sp, #28]
 800abae:	eba6 040a 	sub.w	r4, r6, sl
 800abb2:	42a5      	cmp	r5, r4
 800abb4:	4602      	mov	r2, r0
 800abb6:	460b      	mov	r3, r1
 800abb8:	f040 8117 	bne.w	800adea <_dtoa_r+0x6e2>
 800abbc:	f7f5 fb86 	bl	80002cc <__adddf3>
 800abc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abc4:	4604      	mov	r4, r0
 800abc6:	460d      	mov	r5, r1
 800abc8:	f7f5 ffc6 	bl	8000b58 <__aeabi_dcmpgt>
 800abcc:	2800      	cmp	r0, #0
 800abce:	f040 80f9 	bne.w	800adc4 <_dtoa_r+0x6bc>
 800abd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abd6:	4620      	mov	r0, r4
 800abd8:	4629      	mov	r1, r5
 800abda:	f7f5 ff95 	bl	8000b08 <__aeabi_dcmpeq>
 800abde:	b118      	cbz	r0, 800abe8 <_dtoa_r+0x4e0>
 800abe0:	f018 0f01 	tst.w	r8, #1
 800abe4:	f040 80ee 	bne.w	800adc4 <_dtoa_r+0x6bc>
 800abe8:	4649      	mov	r1, r9
 800abea:	4658      	mov	r0, fp
 800abec:	f000 fc90 	bl	800b510 <_Bfree>
 800abf0:	2300      	movs	r3, #0
 800abf2:	7033      	strb	r3, [r6, #0]
 800abf4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800abf6:	3701      	adds	r7, #1
 800abf8:	601f      	str	r7, [r3, #0]
 800abfa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	f000 831d 	beq.w	800b23c <_dtoa_r+0xb34>
 800ac02:	601e      	str	r6, [r3, #0]
 800ac04:	e31a      	b.n	800b23c <_dtoa_r+0xb34>
 800ac06:	07e2      	lsls	r2, r4, #31
 800ac08:	d505      	bpl.n	800ac16 <_dtoa_r+0x50e>
 800ac0a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ac0e:	f7f5 fd13 	bl	8000638 <__aeabi_dmul>
 800ac12:	3601      	adds	r6, #1
 800ac14:	2301      	movs	r3, #1
 800ac16:	1064      	asrs	r4, r4, #1
 800ac18:	3508      	adds	r5, #8
 800ac1a:	e73f      	b.n	800aa9c <_dtoa_r+0x394>
 800ac1c:	2602      	movs	r6, #2
 800ac1e:	e742      	b.n	800aaa6 <_dtoa_r+0x39e>
 800ac20:	9c07      	ldr	r4, [sp, #28]
 800ac22:	9704      	str	r7, [sp, #16]
 800ac24:	e761      	b.n	800aaea <_dtoa_r+0x3e2>
 800ac26:	4b27      	ldr	r3, [pc, #156]	@ (800acc4 <_dtoa_r+0x5bc>)
 800ac28:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ac2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ac2e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ac32:	4454      	add	r4, sl
 800ac34:	2900      	cmp	r1, #0
 800ac36:	d053      	beq.n	800ace0 <_dtoa_r+0x5d8>
 800ac38:	4928      	ldr	r1, [pc, #160]	@ (800acdc <_dtoa_r+0x5d4>)
 800ac3a:	2000      	movs	r0, #0
 800ac3c:	f7f5 fe26 	bl	800088c <__aeabi_ddiv>
 800ac40:	4633      	mov	r3, r6
 800ac42:	462a      	mov	r2, r5
 800ac44:	f7f5 fb40 	bl	80002c8 <__aeabi_dsub>
 800ac48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ac4c:	4656      	mov	r6, sl
 800ac4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac52:	f7f5 ffa1 	bl	8000b98 <__aeabi_d2iz>
 800ac56:	4605      	mov	r5, r0
 800ac58:	f7f5 fc84 	bl	8000564 <__aeabi_i2d>
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	460b      	mov	r3, r1
 800ac60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac64:	f7f5 fb30 	bl	80002c8 <__aeabi_dsub>
 800ac68:	3530      	adds	r5, #48	@ 0x30
 800ac6a:	4602      	mov	r2, r0
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac72:	f806 5b01 	strb.w	r5, [r6], #1
 800ac76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ac7a:	f7f5 ff4f 	bl	8000b1c <__aeabi_dcmplt>
 800ac7e:	2800      	cmp	r0, #0
 800ac80:	d171      	bne.n	800ad66 <_dtoa_r+0x65e>
 800ac82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac86:	4911      	ldr	r1, [pc, #68]	@ (800accc <_dtoa_r+0x5c4>)
 800ac88:	2000      	movs	r0, #0
 800ac8a:	f7f5 fb1d 	bl	80002c8 <__aeabi_dsub>
 800ac8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ac92:	f7f5 ff43 	bl	8000b1c <__aeabi_dcmplt>
 800ac96:	2800      	cmp	r0, #0
 800ac98:	f040 8095 	bne.w	800adc6 <_dtoa_r+0x6be>
 800ac9c:	42a6      	cmp	r6, r4
 800ac9e:	f43f af50 	beq.w	800ab42 <_dtoa_r+0x43a>
 800aca2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800aca6:	4b0a      	ldr	r3, [pc, #40]	@ (800acd0 <_dtoa_r+0x5c8>)
 800aca8:	2200      	movs	r2, #0
 800acaa:	f7f5 fcc5 	bl	8000638 <__aeabi_dmul>
 800acae:	4b08      	ldr	r3, [pc, #32]	@ (800acd0 <_dtoa_r+0x5c8>)
 800acb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800acb4:	2200      	movs	r2, #0
 800acb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acba:	f7f5 fcbd 	bl	8000638 <__aeabi_dmul>
 800acbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acc2:	e7c4      	b.n	800ac4e <_dtoa_r+0x546>
 800acc4:	0800cd48 	.word	0x0800cd48
 800acc8:	0800cd20 	.word	0x0800cd20
 800accc:	3ff00000 	.word	0x3ff00000
 800acd0:	40240000 	.word	0x40240000
 800acd4:	401c0000 	.word	0x401c0000
 800acd8:	40140000 	.word	0x40140000
 800acdc:	3fe00000 	.word	0x3fe00000
 800ace0:	4631      	mov	r1, r6
 800ace2:	4628      	mov	r0, r5
 800ace4:	f7f5 fca8 	bl	8000638 <__aeabi_dmul>
 800ace8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800acec:	9415      	str	r4, [sp, #84]	@ 0x54
 800acee:	4656      	mov	r6, sl
 800acf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acf4:	f7f5 ff50 	bl	8000b98 <__aeabi_d2iz>
 800acf8:	4605      	mov	r5, r0
 800acfa:	f7f5 fc33 	bl	8000564 <__aeabi_i2d>
 800acfe:	4602      	mov	r2, r0
 800ad00:	460b      	mov	r3, r1
 800ad02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad06:	f7f5 fadf 	bl	80002c8 <__aeabi_dsub>
 800ad0a:	3530      	adds	r5, #48	@ 0x30
 800ad0c:	f806 5b01 	strb.w	r5, [r6], #1
 800ad10:	4602      	mov	r2, r0
 800ad12:	460b      	mov	r3, r1
 800ad14:	42a6      	cmp	r6, r4
 800ad16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad1a:	f04f 0200 	mov.w	r2, #0
 800ad1e:	d124      	bne.n	800ad6a <_dtoa_r+0x662>
 800ad20:	4bac      	ldr	r3, [pc, #688]	@ (800afd4 <_dtoa_r+0x8cc>)
 800ad22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ad26:	f7f5 fad1 	bl	80002cc <__adddf3>
 800ad2a:	4602      	mov	r2, r0
 800ad2c:	460b      	mov	r3, r1
 800ad2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad32:	f7f5 ff11 	bl	8000b58 <__aeabi_dcmpgt>
 800ad36:	2800      	cmp	r0, #0
 800ad38:	d145      	bne.n	800adc6 <_dtoa_r+0x6be>
 800ad3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ad3e:	49a5      	ldr	r1, [pc, #660]	@ (800afd4 <_dtoa_r+0x8cc>)
 800ad40:	2000      	movs	r0, #0
 800ad42:	f7f5 fac1 	bl	80002c8 <__aeabi_dsub>
 800ad46:	4602      	mov	r2, r0
 800ad48:	460b      	mov	r3, r1
 800ad4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad4e:	f7f5 fee5 	bl	8000b1c <__aeabi_dcmplt>
 800ad52:	2800      	cmp	r0, #0
 800ad54:	f43f aef5 	beq.w	800ab42 <_dtoa_r+0x43a>
 800ad58:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ad5a:	1e73      	subs	r3, r6, #1
 800ad5c:	9315      	str	r3, [sp, #84]	@ 0x54
 800ad5e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ad62:	2b30      	cmp	r3, #48	@ 0x30
 800ad64:	d0f8      	beq.n	800ad58 <_dtoa_r+0x650>
 800ad66:	9f04      	ldr	r7, [sp, #16]
 800ad68:	e73e      	b.n	800abe8 <_dtoa_r+0x4e0>
 800ad6a:	4b9b      	ldr	r3, [pc, #620]	@ (800afd8 <_dtoa_r+0x8d0>)
 800ad6c:	f7f5 fc64 	bl	8000638 <__aeabi_dmul>
 800ad70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad74:	e7bc      	b.n	800acf0 <_dtoa_r+0x5e8>
 800ad76:	d10c      	bne.n	800ad92 <_dtoa_r+0x68a>
 800ad78:	4b98      	ldr	r3, [pc, #608]	@ (800afdc <_dtoa_r+0x8d4>)
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad80:	f7f5 fc5a 	bl	8000638 <__aeabi_dmul>
 800ad84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad88:	f7f5 fedc 	bl	8000b44 <__aeabi_dcmpge>
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	f000 8157 	beq.w	800b040 <_dtoa_r+0x938>
 800ad92:	2400      	movs	r4, #0
 800ad94:	4625      	mov	r5, r4
 800ad96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad98:	43db      	mvns	r3, r3
 800ad9a:	9304      	str	r3, [sp, #16]
 800ad9c:	4656      	mov	r6, sl
 800ad9e:	2700      	movs	r7, #0
 800ada0:	4621      	mov	r1, r4
 800ada2:	4658      	mov	r0, fp
 800ada4:	f000 fbb4 	bl	800b510 <_Bfree>
 800ada8:	2d00      	cmp	r5, #0
 800adaa:	d0dc      	beq.n	800ad66 <_dtoa_r+0x65e>
 800adac:	b12f      	cbz	r7, 800adba <_dtoa_r+0x6b2>
 800adae:	42af      	cmp	r7, r5
 800adb0:	d003      	beq.n	800adba <_dtoa_r+0x6b2>
 800adb2:	4639      	mov	r1, r7
 800adb4:	4658      	mov	r0, fp
 800adb6:	f000 fbab 	bl	800b510 <_Bfree>
 800adba:	4629      	mov	r1, r5
 800adbc:	4658      	mov	r0, fp
 800adbe:	f000 fba7 	bl	800b510 <_Bfree>
 800adc2:	e7d0      	b.n	800ad66 <_dtoa_r+0x65e>
 800adc4:	9704      	str	r7, [sp, #16]
 800adc6:	4633      	mov	r3, r6
 800adc8:	461e      	mov	r6, r3
 800adca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800adce:	2a39      	cmp	r2, #57	@ 0x39
 800add0:	d107      	bne.n	800ade2 <_dtoa_r+0x6da>
 800add2:	459a      	cmp	sl, r3
 800add4:	d1f8      	bne.n	800adc8 <_dtoa_r+0x6c0>
 800add6:	9a04      	ldr	r2, [sp, #16]
 800add8:	3201      	adds	r2, #1
 800adda:	9204      	str	r2, [sp, #16]
 800addc:	2230      	movs	r2, #48	@ 0x30
 800adde:	f88a 2000 	strb.w	r2, [sl]
 800ade2:	781a      	ldrb	r2, [r3, #0]
 800ade4:	3201      	adds	r2, #1
 800ade6:	701a      	strb	r2, [r3, #0]
 800ade8:	e7bd      	b.n	800ad66 <_dtoa_r+0x65e>
 800adea:	4b7b      	ldr	r3, [pc, #492]	@ (800afd8 <_dtoa_r+0x8d0>)
 800adec:	2200      	movs	r2, #0
 800adee:	f7f5 fc23 	bl	8000638 <__aeabi_dmul>
 800adf2:	2200      	movs	r2, #0
 800adf4:	2300      	movs	r3, #0
 800adf6:	4604      	mov	r4, r0
 800adf8:	460d      	mov	r5, r1
 800adfa:	f7f5 fe85 	bl	8000b08 <__aeabi_dcmpeq>
 800adfe:	2800      	cmp	r0, #0
 800ae00:	f43f aebb 	beq.w	800ab7a <_dtoa_r+0x472>
 800ae04:	e6f0      	b.n	800abe8 <_dtoa_r+0x4e0>
 800ae06:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ae08:	2a00      	cmp	r2, #0
 800ae0a:	f000 80db 	beq.w	800afc4 <_dtoa_r+0x8bc>
 800ae0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae10:	2a01      	cmp	r2, #1
 800ae12:	f300 80bf 	bgt.w	800af94 <_dtoa_r+0x88c>
 800ae16:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ae18:	2a00      	cmp	r2, #0
 800ae1a:	f000 80b7 	beq.w	800af8c <_dtoa_r+0x884>
 800ae1e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ae22:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ae24:	4646      	mov	r6, r8
 800ae26:	9a08      	ldr	r2, [sp, #32]
 800ae28:	2101      	movs	r1, #1
 800ae2a:	441a      	add	r2, r3
 800ae2c:	4658      	mov	r0, fp
 800ae2e:	4498      	add	r8, r3
 800ae30:	9208      	str	r2, [sp, #32]
 800ae32:	f000 fc21 	bl	800b678 <__i2b>
 800ae36:	4605      	mov	r5, r0
 800ae38:	b15e      	cbz	r6, 800ae52 <_dtoa_r+0x74a>
 800ae3a:	9b08      	ldr	r3, [sp, #32]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	dd08      	ble.n	800ae52 <_dtoa_r+0x74a>
 800ae40:	42b3      	cmp	r3, r6
 800ae42:	9a08      	ldr	r2, [sp, #32]
 800ae44:	bfa8      	it	ge
 800ae46:	4633      	movge	r3, r6
 800ae48:	eba8 0803 	sub.w	r8, r8, r3
 800ae4c:	1af6      	subs	r6, r6, r3
 800ae4e:	1ad3      	subs	r3, r2, r3
 800ae50:	9308      	str	r3, [sp, #32]
 800ae52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae54:	b1f3      	cbz	r3, 800ae94 <_dtoa_r+0x78c>
 800ae56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	f000 80b7 	beq.w	800afcc <_dtoa_r+0x8c4>
 800ae5e:	b18c      	cbz	r4, 800ae84 <_dtoa_r+0x77c>
 800ae60:	4629      	mov	r1, r5
 800ae62:	4622      	mov	r2, r4
 800ae64:	4658      	mov	r0, fp
 800ae66:	f000 fcc7 	bl	800b7f8 <__pow5mult>
 800ae6a:	464a      	mov	r2, r9
 800ae6c:	4601      	mov	r1, r0
 800ae6e:	4605      	mov	r5, r0
 800ae70:	4658      	mov	r0, fp
 800ae72:	f000 fc17 	bl	800b6a4 <__multiply>
 800ae76:	4649      	mov	r1, r9
 800ae78:	9004      	str	r0, [sp, #16]
 800ae7a:	4658      	mov	r0, fp
 800ae7c:	f000 fb48 	bl	800b510 <_Bfree>
 800ae80:	9b04      	ldr	r3, [sp, #16]
 800ae82:	4699      	mov	r9, r3
 800ae84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae86:	1b1a      	subs	r2, r3, r4
 800ae88:	d004      	beq.n	800ae94 <_dtoa_r+0x78c>
 800ae8a:	4649      	mov	r1, r9
 800ae8c:	4658      	mov	r0, fp
 800ae8e:	f000 fcb3 	bl	800b7f8 <__pow5mult>
 800ae92:	4681      	mov	r9, r0
 800ae94:	2101      	movs	r1, #1
 800ae96:	4658      	mov	r0, fp
 800ae98:	f000 fbee 	bl	800b678 <__i2b>
 800ae9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae9e:	4604      	mov	r4, r0
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	f000 81cf 	beq.w	800b244 <_dtoa_r+0xb3c>
 800aea6:	461a      	mov	r2, r3
 800aea8:	4601      	mov	r1, r0
 800aeaa:	4658      	mov	r0, fp
 800aeac:	f000 fca4 	bl	800b7f8 <__pow5mult>
 800aeb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	4604      	mov	r4, r0
 800aeb6:	f300 8095 	bgt.w	800afe4 <_dtoa_r+0x8dc>
 800aeba:	9b02      	ldr	r3, [sp, #8]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	f040 8087 	bne.w	800afd0 <_dtoa_r+0x8c8>
 800aec2:	9b03      	ldr	r3, [sp, #12]
 800aec4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	f040 8089 	bne.w	800afe0 <_dtoa_r+0x8d8>
 800aece:	9b03      	ldr	r3, [sp, #12]
 800aed0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aed4:	0d1b      	lsrs	r3, r3, #20
 800aed6:	051b      	lsls	r3, r3, #20
 800aed8:	b12b      	cbz	r3, 800aee6 <_dtoa_r+0x7de>
 800aeda:	9b08      	ldr	r3, [sp, #32]
 800aedc:	3301      	adds	r3, #1
 800aede:	9308      	str	r3, [sp, #32]
 800aee0:	f108 0801 	add.w	r8, r8, #1
 800aee4:	2301      	movs	r3, #1
 800aee6:	930a      	str	r3, [sp, #40]	@ 0x28
 800aee8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	f000 81b0 	beq.w	800b250 <_dtoa_r+0xb48>
 800aef0:	6923      	ldr	r3, [r4, #16]
 800aef2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aef6:	6918      	ldr	r0, [r3, #16]
 800aef8:	f000 fb72 	bl	800b5e0 <__hi0bits>
 800aefc:	f1c0 0020 	rsb	r0, r0, #32
 800af00:	9b08      	ldr	r3, [sp, #32]
 800af02:	4418      	add	r0, r3
 800af04:	f010 001f 	ands.w	r0, r0, #31
 800af08:	d077      	beq.n	800affa <_dtoa_r+0x8f2>
 800af0a:	f1c0 0320 	rsb	r3, r0, #32
 800af0e:	2b04      	cmp	r3, #4
 800af10:	dd6b      	ble.n	800afea <_dtoa_r+0x8e2>
 800af12:	9b08      	ldr	r3, [sp, #32]
 800af14:	f1c0 001c 	rsb	r0, r0, #28
 800af18:	4403      	add	r3, r0
 800af1a:	4480      	add	r8, r0
 800af1c:	4406      	add	r6, r0
 800af1e:	9308      	str	r3, [sp, #32]
 800af20:	f1b8 0f00 	cmp.w	r8, #0
 800af24:	dd05      	ble.n	800af32 <_dtoa_r+0x82a>
 800af26:	4649      	mov	r1, r9
 800af28:	4642      	mov	r2, r8
 800af2a:	4658      	mov	r0, fp
 800af2c:	f000 fcbe 	bl	800b8ac <__lshift>
 800af30:	4681      	mov	r9, r0
 800af32:	9b08      	ldr	r3, [sp, #32]
 800af34:	2b00      	cmp	r3, #0
 800af36:	dd05      	ble.n	800af44 <_dtoa_r+0x83c>
 800af38:	4621      	mov	r1, r4
 800af3a:	461a      	mov	r2, r3
 800af3c:	4658      	mov	r0, fp
 800af3e:	f000 fcb5 	bl	800b8ac <__lshift>
 800af42:	4604      	mov	r4, r0
 800af44:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800af46:	2b00      	cmp	r3, #0
 800af48:	d059      	beq.n	800affe <_dtoa_r+0x8f6>
 800af4a:	4621      	mov	r1, r4
 800af4c:	4648      	mov	r0, r9
 800af4e:	f000 fd19 	bl	800b984 <__mcmp>
 800af52:	2800      	cmp	r0, #0
 800af54:	da53      	bge.n	800affe <_dtoa_r+0x8f6>
 800af56:	1e7b      	subs	r3, r7, #1
 800af58:	9304      	str	r3, [sp, #16]
 800af5a:	4649      	mov	r1, r9
 800af5c:	2300      	movs	r3, #0
 800af5e:	220a      	movs	r2, #10
 800af60:	4658      	mov	r0, fp
 800af62:	f000 faf7 	bl	800b554 <__multadd>
 800af66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af68:	4681      	mov	r9, r0
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	f000 8172 	beq.w	800b254 <_dtoa_r+0xb4c>
 800af70:	2300      	movs	r3, #0
 800af72:	4629      	mov	r1, r5
 800af74:	220a      	movs	r2, #10
 800af76:	4658      	mov	r0, fp
 800af78:	f000 faec 	bl	800b554 <__multadd>
 800af7c:	9b00      	ldr	r3, [sp, #0]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	4605      	mov	r5, r0
 800af82:	dc67      	bgt.n	800b054 <_dtoa_r+0x94c>
 800af84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af86:	2b02      	cmp	r3, #2
 800af88:	dc41      	bgt.n	800b00e <_dtoa_r+0x906>
 800af8a:	e063      	b.n	800b054 <_dtoa_r+0x94c>
 800af8c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800af8e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800af92:	e746      	b.n	800ae22 <_dtoa_r+0x71a>
 800af94:	9b07      	ldr	r3, [sp, #28]
 800af96:	1e5c      	subs	r4, r3, #1
 800af98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af9a:	42a3      	cmp	r3, r4
 800af9c:	bfbf      	itttt	lt
 800af9e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800afa0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800afa2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800afa4:	1ae3      	sublt	r3, r4, r3
 800afa6:	bfb4      	ite	lt
 800afa8:	18d2      	addlt	r2, r2, r3
 800afaa:	1b1c      	subge	r4, r3, r4
 800afac:	9b07      	ldr	r3, [sp, #28]
 800afae:	bfbc      	itt	lt
 800afb0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800afb2:	2400      	movlt	r4, #0
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	bfb5      	itete	lt
 800afb8:	eba8 0603 	sublt.w	r6, r8, r3
 800afbc:	9b07      	ldrge	r3, [sp, #28]
 800afbe:	2300      	movlt	r3, #0
 800afc0:	4646      	movge	r6, r8
 800afc2:	e730      	b.n	800ae26 <_dtoa_r+0x71e>
 800afc4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800afc6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800afc8:	4646      	mov	r6, r8
 800afca:	e735      	b.n	800ae38 <_dtoa_r+0x730>
 800afcc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800afce:	e75c      	b.n	800ae8a <_dtoa_r+0x782>
 800afd0:	2300      	movs	r3, #0
 800afd2:	e788      	b.n	800aee6 <_dtoa_r+0x7de>
 800afd4:	3fe00000 	.word	0x3fe00000
 800afd8:	40240000 	.word	0x40240000
 800afdc:	40140000 	.word	0x40140000
 800afe0:	9b02      	ldr	r3, [sp, #8]
 800afe2:	e780      	b.n	800aee6 <_dtoa_r+0x7de>
 800afe4:	2300      	movs	r3, #0
 800afe6:	930a      	str	r3, [sp, #40]	@ 0x28
 800afe8:	e782      	b.n	800aef0 <_dtoa_r+0x7e8>
 800afea:	d099      	beq.n	800af20 <_dtoa_r+0x818>
 800afec:	9a08      	ldr	r2, [sp, #32]
 800afee:	331c      	adds	r3, #28
 800aff0:	441a      	add	r2, r3
 800aff2:	4498      	add	r8, r3
 800aff4:	441e      	add	r6, r3
 800aff6:	9208      	str	r2, [sp, #32]
 800aff8:	e792      	b.n	800af20 <_dtoa_r+0x818>
 800affa:	4603      	mov	r3, r0
 800affc:	e7f6      	b.n	800afec <_dtoa_r+0x8e4>
 800affe:	9b07      	ldr	r3, [sp, #28]
 800b000:	9704      	str	r7, [sp, #16]
 800b002:	2b00      	cmp	r3, #0
 800b004:	dc20      	bgt.n	800b048 <_dtoa_r+0x940>
 800b006:	9300      	str	r3, [sp, #0]
 800b008:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b00a:	2b02      	cmp	r3, #2
 800b00c:	dd1e      	ble.n	800b04c <_dtoa_r+0x944>
 800b00e:	9b00      	ldr	r3, [sp, #0]
 800b010:	2b00      	cmp	r3, #0
 800b012:	f47f aec0 	bne.w	800ad96 <_dtoa_r+0x68e>
 800b016:	4621      	mov	r1, r4
 800b018:	2205      	movs	r2, #5
 800b01a:	4658      	mov	r0, fp
 800b01c:	f000 fa9a 	bl	800b554 <__multadd>
 800b020:	4601      	mov	r1, r0
 800b022:	4604      	mov	r4, r0
 800b024:	4648      	mov	r0, r9
 800b026:	f000 fcad 	bl	800b984 <__mcmp>
 800b02a:	2800      	cmp	r0, #0
 800b02c:	f77f aeb3 	ble.w	800ad96 <_dtoa_r+0x68e>
 800b030:	4656      	mov	r6, sl
 800b032:	2331      	movs	r3, #49	@ 0x31
 800b034:	f806 3b01 	strb.w	r3, [r6], #1
 800b038:	9b04      	ldr	r3, [sp, #16]
 800b03a:	3301      	adds	r3, #1
 800b03c:	9304      	str	r3, [sp, #16]
 800b03e:	e6ae      	b.n	800ad9e <_dtoa_r+0x696>
 800b040:	9c07      	ldr	r4, [sp, #28]
 800b042:	9704      	str	r7, [sp, #16]
 800b044:	4625      	mov	r5, r4
 800b046:	e7f3      	b.n	800b030 <_dtoa_r+0x928>
 800b048:	9b07      	ldr	r3, [sp, #28]
 800b04a:	9300      	str	r3, [sp, #0]
 800b04c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b04e:	2b00      	cmp	r3, #0
 800b050:	f000 8104 	beq.w	800b25c <_dtoa_r+0xb54>
 800b054:	2e00      	cmp	r6, #0
 800b056:	dd05      	ble.n	800b064 <_dtoa_r+0x95c>
 800b058:	4629      	mov	r1, r5
 800b05a:	4632      	mov	r2, r6
 800b05c:	4658      	mov	r0, fp
 800b05e:	f000 fc25 	bl	800b8ac <__lshift>
 800b062:	4605      	mov	r5, r0
 800b064:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b066:	2b00      	cmp	r3, #0
 800b068:	d05a      	beq.n	800b120 <_dtoa_r+0xa18>
 800b06a:	6869      	ldr	r1, [r5, #4]
 800b06c:	4658      	mov	r0, fp
 800b06e:	f000 fa0f 	bl	800b490 <_Balloc>
 800b072:	4606      	mov	r6, r0
 800b074:	b928      	cbnz	r0, 800b082 <_dtoa_r+0x97a>
 800b076:	4b84      	ldr	r3, [pc, #528]	@ (800b288 <_dtoa_r+0xb80>)
 800b078:	4602      	mov	r2, r0
 800b07a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b07e:	f7ff bb5a 	b.w	800a736 <_dtoa_r+0x2e>
 800b082:	692a      	ldr	r2, [r5, #16]
 800b084:	3202      	adds	r2, #2
 800b086:	0092      	lsls	r2, r2, #2
 800b088:	f105 010c 	add.w	r1, r5, #12
 800b08c:	300c      	adds	r0, #12
 800b08e:	f000 ffaf 	bl	800bff0 <memcpy>
 800b092:	2201      	movs	r2, #1
 800b094:	4631      	mov	r1, r6
 800b096:	4658      	mov	r0, fp
 800b098:	f000 fc08 	bl	800b8ac <__lshift>
 800b09c:	f10a 0301 	add.w	r3, sl, #1
 800b0a0:	9307      	str	r3, [sp, #28]
 800b0a2:	9b00      	ldr	r3, [sp, #0]
 800b0a4:	4453      	add	r3, sl
 800b0a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b0a8:	9b02      	ldr	r3, [sp, #8]
 800b0aa:	f003 0301 	and.w	r3, r3, #1
 800b0ae:	462f      	mov	r7, r5
 800b0b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800b0b2:	4605      	mov	r5, r0
 800b0b4:	9b07      	ldr	r3, [sp, #28]
 800b0b6:	4621      	mov	r1, r4
 800b0b8:	3b01      	subs	r3, #1
 800b0ba:	4648      	mov	r0, r9
 800b0bc:	9300      	str	r3, [sp, #0]
 800b0be:	f7ff fa98 	bl	800a5f2 <quorem>
 800b0c2:	4639      	mov	r1, r7
 800b0c4:	9002      	str	r0, [sp, #8]
 800b0c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b0ca:	4648      	mov	r0, r9
 800b0cc:	f000 fc5a 	bl	800b984 <__mcmp>
 800b0d0:	462a      	mov	r2, r5
 800b0d2:	9008      	str	r0, [sp, #32]
 800b0d4:	4621      	mov	r1, r4
 800b0d6:	4658      	mov	r0, fp
 800b0d8:	f000 fc70 	bl	800b9bc <__mdiff>
 800b0dc:	68c2      	ldr	r2, [r0, #12]
 800b0de:	4606      	mov	r6, r0
 800b0e0:	bb02      	cbnz	r2, 800b124 <_dtoa_r+0xa1c>
 800b0e2:	4601      	mov	r1, r0
 800b0e4:	4648      	mov	r0, r9
 800b0e6:	f000 fc4d 	bl	800b984 <__mcmp>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	4631      	mov	r1, r6
 800b0ee:	4658      	mov	r0, fp
 800b0f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b0f2:	f000 fa0d 	bl	800b510 <_Bfree>
 800b0f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b0fa:	9e07      	ldr	r6, [sp, #28]
 800b0fc:	ea43 0102 	orr.w	r1, r3, r2
 800b100:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b102:	4319      	orrs	r1, r3
 800b104:	d110      	bne.n	800b128 <_dtoa_r+0xa20>
 800b106:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b10a:	d029      	beq.n	800b160 <_dtoa_r+0xa58>
 800b10c:	9b08      	ldr	r3, [sp, #32]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	dd02      	ble.n	800b118 <_dtoa_r+0xa10>
 800b112:	9b02      	ldr	r3, [sp, #8]
 800b114:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b118:	9b00      	ldr	r3, [sp, #0]
 800b11a:	f883 8000 	strb.w	r8, [r3]
 800b11e:	e63f      	b.n	800ada0 <_dtoa_r+0x698>
 800b120:	4628      	mov	r0, r5
 800b122:	e7bb      	b.n	800b09c <_dtoa_r+0x994>
 800b124:	2201      	movs	r2, #1
 800b126:	e7e1      	b.n	800b0ec <_dtoa_r+0x9e4>
 800b128:	9b08      	ldr	r3, [sp, #32]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	db04      	blt.n	800b138 <_dtoa_r+0xa30>
 800b12e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b130:	430b      	orrs	r3, r1
 800b132:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b134:	430b      	orrs	r3, r1
 800b136:	d120      	bne.n	800b17a <_dtoa_r+0xa72>
 800b138:	2a00      	cmp	r2, #0
 800b13a:	dded      	ble.n	800b118 <_dtoa_r+0xa10>
 800b13c:	4649      	mov	r1, r9
 800b13e:	2201      	movs	r2, #1
 800b140:	4658      	mov	r0, fp
 800b142:	f000 fbb3 	bl	800b8ac <__lshift>
 800b146:	4621      	mov	r1, r4
 800b148:	4681      	mov	r9, r0
 800b14a:	f000 fc1b 	bl	800b984 <__mcmp>
 800b14e:	2800      	cmp	r0, #0
 800b150:	dc03      	bgt.n	800b15a <_dtoa_r+0xa52>
 800b152:	d1e1      	bne.n	800b118 <_dtoa_r+0xa10>
 800b154:	f018 0f01 	tst.w	r8, #1
 800b158:	d0de      	beq.n	800b118 <_dtoa_r+0xa10>
 800b15a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b15e:	d1d8      	bne.n	800b112 <_dtoa_r+0xa0a>
 800b160:	9a00      	ldr	r2, [sp, #0]
 800b162:	2339      	movs	r3, #57	@ 0x39
 800b164:	7013      	strb	r3, [r2, #0]
 800b166:	4633      	mov	r3, r6
 800b168:	461e      	mov	r6, r3
 800b16a:	3b01      	subs	r3, #1
 800b16c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b170:	2a39      	cmp	r2, #57	@ 0x39
 800b172:	d052      	beq.n	800b21a <_dtoa_r+0xb12>
 800b174:	3201      	adds	r2, #1
 800b176:	701a      	strb	r2, [r3, #0]
 800b178:	e612      	b.n	800ada0 <_dtoa_r+0x698>
 800b17a:	2a00      	cmp	r2, #0
 800b17c:	dd07      	ble.n	800b18e <_dtoa_r+0xa86>
 800b17e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b182:	d0ed      	beq.n	800b160 <_dtoa_r+0xa58>
 800b184:	9a00      	ldr	r2, [sp, #0]
 800b186:	f108 0301 	add.w	r3, r8, #1
 800b18a:	7013      	strb	r3, [r2, #0]
 800b18c:	e608      	b.n	800ada0 <_dtoa_r+0x698>
 800b18e:	9b07      	ldr	r3, [sp, #28]
 800b190:	9a07      	ldr	r2, [sp, #28]
 800b192:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b196:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b198:	4293      	cmp	r3, r2
 800b19a:	d028      	beq.n	800b1ee <_dtoa_r+0xae6>
 800b19c:	4649      	mov	r1, r9
 800b19e:	2300      	movs	r3, #0
 800b1a0:	220a      	movs	r2, #10
 800b1a2:	4658      	mov	r0, fp
 800b1a4:	f000 f9d6 	bl	800b554 <__multadd>
 800b1a8:	42af      	cmp	r7, r5
 800b1aa:	4681      	mov	r9, r0
 800b1ac:	f04f 0300 	mov.w	r3, #0
 800b1b0:	f04f 020a 	mov.w	r2, #10
 800b1b4:	4639      	mov	r1, r7
 800b1b6:	4658      	mov	r0, fp
 800b1b8:	d107      	bne.n	800b1ca <_dtoa_r+0xac2>
 800b1ba:	f000 f9cb 	bl	800b554 <__multadd>
 800b1be:	4607      	mov	r7, r0
 800b1c0:	4605      	mov	r5, r0
 800b1c2:	9b07      	ldr	r3, [sp, #28]
 800b1c4:	3301      	adds	r3, #1
 800b1c6:	9307      	str	r3, [sp, #28]
 800b1c8:	e774      	b.n	800b0b4 <_dtoa_r+0x9ac>
 800b1ca:	f000 f9c3 	bl	800b554 <__multadd>
 800b1ce:	4629      	mov	r1, r5
 800b1d0:	4607      	mov	r7, r0
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	220a      	movs	r2, #10
 800b1d6:	4658      	mov	r0, fp
 800b1d8:	f000 f9bc 	bl	800b554 <__multadd>
 800b1dc:	4605      	mov	r5, r0
 800b1de:	e7f0      	b.n	800b1c2 <_dtoa_r+0xaba>
 800b1e0:	9b00      	ldr	r3, [sp, #0]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	bfcc      	ite	gt
 800b1e6:	461e      	movgt	r6, r3
 800b1e8:	2601      	movle	r6, #1
 800b1ea:	4456      	add	r6, sl
 800b1ec:	2700      	movs	r7, #0
 800b1ee:	4649      	mov	r1, r9
 800b1f0:	2201      	movs	r2, #1
 800b1f2:	4658      	mov	r0, fp
 800b1f4:	f000 fb5a 	bl	800b8ac <__lshift>
 800b1f8:	4621      	mov	r1, r4
 800b1fa:	4681      	mov	r9, r0
 800b1fc:	f000 fbc2 	bl	800b984 <__mcmp>
 800b200:	2800      	cmp	r0, #0
 800b202:	dcb0      	bgt.n	800b166 <_dtoa_r+0xa5e>
 800b204:	d102      	bne.n	800b20c <_dtoa_r+0xb04>
 800b206:	f018 0f01 	tst.w	r8, #1
 800b20a:	d1ac      	bne.n	800b166 <_dtoa_r+0xa5e>
 800b20c:	4633      	mov	r3, r6
 800b20e:	461e      	mov	r6, r3
 800b210:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b214:	2a30      	cmp	r2, #48	@ 0x30
 800b216:	d0fa      	beq.n	800b20e <_dtoa_r+0xb06>
 800b218:	e5c2      	b.n	800ada0 <_dtoa_r+0x698>
 800b21a:	459a      	cmp	sl, r3
 800b21c:	d1a4      	bne.n	800b168 <_dtoa_r+0xa60>
 800b21e:	9b04      	ldr	r3, [sp, #16]
 800b220:	3301      	adds	r3, #1
 800b222:	9304      	str	r3, [sp, #16]
 800b224:	2331      	movs	r3, #49	@ 0x31
 800b226:	f88a 3000 	strb.w	r3, [sl]
 800b22a:	e5b9      	b.n	800ada0 <_dtoa_r+0x698>
 800b22c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b22e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b28c <_dtoa_r+0xb84>
 800b232:	b11b      	cbz	r3, 800b23c <_dtoa_r+0xb34>
 800b234:	f10a 0308 	add.w	r3, sl, #8
 800b238:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b23a:	6013      	str	r3, [r2, #0]
 800b23c:	4650      	mov	r0, sl
 800b23e:	b019      	add	sp, #100	@ 0x64
 800b240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b244:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b246:	2b01      	cmp	r3, #1
 800b248:	f77f ae37 	ble.w	800aeba <_dtoa_r+0x7b2>
 800b24c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b24e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b250:	2001      	movs	r0, #1
 800b252:	e655      	b.n	800af00 <_dtoa_r+0x7f8>
 800b254:	9b00      	ldr	r3, [sp, #0]
 800b256:	2b00      	cmp	r3, #0
 800b258:	f77f aed6 	ble.w	800b008 <_dtoa_r+0x900>
 800b25c:	4656      	mov	r6, sl
 800b25e:	4621      	mov	r1, r4
 800b260:	4648      	mov	r0, r9
 800b262:	f7ff f9c6 	bl	800a5f2 <quorem>
 800b266:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b26a:	f806 8b01 	strb.w	r8, [r6], #1
 800b26e:	9b00      	ldr	r3, [sp, #0]
 800b270:	eba6 020a 	sub.w	r2, r6, sl
 800b274:	4293      	cmp	r3, r2
 800b276:	ddb3      	ble.n	800b1e0 <_dtoa_r+0xad8>
 800b278:	4649      	mov	r1, r9
 800b27a:	2300      	movs	r3, #0
 800b27c:	220a      	movs	r2, #10
 800b27e:	4658      	mov	r0, fp
 800b280:	f000 f968 	bl	800b554 <__multadd>
 800b284:	4681      	mov	r9, r0
 800b286:	e7ea      	b.n	800b25e <_dtoa_r+0xb56>
 800b288:	0800cca8 	.word	0x0800cca8
 800b28c:	0800cc2c 	.word	0x0800cc2c

0800b290 <_free_r>:
 800b290:	b538      	push	{r3, r4, r5, lr}
 800b292:	4605      	mov	r5, r0
 800b294:	2900      	cmp	r1, #0
 800b296:	d041      	beq.n	800b31c <_free_r+0x8c>
 800b298:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b29c:	1f0c      	subs	r4, r1, #4
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	bfb8      	it	lt
 800b2a2:	18e4      	addlt	r4, r4, r3
 800b2a4:	f000 f8e8 	bl	800b478 <__malloc_lock>
 800b2a8:	4a1d      	ldr	r2, [pc, #116]	@ (800b320 <_free_r+0x90>)
 800b2aa:	6813      	ldr	r3, [r2, #0]
 800b2ac:	b933      	cbnz	r3, 800b2bc <_free_r+0x2c>
 800b2ae:	6063      	str	r3, [r4, #4]
 800b2b0:	6014      	str	r4, [r2, #0]
 800b2b2:	4628      	mov	r0, r5
 800b2b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2b8:	f000 b8e4 	b.w	800b484 <__malloc_unlock>
 800b2bc:	42a3      	cmp	r3, r4
 800b2be:	d908      	bls.n	800b2d2 <_free_r+0x42>
 800b2c0:	6820      	ldr	r0, [r4, #0]
 800b2c2:	1821      	adds	r1, r4, r0
 800b2c4:	428b      	cmp	r3, r1
 800b2c6:	bf01      	itttt	eq
 800b2c8:	6819      	ldreq	r1, [r3, #0]
 800b2ca:	685b      	ldreq	r3, [r3, #4]
 800b2cc:	1809      	addeq	r1, r1, r0
 800b2ce:	6021      	streq	r1, [r4, #0]
 800b2d0:	e7ed      	b.n	800b2ae <_free_r+0x1e>
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	b10b      	cbz	r3, 800b2dc <_free_r+0x4c>
 800b2d8:	42a3      	cmp	r3, r4
 800b2da:	d9fa      	bls.n	800b2d2 <_free_r+0x42>
 800b2dc:	6811      	ldr	r1, [r2, #0]
 800b2de:	1850      	adds	r0, r2, r1
 800b2e0:	42a0      	cmp	r0, r4
 800b2e2:	d10b      	bne.n	800b2fc <_free_r+0x6c>
 800b2e4:	6820      	ldr	r0, [r4, #0]
 800b2e6:	4401      	add	r1, r0
 800b2e8:	1850      	adds	r0, r2, r1
 800b2ea:	4283      	cmp	r3, r0
 800b2ec:	6011      	str	r1, [r2, #0]
 800b2ee:	d1e0      	bne.n	800b2b2 <_free_r+0x22>
 800b2f0:	6818      	ldr	r0, [r3, #0]
 800b2f2:	685b      	ldr	r3, [r3, #4]
 800b2f4:	6053      	str	r3, [r2, #4]
 800b2f6:	4408      	add	r0, r1
 800b2f8:	6010      	str	r0, [r2, #0]
 800b2fa:	e7da      	b.n	800b2b2 <_free_r+0x22>
 800b2fc:	d902      	bls.n	800b304 <_free_r+0x74>
 800b2fe:	230c      	movs	r3, #12
 800b300:	602b      	str	r3, [r5, #0]
 800b302:	e7d6      	b.n	800b2b2 <_free_r+0x22>
 800b304:	6820      	ldr	r0, [r4, #0]
 800b306:	1821      	adds	r1, r4, r0
 800b308:	428b      	cmp	r3, r1
 800b30a:	bf04      	itt	eq
 800b30c:	6819      	ldreq	r1, [r3, #0]
 800b30e:	685b      	ldreq	r3, [r3, #4]
 800b310:	6063      	str	r3, [r4, #4]
 800b312:	bf04      	itt	eq
 800b314:	1809      	addeq	r1, r1, r0
 800b316:	6021      	streq	r1, [r4, #0]
 800b318:	6054      	str	r4, [r2, #4]
 800b31a:	e7ca      	b.n	800b2b2 <_free_r+0x22>
 800b31c:	bd38      	pop	{r3, r4, r5, pc}
 800b31e:	bf00      	nop
 800b320:	20002530 	.word	0x20002530

0800b324 <malloc>:
 800b324:	4b02      	ldr	r3, [pc, #8]	@ (800b330 <malloc+0xc>)
 800b326:	4601      	mov	r1, r0
 800b328:	6818      	ldr	r0, [r3, #0]
 800b32a:	f000 b825 	b.w	800b378 <_malloc_r>
 800b32e:	bf00      	nop
 800b330:	20000034 	.word	0x20000034

0800b334 <sbrk_aligned>:
 800b334:	b570      	push	{r4, r5, r6, lr}
 800b336:	4e0f      	ldr	r6, [pc, #60]	@ (800b374 <sbrk_aligned+0x40>)
 800b338:	460c      	mov	r4, r1
 800b33a:	6831      	ldr	r1, [r6, #0]
 800b33c:	4605      	mov	r5, r0
 800b33e:	b911      	cbnz	r1, 800b346 <sbrk_aligned+0x12>
 800b340:	f000 fe46 	bl	800bfd0 <_sbrk_r>
 800b344:	6030      	str	r0, [r6, #0]
 800b346:	4621      	mov	r1, r4
 800b348:	4628      	mov	r0, r5
 800b34a:	f000 fe41 	bl	800bfd0 <_sbrk_r>
 800b34e:	1c43      	adds	r3, r0, #1
 800b350:	d103      	bne.n	800b35a <sbrk_aligned+0x26>
 800b352:	f04f 34ff 	mov.w	r4, #4294967295
 800b356:	4620      	mov	r0, r4
 800b358:	bd70      	pop	{r4, r5, r6, pc}
 800b35a:	1cc4      	adds	r4, r0, #3
 800b35c:	f024 0403 	bic.w	r4, r4, #3
 800b360:	42a0      	cmp	r0, r4
 800b362:	d0f8      	beq.n	800b356 <sbrk_aligned+0x22>
 800b364:	1a21      	subs	r1, r4, r0
 800b366:	4628      	mov	r0, r5
 800b368:	f000 fe32 	bl	800bfd0 <_sbrk_r>
 800b36c:	3001      	adds	r0, #1
 800b36e:	d1f2      	bne.n	800b356 <sbrk_aligned+0x22>
 800b370:	e7ef      	b.n	800b352 <sbrk_aligned+0x1e>
 800b372:	bf00      	nop
 800b374:	2000252c 	.word	0x2000252c

0800b378 <_malloc_r>:
 800b378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b37c:	1ccd      	adds	r5, r1, #3
 800b37e:	f025 0503 	bic.w	r5, r5, #3
 800b382:	3508      	adds	r5, #8
 800b384:	2d0c      	cmp	r5, #12
 800b386:	bf38      	it	cc
 800b388:	250c      	movcc	r5, #12
 800b38a:	2d00      	cmp	r5, #0
 800b38c:	4606      	mov	r6, r0
 800b38e:	db01      	blt.n	800b394 <_malloc_r+0x1c>
 800b390:	42a9      	cmp	r1, r5
 800b392:	d904      	bls.n	800b39e <_malloc_r+0x26>
 800b394:	230c      	movs	r3, #12
 800b396:	6033      	str	r3, [r6, #0]
 800b398:	2000      	movs	r0, #0
 800b39a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b39e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b474 <_malloc_r+0xfc>
 800b3a2:	f000 f869 	bl	800b478 <__malloc_lock>
 800b3a6:	f8d8 3000 	ldr.w	r3, [r8]
 800b3aa:	461c      	mov	r4, r3
 800b3ac:	bb44      	cbnz	r4, 800b400 <_malloc_r+0x88>
 800b3ae:	4629      	mov	r1, r5
 800b3b0:	4630      	mov	r0, r6
 800b3b2:	f7ff ffbf 	bl	800b334 <sbrk_aligned>
 800b3b6:	1c43      	adds	r3, r0, #1
 800b3b8:	4604      	mov	r4, r0
 800b3ba:	d158      	bne.n	800b46e <_malloc_r+0xf6>
 800b3bc:	f8d8 4000 	ldr.w	r4, [r8]
 800b3c0:	4627      	mov	r7, r4
 800b3c2:	2f00      	cmp	r7, #0
 800b3c4:	d143      	bne.n	800b44e <_malloc_r+0xd6>
 800b3c6:	2c00      	cmp	r4, #0
 800b3c8:	d04b      	beq.n	800b462 <_malloc_r+0xea>
 800b3ca:	6823      	ldr	r3, [r4, #0]
 800b3cc:	4639      	mov	r1, r7
 800b3ce:	4630      	mov	r0, r6
 800b3d0:	eb04 0903 	add.w	r9, r4, r3
 800b3d4:	f000 fdfc 	bl	800bfd0 <_sbrk_r>
 800b3d8:	4581      	cmp	r9, r0
 800b3da:	d142      	bne.n	800b462 <_malloc_r+0xea>
 800b3dc:	6821      	ldr	r1, [r4, #0]
 800b3de:	1a6d      	subs	r5, r5, r1
 800b3e0:	4629      	mov	r1, r5
 800b3e2:	4630      	mov	r0, r6
 800b3e4:	f7ff ffa6 	bl	800b334 <sbrk_aligned>
 800b3e8:	3001      	adds	r0, #1
 800b3ea:	d03a      	beq.n	800b462 <_malloc_r+0xea>
 800b3ec:	6823      	ldr	r3, [r4, #0]
 800b3ee:	442b      	add	r3, r5
 800b3f0:	6023      	str	r3, [r4, #0]
 800b3f2:	f8d8 3000 	ldr.w	r3, [r8]
 800b3f6:	685a      	ldr	r2, [r3, #4]
 800b3f8:	bb62      	cbnz	r2, 800b454 <_malloc_r+0xdc>
 800b3fa:	f8c8 7000 	str.w	r7, [r8]
 800b3fe:	e00f      	b.n	800b420 <_malloc_r+0xa8>
 800b400:	6822      	ldr	r2, [r4, #0]
 800b402:	1b52      	subs	r2, r2, r5
 800b404:	d420      	bmi.n	800b448 <_malloc_r+0xd0>
 800b406:	2a0b      	cmp	r2, #11
 800b408:	d917      	bls.n	800b43a <_malloc_r+0xc2>
 800b40a:	1961      	adds	r1, r4, r5
 800b40c:	42a3      	cmp	r3, r4
 800b40e:	6025      	str	r5, [r4, #0]
 800b410:	bf18      	it	ne
 800b412:	6059      	strne	r1, [r3, #4]
 800b414:	6863      	ldr	r3, [r4, #4]
 800b416:	bf08      	it	eq
 800b418:	f8c8 1000 	streq.w	r1, [r8]
 800b41c:	5162      	str	r2, [r4, r5]
 800b41e:	604b      	str	r3, [r1, #4]
 800b420:	4630      	mov	r0, r6
 800b422:	f000 f82f 	bl	800b484 <__malloc_unlock>
 800b426:	f104 000b 	add.w	r0, r4, #11
 800b42a:	1d23      	adds	r3, r4, #4
 800b42c:	f020 0007 	bic.w	r0, r0, #7
 800b430:	1ac2      	subs	r2, r0, r3
 800b432:	bf1c      	itt	ne
 800b434:	1a1b      	subne	r3, r3, r0
 800b436:	50a3      	strne	r3, [r4, r2]
 800b438:	e7af      	b.n	800b39a <_malloc_r+0x22>
 800b43a:	6862      	ldr	r2, [r4, #4]
 800b43c:	42a3      	cmp	r3, r4
 800b43e:	bf0c      	ite	eq
 800b440:	f8c8 2000 	streq.w	r2, [r8]
 800b444:	605a      	strne	r2, [r3, #4]
 800b446:	e7eb      	b.n	800b420 <_malloc_r+0xa8>
 800b448:	4623      	mov	r3, r4
 800b44a:	6864      	ldr	r4, [r4, #4]
 800b44c:	e7ae      	b.n	800b3ac <_malloc_r+0x34>
 800b44e:	463c      	mov	r4, r7
 800b450:	687f      	ldr	r7, [r7, #4]
 800b452:	e7b6      	b.n	800b3c2 <_malloc_r+0x4a>
 800b454:	461a      	mov	r2, r3
 800b456:	685b      	ldr	r3, [r3, #4]
 800b458:	42a3      	cmp	r3, r4
 800b45a:	d1fb      	bne.n	800b454 <_malloc_r+0xdc>
 800b45c:	2300      	movs	r3, #0
 800b45e:	6053      	str	r3, [r2, #4]
 800b460:	e7de      	b.n	800b420 <_malloc_r+0xa8>
 800b462:	230c      	movs	r3, #12
 800b464:	6033      	str	r3, [r6, #0]
 800b466:	4630      	mov	r0, r6
 800b468:	f000 f80c 	bl	800b484 <__malloc_unlock>
 800b46c:	e794      	b.n	800b398 <_malloc_r+0x20>
 800b46e:	6005      	str	r5, [r0, #0]
 800b470:	e7d6      	b.n	800b420 <_malloc_r+0xa8>
 800b472:	bf00      	nop
 800b474:	20002530 	.word	0x20002530

0800b478 <__malloc_lock>:
 800b478:	4801      	ldr	r0, [pc, #4]	@ (800b480 <__malloc_lock+0x8>)
 800b47a:	f7ff b8b8 	b.w	800a5ee <__retarget_lock_acquire_recursive>
 800b47e:	bf00      	nop
 800b480:	20002528 	.word	0x20002528

0800b484 <__malloc_unlock>:
 800b484:	4801      	ldr	r0, [pc, #4]	@ (800b48c <__malloc_unlock+0x8>)
 800b486:	f7ff b8b3 	b.w	800a5f0 <__retarget_lock_release_recursive>
 800b48a:	bf00      	nop
 800b48c:	20002528 	.word	0x20002528

0800b490 <_Balloc>:
 800b490:	b570      	push	{r4, r5, r6, lr}
 800b492:	69c6      	ldr	r6, [r0, #28]
 800b494:	4604      	mov	r4, r0
 800b496:	460d      	mov	r5, r1
 800b498:	b976      	cbnz	r6, 800b4b8 <_Balloc+0x28>
 800b49a:	2010      	movs	r0, #16
 800b49c:	f7ff ff42 	bl	800b324 <malloc>
 800b4a0:	4602      	mov	r2, r0
 800b4a2:	61e0      	str	r0, [r4, #28]
 800b4a4:	b920      	cbnz	r0, 800b4b0 <_Balloc+0x20>
 800b4a6:	4b18      	ldr	r3, [pc, #96]	@ (800b508 <_Balloc+0x78>)
 800b4a8:	4818      	ldr	r0, [pc, #96]	@ (800b50c <_Balloc+0x7c>)
 800b4aa:	216b      	movs	r1, #107	@ 0x6b
 800b4ac:	f000 fdae 	bl	800c00c <__assert_func>
 800b4b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b4b4:	6006      	str	r6, [r0, #0]
 800b4b6:	60c6      	str	r6, [r0, #12]
 800b4b8:	69e6      	ldr	r6, [r4, #28]
 800b4ba:	68f3      	ldr	r3, [r6, #12]
 800b4bc:	b183      	cbz	r3, 800b4e0 <_Balloc+0x50>
 800b4be:	69e3      	ldr	r3, [r4, #28]
 800b4c0:	68db      	ldr	r3, [r3, #12]
 800b4c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b4c6:	b9b8      	cbnz	r0, 800b4f8 <_Balloc+0x68>
 800b4c8:	2101      	movs	r1, #1
 800b4ca:	fa01 f605 	lsl.w	r6, r1, r5
 800b4ce:	1d72      	adds	r2, r6, #5
 800b4d0:	0092      	lsls	r2, r2, #2
 800b4d2:	4620      	mov	r0, r4
 800b4d4:	f000 fdb8 	bl	800c048 <_calloc_r>
 800b4d8:	b160      	cbz	r0, 800b4f4 <_Balloc+0x64>
 800b4da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b4de:	e00e      	b.n	800b4fe <_Balloc+0x6e>
 800b4e0:	2221      	movs	r2, #33	@ 0x21
 800b4e2:	2104      	movs	r1, #4
 800b4e4:	4620      	mov	r0, r4
 800b4e6:	f000 fdaf 	bl	800c048 <_calloc_r>
 800b4ea:	69e3      	ldr	r3, [r4, #28]
 800b4ec:	60f0      	str	r0, [r6, #12]
 800b4ee:	68db      	ldr	r3, [r3, #12]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d1e4      	bne.n	800b4be <_Balloc+0x2e>
 800b4f4:	2000      	movs	r0, #0
 800b4f6:	bd70      	pop	{r4, r5, r6, pc}
 800b4f8:	6802      	ldr	r2, [r0, #0]
 800b4fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b4fe:	2300      	movs	r3, #0
 800b500:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b504:	e7f7      	b.n	800b4f6 <_Balloc+0x66>
 800b506:	bf00      	nop
 800b508:	0800cc39 	.word	0x0800cc39
 800b50c:	0800ccb9 	.word	0x0800ccb9

0800b510 <_Bfree>:
 800b510:	b570      	push	{r4, r5, r6, lr}
 800b512:	69c6      	ldr	r6, [r0, #28]
 800b514:	4605      	mov	r5, r0
 800b516:	460c      	mov	r4, r1
 800b518:	b976      	cbnz	r6, 800b538 <_Bfree+0x28>
 800b51a:	2010      	movs	r0, #16
 800b51c:	f7ff ff02 	bl	800b324 <malloc>
 800b520:	4602      	mov	r2, r0
 800b522:	61e8      	str	r0, [r5, #28]
 800b524:	b920      	cbnz	r0, 800b530 <_Bfree+0x20>
 800b526:	4b09      	ldr	r3, [pc, #36]	@ (800b54c <_Bfree+0x3c>)
 800b528:	4809      	ldr	r0, [pc, #36]	@ (800b550 <_Bfree+0x40>)
 800b52a:	218f      	movs	r1, #143	@ 0x8f
 800b52c:	f000 fd6e 	bl	800c00c <__assert_func>
 800b530:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b534:	6006      	str	r6, [r0, #0]
 800b536:	60c6      	str	r6, [r0, #12]
 800b538:	b13c      	cbz	r4, 800b54a <_Bfree+0x3a>
 800b53a:	69eb      	ldr	r3, [r5, #28]
 800b53c:	6862      	ldr	r2, [r4, #4]
 800b53e:	68db      	ldr	r3, [r3, #12]
 800b540:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b544:	6021      	str	r1, [r4, #0]
 800b546:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b54a:	bd70      	pop	{r4, r5, r6, pc}
 800b54c:	0800cc39 	.word	0x0800cc39
 800b550:	0800ccb9 	.word	0x0800ccb9

0800b554 <__multadd>:
 800b554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b558:	690d      	ldr	r5, [r1, #16]
 800b55a:	4607      	mov	r7, r0
 800b55c:	460c      	mov	r4, r1
 800b55e:	461e      	mov	r6, r3
 800b560:	f101 0c14 	add.w	ip, r1, #20
 800b564:	2000      	movs	r0, #0
 800b566:	f8dc 3000 	ldr.w	r3, [ip]
 800b56a:	b299      	uxth	r1, r3
 800b56c:	fb02 6101 	mla	r1, r2, r1, r6
 800b570:	0c1e      	lsrs	r6, r3, #16
 800b572:	0c0b      	lsrs	r3, r1, #16
 800b574:	fb02 3306 	mla	r3, r2, r6, r3
 800b578:	b289      	uxth	r1, r1
 800b57a:	3001      	adds	r0, #1
 800b57c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b580:	4285      	cmp	r5, r0
 800b582:	f84c 1b04 	str.w	r1, [ip], #4
 800b586:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b58a:	dcec      	bgt.n	800b566 <__multadd+0x12>
 800b58c:	b30e      	cbz	r6, 800b5d2 <__multadd+0x7e>
 800b58e:	68a3      	ldr	r3, [r4, #8]
 800b590:	42ab      	cmp	r3, r5
 800b592:	dc19      	bgt.n	800b5c8 <__multadd+0x74>
 800b594:	6861      	ldr	r1, [r4, #4]
 800b596:	4638      	mov	r0, r7
 800b598:	3101      	adds	r1, #1
 800b59a:	f7ff ff79 	bl	800b490 <_Balloc>
 800b59e:	4680      	mov	r8, r0
 800b5a0:	b928      	cbnz	r0, 800b5ae <__multadd+0x5a>
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	4b0c      	ldr	r3, [pc, #48]	@ (800b5d8 <__multadd+0x84>)
 800b5a6:	480d      	ldr	r0, [pc, #52]	@ (800b5dc <__multadd+0x88>)
 800b5a8:	21ba      	movs	r1, #186	@ 0xba
 800b5aa:	f000 fd2f 	bl	800c00c <__assert_func>
 800b5ae:	6922      	ldr	r2, [r4, #16]
 800b5b0:	3202      	adds	r2, #2
 800b5b2:	f104 010c 	add.w	r1, r4, #12
 800b5b6:	0092      	lsls	r2, r2, #2
 800b5b8:	300c      	adds	r0, #12
 800b5ba:	f000 fd19 	bl	800bff0 <memcpy>
 800b5be:	4621      	mov	r1, r4
 800b5c0:	4638      	mov	r0, r7
 800b5c2:	f7ff ffa5 	bl	800b510 <_Bfree>
 800b5c6:	4644      	mov	r4, r8
 800b5c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b5cc:	3501      	adds	r5, #1
 800b5ce:	615e      	str	r6, [r3, #20]
 800b5d0:	6125      	str	r5, [r4, #16]
 800b5d2:	4620      	mov	r0, r4
 800b5d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5d8:	0800cca8 	.word	0x0800cca8
 800b5dc:	0800ccb9 	.word	0x0800ccb9

0800b5e0 <__hi0bits>:
 800b5e0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	bf36      	itet	cc
 800b5e8:	0403      	lslcc	r3, r0, #16
 800b5ea:	2000      	movcs	r0, #0
 800b5ec:	2010      	movcc	r0, #16
 800b5ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b5f2:	bf3c      	itt	cc
 800b5f4:	021b      	lslcc	r3, r3, #8
 800b5f6:	3008      	addcc	r0, #8
 800b5f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b5fc:	bf3c      	itt	cc
 800b5fe:	011b      	lslcc	r3, r3, #4
 800b600:	3004      	addcc	r0, #4
 800b602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b606:	bf3c      	itt	cc
 800b608:	009b      	lslcc	r3, r3, #2
 800b60a:	3002      	addcc	r0, #2
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	db05      	blt.n	800b61c <__hi0bits+0x3c>
 800b610:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b614:	f100 0001 	add.w	r0, r0, #1
 800b618:	bf08      	it	eq
 800b61a:	2020      	moveq	r0, #32
 800b61c:	4770      	bx	lr

0800b61e <__lo0bits>:
 800b61e:	6803      	ldr	r3, [r0, #0]
 800b620:	4602      	mov	r2, r0
 800b622:	f013 0007 	ands.w	r0, r3, #7
 800b626:	d00b      	beq.n	800b640 <__lo0bits+0x22>
 800b628:	07d9      	lsls	r1, r3, #31
 800b62a:	d421      	bmi.n	800b670 <__lo0bits+0x52>
 800b62c:	0798      	lsls	r0, r3, #30
 800b62e:	bf49      	itett	mi
 800b630:	085b      	lsrmi	r3, r3, #1
 800b632:	089b      	lsrpl	r3, r3, #2
 800b634:	2001      	movmi	r0, #1
 800b636:	6013      	strmi	r3, [r2, #0]
 800b638:	bf5c      	itt	pl
 800b63a:	6013      	strpl	r3, [r2, #0]
 800b63c:	2002      	movpl	r0, #2
 800b63e:	4770      	bx	lr
 800b640:	b299      	uxth	r1, r3
 800b642:	b909      	cbnz	r1, 800b648 <__lo0bits+0x2a>
 800b644:	0c1b      	lsrs	r3, r3, #16
 800b646:	2010      	movs	r0, #16
 800b648:	b2d9      	uxtb	r1, r3
 800b64a:	b909      	cbnz	r1, 800b650 <__lo0bits+0x32>
 800b64c:	3008      	adds	r0, #8
 800b64e:	0a1b      	lsrs	r3, r3, #8
 800b650:	0719      	lsls	r1, r3, #28
 800b652:	bf04      	itt	eq
 800b654:	091b      	lsreq	r3, r3, #4
 800b656:	3004      	addeq	r0, #4
 800b658:	0799      	lsls	r1, r3, #30
 800b65a:	bf04      	itt	eq
 800b65c:	089b      	lsreq	r3, r3, #2
 800b65e:	3002      	addeq	r0, #2
 800b660:	07d9      	lsls	r1, r3, #31
 800b662:	d403      	bmi.n	800b66c <__lo0bits+0x4e>
 800b664:	085b      	lsrs	r3, r3, #1
 800b666:	f100 0001 	add.w	r0, r0, #1
 800b66a:	d003      	beq.n	800b674 <__lo0bits+0x56>
 800b66c:	6013      	str	r3, [r2, #0]
 800b66e:	4770      	bx	lr
 800b670:	2000      	movs	r0, #0
 800b672:	4770      	bx	lr
 800b674:	2020      	movs	r0, #32
 800b676:	4770      	bx	lr

0800b678 <__i2b>:
 800b678:	b510      	push	{r4, lr}
 800b67a:	460c      	mov	r4, r1
 800b67c:	2101      	movs	r1, #1
 800b67e:	f7ff ff07 	bl	800b490 <_Balloc>
 800b682:	4602      	mov	r2, r0
 800b684:	b928      	cbnz	r0, 800b692 <__i2b+0x1a>
 800b686:	4b05      	ldr	r3, [pc, #20]	@ (800b69c <__i2b+0x24>)
 800b688:	4805      	ldr	r0, [pc, #20]	@ (800b6a0 <__i2b+0x28>)
 800b68a:	f240 1145 	movw	r1, #325	@ 0x145
 800b68e:	f000 fcbd 	bl	800c00c <__assert_func>
 800b692:	2301      	movs	r3, #1
 800b694:	6144      	str	r4, [r0, #20]
 800b696:	6103      	str	r3, [r0, #16]
 800b698:	bd10      	pop	{r4, pc}
 800b69a:	bf00      	nop
 800b69c:	0800cca8 	.word	0x0800cca8
 800b6a0:	0800ccb9 	.word	0x0800ccb9

0800b6a4 <__multiply>:
 800b6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6a8:	4614      	mov	r4, r2
 800b6aa:	690a      	ldr	r2, [r1, #16]
 800b6ac:	6923      	ldr	r3, [r4, #16]
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	bfa8      	it	ge
 800b6b2:	4623      	movge	r3, r4
 800b6b4:	460f      	mov	r7, r1
 800b6b6:	bfa4      	itt	ge
 800b6b8:	460c      	movge	r4, r1
 800b6ba:	461f      	movge	r7, r3
 800b6bc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b6c0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b6c4:	68a3      	ldr	r3, [r4, #8]
 800b6c6:	6861      	ldr	r1, [r4, #4]
 800b6c8:	eb0a 0609 	add.w	r6, sl, r9
 800b6cc:	42b3      	cmp	r3, r6
 800b6ce:	b085      	sub	sp, #20
 800b6d0:	bfb8      	it	lt
 800b6d2:	3101      	addlt	r1, #1
 800b6d4:	f7ff fedc 	bl	800b490 <_Balloc>
 800b6d8:	b930      	cbnz	r0, 800b6e8 <__multiply+0x44>
 800b6da:	4602      	mov	r2, r0
 800b6dc:	4b44      	ldr	r3, [pc, #272]	@ (800b7f0 <__multiply+0x14c>)
 800b6de:	4845      	ldr	r0, [pc, #276]	@ (800b7f4 <__multiply+0x150>)
 800b6e0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b6e4:	f000 fc92 	bl	800c00c <__assert_func>
 800b6e8:	f100 0514 	add.w	r5, r0, #20
 800b6ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b6f0:	462b      	mov	r3, r5
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	4543      	cmp	r3, r8
 800b6f6:	d321      	bcc.n	800b73c <__multiply+0x98>
 800b6f8:	f107 0114 	add.w	r1, r7, #20
 800b6fc:	f104 0214 	add.w	r2, r4, #20
 800b700:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b704:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b708:	9302      	str	r3, [sp, #8]
 800b70a:	1b13      	subs	r3, r2, r4
 800b70c:	3b15      	subs	r3, #21
 800b70e:	f023 0303 	bic.w	r3, r3, #3
 800b712:	3304      	adds	r3, #4
 800b714:	f104 0715 	add.w	r7, r4, #21
 800b718:	42ba      	cmp	r2, r7
 800b71a:	bf38      	it	cc
 800b71c:	2304      	movcc	r3, #4
 800b71e:	9301      	str	r3, [sp, #4]
 800b720:	9b02      	ldr	r3, [sp, #8]
 800b722:	9103      	str	r1, [sp, #12]
 800b724:	428b      	cmp	r3, r1
 800b726:	d80c      	bhi.n	800b742 <__multiply+0x9e>
 800b728:	2e00      	cmp	r6, #0
 800b72a:	dd03      	ble.n	800b734 <__multiply+0x90>
 800b72c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b730:	2b00      	cmp	r3, #0
 800b732:	d05b      	beq.n	800b7ec <__multiply+0x148>
 800b734:	6106      	str	r6, [r0, #16]
 800b736:	b005      	add	sp, #20
 800b738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b73c:	f843 2b04 	str.w	r2, [r3], #4
 800b740:	e7d8      	b.n	800b6f4 <__multiply+0x50>
 800b742:	f8b1 a000 	ldrh.w	sl, [r1]
 800b746:	f1ba 0f00 	cmp.w	sl, #0
 800b74a:	d024      	beq.n	800b796 <__multiply+0xf2>
 800b74c:	f104 0e14 	add.w	lr, r4, #20
 800b750:	46a9      	mov	r9, r5
 800b752:	f04f 0c00 	mov.w	ip, #0
 800b756:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b75a:	f8d9 3000 	ldr.w	r3, [r9]
 800b75e:	fa1f fb87 	uxth.w	fp, r7
 800b762:	b29b      	uxth	r3, r3
 800b764:	fb0a 330b 	mla	r3, sl, fp, r3
 800b768:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b76c:	f8d9 7000 	ldr.w	r7, [r9]
 800b770:	4463      	add	r3, ip
 800b772:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b776:	fb0a c70b 	mla	r7, sl, fp, ip
 800b77a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b77e:	b29b      	uxth	r3, r3
 800b780:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b784:	4572      	cmp	r2, lr
 800b786:	f849 3b04 	str.w	r3, [r9], #4
 800b78a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b78e:	d8e2      	bhi.n	800b756 <__multiply+0xb2>
 800b790:	9b01      	ldr	r3, [sp, #4]
 800b792:	f845 c003 	str.w	ip, [r5, r3]
 800b796:	9b03      	ldr	r3, [sp, #12]
 800b798:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b79c:	3104      	adds	r1, #4
 800b79e:	f1b9 0f00 	cmp.w	r9, #0
 800b7a2:	d021      	beq.n	800b7e8 <__multiply+0x144>
 800b7a4:	682b      	ldr	r3, [r5, #0]
 800b7a6:	f104 0c14 	add.w	ip, r4, #20
 800b7aa:	46ae      	mov	lr, r5
 800b7ac:	f04f 0a00 	mov.w	sl, #0
 800b7b0:	f8bc b000 	ldrh.w	fp, [ip]
 800b7b4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b7b8:	fb09 770b 	mla	r7, r9, fp, r7
 800b7bc:	4457      	add	r7, sl
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b7c4:	f84e 3b04 	str.w	r3, [lr], #4
 800b7c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b7cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b7d0:	f8be 3000 	ldrh.w	r3, [lr]
 800b7d4:	fb09 330a 	mla	r3, r9, sl, r3
 800b7d8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b7dc:	4562      	cmp	r2, ip
 800b7de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b7e2:	d8e5      	bhi.n	800b7b0 <__multiply+0x10c>
 800b7e4:	9f01      	ldr	r7, [sp, #4]
 800b7e6:	51eb      	str	r3, [r5, r7]
 800b7e8:	3504      	adds	r5, #4
 800b7ea:	e799      	b.n	800b720 <__multiply+0x7c>
 800b7ec:	3e01      	subs	r6, #1
 800b7ee:	e79b      	b.n	800b728 <__multiply+0x84>
 800b7f0:	0800cca8 	.word	0x0800cca8
 800b7f4:	0800ccb9 	.word	0x0800ccb9

0800b7f8 <__pow5mult>:
 800b7f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7fc:	4615      	mov	r5, r2
 800b7fe:	f012 0203 	ands.w	r2, r2, #3
 800b802:	4607      	mov	r7, r0
 800b804:	460e      	mov	r6, r1
 800b806:	d007      	beq.n	800b818 <__pow5mult+0x20>
 800b808:	4c25      	ldr	r4, [pc, #148]	@ (800b8a0 <__pow5mult+0xa8>)
 800b80a:	3a01      	subs	r2, #1
 800b80c:	2300      	movs	r3, #0
 800b80e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b812:	f7ff fe9f 	bl	800b554 <__multadd>
 800b816:	4606      	mov	r6, r0
 800b818:	10ad      	asrs	r5, r5, #2
 800b81a:	d03d      	beq.n	800b898 <__pow5mult+0xa0>
 800b81c:	69fc      	ldr	r4, [r7, #28]
 800b81e:	b97c      	cbnz	r4, 800b840 <__pow5mult+0x48>
 800b820:	2010      	movs	r0, #16
 800b822:	f7ff fd7f 	bl	800b324 <malloc>
 800b826:	4602      	mov	r2, r0
 800b828:	61f8      	str	r0, [r7, #28]
 800b82a:	b928      	cbnz	r0, 800b838 <__pow5mult+0x40>
 800b82c:	4b1d      	ldr	r3, [pc, #116]	@ (800b8a4 <__pow5mult+0xac>)
 800b82e:	481e      	ldr	r0, [pc, #120]	@ (800b8a8 <__pow5mult+0xb0>)
 800b830:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b834:	f000 fbea 	bl	800c00c <__assert_func>
 800b838:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b83c:	6004      	str	r4, [r0, #0]
 800b83e:	60c4      	str	r4, [r0, #12]
 800b840:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b844:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b848:	b94c      	cbnz	r4, 800b85e <__pow5mult+0x66>
 800b84a:	f240 2171 	movw	r1, #625	@ 0x271
 800b84e:	4638      	mov	r0, r7
 800b850:	f7ff ff12 	bl	800b678 <__i2b>
 800b854:	2300      	movs	r3, #0
 800b856:	f8c8 0008 	str.w	r0, [r8, #8]
 800b85a:	4604      	mov	r4, r0
 800b85c:	6003      	str	r3, [r0, #0]
 800b85e:	f04f 0900 	mov.w	r9, #0
 800b862:	07eb      	lsls	r3, r5, #31
 800b864:	d50a      	bpl.n	800b87c <__pow5mult+0x84>
 800b866:	4631      	mov	r1, r6
 800b868:	4622      	mov	r2, r4
 800b86a:	4638      	mov	r0, r7
 800b86c:	f7ff ff1a 	bl	800b6a4 <__multiply>
 800b870:	4631      	mov	r1, r6
 800b872:	4680      	mov	r8, r0
 800b874:	4638      	mov	r0, r7
 800b876:	f7ff fe4b 	bl	800b510 <_Bfree>
 800b87a:	4646      	mov	r6, r8
 800b87c:	106d      	asrs	r5, r5, #1
 800b87e:	d00b      	beq.n	800b898 <__pow5mult+0xa0>
 800b880:	6820      	ldr	r0, [r4, #0]
 800b882:	b938      	cbnz	r0, 800b894 <__pow5mult+0x9c>
 800b884:	4622      	mov	r2, r4
 800b886:	4621      	mov	r1, r4
 800b888:	4638      	mov	r0, r7
 800b88a:	f7ff ff0b 	bl	800b6a4 <__multiply>
 800b88e:	6020      	str	r0, [r4, #0]
 800b890:	f8c0 9000 	str.w	r9, [r0]
 800b894:	4604      	mov	r4, r0
 800b896:	e7e4      	b.n	800b862 <__pow5mult+0x6a>
 800b898:	4630      	mov	r0, r6
 800b89a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b89e:	bf00      	nop
 800b8a0:	0800cd14 	.word	0x0800cd14
 800b8a4:	0800cc39 	.word	0x0800cc39
 800b8a8:	0800ccb9 	.word	0x0800ccb9

0800b8ac <__lshift>:
 800b8ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8b0:	460c      	mov	r4, r1
 800b8b2:	6849      	ldr	r1, [r1, #4]
 800b8b4:	6923      	ldr	r3, [r4, #16]
 800b8b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b8ba:	68a3      	ldr	r3, [r4, #8]
 800b8bc:	4607      	mov	r7, r0
 800b8be:	4691      	mov	r9, r2
 800b8c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b8c4:	f108 0601 	add.w	r6, r8, #1
 800b8c8:	42b3      	cmp	r3, r6
 800b8ca:	db0b      	blt.n	800b8e4 <__lshift+0x38>
 800b8cc:	4638      	mov	r0, r7
 800b8ce:	f7ff fddf 	bl	800b490 <_Balloc>
 800b8d2:	4605      	mov	r5, r0
 800b8d4:	b948      	cbnz	r0, 800b8ea <__lshift+0x3e>
 800b8d6:	4602      	mov	r2, r0
 800b8d8:	4b28      	ldr	r3, [pc, #160]	@ (800b97c <__lshift+0xd0>)
 800b8da:	4829      	ldr	r0, [pc, #164]	@ (800b980 <__lshift+0xd4>)
 800b8dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b8e0:	f000 fb94 	bl	800c00c <__assert_func>
 800b8e4:	3101      	adds	r1, #1
 800b8e6:	005b      	lsls	r3, r3, #1
 800b8e8:	e7ee      	b.n	800b8c8 <__lshift+0x1c>
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	f100 0114 	add.w	r1, r0, #20
 800b8f0:	f100 0210 	add.w	r2, r0, #16
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	4553      	cmp	r3, sl
 800b8f8:	db33      	blt.n	800b962 <__lshift+0xb6>
 800b8fa:	6920      	ldr	r0, [r4, #16]
 800b8fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b900:	f104 0314 	add.w	r3, r4, #20
 800b904:	f019 091f 	ands.w	r9, r9, #31
 800b908:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b90c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b910:	d02b      	beq.n	800b96a <__lshift+0xbe>
 800b912:	f1c9 0e20 	rsb	lr, r9, #32
 800b916:	468a      	mov	sl, r1
 800b918:	2200      	movs	r2, #0
 800b91a:	6818      	ldr	r0, [r3, #0]
 800b91c:	fa00 f009 	lsl.w	r0, r0, r9
 800b920:	4310      	orrs	r0, r2
 800b922:	f84a 0b04 	str.w	r0, [sl], #4
 800b926:	f853 2b04 	ldr.w	r2, [r3], #4
 800b92a:	459c      	cmp	ip, r3
 800b92c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b930:	d8f3      	bhi.n	800b91a <__lshift+0x6e>
 800b932:	ebac 0304 	sub.w	r3, ip, r4
 800b936:	3b15      	subs	r3, #21
 800b938:	f023 0303 	bic.w	r3, r3, #3
 800b93c:	3304      	adds	r3, #4
 800b93e:	f104 0015 	add.w	r0, r4, #21
 800b942:	4584      	cmp	ip, r0
 800b944:	bf38      	it	cc
 800b946:	2304      	movcc	r3, #4
 800b948:	50ca      	str	r2, [r1, r3]
 800b94a:	b10a      	cbz	r2, 800b950 <__lshift+0xa4>
 800b94c:	f108 0602 	add.w	r6, r8, #2
 800b950:	3e01      	subs	r6, #1
 800b952:	4638      	mov	r0, r7
 800b954:	612e      	str	r6, [r5, #16]
 800b956:	4621      	mov	r1, r4
 800b958:	f7ff fdda 	bl	800b510 <_Bfree>
 800b95c:	4628      	mov	r0, r5
 800b95e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b962:	f842 0f04 	str.w	r0, [r2, #4]!
 800b966:	3301      	adds	r3, #1
 800b968:	e7c5      	b.n	800b8f6 <__lshift+0x4a>
 800b96a:	3904      	subs	r1, #4
 800b96c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b970:	f841 2f04 	str.w	r2, [r1, #4]!
 800b974:	459c      	cmp	ip, r3
 800b976:	d8f9      	bhi.n	800b96c <__lshift+0xc0>
 800b978:	e7ea      	b.n	800b950 <__lshift+0xa4>
 800b97a:	bf00      	nop
 800b97c:	0800cca8 	.word	0x0800cca8
 800b980:	0800ccb9 	.word	0x0800ccb9

0800b984 <__mcmp>:
 800b984:	690a      	ldr	r2, [r1, #16]
 800b986:	4603      	mov	r3, r0
 800b988:	6900      	ldr	r0, [r0, #16]
 800b98a:	1a80      	subs	r0, r0, r2
 800b98c:	b530      	push	{r4, r5, lr}
 800b98e:	d10e      	bne.n	800b9ae <__mcmp+0x2a>
 800b990:	3314      	adds	r3, #20
 800b992:	3114      	adds	r1, #20
 800b994:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b998:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b99c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b9a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b9a4:	4295      	cmp	r5, r2
 800b9a6:	d003      	beq.n	800b9b0 <__mcmp+0x2c>
 800b9a8:	d205      	bcs.n	800b9b6 <__mcmp+0x32>
 800b9aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ae:	bd30      	pop	{r4, r5, pc}
 800b9b0:	42a3      	cmp	r3, r4
 800b9b2:	d3f3      	bcc.n	800b99c <__mcmp+0x18>
 800b9b4:	e7fb      	b.n	800b9ae <__mcmp+0x2a>
 800b9b6:	2001      	movs	r0, #1
 800b9b8:	e7f9      	b.n	800b9ae <__mcmp+0x2a>
	...

0800b9bc <__mdiff>:
 800b9bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9c0:	4689      	mov	r9, r1
 800b9c2:	4606      	mov	r6, r0
 800b9c4:	4611      	mov	r1, r2
 800b9c6:	4648      	mov	r0, r9
 800b9c8:	4614      	mov	r4, r2
 800b9ca:	f7ff ffdb 	bl	800b984 <__mcmp>
 800b9ce:	1e05      	subs	r5, r0, #0
 800b9d0:	d112      	bne.n	800b9f8 <__mdiff+0x3c>
 800b9d2:	4629      	mov	r1, r5
 800b9d4:	4630      	mov	r0, r6
 800b9d6:	f7ff fd5b 	bl	800b490 <_Balloc>
 800b9da:	4602      	mov	r2, r0
 800b9dc:	b928      	cbnz	r0, 800b9ea <__mdiff+0x2e>
 800b9de:	4b3f      	ldr	r3, [pc, #252]	@ (800badc <__mdiff+0x120>)
 800b9e0:	f240 2137 	movw	r1, #567	@ 0x237
 800b9e4:	483e      	ldr	r0, [pc, #248]	@ (800bae0 <__mdiff+0x124>)
 800b9e6:	f000 fb11 	bl	800c00c <__assert_func>
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b9f0:	4610      	mov	r0, r2
 800b9f2:	b003      	add	sp, #12
 800b9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9f8:	bfbc      	itt	lt
 800b9fa:	464b      	movlt	r3, r9
 800b9fc:	46a1      	movlt	r9, r4
 800b9fe:	4630      	mov	r0, r6
 800ba00:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ba04:	bfba      	itte	lt
 800ba06:	461c      	movlt	r4, r3
 800ba08:	2501      	movlt	r5, #1
 800ba0a:	2500      	movge	r5, #0
 800ba0c:	f7ff fd40 	bl	800b490 <_Balloc>
 800ba10:	4602      	mov	r2, r0
 800ba12:	b918      	cbnz	r0, 800ba1c <__mdiff+0x60>
 800ba14:	4b31      	ldr	r3, [pc, #196]	@ (800badc <__mdiff+0x120>)
 800ba16:	f240 2145 	movw	r1, #581	@ 0x245
 800ba1a:	e7e3      	b.n	800b9e4 <__mdiff+0x28>
 800ba1c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ba20:	6926      	ldr	r6, [r4, #16]
 800ba22:	60c5      	str	r5, [r0, #12]
 800ba24:	f109 0310 	add.w	r3, r9, #16
 800ba28:	f109 0514 	add.w	r5, r9, #20
 800ba2c:	f104 0e14 	add.w	lr, r4, #20
 800ba30:	f100 0b14 	add.w	fp, r0, #20
 800ba34:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ba38:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ba3c:	9301      	str	r3, [sp, #4]
 800ba3e:	46d9      	mov	r9, fp
 800ba40:	f04f 0c00 	mov.w	ip, #0
 800ba44:	9b01      	ldr	r3, [sp, #4]
 800ba46:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ba4a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ba4e:	9301      	str	r3, [sp, #4]
 800ba50:	fa1f f38a 	uxth.w	r3, sl
 800ba54:	4619      	mov	r1, r3
 800ba56:	b283      	uxth	r3, r0
 800ba58:	1acb      	subs	r3, r1, r3
 800ba5a:	0c00      	lsrs	r0, r0, #16
 800ba5c:	4463      	add	r3, ip
 800ba5e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ba62:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ba66:	b29b      	uxth	r3, r3
 800ba68:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ba6c:	4576      	cmp	r6, lr
 800ba6e:	f849 3b04 	str.w	r3, [r9], #4
 800ba72:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ba76:	d8e5      	bhi.n	800ba44 <__mdiff+0x88>
 800ba78:	1b33      	subs	r3, r6, r4
 800ba7a:	3b15      	subs	r3, #21
 800ba7c:	f023 0303 	bic.w	r3, r3, #3
 800ba80:	3415      	adds	r4, #21
 800ba82:	3304      	adds	r3, #4
 800ba84:	42a6      	cmp	r6, r4
 800ba86:	bf38      	it	cc
 800ba88:	2304      	movcc	r3, #4
 800ba8a:	441d      	add	r5, r3
 800ba8c:	445b      	add	r3, fp
 800ba8e:	461e      	mov	r6, r3
 800ba90:	462c      	mov	r4, r5
 800ba92:	4544      	cmp	r4, r8
 800ba94:	d30e      	bcc.n	800bab4 <__mdiff+0xf8>
 800ba96:	f108 0103 	add.w	r1, r8, #3
 800ba9a:	1b49      	subs	r1, r1, r5
 800ba9c:	f021 0103 	bic.w	r1, r1, #3
 800baa0:	3d03      	subs	r5, #3
 800baa2:	45a8      	cmp	r8, r5
 800baa4:	bf38      	it	cc
 800baa6:	2100      	movcc	r1, #0
 800baa8:	440b      	add	r3, r1
 800baaa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800baae:	b191      	cbz	r1, 800bad6 <__mdiff+0x11a>
 800bab0:	6117      	str	r7, [r2, #16]
 800bab2:	e79d      	b.n	800b9f0 <__mdiff+0x34>
 800bab4:	f854 1b04 	ldr.w	r1, [r4], #4
 800bab8:	46e6      	mov	lr, ip
 800baba:	0c08      	lsrs	r0, r1, #16
 800babc:	fa1c fc81 	uxtah	ip, ip, r1
 800bac0:	4471      	add	r1, lr
 800bac2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bac6:	b289      	uxth	r1, r1
 800bac8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bacc:	f846 1b04 	str.w	r1, [r6], #4
 800bad0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bad4:	e7dd      	b.n	800ba92 <__mdiff+0xd6>
 800bad6:	3f01      	subs	r7, #1
 800bad8:	e7e7      	b.n	800baaa <__mdiff+0xee>
 800bada:	bf00      	nop
 800badc:	0800cca8 	.word	0x0800cca8
 800bae0:	0800ccb9 	.word	0x0800ccb9

0800bae4 <__d2b>:
 800bae4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bae8:	460f      	mov	r7, r1
 800baea:	2101      	movs	r1, #1
 800baec:	ec59 8b10 	vmov	r8, r9, d0
 800baf0:	4616      	mov	r6, r2
 800baf2:	f7ff fccd 	bl	800b490 <_Balloc>
 800baf6:	4604      	mov	r4, r0
 800baf8:	b930      	cbnz	r0, 800bb08 <__d2b+0x24>
 800bafa:	4602      	mov	r2, r0
 800bafc:	4b23      	ldr	r3, [pc, #140]	@ (800bb8c <__d2b+0xa8>)
 800bafe:	4824      	ldr	r0, [pc, #144]	@ (800bb90 <__d2b+0xac>)
 800bb00:	f240 310f 	movw	r1, #783	@ 0x30f
 800bb04:	f000 fa82 	bl	800c00c <__assert_func>
 800bb08:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bb0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bb10:	b10d      	cbz	r5, 800bb16 <__d2b+0x32>
 800bb12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bb16:	9301      	str	r3, [sp, #4]
 800bb18:	f1b8 0300 	subs.w	r3, r8, #0
 800bb1c:	d023      	beq.n	800bb66 <__d2b+0x82>
 800bb1e:	4668      	mov	r0, sp
 800bb20:	9300      	str	r3, [sp, #0]
 800bb22:	f7ff fd7c 	bl	800b61e <__lo0bits>
 800bb26:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bb2a:	b1d0      	cbz	r0, 800bb62 <__d2b+0x7e>
 800bb2c:	f1c0 0320 	rsb	r3, r0, #32
 800bb30:	fa02 f303 	lsl.w	r3, r2, r3
 800bb34:	430b      	orrs	r3, r1
 800bb36:	40c2      	lsrs	r2, r0
 800bb38:	6163      	str	r3, [r4, #20]
 800bb3a:	9201      	str	r2, [sp, #4]
 800bb3c:	9b01      	ldr	r3, [sp, #4]
 800bb3e:	61a3      	str	r3, [r4, #24]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	bf0c      	ite	eq
 800bb44:	2201      	moveq	r2, #1
 800bb46:	2202      	movne	r2, #2
 800bb48:	6122      	str	r2, [r4, #16]
 800bb4a:	b1a5      	cbz	r5, 800bb76 <__d2b+0x92>
 800bb4c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bb50:	4405      	add	r5, r0
 800bb52:	603d      	str	r5, [r7, #0]
 800bb54:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bb58:	6030      	str	r0, [r6, #0]
 800bb5a:	4620      	mov	r0, r4
 800bb5c:	b003      	add	sp, #12
 800bb5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb62:	6161      	str	r1, [r4, #20]
 800bb64:	e7ea      	b.n	800bb3c <__d2b+0x58>
 800bb66:	a801      	add	r0, sp, #4
 800bb68:	f7ff fd59 	bl	800b61e <__lo0bits>
 800bb6c:	9b01      	ldr	r3, [sp, #4]
 800bb6e:	6163      	str	r3, [r4, #20]
 800bb70:	3020      	adds	r0, #32
 800bb72:	2201      	movs	r2, #1
 800bb74:	e7e8      	b.n	800bb48 <__d2b+0x64>
 800bb76:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bb7a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bb7e:	6038      	str	r0, [r7, #0]
 800bb80:	6918      	ldr	r0, [r3, #16]
 800bb82:	f7ff fd2d 	bl	800b5e0 <__hi0bits>
 800bb86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bb8a:	e7e5      	b.n	800bb58 <__d2b+0x74>
 800bb8c:	0800cca8 	.word	0x0800cca8
 800bb90:	0800ccb9 	.word	0x0800ccb9

0800bb94 <__ssputs_r>:
 800bb94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb98:	688e      	ldr	r6, [r1, #8]
 800bb9a:	461f      	mov	r7, r3
 800bb9c:	42be      	cmp	r6, r7
 800bb9e:	680b      	ldr	r3, [r1, #0]
 800bba0:	4682      	mov	sl, r0
 800bba2:	460c      	mov	r4, r1
 800bba4:	4690      	mov	r8, r2
 800bba6:	d82d      	bhi.n	800bc04 <__ssputs_r+0x70>
 800bba8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bbac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bbb0:	d026      	beq.n	800bc00 <__ssputs_r+0x6c>
 800bbb2:	6965      	ldr	r5, [r4, #20]
 800bbb4:	6909      	ldr	r1, [r1, #16]
 800bbb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bbba:	eba3 0901 	sub.w	r9, r3, r1
 800bbbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bbc2:	1c7b      	adds	r3, r7, #1
 800bbc4:	444b      	add	r3, r9
 800bbc6:	106d      	asrs	r5, r5, #1
 800bbc8:	429d      	cmp	r5, r3
 800bbca:	bf38      	it	cc
 800bbcc:	461d      	movcc	r5, r3
 800bbce:	0553      	lsls	r3, r2, #21
 800bbd0:	d527      	bpl.n	800bc22 <__ssputs_r+0x8e>
 800bbd2:	4629      	mov	r1, r5
 800bbd4:	f7ff fbd0 	bl	800b378 <_malloc_r>
 800bbd8:	4606      	mov	r6, r0
 800bbda:	b360      	cbz	r0, 800bc36 <__ssputs_r+0xa2>
 800bbdc:	6921      	ldr	r1, [r4, #16]
 800bbde:	464a      	mov	r2, r9
 800bbe0:	f000 fa06 	bl	800bff0 <memcpy>
 800bbe4:	89a3      	ldrh	r3, [r4, #12]
 800bbe6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bbea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbee:	81a3      	strh	r3, [r4, #12]
 800bbf0:	6126      	str	r6, [r4, #16]
 800bbf2:	6165      	str	r5, [r4, #20]
 800bbf4:	444e      	add	r6, r9
 800bbf6:	eba5 0509 	sub.w	r5, r5, r9
 800bbfa:	6026      	str	r6, [r4, #0]
 800bbfc:	60a5      	str	r5, [r4, #8]
 800bbfe:	463e      	mov	r6, r7
 800bc00:	42be      	cmp	r6, r7
 800bc02:	d900      	bls.n	800bc06 <__ssputs_r+0x72>
 800bc04:	463e      	mov	r6, r7
 800bc06:	6820      	ldr	r0, [r4, #0]
 800bc08:	4632      	mov	r2, r6
 800bc0a:	4641      	mov	r1, r8
 800bc0c:	f000 f9c6 	bl	800bf9c <memmove>
 800bc10:	68a3      	ldr	r3, [r4, #8]
 800bc12:	1b9b      	subs	r3, r3, r6
 800bc14:	60a3      	str	r3, [r4, #8]
 800bc16:	6823      	ldr	r3, [r4, #0]
 800bc18:	4433      	add	r3, r6
 800bc1a:	6023      	str	r3, [r4, #0]
 800bc1c:	2000      	movs	r0, #0
 800bc1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc22:	462a      	mov	r2, r5
 800bc24:	f000 fa36 	bl	800c094 <_realloc_r>
 800bc28:	4606      	mov	r6, r0
 800bc2a:	2800      	cmp	r0, #0
 800bc2c:	d1e0      	bne.n	800bbf0 <__ssputs_r+0x5c>
 800bc2e:	6921      	ldr	r1, [r4, #16]
 800bc30:	4650      	mov	r0, sl
 800bc32:	f7ff fb2d 	bl	800b290 <_free_r>
 800bc36:	230c      	movs	r3, #12
 800bc38:	f8ca 3000 	str.w	r3, [sl]
 800bc3c:	89a3      	ldrh	r3, [r4, #12]
 800bc3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc42:	81a3      	strh	r3, [r4, #12]
 800bc44:	f04f 30ff 	mov.w	r0, #4294967295
 800bc48:	e7e9      	b.n	800bc1e <__ssputs_r+0x8a>
	...

0800bc4c <_svfiprintf_r>:
 800bc4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc50:	4698      	mov	r8, r3
 800bc52:	898b      	ldrh	r3, [r1, #12]
 800bc54:	061b      	lsls	r3, r3, #24
 800bc56:	b09d      	sub	sp, #116	@ 0x74
 800bc58:	4607      	mov	r7, r0
 800bc5a:	460d      	mov	r5, r1
 800bc5c:	4614      	mov	r4, r2
 800bc5e:	d510      	bpl.n	800bc82 <_svfiprintf_r+0x36>
 800bc60:	690b      	ldr	r3, [r1, #16]
 800bc62:	b973      	cbnz	r3, 800bc82 <_svfiprintf_r+0x36>
 800bc64:	2140      	movs	r1, #64	@ 0x40
 800bc66:	f7ff fb87 	bl	800b378 <_malloc_r>
 800bc6a:	6028      	str	r0, [r5, #0]
 800bc6c:	6128      	str	r0, [r5, #16]
 800bc6e:	b930      	cbnz	r0, 800bc7e <_svfiprintf_r+0x32>
 800bc70:	230c      	movs	r3, #12
 800bc72:	603b      	str	r3, [r7, #0]
 800bc74:	f04f 30ff 	mov.w	r0, #4294967295
 800bc78:	b01d      	add	sp, #116	@ 0x74
 800bc7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc7e:	2340      	movs	r3, #64	@ 0x40
 800bc80:	616b      	str	r3, [r5, #20]
 800bc82:	2300      	movs	r3, #0
 800bc84:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc86:	2320      	movs	r3, #32
 800bc88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc8c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc90:	2330      	movs	r3, #48	@ 0x30
 800bc92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800be30 <_svfiprintf_r+0x1e4>
 800bc96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bc9a:	f04f 0901 	mov.w	r9, #1
 800bc9e:	4623      	mov	r3, r4
 800bca0:	469a      	mov	sl, r3
 800bca2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bca6:	b10a      	cbz	r2, 800bcac <_svfiprintf_r+0x60>
 800bca8:	2a25      	cmp	r2, #37	@ 0x25
 800bcaa:	d1f9      	bne.n	800bca0 <_svfiprintf_r+0x54>
 800bcac:	ebba 0b04 	subs.w	fp, sl, r4
 800bcb0:	d00b      	beq.n	800bcca <_svfiprintf_r+0x7e>
 800bcb2:	465b      	mov	r3, fp
 800bcb4:	4622      	mov	r2, r4
 800bcb6:	4629      	mov	r1, r5
 800bcb8:	4638      	mov	r0, r7
 800bcba:	f7ff ff6b 	bl	800bb94 <__ssputs_r>
 800bcbe:	3001      	adds	r0, #1
 800bcc0:	f000 80a7 	beq.w	800be12 <_svfiprintf_r+0x1c6>
 800bcc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bcc6:	445a      	add	r2, fp
 800bcc8:	9209      	str	r2, [sp, #36]	@ 0x24
 800bcca:	f89a 3000 	ldrb.w	r3, [sl]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	f000 809f 	beq.w	800be12 <_svfiprintf_r+0x1c6>
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	f04f 32ff 	mov.w	r2, #4294967295
 800bcda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcde:	f10a 0a01 	add.w	sl, sl, #1
 800bce2:	9304      	str	r3, [sp, #16]
 800bce4:	9307      	str	r3, [sp, #28]
 800bce6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bcea:	931a      	str	r3, [sp, #104]	@ 0x68
 800bcec:	4654      	mov	r4, sl
 800bcee:	2205      	movs	r2, #5
 800bcf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcf4:	484e      	ldr	r0, [pc, #312]	@ (800be30 <_svfiprintf_r+0x1e4>)
 800bcf6:	f7f4 fa8b 	bl	8000210 <memchr>
 800bcfa:	9a04      	ldr	r2, [sp, #16]
 800bcfc:	b9d8      	cbnz	r0, 800bd36 <_svfiprintf_r+0xea>
 800bcfe:	06d0      	lsls	r0, r2, #27
 800bd00:	bf44      	itt	mi
 800bd02:	2320      	movmi	r3, #32
 800bd04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd08:	0711      	lsls	r1, r2, #28
 800bd0a:	bf44      	itt	mi
 800bd0c:	232b      	movmi	r3, #43	@ 0x2b
 800bd0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd12:	f89a 3000 	ldrb.w	r3, [sl]
 800bd16:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd18:	d015      	beq.n	800bd46 <_svfiprintf_r+0xfa>
 800bd1a:	9a07      	ldr	r2, [sp, #28]
 800bd1c:	4654      	mov	r4, sl
 800bd1e:	2000      	movs	r0, #0
 800bd20:	f04f 0c0a 	mov.w	ip, #10
 800bd24:	4621      	mov	r1, r4
 800bd26:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd2a:	3b30      	subs	r3, #48	@ 0x30
 800bd2c:	2b09      	cmp	r3, #9
 800bd2e:	d94b      	bls.n	800bdc8 <_svfiprintf_r+0x17c>
 800bd30:	b1b0      	cbz	r0, 800bd60 <_svfiprintf_r+0x114>
 800bd32:	9207      	str	r2, [sp, #28]
 800bd34:	e014      	b.n	800bd60 <_svfiprintf_r+0x114>
 800bd36:	eba0 0308 	sub.w	r3, r0, r8
 800bd3a:	fa09 f303 	lsl.w	r3, r9, r3
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	9304      	str	r3, [sp, #16]
 800bd42:	46a2      	mov	sl, r4
 800bd44:	e7d2      	b.n	800bcec <_svfiprintf_r+0xa0>
 800bd46:	9b03      	ldr	r3, [sp, #12]
 800bd48:	1d19      	adds	r1, r3, #4
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	9103      	str	r1, [sp, #12]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	bfbb      	ittet	lt
 800bd52:	425b      	neglt	r3, r3
 800bd54:	f042 0202 	orrlt.w	r2, r2, #2
 800bd58:	9307      	strge	r3, [sp, #28]
 800bd5a:	9307      	strlt	r3, [sp, #28]
 800bd5c:	bfb8      	it	lt
 800bd5e:	9204      	strlt	r2, [sp, #16]
 800bd60:	7823      	ldrb	r3, [r4, #0]
 800bd62:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd64:	d10a      	bne.n	800bd7c <_svfiprintf_r+0x130>
 800bd66:	7863      	ldrb	r3, [r4, #1]
 800bd68:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd6a:	d132      	bne.n	800bdd2 <_svfiprintf_r+0x186>
 800bd6c:	9b03      	ldr	r3, [sp, #12]
 800bd6e:	1d1a      	adds	r2, r3, #4
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	9203      	str	r2, [sp, #12]
 800bd74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd78:	3402      	adds	r4, #2
 800bd7a:	9305      	str	r3, [sp, #20]
 800bd7c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800be40 <_svfiprintf_r+0x1f4>
 800bd80:	7821      	ldrb	r1, [r4, #0]
 800bd82:	2203      	movs	r2, #3
 800bd84:	4650      	mov	r0, sl
 800bd86:	f7f4 fa43 	bl	8000210 <memchr>
 800bd8a:	b138      	cbz	r0, 800bd9c <_svfiprintf_r+0x150>
 800bd8c:	9b04      	ldr	r3, [sp, #16]
 800bd8e:	eba0 000a 	sub.w	r0, r0, sl
 800bd92:	2240      	movs	r2, #64	@ 0x40
 800bd94:	4082      	lsls	r2, r0
 800bd96:	4313      	orrs	r3, r2
 800bd98:	3401      	adds	r4, #1
 800bd9a:	9304      	str	r3, [sp, #16]
 800bd9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bda0:	4824      	ldr	r0, [pc, #144]	@ (800be34 <_svfiprintf_r+0x1e8>)
 800bda2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bda6:	2206      	movs	r2, #6
 800bda8:	f7f4 fa32 	bl	8000210 <memchr>
 800bdac:	2800      	cmp	r0, #0
 800bdae:	d036      	beq.n	800be1e <_svfiprintf_r+0x1d2>
 800bdb0:	4b21      	ldr	r3, [pc, #132]	@ (800be38 <_svfiprintf_r+0x1ec>)
 800bdb2:	bb1b      	cbnz	r3, 800bdfc <_svfiprintf_r+0x1b0>
 800bdb4:	9b03      	ldr	r3, [sp, #12]
 800bdb6:	3307      	adds	r3, #7
 800bdb8:	f023 0307 	bic.w	r3, r3, #7
 800bdbc:	3308      	adds	r3, #8
 800bdbe:	9303      	str	r3, [sp, #12]
 800bdc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdc2:	4433      	add	r3, r6
 800bdc4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdc6:	e76a      	b.n	800bc9e <_svfiprintf_r+0x52>
 800bdc8:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdcc:	460c      	mov	r4, r1
 800bdce:	2001      	movs	r0, #1
 800bdd0:	e7a8      	b.n	800bd24 <_svfiprintf_r+0xd8>
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	3401      	adds	r4, #1
 800bdd6:	9305      	str	r3, [sp, #20]
 800bdd8:	4619      	mov	r1, r3
 800bdda:	f04f 0c0a 	mov.w	ip, #10
 800bdde:	4620      	mov	r0, r4
 800bde0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bde4:	3a30      	subs	r2, #48	@ 0x30
 800bde6:	2a09      	cmp	r2, #9
 800bde8:	d903      	bls.n	800bdf2 <_svfiprintf_r+0x1a6>
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d0c6      	beq.n	800bd7c <_svfiprintf_r+0x130>
 800bdee:	9105      	str	r1, [sp, #20]
 800bdf0:	e7c4      	b.n	800bd7c <_svfiprintf_r+0x130>
 800bdf2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bdf6:	4604      	mov	r4, r0
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	e7f0      	b.n	800bdde <_svfiprintf_r+0x192>
 800bdfc:	ab03      	add	r3, sp, #12
 800bdfe:	9300      	str	r3, [sp, #0]
 800be00:	462a      	mov	r2, r5
 800be02:	4b0e      	ldr	r3, [pc, #56]	@ (800be3c <_svfiprintf_r+0x1f0>)
 800be04:	a904      	add	r1, sp, #16
 800be06:	4638      	mov	r0, r7
 800be08:	f7fd fe82 	bl	8009b10 <_printf_float>
 800be0c:	1c42      	adds	r2, r0, #1
 800be0e:	4606      	mov	r6, r0
 800be10:	d1d6      	bne.n	800bdc0 <_svfiprintf_r+0x174>
 800be12:	89ab      	ldrh	r3, [r5, #12]
 800be14:	065b      	lsls	r3, r3, #25
 800be16:	f53f af2d 	bmi.w	800bc74 <_svfiprintf_r+0x28>
 800be1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be1c:	e72c      	b.n	800bc78 <_svfiprintf_r+0x2c>
 800be1e:	ab03      	add	r3, sp, #12
 800be20:	9300      	str	r3, [sp, #0]
 800be22:	462a      	mov	r2, r5
 800be24:	4b05      	ldr	r3, [pc, #20]	@ (800be3c <_svfiprintf_r+0x1f0>)
 800be26:	a904      	add	r1, sp, #16
 800be28:	4638      	mov	r0, r7
 800be2a:	f7fe f909 	bl	800a040 <_printf_i>
 800be2e:	e7ed      	b.n	800be0c <_svfiprintf_r+0x1c0>
 800be30:	0800ce10 	.word	0x0800ce10
 800be34:	0800ce1a 	.word	0x0800ce1a
 800be38:	08009b11 	.word	0x08009b11
 800be3c:	0800bb95 	.word	0x0800bb95
 800be40:	0800ce16 	.word	0x0800ce16

0800be44 <__sflush_r>:
 800be44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800be48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be4c:	0716      	lsls	r6, r2, #28
 800be4e:	4605      	mov	r5, r0
 800be50:	460c      	mov	r4, r1
 800be52:	d454      	bmi.n	800befe <__sflush_r+0xba>
 800be54:	684b      	ldr	r3, [r1, #4]
 800be56:	2b00      	cmp	r3, #0
 800be58:	dc02      	bgt.n	800be60 <__sflush_r+0x1c>
 800be5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	dd48      	ble.n	800bef2 <__sflush_r+0xae>
 800be60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be62:	2e00      	cmp	r6, #0
 800be64:	d045      	beq.n	800bef2 <__sflush_r+0xae>
 800be66:	2300      	movs	r3, #0
 800be68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800be6c:	682f      	ldr	r7, [r5, #0]
 800be6e:	6a21      	ldr	r1, [r4, #32]
 800be70:	602b      	str	r3, [r5, #0]
 800be72:	d030      	beq.n	800bed6 <__sflush_r+0x92>
 800be74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800be76:	89a3      	ldrh	r3, [r4, #12]
 800be78:	0759      	lsls	r1, r3, #29
 800be7a:	d505      	bpl.n	800be88 <__sflush_r+0x44>
 800be7c:	6863      	ldr	r3, [r4, #4]
 800be7e:	1ad2      	subs	r2, r2, r3
 800be80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800be82:	b10b      	cbz	r3, 800be88 <__sflush_r+0x44>
 800be84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800be86:	1ad2      	subs	r2, r2, r3
 800be88:	2300      	movs	r3, #0
 800be8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be8c:	6a21      	ldr	r1, [r4, #32]
 800be8e:	4628      	mov	r0, r5
 800be90:	47b0      	blx	r6
 800be92:	1c43      	adds	r3, r0, #1
 800be94:	89a3      	ldrh	r3, [r4, #12]
 800be96:	d106      	bne.n	800bea6 <__sflush_r+0x62>
 800be98:	6829      	ldr	r1, [r5, #0]
 800be9a:	291d      	cmp	r1, #29
 800be9c:	d82b      	bhi.n	800bef6 <__sflush_r+0xb2>
 800be9e:	4a2a      	ldr	r2, [pc, #168]	@ (800bf48 <__sflush_r+0x104>)
 800bea0:	410a      	asrs	r2, r1
 800bea2:	07d6      	lsls	r6, r2, #31
 800bea4:	d427      	bmi.n	800bef6 <__sflush_r+0xb2>
 800bea6:	2200      	movs	r2, #0
 800bea8:	6062      	str	r2, [r4, #4]
 800beaa:	04d9      	lsls	r1, r3, #19
 800beac:	6922      	ldr	r2, [r4, #16]
 800beae:	6022      	str	r2, [r4, #0]
 800beb0:	d504      	bpl.n	800bebc <__sflush_r+0x78>
 800beb2:	1c42      	adds	r2, r0, #1
 800beb4:	d101      	bne.n	800beba <__sflush_r+0x76>
 800beb6:	682b      	ldr	r3, [r5, #0]
 800beb8:	b903      	cbnz	r3, 800bebc <__sflush_r+0x78>
 800beba:	6560      	str	r0, [r4, #84]	@ 0x54
 800bebc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bebe:	602f      	str	r7, [r5, #0]
 800bec0:	b1b9      	cbz	r1, 800bef2 <__sflush_r+0xae>
 800bec2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bec6:	4299      	cmp	r1, r3
 800bec8:	d002      	beq.n	800bed0 <__sflush_r+0x8c>
 800beca:	4628      	mov	r0, r5
 800becc:	f7ff f9e0 	bl	800b290 <_free_r>
 800bed0:	2300      	movs	r3, #0
 800bed2:	6363      	str	r3, [r4, #52]	@ 0x34
 800bed4:	e00d      	b.n	800bef2 <__sflush_r+0xae>
 800bed6:	2301      	movs	r3, #1
 800bed8:	4628      	mov	r0, r5
 800beda:	47b0      	blx	r6
 800bedc:	4602      	mov	r2, r0
 800bede:	1c50      	adds	r0, r2, #1
 800bee0:	d1c9      	bne.n	800be76 <__sflush_r+0x32>
 800bee2:	682b      	ldr	r3, [r5, #0]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d0c6      	beq.n	800be76 <__sflush_r+0x32>
 800bee8:	2b1d      	cmp	r3, #29
 800beea:	d001      	beq.n	800bef0 <__sflush_r+0xac>
 800beec:	2b16      	cmp	r3, #22
 800beee:	d11e      	bne.n	800bf2e <__sflush_r+0xea>
 800bef0:	602f      	str	r7, [r5, #0]
 800bef2:	2000      	movs	r0, #0
 800bef4:	e022      	b.n	800bf3c <__sflush_r+0xf8>
 800bef6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800befa:	b21b      	sxth	r3, r3
 800befc:	e01b      	b.n	800bf36 <__sflush_r+0xf2>
 800befe:	690f      	ldr	r7, [r1, #16]
 800bf00:	2f00      	cmp	r7, #0
 800bf02:	d0f6      	beq.n	800bef2 <__sflush_r+0xae>
 800bf04:	0793      	lsls	r3, r2, #30
 800bf06:	680e      	ldr	r6, [r1, #0]
 800bf08:	bf08      	it	eq
 800bf0a:	694b      	ldreq	r3, [r1, #20]
 800bf0c:	600f      	str	r7, [r1, #0]
 800bf0e:	bf18      	it	ne
 800bf10:	2300      	movne	r3, #0
 800bf12:	eba6 0807 	sub.w	r8, r6, r7
 800bf16:	608b      	str	r3, [r1, #8]
 800bf18:	f1b8 0f00 	cmp.w	r8, #0
 800bf1c:	dde9      	ble.n	800bef2 <__sflush_r+0xae>
 800bf1e:	6a21      	ldr	r1, [r4, #32]
 800bf20:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bf22:	4643      	mov	r3, r8
 800bf24:	463a      	mov	r2, r7
 800bf26:	4628      	mov	r0, r5
 800bf28:	47b0      	blx	r6
 800bf2a:	2800      	cmp	r0, #0
 800bf2c:	dc08      	bgt.n	800bf40 <__sflush_r+0xfc>
 800bf2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf36:	81a3      	strh	r3, [r4, #12]
 800bf38:	f04f 30ff 	mov.w	r0, #4294967295
 800bf3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf40:	4407      	add	r7, r0
 800bf42:	eba8 0800 	sub.w	r8, r8, r0
 800bf46:	e7e7      	b.n	800bf18 <__sflush_r+0xd4>
 800bf48:	dfbffffe 	.word	0xdfbffffe

0800bf4c <_fflush_r>:
 800bf4c:	b538      	push	{r3, r4, r5, lr}
 800bf4e:	690b      	ldr	r3, [r1, #16]
 800bf50:	4605      	mov	r5, r0
 800bf52:	460c      	mov	r4, r1
 800bf54:	b913      	cbnz	r3, 800bf5c <_fflush_r+0x10>
 800bf56:	2500      	movs	r5, #0
 800bf58:	4628      	mov	r0, r5
 800bf5a:	bd38      	pop	{r3, r4, r5, pc}
 800bf5c:	b118      	cbz	r0, 800bf66 <_fflush_r+0x1a>
 800bf5e:	6a03      	ldr	r3, [r0, #32]
 800bf60:	b90b      	cbnz	r3, 800bf66 <_fflush_r+0x1a>
 800bf62:	f7fe fa19 	bl	800a398 <__sinit>
 800bf66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d0f3      	beq.n	800bf56 <_fflush_r+0xa>
 800bf6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bf70:	07d0      	lsls	r0, r2, #31
 800bf72:	d404      	bmi.n	800bf7e <_fflush_r+0x32>
 800bf74:	0599      	lsls	r1, r3, #22
 800bf76:	d402      	bmi.n	800bf7e <_fflush_r+0x32>
 800bf78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf7a:	f7fe fb38 	bl	800a5ee <__retarget_lock_acquire_recursive>
 800bf7e:	4628      	mov	r0, r5
 800bf80:	4621      	mov	r1, r4
 800bf82:	f7ff ff5f 	bl	800be44 <__sflush_r>
 800bf86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bf88:	07da      	lsls	r2, r3, #31
 800bf8a:	4605      	mov	r5, r0
 800bf8c:	d4e4      	bmi.n	800bf58 <_fflush_r+0xc>
 800bf8e:	89a3      	ldrh	r3, [r4, #12]
 800bf90:	059b      	lsls	r3, r3, #22
 800bf92:	d4e1      	bmi.n	800bf58 <_fflush_r+0xc>
 800bf94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf96:	f7fe fb2b 	bl	800a5f0 <__retarget_lock_release_recursive>
 800bf9a:	e7dd      	b.n	800bf58 <_fflush_r+0xc>

0800bf9c <memmove>:
 800bf9c:	4288      	cmp	r0, r1
 800bf9e:	b510      	push	{r4, lr}
 800bfa0:	eb01 0402 	add.w	r4, r1, r2
 800bfa4:	d902      	bls.n	800bfac <memmove+0x10>
 800bfa6:	4284      	cmp	r4, r0
 800bfa8:	4623      	mov	r3, r4
 800bfaa:	d807      	bhi.n	800bfbc <memmove+0x20>
 800bfac:	1e43      	subs	r3, r0, #1
 800bfae:	42a1      	cmp	r1, r4
 800bfb0:	d008      	beq.n	800bfc4 <memmove+0x28>
 800bfb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bfb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bfba:	e7f8      	b.n	800bfae <memmove+0x12>
 800bfbc:	4402      	add	r2, r0
 800bfbe:	4601      	mov	r1, r0
 800bfc0:	428a      	cmp	r2, r1
 800bfc2:	d100      	bne.n	800bfc6 <memmove+0x2a>
 800bfc4:	bd10      	pop	{r4, pc}
 800bfc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bfca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bfce:	e7f7      	b.n	800bfc0 <memmove+0x24>

0800bfd0 <_sbrk_r>:
 800bfd0:	b538      	push	{r3, r4, r5, lr}
 800bfd2:	4d06      	ldr	r5, [pc, #24]	@ (800bfec <_sbrk_r+0x1c>)
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	4604      	mov	r4, r0
 800bfd8:	4608      	mov	r0, r1
 800bfda:	602b      	str	r3, [r5, #0]
 800bfdc:	f7f8 f978 	bl	80042d0 <_sbrk>
 800bfe0:	1c43      	adds	r3, r0, #1
 800bfe2:	d102      	bne.n	800bfea <_sbrk_r+0x1a>
 800bfe4:	682b      	ldr	r3, [r5, #0]
 800bfe6:	b103      	cbz	r3, 800bfea <_sbrk_r+0x1a>
 800bfe8:	6023      	str	r3, [r4, #0]
 800bfea:	bd38      	pop	{r3, r4, r5, pc}
 800bfec:	20002524 	.word	0x20002524

0800bff0 <memcpy>:
 800bff0:	440a      	add	r2, r1
 800bff2:	4291      	cmp	r1, r2
 800bff4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bff8:	d100      	bne.n	800bffc <memcpy+0xc>
 800bffa:	4770      	bx	lr
 800bffc:	b510      	push	{r4, lr}
 800bffe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c002:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c006:	4291      	cmp	r1, r2
 800c008:	d1f9      	bne.n	800bffe <memcpy+0xe>
 800c00a:	bd10      	pop	{r4, pc}

0800c00c <__assert_func>:
 800c00c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c00e:	4614      	mov	r4, r2
 800c010:	461a      	mov	r2, r3
 800c012:	4b09      	ldr	r3, [pc, #36]	@ (800c038 <__assert_func+0x2c>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	4605      	mov	r5, r0
 800c018:	68d8      	ldr	r0, [r3, #12]
 800c01a:	b954      	cbnz	r4, 800c032 <__assert_func+0x26>
 800c01c:	4b07      	ldr	r3, [pc, #28]	@ (800c03c <__assert_func+0x30>)
 800c01e:	461c      	mov	r4, r3
 800c020:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c024:	9100      	str	r1, [sp, #0]
 800c026:	462b      	mov	r3, r5
 800c028:	4905      	ldr	r1, [pc, #20]	@ (800c040 <__assert_func+0x34>)
 800c02a:	f000 f86f 	bl	800c10c <fiprintf>
 800c02e:	f000 f87f 	bl	800c130 <abort>
 800c032:	4b04      	ldr	r3, [pc, #16]	@ (800c044 <__assert_func+0x38>)
 800c034:	e7f4      	b.n	800c020 <__assert_func+0x14>
 800c036:	bf00      	nop
 800c038:	20000034 	.word	0x20000034
 800c03c:	0800ce66 	.word	0x0800ce66
 800c040:	0800ce38 	.word	0x0800ce38
 800c044:	0800ce2b 	.word	0x0800ce2b

0800c048 <_calloc_r>:
 800c048:	b570      	push	{r4, r5, r6, lr}
 800c04a:	fba1 5402 	umull	r5, r4, r1, r2
 800c04e:	b93c      	cbnz	r4, 800c060 <_calloc_r+0x18>
 800c050:	4629      	mov	r1, r5
 800c052:	f7ff f991 	bl	800b378 <_malloc_r>
 800c056:	4606      	mov	r6, r0
 800c058:	b928      	cbnz	r0, 800c066 <_calloc_r+0x1e>
 800c05a:	2600      	movs	r6, #0
 800c05c:	4630      	mov	r0, r6
 800c05e:	bd70      	pop	{r4, r5, r6, pc}
 800c060:	220c      	movs	r2, #12
 800c062:	6002      	str	r2, [r0, #0]
 800c064:	e7f9      	b.n	800c05a <_calloc_r+0x12>
 800c066:	462a      	mov	r2, r5
 800c068:	4621      	mov	r1, r4
 800c06a:	f7fe fa42 	bl	800a4f2 <memset>
 800c06e:	e7f5      	b.n	800c05c <_calloc_r+0x14>

0800c070 <__ascii_mbtowc>:
 800c070:	b082      	sub	sp, #8
 800c072:	b901      	cbnz	r1, 800c076 <__ascii_mbtowc+0x6>
 800c074:	a901      	add	r1, sp, #4
 800c076:	b142      	cbz	r2, 800c08a <__ascii_mbtowc+0x1a>
 800c078:	b14b      	cbz	r3, 800c08e <__ascii_mbtowc+0x1e>
 800c07a:	7813      	ldrb	r3, [r2, #0]
 800c07c:	600b      	str	r3, [r1, #0]
 800c07e:	7812      	ldrb	r2, [r2, #0]
 800c080:	1e10      	subs	r0, r2, #0
 800c082:	bf18      	it	ne
 800c084:	2001      	movne	r0, #1
 800c086:	b002      	add	sp, #8
 800c088:	4770      	bx	lr
 800c08a:	4610      	mov	r0, r2
 800c08c:	e7fb      	b.n	800c086 <__ascii_mbtowc+0x16>
 800c08e:	f06f 0001 	mvn.w	r0, #1
 800c092:	e7f8      	b.n	800c086 <__ascii_mbtowc+0x16>

0800c094 <_realloc_r>:
 800c094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c098:	4680      	mov	r8, r0
 800c09a:	4615      	mov	r5, r2
 800c09c:	460c      	mov	r4, r1
 800c09e:	b921      	cbnz	r1, 800c0aa <_realloc_r+0x16>
 800c0a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0a4:	4611      	mov	r1, r2
 800c0a6:	f7ff b967 	b.w	800b378 <_malloc_r>
 800c0aa:	b92a      	cbnz	r2, 800c0b8 <_realloc_r+0x24>
 800c0ac:	f7ff f8f0 	bl	800b290 <_free_r>
 800c0b0:	2400      	movs	r4, #0
 800c0b2:	4620      	mov	r0, r4
 800c0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0b8:	f000 f841 	bl	800c13e <_malloc_usable_size_r>
 800c0bc:	4285      	cmp	r5, r0
 800c0be:	4606      	mov	r6, r0
 800c0c0:	d802      	bhi.n	800c0c8 <_realloc_r+0x34>
 800c0c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c0c6:	d8f4      	bhi.n	800c0b2 <_realloc_r+0x1e>
 800c0c8:	4629      	mov	r1, r5
 800c0ca:	4640      	mov	r0, r8
 800c0cc:	f7ff f954 	bl	800b378 <_malloc_r>
 800c0d0:	4607      	mov	r7, r0
 800c0d2:	2800      	cmp	r0, #0
 800c0d4:	d0ec      	beq.n	800c0b0 <_realloc_r+0x1c>
 800c0d6:	42b5      	cmp	r5, r6
 800c0d8:	462a      	mov	r2, r5
 800c0da:	4621      	mov	r1, r4
 800c0dc:	bf28      	it	cs
 800c0de:	4632      	movcs	r2, r6
 800c0e0:	f7ff ff86 	bl	800bff0 <memcpy>
 800c0e4:	4621      	mov	r1, r4
 800c0e6:	4640      	mov	r0, r8
 800c0e8:	f7ff f8d2 	bl	800b290 <_free_r>
 800c0ec:	463c      	mov	r4, r7
 800c0ee:	e7e0      	b.n	800c0b2 <_realloc_r+0x1e>

0800c0f0 <__ascii_wctomb>:
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	4608      	mov	r0, r1
 800c0f4:	b141      	cbz	r1, 800c108 <__ascii_wctomb+0x18>
 800c0f6:	2aff      	cmp	r2, #255	@ 0xff
 800c0f8:	d904      	bls.n	800c104 <__ascii_wctomb+0x14>
 800c0fa:	228a      	movs	r2, #138	@ 0x8a
 800c0fc:	601a      	str	r2, [r3, #0]
 800c0fe:	f04f 30ff 	mov.w	r0, #4294967295
 800c102:	4770      	bx	lr
 800c104:	700a      	strb	r2, [r1, #0]
 800c106:	2001      	movs	r0, #1
 800c108:	4770      	bx	lr
	...

0800c10c <fiprintf>:
 800c10c:	b40e      	push	{r1, r2, r3}
 800c10e:	b503      	push	{r0, r1, lr}
 800c110:	4601      	mov	r1, r0
 800c112:	ab03      	add	r3, sp, #12
 800c114:	4805      	ldr	r0, [pc, #20]	@ (800c12c <fiprintf+0x20>)
 800c116:	f853 2b04 	ldr.w	r2, [r3], #4
 800c11a:	6800      	ldr	r0, [r0, #0]
 800c11c:	9301      	str	r3, [sp, #4]
 800c11e:	f000 f83f 	bl	800c1a0 <_vfiprintf_r>
 800c122:	b002      	add	sp, #8
 800c124:	f85d eb04 	ldr.w	lr, [sp], #4
 800c128:	b003      	add	sp, #12
 800c12a:	4770      	bx	lr
 800c12c:	20000034 	.word	0x20000034

0800c130 <abort>:
 800c130:	b508      	push	{r3, lr}
 800c132:	2006      	movs	r0, #6
 800c134:	f000 fa08 	bl	800c548 <raise>
 800c138:	2001      	movs	r0, #1
 800c13a:	f7f8 f851 	bl	80041e0 <_exit>

0800c13e <_malloc_usable_size_r>:
 800c13e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c142:	1f18      	subs	r0, r3, #4
 800c144:	2b00      	cmp	r3, #0
 800c146:	bfbc      	itt	lt
 800c148:	580b      	ldrlt	r3, [r1, r0]
 800c14a:	18c0      	addlt	r0, r0, r3
 800c14c:	4770      	bx	lr

0800c14e <__sfputc_r>:
 800c14e:	6893      	ldr	r3, [r2, #8]
 800c150:	3b01      	subs	r3, #1
 800c152:	2b00      	cmp	r3, #0
 800c154:	b410      	push	{r4}
 800c156:	6093      	str	r3, [r2, #8]
 800c158:	da08      	bge.n	800c16c <__sfputc_r+0x1e>
 800c15a:	6994      	ldr	r4, [r2, #24]
 800c15c:	42a3      	cmp	r3, r4
 800c15e:	db01      	blt.n	800c164 <__sfputc_r+0x16>
 800c160:	290a      	cmp	r1, #10
 800c162:	d103      	bne.n	800c16c <__sfputc_r+0x1e>
 800c164:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c168:	f000 b932 	b.w	800c3d0 <__swbuf_r>
 800c16c:	6813      	ldr	r3, [r2, #0]
 800c16e:	1c58      	adds	r0, r3, #1
 800c170:	6010      	str	r0, [r2, #0]
 800c172:	7019      	strb	r1, [r3, #0]
 800c174:	4608      	mov	r0, r1
 800c176:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c17a:	4770      	bx	lr

0800c17c <__sfputs_r>:
 800c17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c17e:	4606      	mov	r6, r0
 800c180:	460f      	mov	r7, r1
 800c182:	4614      	mov	r4, r2
 800c184:	18d5      	adds	r5, r2, r3
 800c186:	42ac      	cmp	r4, r5
 800c188:	d101      	bne.n	800c18e <__sfputs_r+0x12>
 800c18a:	2000      	movs	r0, #0
 800c18c:	e007      	b.n	800c19e <__sfputs_r+0x22>
 800c18e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c192:	463a      	mov	r2, r7
 800c194:	4630      	mov	r0, r6
 800c196:	f7ff ffda 	bl	800c14e <__sfputc_r>
 800c19a:	1c43      	adds	r3, r0, #1
 800c19c:	d1f3      	bne.n	800c186 <__sfputs_r+0xa>
 800c19e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c1a0 <_vfiprintf_r>:
 800c1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1a4:	460d      	mov	r5, r1
 800c1a6:	b09d      	sub	sp, #116	@ 0x74
 800c1a8:	4614      	mov	r4, r2
 800c1aa:	4698      	mov	r8, r3
 800c1ac:	4606      	mov	r6, r0
 800c1ae:	b118      	cbz	r0, 800c1b8 <_vfiprintf_r+0x18>
 800c1b0:	6a03      	ldr	r3, [r0, #32]
 800c1b2:	b90b      	cbnz	r3, 800c1b8 <_vfiprintf_r+0x18>
 800c1b4:	f7fe f8f0 	bl	800a398 <__sinit>
 800c1b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c1ba:	07d9      	lsls	r1, r3, #31
 800c1bc:	d405      	bmi.n	800c1ca <_vfiprintf_r+0x2a>
 800c1be:	89ab      	ldrh	r3, [r5, #12]
 800c1c0:	059a      	lsls	r2, r3, #22
 800c1c2:	d402      	bmi.n	800c1ca <_vfiprintf_r+0x2a>
 800c1c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c1c6:	f7fe fa12 	bl	800a5ee <__retarget_lock_acquire_recursive>
 800c1ca:	89ab      	ldrh	r3, [r5, #12]
 800c1cc:	071b      	lsls	r3, r3, #28
 800c1ce:	d501      	bpl.n	800c1d4 <_vfiprintf_r+0x34>
 800c1d0:	692b      	ldr	r3, [r5, #16]
 800c1d2:	b99b      	cbnz	r3, 800c1fc <_vfiprintf_r+0x5c>
 800c1d4:	4629      	mov	r1, r5
 800c1d6:	4630      	mov	r0, r6
 800c1d8:	f000 f938 	bl	800c44c <__swsetup_r>
 800c1dc:	b170      	cbz	r0, 800c1fc <_vfiprintf_r+0x5c>
 800c1de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c1e0:	07dc      	lsls	r4, r3, #31
 800c1e2:	d504      	bpl.n	800c1ee <_vfiprintf_r+0x4e>
 800c1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1e8:	b01d      	add	sp, #116	@ 0x74
 800c1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1ee:	89ab      	ldrh	r3, [r5, #12]
 800c1f0:	0598      	lsls	r0, r3, #22
 800c1f2:	d4f7      	bmi.n	800c1e4 <_vfiprintf_r+0x44>
 800c1f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c1f6:	f7fe f9fb 	bl	800a5f0 <__retarget_lock_release_recursive>
 800c1fa:	e7f3      	b.n	800c1e4 <_vfiprintf_r+0x44>
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800c200:	2320      	movs	r3, #32
 800c202:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c206:	f8cd 800c 	str.w	r8, [sp, #12]
 800c20a:	2330      	movs	r3, #48	@ 0x30
 800c20c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c3bc <_vfiprintf_r+0x21c>
 800c210:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c214:	f04f 0901 	mov.w	r9, #1
 800c218:	4623      	mov	r3, r4
 800c21a:	469a      	mov	sl, r3
 800c21c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c220:	b10a      	cbz	r2, 800c226 <_vfiprintf_r+0x86>
 800c222:	2a25      	cmp	r2, #37	@ 0x25
 800c224:	d1f9      	bne.n	800c21a <_vfiprintf_r+0x7a>
 800c226:	ebba 0b04 	subs.w	fp, sl, r4
 800c22a:	d00b      	beq.n	800c244 <_vfiprintf_r+0xa4>
 800c22c:	465b      	mov	r3, fp
 800c22e:	4622      	mov	r2, r4
 800c230:	4629      	mov	r1, r5
 800c232:	4630      	mov	r0, r6
 800c234:	f7ff ffa2 	bl	800c17c <__sfputs_r>
 800c238:	3001      	adds	r0, #1
 800c23a:	f000 80a7 	beq.w	800c38c <_vfiprintf_r+0x1ec>
 800c23e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c240:	445a      	add	r2, fp
 800c242:	9209      	str	r2, [sp, #36]	@ 0x24
 800c244:	f89a 3000 	ldrb.w	r3, [sl]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	f000 809f 	beq.w	800c38c <_vfiprintf_r+0x1ec>
 800c24e:	2300      	movs	r3, #0
 800c250:	f04f 32ff 	mov.w	r2, #4294967295
 800c254:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c258:	f10a 0a01 	add.w	sl, sl, #1
 800c25c:	9304      	str	r3, [sp, #16]
 800c25e:	9307      	str	r3, [sp, #28]
 800c260:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c264:	931a      	str	r3, [sp, #104]	@ 0x68
 800c266:	4654      	mov	r4, sl
 800c268:	2205      	movs	r2, #5
 800c26a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c26e:	4853      	ldr	r0, [pc, #332]	@ (800c3bc <_vfiprintf_r+0x21c>)
 800c270:	f7f3 ffce 	bl	8000210 <memchr>
 800c274:	9a04      	ldr	r2, [sp, #16]
 800c276:	b9d8      	cbnz	r0, 800c2b0 <_vfiprintf_r+0x110>
 800c278:	06d1      	lsls	r1, r2, #27
 800c27a:	bf44      	itt	mi
 800c27c:	2320      	movmi	r3, #32
 800c27e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c282:	0713      	lsls	r3, r2, #28
 800c284:	bf44      	itt	mi
 800c286:	232b      	movmi	r3, #43	@ 0x2b
 800c288:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c28c:	f89a 3000 	ldrb.w	r3, [sl]
 800c290:	2b2a      	cmp	r3, #42	@ 0x2a
 800c292:	d015      	beq.n	800c2c0 <_vfiprintf_r+0x120>
 800c294:	9a07      	ldr	r2, [sp, #28]
 800c296:	4654      	mov	r4, sl
 800c298:	2000      	movs	r0, #0
 800c29a:	f04f 0c0a 	mov.w	ip, #10
 800c29e:	4621      	mov	r1, r4
 800c2a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2a4:	3b30      	subs	r3, #48	@ 0x30
 800c2a6:	2b09      	cmp	r3, #9
 800c2a8:	d94b      	bls.n	800c342 <_vfiprintf_r+0x1a2>
 800c2aa:	b1b0      	cbz	r0, 800c2da <_vfiprintf_r+0x13a>
 800c2ac:	9207      	str	r2, [sp, #28]
 800c2ae:	e014      	b.n	800c2da <_vfiprintf_r+0x13a>
 800c2b0:	eba0 0308 	sub.w	r3, r0, r8
 800c2b4:	fa09 f303 	lsl.w	r3, r9, r3
 800c2b8:	4313      	orrs	r3, r2
 800c2ba:	9304      	str	r3, [sp, #16]
 800c2bc:	46a2      	mov	sl, r4
 800c2be:	e7d2      	b.n	800c266 <_vfiprintf_r+0xc6>
 800c2c0:	9b03      	ldr	r3, [sp, #12]
 800c2c2:	1d19      	adds	r1, r3, #4
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	9103      	str	r1, [sp, #12]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	bfbb      	ittet	lt
 800c2cc:	425b      	neglt	r3, r3
 800c2ce:	f042 0202 	orrlt.w	r2, r2, #2
 800c2d2:	9307      	strge	r3, [sp, #28]
 800c2d4:	9307      	strlt	r3, [sp, #28]
 800c2d6:	bfb8      	it	lt
 800c2d8:	9204      	strlt	r2, [sp, #16]
 800c2da:	7823      	ldrb	r3, [r4, #0]
 800c2dc:	2b2e      	cmp	r3, #46	@ 0x2e
 800c2de:	d10a      	bne.n	800c2f6 <_vfiprintf_r+0x156>
 800c2e0:	7863      	ldrb	r3, [r4, #1]
 800c2e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2e4:	d132      	bne.n	800c34c <_vfiprintf_r+0x1ac>
 800c2e6:	9b03      	ldr	r3, [sp, #12]
 800c2e8:	1d1a      	adds	r2, r3, #4
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	9203      	str	r2, [sp, #12]
 800c2ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c2f2:	3402      	adds	r4, #2
 800c2f4:	9305      	str	r3, [sp, #20]
 800c2f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c3cc <_vfiprintf_r+0x22c>
 800c2fa:	7821      	ldrb	r1, [r4, #0]
 800c2fc:	2203      	movs	r2, #3
 800c2fe:	4650      	mov	r0, sl
 800c300:	f7f3 ff86 	bl	8000210 <memchr>
 800c304:	b138      	cbz	r0, 800c316 <_vfiprintf_r+0x176>
 800c306:	9b04      	ldr	r3, [sp, #16]
 800c308:	eba0 000a 	sub.w	r0, r0, sl
 800c30c:	2240      	movs	r2, #64	@ 0x40
 800c30e:	4082      	lsls	r2, r0
 800c310:	4313      	orrs	r3, r2
 800c312:	3401      	adds	r4, #1
 800c314:	9304      	str	r3, [sp, #16]
 800c316:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c31a:	4829      	ldr	r0, [pc, #164]	@ (800c3c0 <_vfiprintf_r+0x220>)
 800c31c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c320:	2206      	movs	r2, #6
 800c322:	f7f3 ff75 	bl	8000210 <memchr>
 800c326:	2800      	cmp	r0, #0
 800c328:	d03f      	beq.n	800c3aa <_vfiprintf_r+0x20a>
 800c32a:	4b26      	ldr	r3, [pc, #152]	@ (800c3c4 <_vfiprintf_r+0x224>)
 800c32c:	bb1b      	cbnz	r3, 800c376 <_vfiprintf_r+0x1d6>
 800c32e:	9b03      	ldr	r3, [sp, #12]
 800c330:	3307      	adds	r3, #7
 800c332:	f023 0307 	bic.w	r3, r3, #7
 800c336:	3308      	adds	r3, #8
 800c338:	9303      	str	r3, [sp, #12]
 800c33a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c33c:	443b      	add	r3, r7
 800c33e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c340:	e76a      	b.n	800c218 <_vfiprintf_r+0x78>
 800c342:	fb0c 3202 	mla	r2, ip, r2, r3
 800c346:	460c      	mov	r4, r1
 800c348:	2001      	movs	r0, #1
 800c34a:	e7a8      	b.n	800c29e <_vfiprintf_r+0xfe>
 800c34c:	2300      	movs	r3, #0
 800c34e:	3401      	adds	r4, #1
 800c350:	9305      	str	r3, [sp, #20]
 800c352:	4619      	mov	r1, r3
 800c354:	f04f 0c0a 	mov.w	ip, #10
 800c358:	4620      	mov	r0, r4
 800c35a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c35e:	3a30      	subs	r2, #48	@ 0x30
 800c360:	2a09      	cmp	r2, #9
 800c362:	d903      	bls.n	800c36c <_vfiprintf_r+0x1cc>
 800c364:	2b00      	cmp	r3, #0
 800c366:	d0c6      	beq.n	800c2f6 <_vfiprintf_r+0x156>
 800c368:	9105      	str	r1, [sp, #20]
 800c36a:	e7c4      	b.n	800c2f6 <_vfiprintf_r+0x156>
 800c36c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c370:	4604      	mov	r4, r0
 800c372:	2301      	movs	r3, #1
 800c374:	e7f0      	b.n	800c358 <_vfiprintf_r+0x1b8>
 800c376:	ab03      	add	r3, sp, #12
 800c378:	9300      	str	r3, [sp, #0]
 800c37a:	462a      	mov	r2, r5
 800c37c:	4b12      	ldr	r3, [pc, #72]	@ (800c3c8 <_vfiprintf_r+0x228>)
 800c37e:	a904      	add	r1, sp, #16
 800c380:	4630      	mov	r0, r6
 800c382:	f7fd fbc5 	bl	8009b10 <_printf_float>
 800c386:	4607      	mov	r7, r0
 800c388:	1c78      	adds	r0, r7, #1
 800c38a:	d1d6      	bne.n	800c33a <_vfiprintf_r+0x19a>
 800c38c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c38e:	07d9      	lsls	r1, r3, #31
 800c390:	d405      	bmi.n	800c39e <_vfiprintf_r+0x1fe>
 800c392:	89ab      	ldrh	r3, [r5, #12]
 800c394:	059a      	lsls	r2, r3, #22
 800c396:	d402      	bmi.n	800c39e <_vfiprintf_r+0x1fe>
 800c398:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c39a:	f7fe f929 	bl	800a5f0 <__retarget_lock_release_recursive>
 800c39e:	89ab      	ldrh	r3, [r5, #12]
 800c3a0:	065b      	lsls	r3, r3, #25
 800c3a2:	f53f af1f 	bmi.w	800c1e4 <_vfiprintf_r+0x44>
 800c3a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c3a8:	e71e      	b.n	800c1e8 <_vfiprintf_r+0x48>
 800c3aa:	ab03      	add	r3, sp, #12
 800c3ac:	9300      	str	r3, [sp, #0]
 800c3ae:	462a      	mov	r2, r5
 800c3b0:	4b05      	ldr	r3, [pc, #20]	@ (800c3c8 <_vfiprintf_r+0x228>)
 800c3b2:	a904      	add	r1, sp, #16
 800c3b4:	4630      	mov	r0, r6
 800c3b6:	f7fd fe43 	bl	800a040 <_printf_i>
 800c3ba:	e7e4      	b.n	800c386 <_vfiprintf_r+0x1e6>
 800c3bc:	0800ce10 	.word	0x0800ce10
 800c3c0:	0800ce1a 	.word	0x0800ce1a
 800c3c4:	08009b11 	.word	0x08009b11
 800c3c8:	0800c17d 	.word	0x0800c17d
 800c3cc:	0800ce16 	.word	0x0800ce16

0800c3d0 <__swbuf_r>:
 800c3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3d2:	460e      	mov	r6, r1
 800c3d4:	4614      	mov	r4, r2
 800c3d6:	4605      	mov	r5, r0
 800c3d8:	b118      	cbz	r0, 800c3e2 <__swbuf_r+0x12>
 800c3da:	6a03      	ldr	r3, [r0, #32]
 800c3dc:	b90b      	cbnz	r3, 800c3e2 <__swbuf_r+0x12>
 800c3de:	f7fd ffdb 	bl	800a398 <__sinit>
 800c3e2:	69a3      	ldr	r3, [r4, #24]
 800c3e4:	60a3      	str	r3, [r4, #8]
 800c3e6:	89a3      	ldrh	r3, [r4, #12]
 800c3e8:	071a      	lsls	r2, r3, #28
 800c3ea:	d501      	bpl.n	800c3f0 <__swbuf_r+0x20>
 800c3ec:	6923      	ldr	r3, [r4, #16]
 800c3ee:	b943      	cbnz	r3, 800c402 <__swbuf_r+0x32>
 800c3f0:	4621      	mov	r1, r4
 800c3f2:	4628      	mov	r0, r5
 800c3f4:	f000 f82a 	bl	800c44c <__swsetup_r>
 800c3f8:	b118      	cbz	r0, 800c402 <__swbuf_r+0x32>
 800c3fa:	f04f 37ff 	mov.w	r7, #4294967295
 800c3fe:	4638      	mov	r0, r7
 800c400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c402:	6823      	ldr	r3, [r4, #0]
 800c404:	6922      	ldr	r2, [r4, #16]
 800c406:	1a98      	subs	r0, r3, r2
 800c408:	6963      	ldr	r3, [r4, #20]
 800c40a:	b2f6      	uxtb	r6, r6
 800c40c:	4283      	cmp	r3, r0
 800c40e:	4637      	mov	r7, r6
 800c410:	dc05      	bgt.n	800c41e <__swbuf_r+0x4e>
 800c412:	4621      	mov	r1, r4
 800c414:	4628      	mov	r0, r5
 800c416:	f7ff fd99 	bl	800bf4c <_fflush_r>
 800c41a:	2800      	cmp	r0, #0
 800c41c:	d1ed      	bne.n	800c3fa <__swbuf_r+0x2a>
 800c41e:	68a3      	ldr	r3, [r4, #8]
 800c420:	3b01      	subs	r3, #1
 800c422:	60a3      	str	r3, [r4, #8]
 800c424:	6823      	ldr	r3, [r4, #0]
 800c426:	1c5a      	adds	r2, r3, #1
 800c428:	6022      	str	r2, [r4, #0]
 800c42a:	701e      	strb	r6, [r3, #0]
 800c42c:	6962      	ldr	r2, [r4, #20]
 800c42e:	1c43      	adds	r3, r0, #1
 800c430:	429a      	cmp	r2, r3
 800c432:	d004      	beq.n	800c43e <__swbuf_r+0x6e>
 800c434:	89a3      	ldrh	r3, [r4, #12]
 800c436:	07db      	lsls	r3, r3, #31
 800c438:	d5e1      	bpl.n	800c3fe <__swbuf_r+0x2e>
 800c43a:	2e0a      	cmp	r6, #10
 800c43c:	d1df      	bne.n	800c3fe <__swbuf_r+0x2e>
 800c43e:	4621      	mov	r1, r4
 800c440:	4628      	mov	r0, r5
 800c442:	f7ff fd83 	bl	800bf4c <_fflush_r>
 800c446:	2800      	cmp	r0, #0
 800c448:	d0d9      	beq.n	800c3fe <__swbuf_r+0x2e>
 800c44a:	e7d6      	b.n	800c3fa <__swbuf_r+0x2a>

0800c44c <__swsetup_r>:
 800c44c:	b538      	push	{r3, r4, r5, lr}
 800c44e:	4b29      	ldr	r3, [pc, #164]	@ (800c4f4 <__swsetup_r+0xa8>)
 800c450:	4605      	mov	r5, r0
 800c452:	6818      	ldr	r0, [r3, #0]
 800c454:	460c      	mov	r4, r1
 800c456:	b118      	cbz	r0, 800c460 <__swsetup_r+0x14>
 800c458:	6a03      	ldr	r3, [r0, #32]
 800c45a:	b90b      	cbnz	r3, 800c460 <__swsetup_r+0x14>
 800c45c:	f7fd ff9c 	bl	800a398 <__sinit>
 800c460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c464:	0719      	lsls	r1, r3, #28
 800c466:	d422      	bmi.n	800c4ae <__swsetup_r+0x62>
 800c468:	06da      	lsls	r2, r3, #27
 800c46a:	d407      	bmi.n	800c47c <__swsetup_r+0x30>
 800c46c:	2209      	movs	r2, #9
 800c46e:	602a      	str	r2, [r5, #0]
 800c470:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c474:	81a3      	strh	r3, [r4, #12]
 800c476:	f04f 30ff 	mov.w	r0, #4294967295
 800c47a:	e033      	b.n	800c4e4 <__swsetup_r+0x98>
 800c47c:	0758      	lsls	r0, r3, #29
 800c47e:	d512      	bpl.n	800c4a6 <__swsetup_r+0x5a>
 800c480:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c482:	b141      	cbz	r1, 800c496 <__swsetup_r+0x4a>
 800c484:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c488:	4299      	cmp	r1, r3
 800c48a:	d002      	beq.n	800c492 <__swsetup_r+0x46>
 800c48c:	4628      	mov	r0, r5
 800c48e:	f7fe feff 	bl	800b290 <_free_r>
 800c492:	2300      	movs	r3, #0
 800c494:	6363      	str	r3, [r4, #52]	@ 0x34
 800c496:	89a3      	ldrh	r3, [r4, #12]
 800c498:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c49c:	81a3      	strh	r3, [r4, #12]
 800c49e:	2300      	movs	r3, #0
 800c4a0:	6063      	str	r3, [r4, #4]
 800c4a2:	6923      	ldr	r3, [r4, #16]
 800c4a4:	6023      	str	r3, [r4, #0]
 800c4a6:	89a3      	ldrh	r3, [r4, #12]
 800c4a8:	f043 0308 	orr.w	r3, r3, #8
 800c4ac:	81a3      	strh	r3, [r4, #12]
 800c4ae:	6923      	ldr	r3, [r4, #16]
 800c4b0:	b94b      	cbnz	r3, 800c4c6 <__swsetup_r+0x7a>
 800c4b2:	89a3      	ldrh	r3, [r4, #12]
 800c4b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c4b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c4bc:	d003      	beq.n	800c4c6 <__swsetup_r+0x7a>
 800c4be:	4621      	mov	r1, r4
 800c4c0:	4628      	mov	r0, r5
 800c4c2:	f000 f883 	bl	800c5cc <__smakebuf_r>
 800c4c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4ca:	f013 0201 	ands.w	r2, r3, #1
 800c4ce:	d00a      	beq.n	800c4e6 <__swsetup_r+0x9a>
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	60a2      	str	r2, [r4, #8]
 800c4d4:	6962      	ldr	r2, [r4, #20]
 800c4d6:	4252      	negs	r2, r2
 800c4d8:	61a2      	str	r2, [r4, #24]
 800c4da:	6922      	ldr	r2, [r4, #16]
 800c4dc:	b942      	cbnz	r2, 800c4f0 <__swsetup_r+0xa4>
 800c4de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c4e2:	d1c5      	bne.n	800c470 <__swsetup_r+0x24>
 800c4e4:	bd38      	pop	{r3, r4, r5, pc}
 800c4e6:	0799      	lsls	r1, r3, #30
 800c4e8:	bf58      	it	pl
 800c4ea:	6962      	ldrpl	r2, [r4, #20]
 800c4ec:	60a2      	str	r2, [r4, #8]
 800c4ee:	e7f4      	b.n	800c4da <__swsetup_r+0x8e>
 800c4f0:	2000      	movs	r0, #0
 800c4f2:	e7f7      	b.n	800c4e4 <__swsetup_r+0x98>
 800c4f4:	20000034 	.word	0x20000034

0800c4f8 <_raise_r>:
 800c4f8:	291f      	cmp	r1, #31
 800c4fa:	b538      	push	{r3, r4, r5, lr}
 800c4fc:	4605      	mov	r5, r0
 800c4fe:	460c      	mov	r4, r1
 800c500:	d904      	bls.n	800c50c <_raise_r+0x14>
 800c502:	2316      	movs	r3, #22
 800c504:	6003      	str	r3, [r0, #0]
 800c506:	f04f 30ff 	mov.w	r0, #4294967295
 800c50a:	bd38      	pop	{r3, r4, r5, pc}
 800c50c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c50e:	b112      	cbz	r2, 800c516 <_raise_r+0x1e>
 800c510:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c514:	b94b      	cbnz	r3, 800c52a <_raise_r+0x32>
 800c516:	4628      	mov	r0, r5
 800c518:	f000 f830 	bl	800c57c <_getpid_r>
 800c51c:	4622      	mov	r2, r4
 800c51e:	4601      	mov	r1, r0
 800c520:	4628      	mov	r0, r5
 800c522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c526:	f000 b817 	b.w	800c558 <_kill_r>
 800c52a:	2b01      	cmp	r3, #1
 800c52c:	d00a      	beq.n	800c544 <_raise_r+0x4c>
 800c52e:	1c59      	adds	r1, r3, #1
 800c530:	d103      	bne.n	800c53a <_raise_r+0x42>
 800c532:	2316      	movs	r3, #22
 800c534:	6003      	str	r3, [r0, #0]
 800c536:	2001      	movs	r0, #1
 800c538:	e7e7      	b.n	800c50a <_raise_r+0x12>
 800c53a:	2100      	movs	r1, #0
 800c53c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c540:	4620      	mov	r0, r4
 800c542:	4798      	blx	r3
 800c544:	2000      	movs	r0, #0
 800c546:	e7e0      	b.n	800c50a <_raise_r+0x12>

0800c548 <raise>:
 800c548:	4b02      	ldr	r3, [pc, #8]	@ (800c554 <raise+0xc>)
 800c54a:	4601      	mov	r1, r0
 800c54c:	6818      	ldr	r0, [r3, #0]
 800c54e:	f7ff bfd3 	b.w	800c4f8 <_raise_r>
 800c552:	bf00      	nop
 800c554:	20000034 	.word	0x20000034

0800c558 <_kill_r>:
 800c558:	b538      	push	{r3, r4, r5, lr}
 800c55a:	4d07      	ldr	r5, [pc, #28]	@ (800c578 <_kill_r+0x20>)
 800c55c:	2300      	movs	r3, #0
 800c55e:	4604      	mov	r4, r0
 800c560:	4608      	mov	r0, r1
 800c562:	4611      	mov	r1, r2
 800c564:	602b      	str	r3, [r5, #0]
 800c566:	f7f7 fe2b 	bl	80041c0 <_kill>
 800c56a:	1c43      	adds	r3, r0, #1
 800c56c:	d102      	bne.n	800c574 <_kill_r+0x1c>
 800c56e:	682b      	ldr	r3, [r5, #0]
 800c570:	b103      	cbz	r3, 800c574 <_kill_r+0x1c>
 800c572:	6023      	str	r3, [r4, #0]
 800c574:	bd38      	pop	{r3, r4, r5, pc}
 800c576:	bf00      	nop
 800c578:	20002524 	.word	0x20002524

0800c57c <_getpid_r>:
 800c57c:	f7f7 be18 	b.w	80041b0 <_getpid>

0800c580 <__swhatbuf_r>:
 800c580:	b570      	push	{r4, r5, r6, lr}
 800c582:	460c      	mov	r4, r1
 800c584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c588:	2900      	cmp	r1, #0
 800c58a:	b096      	sub	sp, #88	@ 0x58
 800c58c:	4615      	mov	r5, r2
 800c58e:	461e      	mov	r6, r3
 800c590:	da0d      	bge.n	800c5ae <__swhatbuf_r+0x2e>
 800c592:	89a3      	ldrh	r3, [r4, #12]
 800c594:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c598:	f04f 0100 	mov.w	r1, #0
 800c59c:	bf14      	ite	ne
 800c59e:	2340      	movne	r3, #64	@ 0x40
 800c5a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c5a4:	2000      	movs	r0, #0
 800c5a6:	6031      	str	r1, [r6, #0]
 800c5a8:	602b      	str	r3, [r5, #0]
 800c5aa:	b016      	add	sp, #88	@ 0x58
 800c5ac:	bd70      	pop	{r4, r5, r6, pc}
 800c5ae:	466a      	mov	r2, sp
 800c5b0:	f000 f848 	bl	800c644 <_fstat_r>
 800c5b4:	2800      	cmp	r0, #0
 800c5b6:	dbec      	blt.n	800c592 <__swhatbuf_r+0x12>
 800c5b8:	9901      	ldr	r1, [sp, #4]
 800c5ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c5be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c5c2:	4259      	negs	r1, r3
 800c5c4:	4159      	adcs	r1, r3
 800c5c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c5ca:	e7eb      	b.n	800c5a4 <__swhatbuf_r+0x24>

0800c5cc <__smakebuf_r>:
 800c5cc:	898b      	ldrh	r3, [r1, #12]
 800c5ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c5d0:	079d      	lsls	r5, r3, #30
 800c5d2:	4606      	mov	r6, r0
 800c5d4:	460c      	mov	r4, r1
 800c5d6:	d507      	bpl.n	800c5e8 <__smakebuf_r+0x1c>
 800c5d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c5dc:	6023      	str	r3, [r4, #0]
 800c5de:	6123      	str	r3, [r4, #16]
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	6163      	str	r3, [r4, #20]
 800c5e4:	b003      	add	sp, #12
 800c5e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5e8:	ab01      	add	r3, sp, #4
 800c5ea:	466a      	mov	r2, sp
 800c5ec:	f7ff ffc8 	bl	800c580 <__swhatbuf_r>
 800c5f0:	9f00      	ldr	r7, [sp, #0]
 800c5f2:	4605      	mov	r5, r0
 800c5f4:	4639      	mov	r1, r7
 800c5f6:	4630      	mov	r0, r6
 800c5f8:	f7fe febe 	bl	800b378 <_malloc_r>
 800c5fc:	b948      	cbnz	r0, 800c612 <__smakebuf_r+0x46>
 800c5fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c602:	059a      	lsls	r2, r3, #22
 800c604:	d4ee      	bmi.n	800c5e4 <__smakebuf_r+0x18>
 800c606:	f023 0303 	bic.w	r3, r3, #3
 800c60a:	f043 0302 	orr.w	r3, r3, #2
 800c60e:	81a3      	strh	r3, [r4, #12]
 800c610:	e7e2      	b.n	800c5d8 <__smakebuf_r+0xc>
 800c612:	89a3      	ldrh	r3, [r4, #12]
 800c614:	6020      	str	r0, [r4, #0]
 800c616:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c61a:	81a3      	strh	r3, [r4, #12]
 800c61c:	9b01      	ldr	r3, [sp, #4]
 800c61e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c622:	b15b      	cbz	r3, 800c63c <__smakebuf_r+0x70>
 800c624:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c628:	4630      	mov	r0, r6
 800c62a:	f000 f81d 	bl	800c668 <_isatty_r>
 800c62e:	b128      	cbz	r0, 800c63c <__smakebuf_r+0x70>
 800c630:	89a3      	ldrh	r3, [r4, #12]
 800c632:	f023 0303 	bic.w	r3, r3, #3
 800c636:	f043 0301 	orr.w	r3, r3, #1
 800c63a:	81a3      	strh	r3, [r4, #12]
 800c63c:	89a3      	ldrh	r3, [r4, #12]
 800c63e:	431d      	orrs	r5, r3
 800c640:	81a5      	strh	r5, [r4, #12]
 800c642:	e7cf      	b.n	800c5e4 <__smakebuf_r+0x18>

0800c644 <_fstat_r>:
 800c644:	b538      	push	{r3, r4, r5, lr}
 800c646:	4d07      	ldr	r5, [pc, #28]	@ (800c664 <_fstat_r+0x20>)
 800c648:	2300      	movs	r3, #0
 800c64a:	4604      	mov	r4, r0
 800c64c:	4608      	mov	r0, r1
 800c64e:	4611      	mov	r1, r2
 800c650:	602b      	str	r3, [r5, #0]
 800c652:	f7f7 fe15 	bl	8004280 <_fstat>
 800c656:	1c43      	adds	r3, r0, #1
 800c658:	d102      	bne.n	800c660 <_fstat_r+0x1c>
 800c65a:	682b      	ldr	r3, [r5, #0]
 800c65c:	b103      	cbz	r3, 800c660 <_fstat_r+0x1c>
 800c65e:	6023      	str	r3, [r4, #0]
 800c660:	bd38      	pop	{r3, r4, r5, pc}
 800c662:	bf00      	nop
 800c664:	20002524 	.word	0x20002524

0800c668 <_isatty_r>:
 800c668:	b538      	push	{r3, r4, r5, lr}
 800c66a:	4d06      	ldr	r5, [pc, #24]	@ (800c684 <_isatty_r+0x1c>)
 800c66c:	2300      	movs	r3, #0
 800c66e:	4604      	mov	r4, r0
 800c670:	4608      	mov	r0, r1
 800c672:	602b      	str	r3, [r5, #0]
 800c674:	f7f7 fe14 	bl	80042a0 <_isatty>
 800c678:	1c43      	adds	r3, r0, #1
 800c67a:	d102      	bne.n	800c682 <_isatty_r+0x1a>
 800c67c:	682b      	ldr	r3, [r5, #0]
 800c67e:	b103      	cbz	r3, 800c682 <_isatty_r+0x1a>
 800c680:	6023      	str	r3, [r4, #0]
 800c682:	bd38      	pop	{r3, r4, r5, pc}
 800c684:	20002524 	.word	0x20002524

0800c688 <_init>:
 800c688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c68a:	bf00      	nop
 800c68c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c68e:	bc08      	pop	{r3}
 800c690:	469e      	mov	lr, r3
 800c692:	4770      	bx	lr

0800c694 <_fini>:
 800c694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c696:	bf00      	nop
 800c698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c69a:	bc08      	pop	{r3}
 800c69c:	469e      	mov	lr, r3
 800c69e:	4770      	bx	lr
